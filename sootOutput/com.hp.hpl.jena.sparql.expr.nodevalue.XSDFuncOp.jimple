public class com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp extends java.lang.Object
{
    private static final int DIVIDE_PRECISION;
    private static java.util.Set integerSubTypes;
    public static boolean strictDateTimeFO;
    public static final java.lang.String defaultTimezone;

    private void <init>()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue numAdd(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r4, $r5, $r9, $r13;
        java.math.BigDecimal $r6, $r7, $r8;
        int[] $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r3;
        int $i0, $i1;
        java.math.BigInteger $r10, $r11, $r12;
        java.lang.String $r21;
        double $d0, $d1, $d2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r14;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("add", r0, r1);

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r12 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r12);

        return $r13;

     label2:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r8 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r7);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r8);

        return $r9;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f2 = $f0 + $f1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f2);

        return $r5;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d2 = $d0 + $d1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d2);

        return $r4;

     label5:
        $r14 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r21);

        throw $r14;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue numSubtract(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r4, $r5, $r9, $r13;
        java.math.BigDecimal $r6, $r7, $r8;
        int[] $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r3;
        int $i0, $i1;
        java.math.BigInteger $r10, $r11, $r12;
        java.lang.String $r21;
        double $d0, $d1, $d2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r14;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("subtract", r0, r1);

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r12 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r12);

        return $r13;

     label2:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r8 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r7);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r8);

        return $r9;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f2 = $f0 - $f1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f2);

        return $r5;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d2 = $d0 - $d1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d2);

        return $r4;

     label5:
        $r14 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r21);

        throw $r14;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue numMultiply(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r4, $r5, $r9, $r13;
        java.math.BigDecimal $r6, $r7, $r8;
        int[] $r2;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r3;
        int $i0, $i1;
        java.math.BigInteger $r10, $r11, $r12;
        java.lang.String $r21;
        double $d0, $d1, $d2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r14;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("multiply", r0, r1);

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r12 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r12);

        return $r13;

     label2:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r8 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r7);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r8);

        return $r9;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f2 = $f0 * $f1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f2);

        return $r5;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d2 = $d0 * $d1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d2);

        return $r4;

     label5:
        $r14 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r21);

        throw $r14;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue numDivide(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        java.math.BigDecimal $r6, $r7, $r8, $r9, $r14, $r16;
        int[] $r2;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r11, $r19;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r3;
        java.math.BigInteger $r12, $r13, $r15, $r17;
        boolean $z0;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r20;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25, $r26;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r4, $r5, $r10, $r18;
        int $i0, $i1, $i2;
        java.lang.String $r27;
        double $d0, $d1, $d2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("divide", r0, r1);

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label1:
        $r12 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r13 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label2;

        $r19 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Divide by zero in divide");

        throw $r19;

     label2:
        $r14 = new java.math.BigDecimal;

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        specialinvoke $r14.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r15);

        $r16 = new java.math.BigDecimal;

        $r17 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        specialinvoke $r16.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r17);

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue decimalDivide(java.math.BigDecimal,java.math.BigDecimal)>($r14, $r16);

        return $r18;

     label3:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r7 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i2 = virtualinvoke $r6.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r7);

        if $i2 != 0 goto label4;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Divide by zero in decimal divide");

        throw $r11;

     label4:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue decimalDivide(java.math.BigDecimal,java.math.BigDecimal)>($r8, $r9);

        return $r10;

     label5:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f2 = $f0 / $f1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f2);

        return $r5;

     label6:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d2 = $d0 / $d1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d2);

        return $r4;

     label7:
        $r20 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : (");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r27);

        throw $r20;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue decimalDivide(java.math.BigDecimal, java.math.BigDecimal)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3, $r6;
        java.math.BigDecimal r0, r1, $r2, $r5;
        java.lang.ArithmeticException $r4;
        double $d0, $d1, $d2;

        r0 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.math.BigDecimal;

     label1:
        $r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>(r1, 24, 3);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue messAroundWithBigDecimalFormat(java.math.BigDecimal)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/nodevalue/XSDFuncOp;", "ArithmeticException in decimal divide - attempting to treat as doubles");

        $r5 = new java.math.BigDecimal;

        $d0 = virtualinvoke r0.<java.math.BigDecimal: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.math.BigDecimal: double doubleValue()>();

        $d2 = $d0 / $d1;

        specialinvoke $r5.<java.math.BigDecimal: void <init>(double)>($d2);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r5);

        return $r6;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue messAroundWithBigDecimalFormat(java.math.BigDecimal)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3, $r5;
        java.math.BigDecimal r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, $i8, $i10;
        java.lang.String $r1, r6;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2, $r4;
        char $c6;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.lang.String toPlainString()>();

        r6 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        if $i0 >= 0 goto label1;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r1, $r4);

        return $r5;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i7 = $i1 - 1;

     label2:
        $i2 = $i0 + 1;

        if i7 <= $i2 goto label3;

        $c6 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c6;

        if $i8 != 48 goto label3;

        $i10 = (int) -1;

        i7 = i7 + $i10;

        goto label2;

     label3:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if i7 >= $i4 goto label4;

        $i5 = i7 + 1;

        r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label4:
        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r6, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue max(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        int $i0, $i2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareNumeric(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return r1;

     label1:
        return r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue min(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i0;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareNumeric(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if $i0 != 1 goto label1;

        return r1;

     label1:
        return r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue not(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z1);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue booleanEffectiveValueAsNodeValue(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z1);

        return $r1;
    }

    public static boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.math.BigDecimal $r6, $r7;
        byte $b0;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        int $i1;
        java.math.BigInteger $r8, $r9;
        java.lang.String $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        double $d0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z0 == 0 goto label01;

        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        return $z7;

     label01:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z1 == 0 goto label04;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 <= 0 goto label02;

        $z8 = 1;

        goto label03;

     label02:
        $z8 = 0;

     label03:
        return $z8;

     label04:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z2 == 0 goto label07;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r9 = <com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger IntegerZERO>;

        $z6 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z6 != 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        return $z9;

     label07:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z3 == 0 goto label10;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r7 = <com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal DecimalZERO>;

        $z5 = virtualinvoke $r6.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r7);

        if $z5 != 0 goto label08;

        $z10 = 1;

        goto label09;

     label08:
        $z10 = 0;

     label09:
        return $z10;

     label10:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z4 == 0 goto label13;

        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        return $z11;

     label13:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a boolean effective value (wrong type): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: void raise(com.hp.hpl.jena.sparql.expr.ExprException)>($r1);

        return 0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue unaryMinus(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r7, $r10;
        java.math.BigDecimal $r5, $r6;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.math.BigInteger $r8, $r9;
        java.lang.String $r15;
        double $d0, $d1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r11;
        float $f0, $f1;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("unaryMinus", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r9);

        return $r10;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r6);

        return $r7;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = neg $f0;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f1);

        return $r4;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = neg $d0;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label5:
        $r11 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r15);

        throw $r11;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue unaryPlus(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("unaryPlus", r0);

        return r0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue abs(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r7, $r10;
        java.math.BigDecimal $r5, $r6;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.math.BigInteger $r8, $r9;
        java.lang.String $r15;
        double $d0, $d1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r11;
        float $f0, $f1;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("abs", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r9);

        return $r10;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r6);

        return $r7;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f1);

        return $r4;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label5:
        $r11 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r15);

        throw $r11;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue ceiling(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r7;
        java.math.BigDecimal $r5, $r6;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.lang.String $r12;
        double $d0, $d1, $d2, $d3;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r8;
        float $f0, $f1;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("ceiling", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return r0;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(0, 2);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r6);

        return $r7;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $d2 = (double) $f0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $f1 = (float) $d3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f1);

        return $r4;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label5:
        $r8 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue floor(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r7;
        java.math.BigDecimal $r5, $r6;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.lang.String $r12;
        double $d0, $d1, $d2, $d3;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r8;
        float $f0, $f1;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("floor", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return r0;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(0, 3);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r6);

        return $r7;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $d2 = (double) $f0;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $f1 = (float) $d3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f1);

        return $r4;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label5:
        $r8 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue round(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r7;
        long $l2;
        java.math.BigDecimal $r5, $r6, $r8, r14;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r13;
        double $d0, $d1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r9;
        float $f0, $f1;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("round", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label1:
        return r0;

     label2:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $i4 = virtualinvoke $r5.<java.math.BigDecimal: int signum()>();

        if $i4 >= 0 goto label3;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        r14 = virtualinvoke $r8.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(0, 5);

        goto label4;

     label3:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        r14 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(0, 4);

     label4:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>(r14);

        return $r7;

     label5:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f1 = (float) $i3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeFloat(float)>($f1);

        return $r4;

     label6:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $d1 = (double) $l2;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label7:
        $r9 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue sqrt(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3, $r4, $r6;
        java.math.BigDecimal $r5;
        int[] $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1;
        java.lang.String $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("sqrt", r0);

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            default: goto label4;
        };

     label1:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $d4 = virtualinvoke $r5.<java.math.BigDecimal: double doubleValue()>();

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(double)>($d5);

        return $r6;

     label2:
        $d2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d3);

        return $r4;

     label3:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDouble(double)>($d1);

        return $r3;

     label4:
        $r7 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue javaSubstring(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue javaSubstring(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1, null);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue javaSubstring(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        java.lang.IndexOutOfBoundsException $r10;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, r4, $r7, $r9;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r11;
        int $i0, $i1;
        java.math.BigInteger $r3, $r5;
        java.lang.String $r1, $r6, $r8;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        if r4 != null goto label3;

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r8);

     label2:
        return $r9;

     label3:
        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $i1 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r6);

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String,java.lang.Throwable)>("IndexOutOfBounds", $r10);

        throw $r11;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strlen(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r3;
        int $i0;
        long $l1;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("strlen", r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $l1 = (long) $i0;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(long)>($l1);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r3, r4, r6, $r7;
        com.hp.hpl.jena.graph.Node $r1, $r8;
        int i0;
        java.lang.String $r2, $r9;
        java.util.regex.Pattern $r5;

        r4 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r6 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter3: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("replace", r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        i0 = 0;

        if r3 == null goto label1;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("replace", r3);

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.RegexJava: int makeMask(java.lang.String)>($r9);

     label1:
        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r2, i0);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue,java.util.regex.Pattern,com.hp.hpl.jena.sparql.expr.NodeValue)>(r4, $r5, r6);

        return $r7;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue, java.util.regex.Pattern, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r3, $r10;
        com.hp.hpl.jena.graph.Node $r1, $r4, $r9;
        java.util.regex.Matcher $r7;
        java.lang.String $r2, $r5, $r8;
        java.util.regex.Pattern r6;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r6 := @parameter1: java.util.regex.Pattern;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("replace", r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("replace", r3);

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r7 = virtualinvoke r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r5);

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r8, $r9);

        return $r10;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1, r2, null);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue substring(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue substring(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1, null);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue substring(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        java.lang.IndexOutOfBoundsException $r8;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r3, r4, $r6, $r7;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9, i10, $i12, $i14;
        java.lang.String $r2, $r5;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("substring", r0);

        virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

     label01:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int intValueStr(com.hp.hpl.jena.sparql.expr.NodeValue,int)>(r3, $i1);

        i6 = $i2;

        if r4 == null goto label02;

        i7 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int intValueStr(com.hp.hpl.jena.sparql.expr.NodeValue,int)>(r4, 0);

        goto label03;

     label02:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        i7 = $i3;

        if $i2 >= 0 goto label03;

        i7 = $i3 - $i2;

     label03:
        $i8 = $i2 + i7;

        if $i2 > 0 goto label04;

        i6 = 1;

     label04:
        $i12 = (int) -1;

        i9 = i6 + $i12;

        $i14 = (int) -1;

        i10 = $i8 + $i14;

        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i10 <= $i4 goto label05;

        i10 = virtualinvoke $r2.<java.lang.String: int length()>();

     label05:
        if i10 >= i9 goto label06;

        i10 = i9;

     label06:
        if i10 >= 0 goto label07;

        i10 = 0;

     label07:
        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i5 != 0 goto label09;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>("", $r1);

     label08:
        return $r7;

     label09:
        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i9, i10);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r5, $r1);

     label10:
        return $r6;

     label11:
        $r8 := @caughtexception;

        $r10 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String,java.lang.Throwable)>("IndexOutOfBounds", $r8);

        throw $r10;

        catch java.lang.IndexOutOfBoundsException from label01 to label08 with label11;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label11;
    }

    private static int intValueStr(com.hp.hpl.jena.sparql.expr.NodeValue, int)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        long $l0, $l4;
        java.math.BigDecimal $r6;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        int $i1, i2, $i3, $i5, $i6;
        java.math.BigInteger $r7;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double $d0, $d1;
        float $f0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        i2 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $i6 = virtualinvoke $r7.<java.math.BigInteger: int intValue()>();

        return $i6;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $d1 = virtualinvoke $r6.<java.math.BigDecimal: double doubleValue()>();

        $l4 = staticinvoke <java.lang.Math: long round(double)>($d1);

        $i5 = (int) $l4;

        return $i5;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z2 == 0 goto label4;

        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $z5 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z5 == 0 goto label3;

        return i2;

     label3:
        $i3 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i3;

     label4:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z3 == 0 goto label6;

        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z4 == 0 goto label5;

        return i2;

     label5:
        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i1 = (int) $l0;

        return $i1;

     label6:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strContains(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r6;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: void checkTwoArgumentStringLiterals(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("contains", r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: boolean contains(java.lang.String,java.lang.String)>($r3, $r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strStartsWith(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r6;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: void checkTwoArgumentStringLiterals(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("strStarts", r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strEndsWith(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r6;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: void checkTwoArgumentStringLiterals(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("strEnds", r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r6;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r5;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.String r0, $r2;
        com.hp.hpl.jena.graph.Node r1, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, $r2, $r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strBefore(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r9, $r10, $r11;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6, $r8;
        int $i0, $i1;
        java.lang.String $r3, $r5, $r7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: void checkTwoArgumentStringLiterals(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("strBefore", r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>("", $r6);

        return $r11;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r5);

        if $i1 >= 0 goto label2;

        $r10 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvEmptyString>;

        return $r10;

     label2:
        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r7, $r8);

        return $r9;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strAfter(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r9, $r10, $r11;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6, $r8;
        int $i0, $i1, $i2, i3;
        java.lang.String $r3, $r5, $r7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: void checkTwoArgumentStringLiterals(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("strAfter", r0, r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r3, $r6);

        return $r11;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r5);

        if $i1 >= 0 goto label2;

        $r10 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvEmptyString>;

        return $r10;

     label2:
        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        i3 = $i1 + $i2;

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(i3);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r7, $r8);

        return $r9;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strLowerCase(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.graph.Node $r1, $r4;
        java.lang.String $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("lcase", r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r3, $r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strUpperCase(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.graph.Node $r1, $r4;
        java.lang.String $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("ucase", r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue calcReturn(java.lang.String,com.hp.hpl.jena.graph.Node)>($r3, $r4);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strEncodeForURI(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r6;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r8;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2, $r7;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r9, $r10;
        java.lang.String $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r10 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a literal");

        throw $r10;

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r2 == null goto label2;

        $r7 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r8 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

        $r9 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a string literal");

        throw $r9;

     label2:
        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r4 = staticinvoke <org.apache.jena.riot.system.IRILib: java.lang.String encodeUriComponent(java.lang.String)>($r3);

        $r5 = staticinvoke <org.apache.jena.riot.system.IRILib: java.lang.String encodeNonASCII(java.lang.String)>($r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r5);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue fnConcat(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, r6;
        java.util.Iterator $r2;
        java.util.List r1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5;
        java.lang.String $r3, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r5;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue strConcat(java.util.List)
    {
        com.hp.hpl.jena.graph.Node $r20;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7, z8, z9, z10, z11;
        java.util.List r1;
        java.lang.StringBuilder $r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r6, $r9, $r11, $r13, $r15, $r17, r19;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r14, $r16, $r21, r23, $r24;
        java.util.Iterator $r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r8;
        com.hp.hpl.jena.datatypes.RDFDatatype $r22;
        java.lang.Object $r18;

        r1 := @parameter0: java.util.List;

        r23 = null;

        z3 = 0;

        z4 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        z5 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r18 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r18;

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("CONCAT", r19);

        $r21 = virtualinvoke $r20.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label03;

        if r23 == null goto label02;

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z2 != 0 goto label02;

        z3 = 1;

     label02:
        r23 = $r21;

        goto label05;

     label03:
        $r22 = virtualinvoke $r20.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r22 == null goto label04;

        z4 = 1;

        z11 = 1;

        z10 = 1;

        z9 = 1;

        goto label05;

     label04:
        z5 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label05:
        $r24 = virtualinvoke $r20.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        goto label01;

     label06:
        if z3 == 0 goto label07;

        $r16 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r16);

        return $r17;

     label07:
        if r23 == null goto label09;

        if z9 != 0 goto label08;

        if z8 != 0 goto label08;

        $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r14, r23, null);

        return $r15;

     label08:
        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r12);

        return $r13;

     label09:
        if z6 == 0 goto label10;

        if z10 == 0 goto label10;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r10);

        return $r11;

     label10:
        if z11 == 0 goto label11;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r7, $r8);

        return $r9;

     label11:
        if z7 == 0 goto label12;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r5);

        return $r6;

     label12:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r2, $r10, $r18, $r27, $r37;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r28, $r29, $r30, $r31, $r32, $r38, $r39, $r40, $r41, $r42, $r49, $r50, $r51, $r52, $r53, $r56, $r57, $r58, $r59, $r60;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        java.lang.String r5, $r9, $r16, $r24, $r33, $r43, $r54, $r61;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r48, $r55;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r17, $r25, $r26, $r34, $r35, $r36, $r44, $r45, $r46, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z0 != 0 goto label01;

        $r55 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number (first arg to ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r61);

        throw $r55;

     label01:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z1 != 0 goto label02;

        $r48 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number (second arg to ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r54);

        throw $r48;

     label02:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z2 == 0 goto label07;

        $z12 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z12 == 0 goto label03;

        $r47 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_INTEGER>;

        return $r47;

     label03:
        $z13 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z13 == 0 goto label04;

        $r46 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DECIMAL>;

        return $r46;

     label04:
        $z14 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z14 == 0 goto label05;

        $r45 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_FLOAT>;

        return $r45;

     label05:
        $z15 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z15 == 0 goto label06;

        $r44 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DOUBLE>;

        return $r44;

     label06:
        $r37 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (second arg to ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r43);

        throw $r37;

     label07:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z3 == 0 goto label11;

        $z9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z9 == 0 goto label08;

        $r36 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DECIMAL>;

        return $r36;

     label08:
        $z10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z10 == 0 goto label09;

        $r35 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_FLOAT>;

        return $r35;

     label09:
        $z11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z11 == 0 goto label10;

        $r34 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DOUBLE>;

        return $r34;

     label10:
        $r27 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (second arg to ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label11:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z4 == 0 goto label14;

        $z7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z7 == 0 goto label12;

        $r26 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_FLOAT>;

        return $r26;

     label12:
        $z8 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z8 == 0 goto label13;

        $r25 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DOUBLE>;

        return $r25;

     label13:
        $r18 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (second arg to ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label14:
        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z5 == 0 goto label16;

        $z6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z6 == 0 goto label15;

        $r17 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DOUBLE>;

        return $r17;

     label15:
        $r10 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (second arg to ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label16:
        $r2 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (first arg to ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r13;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r9, $r10, $r11, $r12;
        java.lang.String r4, $r8, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r14, $r15, $r16, $r17, $r18;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isNumber()>();

        if $z0 != 0 goto label1;

        $r13 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z1 == 0 goto label2;

        $r12 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_INTEGER>;

        return $r12;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDecimal()>();

        if $z2 == 0 goto label3;

        $r11 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DECIMAL>;

        return $r11;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isFloat()>();

        if $z3 == 0 goto label4;

        $r10 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_FLOAT>;

        return $r10;

     label4:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDouble()>();

        if $z4 == 0 goto label5;

        $r9 = <com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType OP_DOUBLE>;

        return $r9;

     label5:
        $r1 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric op unrecognized (");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    public static boolean isNumericType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isDecimalType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0);

        return $z2;
    }

    public static boolean isDecimalType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isIntegerType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r0);

        return $z1;
    }

    public static boolean isIntegerType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        java.util.Set $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    private static int calcReturn(int)
    {
        int i0, $i2;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        if i0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int compareNumeric(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        java.math.BigDecimal $r4, $r5;
        int[] $r3;
        com.hp.hpl.jena.sparql.expr.nodevalue.NumericType $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.math.BigInteger $r6, $r7;
        java.lang.String $r15;
        double $d0, $d1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r8;
        float $f0, $f1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.nodevalue.NumericType classifyNumeric(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>("compareNumeric", r0, r1);

        $r3 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$nodevalue$NumericType>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.nodevalue.NumericType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $i8 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        $i9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int calcReturn(int)>($i8);

        return $i9;

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $i6 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r5);

        $i7 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int calcReturn(int)>($i6);

        return $i7;

     label3:
        $f0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $f1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: float getFloat()>();

        $i4 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);

        $i5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int calcReturn(int)>($i4);

        return $i5;

     label4:
        $d0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $d1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: double getDouble()>();

        $i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        $i3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int calcReturn(int)>($i2);

        return $i3;

     label5:
        $r8 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized numeric operation : (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ,");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r15);

        throw $r8;
    }

    public static int compareString(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        int $i0, $i1;
        java.lang.String $r1, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int calcReturn(int)>($i0);

        return $i1;
    }

    public static int compareDateTime(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        int $i0, $i1;
        javax.xml.datatype.XMLGregorianCalendar $r1, $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean strictDateTimeFO>;

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDateTimeFO(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareXSDDateTime(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.XMLGregorianCalendar)>($r1, $r3);

        return $i0;
    }

    public static int compareDuration(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2;
        javax.xml.datatype.Duration $r1, $r3;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareDuration(javax.xml.datatype.Duration,javax.xml.datatype.Duration)>($r1, $r3);

        return $i0;
    }

    public static int compareGYear(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i1 = (int) -99;

        return $i1;
    }

    public static int compareGYearMonth(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i1 = (int) -99;

        return $i1;
    }

    public static int compareGMonth(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i1 = (int) -99;

        return $i1;
    }

    public static int compareGMonthDay(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i1 = (int) -99;

        return $i1;
    }

    public static int compareGDay(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        int $i1;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i1 = (int) -99;

        return $i1;
    }

    private static int compareDateTimeFO(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r4, $r5;
        javax.xml.datatype.XMLGregorianCalendar $r1, $r3, $r7, $r9;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6, $r8, $r10;
        int $i0, $i1, $i2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareXSDDateTime(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.XMLGregorianCalendar)>($r1, $r3);

        if $i0 != 2 goto label5;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue fixupDateTime(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        if $r4 == null goto label2;

        $r9 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareXSDDateTime(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.XMLGregorianCalendar)>($r9, $r3);

        if $i2 != 2 goto label1;

        $r10 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Still get indeterminate comparison");

        throw $r10;

     label1:
        return $i2;

     label2:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue fixupDateTime(com.hp.hpl.jena.sparql.expr.NodeValue)>(r2);

        if $r5 == null goto label4;

        $r7 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int compareXSDDateTime(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.XMLGregorianCalendar)>($r1, $r7);

        if $i1 != 2 goto label3;

        $r8 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Still get indeterminate comparison");

        throw $r8;

     label3:
        return $i1;

     label4:
        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Failed to fixup dateTimes");

        throw $r6;

     label5:
        return $i0;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue fixupDateTime(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r5, r7;
        com.hp.hpl.jena.graph.Node $r0;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        java.lang.String $r1, $r3, $r4;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r2;
        boolean $z0;

        r7 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = virtualinvoke r7.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseDateTime(java.lang.String)>($r1);

        $r3 = $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r3 == null goto label1;

        return null;

     label1:
        $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = "Z";

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String toString()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(java.lang.String)>($r4);

        $z0 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Failed to reform an xsd:dateTime");

        throw $r6;

     label2:
        return $r5;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue fixupDate(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r5, r7;
        com.hp.hpl.jena.graph.Node $r0;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        java.lang.String $r1, $r3, $r4;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r2;
        boolean $z0;

        r7 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r0 = virtualinvoke r7.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseDate(java.lang.String)>($r1);

        $r3 = $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r3 == null goto label1;

        return null;

     label1:
        $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = "Z";

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String toString()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDate(java.lang.String)>($r4);

        $z0 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z0 != 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Failed to reform an xsd:date");

        throw $r6;

     label2:
        return $r5;
    }

    private static int compareXSDDateTime(javax.xml.datatype.XMLGregorianCalendar, javax.xml.datatype.XMLGregorianCalendar)
    {
        int $i0, $i1;
        javax.xml.datatype.XMLGregorianCalendar r0, r1;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        r1 := @parameter1: javax.xml.datatype.XMLGregorianCalendar;

        $i0 = virtualinvoke r0.<javax.xml.datatype.XMLGregorianCalendar: int compare(javax.xml.datatype.XMLGregorianCalendar)>(r1);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int convertComparison(int)>($i0);

        return $i1;
    }

    private static int compareDuration(javax.xml.datatype.Duration, javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r0, r1;
        int $i0, $i1;

        r0 := @parameter0: javax.xml.datatype.Duration;

        r1 := @parameter1: javax.xml.datatype.Duration;

        $i0 = virtualinvoke r0.<javax.xml.datatype.Duration: int compare(javax.xml.datatype.Duration)>(r1);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int convertComparison(int)>($i0);

        return $i1;
    }

    private static int convertComparison(int)
    {
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        int i0, $i2, $i4;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i2 = (int) -1;

        if i0 != $i2 goto label2;

        $i4 = (int) -1;

        return $i4;

     label2:
        if i0 != 1 goto label3;

        return 1;

     label3:
        if i0 != 2 goto label4;

        return 2;

     label4:
        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected return from XSDDuration.compare: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static int compareBoolean(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r10;
        int $i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        if $z0 != $z1 goto label1;

        return 0;

     label1:
        if $z0 != 0 goto label2;

        if $z1 == 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        if $z0 == 0 goto label3;

        if $z1 != 0 goto label3;

        return 1;

     label3:
        $r10 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Weird boolean comparison: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r8);

        throw $r10;
    }

    public static boolean dateTimeCastCompatible(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean hasDateTime()>();

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dateTimeCast(com.hp.hpl.jena.sparql.expr.NodeValue, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2, $r3;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        java.lang.String r0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue dateTimeCast(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.datatypes.RDFDatatype)>(r2, $r1);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dateTimeCast(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2, $r3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r4;
        com.hp.hpl.jena.datatypes.RDFDatatype r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r0 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $z0 = r0 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        if $z0 != 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSDDatatype: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        r1 = (com.hp.hpl.jena.datatypes.xsd.XSDDatatype) r0;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue dateTimeCast(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r2, r1);

        return $r3;
    }

    private static java.lang.String tzStrFromNV(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        java.lang.String r2;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        if $r1 != null goto label1;

        return "";

     label1:
        r2 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if r2 != null goto label2;

        r2 = "";

     label2:
        return r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dateTimeCast(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        java.lang.Integer $r20, $r29, $r30, $r39, $r48, $r49, $r58, $r82, $r83, $r84, $r94, $r95, $r96;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r24, $r25, $r26, $r34, $r35, $r36, $r43, $r44, $r45, $r53, $r54, $r55, $r62, $r63, $r64, $r76, $r77, $r78, $r88, $r89, $r90, $r100, $r101, $r102, $r105, $r106, $r107;
        java.lang.Object[] $r19, $r28, $r38, $r47, $r57, $r68, $r81, $r93;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r11, $r23, $r33, $r42, $r52, $r61, $r75, $r87, $r99, $r104;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r66;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r22, $r32, $r41, $r51, $r60, $r74, $r86, $r98;
        java.lang.String $r14, $r18, $r21, $r27, $r31, $r37, $r40, $r46, $r50, $r56, $r59, $r65, $r67, $r69, $r70, $r71, $r72, $r73, $r79, $r80, $r85, $r91, $r92, $r97, $r103, $r108;
        javax.xml.datatype.XMLGregorianCalendar $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean hasDateTime()>();

        if $z0 != 0 goto label01;

        $r104 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a date/time type: ");

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r104.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r108);

        throw $r104;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label04;

        $z28 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z28 == 0 goto label02;

        return r0;

     label02:
        $z29 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z29 != 0 goto label03;

        $r99 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:dateTime: ");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r99.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r103);

        throw $r99;

     label03:
        $r92 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.lang.String tzStrFromNV(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r93 = newarray (java.lang.Object)[4];

        $i10 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getYear()>();

        $r94 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r93[0] = $r94;

        $i11 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>();

        $r95 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r93[1] = $r95;

        $i12 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getDay()>();

        $r96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r93[2] = $r96;

        $r93[3] = $r92;

        $r97 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d-%02d-%02dT00:00:00%s", $r93);

        $r98 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r97, r2);

        return $r98;

     label04:
        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdate>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label07;

        $z26 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z26 == 0 goto label05;

        return r0;

     label05:
        $z27 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z27 != 0 goto label06;

        $r87 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:date: ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r87.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r91);

        throw $r87;

     label06:
        $r80 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.lang.String tzStrFromNV(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r81 = newarray (java.lang.Object)[4];

        $i7 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getYear()>();

        $r82 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r81[0] = $r82;

        $i8 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>();

        $r83 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r81[1] = $r83;

        $i9 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getDay()>();

        $r84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r81[2] = $r84;

        $r81[3] = $r80;

        $r85 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d-%02d-%02d%s", $r81);

        $r86 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r85, r2);

        return $r86;

     label07:
        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label11;

        $z24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isTime()>();

        if $z24 == 0 goto label08;

        return r0;

     label08:
        $z25 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z25 != 0 goto label09;

        $r75 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:time: ");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r79);

        throw $r75;

     label09:
        $r66 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r67 = $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r67 != null goto label10;

        $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = "";

     label10:
        $r68 = newarray (java.lang.Object)[4];

        $r69 = $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String hour>;

        $r68[0] = $r69;

        $r70 = $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String minute>;

        $r68[1] = $r70;

        $r71 = $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second>;

        $r68[2] = $r71;

        $r72 = $r66.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $r68[3] = $r72;

        $r73 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s:%s%s", $r68);

        $r74 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r73, r2);

        return $r74;

     label11:
        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYear>;

        $z4 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label14;

        $z21 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYear()>();

        if $z21 == 0 goto label12;

        return r0;

     label12:
        $z22 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z22 != 0 goto label13;

        $z23 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z23 != 0 goto label13;

        $r61 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:gYear: ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r65);

        throw $r61;

     label13:
        $r57 = newarray (java.lang.Object)[1];

        $i6 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getYear()>();

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r57[0] = $r58;

        $r59 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d", $r57);

        $r60 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r59, r2);

        return $r60;

     label14:
        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgYearMonth>;

        $z5 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label17;

        $z18 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z18 == 0 goto label15;

        return r0;

     label15:
        $z19 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z19 != 0 goto label16;

        $z20 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z20 != 0 goto label16;

        $r52 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:gYearMonth: ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r56);

        throw $r52;

     label16:
        $r47 = newarray (java.lang.Object)[2];

        $i4 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getYear()>();

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r47[0] = $r48;

        $i5 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>();

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r47[1] = $r49;

        $r50 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d-%02d", $r47);

        $r51 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r50, r2);

        return $r51;

     label17:
        $r8 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonth>;

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label20;

        $z15 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonth()>();

        if $z15 == 0 goto label18;

        return r0;

     label18:
        $z16 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z16 != 0 goto label19;

        $z17 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z17 != 0 goto label19;

        $r42 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:gMonth: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r46);

        throw $r42;

     label19:
        $r38 = newarray (java.lang.Object)[1];

        $i3 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>();

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r38[0] = $r39;

        $r40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("--%02d", $r38);

        $r41 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r40, r2);

        return $r41;

     label20:
        $r9 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgMonthDay>;

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label23;

        $z12 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z12 == 0 goto label21;

        return r0;

     label21:
        $z13 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z13 != 0 goto label22;

        $z14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z14 != 0 goto label22;

        $r33 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:gMonthDay: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label22:
        $r28 = newarray (java.lang.Object)[2];

        $i1 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getMonth()>();

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r28[0] = $r29;

        $i2 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getDay()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r28[1] = $r30;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("--%02d-%02d", $r28);

        $r32 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r31, r2);

        return $r32;

     label23:
        $r10 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDgDay>;

        $z8 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z8 == 0 goto label26;

        $z9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGDay()>();

        if $z9 == 0 goto label24;

        return r0;

     label24:
        $z10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z10 != 0 goto label25;

        $z11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z11 != 0 goto label25;

        $r23 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t cast to XSD:gDay: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label25:
        $r19 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke $r1.<javax.xml.datatype.XMLGregorianCalendar: int getDay()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("---%02d", $r19);

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r21, r2);

        return $r22;

     label26:
        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t case to <");

        $r14 = virtualinvoke r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r18);

        throw $r11;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetYear(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYear()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z3 == 0 goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year>;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r4);

        return $r5;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a year datatype");

        throw $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetMonth(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonth()>();

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z4 == 0 goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String month>;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r4);

        return $r5;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a month datatype");

        throw $r1;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetDay(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r5;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r4;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGDay()>();

        if $z3 == 0 goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String day>;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r4);

        return $r5;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a month datatype");

        throw $r1;
    }

    private static com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseDateTime(java.lang.String)>($r2);

        return $r10;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDate()>();

        if $z1 == 0 goto label2;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseDate(java.lang.String)>($r2);

        return $r9;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYear()>();

        if $z2 == 0 goto label3;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseGYear(java.lang.String)>($r2);

        return $r8;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGYearMonth()>();

        if $z3 == 0 goto label4;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseGYearMonth(java.lang.String)>($r2);

        return $r7;

     label4:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonth()>();

        if $z4 == 0 goto label5;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseGMonth(java.lang.String)>($r2);

        return $r6;

     label5:
        $z5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGMonthDay()>();

        if $z5 == 0 goto label6;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseGMonthDay(java.lang.String)>($r2);

        return $r5;

     label6:
        $z6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isGDay()>();

        if $z6 == 0 goto label7;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseGDay(java.lang.String)>($r2);

        return $r4;

     label7:
        $z7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isTime()>();

        if $z7 == 0 goto label8;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(java.lang.String)>($r2);

        return $r3;

     label8:
        return null;
    }

    private static com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r3;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node getNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isDateTime()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseDateTime(java.lang.String)>($r2);

        return $r5;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isTime()>();

        if $z1 == 0 goto label2;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(java.lang.String)>($r2);

        return $r4;

     label2:
        $r3 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not a datatype for time");

        throw $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetHours(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String hour>;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r2);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetMinutes(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String minute>;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r2);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetSeconds(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        $r3 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second>;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r3, $r2);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetTZ(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r2, $r3, $r10;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        if $r1 != null goto label1;

        $r6 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a data/time value: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r2 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r2 != null goto label2;

        $r5 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvEmptyString>;

        return $r5;

     label2:
        $r3 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r3);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue dtGetTimezone(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node $r20, $r23, $r26;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r30;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r29, $r31;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r18, $r21, $r24, $r27;
        int $i1;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, r28;
        char $c0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r19, $r22, $r25;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.util.DateTimeStruct parseAnyDT(com.hp.hpl.jena.sparql.expr.NodeValue)>(r0);

        if $r1 == null goto label1;

        $r7 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r7 != null goto label2;

     label1:
        $r30 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a datatype with a timezone: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r6);

        throw $r30;

     label2:
        $r9 = "";

        $r8 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

        return null;

     label3:
        $r11 = "Z";

        $r10 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label4;

        $r25 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>("http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        $r26 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>("PT0S", null, $r25);

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r26);

        return $r27;

     label4:
        $r13 = "+00:00";

        $r12 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label5;

        $r22 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>("http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        $r23 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>("PT0S", null, $r22);

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r23);

        return $r24;

     label5:
        $r15 = "-00:00";

        $r14 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label6;

        $r19 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.datatypes.RDFDatatype getType(java.lang.String)>("http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        $r20 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>("-PT0S", null, $r19);

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r20);

        return $r21;

     label6:
        r28 = $r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke r28.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 45 goto label7;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label7:
        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PT");

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: void digitsTwo(java.lang.String,int,java.lang.StringBuilder,char)>(r28, 1, $r31, 72);

        staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: void digitsTwo(java.lang.String,int,java.lang.StringBuilder,char)>(r28, 4, $r31, 77);

        $r17 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,java.lang.String,java.lang.String)>($r17, null, "http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        return $r18;
    }

    private static void digitsTwo(java.lang.String, int, java.lang.StringBuilder, char)
    {
        char $c0, $c1, $c2, c3, $c4, $c5;
        int i6, i7, i8, $i9, $i10;
        java.lang.StringBuilder r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuilder;

        c3 := @parameter3: char;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i9 = (int) $c0;

        if $i9 != 48 goto label2;

        i7 = i6 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c4;

        if $i10 == 48 goto label1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label1:
        goto label3;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i8 = i6 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label3:
        return;
    }

    public static boolean isYearMonth(javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r0;
        javax.xml.datatype.DatatypeConstants$Field $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: javax.xml.datatype.Duration;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field YEARS>;

        $z0 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r1);

        if $z0 != 0 goto label1;

        $r6 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MONTHS>;

        $z5 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r6);

        if $z5 == 0 goto label2;

     label1:
        $r2 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field DAYS>;

        $z1 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r2);

        if $z1 != 0 goto label2;

        $r3 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field HOURS>;

        $z2 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r3);

        if $z2 != 0 goto label2;

        $r4 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MINUTES>;

        $z3 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r4);

        if $z3 != 0 goto label2;

        $r5 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $z4 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r5);

        if $z4 != 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }

    public static boolean isDayTime(javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r0;
        javax.xml.datatype.DatatypeConstants$Field $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: javax.xml.datatype.Duration;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field YEARS>;

        $z0 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r1);

        if $z0 != 0 goto label2;

        $r2 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MONTHS>;

        $z1 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r2);

        if $z1 != 0 goto label2;

        $r3 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field DAYS>;

        $z2 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r3);

        if $z2 != 0 goto label1;

        $r4 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field HOURS>;

        $z3 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r4);

        if $z3 != 0 goto label1;

        $r5 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MINUTES>;

        $z4 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r5);

        if $z4 != 0 goto label1;

        $r6 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $z5 = virtualinvoke r0.<javax.xml.datatype.Duration: boolean isSet(javax.xml.datatype.DatatypeConstants$Field)>($r6);

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetYears(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field YEARS>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetMonths(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MONTHS>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetDays(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field DAYS>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetHours(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field HOURS>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetMinutes(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field MINUTES>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetSeconds(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.DatatypeConstants$Field $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue,javax.xml.datatype.DatatypeConstants$Field)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue durGetSign(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        javax.xml.datatype.Duration $r1;
        int $i0;
        long $l1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $i0 = virtualinvoke $r1.<javax.xml.datatype.Duration: int getSign()>();

        $l1 = (long) $i0;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(long)>($l1);

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.expr.NodeValue accessDuration(com.hp.hpl.jena.sparql.expr.NodeValue, javax.xml.datatype.DatatypeConstants$Field)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r6, $r8;
        java.math.BigDecimal $r7;
        javax.xml.datatype.Duration $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r9;
        java.math.BigInteger $r5;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        javax.xml.datatype.DatatypeConstants$Field r2, $r4;
        java.lang.Number $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: javax.xml.datatype.DatatypeConstants$Field;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r3 = virtualinvoke $r1.<javax.xml.datatype.Duration: java.lang.Number getField(javax.xml.datatype.DatatypeConstants$Field)>(r2);

        if $r3 != null goto label1;

        $r9 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid field of a duration: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r4 = <javax.xml.datatype.DatatypeConstants: javax.xml.datatype.DatatypeConstants$Field SECONDS>;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r7 = (java.math.BigDecimal) $r3;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDecimal(java.math.BigDecimal)>($r7);

        return $r8;

     label2:
        $r5 = (java.math.BigInteger) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeInteger(java.math.BigInteger)>($r5);

        return $r6;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        java.util.Set $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.lang.String defaultTimezone> = "Z";

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: int DIVIDE_PRECISION> = 24;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes> = $r0;

        $r2 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDint>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r4 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDlong>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r6 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDshort>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r8 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r7 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDbyte>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r10 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r9 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDunsignedByte>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r12 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r11 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDunsignedShort>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r14 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r13 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDunsignedInt>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r13);

        $r16 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r15 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDunsignedLong>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r18 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r17 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r17);

        $r20 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r19 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDnonPositiveInteger>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r19);

        $r22 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r21 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDnonNegativeInteger>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>($r21);

        $r24 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r23 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDpositiveInteger>;

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>($r23);

        $r26 = <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: java.util.Set integerSubTypes>;

        $r25 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDnegativeInteger>;

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r25);

        <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean strictDateTimeFO> = 0;

        return;
    }
}
