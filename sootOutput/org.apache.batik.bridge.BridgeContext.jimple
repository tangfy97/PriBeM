public class org.apache.batik.bridge.BridgeContext extends java.lang.Object implements org.apache.batik.bridge.ErrorConstants, org.apache.batik.css.engine.CSSContext
{
    protected org.w3c.dom.Document document;
    protected boolean isSVG12;
    protected org.apache.batik.bridge.GVTBuilder gvtBuilder;
    protected java.util.Map interpreterMap;
    private java.util.Map fontFamilyMap;
    protected java.util.Map viewportMap;
    protected java.util.List viewportStack;
    protected org.apache.batik.bridge.UserAgent userAgent;
    protected java.util.Map elementNodeMap;
    protected java.util.Map nodeElementMap;
    protected java.util.Map namespaceURIMap;
    protected org.apache.batik.bridge.Bridge defaultBridge;
    protected java.util.Set reservedNamespaceSet;
    protected java.util.Map elementDataMap;
    protected org.apache.batik.script.InterpreterPool interpreterPool;
    protected org.apache.batik.bridge.DocumentLoader documentLoader;
    protected java.awt.geom.Dimension2D documentSize;
    protected org.apache.batik.gvt.TextPainter textPainter;
    public static final int STATIC;
    public static final int INTERACTIVE;
    public static final int DYNAMIC;
    protected int dynamicStatus;
    protected org.apache.batik.bridge.UpdateManager updateManager;
    protected org.apache.batik.dom.xbl.XBLManager xblManager;
    protected org.apache.batik.bridge.BridgeContext primaryContext;
    protected java.util.HashSet childContexts;
    protected org.apache.batik.bridge.SVGAnimationEngine animationEngine;
    protected int animationLimitingMode;
    protected float animationLimitingAmount;
    private static org.apache.batik.script.InterpreterPool sharedPool;
    protected java.util.Set eventListenerSet;
    protected org.w3c.dom.events.EventListener domCharacterDataModifiedEventListener;
    protected org.w3c.dom.events.EventListener domAttrModifiedEventListener;
    protected org.w3c.dom.events.EventListener domNodeInsertedEventListener;
    protected org.w3c.dom.events.EventListener domNodeRemovedEventListener;
    protected org.apache.batik.css.engine.CSSEngineListener cssPropertiesChangedListener;
    protected org.apache.batik.dom.svg.AnimatedAttributeListener animatedAttributeListener;
    protected org.apache.batik.bridge.FocusManager focusManager;
    protected org.apache.batik.bridge.CursorManager cursorManager;
    protected java.util.List extensions;
    protected static java.util.List globalExtensions;
    static java.lang.Class class$org$apache$batik$bridge$BridgeExtension;

    protected void <init>()
    {
        java.util.HashSet $r4, $r5;
        org.apache.batik.bridge.CursorManager $r6;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap $r1;
        java.util.LinkedList $r3;
        java.util.WeakHashMap $r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7);

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack> = $r3;

        r0.<org.apache.batik.bridge.BridgeContext: int dynamicStatus> = 0;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet> = $r5;

        $r6 = new org.apache.batik.bridge.CursorManager;

        specialinvoke $r6.<org.apache.batik.bridge.CursorManager: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.CursorManager cursorManager> = $r6;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List extensions> = null;

        return;
    }

    public void <init>(org.apache.batik.bridge.UserAgent)
    {
        org.apache.batik.bridge.UserAgent r1;
        org.apache.batik.bridge.DocumentLoader $r2;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.script.InterpreterPool $r3;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.UserAgent;

        $r3 = <org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool sharedPool>;

        $r2 = new org.apache.batik.bridge.DocumentLoader;

        specialinvoke $r2.<org.apache.batik.bridge.DocumentLoader: void <init>(org.apache.batik.bridge.UserAgent)>(r1);

        specialinvoke r0.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.script.InterpreterPool,org.apache.batik.bridge.DocumentLoader)>(r1, $r3, $r2);

        return;
    }

    public void <init>(org.apache.batik.bridge.UserAgent, org.apache.batik.bridge.DocumentLoader)
    {
        org.apache.batik.bridge.UserAgent r1;
        org.apache.batik.bridge.DocumentLoader r2;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.script.InterpreterPool $r3;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.UserAgent;

        r2 := @parameter1: org.apache.batik.bridge.DocumentLoader;

        $r3 = <org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool sharedPool>;

        specialinvoke r0.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.script.InterpreterPool,org.apache.batik.bridge.DocumentLoader)>(r1, $r3, r2);

        return;
    }

    public void <init>(org.apache.batik.bridge.UserAgent, org.apache.batik.script.InterpreterPool, org.apache.batik.bridge.DocumentLoader)
    {
        org.apache.batik.bridge.DocumentLoader r11;
        org.apache.batik.bridge.CursorManager $r6;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap $r1;
        org.apache.batik.script.InterpreterPool r10;
        java.util.HashSet $r4, $r5;
        org.apache.batik.bridge.UserAgent r7;
        java.util.Map $r9;
        java.util.LinkedList $r3;
        java.util.WeakHashMap $r2;
        org.apache.batik.bridge.UserAgentViewport $r8;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r7 := @parameter0: org.apache.batik.bridge.UserAgent;

        r10 := @parameter1: org.apache.batik.script.InterpreterPool;

        r11 := @parameter2: org.apache.batik.bridge.DocumentLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7);

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack> = $r3;

        r0.<org.apache.batik.bridge.BridgeContext: int dynamicStatus> = 0;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet> = $r5;

        $r6 = new org.apache.batik.bridge.CursorManager;

        specialinvoke $r6.<org.apache.batik.bridge.CursorManager: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.CursorManager cursorManager> = $r6;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List extensions> = null;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent> = r7;

        $r9 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        $r8 = new org.apache.batik.bridge.UserAgentViewport;

        specialinvoke $r8.<org.apache.batik.bridge.UserAgentViewport: void <init>(org.apache.batik.bridge.UserAgent)>(r7);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r8);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool interpreterPool> = r10;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader documentLoader> = r11;

        return;
    }

    protected void finalize()
    {
        org.apache.batik.bridge.BridgeContext r0, $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void dispose()>();

     label1:
        return;
    }

    public org.apache.batik.bridge.BridgeContext createSubBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)
    {
        org.apache.batik.css.engine.CSSEngine $r1, $r10;
        java.util.HashSet $r7;
        int $i0;
        java.lang.ref.WeakReference $r6;
        boolean $z0;
        org.apache.batik.bridge.GVTBuilder $r8;
        org.apache.batik.bridge.BridgeContext r2, $r3, $r4, $r5, r12, $r13;
        org.apache.batik.css.engine.CSSContext $r11;
        org.apache.batik.dom.svg.SVGOMDocument r0;
        org.apache.batik.gvt.TextPainter $r9;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.apache.batik.dom.svg.SVGOMDocument;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        if $r1 == null goto label1;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r11 = virtualinvoke $r10.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSContext getCSSContext()>();

        r12 = (org.apache.batik.bridge.BridgeContext) $r11;

        return r12;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext createBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)>(r0);

        $r4 = r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        if $r4 == null goto label2;

        $r13 = r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        goto label3;

     label2:
        $r13 = r2;

     label3:
        $r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext> = $r13;

        $r5 = $r3.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        $r7 = $r5.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts>;

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r3);

        virtualinvoke $r7.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

        $i0 = r2.<org.apache.batik.bridge.BridgeContext: int dynamicStatus>;

        $r3.<org.apache.batik.bridge.BridgeContext: int dynamicStatus> = $i0;

        $r8 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void setGVTBuilder(org.apache.batik.bridge.GVTBuilder)>($r8);

        $r9 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter getTextPainter()>();

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void setTextPainter(org.apache.batik.gvt.TextPainter)>($r9);

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void setDocument(org.w3c.dom.Document)>(r0);

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void initializeDocument(org.w3c.dom.Document)>(r0);

        $z0 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r3.<org.apache.batik.bridge.BridgeContext: void addUIEventListeners(org.w3c.dom.Document)>(r0);

     label4:
        return $r3;
    }

    public org.apache.batik.bridge.BridgeContext createBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)
    {
        org.apache.batik.bridge.DocumentLoader $r4, $r7;
        org.apache.batik.bridge.BridgeContext $r1, r2;
        org.apache.batik.bridge.svg12.SVG12BridgeContext $r5;
        org.apache.batik.dom.svg.SVGOMDocument r0;
        org.apache.batik.bridge.UserAgent $r3, $r6;
        boolean $z0;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.apache.batik.dom.svg.SVGOMDocument;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        if $z0 == 0 goto label1;

        $r5 = new org.apache.batik.bridge.svg12.SVG12BridgeContext;

        $r6 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r7 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        specialinvoke $r5.<org.apache.batik.bridge.svg12.SVG12BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.DocumentLoader)>($r6, $r7);

        return $r5;

     label1:
        $r1 = new org.apache.batik.bridge.BridgeContext;

        $r3 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        specialinvoke $r1.<org.apache.batik.bridge.BridgeContext: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.DocumentLoader)>($r3, $r4);

        return $r1;
    }

    protected void initializeDocument(org.w3c.dom.Document)
    {
        org.apache.batik.bridge.BridgeContext$CSSEngineUserAgentWrapper $r7;
        org.apache.batik.css.engine.CSSEngine $r2, $r6;
        org.apache.batik.css.engine.StyleSheet $r14;
        org.w3c.dom.Document r0;
        java.lang.String $r10, $r12, $r18;
        org.w3c.dom.DOMImplementation $r3;
        org.apache.batik.dom.svg.SVGDOMImplementation r4;
        org.apache.batik.bridge.BridgeContext r5;
        java.lang.Exception $r15;
        org.apache.batik.dom.svg.SVGOMDocument r1;
        org.apache.batik.bridge.UserAgent $r8, $r9, $r11, $r16, $r17;
        org.apache.batik.util.ParsedURL $r13;

        r5 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 = (org.apache.batik.dom.svg.SVGOMDocument) r0;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        if $r2 != null goto label5;

        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation getImplementation()>();

        r4 = (org.apache.batik.dom.svg.SVGDOMImplementation) $r3;

        $r6 = virtualinvoke r4.<org.apache.batik.dom.ExtensibleDOMImplementation: org.apache.batik.css.engine.CSSEngine createCSSEngine(org.apache.batik.dom.AbstractStylableDocument,org.apache.batik.css.engine.CSSContext)>(r1, r5);

        $r7 = new org.apache.batik.bridge.BridgeContext$CSSEngineUserAgentWrapper;

        $r8 = r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeContext$CSSEngineUserAgentWrapper: void <init>(org.apache.batik.bridge.UserAgent)>($r8);

        virtualinvoke $r6.<org.apache.batik.css.engine.CSSEngine: void setCSSEngineUserAgent(org.apache.batik.css.engine.CSSEngineUserAgent)>($r7);

        virtualinvoke r1.<org.apache.batik.dom.AbstractStylableDocument: void setCSSEngine(org.apache.batik.css.engine.CSSEngine)>($r6);

        $r9 = r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r10 = interfaceinvoke $r9.<org.apache.batik.bridge.UserAgent: java.lang.String getMedia()>();

        virtualinvoke $r6.<org.apache.batik.css.engine.CSSEngine: void setMedia(java.lang.String)>($r10);

        $r11 = r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r12 = interfaceinvoke $r11.<org.apache.batik.bridge.UserAgent: java.lang.String getUserStyleSheetURI()>();

        if $r12 == null goto label4;

     label1:
        $r13 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r13.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r12);

        $r14 = virtualinvoke $r6.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.StyleSheet parseStyleSheet(org.apache.batik.util.ParsedURL,java.lang.String)>($r13, "all");

        virtualinvoke $r6.<org.apache.batik.css.engine.CSSEngine: void setUserAgentStyleSheet(org.apache.batik.css.engine.StyleSheet)>($r14);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r16 = r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r16.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r15);

     label4:
        $r17 = r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r18 = interfaceinvoke $r17.<org.apache.batik.bridge.UserAgent: java.lang.String getAlternateStyleSheet()>();

        virtualinvoke $r6.<org.apache.batik.css.engine.CSSEngine: void setAlternateStyleSheet(java.lang.String)>($r18);

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.batik.css.engine.CSSEngine getCSSEngineForElement(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        org.w3c.dom.Document $r1;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.css.engine.CSSEngine $r3;
        org.apache.batik.dom.svg.SVGOMDocument r2;

        r4 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        return $r3;
    }

    public void setTextPainter(org.apache.batik.gvt.TextPainter)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.gvt.TextPainter r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.gvt.TextPainter;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter textPainter> = r1;

        return;
    }

    public org.apache.batik.gvt.TextPainter getTextPainter()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.gvt.TextPainter $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter textPainter>;

        return $r1;
    }

    public org.w3c.dom.Document getDocument()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        return $r1;
    }

    protected void setDocument(org.w3c.dom.Document)
    {
        org.w3c.dom.Document r1, $r2;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.dom.svg.SVGOMDocument $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Document;

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        if $r2 == r1 goto label1;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map fontFamilyMap> = null;

     label1:
        r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document> = r1;

        $r3 = (org.apache.batik.dom.svg.SVGOMDocument) r1;

        $z0 = virtualinvoke $r3.<org.apache.batik.dom.svg.SVGOMDocument: boolean isSVG12()>();

        r0.<org.apache.batik.bridge.BridgeContext: boolean isSVG12> = $z0;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void registerSVGBridges()>();

        return;
    }

    public java.util.Map getFontFamilyMap()
    {
        java.util.Map $r1, $r2;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap $r3;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map fontFamilyMap>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map fontFamilyMap> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map fontFamilyMap>;

        return $r2;
    }

    protected void setFontFamilyMap(java.util.Map)
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.util.Map r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map fontFamilyMap> = r1;

        return;
    }

    public void setElementData(org.w3c.dom.Node, java.lang.Object)
    {
        java.util.Map $r1, $r5;
        org.w3c.dom.Node r2;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.Object r4;
        java.lang.ref.SoftReference $r3;
        java.util.WeakHashMap $r6;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Node;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        if $r1 != null goto label1;

        $r6 = new java.util.WeakHashMap;

        specialinvoke $r6.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap> = $r6;

     label1:
        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        $r3 = new java.lang.ref.SoftReference;

        specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        return;
    }

    public java.lang.Object getElementData(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.util.Map $r1, $r3, $r7;
        org.w3c.dom.Node r2;
        java.lang.Object $r4, $r6;
        java.lang.ref.SoftReference r5;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r4 != null goto label2;

        return null;

     label2:
        r5 = (java.lang.ref.SoftReference) $r4;

        $r6 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r6 != null goto label3;

        $r7 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label3:
        return $r6;
    }

    public org.apache.batik.bridge.UserAgent getUserAgent()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UserAgent $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        return $r1;
    }

    protected void setUserAgent(org.apache.batik.bridge.UserAgent)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UserAgent r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.UserAgent;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent> = r1;

        return;
    }

    public org.apache.batik.bridge.GVTBuilder getGVTBuilder()
    {
        org.apache.batik.bridge.GVTBuilder $r1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder gvtBuilder>;

        return $r1;
    }

    protected void setGVTBuilder(org.apache.batik.bridge.GVTBuilder)
    {
        org.apache.batik.bridge.GVTBuilder r1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.GVTBuilder;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder gvtBuilder> = r1;

        return;
    }

    public org.apache.batik.script.InterpreterPool getInterpreterPool()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.script.InterpreterPool $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool interpreterPool>;

        return $r1;
    }

    public org.apache.batik.bridge.FocusManager getFocusManager()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.FocusManager $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.FocusManager focusManager>;

        return $r1;
    }

    public org.apache.batik.bridge.CursorManager getCursorManager()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.CursorManager $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.CursorManager cursorManager>;

        return $r1;
    }

    protected void setInterpreterPool(org.apache.batik.script.InterpreterPool)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.script.InterpreterPool r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.script.InterpreterPool;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool interpreterPool> = r1;

        return;
    }

    public org.apache.batik.script.Interpreter getInterpreter(java.lang.String)
    {
        org.w3c.dom.Document $r1, $r12;
        java.lang.StringBuffer $r7, $r9, $r10;
        java.util.Map $r3, $r15;
        java.lang.String r2, $r11;
        org.apache.batik.script.Interpreter $r14, r20;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.script.InterpreterPool $r13;
        java.lang.RuntimeException $r16;
        java.lang.Exception $r6, $r17;
        org.apache.batik.bridge.UserAgent $r5, $r8, $r18, $r19;
        java.lang.Object $r4;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        if $r1 != null goto label1;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown document");

        throw $r16;

     label1:
        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r20 = (org.apache.batik.script.Interpreter) $r4;

        if r20 != null goto label5;

     label2:
        $r13 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool interpreterPool>;

        $r12 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        $r14 = virtualinvoke $r13.<org.apache.batik.script.InterpreterPool: org.apache.batik.script.Interpreter createInterpreter(org.w3c.dom.Document,java.lang.String)>($r12, r2);

        r20 = $r14;

        $r15 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r14);

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r18 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        if $r18 == null goto label5;

        $r19 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r19.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r17);

        return null;

     label5:
        if r20 != null goto label6;

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        if $r5 == null goto label6;

        $r8 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown language: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        interfaceinvoke $r8.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r6);

     label6:
        return r20;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public org.apache.batik.bridge.DocumentLoader getDocumentLoader()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.DocumentLoader $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader documentLoader>;

        return $r1;
    }

    protected void setDocumentLoader(org.apache.batik.bridge.DocumentLoader)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.DocumentLoader r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.DocumentLoader;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader documentLoader> = r1;

        return;
    }

    public java.awt.geom.Dimension2D getDocumentSize()
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.awt.geom.Dimension2D $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D documentSize>;

        return $r1;
    }

    protected void setDocumentSize(java.awt.geom.Dimension2D)
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.awt.geom.Dimension2D r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: java.awt.geom.Dimension2D;

        r0.<org.apache.batik.bridge.BridgeContext: java.awt.geom.Dimension2D documentSize> = r1;

        return;
    }

    public boolean isDynamic()
    {
        int $i0;
        org.apache.batik.bridge.BridgeContext r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $i0 = r0.<org.apache.batik.bridge.BridgeContext: int dynamicStatus>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInteractive()
    {
        int $i0;
        org.apache.batik.bridge.BridgeContext r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $i0 = r0.<org.apache.batik.bridge.BridgeContext: int dynamicStatus>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setDynamicState(int)
    {
        int i0;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        i0 := @parameter0: int;

        r0.<org.apache.batik.bridge.BridgeContext: int dynamicStatus> = i0;

        return;
    }

    public void setDynamic(boolean)
    {
        org.apache.batik.bridge.BridgeContext r0;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(2);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(0);

     label2:
        return;
    }

    public void setInteractive(boolean)
    {
        org.apache.batik.bridge.BridgeContext r0;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setDynamicState(int)>(0);

     label2:
        return;
    }

    public org.apache.batik.bridge.UpdateManager getUpdateManager()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UpdateManager $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager updateManager>;

        return $r1;
    }

    protected void setUpdateManager(org.apache.batik.bridge.UpdateManager)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UpdateManager r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.UpdateManager;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager updateManager> = r1;

        return;
    }

    protected void setUpdateManager(org.apache.batik.bridge.BridgeContext, org.apache.batik.bridge.UpdateManager)
    {
        org.apache.batik.bridge.BridgeContext r0, r2;
        org.apache.batik.bridge.UpdateManager r1;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.apache.batik.bridge.UpdateManager;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setUpdateManager(org.apache.batik.bridge.UpdateManager)>(r1);

        return;
    }

    protected void setXBLManager(org.apache.batik.bridge.BridgeContext, org.apache.batik.dom.xbl.XBLManager)
    {
        org.apache.batik.bridge.BridgeContext r0, r2;
        org.apache.batik.dom.xbl.XBLManager r1;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.apache.batik.dom.xbl.XBLManager;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.xbl.XBLManager xblManager> = r1;

        return;
    }

    public boolean isSVG12()
    {
        org.apache.batik.bridge.BridgeContext r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $z0 = r0.<org.apache.batik.bridge.BridgeContext: boolean isSVG12>;

        return $z0;
    }

    public org.apache.batik.bridge.BridgeContext getPrimaryBridgeContext()
    {
        org.apache.batik.bridge.BridgeContext r0, $r1, $r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext primaryContext>;

        return $r2;

     label1:
        return r0;
    }

    public org.apache.batik.bridge.BridgeContext[] getChildContexts()
    {
        java.util.Iterator $r4;
        org.apache.batik.bridge.BridgeContext r0, $r8;
        java.util.HashSet $r1, $r3;
        int $i0, $i1, i2;
        java.lang.Object $r5, $r7;
        java.lang.ref.WeakReference r6;
        org.apache.batik.bridge.BridgeContext[] r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts>;

        $i0 = virtualinvoke $r1.<java.util.HashSet: int size()>();

        r2 = newarray (org.apache.batik.bridge.BridgeContext)[$i0];

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts>;

        $r4 = virtualinvoke $r3.<java.util.HashSet: java.util.Iterator iterator()>();

        i2 = 0;

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.ref.WeakReference) $r5;

        $r7 = virtualinvoke r6.<java.lang.ref.Reference: java.lang.Object get()>();

        $r8 = (org.apache.batik.bridge.BridgeContext) $r7;

        r2[i2] = $r8;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r2;

        if i2 < $i1 goto label1;

        return r2;
    }

    public org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()
    {
        org.apache.batik.bridge.SVGAnimationEngine $r1, $r2, $r3;
        org.w3c.dom.Document $r4;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        if $r1 != null goto label1;

        $r3 = new org.apache.batik.bridge.SVGAnimationEngine;

        $r4 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        specialinvoke $r3.<org.apache.batik.bridge.SVGAnimationEngine: void <init>(org.w3c.dom.Document,org.apache.batik.bridge.BridgeContext)>($r4, r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine> = $r3;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingMode()>();

     label1:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        return $r2;
    }

    public org.apache.batik.bridge.URIResolver createURIResolver(org.w3c.dom.svg.SVGDocument, org.apache.batik.bridge.DocumentLoader)
    {
        org.apache.batik.bridge.DocumentLoader r2;
        org.w3c.dom.svg.SVGDocument r1;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.bridge.URIResolver $r0;

        r3 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.svg.SVGDocument;

        r2 := @parameter1: org.apache.batik.bridge.DocumentLoader;

        $r0 = new org.apache.batik.bridge.URIResolver;

        specialinvoke $r0.<org.apache.batik.bridge.URIResolver: void <init>(org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.DocumentLoader)>(r1, r2);

        return $r0;
    }

    public org.w3c.dom.Node getReferencedNode(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.Object[] $r9, $r12, $r15, $r20;
        org.apache.batik.bridge.DocumentLoader $r3;
        org.w3c.dom.svg.SVGDocument r21;
        java.io.InterruptedIOException $r16;
        short $s0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r6, $r22;
        int $i1;
        java.lang.SecurityException $r10;
        java.lang.String r5;
        org.apache.batik.bridge.InterruptedBridgeException $r25;
        org.apache.batik.bridge.URIResolver $r4;
        java.net.MalformedURLException $r18;
        org.apache.batik.bridge.BridgeException $r23, $r24, $r26, $r27;
        org.apache.batik.bridge.BridgeContext r2;
        java.io.IOException $r13;
        org.apache.batik.dom.svg.SVGOMDocument $r7;
        org.w3c.dom.Element r0;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r21 = (org.w3c.dom.svg.SVGDocument) $r1;

        $r3 = r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader documentLoader>;

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.URIResolver createURIResolver(org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.DocumentLoader)>(r21, $r3);

        $r6 = virtualinvoke $r4.<org.apache.batik.bridge.URIResolver: org.w3c.dom.Node getNode(java.lang.String,org.w3c.dom.Element)>(r5, r0);

        if $r6 != null goto label2;

        $r23 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r5;

        specialinvoke $r23.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r0, "uri.badTarget", $r9);

        throw $r23;

     label2:
        $s0 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 9 goto label3;

        $r22 = $r6;

        goto label4;

     label3:
        $r22 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label4:
        $r7 = (org.apache.batik.dom.svg.SVGOMDocument) $r22;

        if $r7 == r21 goto label5;

        virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext createSubBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)>($r7);

     label5:
        return $r6;

     label6:
        $r18 := @caughtexception;

        $r24 = new org.apache.batik.bridge.BridgeException;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r5;

        specialinvoke $r24.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r2, r0, $r18, "uri.malformed", $r20);

        throw $r24;

     label7:
        $r16 := @caughtexception;

        $r25 = new org.apache.batik.bridge.InterruptedBridgeException;

        specialinvoke $r25.<org.apache.batik.bridge.InterruptedBridgeException: void <init>()>();

        throw $r25;

     label8:
        $r13 := @caughtexception;

        $r26 = new org.apache.batik.bridge.BridgeException;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r5;

        specialinvoke $r26.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r2, r0, $r13, "uri.io", $r15);

        throw $r26;

     label9:
        $r10 := @caughtexception;

        $r27 = new org.apache.batik.bridge.BridgeException;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r5;

        specialinvoke $r27.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r2, r0, $r10, "uri.unsecure", $r12);

        throw $r27;

        catch java.net.MalformedURLException from label1 to label6 with label6;
        catch java.io.InterruptedIOException from label1 to label6 with label7;
        catch java.io.IOException from label1 to label6 with label8;
        catch java.lang.SecurityException from label1 to label6 with label9;
    }

    public org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r5;
        org.apache.batik.bridge.BridgeContext r0;
        short $s0;
        org.w3c.dom.Element r1, $r4;
        org.w3c.dom.Node $r3;
        java.lang.String r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Node getReferencedNode(org.w3c.dom.Element,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label1;

        $r5 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r0, r1, "uri.referenceDocument", $r6);

        throw $r5;

     label1:
        $r4 = (org.w3c.dom.Element) $r3;

        return $r4;
    }

    public org.apache.batik.bridge.Viewport getViewport(org.w3c.dom.Element)
    {
        java.util.Map $r2, $r6, $r14;
        int $i0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.Viewport r4, $r8, $r12, $r16;
        java.util.List $r1, $r9, $r10;
        org.apache.batik.bridge.UserAgent $r5, $r13;
        org.w3c.dom.Element r17, r18;
        java.lang.Object $r3, $r7, $r11, $r15;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r17 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        if $r1 == null goto label2;

        $r9 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r14 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        $r13 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r16 = (org.apache.batik.bridge.Viewport) $r15;

        return $r16;

     label1:
        $r10 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (org.apache.batik.bridge.Viewport) $r11;

        return $r12;

     label2:
        r18 = staticinvoke <org.apache.batik.bridge.SVGUtilities: org.w3c.dom.Element getParentElement(org.w3c.dom.Element)>(r17);

        goto label5;

     label3:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        r4 = (org.apache.batik.bridge.Viewport) $r3;

        if r4 == null goto label4;

        return r4;

     label4:
        r18 = staticinvoke <org.apache.batik.bridge.SVGUtilities: org.w3c.dom.Element getParentElement(org.w3c.dom.Element)>(r18);

     label5:
        if r18 != null goto label3;

        $r6 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.apache.batik.bridge.Viewport) $r7;

        return $r8;
    }

    public void openViewport(org.w3c.dom.Element, org.apache.batik.bridge.Viewport)
    {
        java.util.List $r4, $r5;
        org.w3c.dom.Element r1;
        java.util.Map $r3;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.LinkedList $r6;
        org.apache.batik.bridge.Viewport r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.apache.batik.bridge.Viewport;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        if $r4 != null goto label1;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack> = $r6;

     label1:
        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(0, r2);

        return;
    }

    public void removeViewport(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.Element r1;
        java.util.Map $r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map viewportMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void closeViewport(org.w3c.dom.Element)
    {
        java.util.List $r1, $r2;
        org.w3c.dom.Element r3;
        int $i0;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.List viewportStack> = null;

     label1:
        return;
    }

    public void bind(org.w3c.dom.Node, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.Map $r1, $r5, $r7;
        org.w3c.dom.Node r2;
        java.lang.ref.SoftReference $r3, $r6;
        java.util.WeakHashMap $r8, $r9;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Node;

        r4 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        if $r1 != null goto label1;

        $r8 = new java.util.WeakHashMap;

        specialinvoke $r8.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap> = $r8;

        $r9 = new java.util.WeakHashMap;

        specialinvoke $r9.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap> = $r9;

     label1:
        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        $r3 = new java.lang.ref.SoftReference;

        specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

        $r7 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        $r6 = new java.lang.ref.SoftReference;

        specialinvoke $r6.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r6);

        return;
    }

    public void unbind(org.w3c.dom.Node)
    {
        org.apache.batik.gvt.GraphicsNode r9;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.Map $r1, $r3, $r6, $r7;
        org.w3c.dom.Node r2;
        java.lang.Object $r4, $r8;
        java.lang.ref.SoftReference r5;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        if $r1 != null goto label1;

        return;

     label1:
        r9 = null;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.ref.SoftReference) $r4;

        if r5 == null goto label2;

        $r8 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r9 = (org.apache.batik.gvt.GraphicsNode) $r8;

     label2:
        $r6 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        if r9 == null goto label3;

        $r7 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r9);

     label3:
        return;
    }

    public org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)
    {
        org.apache.batik.gvt.GraphicsNode $r7;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.Map $r1, $r3;
        org.w3c.dom.Node r2;
        java.lang.Object $r4, $r6;
        java.lang.ref.SoftReference r5;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.ref.SoftReference) $r4;

        if r5 == null goto label1;

        $r6 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r7 = (org.apache.batik.gvt.GraphicsNode) $r6;

        return $r7;

     label1:
        return null;
    }

    public org.w3c.dom.Element getElement(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext r0;
        short $s0;
        org.w3c.dom.Element $r8;
        java.util.Map $r1, $r3;
        org.w3c.dom.Node r7;
        java.lang.Object $r4, $r6;
        java.lang.ref.SoftReference r5;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.ref.SoftReference) $r4;

        if r5 == null goto label1;

        $r6 = virtualinvoke r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r7 = (org.w3c.dom.Node) $r6;

        $s0 = interfaceinvoke r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

        $r8 = (org.w3c.dom.Element) r7;

        return $r8;

     label1:
        return null;
    }

    public boolean hasGraphicsNodeBridge(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap $r8;
        org.w3c.dom.Element r2;
        java.util.Map $r1, $r5;
        java.lang.Object $r6, $r7;
        java.lang.String $r3, $r4, $r9;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        if $r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r4 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r4 != null goto label3;

        $r9 = "";

        goto label4;

     label3:
        $r9 = $r4;

     label4:
        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r8 = (java.util.HashMap) $r6;

        if $r8 != null goto label5;

        return 0;

     label5:
        $r7 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $z0 = $r7 instanceof org.apache.batik.bridge.GraphicsNodeBridge;

        return $z0;
    }

    public org.apache.batik.bridge.DocumentBridge getDocumentBridge()
    {
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.SVGDocumentBridge $r0;

        r1 := @this: org.apache.batik.bridge.BridgeContext;

        $r0 = new org.apache.batik.bridge.SVGDocumentBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGDocumentBridge: void <init>()>();

        return $r0;
    }

    public org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.Bridge $r5;
        org.w3c.dom.Element r2;
        java.util.Map $r1;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.String $r3, $r4, $r6;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        if $r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r4 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r4 != null goto label3;

        $r6 = "";

        goto label4;

     label3:
        $r6 = $r4;

     label4:
        $r5 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(java.lang.String,java.lang.String)>($r6, $r3);

        return $r5;
    }

    public org.apache.batik.bridge.Bridge getBridge(java.lang.String, java.lang.String)
    {
        java.util.Set $r2, $r4;
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap r7;
        org.apache.batik.bridge.Bridge r10, $r11;
        java.util.Map $r1, $r5;
        java.lang.Object $r6, $r9;
        java.lang.String r3, r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r10 = null;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r7 = (java.util.HashMap) $r6;

        if r7 == null goto label1;

        $r9 = virtualinvoke r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r10 = (org.apache.batik.bridge.Bridge) $r9;

     label1:
        if r10 != null goto label3;

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label3;

     label2:
        r10 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge defaultBridge>;

     label3:
        $z1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z1 == 0 goto label6;

        if r10 != null goto label4;

        $r11 = null;

        goto label5;

     label4:
        $r11 = interfaceinvoke r10.<org.apache.batik.bridge.Bridge: org.apache.batik.bridge.Bridge getInstance()>();

     label5:
        return $r11;

     label6:
        return r10;
    }

    public void putBridge(java.lang.String, java.lang.String, org.apache.batik.bridge.Bridge)
    {
        java.util.Map $r21, $r22, $r25;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeContext r20;
        org.apache.batik.bridge.Bridge r0;
        java.lang.Error $r2;
        java.util.HashMap $r24, $r26, $r27, r30;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17;
        java.lang.String $r1, $r7, r10, $r13, $r18, $r19, r28, $r29;
        java.lang.Class $r16;
        java.lang.Object $r23;

        r20 := @this: org.apache.batik.bridge.BridgeContext;

        r28 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.batik.bridge.Bridge;

        $r1 = interfaceinvoke r0.<org.apache.batik.bridge.Bridge: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r19 = interfaceinvoke r0.<org.apache.batik.bridge.Bridge: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.Error;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid Bridge: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r28);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r7 = interfaceinvoke r0.<org.apache.batik.bridge.Bridge: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r13 = interfaceinvoke r0.<org.apache.batik.bridge.Bridge: java.lang.String getLocalName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Error: void <init>(java.lang.String)>($r18);

        throw $r2;

     label2:
        $r21 = r20.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        if $r21 != null goto label3;

        $r27 = new java.util.HashMap;

        specialinvoke $r27.<java.util.HashMap: void <init>()>();

        r20.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap> = $r27;

     label3:
        if r28 != null goto label4;

        $r29 = "";

        goto label5;

     label4:
        $r29 = r28;

     label5:
        $r22 = r20.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r29);

        $r26 = (java.util.HashMap) $r23;

        r30 = $r26;

        if $r26 != null goto label6;

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        r30 = $r24;

        $r25 = r20.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r24);

     label6:
        virtualinvoke r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r0);

        return;
    }

    public void putBridge(org.apache.batik.bridge.Bridge)
    {
        org.apache.batik.bridge.Bridge r1;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.Bridge;

        $r2 = interfaceinvoke r1.<org.apache.batik.bridge.Bridge: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r1.<org.apache.batik.bridge.Bridge: java.lang.String getLocalName()>();

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void putBridge(java.lang.String,java.lang.String,org.apache.batik.bridge.Bridge)>($r2, $r3, r1);

        return;
    }

    public void removeBridge(java.lang.String, java.lang.String)
    {
        org.apache.batik.bridge.BridgeContext r0;
        java.util.HashMap $r7;
        java.util.Map $r1, $r2, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String r4, r8, $r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r8 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        if $r1 != null goto label1;

        return;

     label1:
        if r8 != null goto label2;

        $r9 = "";

        goto label3;

     label2:
        $r9 = r8;

     label3:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r7 = (java.util.HashMap) $r3;

        if $r7 == null goto label4;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        $z0 = virtualinvoke $r7.<java.util.HashMap: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

        $r6 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Map namespaceURIMap> = null;

     label4:
        return;
    }

    public void setDefaultBridge(org.apache.batik.bridge.Bridge)
    {
        org.apache.batik.bridge.Bridge r1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.bridge.Bridge;

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge defaultBridge> = r1;

        return;
    }

    public void putReservedNamespaceURI(java.lang.String)
    {
        java.util.HashSet $r3;
        java.util.Set $r1, $r2;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.String r4;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        r4 = "";

     label1:
        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        if $r1 != null goto label2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet> = $r3;

     label2:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

        return;
    }

    public void removeReservedNamespaceURI(java.lang.String)
    {
        java.util.Set $r1, $r2, $r3;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label1;

        r4 = "";

     label1:
        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r0.<org.apache.batik.bridge.BridgeContext: java.util.Set reservedNamespaceSet> = null;

     label2:
        return;
    }

    public void addUIEventListeners(org.w3c.dom.Document)
    {
        org.apache.batik.bridge.BridgeContext$DOMMouseOverEventListener $r3;
        org.w3c.dom.Element $r1;
        org.apache.batik.bridge.BridgeContext$DOMMouseOutEventListener $r5;
        org.w3c.dom.Document r0;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.dom.events.NodeEventTarget r2;

        r4 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r2 = (org.apache.batik.dom.events.NodeEventTarget) $r1;

        $r3 = new org.apache.batik.bridge.BridgeContext$DOMMouseOverEventListener;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeContext$DOMMouseOverEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r4);

        interfaceinvoke r2.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseover", $r3, 1, null);

        virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r2, "http://www.w3.org/2001/xml-events", "mouseover", $r3, 1);

        $r5 = new org.apache.batik.bridge.BridgeContext$DOMMouseOutEventListener;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeContext$DOMMouseOutEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r4);

        interfaceinvoke r2.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseout", $r5, 1, null);

        virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r2, "http://www.w3.org/2001/xml-events", "mouseout", $r5, 1);

        return;
    }

    public void removeUIEventListeners(org.w3c.dom.Document)
    {
        java.lang.Throwable $r13;
        org.w3c.dom.events.EventTarget r2;
        org.w3c.dom.Document r0;
        java.lang.String $r11, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r6;
        java.util.Set r4, $r5;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.dom.events.NodeEventTarget $r9;
        org.w3c.dom.Element $r1;
        org.w3c.dom.events.EventListener $r10;
        java.lang.Object $r7;
        org.apache.batik.bridge.BridgeContext$EventListenerMememto r8;

        r3 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r2 = (org.w3c.dom.events.EventTarget) $r1;

        r4 = r3.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        entermonitor r4;

     label1:
        $r5 = r3.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.batik.bridge.BridgeContext$EventListenerMememto) $r7;

        $r9 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: org.apache.batik.dom.events.NodeEventTarget getTarget()>();

        if $r9 != r2 goto label5;

        $r10 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: org.w3c.dom.events.EventListener getListener()>();

        $z0 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: boolean getUseCapture()>();

        $r11 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: java.lang.String getEventType()>();

        $z1 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: boolean getNamespaced()>();

        if $r9 == null goto label5;

        if $r10 == null goto label5;

        if $r11 != null goto label3;

        goto label5;

     label3:
        if $z1 == 0 goto label4;

        $r12 = virtualinvoke r8.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r9.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>($r12, $r11, $r10, $z0);

        goto label5;

     label4:
        interfaceinvoke $r9.<org.w3c.dom.events.EventTarget: void removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)>($r11, $r10, $z0);

     label5:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        exitmonitor r4;

        goto label7;

     label6:
        $r13 := @caughtexception;

        exitmonitor r4;

        throw $r13;

     label7:
        return;

        catch java.lang.Throwable from label1 to label6 with label6;
    }

    public void addDOMListeners()
    {
        org.apache.batik.bridge.BridgeContext$DOMNodeRemovedEventListener $r7;
        org.apache.batik.bridge.FocusManager $r13;
        org.apache.batik.css.engine.CSSEngine $r15;
        org.apache.batik.bridge.BridgeContext$AnimatedAttrListener $r11;
        org.w3c.dom.Document $r1, $r14;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r12;
        org.apache.batik.bridge.BridgeContext$DOMAttrModifiedEventListener $r3;
        org.apache.batik.bridge.BridgeContext$CSSPropertiesChangedListener $r16;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.BridgeContext$DOMNodeInsertedEventListener $r5;
        org.apache.batik.dom.svg.SVGOMDocument r2;
        org.w3c.dom.events.EventListener $r4, $r6, $r8, $r10;
        org.apache.batik.css.engine.CSSEngineListener $r17;
        org.apache.batik.bridge.BridgeContext$DOMCharacterDataModifiedEventListener $r9;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = new org.apache.batik.bridge.BridgeContext$DOMAttrModifiedEventListener;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeContext$DOMAttrModifiedEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domAttrModifiedEventListener> = $r3;

        $r4 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domAttrModifiedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r4, 1, null);

        $r5 = new org.apache.batik.bridge.BridgeContext$DOMNodeInsertedEventListener;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeContext$DOMNodeInsertedEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeInsertedEventListener> = $r5;

        $r6 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeInsertedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r6, 1, null);

        $r7 = new org.apache.batik.bridge.BridgeContext$DOMNodeRemovedEventListener;

        specialinvoke $r7.<org.apache.batik.bridge.BridgeContext$DOMNodeRemovedEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeRemovedEventListener> = $r7;

        $r8 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeRemovedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r8, 1, null);

        $r9 = new org.apache.batik.bridge.BridgeContext$DOMCharacterDataModifiedEventListener;

        specialinvoke $r9.<org.apache.batik.bridge.BridgeContext$DOMCharacterDataModifiedEventListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domCharacterDataModifiedEventListener> = $r9;

        $r10 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domCharacterDataModifiedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMCharacterDataModified", $r10, 1, null);

        $r11 = new org.apache.batik.bridge.BridgeContext$AnimatedAttrListener;

        specialinvoke $r11.<org.apache.batik.bridge.BridgeContext$AnimatedAttrListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.svg.AnimatedAttributeListener animatedAttributeListener> = $r11;

        $r12 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.svg.AnimatedAttributeListener animatedAttributeListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMDocument: void addAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r12);

        $r13 = new org.apache.batik.bridge.FocusManager;

        $r14 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        specialinvoke $r13.<org.apache.batik.bridge.FocusManager: void <init>(org.w3c.dom.Document)>($r14);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.FocusManager focusManager> = $r13;

        $r15 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r16 = new org.apache.batik.bridge.BridgeContext$CSSPropertiesChangedListener;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeContext$CSSPropertiesChangedListener: void <init>(org.apache.batik.bridge.BridgeContext)>(r0);

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.css.engine.CSSEngineListener cssPropertiesChangedListener> = $r16;

        $r17 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.css.engine.CSSEngineListener cssPropertiesChangedListener>;

        virtualinvoke $r15.<org.apache.batik.css.engine.CSSEngine: void addCSSEngineListener(org.apache.batik.css.engine.CSSEngineListener)>($r17);

        return;
    }

    protected void removeDOMListeners()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.css.engine.CSSEngine $r8;
        org.apache.batik.dom.svg.SVGOMDocument r2;
        org.w3c.dom.events.EventListener $r3, $r4, $r5, $r6;
        org.w3c.dom.Document $r1;
        org.apache.batik.css.engine.CSSEngineListener $r9;
        org.apache.batik.dom.svg.AnimatedAttributeListener $r7;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domAttrModifiedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", $r3, 1);

        $r4 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeInsertedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeInserted", $r4, 1);

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domNodeRemovedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r5, 1);

        $r6 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.events.EventListener domCharacterDataModifiedEventListener>;

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMCharacterDataModified", $r6, 1);

        $r7 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.svg.AnimatedAttributeListener animatedAttributeListener>;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMDocument: void removeAnimatedAttributeListener(org.apache.batik.dom.svg.AnimatedAttributeListener)>($r7);

        $r8 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        if $r8 == null goto label1;

        $r9 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.css.engine.CSSEngineListener cssPropertiesChangedListener>;

        virtualinvoke $r8.<org.apache.batik.css.engine.CSSEngine: void removeCSSEngineListener(org.apache.batik.css.engine.CSSEngineListener)>($r9);

        virtualinvoke $r8.<org.apache.batik.css.engine.CSSEngine: void dispose()>();

        virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: void setCSSEngine(org.apache.batik.css.engine.CSSEngine)>(null);

     label1:
        return;
    }

    protected void storeEventListener(org.w3c.dom.events.EventTarget, java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        java.lang.Throwable $r7;
        java.util.Set r1, $r6;
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.events.EventTarget r3;
        org.w3c.dom.events.EventListener r5;
        java.lang.String r4;
        org.apache.batik.bridge.BridgeContext$EventListenerMememto $r2;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter0: org.w3c.dom.events.EventTarget;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: org.w3c.dom.events.EventListener;

        z0 := @parameter3: boolean;

        r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        entermonitor r1;

     label1:
        $r6 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        $r2 = new org.apache.batik.bridge.BridgeContext$EventListenerMememto;

        specialinvoke $r2.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: void <init>(org.w3c.dom.events.EventTarget,java.lang.String,org.w3c.dom.events.EventListener,boolean,org.apache.batik.bridge.BridgeContext)>(r3, r4, r5, z0, r0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r2);

        exitmonitor r1;

        goto label3;

     label2:
        $r7 := @caughtexception;

        exitmonitor r1;

        throw $r7;

     label3:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    protected void storeEventListenerNS(org.w3c.dom.events.EventTarget, java.lang.String, java.lang.String, org.w3c.dom.events.EventListener, boolean)
    {
        java.lang.Throwable $r8;
        java.util.Set r1, $r7;
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.events.EventTarget r3;
        org.w3c.dom.events.EventListener r6;
        java.lang.String r4, r5;
        org.apache.batik.bridge.BridgeContext$EventListenerMememto $r2;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter0: org.w3c.dom.events.EventTarget;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: org.w3c.dom.events.EventListener;

        z0 := @parameter4: boolean;

        r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        entermonitor r1;

     label1:
        $r7 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        $r2 = new org.apache.batik.bridge.BridgeContext$EventListenerMememto;

        specialinvoke $r2.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: void <init>(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,org.apache.batik.bridge.BridgeContext)>(r3, r4, r5, r6, z0, r0);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r2);

        exitmonitor r1;

        goto label3;

     label2:
        $r8 := @caughtexception;

        exitmonitor r1;

        throw $r8;

     label3:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void addGVTListener(org.w3c.dom.Document)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Document;

        staticinvoke <org.apache.batik.bridge.BridgeEventSupport: void addGVTListener(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)>(r0, r1);

        return;
    }

    protected void clearChildContexts()
    {
        java.util.HashSet $r1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.HashSet childContexts>;

        virtualinvoke $r1.<java.util.HashSet: void clear()>();

        return;
    }

    public void dispose()
    {
        org.w3c.dom.Document $r9;
        java.util.Map $r11, $r15, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.script.Interpreter r27;
        java.util.Collection $r12;
        java.util.Set r1, $r2;
        org.apache.batik.bridge.BridgeContext r0;
        java.lang.Throwable $r25;
        org.apache.batik.bridge.FocusManager $r16, $r23;
        java.lang.String $r7, $r8;
        java.util.Iterator $r3, $r13;
        org.apache.batik.dom.events.NodeEventTarget $r5;
        org.apache.batik.bridge.SVGAnimationEngine $r10, $r24;
        org.w3c.dom.events.EventListener $r6;
        java.lang.Object $r4, $r14;
        org.apache.batik.bridge.BridgeContext$EventListenerMememto r26;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void clearChildContexts()>();

        r1 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        entermonitor r1;

     label01:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Set eventListenerSet>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label05;

     label02:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.apache.batik.bridge.BridgeContext$EventListenerMememto) $r4;

        $r5 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: org.apache.batik.dom.events.NodeEventTarget getTarget()>();

        $r6 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: org.w3c.dom.events.EventListener getListener()>();

        $z0 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: boolean getUseCapture()>();

        $r7 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: java.lang.String getEventType()>();

        $z1 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: boolean getNamespaced()>();

        if $r5 == null goto label05;

        if $r6 == null goto label05;

        if $r7 != null goto label03;

        goto label05;

     label03:
        if $z1 == 0 goto label04;

        $r8 = virtualinvoke r26.<org.apache.batik.bridge.BridgeContext$EventListenerMememto: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r5.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>($r8, $r7, $r6, $z0);

        goto label05;

     label04:
        interfaceinvoke $r5.<org.w3c.dom.events.EventTarget: void removeEventListener(java.lang.String,org.w3c.dom.events.EventListener,boolean)>($r7, $r6, $z0);

     label05:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label02;

        exitmonitor r1;

        goto label07;

     label06:
        $r25 := @caughtexception;

        exitmonitor r1;

        throw $r25;

     label07:
        $r9 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        if $r9 == null goto label08;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void removeDOMListeners()>();

     label08:
        $r10 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        if $r10 == null goto label09;

        $r24 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        virtualinvoke $r24.<org.apache.batik.bridge.SVGAnimationEngine: void dispose()>();

        r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine> = null;

     label09:
        $r11 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

        goto label11;

     label10:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.batik.script.Interpreter) $r14;

        if r27 == null goto label11;

        interfaceinvoke r27.<org.apache.batik.script.Interpreter: void dispose()>();

     label11:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label10;

        $r15 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map interpreterMap>;

        interfaceinvoke $r15.<java.util.Map: void clear()>();

        $r16 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.FocusManager focusManager>;

        if $r16 == null goto label12;

        $r23 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.FocusManager focusManager>;

        virtualinvoke $r23.<org.apache.batik.bridge.FocusManager: void dispose()>();

     label12:
        $r17 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        if $r17 == null goto label13;

        $r22 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementDataMap>;

        interfaceinvoke $r22.<java.util.Map: void clear()>();

     label13:
        $r18 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        if $r18 == null goto label14;

        $r21 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map nodeElementMap>;

        interfaceinvoke $r21.<java.util.Map: void clear()>();

     label14:
        $r19 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        if $r19 == null goto label15;

        $r20 = r0.<org.apache.batik.bridge.BridgeContext: java.util.Map elementNodeMap>;

        interfaceinvoke $r20.<java.util.Map: void clear()>();

     label15:
        return;

        catch java.lang.Throwable from label01 to label06 with label06;
    }

    protected static org.apache.batik.dom.svg.SVGContext getSVGContext(org.w3c.dom.Node)
    {
        org.apache.batik.dom.svg.SVGContext $r2, $r4;
        org.w3c.dom.Node r0;
        org.apache.batik.dom.svg.SVGOMElement $r3;
        boolean $z0, $z1;
        org.apache.batik.dom.svg.SVGOMDocument $r1;

        r0 := @parameter0: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        return $r4;

     label1:
        $z1 = r0 instanceof org.apache.batik.dom.svg.SVGOMDocument;

        if $z1 == 0 goto label2;

        $r1 = (org.apache.batik.dom.svg.SVGOMDocument) r0;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMDocument: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        return $r2;

     label2:
        return null;
    }

    protected static org.apache.batik.bridge.BridgeUpdateHandler getBridgeUpdateHandler(org.w3c.dom.Node)
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.bridge.BridgeUpdateHandler $r2;
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = staticinvoke <org.apache.batik.bridge.BridgeContext: org.apache.batik.dom.svg.SVGContext getSVGContext(org.w3c.dom.Node)>(r0);

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = (org.apache.batik.bridge.BridgeUpdateHandler) $r1;

     label2:
        return $r2;
    }

    public org.apache.batik.css.engine.value.Value getSystemColor(java.lang.String)
    {
        org.apache.batik.bridge.BridgeContext r2;
        java.lang.String r0;
        org.apache.batik.css.engine.value.Value $r1;

        r2 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.batik.css.engine.SystemColorSupport: org.apache.batik.css.engine.value.Value getSystemColor(java.lang.String)>(r0);

        return $r1;
    }

    public org.apache.batik.css.engine.value.Value getDefaultFontFamily()
    {
        org.apache.batik.dom.svg.SVGStylableElement r4;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.css.engine.value.Value $r8;
        org.apache.batik.css.engine.CSSEngine $r7;
        org.apache.batik.dom.svg.SVGOMDocument r2;
        org.apache.batik.bridge.UserAgent $r5;
        org.w3c.dom.Document $r1;
        java.lang.String $r6;
        org.w3c.dom.svg.SVGSVGElement $r3;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        r2 = (org.apache.batik.dom.svg.SVGOMDocument) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        r4 = (org.apache.batik.dom.svg.SVGStylableElement) $r3;

        $r5 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $r6 = interfaceinvoke $r5.<org.apache.batik.bridge.UserAgent: java.lang.String getDefaultFontFamily()>();

        $r7 = virtualinvoke r2.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r8 = virtualinvoke $r7.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.Value parsePropertyValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,java.lang.String)>(r4, "font-family", $r6);

        return $r8;
    }

    public float getLighterFontWeight(float)
    {
        org.apache.batik.bridge.UserAgent $r1;
        float f0, $f1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $f1 = interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: float getLighterFontWeight(float)>(f0);

        return $f1;
    }

    public float getBolderFontWeight(float)
    {
        org.apache.batik.bridge.UserAgent $r1;
        float f0, $f1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $f1 = interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: float getBolderFontWeight(float)>(f0);

        return $f1;
    }

    public float getPixelUnitToMillimeter()
    {
        float $f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UserAgent $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $f0 = interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getPixelToMillimeter()
    {
        float $f0;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getMediumFontSize()
    {
        float $f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.UserAgent $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        $f0 = interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: float getMediumFontSize()>();

        return $f0;
    }

    public float getBlockWidth(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        float $f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.Viewport $r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Viewport getViewport(org.w3c.dom.Element)>(r1);

        $f0 = interfaceinvoke $r2.<org.apache.batik.bridge.Viewport: float getWidth()>();

        return $f0;
    }

    public float getBlockHeight(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        float $f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.Viewport $r2;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Viewport getViewport(org.w3c.dom.Element)>(r1);

        $f0 = interfaceinvoke $r2.<org.apache.batik.bridge.Viewport: float getHeight()>();

        return $f0;
    }

    public void checkLoadExternalResource(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.util.ParsedURL r1, r2;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r3 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void checkLoadExternalResource(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r1, r2);

        return;
    }

    public boolean isDynamicDocument(org.w3c.dom.Document)
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.Document r1;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Document;

        $z0 = staticinvoke <org.apache.batik.bridge.BaseScriptingEnvironment: boolean isDynamicDocument(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Document)>(r0, r1);

        return $z0;
    }

    public boolean isInteractiveDocument(org.w3c.dom.Document)
    {
        org.w3c.dom.svg.SVGDocument $r1;
        org.apache.batik.bridge.BridgeContext r5;
        org.w3c.dom.Document r0;
        java.lang.String $r3, $r4;
        org.w3c.dom.svg.SVGSVGElement $r2;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = (org.w3c.dom.svg.SVGDocument) r0;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r3 = "http://www.w3.org/2000/svg";

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r5.<org.apache.batik.bridge.BridgeContext: boolean checkInteractiveElement(org.w3c.dom.Element)>($r2);

        return $z1;
    }

    public boolean checkInteractiveElement(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.w3c.dom.svg.SVGDocument $r3;
        org.w3c.dom.Document $r2;
        org.apache.batik.bridge.BridgeContext r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = (org.w3c.dom.svg.SVGDocument) $r2;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean checkInteractiveElement(org.w3c.dom.svg.SVGDocument,org.w3c.dom.Element)>($r3, r1);

        return $z0;
    }

    public boolean checkInteractiveElement(org.w3c.dom.svg.SVGDocument, org.w3c.dom.Element)
    {
        org.w3c.dom.svg.SVGDocument r12;
        short $s1;
        org.w3c.dom.Node $r11, $r14, r16;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.w3c.dom.svg.SVGSVGElement $r13, $r15;
        org.apache.batik.bridge.BridgeContext r10;
        org.w3c.dom.Element r0, r7;

        r10 := @this: org.apache.batik.bridge.BridgeContext;

        r12 := @parameter0: org.w3c.dom.svg.SVGDocument;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r2 = "a";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r3 = "title";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label04;

        $r14 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r15 = interfaceinvoke r12.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        if $r14 == $r15 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        return $z6;

     label04:
        $r4 = "desc";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label07;

        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r13 = interfaceinvoke r12.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        if $r11 == $r13 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        return $z7;

     label07:
        $r5 = "cursor";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label08;

        return 1;

     label08:
        $r6 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("cursor");

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label09;

        return 1;

     label09:
        r16 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label12;

     label10:
        $s1 = interfaceinvoke r16.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label11;

        r7 = (org.w3c.dom.Element) r16;

        $r8 = "http://www.w3.org/2000/svg";

        $r9 = interfaceinvoke r7.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label11;

        $z5 = virtualinvoke r10.<org.apache.batik.bridge.BridgeContext: boolean checkInteractiveElement(org.w3c.dom.Element)>(r7);

        if $z5 == 0 goto label11;

        return 1;

     label11:
        r16 = interfaceinvoke r16.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label12:
        if r16 != null goto label10;

        return 0;
    }

    public void setAnimationLimitingNone()
    {
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.SVGAnimationEngine $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        r0.<org.apache.batik.bridge.BridgeContext: int animationLimitingMode> = 0;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingMode()>();

     label1:
        return;
    }

    public void setAnimationLimitingCPU(float)
    {
        float f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.SVGAnimationEngine $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        f0 := @parameter0: float;

        r0.<org.apache.batik.bridge.BridgeContext: int animationLimitingMode> = 1;

        r0.<org.apache.batik.bridge.BridgeContext: float animationLimitingAmount> = f0;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingMode()>();

     label1:
        return;
    }

    public void setAnimationLimitingFPS(float)
    {
        float f0;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.SVGAnimationEngine $r1;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        f0 := @parameter0: float;

        r0.<org.apache.batik.bridge.BridgeContext: int animationLimitingMode> = 2;

        r0.<org.apache.batik.bridge.BridgeContext: float animationLimitingAmount> = f0;

        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setAnimationLimitingMode()>();

     label1:
        return;
    }

    protected void setAnimationLimitingMode()
    {
        org.apache.batik.bridge.SVGAnimationEngine $r1, $r2, $r3;
        int $i0;
        float $f0, $f1;
        org.apache.batik.bridge.BridgeContext r0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $i0 = r0.<org.apache.batik.bridge.BridgeContext: int animationLimitingMode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        virtualinvoke $r3.<org.apache.batik.bridge.SVGAnimationEngine: void setAnimationLimitingNone()>();

        goto label4;

     label2:
        $r2 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        $f1 = r0.<org.apache.batik.bridge.BridgeContext: float animationLimitingAmount>;

        virtualinvoke $r2.<org.apache.batik.bridge.SVGAnimationEngine: void setAnimationLimitingCPU(float)>($f1);

        goto label4;

     label3:
        $r1 = r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine animationEngine>;

        $f0 = r0.<org.apache.batik.bridge.BridgeContext: float animationLimitingAmount>;

        virtualinvoke $r1.<org.apache.batik.bridge.SVGAnimationEngine: void setAnimationLimitingFPS(float)>($f0);

     label4:
        return;
    }

    public void registerSVGBridges()
    {
        java.util.Iterator $r4;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.BridgeExtension r6;
        org.apache.batik.bridge.UserAgent $r1;
        java.util.List $r3;
        org.w3c.dom.Document $r2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r2 = r0.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document document>;

        $r3 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: java.util.List getBridgeExtensions(org.w3c.dom.Document)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.bridge.BridgeExtension) $r5;

        interfaceinvoke r6.<org.apache.batik.bridge.BridgeExtension: void registerTags(org.apache.batik.bridge.BridgeContext)>(r0);

        interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: void registerExtension(org.apache.batik.bridge.BridgeExtension)>(r6);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public java.util.List getBridgeExtensions(org.w3c.dom.Document)
    {
        org.apache.batik.bridge.svg12.SVG12BridgeExtension $r16;
        java.util.ListIterator $r8;
        org.apache.batik.bridge.SVGBridgeExtension r14, $r15;
        byte $b1;
        org.w3c.dom.Document r0;
        int $i0, $i2;
        java.lang.String $r3;
        java.util.LinkedList $r17;
        org.w3c.dom.svg.SVGSVGElement $r2;
        boolean $z0, $z1, $z2;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.bridge.BridgeExtension r10;
        org.apache.batik.dom.svg.SVGOMDocument $r1;
        java.util.List $r6, $r7, $r11;
        float $f0, $f1;
        java.lang.Object $r9;

        r4 := @this: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = (org.apache.batik.dom.svg.SVGOMDocument) r0;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.svg.SVGOMDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "version");

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("1.0");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z2 == 0 goto label2;

     label1:
        $r15 = new org.apache.batik.bridge.SVGBridgeExtension;

        specialinvoke $r15.<org.apache.batik.bridge.SVGBridgeExtension: void <init>()>();

        r14 = $r15;

        goto label3;

     label2:
        $r16 = new org.apache.batik.bridge.svg12.SVG12BridgeExtension;

        specialinvoke $r16.<org.apache.batik.bridge.svg12.SVG12BridgeExtension: void <init>()>();

        r14 = $r16;

     label3:
        $f0 = interfaceinvoke r14.<org.apache.batik.bridge.BridgeExtension: float getPriority()>();

        $r17 = new java.util.LinkedList;

        $r6 = staticinvoke <org.apache.batik.bridge.BridgeContext: java.util.List getGlobalBridgeExtensions()>();

        specialinvoke $r17.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        r4.<org.apache.batik.bridge.BridgeContext: java.util.List extensions> = $r17;

        $r7 = r4.<org.apache.batik.bridge.BridgeContext: java.util.List extensions>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator()>();

        goto label4;

     label4:
        $z0 = interfaceinvoke $r8.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        interfaceinvoke $r8.<java.util.ListIterator: void add(java.lang.Object)>(r14);

        goto label7;

     label5:
        $r9 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object next()>();

        r10 = (org.apache.batik.bridge.BridgeExtension) $r9;

        $f1 = interfaceinvoke r10.<org.apache.batik.bridge.BridgeExtension: float getPriority()>();

        $b1 = $f1 cmpl $f0;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label6;

        interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r8.<java.util.ListIterator: void add(java.lang.Object)>(r14);

        goto label7;

     label6:
        goto label4;

     label7:
        $r11 = r4.<org.apache.batik.bridge.BridgeContext: java.util.List extensions>;

        return $r11;
    }

    public static synchronized java.util.List getGlobalBridgeExtensions()
    {
        java.util.ListIterator $r7;
        byte $b0;
        int $i1;
        java.util.LinkedList $r13;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.apache.batik.bridge.BridgeExtension r5, r9;
        java.util.List $r0, $r6, $r10, $r11;
        float $f0, $f1;
        java.lang.Class $r2, $r12;
        java.lang.Object $r4, $r8;

        $r0 = <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions>;

        if $r0 == null goto label1;

        $r11 = <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions>;

        return $r11;

     label1:
        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions> = $r13;

        $r2 = <org.apache.batik.bridge.BridgeContext: java.lang.Class class$org$apache$batik$bridge$BridgeExtension>;

        if $r2 != null goto label2;

        $r12 = staticinvoke <org.apache.batik.bridge.BridgeContext: java.lang.Class class$(java.lang.String)>("org.apache.batik.bridge.BridgeExtension");

        <org.apache.batik.bridge.BridgeContext: java.lang.Class class$org$apache$batik$bridge$BridgeExtension> = $r12;

        goto label3;

     label2:
        $r12 = <org.apache.batik.bridge.BridgeContext: java.lang.Class class$org$apache$batik$bridge$BridgeExtension>;

     label3:
        $r3 = staticinvoke <org.apache.batik.util.Service: java.util.Iterator providers(java.lang.Class)>($r12);

        goto label8;

     label4:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.batik.bridge.BridgeExtension) $r4;

        $f0 = interfaceinvoke r5.<org.apache.batik.bridge.BridgeExtension: float getPriority()>();

        $r6 = <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.ListIterator listIterator()>();

        goto label5;

     label5:
        $z0 = interfaceinvoke $r7.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label6;

        interfaceinvoke $r7.<java.util.ListIterator: void add(java.lang.Object)>(r5);

        goto label8;

     label6:
        $r8 = interfaceinvoke $r7.<java.util.ListIterator: java.lang.Object next()>();

        r9 = (org.apache.batik.bridge.BridgeExtension) $r8;

        $f1 = interfaceinvoke r9.<org.apache.batik.bridge.BridgeExtension: float getPriority()>();

        $b0 = $f1 cmpl $f0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label7;

        interfaceinvoke $r7.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke $r7.<java.util.ListIterator: void add(java.lang.Object)>(r5);

        goto label8;

     label7:
        goto label5;

     label8:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $r10 = <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions>;

        return $r10;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        org.apache.batik.script.InterpreterPool $r0;

        <org.apache.batik.bridge.BridgeContext: int DYNAMIC> = 2;

        <org.apache.batik.bridge.BridgeContext: int INTERACTIVE> = 1;

        <org.apache.batik.bridge.BridgeContext: int STATIC> = 0;

        $r0 = new org.apache.batik.script.InterpreterPool;

        specialinvoke $r0.<org.apache.batik.script.InterpreterPool: void <init>()>();

        <org.apache.batik.bridge.BridgeContext: org.apache.batik.script.InterpreterPool sharedPool> = $r0;

        <org.apache.batik.bridge.BridgeContext: java.util.List globalExtensions> = null;

        return;
    }
}
