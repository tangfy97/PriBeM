public class com.hp.hpl.jena.tdb.base.file.PlainFilePersistent extends com.hp.hpl.jena.tdb.base.file.PlainFile
{
    private static org.slf4j.Logger log;
    private com.hp.hpl.jena.tdb.base.file.FileBase file;

    void <init>(com.hp.hpl.jena.tdb.base.file.Location, java.lang.String)
    {
        com.hp.hpl.jena.tdb.base.file.PlainFilePersistent r0;
        com.hp.hpl.jena.tdb.base.file.Location r1;
        java.lang.String r2, $r3;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFilePersistent;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.file.Location;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.file.Location: java.lang.String getPath(java.lang.String,java.lang.String)>(r2, "dat");

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: void <init>(java.lang.String)>($r3);

        return;
    }

    void <init>(java.lang.String)
    {
        com.hp.hpl.jena.tdb.base.file.FileBase $r2;
        long $l0;
        com.hp.hpl.jena.tdb.base.file.PlainFilePersistent r0;
        java.lang.String r1;
        java.nio.ByteBuffer $r3;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFilePersistent;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.PlainFile: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.base.file.FileBase: com.hp.hpl.jena.tdb.base.file.FileBase create(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: com.hp.hpl.jena.tdb.base.file.FileBase file> = $r2;

        $l0 = r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: long filesize>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: java.nio.ByteBuffer allocateBuffer(long)>($l0);

        r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: java.nio.ByteBuffer byteBuffer> = $r3;

        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;
        com.hp.hpl.jena.tdb.base.file.PlainFilePersistent r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFilePersistent;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: void sync()>();

        return;
    }

    public void close()
    {
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;
        com.hp.hpl.jena.tdb.base.file.PlainFilePersistent r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFilePersistent;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: void close()>();

        return;
    }

    protected java.nio.ByteBuffer allocateBuffer(long)
    {
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;
        long l0;
        java.io.IOException $r5;
        com.hp.hpl.jena.tdb.base.file.PlainFilePersistent r0;
        java.nio.channels.FileChannel $r2;
        java.nio.channels.FileChannel$MapMode $r3;
        java.nio.MappedByteBuffer $r4;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFilePersistent;

        l0 := @parameter0: long;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: java.nio.channels.FileChannel channel()>();

        $r3 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_WRITE>;

        $r4 = virtualinvoke $r2.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r3, 0L, l0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r5);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/base/file/PlainFilePersistent;");

        <com.hp.hpl.jena.tdb.base.file.PlainFilePersistent: org.slf4j.Logger log> = $r0;

        return;
    }
}
