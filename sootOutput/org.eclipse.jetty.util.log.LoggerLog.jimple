public class org.eclipse.jetty.util.log.LoggerLog extends org.eclipse.jetty.util.log.AbstractLogger
{
    private final java.lang.Object _logger;
    private final java.lang.reflect.Method _debugMT;
    private final java.lang.reflect.Method _debugMAA;
    private final java.lang.reflect.Method _infoMT;
    private final java.lang.reflect.Method _infoMAA;
    private final java.lang.reflect.Method _warnMT;
    private final java.lang.reflect.Method _warnMAA;
    private final java.lang.reflect.Method _setDebugEnabledE;
    private final java.lang.reflect.Method _getLoggerN;
    private final java.lang.reflect.Method _getName;
    private volatile boolean _debug;

    public void <init>(java.lang.Object)
    {
        java.lang.IllegalStateException $r29;
        java.lang.Object[] $r24;
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Boolean $r27;
        java.lang.reflect.Method $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r19, $r21, $r23;
        boolean $z0;
        java.lang.Class[] $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r20, $r22;
        java.lang.Exception $r28;
        java.lang.Object r1, $r25, $r26;
        java.lang.Class $r2, $r18;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.eclipse.jetty.util.log.AbstractLogger: void <init>()>();

     label1:
        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger> = r1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "Ljava/lang/String;";

        $r3[1] = class "Ljava/lang/Throwable;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("debug", $r3);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _debugMT> = $r4;

        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Ljava/lang/String;";

        $r5[1] = class "[Ljava/lang/Object;";

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("debug", $r5);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _debugMAA> = $r6;

        $r7 = newarray (java.lang.Class)[2];

        $r7[0] = class "Ljava/lang/String;";

        $r7[1] = class "Ljava/lang/Throwable;";

        $r8 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("info", $r7);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _infoMT> = $r8;

        $r9 = newarray (java.lang.Class)[2];

        $r9[0] = class "Ljava/lang/String;";

        $r9[1] = class "[Ljava/lang/Object;";

        $r10 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("info", $r9);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _infoMAA> = $r10;

        $r11 = newarray (java.lang.Class)[2];

        $r11[0] = class "Ljava/lang/String;";

        $r11[1] = class "Ljava/lang/Throwable;";

        $r12 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("warn", $r11);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _warnMT> = $r12;

        $r13 = newarray (java.lang.Class)[2];

        $r13[0] = class "Ljava/lang/String;";

        $r13[1] = class "[Ljava/lang/Object;";

        $r14 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("warn", $r13);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _warnMAA> = $r14;

        $r15 = newarray (java.lang.Class)[0];

        $r16 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isDebugEnabled", $r15);

        $r17 = newarray (java.lang.Class)[1];

        $r18 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r17[0] = $r18;

        $r19 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setDebugEnabled", $r17);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _setDebugEnabledE> = $r19;

        $r20 = newarray (java.lang.Class)[1];

        $r20[0] = class "Ljava/lang/String;";

        $r21 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getLogger", $r20);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _getLoggerN> = $r21;

        $r22 = newarray (java.lang.Class)[0];

        $r23 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getName", $r22);

        r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _getName> = $r23;

        $r25 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r24 = newarray (java.lang.Object)[0];

        $r26 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r25, $r24);

        $r27 = (java.lang.Boolean) $r26;

        $z0 = virtualinvoke $r27.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.eclipse.jetty.util.log.LoggerLog: boolean _debug> = $z0;

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r28);

        throw $r29;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getName()
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2, $r4;
        java.lang.String $r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r6;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

     label1:
        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _getName>;

        $r2 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        $r5 = (java.lang.String) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public transient void warn(java.lang.String, java.lang.Object[])
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;
        java.lang.String r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r4;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

     label1:
        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _warnMAA>;

        $r2 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void warn(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.eclipse.jetty.util.log.LoggerLog r0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r1 := @parameter0: java.lang.Throwable;

        virtualinvoke r0.<org.eclipse.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Throwable)>("", r1);

        return;
    }

    public void warn(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] $r1;
        java.lang.Object $r4;
        java.lang.String r2;
        java.lang.reflect.Method $r5;
        java.lang.Exception $r6;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Throwable;

     label1:
        $r5 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _warnMT>;

        $r4 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public transient void info(java.lang.String, java.lang.Object[])
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;
        java.lang.String r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r4;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

     label1:
        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _infoMAA>;

        $r2 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void info(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.eclipse.jetty.util.log.LoggerLog r0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r1 := @parameter0: java.lang.Throwable;

        virtualinvoke r0.<org.eclipse.jetty.util.log.LoggerLog: void info(java.lang.String,java.lang.Throwable)>("", r1);

        return;
    }

    public void info(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] $r1;
        java.lang.Object $r4;
        java.lang.String r2;
        java.lang.reflect.Method $r5;
        java.lang.Exception $r6;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Throwable;

     label1:
        $r5 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _infoMT>;

        $r4 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean isDebugEnabled()
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        $z0 = r0.<org.eclipse.jetty.util.log.LoggerLog: boolean _debug>;

        return $z0;
    }

    public void setDebugEnabled(boolean)
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] $r1;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        java.lang.reflect.Method $r2;
        java.lang.Exception $r5;
        boolean z0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _setDebugEnabledE>;

        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[0] = $r4;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r1);

        r0.<org.eclipse.jetty.util.log.LoggerLog: boolean _debug> = z0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public transient void debug(java.lang.String, java.lang.Object[])
    {
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;
        java.lang.String r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r4;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $z0 = r0.<org.eclipse.jetty.util.log.LoggerLog: boolean _debug>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _debugMAA>;

        $r2 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void debug(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.eclipse.jetty.util.log.LoggerLog r0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r1 := @parameter0: java.lang.Throwable;

        virtualinvoke r0.<org.eclipse.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Throwable)>("", r1);

        return;
    }

    public void debug(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        java.lang.Object[] $r1;
        java.lang.Exception $r6;
        org.eclipse.jetty.util.log.LoggerLog r0;
        java.lang.Object $r4;
        java.lang.String r2;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Throwable;

        $z0 = r0.<org.eclipse.jetty.util.log.LoggerLog: boolean _debug>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _debugMT>;

        $r4 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void ignore(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.eclipse.jetty.util.log.LoggerLog r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.eclipse.jetty.util.log.Log: boolean isIgnored()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.eclipse.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Throwable)>("IGNORED ", r1);

     label1:
        return;
    }

    protected org.eclipse.jetty.util.log.Logger newLogger(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.Exception $r7;
        org.eclipse.jetty.util.log.LoggerLog r0, $r6;
        java.lang.Object $r3, $r5;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @this: org.eclipse.jetty.util.log.LoggerLog;

        r2 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.reflect.Method _getLoggerN>;

        $r3 = r0.<org.eclipse.jetty.util.log.LoggerLog: java.lang.Object _logger>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r1);

        $r6 = new org.eclipse.jetty.util.log.LoggerLog;

        specialinvoke $r6.<org.eclipse.jetty.util.log.LoggerLog: void <init>(java.lang.Object)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        return r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
