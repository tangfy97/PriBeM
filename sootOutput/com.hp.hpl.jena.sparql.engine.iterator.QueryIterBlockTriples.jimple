public class com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples extends com.hp.hpl.jena.sparql.engine.iterator.QueryIter1
{
    private com.hp.hpl.jena.sparql.core.BasicPattern pattern;
    private com.hp.hpl.jena.graph.Graph graph;
    private com.hp.hpl.jena.sparql.engine.QueryIterator output;

    public static com.hp.hpl.jena.sparql.engine.QueryIterator create(com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples $r0;
        com.hp.hpl.jena.sparql.core.BasicPattern r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r3 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3);

        return $r0;
    }

    private void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern $r8;
        com.hp.hpl.jena.sparql.core.BasicPattern r3;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r0;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1, r9;
        com.hp.hpl.jena.graph.Graph $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r2 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIter1: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2);

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.core.BasicPattern pattern> = r3;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.graph.Graph graph> = $r4;

        r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator getInput()>();

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r9, r7, r2);

        r9 = $r8;

        goto label1;

     label2:
        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output> = r9;

        return;
    }

    protected boolean hasNextBinding()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        return $z0;
    }

    protected com.hp.hpl.jena.sparql.engine.binding.Binding moveToNextBinding()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        return $r2;
    }

    protected void closeSubIterator()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

     label1:
        r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output> = null;

        return;
    }

    protected void requestSubCancel()
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.engine.QueryIterator output>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.QueryIterator: void cancel()>();

     label1:
        return;
    }

    protected void details(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        java.lang.String $r2;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r3 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r2);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void incIndent()>();

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterBlockTriples: com.hp.hpl.jena.sparql.core.BasicPattern pattern>;

        staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: void formatPattern(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, $r4, r3);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void decIndent()>();

        return;
    }
}
