public abstract class com.hp.hpl.jena.tdb.base.file.BlockAccessBase extends java.lang.Object implements com.hp.hpl.jena.tdb.base.file.BlockAccess
{
    protected final int blockSize;
    protected final com.hp.hpl.jena.tdb.base.file.FileBase file;
    protected final java.lang.String label;
    protected long numFileBlocks;
    protected final java.util.concurrent.atomic.AtomicLong seq;
    protected boolean isEmpty;

    public void <init>(java.lang.String, int)
    {
        java.lang.Object[] $r7, $r12;
        long $l1, l2, $l3, $l4, $l5, $l7;
        java.lang.Integer $r9, $r14;
        byte $b6, $b8, $b9;
        java.lang.Long $r8, $r13;
        int i0, $i10;
        java.lang.String r1, $r3, $r10, $r15;
        com.hp.hpl.jena.tdb.base.block.BlockException $r17;
        com.hp.hpl.jena.tdb.base.file.FileBase $r2, $r4;
        org.slf4j.Logger $r11;
        java.util.concurrent.atomic.AtomicLong $r16;
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks> = -1L;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: boolean isEmpty> = 0;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.base.file.FileBase: com.hp.hpl.jena.tdb.base.file.FileBase create(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file> = $r2;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: int blockSize> = i0;

        $r3 = staticinvoke <org.apache.jena.atlas.lib.FileOps: java.lang.String basename(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.lang.String label> = $r3;

        $r4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $l1 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.file.FileBase: long size()>();

        l2 = (long) i0;

        $l3 = $l1 / l2;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks> = $l3;

        $r16 = new java.util.concurrent.atomic.AtomicLong;

        $l4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l4);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.util.concurrent.atomic.AtomicLong seq> = $r16;

        $l5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $b6 = $l5 cmp 2147483647L;

        $i10 = (int) $b6;

        if $i10 <= 0 goto label1;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: org.slf4j.Logger getLog()>();

        $r12 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File size (%d) exceeds tested block number limits (%d)", $r12);

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r15);

     label1:
        $l7 = $l1 % l2;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label2;

        $r17 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File size (%d) not a multiple of blocksize (%d)", $r7);

        specialinvoke $r17.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r10);

        throw $r17;

     label2:
        $b9 = $l1 cmp 0L;

        if $b9 != 0 goto label3;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: boolean isEmpty> = 1;

     label3:
        return;
    }

    protected abstract org.slf4j.Logger getLog();

    public final boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        $z0 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: boolean isEmpty>;

        return $z0;
    }

    protected final void writeNotification(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: boolean isEmpty> = 0;

        return;
    }

    protected final void overwriteNotification(com.hp.hpl.jena.tdb.base.block.Block)
    {
        long $l0, $l1, $l3, $l4, $l5;
        java.util.concurrent.atomic.AtomicLong $r4;
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r2;
        byte $b2;
        java.lang.Long $r1, $r3;
        com.hp.hpl.jena.tdb.base.block.Block r0;
        int $i6;

        r2 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $l1 = r2.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $b2 = $l0 cmp $l1;

        $i6 = (int) $b2;

        if $i6 < 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $l3 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l4 = $l3 + 1L;

        r2.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks> = $l4;

        $r4 = r2.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.util.concurrent.atomic.AtomicLong seq>;

        $l5 = r2.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l5);

     label1:
        return;
    }

    protected final int allocateId()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        int i1;
        long $l0, $l2, $l3;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void checkIfClosed()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.util.concurrent.atomic.AtomicLong seq>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        i1 = (int) $l0;

        $l2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $l3 = $l2 + 1L;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks> = $l3;

        return i1;
    }

    public final synchronized boolean valid(long)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        byte $b2, $b3;
        int $i4, $i5;
        long l0, $l1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        l0 := @parameter0: long;

        $l1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $b2 = l0 cmp $l1;

        $i4 = (int) $b2;

        if $i4 < 0 goto label1;

        return 0;

     label1:
        $b3 = l0 cmp 0L;

        $i5 = (int) $b3;

        if $i5 >= 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected final void check(long)
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r2, $r9;
        long l0, $l4, $l5, $l7;
        byte $b1, $b2, $b3, $b6, $b8;
        java.lang.Long $r5, $r6, $r10;
        int $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r4, $r7, $r11;
        com.hp.hpl.jena.tdb.base.block.BlockException $r13, $r14;
        com.hp.hpl.jena.tdb.base.file.FileBase $r3;
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        l0 := @parameter0: long;

        $b1 = l0 cmp 2147483647L;

        $i9 = (int) $b1;

        if $i9 <= 0 goto label1;

        $r13 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BlockAccessBase: Id (%d) too large", $r9);

        specialinvoke $r13.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r11);

        throw $r13;

     label1:
        $b2 = l0 cmp 0L;

        $i10 = (int) $b2;

        if $i10 < 0 goto label2;

        $l7 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $b8 = l0 cmp $l7;

        $i11 = (int) $b8;

        if $i11 < 0 goto label9;

     label2:
        entermonitor r0;

     label3:
        $b3 = l0 cmp 0L;

        $i12 = (int) $b3;

        if $i12 < 0 goto label4;

        $l5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $b6 = l0 cmp $l5;

        $i13 = (int) $b6;

        if $i13 < 0 goto label5;

     label4:
        $r14 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r4 = $r3.<com.hp.hpl.jena.tdb.base.file.FileBase: java.lang.String filename>;

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[1] = $r5;

        $l4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: long numFileBlocks>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r2[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BlockAccessBase: Bounds exception: %s: (%d,%d)", $r2);

        specialinvoke $r14.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r7);

        throw $r14;

     label5:
        exitmonitor r0;

     label6:
        goto label9;

     label7:
        $r12 := @caughtexception;

        exitmonitor r0;

     label8:
        throw $r12;

     label9:
        return;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected final void check(com.hp.hpl.jena.tdb.base.block.Block)
    {
        java.lang.Object[] $r8;
        long $l0;
        java.lang.Integer $r9, $r10;
        java.nio.ByteBuffer $r3;
        java.lang.Long $r2;
        int $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.block.BlockException $r6, $r7;
        java.lang.String $r11;
        java.nio.ByteOrder $r4, $r5;
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void check(long)>($l0);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int capacity()>();

        $i2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: int blockSize>;

        if $i1 == $i2 goto label1;

        $r7 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        $r8 = newarray (java.lang.Object)[2];

        $i3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: int blockSize>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r9;

        $i4 = virtualinvoke $r3.<java.nio.ByteBuffer: int capacity()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BlockMgrFile: Wrong size block.  Expected=%d : actual=%d", $r8);

        specialinvoke $r7.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r5 = <com.hp.hpl.jena.tdb.sys.SystemTDB: java.nio.ByteOrder NetworkOrder>;

        if $r4 == $r5 goto label2;

        $r6 = new com.hp.hpl.jena.tdb.base.block.BlockException;

        specialinvoke $r6.<com.hp.hpl.jena.tdb.base.block.BlockException: void <init>(java.lang.String)>("BlockMgrFile: Wrong byte order");

        throw $r6;

     label2:
        return;
    }

    protected void force()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: void sync()>();

        return;
    }

    public final boolean isClosed()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;
        java.nio.channels.FileChannel $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: java.nio.channels.FileChannel channel()>();

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected final void checkIfClosed()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        org.slf4j.Logger $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: org.slf4j.Logger getLog()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void error(java.lang.String)>("File has been closed");

     label1:
        return;
    }

    protected abstract void _close();

    public final void close()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        com.hp.hpl.jena.tdb.base.file.FileBase $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void _close()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.file.FileBase: void close()>();

        return;
    }

    public java.lang.String getLabel()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessBase r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessBase;

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.lang.String label>;

        return $r1;
    }
}
