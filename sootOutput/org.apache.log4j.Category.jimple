public class org.apache.log4j.Category extends java.lang.Object implements org.apache.log4j.spi.AppenderAttachable
{
    protected java.lang.String name;
    protected volatile org.apache.log4j.Level level;
    protected volatile org.apache.log4j.Category parent;
    private static final java.lang.String FQCN;
    protected java.util.ResourceBundle resourceBundle;
    protected org.apache.log4j.spi.LoggerRepository repository;
    org.apache.log4j.helpers.AppenderAttachableImpl aai;
    protected boolean additive;
    static java.lang.Class class$org$apache$log4j$Category;

    protected void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.Category: boolean additive> = 1;

        r0.<org.apache.log4j.Category: java.lang.String name> = r1;

        return;
    }

    public synchronized void addAppender(org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r2;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3, $r5;
        org.apache.log4j.spi.LoggerRepository $r4;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r2 := @parameter0: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r1 != null goto label1;

        $r5 = new org.apache.log4j.helpers.AppenderAttachableImpl;

        specialinvoke $r5.<org.apache.log4j.helpers.AppenderAttachableImpl: void <init>()>();

        r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai> = $r5;

     label1:
        $r3 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>(r2);

        $r4 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        interfaceinvoke $r4.<org.apache.log4j.spi.LoggerRepository: void fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r0, r2);

        return;
    }

    public void assertLog(boolean, java.lang.String)
    {
        java.lang.String r1;
        boolean z0;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.log4j.Category: void error(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void callAppenders(org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.Throwable $r6;
        org.apache.log4j.spi.LoggingEvent r4;
        int $i0, i1;
        org.apache.log4j.spi.LoggerRepository $r1;
        org.apache.log4j.helpers.AppenderAttachableImpl $r3, $r5;
        org.apache.log4j.Category r0, r2, r7;
        boolean $z0;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        i1 = 0;

        r7 = r0;

     label01:
        if r7 == null goto label10;

        r2 = r7;

        entermonitor r7;

     label02:
        $r3 = r7.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r3 == null goto label03;

        $r5 = r7.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $i0 = virtualinvoke $r5.<org.apache.log4j.helpers.AppenderAttachableImpl: int appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)>(r4);

        i1 = i1 + $i0;

     label03:
        $z0 = r7.<org.apache.log4j.Category: boolean additive>;

        if $z0 != 0 goto label05;

        exitmonitor r2;

     label04:
        goto label10;

     label05:
        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r6 := @caughtexception;

        exitmonitor r2;

     label08:
        throw $r6;

     label09:
        r7 = r7.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        goto label01;

     label10:
        if i1 != 0 goto label11;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: void emitNoAppenderWarning(org.apache.log4j.Category)>(r0);

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    synchronized void closeNestedAppenders()
    {
        org.apache.log4j.Appender r3;
        java.util.Enumeration $r1;
        java.lang.Object $r2;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = virtualinvoke r0.<org.apache.log4j.Category: java.util.Enumeration getAllAppenders()>();

        if $r1 == null goto label3;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (org.apache.log4j.Appender) $r2;

        $z1 = r3 instanceof org.apache.log4j.spi.AppenderAttachable;

        if $z1 == 0 goto label2;

        interfaceinvoke r3.<org.apache.log4j.Appender: void close()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public void debug(java.lang.Object)
    {
        org.apache.log4j.Level $r2, $r3, $r5;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(10000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r4, null);

     label2:
        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Level $r2, $r3, $r6;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r7;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(10000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r4, r5);

     label2:
        return;
    }

    public void error(java.lang.Object)
    {
        org.apache.log4j.Level $r2, $r3, $r5;
        int $i1;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i1 = (int) 40000;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r4, null);

     label2:
        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Level $r2, $r3, $r6;
        int $i1;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r7;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i1 = (int) 40000;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r4, r5);

     label2:
        return;
    }

    public static org.apache.log4j.Logger exists(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger exists(java.lang.String)>(r0);

        return $r1;
    }

    public void fatal(java.lang.Object)
    {
        org.apache.log4j.Level $r2, $r3, $r5;
        int $i1;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i1 = (int) 50000;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r4, null);

     label2:
        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Level $r2, $r3, $r6;
        int $i1;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r7;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i1 = (int) 50000;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level FATAL>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r4, r5);

     label2:
        return;
    }

    protected void forcedLog(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Priority r3;
        org.apache.log4j.spi.LoggingEvent $r1;
        java.lang.Object r4;
        java.lang.String r2;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.log4j.Priority;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Throwable;

        $r1 = new org.apache.log4j.spi.LoggingEvent;

        specialinvoke $r1.<org.apache.log4j.spi.LoggingEvent: void <init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(r2, r0, r3, r4, r5);

        virtualinvoke r0.<org.apache.log4j.Category: void callAppenders(org.apache.log4j.spi.LoggingEvent)>($r1);

        return;
    }

    public boolean getAdditivity()
    {
        org.apache.log4j.Category r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.Category;

        $z0 = r0.<org.apache.log4j.Category: boolean additive>;

        return $z0;
    }

    public synchronized java.util.Enumeration getAllAppenders()
    {
        org.apache.log4j.helpers.NullEnumeration $r4;
        java.util.Enumeration $r3;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r2;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <org.apache.log4j.helpers.NullEnumeration: org.apache.log4j.helpers.NullEnumeration getInstance()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>();

        return $r3;
    }

    public synchronized org.apache.log4j.Appender getAppender(java.lang.String)
    {
        org.apache.log4j.Appender $r4;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        java.lang.String r2;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: org.apache.log4j.Appender getAppender(java.lang.String)>(r2);

        return $r4;
    }

    public org.apache.log4j.Level getEffectiveLevel()
    {
        org.apache.log4j.Level $r1, $r2;
        org.apache.log4j.Category r0, r3;

        r0 := @this: org.apache.log4j.Category;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r1 = r3.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        if $r1 == null goto label2;

        $r2 = r3.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        return $r2;

     label2:
        r3 = r3.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        goto label1;

     label3:
        return null;
    }

    public org.apache.log4j.Priority getChainedPriority()
    {
        org.apache.log4j.Level $r1, $r2;
        org.apache.log4j.Category r0, r3;

        r0 := @this: org.apache.log4j.Category;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r1 = r3.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        if $r1 == null goto label2;

        $r2 = r3.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        return $r2;

     label2:
        r3 = r3.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        goto label1;

     label3:
        return null;
    }

    public static java.util.Enumeration getCurrentCategories()
    {
        java.util.Enumeration $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: java.util.Enumeration getCurrentLoggers()>();

        return $r0;
    }

    public static org.apache.log4j.spi.LoggerRepository getDefaultHierarchy()
    {
        org.apache.log4j.spi.LoggerRepository $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.spi.LoggerRepository getLoggerRepository()>();

        return $r0;
    }

    public org.apache.log4j.spi.LoggerRepository getHierarchy()
    {
        org.apache.log4j.spi.LoggerRepository $r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        return $r1;
    }

    public org.apache.log4j.spi.LoggerRepository getLoggerRepository()
    {
        org.apache.log4j.spi.LoggerRepository $r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        return $r1;
    }

    public static org.apache.log4j.Category getInstance(java.lang.String)
    {
        org.apache.log4j.Logger $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.log4j.Category getInstance(java.lang.Class)
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getLogger(java.lang.Class)>(r0);

        return $r1;
    }

    public final java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: java.lang.String name>;

        return $r1;
    }

    public final org.apache.log4j.Category getParent()
    {
        org.apache.log4j.Category r0, $r1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        return $r1;
    }

    public final org.apache.log4j.Level getLevel()
    {
        org.apache.log4j.Category r0;
        org.apache.log4j.Level $r1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        return $r1;
    }

    public final org.apache.log4j.Level getPriority()
    {
        org.apache.log4j.Category r0;
        org.apache.log4j.Level $r1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.Level level>;

        return $r1;
    }

    public static final org.apache.log4j.Category getRoot()
    {
        org.apache.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.log4j.LogManager: org.apache.log4j.Logger getRootLogger()>();

        return $r0;
    }

    public java.util.ResourceBundle getResourceBundle()
    {
        java.util.ResourceBundle $r1, $r2;
        org.apache.log4j.Category r0, r3;

        r0 := @this: org.apache.log4j.Category;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r1 = r3.<org.apache.log4j.Category: java.util.ResourceBundle resourceBundle>;

        if $r1 == null goto label2;

        $r2 = r3.<org.apache.log4j.Category: java.util.ResourceBundle resourceBundle>;

        return $r2;

     label2:
        r3 = r3.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        goto label1;

     label3:
        return null;
    }

    protected java.lang.String getResourceBundleString(java.lang.String)
    {
        java.util.MissingResourceException $r4;
        java.util.ResourceBundle $r1;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.lang.String r2, $r3, $r9;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.log4j.Category: java.util.ResourceBundle getResourceBundle()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No resource is associated with key \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.Category: void error(java.lang.Object)>($r9);

        return null;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    public void info(java.lang.Object)
    {
        org.apache.log4j.Level $r2, $r3, $r5;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(20000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r4, null);

     label2:
        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Level $r2, $r3, $r6;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r7;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(20000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r4, r5);

     label2:
        return;
    }

    public boolean isAttached(org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r0;
        org.apache.log4j.helpers.AppenderAttachableImpl $r2, $r3;
        org.apache.log4j.Category r1;
        boolean $z0;

        r1 := @this: org.apache.log4j.Category;

        r0 := @parameter0: org.apache.log4j.Appender;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r2 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $z0 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: boolean isAttached(org.apache.log4j.Appender)>(r0);

        return $z0;
    }

    public boolean isDebugEnabled()
    {
        org.apache.log4j.Level $r2, $r3;
        org.apache.log4j.spi.LoggerRepository $r1;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(10000);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        return $z1;
    }

    public boolean isEnabledFor(org.apache.log4j.Priority)
    {
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        return $z1;
    }

    public boolean isInfoEnabled()
    {
        org.apache.log4j.Level $r2, $r3;
        org.apache.log4j.spi.LoggerRepository $r1;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(20000);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level INFO>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        return $z1;
    }

    public void l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.String r4, $r5, $r7, r8;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Throwable;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.apache.log4j.Category: java.lang.String getResourceBundleString(java.lang.String)>(r4);

        r8 = $r5;

        if $r5 != null goto label2;

        r8 = r4;

     label2:
        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, r1, r8, r6);

     label3:
        return;
    }

    public void l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Object[], java.lang.Throwable)
    {
        java.lang.Throwable r7;
        java.lang.Object[] r6;
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.String r4, $r5, $r8, r9;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object[];

        r7 := @parameter3: java.lang.Throwable;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r0.<org.apache.log4j.Category: java.lang.String getResourceBundleString(java.lang.String)>(r4);

        if $r5 != null goto label2;

        r9 = r4;

        goto label3;

     label2:
        r9 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r5, r6);

     label3:
        $r8 = <org.apache.log4j.Category: java.lang.String FQCN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r8, r1, r9, r7);

     label4:
        return;
    }

    public void log(org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Throwable;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, r1, r4, r5);

     label2:
        return;
    }

    public void log(org.apache.log4j.Priority, java.lang.Object)
    {
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.Object r4;
        java.lang.String $r5;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r5 = <org.apache.log4j.Category: java.lang.String FQCN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r5, r1, r4, null);

     label2:
        return;
    }

    public void log(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        org.apache.log4j.Priority r1;
        org.apache.log4j.Level $r3;
        int $i0;
        org.apache.log4j.spi.LoggerRepository $r2;
        java.lang.Object r5;
        java.lang.String r4;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.log4j.Priority;

        r5 := @parameter2: java.lang.Object;

        r6 := @parameter3: java.lang.Throwable;

        $r2 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $i0 = r1.<org.apache.log4j.Priority: int level>;

        $z0 = interfaceinvoke $r2.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke r1.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>(r4, r1, r5, r6);

     label2:
        return;
    }

    private void fireRemoveAppenderEvent(org.apache.log4j.Appender)
    {
        org.apache.log4j.spi.HierarchyEventListener $r5;
        org.apache.log4j.Hierarchy $r7;
        org.apache.log4j.Appender r0;
        org.apache.log4j.spi.LoggerRepository $r2, $r3, $r4, $r6;
        org.apache.log4j.Category r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.log4j.Category;

        r0 := @parameter0: org.apache.log4j.Appender;

        if r0 == null goto label2;

        $r2 = r1.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = $r2 instanceof org.apache.log4j.Hierarchy;

        if $z0 == 0 goto label1;

        $r6 = r1.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $r7 = (org.apache.log4j.Hierarchy) $r6;

        virtualinvoke $r7.<org.apache.log4j.Hierarchy: void fireRemoveAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r1, r0);

        goto label2;

     label1:
        $r3 = r1.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z1 = $r3 instanceof org.apache.log4j.spi.HierarchyEventListener;

        if $z1 == 0 goto label2;

        $r4 = r1.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $r5 = (org.apache.log4j.spi.HierarchyEventListener) $r4;

        interfaceinvoke $r5.<org.apache.log4j.spi.HierarchyEventListener: void removeAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r1, r0);

     label2:
        return;
    }

    public synchronized void removeAllAppenders()
    {
        java.util.Enumeration $r4, $r6;
        java.util.Vector $r2;
        org.apache.log4j.Appender $r8;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3, $r5;
        java.lang.Object $r7, $r9;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r1 == null goto label5;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>();

     label1:
        if $r4 == null goto label2;

        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r5 = r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        virtualinvoke $r5.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>();

        $r6 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (org.apache.log4j.Appender) $r7;

        specialinvoke r0.<org.apache.log4j.Category: void fireRemoveAppenderEvent(org.apache.log4j.Appender)>($r8);

        goto label3;

     label4:
        r0.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai> = null;

     label5:
        return;
    }

    public synchronized void removeAppender(org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r0;
        org.apache.log4j.helpers.AppenderAttachableImpl $r2, $r3, $r4;
        org.apache.log4j.Category r1;
        boolean $z0;

        r1 := @this: org.apache.log4j.Category;

        r0 := @parameter0: org.apache.log4j.Appender;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $z0 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: boolean isAttached(org.apache.log4j.Appender)>(r0);

        $r4 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        virtualinvoke $r4.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAppender(org.apache.log4j.Appender)>(r0);

        if $z0 == 0 goto label3;

        specialinvoke r1.<org.apache.log4j.Category: void fireRemoveAppenderEvent(org.apache.log4j.Appender)>(r0);

     label3:
        return;
    }

    public synchronized void removeAppender(java.lang.String)
    {
        org.apache.log4j.Appender $r4;
        org.apache.log4j.helpers.AppenderAttachableImpl $r2, $r3, $r5;
        java.lang.String r0;
        org.apache.log4j.Category r1;

        r1 := @this: org.apache.log4j.Category;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: org.apache.log4j.Appender getAppender(java.lang.String)>(r0);

        $r5 = r1.<org.apache.log4j.Category: org.apache.log4j.helpers.AppenderAttachableImpl aai>;

        virtualinvoke $r5.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAppender(java.lang.String)>(r0);

        if $r4 == null goto label3;

        specialinvoke r1.<org.apache.log4j.Category: void fireRemoveAppenderEvent(org.apache.log4j.Appender)>($r4);

     label3:
        return;
    }

    public void setAdditivity(boolean)
    {
        org.apache.log4j.Category r0;
        boolean z0;

        r0 := @this: org.apache.log4j.Category;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.Category: boolean additive> = z0;

        return;
    }

    final void setHierarchy(org.apache.log4j.spi.LoggerRepository)
    {
        org.apache.log4j.spi.LoggerRepository r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.spi.LoggerRepository;

        r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository> = r1;

        return;
    }

    public void setLevel(org.apache.log4j.Level)
    {
        org.apache.log4j.Category r0;
        org.apache.log4j.Level r1;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Level;

        r0.<org.apache.log4j.Category: org.apache.log4j.Level level> = r1;

        return;
    }

    public void setPriority(org.apache.log4j.Priority)
    {
        org.apache.log4j.Priority r1;
        org.apache.log4j.Category r0;
        org.apache.log4j.Level $r2;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: org.apache.log4j.Priority;

        $r2 = (org.apache.log4j.Level) r1;

        r0.<org.apache.log4j.Category: org.apache.log4j.Level level> = $r2;

        return;
    }

    public void setResourceBundle(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r1;
        org.apache.log4j.Category r0;

        r0 := @this: org.apache.log4j.Category;

        r1 := @parameter0: java.util.ResourceBundle;

        r0.<org.apache.log4j.Category: java.util.ResourceBundle resourceBundle> = r1;

        return;
    }

    public static void shutdown()
    {
        staticinvoke <org.apache.log4j.LogManager: void shutdown()>();

        return;
    }

    public void warn(java.lang.Object)
    {
        org.apache.log4j.Level $r2, $r3, $r5;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r6;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(30000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r5 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r6, $r5, r4, null);

     label2:
        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        org.apache.log4j.Level $r2, $r3, $r6;
        org.apache.log4j.spi.LoggerRepository $r1;
        java.lang.Object r4;
        java.lang.String $r7;
        org.apache.log4j.Category r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Category;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.Category: org.apache.log4j.spi.LoggerRepository repository>;

        $z0 = interfaceinvoke $r1.<org.apache.log4j.spi.LoggerRepository: boolean isDisabled(int)>(30000);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Category: org.apache.log4j.Level getEffectiveLevel()>();

        $z1 = virtualinvoke $r2.<org.apache.log4j.Priority: boolean isGreaterOrEqual(org.apache.log4j.Priority)>($r3);

        if $z1 == 0 goto label2;

        $r7 = <org.apache.log4j.Category: java.lang.String FQCN>;

        $r6 = <org.apache.log4j.Level: org.apache.log4j.Level WARN>;

        virtualinvoke r0.<org.apache.log4j.Category: void forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)>($r7, $r6, r4, r5);

     label2:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.lang.String $r1;

        $r0 = <org.apache.log4j.Category: java.lang.Class class$org$apache$log4j$Category>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.Category: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Category");

        <org.apache.log4j.Category: java.lang.Class class$org$apache$log4j$Category> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.Category: java.lang.Class class$org$apache$log4j$Category>;

     label2:
        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        <org.apache.log4j.Category: java.lang.String FQCN> = $r1;

        return;
    }
}
