public class com.ibm.wsdl.util.xml.XPathUtils extends java.lang.Object
{

    public void <init>()
    {
        com.ibm.wsdl.util.xml.XPathUtils r0;

        r0 := @this: com.ibm.wsdl.util.xml.XPathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.w3c.dom.Node getPreviousTypedNode(org.w3c.dom.Node, short)
    {
        short $s0, s1;
        org.w3c.dom.Node r0, r1;
        int $i2, $i3;

        r0 := @parameter0: org.w3c.dom.Node;

        s1 := @parameter1: short;

        r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

     label1:
        if r1 == null goto label2;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        $i3 = (int) s1;

        if $i2 == $i3 goto label2;

        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        goto label1;

     label2:
        return r1;
    }

    private static org.w3c.dom.Node getNextTypedNode(org.w3c.dom.Node, short)
    {
        short $s0, s1;
        org.w3c.dom.Node r0, r1;
        int $i2, $i3;

        r0 := @parameter0: org.w3c.dom.Node;

        s1 := @parameter1: short;

        r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label1:
        if r1 == null goto label2;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        $i3 = (int) s1;

        if $i2 == $i3 goto label2;

        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label2:
        return r1;
    }

    private static java.lang.String getValue(org.w3c.dom.Node, short)
    {
        org.w3c.dom.Text $r3;
        org.w3c.dom.ProcessingInstruction $r1;
        short s0;
        org.w3c.dom.Element $r5;
        org.w3c.dom.Node r0;
        int $i1;
        java.lang.String $r2, $r4, $r6;

        r0 := @parameter0: org.w3c.dom.Node;

        s0 := @parameter1: short;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 3: goto label2;
            case 7: goto label3;
            default: goto label4;
        };

     label1:
        $r5 = (org.w3c.dom.Element) r0;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Element: java.lang.String getTagName()>();

        return $r6;

     label2:
        $r3 = (org.w3c.dom.Text) r0;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Text: java.lang.String getData()>();

        return $r4;

     label3:
        $r1 = (org.w3c.dom.ProcessingInstruction) r0;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>();

        return $r2;

     label4:
        return "";
    }

    private static short getNodeType(org.w3c.dom.Node)
    {
        short $s0;
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 == null goto label1;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        goto label2;

     label1:
        $s0 = -1;

     label2:
        return $s0;
    }

    private static java.lang.String getXPathFromVector(java.util.Vector)
    {
        java.util.Vector r1;
        boolean $z0, $z1, z3, $z4, $z5;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r23, $r24;
        short $s1;
        java.lang.StringBuffer $r22;
        org.w3c.dom.Node r17, r18, r19, r20;
        int $i0, $i2, i3, i4, $i5;
        java.lang.String $r2, $r4, $r9, $r13, $r15, $r16, r21;
        java.lang.Object $r3, $r14;

        r1 := @parameter0: java.util.Vector;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label18;

        $r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r17 = (org.w3c.dom.Node) $r3;

        $s1 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: short getNodeType(org.w3c.dom.Node)>(r17);

        $r4 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: java.lang.String getValue(org.w3c.dom.Node,short)>(r17, $s1);

        i4 = 1;

        r18 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: org.w3c.dom.Node getPreviousTypedNode(org.w3c.dom.Node,short)>(r17, $s1);

     label02:
        if r18 == null goto label05;

        if $s1 != 1 goto label03;

        $r16 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: java.lang.String getValue(org.w3c.dom.Node,short)>(r18, $s1);

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label04;

        i4 = i4 + 1;

        goto label04;

     label03:
        i4 = i4 + 1;

     label04:
        r18 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: org.w3c.dom.Node getPreviousTypedNode(org.w3c.dom.Node,short)>(r18, $s1);

        goto label02;

     label05:
        if i4 <= 1 goto label06;

        $z5 = 1;

        $z4 = 1;

        goto label07;

     label06:
        $z5 = 0;

        $z4 = 0;

     label07:
        z3 = $z4;

        if $z5 != 0 goto label11;

        $r14 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r19 = (org.w3c.dom.Node) $r14;

        r20 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: org.w3c.dom.Node getNextTypedNode(org.w3c.dom.Node,short)>(r19, $s1);

     label08:
        if z3 != 0 goto label11;

        if r20 == null goto label11;

        if $s1 != 1 goto label10;

        $r15 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: java.lang.String getValue(org.w3c.dom.Node,short)>(r20, $s1);

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label09;

        z3 = 1;

        goto label08;

     label09:
        r20 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: org.w3c.dom.Node getNextTypedNode(org.w3c.dom.Node,short)>(r20, $s1);

        goto label08;

     label10:
        z3 = 1;

        goto label08;

     label11:
        $i5 = (int) $s1;

        lookupswitch($i5)
        {
            case 3: goto label12;
            case 7: goto label13;
            default: goto label14;
        };

     label12:
        r21 = "text()";

        goto label15;

     label13:
        r21 = "processing-instruction()";

        goto label15;

     label14:
        r21 = $r4;

     label15:
        if r21 == null goto label16;

        $i2 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i2 <= 0 goto label16;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

     label16:
        if z3 == 0 goto label17;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label17:
        i3 = i3 + 1;

        goto label01;

     label18:
        $r2 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static java.util.Vector getVectorPathFromNode(org.w3c.dom.Node)
    {
        java.util.Vector $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

     label1:
        if r1 == null goto label2;

        virtualinvoke $r0.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r1, 0);

        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.String getXPathExprFromNode(org.w3c.dom.Node) throws java.lang.IllegalArgumentException
    {
        short $s0;
        java.util.Vector $r1;
        org.w3c.dom.Node r0;
        int $i1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: short getNodeType(org.w3c.dom.Node)>(r0);

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label1;
            case 8: goto label3;
            case 9: goto label2;
            default: goto label3;
        };

     label1:
        $r1 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: java.util.Vector getVectorPathFromNode(org.w3c.dom.Node)>(r0);

        $r2 = staticinvoke <com.ibm.wsdl.util.xml.XPathUtils: java.lang.String getXPathFromVector(java.util.Vector)>($r1);

        return $r2;

     label2:
        return "/";

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only works for element, text, document, and PI nodes.");

        throw $r4;
    }
}
