public class ucar.nc2.ft.point.standard.Table$TableNestedStructure extends ucar.nc2.ft.point.standard.Table
{
    java.lang.String nestedTableName;
    ucar.nc2.Structure struct;
    static final boolean $assertionsDisabled;

    void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig)
    {
        ucar.nc2.ft.point.standard.Table$TableNestedStructure r0;
        java.lang.AssertionError $r14;
        ucar.nc2.Structure $r6, $r7, $r13;
        ucar.nc2.ft.point.standard.TableConfig r2;
        ucar.nc2.Variable $r5, r11;
        java.lang.String $r3, $r4, $r15;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        java.util.List $r8, $r12;
        java.lang.Object $r10;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        specialinvoke r0.<ucar.nc2.ft.point.standard.Table: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r1, r2);

        $r3 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String nestedTableName>;

        r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.lang.String nestedTableName> = $r3;

        $r4 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String structName>;

        $r5 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        $r6 = (ucar.nc2.Structure) $r5;

        r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: ucar.nc2.Structure struct> = $r6;

        $z0 = <ucar.nc2.ft.point.standard.Table$TableNestedStructure: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: ucar.nc2.Structure struct>;

        if $r13 != null goto label1;

        $r14 = new java.lang.AssertionError;

        $r15 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String structName>;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r14;

     label1:
        $r7 = r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: ucar.nc2.Structure struct>;

        $r8 = virtualinvoke $r7.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (ucar.nc2.Variable) $r10;

        $r12 = r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.util.List cols>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r11);

        goto label2;

     label3:
        return;
    }

    protected void showTableExtraInfo(java.lang.String, java.util.Formatter)
    {
        java.lang.Object[] $r1;
        ucar.nc2.ft.point.standard.Table$TableNestedStructure r3;
        java.lang.String r2, $r5, $r6;
        ucar.nc2.Structure $r4;
        java.util.Formatter r0;

        r3 := @this: ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r4 = r3.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: ucar.nc2.Structure struct>;

        $r5 = virtualinvoke $r4.<ucar.nc2.Structure: java.lang.String getNameAndDimensions()>();

        $r1[1] = $r5;

        $r6 = r3.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.lang.String nestedTableName>;

        $r1[2] = $r6;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%sstruct=%s, nestedTableName=%s%n", $r1);

        return;
    }

    public ucar.nc2.dataset.VariableDS findVariable(java.lang.String)
    {
        ucar.nc2.dataset.VariableDS $r4;
        ucar.nc2.ft.point.standard.Table$TableNestedStructure r0;
        ucar.nc2.Variable $r3;
        java.lang.String r1;
        ucar.nc2.Structure $r2;

        r0 := @this: ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: ucar.nc2.Structure struct>;

        $r3 = virtualinvoke $r2.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        $r4 = (ucar.nc2.dataset.VariableDS) $r3;

        return $r4;
    }

    public ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        java.lang.IllegalStateException $r10;
        ucar.ma2.ArrayStructure $r16;
        ucar.nc2.ft.point.standard.Table$TableNestedStructure r3;
        ucar.ma2.StructureDataIterator $r17, $r19;
        ucar.ma2.StructureMembers$Member $r5;
        ucar.ma2.StructureData $r1;
        int i0;
        java.lang.String $r4, $r13, $r15;
        ucar.ma2.DataType $r6, $r7, $r8, $r9;
        ucar.ma2.ArraySequence $r18;
        ucar.ma2.StructureMembers $r2;
        ucar.nc2.ft.point.standard.Cursor r0;
        java.lang.StringBuilder $r11, $r12, $r14;

        r3 := @this: ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData getParentStructure()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r4 = r3.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.lang.String nestedTableName>;

        $r5 = virtualinvoke $r2.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r4);

        virtualinvoke $r2.<ucar.ma2.StructureMembers: void hideMember(ucar.ma2.StructureMembers$Member)>($r5);

        $r6 = virtualinvoke $r5.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r6 != $r7 goto label1;

        $r18 = virtualinvoke $r1.<ucar.ma2.StructureData: ucar.ma2.ArraySequence getArraySequence(ucar.ma2.StructureMembers$Member)>($r5);

        $r19 = virtualinvoke $r18.<ucar.ma2.ArraySequence: ucar.ma2.StructureDataIterator getStructureDataIterator()>();

        return $r19;

     label1:
        $r8 = virtualinvoke $r5.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r8 != $r9 goto label2;

        $r16 = virtualinvoke $r1.<ucar.ma2.StructureData: ucar.ma2.ArrayStructure getArrayStructure(ucar.ma2.StructureMembers$Member)>($r5);

        $r17 = virtualinvoke $r16.<ucar.ma2.ArrayStructure: ucar.ma2.StructureDataIterator getStructureDataIterator()>();

        return $r17;

     label2:
        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find nested table member = ");

        $r13 = r3.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.lang.String nestedTableName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r10;
    }

    public java.lang.String getName()
    {
        ucar.nc2.ft.point.standard.Table$TableNestedStructure r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: ucar.nc2.ft.point.standard.Table$TableNestedStructure;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NestedStructure(");

        $r3 = r2.<ucar.nc2.ft.point.standard.Table$TableNestedStructure: java.lang.String nestedTableName>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/ft/point/standard/Table;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.ft.point.standard.Table$TableNestedStructure: boolean $assertionsDisabled> = $z1;

        return;
    }
}
