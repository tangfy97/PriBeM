public abstract class kodkod.instance.Tuple extends java.lang.Object
{

    public void <init>()
    {
        kodkod.instance.Tuple r0;

        r0 := @this: kodkod.instance.Tuple;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract kodkod.instance.Universe universe();

    public abstract int arity();

    public abstract int index();

    public abstract java.lang.Object atom(int);

    public abstract int atomIndex(int);

    public abstract boolean contains(java.lang.Object);

    public abstract kodkod.instance.Tuple product(kodkod.instance.Tuple);

    public boolean equals(java.lang.Object)
    {
        kodkod.instance.Tuple r0, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1;
        kodkod.instance.Universe $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: kodkod.instance.Tuple;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof kodkod.instance.Tuple;

        if $z0 == 0 goto label3;

        r2 = (kodkod.instance.Tuple) r1;

        $r3 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r4 = virtualinvoke r2.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = virtualinvoke r2.<kodkod.instance.Tuple: int arity()>();

        if $i0 != $i1 goto label2;

        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        $i3 = virtualinvoke r2.<kodkod.instance.Tuple: int index()>();

        if $i2 != $i3 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public int hashCode()
    {
        kodkod.instance.Tuple r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.instance.Universe $r1;

        r0 := @this: kodkod.instance.Tuple;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = $i0 * 19;

        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        $i3 = $i1 + $i2;

        $r1 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i5 = $i3 ^ $i4;

        return $i5;
    }

    public java.lang.String toString()
    {
        kodkod.instance.Tuple r1;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r2, $r3;
        java.lang.String $r4;

        r1 := @this: kodkod.instance.Tuple;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r2 = virtualinvoke r1.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        i1 = 1;

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke r1.<kodkod.instance.Tuple: java.lang.Object atom(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        i1 = i1 + 1;

     label2:
        $i0 = virtualinvoke r1.<kodkod.instance.Tuple: int arity()>();

        if i1 < $i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
