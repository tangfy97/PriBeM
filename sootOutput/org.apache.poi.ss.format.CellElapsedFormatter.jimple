public class org.apache.poi.ss.format.CellElapsedFormatter extends org.apache.poi.ss.format.CellFormatter
{
    private final java.util.List specs;
    private org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec topmost;
    private final java.lang.String printfFmt;
    private static final java.util.regex.Pattern PERCENTS;
    private static final double HOUR__FACTOR;
    private static final double MIN__FACTOR;
    private static final double SEC__FACTOR;

    public void <init>(java.lang.String)
    {
        java.util.ListIterator $r8;
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec r11, $r17;
        boolean $z0;
        org.apache.poi.ss.format.CellElapsedFormatter$ElapsedPartHandler $r19;
        org.apache.poi.ss.format.CellFormatType $r4;
        java.util.List $r6, $r7;
        java.lang.StringBuilder $r13, $r14, $r15, $r20;
        java.util.ArrayList $r18;
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i10, $i11;
        java.lang.String r1, $r9, $r16;
        double $d0;
        org.apache.poi.ss.format.CellElapsedFormatter r0;
        char $c6, $c7, $c9;
        java.lang.Object $r10;

        r0 := @this: org.apache.poi.ss.format.CellElapsedFormatter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.poi.ss.format.CellFormatter: void <init>(java.lang.String)>(r1);

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs> = $r18;

        $r4 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType ELAPSED>;

        $r19 = new org.apache.poi.ss.format.CellElapsedFormatter$ElapsedPartHandler;

        specialinvoke $r19.<org.apache.poi.ss.format.CellElapsedFormatter$ElapsedPartHandler: void <init>(org.apache.poi.ss.format.CellElapsedFormatter,org.apache.poi.ss.format.CellElapsedFormatter$1)>(r0, null);

        $r5 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.StringBuffer parseFormat(java.lang.String,org.apache.poi.ss.format.CellFormatType,org.apache.poi.ss.format.CellFormatPart$PartHandler)>(r1, $r4, $r19);

        $r7 = r0.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        $r6 = r0.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r8.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object previous()>();

        r11 = (org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec) $r10;

        $i3 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: int pos>;

        $i2 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: int pos>;

        $i1 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: int len>;

        $i4 = $i2 + $i1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%0");

        $i5 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: int len>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i3, $i4, $r16);

        $c7 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: char type>;

        $r17 = r0.<org.apache.poi.ss.format.CellElapsedFormatter: org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec topmost>;

        $c6 = $r17.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: char type>;

        $i10 = (int) $c7;

        $i11 = (int) $c6;

        if $i10 == $i11 goto label2;

        $c9 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: char type>;

        $i8 = r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: int len>;

        $d0 = staticinvoke <org.apache.poi.ss.format.CellElapsedFormatter: double modFor(char,int)>($c9, $i8);

        r11.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: double modBy> = $d0;

     label2:
        goto label1;

     label3:
        $r9 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.poi.ss.format.CellElapsedFormatter: java.lang.String printfFmt> = $r9;

        return;
    }

    private org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec assignSpec(char, int, int)
    {
        java.util.List $r2;
        int i1, i2;
        org.apache.poi.ss.format.CellElapsedFormatter r1;
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec $r0;
        char c0;
        double $d0;

        r1 := @this: org.apache.poi.ss.format.CellElapsedFormatter;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec;

        $d0 = staticinvoke <org.apache.poi.ss.format.CellElapsedFormatter: double factorFor(char,int)>(c0, i2);

        specialinvoke $r0.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: void <init>(char,int,int,double)>(c0, i1, i2, $d0);

        $r2 = r1.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r0);

        return $r0;
    }

    private static double factorFor(char, int)
    {
        char c0;
        java.lang.IllegalArgumentException $r6;
        int i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4;
        double $d0, $d1, $d2;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 48: goto label4;
            case 104: goto label1;
            case 109: goto label2;
            case 115: goto label3;
            default: goto label5;
        };

     label1:
        return 0.041666666666666664;

     label2:
        return 6.944444444444444E-4;

     label3:
        return 1.1574074074074073E-5;

     label4:
        $d0 = (double) i1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        $d2 = 1.1574074074074073E-5 / $d1;

        return $d2;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uknown elapsed time spec: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    private static double modFor(char, int)
    {
        char c0;
        java.lang.IllegalArgumentException $r6;
        int i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4;
        double $d0, $d1;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 48: goto label4;
            case 104: goto label1;
            case 109: goto label2;
            case 115: goto label3;
            default: goto label5;
        };

     label1:
        return 24.0;

     label2:
        return 60.0;

     label3:
        return 60.0;

     label4:
        $d0 = (double) i1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        return $d1;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uknown elapsed time spec: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public void formatValue(java.lang.StringBuffer, java.lang.Object)
    {
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec $r9;
        long $l2;
        java.util.Formatter $r13;
        byte $b0;
        java.lang.Long $r10;
        java.lang.StringBuffer r5;
        int $i1, i3, $i4, $i5;
        java.lang.String $r6;
        java.lang.Number $r1;
        double $d0, d1;
        java.lang.Long[] $r11;
        org.apache.poi.ss.format.CellElapsedFormatter r2;
        java.util.List $r3, $r7, $r12;
        java.lang.Object r0, $r8;

        r2 := @this: org.apache.poi.ss.format.CellElapsedFormatter;

        r5 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Object;

        $r1 = (java.lang.Number) r0;

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        d1 = $d0;

        $b0 = $d0 cmpg 0.0;

        $i5 = (int) $b0;

        if $i5 >= 0 goto label1;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        d1 = neg $d0;

     label1:
        $r3 = r2.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r11 = newarray (java.lang.Long)[$i1];

        i3 = 0;

     label2:
        $r12 = r2.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i3 >= $i4 goto label3;

        $r7 = r2.<org.apache.poi.ss.format.CellElapsedFormatter: java.util.List specs>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i3);

        $r9 = (org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec) $r8;

        $l2 = virtualinvoke $r9.<org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec: long valueFor(double)>(d1);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r11[i3] = $r10;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r13 = new java.util.Formatter;

        specialinvoke $r13.<java.util.Formatter: void <init>(java.lang.Appendable)>(r5);

        $r6 = r2.<org.apache.poi.ss.format.CellElapsedFormatter: java.lang.String printfFmt>;

        virtualinvoke $r13.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r6, $r11);

        return;
    }

    public void simpleValue(java.lang.StringBuffer, java.lang.Object)
    {
        org.apache.poi.ss.format.CellElapsedFormatter r0;
        java.lang.Object r2;
        java.lang.StringBuffer r1;

        r0 := @this: org.apache.poi.ss.format.CellElapsedFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.poi.ss.format.CellElapsedFormatter: void formatValue(java.lang.StringBuffer,java.lang.Object)>(r1, r2);

        return;
    }

    static org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec access$000(org.apache.poi.ss.format.CellElapsedFormatter)
    {
        org.apache.poi.ss.format.CellElapsedFormatter r0;
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec $r1;

        r0 := @parameter0: org.apache.poi.ss.format.CellElapsedFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellElapsedFormatter: org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec topmost>;

        return $r1;
    }

    static org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec access$002(org.apache.poi.ss.format.CellElapsedFormatter, org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec)
    {
        org.apache.poi.ss.format.CellElapsedFormatter r0;
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec r1;

        r0 := @parameter0: org.apache.poi.ss.format.CellElapsedFormatter;

        r1 := @parameter1: org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec;

        r0.<org.apache.poi.ss.format.CellElapsedFormatter: org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec topmost> = r1;

        return r1;
    }

    static org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec access$100(org.apache.poi.ss.format.CellElapsedFormatter, char, int, int)
    {
        org.apache.poi.ss.format.CellElapsedFormatter r0;
        int i1, i2;
        org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec $r1;
        char c0;

        r0 := @parameter0: org.apache.poi.ss.format.CellElapsedFormatter;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = specialinvoke r0.<org.apache.poi.ss.format.CellElapsedFormatter: org.apache.poi.ss.format.CellElapsedFormatter$TimeSpec assignSpec(char,int,int)>(c0, i1, i2);

        return $r1;
    }

    static java.util.regex.Pattern access$200()
    {
        java.util.regex.Pattern $r0;

        $r0 = <org.apache.poi.ss.format.CellElapsedFormatter: java.util.regex.Pattern PERCENTS>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.poi.ss.format.CellElapsedFormatter: double SEC__FACTOR> = 1.1574074074074073E-5;

        <org.apache.poi.ss.format.CellElapsedFormatter: double MIN__FACTOR> = 6.944444444444444E-4;

        <org.apache.poi.ss.format.CellElapsedFormatter: double HOUR__FACTOR> = 0.041666666666666664;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%");

        <org.apache.poi.ss.format.CellElapsedFormatter: java.util.regex.Pattern PERCENTS> = $r0;

        return;
    }
}
