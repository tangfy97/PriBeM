public class org.apache.xmlbeans.impl.schema.StscChecker extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$StscChecker;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.StscChecker r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkAll()
    {
        org.apache.xmlbeans.SchemaType[] $r2, $r4, $r6, $r8, $r15;
        java.util.ArrayList $r1;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.SchemaGlobalElement[] $r10;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r13, $r14;
        org.apache.xmlbeans.SchemaType r12;
        boolean $z0, $z1;
        java.util.List $r3, $r5, $r7, $r9, $r16;
        java.lang.Object $r11;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] documentTypes()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] attributeTypes()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        $r6 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] redefinedGlobalTypes()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] globalTypes()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r11 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r12 = (org.apache.xmlbeans.SchemaType) $r11;

        $z0 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: boolean noPvr()>();

        if $z0 != 0 goto label2;

        $z1 = interfaceinvoke r12.<org.apache.xmlbeans.SchemaType: boolean isDocumentType()>();

        if $z1 != 0 goto label2;

        $r13 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r12;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r13);

     label2:
        $r14 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r12;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: void checkFields(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r14);

        $r15 = interfaceinvoke r12.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r10 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaGlobalElement[] globalElements()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: void checkSubstitutionGroups(org.apache.xmlbeans.SchemaGlobalElement[])>($r10);

        return;
    }

    public static void checkFields(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaType[] $r43;
        org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl $r6;
        org.apache.xmlbeans.SchemaProperty $r20;
        org.apache.xmlbeans.SchemaType $r9, $r10, $r12, $r13, $r25, $r27, $r28, $r42, $r44, r72, $r84;
        java.lang.Exception $r23, $r62;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r74;
        javax.xml.namespace.QName $r19, $r29, $r34, $r36, $r39, $r48, $r53, $r59, r65, $r81, $r85;
        java.lang.Object[] $r32, $r46, $r51, $r56, $r79;
        java.lang.String $r15, $r21, $r30, $r35, $r37, $r40, $r49, $r54, $r57, $r68, r76, $r82, $r86, $r87, $r88;
        org.apache.xmlbeans.impl.schema.XmlValueRef $r22;
        org.apache.xmlbeans.SchemaParticle $r3;
        org.apache.xmlbeans.impl.schema.StscState $r31, $r45, $r50, $r55, $r60, $r78;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10;
        org.apache.xmlbeans.XmlAnySimpleType $r17;
        org.apache.xmlbeans.SchemaLocalAttribute $r5, $r8, $r11, $r14, $r16, $r18, $r24, $r26, $r33, $r38, $r41, $r47, $r52, $r58, $r61, $r63, $r67, $r80, $r83;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.xmlbeans.XmlObject $r1, r7, $r64, $r66, $r69, $r70, $r71, $r73, r77;
        org.apache.xmlbeans.SchemaAttributeModel $r2;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        if $r2 == null goto label41;

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        r65 = null;

        i8 = 0;

     label02:
        $i0 = lengthof $r4;

        if i8 >= $i0 goto label41;

        $r5 = $r4[i8];

        $r6 = (org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl) $r5;

        r7 = $r6.<org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        $r9 = <org.apache.xmlbeans.XmlID: org.apache.xmlbeans.SchemaType type>;

        $r8 = $r4[i8];

        $r10 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $z1 = interfaceinvoke $r9.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r10);

        if $z1 == 0 goto label09;

        if r65 != null goto label03;

        $r61 = $r4[i8];

        r65 = interfaceinvoke $r61.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        goto label06;

     label03:
        $r55 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r56 = newarray (java.lang.Object)[2];

        $r57 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>(r65);

        $r56[0] = $r57;

        $r58 = $r4[i8];

        $r59 = interfaceinvoke $r58.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r56[1] = $r59;

        if r7 == null goto label04;

        $r66 = r7;

        goto label05;

     label04:
        $r66 = $r1;

     label05:
        virtualinvoke $r55.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("ag-props-correct.3", $r56, $r66);

     label06:
        $r67 = $r4[i8];

        $r68 = interfaceinvoke $r67.<org.apache.xmlbeans.SchemaLocalAttribute: java.lang.String getDefaultText()>();

        if $r68 == null goto label40;

        $r60 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        if r7 == null goto label07;

        $r69 = r7;

        goto label08;

     label07:
        $r69 = $r1;

     label08:
        virtualinvoke $r60.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("a-props-correct.3", null, $r69);

        goto label40;

     label09:
        $r12 = <org.apache.xmlbeans.XmlNOTATION: org.apache.xmlbeans.SchemaType type>;

        $r11 = $r4[i8];

        $r13 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $z2 = interfaceinvoke $r12.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r13);

        if $z2 == 0 goto label32;

        $r24 = $r4[i8];

        $r25 = interfaceinvoke $r24.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $i1 = interfaceinvoke $r25.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i1 != 8 goto label12;

        $r50 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r51 = newarray (java.lang.Object)[1];

        $r52 = $r4[i8];

        $r53 = interfaceinvoke $r52.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r54 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r53);

        $r51[0] = $r54;

        if r7 == null goto label10;

        $r70 = r7;

        goto label11;

     label10:
        $r70 = $r1;

     label11:
        virtualinvoke $r50.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation-attr", $r51, $r70);

        goto label40;

     label12:
        $r26 = $r4[i8];

        $r27 = interfaceinvoke $r26.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $i2 = interfaceinvoke $r27.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i2 != 2 goto label17;

        $r41 = $r4[i8];

        $r42 = interfaceinvoke $r41.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $r43 = interfaceinvoke $r42.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        i9 = 0;

     label13:
        $i6 = lengthof $r43;

        if i9 >= $i6 goto label17;

        $r44 = $r43[i9];

        $i7 = interfaceinvoke $r44.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i7 != 8 goto label16;

        $r45 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r46 = newarray (java.lang.Object)[1];

        $r47 = $r4[i8];

        $r48 = interfaceinvoke $r47.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r49 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r48);

        $r46[0] = $r49;

        if r7 == null goto label14;

        $r71 = r7;

        goto label15;

     label14:
        $r71 = $r1;

     label15:
        virtualinvoke $r45.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation-attr", $r46, $r71);

     label16:
        i9 = i9 + 1;

        goto label13;

     label17:
        $z4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAttributeType()>();

        if $z4 == 0 goto label20;

        $r38 = $r4[i8];

        $r39 = interfaceinvoke $r38.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r40 = virtualinvoke $r39.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i5 = virtualinvoke $r40.<java.lang.String: int length()>();

        if $i5 <= 0 goto label18;

        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        z8 = $z7;

        goto label28;

     label20:
        r72 = r0;

     label21:
        $r28 = interfaceinvoke r72.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r28 == null goto label22;

        r72 = interfaceinvoke r72.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label21;

     label22:
        $z5 = interfaceinvoke r72.<org.apache.xmlbeans.SchemaType: boolean isDocumentType()>();

        if $z5 == 0 goto label25;

        $r36 = interfaceinvoke r72.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getDocumentElementName()>();

        $r37 = virtualinvoke $r36.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i4 = virtualinvoke $r37.<java.lang.String: int length()>();

        if $i4 <= 0 goto label23;

        $z9 = 1;

        goto label24;

     label23:
        $z9 = 0;

     label24:
        z8 = $z9;

        goto label28;

     label25:
        $r29 = interfaceinvoke r72.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r30 = virtualinvoke $r29.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i3 = virtualinvoke $r30.<java.lang.String: int length()>();

        if $i3 <= 0 goto label26;

        $z10 = 1;

        goto label27;

     label26:
        $z10 = 0;

     label27:
        z8 = $z10;

     label28:
        if z8 == 0 goto label31;

        $r31 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r32 = newarray (java.lang.Object)[1];

        $r33 = $r4[i8];

        $r34 = interfaceinvoke $r33.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r35 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r34);

        $r32[0] = $r35;

        if r7 == null goto label29;

        $r73 = r7;

        goto label30;

     label29:
        $r73 = $r1;

     label30:
        virtualinvoke $r31.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("notation-targetns-attr", $r32, $r73);

     label31:
        goto label40;

     label32:
        $r14 = $r4[i8];

        $r15 = interfaceinvoke $r14.<org.apache.xmlbeans.SchemaLocalAttribute: java.lang.String getDefaultText()>();

        if $r15 == null goto label40;

     label33:
        $r16 = $r4[i8];

        $r17 = interfaceinvoke $r16.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.XmlAnySimpleType getDefaultValue()>();

        $z3 = interfaceinvoke $r17.<org.apache.xmlbeans.XmlAnySimpleType: boolean validate()>();

        if $z3 != 0 goto label34;

        $r23 = new java.lang.Exception;

        specialinvoke $r23.<java.lang.Exception: void <init>()>();

        throw $r23;

     label34:
        $r18 = $r4[i8];

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaProperty getAttributeProperty(javax.xml.namespace.QName)>($r19);

        r74 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r20;

        if r74 == null goto label35;

        $r21 = virtualinvoke r74.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.lang.String getDefaultText()>();

        if $r21 == null goto label35;

        $r22 = new org.apache.xmlbeans.impl.schema.XmlValueRef;

        specialinvoke $r22.<org.apache.xmlbeans.impl.schema.XmlValueRef: void <init>(org.apache.xmlbeans.XmlAnySimpleType)>($r17);

        virtualinvoke r74.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefaultValue(org.apache.xmlbeans.impl.schema.XmlValueRef)>($r22);

     label35:
        goto label40;

     label36:
        $r62 := @caughtexception;

        $r63 = $r4[i8];

        $z6 = interfaceinvoke $r63.<org.apache.xmlbeans.SchemaLocalAttribute: boolean isFixed()>();

        if $z6 == 0 goto label37;

        $r88 = "fixed";

        $r87 = "fixed";

        goto label38;

     label37:
        $r88 = "default";

        $r87 = "default";

     label38:
        r76 = $r88;

        r77 = $r1;

        if r7 == null goto label39;

        $r64 = interfaceinvoke r7.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", $r87);

        r77 = $r64;

        if $r64 != null goto label39;

        r77 = r7;

     label39:
        $r78 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r79 = newarray (java.lang.Object)[4];

        $r80 = $r4[i8];

        $r81 = interfaceinvoke $r80.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r82 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r81);

        $r79[0] = $r82;

        $r79[1] = r76;

        $r79[2] = $r15;

        $r83 = $r4[i8];

        $r84 = interfaceinvoke $r83.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        $r85 = interfaceinvoke $r84.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r86 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r85);

        $r79[3] = $r86;

        virtualinvoke $r78.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("a-props-correct.2", $r79, r77);

     label40:
        i8 = i8 + 1;

        goto label02;

     label41:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: void checkElementDefaults(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.SchemaType)>($r3, $r1, r0);

        return;

        catch java.lang.Exception from label33 to label35 with label36;
    }

    private static void checkElementDefaults(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlObject, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaType[] $r38;
        org.apache.xmlbeans.SchemaType $r3, $r5, $r7, $r9, $r11, $r21, $r22, r25, $r37, $r39, $r66, $r74, $r75, $r76, $r77, $r88, $r94, $r109, $r122, r125, $r126;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r112, r117;
        java.lang.Object[] $r13, $r29, $r41, $r49, $r80, $r85, $r98, $r106;
        org.apache.xmlbeans.impl.schema.XmlValueRef $r72, $r93;
        org.apache.xmlbeans.SchemaParticle r0, $r89, $r102;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r2, $r4, $r6, $r8, $r10, $r23, $r56, $r58, $r60, $r62, $r64, $r121;
        org.apache.xmlbeans.SchemaParticle[] $r101;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.xmlbeans.XmlObject $r17, $r19, r20, $r33, $r45, $r47, $r53, $r55, $r78, $r83, $r96, $r104, $r114, $r116, $r118, $r119, $r123, $r124, $r127, $r128;
        org.apache.xmlbeans.XmlOptions $r68;
        org.apache.xmlbeans.SchemaProperty $r70, $r91;
        java.lang.Exception $r73, $r103;
        javax.xml.namespace.QName $r14, $r24, $r26, $r30, $r35, $r42, $r50, $r57, $r59, $r61, $r63, $r65, $r69, $r81, $r86, $r90, $r99, $r107, $r110;
        org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl $r16, $r18, $r32, $r34, $r44, $r46, $r52, $r54;
        java.lang.String $r1, $r15, $r27, $r31, $r36, $r43, $r51, $r71, $r82, $r87, $r92, $r100, $r108, $r111, r120, $r129, $r130, $r131, $r132;
        org.apache.xmlbeans.impl.schema.StscState $r12, $r28, $r40, $r48, $r79, $r84, $r97, $r105;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z14;
        org.apache.xmlbeans.XmlAnySimpleType $r67, $r95;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r20 := @parameter1: org.apache.xmlbeans.XmlObject;

        r25 := @parameter2: org.apache.xmlbeans.SchemaType;

        if r0 != null goto label01;

        return;

     label01:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label05;
            default: goto label55;
        };

     label02:
        $r101 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i12 = 0;

     label03:
        $i11 = lengthof $r101;

        if i12 >= $i11 goto label04;

        $r102 = $r101[i12];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: void checkElementDefaults(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.SchemaType)>($r102, r20, r25);

        i12 = i12 + 1;

        goto label03;

     label04:
        goto label55;

     label05:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.lang.String getDefaultText()>();

        if $r1 == null goto label27;

        $r66 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z6 = interfaceinvoke $r66.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z6 != 0 goto label06;

        $r74 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i7 = interfaceinvoke $r74.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i7 != 2 goto label14;

     label06:
        $r67 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.XmlAnySimpleType getDefaultValue()>();

        $r68 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r68.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r68.<org.apache.xmlbeans.XmlOptions: void put(java.lang.Object)>("VALIDATE_TEXT_ONLY");

        $z7 = interfaceinvoke $r67.<org.apache.xmlbeans.XmlAnySimpleType: boolean validate(org.apache.xmlbeans.XmlOptions)>($r68);

        if $z7 != 0 goto label07;

        $r73 = new java.lang.Exception;

        specialinvoke $r73.<java.lang.Exception: void <init>()>();

        throw $r73;

     label07:
        $r69 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r70 = interfaceinvoke r25.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>($r69);

        r112 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r70;

        if r112 == null goto label08;

        $r71 = virtualinvoke r112.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.lang.String getDefaultText()>();

        if $r71 == null goto label08;

        $r72 = new org.apache.xmlbeans.impl.schema.XmlValueRef;

        specialinvoke $r72.<org.apache.xmlbeans.impl.schema.XmlValueRef: void <init>(org.apache.xmlbeans.XmlAnySimpleType)>($r67);

        virtualinvoke r112.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefaultValue(org.apache.xmlbeans.impl.schema.XmlValueRef)>($r72);

     label08:
        goto label27;

     label09:
        $r103 := @caughtexception;

        $z10 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isFixed()>();

        if $z10 == 0 goto label10;

        $r130 = "fixed";

        $r129 = "fixed";

        goto label11;

     label10:
        $r130 = "default";

        $r129 = "default";

     label11:
        $r104 = interfaceinvoke r20.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", $r129);

        $r105 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r106 = newarray (java.lang.Object)[4];

        $r107 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r108 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r107);

        $r106[0] = $r108;

        $r106[1] = $r130;

        $r106[2] = $r1;

        $r109 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $r110 = interfaceinvoke $r109.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r111 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r110);

        $r106[3] = $r111;

        if $r104 != null goto label12;

        $r114 = r20;

        goto label13;

     label12:
        $r114 = $r104;

     label13:
        virtualinvoke $r105.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("e-props-correct.2", $r106, $r114);

        goto label27;

     label14:
        $r75 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i8 = interfaceinvoke $r75.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i8 != 4 goto label21;

        $r88 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $r89 = interfaceinvoke $r88.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $z8 = interfaceinvoke $r89.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z8 != 0 goto label19;

        $z9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isFixed()>();

        if $z9 == 0 goto label15;

        $r132 = "fixed";

        $r131 = "fixed";

        goto label16;

     label15:
        $r132 = "default";

        $r131 = "default";

     label16:
        $r96 = interfaceinvoke r20.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", $r131);

        $r97 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r98 = newarray (java.lang.Object)[3];

        $r99 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r100 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r99);

        $r98[0] = $r100;

        $r98[1] = $r132;

        $r98[2] = $r1;

        if $r96 != null goto label17;

        $r116 = r20;

        goto label18;

     label17:
        $r116 = $r96;

     label18:
        virtualinvoke $r97.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-valid-default.2.2.2", $r98, $r116);

        goto label27;

     label19:
        $r90 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r91 = interfaceinvoke r25.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty getElementProperty(javax.xml.namespace.QName)>($r90);

        r117 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r91;

        if r117 == null goto label20;

        $r92 = virtualinvoke r117.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.lang.String getDefaultText()>();

        if $r92 == null goto label20;

        $r93 = new org.apache.xmlbeans.impl.schema.XmlValueRef;

        $r94 = <org.apache.xmlbeans.XmlString: org.apache.xmlbeans.SchemaType type>;

        $r95 = interfaceinvoke $r94.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r1);

        specialinvoke $r93.<org.apache.xmlbeans.impl.schema.XmlValueRef: void <init>(org.apache.xmlbeans.XmlAnySimpleType)>($r95);

        virtualinvoke r117.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefaultValue(org.apache.xmlbeans.impl.schema.XmlValueRef)>($r93);

     label20:
        goto label27;

     label21:
        $r76 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i9 = interfaceinvoke $r76.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i9 != 3 goto label24;

        $r83 = interfaceinvoke r20.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", "default");

        $r84 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r85 = newarray (java.lang.Object)[3];

        $r86 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r87 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r86);

        $r85[0] = $r87;

        $r85[1] = $r1;

        $r85[2] = "element";

        if $r83 != null goto label22;

        $r118 = r20;

        goto label23;

     label22:
        $r118 = $r83;

     label23:
        virtualinvoke $r84.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-valid-default.2.1", $r85, $r118);

        goto label27;

     label24:
        $r77 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i10 = interfaceinvoke $r77.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i10 != 1 goto label27;

        $r78 = interfaceinvoke r20.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", "default");

        $r79 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r80 = newarray (java.lang.Object)[3];

        $r81 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r82 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r81);

        $r80[0] = $r82;

        $r80[1] = $r1;

        $r80[2] = "empty";

        if $r78 != null goto label25;

        $r119 = r20;

        goto label26;

     label25:
        $r119 = $r78;

     label26:
        virtualinvoke $r79.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-valid-default.2.1", $r80, $r119);

     label27:
        r120 = null;

        $r121 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ID>;

        $r122 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z11 = virtualinvoke $r121.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r122);

        if $z11 == 0 goto label28;

        $r64 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ID>;

        $r65 = virtualinvoke $r64.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r65.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label52;

     label28:
        $r2 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_IDREF>;

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z0 = virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r3);

        if $z0 == 0 goto label29;

        $r62 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_IDREF>;

        $r63 = virtualinvoke $r62.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r63.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label52;

     label29:
        $r4 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_IDREFS>;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z1 = virtualinvoke $r4.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r5);

        if $z1 == 0 goto label30;

        $r60 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_IDREFS>;

        $r61 = virtualinvoke $r60.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r61.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label52;

     label30:
        $r6 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ENTITY>;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z2 = virtualinvoke $r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r7);

        if $z2 == 0 goto label31;

        $r58 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ENTITY>;

        $r59 = virtualinvoke $r58.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r59.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label52;

     label31:
        $r8 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ENTITIES>;

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z3 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r9);

        if $z3 == 0 goto label32;

        $r56 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ENTITIES>;

        $r57 = virtualinvoke $r56.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r57.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        goto label52;

     label32:
        $r10 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NOTATION>;

        $r11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $z4 = virtualinvoke $r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r11);

        if $z4 == 0 goto label52;

        $r21 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i1 = interfaceinvoke $r21.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i1 != 8 goto label35;

        $r48 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r49 = newarray (java.lang.Object)[1];

        $r50 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r51 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r50);

        $r49[0] = $r51;

        $r52 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r53 = $r52.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        if $r53 != null goto label33;

        $r123 = r20;

        goto label34;

     label33:
        $r54 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r55 = $r54.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        $r123 = interfaceinvoke $r55.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", "type");

     label34:
        virtualinvoke $r48.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation-elem", $r49, $r123);

        goto label41;

     label35:
        $r22 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $i2 = interfaceinvoke $r22.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i2 != 2 goto label40;

        $r37 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaType getType()>();

        $r38 = interfaceinvoke $r37.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        i13 = 0;

     label36:
        $i5 = lengthof $r38;

        if i13 >= $i5 goto label40;

        $r39 = $r38[i13];

        $i6 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i6 != 8 goto label39;

        $r40 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r41 = newarray (java.lang.Object)[1];

        $r42 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r43 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r42);

        $r41[0] = $r43;

        $r44 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r45 = $r44.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        if $r45 != null goto label37;

        $r124 = r20;

        goto label38;

     label37:
        $r46 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r47 = $r46.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        $r124 = interfaceinvoke $r47.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", "type");

     label38:
        virtualinvoke $r40.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("enumeration-required-notation-elem", $r41, $r124);

     label39:
        i13 = i13 + 1;

        goto label36;

     label40:
        $r23 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_NOTATION>;

        $r24 = virtualinvoke $r23.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        r120 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

     label41:
        r125 = r25;

     label42:
        $r126 = interfaceinvoke r125.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        if $r126 == null goto label43;

        r125 = interfaceinvoke r125.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getOuterType()>();

        goto label42;

     label43:
        $z5 = interfaceinvoke r125.<org.apache.xmlbeans.SchemaType: boolean isDocumentType()>();

        if $z5 == 0 goto label46;

        $r35 = interfaceinvoke r125.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getDocumentElementName()>();

        $r36 = virtualinvoke $r35.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i4 = virtualinvoke $r36.<java.lang.String: int length()>();

        if $i4 <= 0 goto label44;

        $z12 = 1;

        goto label45;

     label44:
        $z12 = 0;

     label45:
        z13 = $z12;

        goto label49;

     label46:
        $r26 = interfaceinvoke r125.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r27 = virtualinvoke $r26.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i3 = virtualinvoke $r27.<java.lang.String: int length()>();

        if $i3 <= 0 goto label47;

        $z14 = 1;

        goto label48;

     label47:
        $z14 = 0;

     label48:
        z13 = $z14;

     label49:
        if z13 == 0 goto label52;

        $r28 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r29 = newarray (java.lang.Object)[1];

        $r30 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r31 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r30);

        $r29[0] = $r31;

        $r32 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r33 = $r32.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        if $r33 != null goto label50;

        $r127 = r20;

        goto label51;

     label50:
        $r34 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r127 = $r34.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

     label51:
        virtualinvoke $r28.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("notation-targetns-elem", $r29, $r127);

     label52:
        if r120 == null goto label55;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r13 = newarray (java.lang.Object)[2];

        $r14 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r15 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r14);

        $r13[0] = $r15;

        $r13[1] = r120;

        $r16 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r17 = $r16.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        if $r17 != null goto label53;

        $r128 = r20;

        goto label54;

     label53:
        $r18 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r0;

        $r19 = $r18.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        $r128 = interfaceinvoke $r19.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlObject selectAttribute(java.lang.String,java.lang.String)>("", "type");

     label54:
        virtualinvoke $r12.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("id-idref-idrefs-entity-entities-notation", $r13, $r128);

        goto label55;

     label55:
        return;

        catch java.lang.Exception from label06 to label08 with label09;
    }

    public static boolean checkRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.SchemaParticle $r4, $r5, $r20, $r21, $r23, $r24;
        org.apache.xmlbeans.impl.schema.StscState $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.SchemaType $r3, $r22, r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r18;
        javax.xml.namespace.QName $r26;
        java.lang.Object[] $r25;
        java.util.ArrayList $r17;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.String $r16, $r27;
        java.lang.Object $r19;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getDerivationType()>();

        if $i0 != 1 goto label23;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z0 != 0 goto label23;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getBaseType()>();

        $z1 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z1 == 0 goto label01;

        $r25 = newarray (java.lang.Object)[1];

        $r26 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r27 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r26);

        $r25[0] = $r27;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-ct.1", $r25, $r2);

        return 0;

     label01:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getContentType()>();

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label02;
            case 3: goto label15;
            case 4: goto label14;
            default: goto label23;
        };

     label02:
        $i9 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        lookupswitch($i9)
        {
            case 2: goto label03;
            case 4: goto label07;
            default: goto label08;
        };

     label03:
        $r22 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        if $r22 == $r3 goto label09;

        r28 = $r3;

     label04:
        if r28 == null goto label05;

        $z5 = interfaceinvoke r28.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z5 != 0 goto label05;

        r28 = interfaceinvoke r28.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        goto label04;

     label05:
        if r28 == null goto label06;

        $z4 = interfaceinvoke r28.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r22);

        if $z4 != 0 goto label06;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.2.2.1", null, $r2);

        return 0;

     label06:
        goto label09;

     label07:
        $r20 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r20 == null goto label09;

        $r21 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $z3 = interfaceinvoke $r21.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z3 != 0 goto label09;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.1.2", null, $r2);

        return 0;

     label08:
        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.1", null, $r2);

        return 0;

     label09:
        goto label23;

     label10:
        $i10 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        tableswitch($i10)
        {
            case 1: goto label11;
            case 2: goto label13;
            case 3: goto label12;
            case 4: goto label12;
            default: goto label13;
        };

     label11:
        goto label23;

     label12:
        $r23 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r23 == null goto label23;

        $r24 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $z6 = interfaceinvoke $r24.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z6 != 0 goto label23;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.2.2", null, $r2);

        return 0;

     label13:
        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.2", null, $r2);

        return 0;

     label14:
        $i2 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i2 == 4 goto label15;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.3a", null, $r2);

        return 0;

     label15:
        $i3 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i3 != 1 goto label16;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.3b", null, $r2);

        return 0;

     label16:
        $i4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i4 != 2 goto label17;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.3c", null, $r2);

        return 0;

     label17:
        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaParticle getContentModel()>();

        if $r5 != null goto label18;

        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getDerivationType()>();

        if $i8 != 1 goto label18;

        return 1;

     label18:
        if $r4 == null goto label19;

        if $r5 != null goto label20;

     label19:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Null models that weren\'t caught by EMPTY_CONTENT: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("), ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>($r16);

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.3", null, $r2);

        return 0;

     label20:
        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r4, $r5, $r17, $r2);

        if $z2 != 0 goto label23;

        $i5 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i5 != 0 goto label21;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.5.3", null, $r2);

        goto label22;

     label21:
        $r18 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.util.Collection getErrorListener()>();

        $i6 = interfaceinvoke $r17.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r19 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i7);

        interfaceinvoke $r18.<java.util.Collection: boolean add(java.lang.Object)>($r19);

     label22:
        return 0;

     label23:
        return 1;
    }

    public static boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.SchemaParticle r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r12, $r18, $r24, $r30;
        java.lang.Object[] $r9, $r15, $r21, $r27;
        java.lang.AssertionError $r5, $r13, $r19, $r25, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xmlbeans.SchemaLocalElement $r4, $r7, $r8;
        org.apache.xmlbeans.XmlObject r3;
        java.lang.String $r6, $r10, $r11, $r14, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        z7 = 0;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        z7 = 1;

        goto label31;

     label01:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label13;
            case 2: goto label19;
            case 3: goto label25;
            case 4: goto label02;
            case 5: goto label06;
            default: goto label30;
        };

     label02:
        $i2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i2)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label03;
            case 5: goto label04;
            default: goto label05;
        };

     label03:
        $r8 = (org.apache.xmlbeans.SchemaLocalElement) r0;

        $r7 = (org.apache.xmlbeans.SchemaLocalElement) r1;

        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nameAndTypeOK(org.apache.xmlbeans.SchemaLocalElement,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r8, $r7, r2, r3);

        goto label31;

     label04:
        $r9 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r9[0] = $r10;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r9[1] = $r11;

        $r12 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-particle-restrict.2", $r9, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r12);

        z7 = 0;

        goto label31;

     label05:
        $z2 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z2 != 0 goto label31;

        $r13 = new java.lang.AssertionError;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Derived Type");

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r13;

     label06:
        $i1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label07;
            case 5: goto label08;
            default: goto label12;
        };

     label07:
        $r4 = (org.apache.xmlbeans.SchemaLocalElement) r1;

        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsCompat(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, $r4, r2, r3);

        goto label31;

     label08:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsSubset(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label09:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsRecurseCheckCardinality(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label10:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsRecurseCheckCardinality(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label11:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsRecurseCheckCardinality(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label12:
        $z1 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label31;

        $r5 = new java.lang.AssertionError;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Derived Type");

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r5;

     label13:
        $i5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i5)
        {
            case 1: goto label16;
            case 2: goto label15;
            case 3: goto label17;
            case 4: goto label14;
            case 5: goto label15;
            default: goto label18;
        };

     label14:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurseAsIfGroup(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label15:
        $r27 = newarray (java.lang.Object)[2];

        $r28 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r27[0] = $r28;

        $r29 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r27[1] = $r29;

        $r30 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-particle-restrict.2", $r27, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r30);

        z7 = 0;

        goto label31;

     label16:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurse(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label17:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurseUnordered(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label18:
        $z5 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z5 != 0 goto label31;

        $r31 = new java.lang.AssertionError;

        $r32 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Derived Type");

        specialinvoke $r31.<java.lang.AssertionError: void <init>(java.lang.Object)>($r32);

        throw $r31;

     label19:
        $i4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i4)
        {
            case 1: goto label21;
            case 2: goto label22;
            case 3: goto label23;
            case 4: goto label20;
            case 5: goto label21;
            default: goto label24;
        };

     label20:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurseAsIfGroup(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label21:
        $r21 = newarray (java.lang.Object)[2];

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r21[0] = $r22;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r21[1] = $r23;

        $r24 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-particle-restrict.2", $r21, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        z7 = 0;

        goto label31;

     label22:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurseLax(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label23:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean mapAndSum(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label24:
        $z4 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z4 != 0 goto label31;

        $r25 = new java.lang.AssertionError;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Derived Type");

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r25;

     label25:
        $i3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i3)
        {
            case 1: goto label27;
            case 2: goto label27;
            case 3: goto label28;
            case 4: goto label26;
            case 5: goto label27;
            default: goto label29;
        };

     label26:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurseAsIfGroup(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label27:
        $r15 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r15[0] = $r16;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r15[1] = $r17;

        $r18 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-particle-restrict.2", $r15, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        z7 = 0;

        goto label31;

     label28:
        z7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean recurse(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        goto label31;

     label29:
        $z3 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z3 != 0 goto label31;

        $r19 = new java.lang.AssertionError;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Derived Type");

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r20);

        throw $r19;

     label30:
        $z6 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z6 != 0 goto label31;

        $r33 = new java.lang.AssertionError;

        $r34 = staticinvoke <org.apache.xmlbeans.impl.common.XBeanDebug: java.lang.String logStackTrace(java.lang.String)>("Unknown schema type for Base Type");

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>($r34);

        throw $r33;

     label31:
        return z7;
    }

    private static boolean mapAndSum(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.SchemaParticle r0, r2, r29, r32;
        java.math.BigInteger $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r20, $r23, r33;
        boolean $z0, $z1, $z2, z3, z4;
        org.apache.xmlbeans.SchemaParticle[] $r1, $r3, $r5, $r10;
        java.util.Collection r14;
        org.apache.xmlbeans.XmlError $r19, $r25, $r28;
        java.lang.Object[] $r15, $r21, $r26;
        long $l1, $l3;
        java.lang.AssertionError $r30, $r31;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11;
        java.lang.String $r17, $r22, $r24, $r27, $r34;
        org.apache.xmlbeans.XmlObject r18;

        r2 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r14 := @parameter2: java.util.Collection;

        r18 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i8 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i8 == 2 goto label01;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label01:
        $z1 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $i7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i7 == 3 goto label02;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label02:
        z3 = 1;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i9 = 0;

     label03:
        $i10 = lengthof $r1;

        if i9 >= $i10 goto label08;

        r32 = $r1[i9];

        z4 = 0;

        i11 = 0;

     label04:
        $i6 = lengthof $r3;

        if i11 >= $i6 goto label06;

        r29 = $r3[i11];

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r29, r32, r14, r18);

        if $z2 == 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        i11 = i11 + 1;

        goto label04;

     label06:
        if z4 != 0 goto label07;

        $r26 = newarray (java.lang.Object)[1];

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r32);

        $r26[0] = $r27;

        $r28 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-MapAndSum.1", $r26, r18);

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r28);

        return 0;

     label07:
        i9 = i9 + 1;

        goto label03;

     label08:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i0 = lengthof $r5;

        $l1 = (long) $i0;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r7 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r8 != null goto label09;

        r33 = null;

        goto label10;

     label09:
        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r10 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i2 = lengthof $r10;

        $l3 = (long) $i2;

        $r11 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        r33 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

     label10:
        $r12 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $i4 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i4 >= 0 goto label11;

        z3 = 0;

        $r21 = newarray (java.lang.Object)[2];

        $r22 = virtualinvoke $r7.<java.math.BigInteger: java.lang.String toString()>();

        $r21[0] = $r22;

        $r23 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r24 = virtualinvoke $r23.<java.math.BigInteger: java.lang.String toString()>();

        $r21[1] = $r24;

        $r25 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-MapAndSum.2a", $r21, r18);

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r25);

        goto label15;

     label11:
        $r13 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r13 == null goto label15;

        if r33 == null goto label12;

        $r20 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $i5 = virtualinvoke r33.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r20);

        if $i5 <= 0 goto label15;

     label12:
        z3 = 0;

        $r15 = newarray (java.lang.Object)[2];

        if r33 != null goto label13;

        $r34 = "unbounded";

        goto label14;

     label13:
        $r34 = virtualinvoke r33.<java.math.BigInteger: java.lang.String toString()>();

     label14:
        $r15[0] = $r34;

        $r16 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r17 = virtualinvoke $r16.<java.math.BigInteger: java.lang.String toString()>();

        $r15[1] = $r17;

        $r19 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-MapAndSum.2b", $r15, r18);

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r19);

     label15:
        return z3;
    }

    private static boolean recurseAsIfGroup(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r5;
        org.apache.xmlbeans.SchemaParticle r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.math.BigInteger $r6, $r7;
        org.apache.xmlbeans.XmlObject r3;
        boolean $z0, $z1;
        org.apache.xmlbeans.SchemaParticle[] $r8;
        java.util.Collection r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 != 1 goto label1;

        $i5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i5 == 4 goto label4;

     label1:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i1 != 2 goto label2;

        $i4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i4 == 4 goto label4;

     label2:
        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i2 != 3 goto label3;

        $i3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 == 4 goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r5 = new org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke $r5.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void <init>()>();

        $i6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        virtualinvoke $r5.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleType(int)>($i6);

        $r6 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r5.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMinOccurs(java.math.BigInteger)>($r6);

        $r7 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r5.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMaxOccurs(java.math.BigInteger)>($r7);

        $r8 = newarray (org.apache.xmlbeans.SchemaParticle)[1];

        $r8[0] = r1;

        virtualinvoke $r5.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleChildren(org.apache.xmlbeans.SchemaParticle[])>($r8);

        $z1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, $r5, r2, r3);

        return $z1;
    }

    private static boolean recurseLax(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r6;
        java.lang.AssertionError $r11;
        org.apache.xmlbeans.SchemaParticle r0, r1, r9, r10;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.xmlbeans.XmlObject r3;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, z3;
        org.apache.xmlbeans.SchemaParticle[] $r4, $r5;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r8;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 != 2 goto label1;

        $i4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i4 == 2 goto label2;

     label1:
        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        z3 = 1;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i5 = 0;

        i6 = 0;

     label4:
        $i0 = lengthof $r4;

        if i5 >= $i0 goto label7;

        $i2 = lengthof $r5;

        if i6 >= $i2 goto label7;

        r9 = $r4[i5];

        r10 = $r5[i6];

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r10, r9, r2, r3);

        if $z2 == 0 goto label5;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label6;

     label5:
        i6 = i6 + 1;

     label6:
        goto label4;

     label7:
        $i1 = lengthof $r4;

        if i5 >= $i1 goto label8;

        z3 = 0;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[],int)>($r5, i5);

        $r6[0] = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-RecurseLax.2", $r6, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

     label8:
        return z3;
    }

    private static boolean recurseUnordered(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.math.BigInteger $r23, $r28, $r32, $r33;
        java.util.Set $r8;
        javax.xml.namespace.QName $r20, $r36, $r46, r50;
        java.lang.Object[] $r14, $r24, $r37, $r41;
        java.lang.AssertionError $r48;
        java.lang.String $r17, $r26, $r29, $r39, $r43;
        org.apache.xmlbeans.SchemaParticle r0, r1, $r13, $r16, $r19, $r22, $r25, $r27, $r31, $r34, $r35, $r38, $r42, $r45, $r47, r49;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7;
        org.apache.xmlbeans.SchemaParticle[] $r4, $r7;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r18, $r30, $r40, $r44;
        java.util.HashMap $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.xmlbeans.XmlObject r3;
        java.util.Iterator $r9;
        java.lang.Object $r6, $r10, $r11, $r12, $r15, $r21;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 != 1 goto label01;

        $i4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i4 == 3 goto label02;

     label01:
        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label02:
        z5 = 1;

        z7 = 1;

        z6 = 1;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        if $z1 != 0 goto label03;

        return 0;

     label03:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(10);

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        i5 = 0;

     label04:
        $i0 = lengthof $r4;

        if i5 >= $i0 goto label05;

        $r45 = $r4[i5];

        $r46 = interfaceinvoke $r45.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r47 = $r4[i5];

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, $r47);

        i5 = i5 + 1;

        goto label04;

     label05:
        $r7 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i6 = 0;

     label06:
        $i1 = lengthof $r7;

        if i6 >= $i1 goto label12;

        $r19 = $r7[i6];

        $r20 = interfaceinvoke $r19.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r21 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r20);

        if $r21 != null goto label07;

        z5 = 0;

        z7 = 0;

        z6 = 0;

        $r41 = newarray (java.lang.Object)[1];

        $r42 = $r7[i6];

        $r43 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r42);

        $r41[0] = $r43;

        $r44 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-RecurseUnordered.2", $r41, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r44);

        goto label12;

     label07:
        if $r21 != $r6 goto label08;

        z5 = 0;

        z7 = 0;

        z6 = 0;

        $r37 = newarray (java.lang.Object)[1];

        $r38 = $r7[i6];

        $r39 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r38);

        $r37[0] = $r39;

        $r40 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-RecurseUnordered.2.1", $r37, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r40);

        goto label12;

     label08:
        r49 = (org.apache.xmlbeans.SchemaParticle) $r21;

        $r22 = $r7[i6];

        $r23 = interfaceinvoke $r22.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r23 == null goto label09;

        $r31 = $r7[i6];

        $r32 = interfaceinvoke $r31.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r33 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i2 = virtualinvoke $r32.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r33);

        if $i2 <= 0 goto label10;

     label09:
        z5 = 0;

        z7 = 0;

        z6 = 0;

        $r24 = newarray (java.lang.Object)[2];

        $r25 = $r7[i6];

        $r26 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r25);

        $r24[0] = $r26;

        $r27 = $r7[i6];

        $r28 = interfaceinvoke $r27.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r29 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printMaxOccurs(java.math.BigInteger)>($r28);

        $r24[1] = $r29;

        $r30 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-RecurseUnordered.2.2a", $r24, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r30);

        goto label12;

     label10:
        $r34 = $r7[i6];

        $z4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r49, $r34, r2, r3);

        if $z4 != 0 goto label11;

        z5 = 0;

        z7 = 0;

        z6 = 0;

        goto label12;

     label11:
        $r35 = $r7[i6];

        $r36 = interfaceinvoke $r35.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r6);

        i6 = i6 + 1;

        goto label06;

     label12:
        if z6 == 0 goto label15;

        $r8 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r50 = (javax.xml.namespace.QName) $r10;

        $r11 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r50);

        if $r11 == $r6 goto label14;

        $r12 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r50);

        $r13 = (org.apache.xmlbeans.SchemaParticle) $r12;

        $z3 = interfaceinvoke $r13.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z3 != 0 goto label14;

        z5 = 0;

        z7 = 0;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r50);

        $r16 = (org.apache.xmlbeans.SchemaParticle) $r15;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r16);

        $r14[0] = $r17;

        $r18 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-RecurseUnordered.2.3", $r14, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r18);

     label14:
        goto label13;

     label15:
        return z7;
    }

    private static boolean recurse(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.SchemaParticle r0, r1, $r12, $r13, r25, r26;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.xmlbeans.SchemaParticle[] $r4, $r5;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r11, $r18, $r24;
        java.lang.Object[] $r7, $r14, $r19;
        java.util.ArrayList $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9;
        org.apache.xmlbeans.XmlObject r3;
        java.lang.String $r8, $r9, $r10, $r15, $r16, $r17, $r20, $r21, $r22, $r23;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        z4 = 1;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i6 = 0;

        i7 = 0;

     label02:
        $i0 = lengthof $r4;

        if i6 >= $i0 goto label06;

        $i5 = lengthof $r5;

        if i7 >= $i5 goto label06;

        r25 = $r4[i6];

        r26 = $r5[i7];

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean isParticleValidRestriction(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r26, r25, r2, r3);

        if $z2 == 0 goto label03;

        i6 = i6 + 1;

        i7 = i7 + 1;

        goto label05;

     label03:
        $z3 = interfaceinvoke r26.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z3 == 0 goto label04;

        i7 = i7 + 1;

        goto label05;

     label04:
        z4 = 0;

        $r19 = newarray (java.lang.Object)[4];

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r25);

        $r19[0] = $r20;

        $r21 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r19[1] = $r21;

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r26);

        $r19[2] = $r22;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r19[3] = $r23;

        $r24 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-Recurse.2.1", $r19, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        goto label06;

     label05:
        goto label02;

     label06:
        $i8 = lengthof $r4;

        if i6 >= $i8 goto label07;

        z4 = 0;

        $r14 = newarray (java.lang.Object)[3];

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r14[0] = $r15;

        $r16 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r14[1] = $r16;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[],int)>($r4, i6);

        $r14[2] = $r17;

        $r18 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-Recurse.2", $r14, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label11;

     label07:
        $i1 = lengthof $r5;

        if i7 >= $i1 goto label11;

        $r6 = new java.util.ArrayList;

        $i2 = lengthof $r5;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i2);

        i9 = i7;

     label08:
        $i3 = lengthof $r5;

        if i9 >= $i3 goto label10;

        $r12 = $r5[i9];

        $z1 = interfaceinvoke $r12.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z1 != 0 goto label09;

        $r13 = $r5[i9];

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label09:
        i9 = i9 + 1;

        goto label08;

     label10:
        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i4 <= 0 goto label11;

        z4 = 0;

        $r7 = newarray (java.lang.Object)[3];

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r7[0] = $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r7[1] = $r9;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(java.util.List)>($r6);

        $r7[2] = $r10;

        $r11 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-Recurse.2.2", $r7, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r11);

     label11:
        return z4;
    }

    private static boolean nsRecurseCheckCardinality(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.AssertionError $r6, $r7;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r8;
        org.apache.xmlbeans.SchemaParticle r0, r1, r4;
        org.apache.xmlbeans.QNameSet $r9, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        org.apache.xmlbeans.SchemaLocalElement $r5;
        java.math.BigInteger $r10;
        org.apache.xmlbeans.XmlObject r3;
        boolean $z0, $z1, z2;
        org.apache.xmlbeans.SchemaParticle[] $r13;
        java.util.Collection r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i4 == 5 goto label01;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label01:
        $z1 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $i1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i1 == 1 goto label02;

        $i2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i2 == 2 goto label02;

        $i3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 == 3 goto label02;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label02:
        z2 = 1;

        $r8 = new org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void <init>()>();

        $i5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleType(int)>($i5);

        $i6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getWildcardProcess()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setWildcardProcess(int)>($i6);

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>($r9);

        $r10 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMinOccurs(java.math.BigInteger)>($r10);

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMaxOccurs(java.math.BigInteger)>(null);

        $r11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setTransitionRules(org.apache.xmlbeans.QNameSet,boolean)>($r11, 1);

        $r12 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setTransitionNotes(org.apache.xmlbeans.QNameSet,boolean)>($r12, 1);

        $r13 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i7 = 0;

     label03:
        $i8 = lengthof $r13;

        if i7 >= $i8 goto label09;

        r4 = $r13[i7];

        $i0 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label04;
            case 5: goto label05;
            default: goto label07;
        };

     label04:
        $r5 = (org.apache.xmlbeans.SchemaLocalElement) r4;

        z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsCompat(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r8, $r5, r2, r3);

        goto label07;

     label05:
        z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsSubset(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r8, r4, r2, r3);

        goto label07;

     label06:
        z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean nsRecurseCheckCardinality(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r8, r4, r2, r3);

     label07:
        if z2 != 0 goto label08;

        goto label09;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        if z2 == 0 goto label10;

        z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkGroupOccurrenceOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

     label10:
        return z2;
    }

    private static boolean checkGroupOccurrenceOK(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r5, $r10, $r14;
        org.apache.xmlbeans.SchemaParticle r0, r1;
        int $i0, $i1, $i2;
        java.math.BigInteger $r2, $r3, r18, r19, $r20;
        java.lang.String $r6, $r7, $r11, $r12, $r15, $r16;
        org.apache.xmlbeans.XmlObject r8;
        boolean z0;
        java.util.Collection r4;
        org.apache.xmlbeans.XmlError $r9, $r13, $r17;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r4 := @parameter2: java.util.Collection;

        r8 := @parameter3: org.apache.xmlbeans.XmlObject;

        z0 = 1;

        r18 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r19 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            default: goto label3;
        };

     label1:
        r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r0);

        r19 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r0);

        goto label3;

     label2:
        r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r0);

        r19 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r0);

     label3:
        $r20 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $i2 = virtualinvoke r18.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r20);

        if $i2 >= 0 goto label4;

        z0 = 0;

        $r14 = newarray (java.lang.Object)[2];

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r14[0] = $r15;

        $r16 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r14[1] = $r16;

        $r17 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("range-ok.1", $r14, r8);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r17);

     label4:
        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r2 == null goto label6;

        if r19 != null goto label5;

        z0 = 0;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r10[0] = $r11;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r10[1] = $r12;

        $r13 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("range-ok.2", $r10, r8);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        goto label6;

     label5:
        $r3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $i1 = virtualinvoke r19.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 <= 0 goto label6;

        z0 = 0;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r5[0] = $r6;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r5[1] = $r7;

        $r9 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("range-ok.2", $r5, r8);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r9);

     label6:
        return z0;
    }

    private static java.math.BigInteger getEffectiveMaxRangeChoice(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle r0, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.math.BigInteger $r2, $r3, $r4, $r6, $r7, $r8, $r9, r10, r11, r12;
        boolean z0;
        org.apache.xmlbeans.SchemaParticle[] $r1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r10 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        z0 = 0;

        r11 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r12 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i6 = 0;

     label01:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label08;

        r5 = $r1[i6];

        $i1 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label02;
            case 5: goto label02;
            default: goto label06;
        };

     label02:
        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r6 != null goto label03;

        r10 = null;

        goto label06;

     label03:
        $i2 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: int getIntMaxOccurs()>();

        if $i2 <= 0 goto label06;

        z0 = 1;

        $r7 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $i3 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r11);

        if $i3 <= 0 goto label06;

        r11 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        goto label06;

     label04:
        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r5);

        r10 = $r9;

        if $r9 == null goto label06;

        $i5 = virtualinvoke $r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r12);

        if $i5 <= 0 goto label06;

        r12 = $r9;

        goto label06;

     label05:
        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r5);

        r10 = $r8;

        if $r8 == null goto label06;

        $i4 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r12);

        if $i4 <= 0 goto label06;

        r12 = $r8;

     label06:
        if r10 != null goto label07;

        goto label08;

     label07:
        i6 = i6 + 1;

        goto label01;

     label08:
        if r10 == null goto label10;

        if z0 == 0 goto label09;

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r4 != null goto label09;

        r10 = null;

        goto label10;

     label09:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r3 = virtualinvoke r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r12);

        r10 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

     label10:
        return r10;
    }

    private static java.math.BigInteger getEffectiveMaxRangeAllSeq(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle r0, r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.math.BigInteger $r2, $r3, $r4, $r6, $r7, $r8, $r9, r10, r11, r12;
        boolean z0;
        org.apache.xmlbeans.SchemaParticle[] $r1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r10 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        z0 = 0;

        r11 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r12 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i5 = 0;

     label01:
        $i0 = lengthof $r1;

        if i5 >= $i0 goto label08;

        r5 = $r1[i5];

        $i1 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label02;
            case 5: goto label02;
            default: goto label06;
        };

     label02:
        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r6 != null goto label03;

        r10 = null;

        goto label06;

     label03:
        $i2 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: int getIntMaxOccurs()>();

        if $i2 <= 0 goto label06;

        z0 = 1;

        $r7 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        r11 = virtualinvoke r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        goto label06;

     label04:
        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r5);

        r10 = $r9;

        if $r9 == null goto label06;

        $i4 = virtualinvoke $r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r12);

        if $i4 <= 0 goto label06;

        r12 = $r9;

        goto label06;

     label05:
        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMaxRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r5);

        r10 = $r8;

        if $r8 == null goto label06;

        $i3 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r12);

        if $i3 <= 0 goto label06;

        r12 = $r8;

     label06:
        if r10 != null goto label07;

        goto label08;

     label07:
        i5 = i5 + 1;

        goto label01;

     label08:
        if r10 == null goto label10;

        if z0 == 0 goto label09;

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r4 != null goto label09;

        r10 = null;

        goto label10;

     label09:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r3 = virtualinvoke r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r12);

        r10 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

     label10:
        return r10;
    }

    private static java.math.BigInteger getEffectiveMinRangeChoice(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle r0, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.math.BigInteger $r2, $r3, $r5, $r6, $r7, $r8, r9;
        org.apache.xmlbeans.SchemaParticle[] $r1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label01;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r8;

     label01:
        r9 = null;

        i6 = 0;

     label02:
        $i1 = lengthof $r1;

        if i6 >= $i1 goto label10;

        r4 = $r1[i6];

        $i2 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label07;
            case 3: goto label05;
            case 4: goto label03;
            case 5: goto label03;
            default: goto label09;
        };

     label03:
        if r9 == null goto label04;

        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $i3 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i3 <= 0 goto label09;

     label04:
        r9 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        goto label09;

     label05:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r4);

        if r9 == null goto label06;

        $i5 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i5 <= 0 goto label09;

     label06:
        r9 = $r7;

        goto label09;

     label07:
        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r4);

        if r9 == null goto label08;

        $i4 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i4 <= 0 goto label09;

     label08:
        r9 = $r6;

     label09:
        i6 = i6 + 1;

        goto label02;

     label10:
        if r9 != null goto label11;

        r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

     label11:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r9);

        return $r3;
    }

    private static java.math.BigInteger getEffectiveMinRangeAllSeq(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle[] $r1;
        org.apache.xmlbeans.SchemaParticle r0, r4;
        int $i0, $i1, i2;
        java.math.BigInteger $r2, $r3, $r5, $r6, $r7, r8, r9;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label6;

        r4 = $r1[i2];

        $i1 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label2;
            default: goto label5;
        };

     label2:
        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        goto label5;

     label3:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeAllSeq(org.apache.xmlbeans.SchemaParticle)>(r4);

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        goto label5;

     label4:
        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.math.BigInteger getEffectiveMinRangeChoice(org.apache.xmlbeans.SchemaParticle)>(r4);

        r9 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r9);

        return $r3;
    }

    private static boolean nsSubset(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r7;
        java.lang.AssertionError $r11, $r12;
        org.apache.xmlbeans.SchemaParticle r0, r1;
        org.apache.xmlbeans.QNameSet $r4, $r5, $r6;
        int $i0, $i1;
        org.apache.xmlbeans.XmlObject r3;
        java.lang.String $r8, $r9;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r10;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i1 == 5 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 == 5 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r3);

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet inverse()>();

        $r6 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $z3 = virtualinvoke $r5.<org.apache.xmlbeans.QNameSet: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r6);

        if $z3 == 0 goto label3;

        z4 = 1;

        goto label5;

     label3:
        z4 = 0;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r1);

        $r7[0] = $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r7[1] = $r9;

        $r10 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NSSubset.2", $r7, r3);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label5;

     label4:
        z4 = 0;

     label5:
        return z4;
    }

    private static boolean nsCompat(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaLocalElement, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r5;
        java.lang.AssertionError $r12;
        org.apache.xmlbeans.SchemaParticle r0, $r6, $r11;
        org.apache.xmlbeans.QNameSet $r1;
        int $i0;
        org.apache.xmlbeans.SchemaLocalElement r2;
        java.lang.String $r7, $r8;
        org.apache.xmlbeans.XmlObject r9;
        boolean $z0, $z1, $z2, z3;
        java.util.Collection r4;
        org.apache.xmlbeans.XmlError $r10;
        javax.xml.namespace.QName $r3;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r2 := @parameter1: org.apache.xmlbeans.SchemaLocalElement;

        r4 := @parameter2: java.util.Collection;

        r9 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 == 5 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        z3 = 0;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaLocalElement: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r1.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>($r3);

        if $z1 == 0 goto label2;

        $r11 = (org.apache.xmlbeans.SchemaParticle) r2;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, $r11, r4, r9);

        if $z2 == 0 goto label3;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (org.apache.xmlbeans.SchemaParticle) r2;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r6);

        $r5[0] = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r5[1] = $r8;

        $r10 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NSCompat.1", $r5, r9);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r10);

     label3:
        return z3;
    }

    private static boolean nameAndTypeOK(org.apache.xmlbeans.SchemaLocalElement, org.apache.xmlbeans.SchemaLocalElement, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r10, $r16;
        org.apache.xmlbeans.SchemaParticle $r2, $r6, $r7, $r11, $r13, $r17, $r19;
        org.apache.xmlbeans.SchemaLocalElement r0, r1;
        org.apache.xmlbeans.XmlObject r5;
        java.lang.String $r12, $r14, $r18, $r20;
        org.apache.xmlbeans.SchemaType $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Collection r4;
        org.apache.xmlbeans.XmlError $r15, $r21;
        javax.xml.namespace.QName $r3;

        r0 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r1 := @parameter1: org.apache.xmlbeans.SchemaLocalElement;

        r4 := @parameter2: java.util.Collection;

        r5 := @parameter3: org.apache.xmlbeans.XmlObject;

        $r2 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: javax.xml.namespace.QName getName()>();

        $z0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaParticle: boolean canStartWithElement(javax.xml.namespace.QName)>($r3);

        if $z0 != 0 goto label1;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = (org.apache.xmlbeans.SchemaParticle) r1;

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r17);

        $r16[0] = $r18;

        $r19 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r19);

        $r16[1] = $r20;

        $r21 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.1", $r16, r5);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r21);

        return 0;

     label1:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: boolean isNillable()>();

        if $z1 != 0 goto label2;

        $z7 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: boolean isNillable()>();

        if $z7 == 0 goto label2;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = (org.apache.xmlbeans.SchemaParticle) r1;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r11);

        $r10[0] = $r12;

        $r13 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r13);

        $r10[1] = $r14;

        $r15 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.2", $r10, r5);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r15);

        return 0;

     label2:
        $r7 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r6 = (org.apache.xmlbeans.SchemaParticle) r1;

        $z2 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r7, $r6, r4, r5);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkFixed(org.apache.xmlbeans.SchemaLocalElement,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r4, r5);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        $z4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkIdentityConstraints(org.apache.xmlbeans.SchemaLocalElement,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r4, r5);

        if $z4 != 0 goto label5;

        return 0;

     label5:
        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: org.apache.xmlbeans.SchemaType getType()>();

        $r9 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: org.apache.xmlbeans.SchemaType getType()>();

        $z5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean typeDerivationOK(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaType,java.util.Collection,org.apache.xmlbeans.XmlObject)>($r8, $r9, r4, r5);

        if $z5 != 0 goto label6;

        return 0;

     label6:
        $z6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean blockSetOK(org.apache.xmlbeans.SchemaLocalElement,org.apache.xmlbeans.SchemaLocalElement,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r4, r5);

        if $z6 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    private static boolean blockSetOK(org.apache.xmlbeans.SchemaLocalElement, org.apache.xmlbeans.SchemaLocalElement, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r3, $r10, $r16;
        org.apache.xmlbeans.SchemaParticle $r4, $r6, $r11, $r13, $r17, $r19;
        org.apache.xmlbeans.SchemaLocalElement r0, r1;
        java.lang.String $r5, $r7, $r12, $r14, $r18, $r20;
        org.apache.xmlbeans.XmlObject r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r9, $r15, $r21;

        r0 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r1 := @parameter1: org.apache.xmlbeans.SchemaLocalElement;

        r2 := @parameter2: java.util.Collection;

        r8 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: boolean blockRestriction()>();

        if $z0 == 0 goto label1;

        $z5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: boolean blockRestriction()>();

        if $z5 != 0 goto label1;

        $r16 = newarray (java.lang.Object)[3];

        $r17 = (org.apache.xmlbeans.SchemaParticle) r1;

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r17);

        $r16[0] = $r18;

        $r16[1] = "restriction";

        $r19 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r19);

        $r16[2] = $r20;

        $r21 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.6", $r16, r8);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r21);

        return 0;

     label1:
        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: boolean blockExtension()>();

        if $z1 == 0 goto label2;

        $z4 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: boolean blockExtension()>();

        if $z4 != 0 goto label2;

        $r10 = newarray (java.lang.Object)[3];

        $r11 = (org.apache.xmlbeans.SchemaParticle) r1;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r11);

        $r10[0] = $r12;

        $r10[1] = "extension";

        $r13 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r13);

        $r10[2] = $r14;

        $r15 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.6", $r10, r8);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r15);

        return 0;

     label2:
        $z2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: boolean blockSubstitution()>();

        if $z2 == 0 goto label3;

        $z3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaLocalElement: boolean blockSubstitution()>();

        if $z3 != 0 goto label3;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = (org.apache.xmlbeans.SchemaParticle) r1;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r4);

        $r3[0] = $r5;

        $r3[1] = "substitution";

        $r6 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r6);

        $r3[2] = $r7;

        $r9 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.6", $r3, r8);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        return 0;

     label3:
        return 1;
    }

    private static boolean typeDerivationOK(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.SchemaType, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r3;
        java.util.Collection r2;
        org.apache.xmlbeans.XmlError $r7;
        java.lang.String $r4, $r5;
        org.apache.xmlbeans.XmlObject r6;
        org.apache.xmlbeans.SchemaType r0, r1;
        boolean $z0, z1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        r1 := @parameter1: org.apache.xmlbeans.SchemaType;

        r2 := @parameter2: java.util.Collection;

        r6 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>(r1);

        if $z0 == 0 goto label1;

        z1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkAllDerivationsForRestriction(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaType,java.util.Collection,org.apache.xmlbeans.XmlObject)>(r0, r1, r2, r6);

        goto label2;

     label1:
        z1 = 0;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printType(org.apache.xmlbeans.SchemaType)>(r1);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printType(org.apache.xmlbeans.SchemaType)>(r0);

        $r3[1] = $r5;

        $r7 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.7a", $r3, r6);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r7);

     label2:
        return z1;
    }

    private static boolean checkAllDerivationsForRestriction(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.SchemaType, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.SchemaType[] $r10;
        java.lang.Object[] $r3;
        java.util.HashSet $r9, r13;
        int $i0, $i1;
        java.lang.String $r4, $r5, $r6;
        org.apache.xmlbeans.XmlObject r7;
        org.apache.xmlbeans.SchemaType r0, r1, r12;
        boolean $z0, z1, $z2;
        java.util.Collection r2;
        java.util.List $r11;
        org.apache.xmlbeans.XmlError $r8;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        r0 := @parameter1: org.apache.xmlbeans.SchemaType;

        r2 := @parameter2: java.util.Collection;

        r7 := @parameter3: org.apache.xmlbeans.XmlObject;

        z1 = 1;

        r12 = r0;

        r13 = null;

        $i0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        if $i0 != 2 goto label1;

        $r9 = new java.util.HashSet;

        $r10 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionConstituentTypes()>();

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r11);

        r13 = $r9;

     label1:
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r12);

        if $z2 != 0 goto label3;

        if r13 == null goto label3;

        $z0 = interfaceinvoke r13.<java.util.Set: boolean contains(java.lang.Object)>(r12);

        if $z0 != 0 goto label3;

        $i1 = interfaceinvoke r12.<org.apache.xmlbeans.SchemaType: int getDerivationType()>();

        if $i1 != 1 goto label2;

        r12 = interfaceinvoke r12.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getBaseType()>();

        goto label1;

     label2:
        z1 = 0;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printType(org.apache.xmlbeans.SchemaType)>(r0);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printType(org.apache.xmlbeans.SchemaType)>(r1);

        $r3[1] = $r5;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printType(org.apache.xmlbeans.SchemaType)>(r12);

        $r3[2] = $r6;

        $r8 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.7b", $r3, r7);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label3;

     label3:
        return z1;
    }

    private static boolean checkIdentityConstraints(org.apache.xmlbeans.SchemaLocalElement, org.apache.xmlbeans.SchemaLocalElement, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r6;
        org.apache.xmlbeans.SchemaParticle $r7, $r9;
        int $i0, i1;
        org.apache.xmlbeans.SchemaLocalElement r0, r2;
        org.apache.xmlbeans.SchemaIdentityConstraint[] $r1, $r3;
        java.lang.String $r8, $r10;
        org.apache.xmlbeans.XmlObject r11;
        boolean $z0, z1;
        java.util.Collection r5;
        org.apache.xmlbeans.SchemaIdentityConstraint r4;
        org.apache.xmlbeans.XmlError $r12;

        r0 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r2 := @parameter1: org.apache.xmlbeans.SchemaLocalElement;

        r5 := @parameter2: java.util.Collection;

        r11 := @parameter3: org.apache.xmlbeans.XmlObject;

        z1 = 1;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: org.apache.xmlbeans.SchemaIdentityConstraint[] getIdentityConstraints()>();

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaLocalElement: org.apache.xmlbeans.SchemaIdentityConstraint[] getIdentityConstraints()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label3;

        r4 = $r3[i1];

        $z0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: boolean checkForIdentityConstraintExistence(org.apache.xmlbeans.SchemaIdentityConstraint[],org.apache.xmlbeans.SchemaIdentityConstraint)>($r1, r4);

        if $z0 == 0 goto label2;

        z1 = 0;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = (org.apache.xmlbeans.SchemaParticle) r2;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r7);

        $r6[0] = $r8;

        $r9 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r9);

        $r6[1] = $r10;

        $r12 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.5", $r6, r11);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r12);

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z1;
    }

    private static boolean checkForIdentityConstraintExistence(org.apache.xmlbeans.SchemaIdentityConstraint[], org.apache.xmlbeans.SchemaIdentityConstraint)
    {
        org.apache.xmlbeans.SchemaIdentityConstraint r1, r3;
        int $i0, i1;
        org.apache.xmlbeans.SchemaIdentityConstraint[] r0;
        javax.xml.namespace.QName $r2, $r4;
        boolean $z0, z1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaIdentityConstraint[];

        r3 := @parameter1: org.apache.xmlbeans.SchemaIdentityConstraint;

        z1 = 0;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        r1 = r0[i1];

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaIdentityConstraint: javax.xml.namespace.QName getName()>();

        $r4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaIdentityConstraint: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke $r2.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z1;
    }

    private static boolean checkFixed(org.apache.xmlbeans.SchemaLocalElement, org.apache.xmlbeans.SchemaLocalElement, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r5;
        org.apache.xmlbeans.SchemaParticle $r6, $r9;
        org.apache.xmlbeans.SchemaLocalElement r0, r2;
        java.lang.String $r1, $r3, $r7, $r8, $r10, $r11;
        org.apache.xmlbeans.XmlObject r12;
        boolean $z0, $z1, z2;
        java.util.Collection r4;
        org.apache.xmlbeans.XmlError $r13;

        r0 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r2 := @parameter1: org.apache.xmlbeans.SchemaLocalElement;

        r4 := @parameter2: java.util.Collection;

        r12 := @parameter3: org.apache.xmlbeans.XmlObject;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: boolean isFixed()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: java.lang.String getDefaultText()>();

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaLocalElement: java.lang.String getDefaultText()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label3;

     label1:
        $r5 = newarray (java.lang.Object)[4];

        $r6 = (org.apache.xmlbeans.SchemaParticle) r2;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r6);

        $r5[0] = $r7;

        $r8 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaLocalElement: java.lang.String getDefaultText()>();

        $r5[1] = $r8;

        $r9 = (org.apache.xmlbeans.SchemaParticle) r0;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r9);

        $r5[2] = $r10;

        $r11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaLocalElement: java.lang.String getDefaultText()>();

        $r5[3] = $r11;

        $r13 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("rcase-NameAndTypeOK.4", $r5, r12);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private static boolean occurrenceRangeOK(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, java.util.Collection, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r5, $r19;
        org.apache.xmlbeans.SchemaParticle r0, r2;
        int $i0, $i1;
        java.math.BigInteger $r1, $r3, $r7, $r10, $r14, $r15, $r16, $r17, $r18, $r21, $r24;
        java.lang.String $r6, $r8, $r9, $r11, $r20, $r22, $r23, $r25;
        org.apache.xmlbeans.XmlObject r12;
        boolean z0;
        java.util.Collection r4;
        org.apache.xmlbeans.XmlError $r13, $r26;

        r2 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r4 := @parameter2: java.util.Collection;

        r12 := @parameter3: org.apache.xmlbeans.XmlObject;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 < 0 goto label3;

        $r14 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r14 != null goto label1;

        z0 = 1;

        goto label4;

     label1:
        $r15 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r15 == null goto label2;

        $r16 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r16 == null goto label2;

        $r17 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r18 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $i1 = virtualinvoke $r17.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r18);

        if $i1 > 0 goto label2;

        z0 = 1;

        goto label4;

     label2:
        z0 = 0;

        $r19 = newarray (java.lang.Object)[4];

        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r19[0] = $r20;

        $r21 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printMaxOccurs(java.math.BigInteger)>($r21);

        $r19[1] = $r22;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r2);

        $r19[2] = $r23;

        $r24 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r25 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printMaxOccurs(java.math.BigInteger)>($r24);

        $r19[3] = $r25;

        $r26 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("range-ok.2", $r19, r12);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r26);

        goto label4;

     label3:
        z0 = 0;

        $r5 = newarray (java.lang.Object)[4];

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r0);

        $r5[0] = $r6;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.lang.String toString()>();

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>(r2);

        $r5[2] = $r9;

        $r10 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.lang.String toString()>();

        $r5[3] = $r11;

        $r13 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forObject(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("range-ok.1", $r5, r12);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r13);

     label4:
        return z0;
    }

    private static java.lang.String printParticles(java.util.List)
    {
        java.util.List r0;
        java.lang.Object[] $r2;
        org.apache.xmlbeans.SchemaParticle[] $r1, $r3, $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (org.apache.xmlbeans.SchemaParticle)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (org.apache.xmlbeans.SchemaParticle[]) $r2;

        $r4 = (org.apache.xmlbeans.SchemaParticle[]) $r3;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[])>($r4);

        return $r5;
    }

    private static java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[])
    {
        int $i0;
        java.lang.String $r1;
        org.apache.xmlbeans.SchemaParticle[] r0;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    private static java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[], int)
    {
        org.apache.xmlbeans.SchemaParticle[] r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[],int,int)>(r0, i0, $i1);

        return $r1;
    }

    private static java.lang.String printParticles(org.apache.xmlbeans.SchemaParticle[], int, int)
    {
        org.apache.xmlbeans.SchemaParticle[] r1;
        org.apache.xmlbeans.SchemaParticle $r3;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r2, $r4;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r0 = new java.lang.StringBuffer;

        $i0 = lengthof r1;

        $i1 = $i0 * 30;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        i4 = i2;

     label1:
        if i4 >= i3 goto label2;

        $r3 = r1[i4];

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)>($r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i4 = i4 + 1;

        if i4 == i3 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.String printParticle(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.SchemaParticle r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r6;
        int $i0;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4, $r7;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return "<all>";

     label2:
        return "<choice>";

     label3:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<element name=\"");

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label4:
        return "<sequence>";

     label5:
        return "<any>";

     label6:
        return "??";
    }

    private static java.lang.String printMaxOccurs(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        return "unbounded";

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();

        return $r1;
    }

    private static java.lang.String printType(org.apache.xmlbeans.SchemaType)
    {
        javax.xml.namespace.QName $r1, $r3;
        java.lang.String $r2, $r4;
        org.apache.xmlbeans.SchemaType r0;

        r0 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        if $r1 == null goto label1;

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r3);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    private static void checkSubstitutionGroups(org.apache.xmlbeans.SchemaGlobalElement[])
    {
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.SchemaType $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl $r6;
        javax.xml.namespace.QName $r9, $r11, $r14, $r16, $r19, $r21, $r24, $r26;
        java.lang.Object[] $r8, $r13, $r18, $r23;
        org.apache.xmlbeans.SchemaGlobalElement[] r1;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.XmlObject r7;
        java.lang.String $r10, $r12, $r15, $r17, $r20, $r22, $r25, $r27;
        org.apache.xmlbeans.SchemaGlobalElement r2, $r3;

        r1 := @parameter0: org.apache.xmlbeans.SchemaGlobalElement[];

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label6;

        r2 = r1[i3];

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaGlobalElement substitutionGroup()>();

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaType getType()>();

        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: org.apache.xmlbeans.SchemaType getType()>();

        $r6 = (org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl) r2;

        r7 = $r6.<org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl: org.apache.xmlbeans.XmlObject _parseObject>;

        $z0 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: boolean isAssignableFrom(org.apache.xmlbeans.SchemaType)>($r5);

        if $z0 != 0 goto label2;

        $r23 = newarray (java.lang.Object)[2];

        $r24 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r25 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r24);

        $r23[0] = $r25;

        $r26 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r27 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r26);

        $r23[1] = $r27;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("e-props-correct.4", $r23, r7);

        goto label5;

     label2:
        $z1 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: boolean finalExtension()>();

        if $z1 == 0 goto label3;

        $z5 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: boolean finalRestriction()>();

        if $z5 == 0 goto label3;

        $r18 = newarray (java.lang.Object)[3];

        $r19 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r20 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r19);

        $r18[0] = $r20;

        $r21 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r22 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r21);

        $r18[1] = $r22;

        $r18[2] = "#all";

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("e-props-correct.4a", $r18, r7);

        goto label5;

     label3:
        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label5;

        $z3 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: boolean finalExtension()>();

        if $z3 == 0 goto label4;

        $i2 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getDerivationType()>();

        if $i2 != 2 goto label4;

        $r13 = newarray (java.lang.Object)[3];

        $r14 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r15 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r14);

        $r13[0] = $r15;

        $r16 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r17 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r16);

        $r13[1] = $r17;

        $r13[2] = "extension";

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("e-props-correct.4a", $r13, r7);

        goto label5;

     label4:
        $z4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: boolean finalRestriction()>();

        if $z4 == 0 goto label5;

        $i1 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: int getDerivationType()>();

        if $i1 != 1 goto label5;

        $r8 = newarray (java.lang.Object)[3];

        $r9 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r9);

        $r8[0] = $r10;

        $r11 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaGlobalElement: javax.xml.namespace.QName getName()>();

        $r12 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r11);

        $r8[1] = $r12;

        $r8[2] = "restriction";

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("e-props-correct.4a", $r8, r7);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscChecker>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.StscChecker");

        <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscChecker> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.StscChecker: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscChecker>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.StscChecker: boolean $assertionsDisabled> = $z1;

        return;
    }
}
