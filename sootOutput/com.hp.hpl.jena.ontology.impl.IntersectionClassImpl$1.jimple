final class com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1 extends com.hp.hpl.jena.enhanced.Implementation
{

    void <init>()
    {
        com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1 r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1;

        specialinvoke r0.<com.hp.hpl.jena.enhanced.Implementation: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.enhanced.EnhNode wrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.ontology.ConversionException $r3;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1 r0;
        com.hp.hpl.jena.enhanced.EnhGraph r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        com.hp.hpl.jena.ontology.impl.IntersectionClassImpl $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1: boolean canWrap(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        if $z0 == 0 goto label1;

        $r9 = new com.hp.hpl.jena.ontology.impl.IntersectionClassImpl;

        specialinvoke $r9.<com.hp.hpl.jena.ontology.impl.IntersectionClassImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return $r9;

     label1:
        $r3 = new com.hp.hpl.jena.ontology.ConversionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert node ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to IntersectionClass");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.ontology.ConversionException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public boolean canWrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.ontology.Profile $r5;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.enhanced.EnhGraph r0;
        com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1 r4;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.ontology.OntModel $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: com.hp.hpl.jena.ontology.impl.IntersectionClassImpl$1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $z0 = r0 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z0 == 0 goto label1;

        $r3 = (com.hp.hpl.jena.ontology.OntModel) r0;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 == null goto label3;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.ontology.Profile: boolean isSupported(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph,java.lang.Class)>(r1, r0, class "Lcom/hp/hpl/jena/ontology/OntClass;");

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke $r5.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property INTERSECTION_OF()>();

        $z2 = staticinvoke <com.hp.hpl.jena.ontology.impl.AbstractProfile: boolean containsSome(com.hp.hpl.jena.enhanced.EnhGraph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.rdf.model.Property)>(r0, r1, $r2);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }
}
