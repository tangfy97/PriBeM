public class nu.xom.jaxen.function.NumberFunction extends java.lang.Object implements nu.xom.jaxen.Function
{
    private static final java.lang.Double NaN;

    public void <init>()
    {
        nu.xom.jaxen.function.NumberFunction r0;

        r0 := @this: nu.xom.jaxen.function.NumberFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call(nu.xom.jaxen.Context, java.util.List) throws nu.xom.jaxen.FunctionCallException
    {
        nu.xom.jaxen.FunctionCallException $r1;
        java.lang.Double $r5, $r8;
        java.util.List r0, $r3;
        int $i0, $i1;
        nu.xom.jaxen.function.NumberFunction r9;
        java.lang.Object $r6;
        nu.xom.jaxen.Context r2;
        nu.xom.jaxen.Navigator $r4, $r7;

        r9 := @this: nu.xom.jaxen.function.NumberFunction;

        r2 := @parameter0: nu.xom.jaxen.Context;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = virtualinvoke r2.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r8 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r6, $r7);

        return $r8;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

        $r3 = virtualinvoke r2.<nu.xom.jaxen.Context: java.util.List getNodeSet()>();

        $r4 = virtualinvoke r2.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r5 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r3, $r4);

        return $r5;

     label2:
        $r1 = new nu.xom.jaxen.FunctionCallException;

        specialinvoke $r1.<nu.xom.jaxen.FunctionCallException: void <init>(java.lang.String)>("number() takes at most one argument.");

        throw $r1;
    }

    public static java.lang.Double evaluate(java.lang.Object, nu.xom.jaxen.Navigator)
    {
        java.lang.Double $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14;
        java.lang.Boolean $r7;
        java.lang.String $r2, $r4, r10;
        nu.xom.jaxen.Navigator r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.NumberFormatException $r13;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: nu.xom.jaxen.Navigator;

        $z0 = r0 instanceof java.lang.Double;

        if $z0 == 0 goto label01;

        $r12 = (java.lang.Double) r0;

        return $r12;

     label01:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label05;

        r10 = (java.lang.String) r0;

     label02:
        $r11 = new java.lang.Double;

        specialinvoke $r11.<java.lang.Double: void <init>(java.lang.String)>(r10);

     label03:
        return $r11;

     label04:
        $r13 := @caughtexception;

        $r14 = <nu.xom.jaxen.function.NumberFunction: java.lang.Double NaN>;

        return $r14;

     label05:
        $z2 = r0 instanceof java.util.List;

        if $z2 != 0 goto label06;

        $z3 = r0 instanceof java.util.Iterator;

        if $z3 == 0 goto label07;

     label06:
        $r2 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>(r0, r1);

        $r3 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r2, r1);

        return $r3;

     label07:
        $z4 = interfaceinvoke r1.<nu.xom.jaxen.Navigator: boolean isElement(java.lang.Object)>(r0);

        if $z4 != 0 goto label08;

        $z5 = interfaceinvoke r1.<nu.xom.jaxen.Navigator: boolean isAttribute(java.lang.Object)>(r0);

        if $z5 == 0 goto label09;

     label08:
        $r4 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>(r0, r1);

        $r5 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r4, r1);

        return $r5;

     label09:
        $z6 = r0 instanceof java.lang.Boolean;

        if $z6 == 0 goto label11;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if r0 != $r7 goto label10;

        $r9 = new java.lang.Double;

        specialinvoke $r9.<java.lang.Double: void <init>(double)>(1.0);

        return $r9;

     label10:
        $r8 = new java.lang.Double;

        specialinvoke $r8.<java.lang.Double: void <init>(double)>(0.0);

        return $r8;

     label11:
        $r6 = <nu.xom.jaxen.function.NumberFunction: java.lang.Double NaN>;

        return $r6;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
    }

    public static boolean isNaN(double)
    {
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        return $z0;
    }

    public static boolean isNaN(java.lang.Double)
    {
        java.lang.Double r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Double;

        $r1 = <nu.xom.jaxen.function.NumberFunction: java.lang.Double NaN>;

        $z0 = virtualinvoke r0.<java.lang.Double: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Double $r0;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(#NaN);

        <nu.xom.jaxen.function.NumberFunction: java.lang.Double NaN> = $r0;

        return;
    }
}
