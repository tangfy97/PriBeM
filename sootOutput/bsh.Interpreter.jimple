public class bsh.Interpreter extends java.lang.Object implements java.lang.Runnable, bsh.ConsoleInterface, java.io.Serializable
{
    public static final java.lang.String VERSION;
    public static boolean DEBUG;
    public static boolean TRACE;
    public static boolean LOCALSCOPING;
    static transient java.io.PrintStream debug;
    static java.lang.String systemLineSeparator;
    static bsh.This sharedObject;
    private boolean strictJava;
    transient bsh.Parser parser;
    bsh.NameSpace globalNameSpace;
    transient java.io.Reader in;
    transient java.io.PrintStream out;
    transient java.io.PrintStream err;
    bsh.ConsoleInterface console;
    bsh.Interpreter parent;
    java.lang.String sourceFileInfo;
    private boolean exitOnEOF;
    protected boolean evalOnly;
    protected boolean interactive;
    private boolean showResults;
    static java.lang.Class array$Ljava$lang$String;

    public void <init>(java.io.Reader, java.io.PrintStream, java.io.PrintStream, boolean, bsh.NameSpace, bsh.Interpreter, java.lang.String)
    {
        bsh.NameSpace r8, $r14;
        long $l0, $l1, $l2;
        bsh.BshClassManager $r7;
        bsh.Parser $r1;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.lang.String r6, $r13;
        boolean z0, $z1, $z2, $z3;
        java.io.PrintStream r3, r4;
        bsh.Interpreter r0, r5;
        java.io.Reader r2;
        java.lang.Object $r9;

        r0 := @this: bsh.Interpreter;

        r2 := @parameter0: java.io.Reader;

        r3 := @parameter1: java.io.PrintStream;

        r4 := @parameter2: java.io.PrintStream;

        z0 := @parameter3: boolean;

        r8 := @parameter4: bsh.NameSpace;

        r5 := @parameter5: bsh.Interpreter;

        r6 := @parameter6: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<bsh.Interpreter: boolean strictJava> = 0;

        r0.<bsh.Interpreter: boolean exitOnEOF> = 1;

        $r1 = new bsh.Parser;

        specialinvoke $r1.<bsh.Parser: void <init>(java.io.Reader)>(r2);

        r0.<bsh.Interpreter: bsh.Parser parser> = $r1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<bsh.Interpreter: java.io.Reader in> = r2;

        r0.<bsh.Interpreter: java.io.PrintStream out> = r3;

        r0.<bsh.Interpreter: java.io.PrintStream err> = r4;

        r0.<bsh.Interpreter: boolean interactive> = z0;

        <bsh.Interpreter: java.io.PrintStream debug> = r4;

        r0.<bsh.Interpreter: bsh.Interpreter parent> = r5;

        if r5 == null goto label1;

        $z3 = virtualinvoke r5.<bsh.Interpreter: boolean getStrictJava()>();

        virtualinvoke r0.<bsh.Interpreter: void setStrictJava(boolean)>($z3);

     label1:
        r0.<bsh.Interpreter: java.lang.String sourceFileInfo> = r6;

        $r7 = staticinvoke <bsh.BshClassManager: bsh.BshClassManager createClassManager(bsh.Interpreter)>(r0);

        if r8 != null goto label2;

        $r14 = new bsh.NameSpace;

        specialinvoke $r14.<bsh.NameSpace: void <init>(bsh.BshClassManager,java.lang.String)>($r7, "global");

        r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace> = $r14;

        goto label3;

     label2:
        r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace> = r8;

     label3:
        $r9 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object getu(java.lang.String)>("bsh");

        $z1 = $r9 instanceof bsh.This;

        if $z1 != 0 goto label4;

        specialinvoke r0.<bsh.Interpreter: void initRootSystemObject()>();

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.<bsh.Interpreter: void loadRCFiles()>();

     label5:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z2 = <bsh.Interpreter: boolean DEBUG>;

        if $z2 == 0 goto label6;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Time to initialize interpreter: ");

        $l2 = $l1 - $l0;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r13);

     label6:
        return;
    }

    public void <init>(java.io.Reader, java.io.PrintStream, java.io.PrintStream, boolean, bsh.NameSpace)
    {
        java.io.PrintStream r2, r3;
        bsh.Interpreter r0;
        bsh.NameSpace r4;
        java.io.Reader r1;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.PrintStream;

        r3 := @parameter2: java.io.PrintStream;

        z0 := @parameter3: boolean;

        r4 := @parameter4: bsh.NameSpace;

        specialinvoke r0.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean,bsh.NameSpace,bsh.Interpreter,java.lang.String)>(r1, r2, r3, z0, r4, null, null);

        return;
    }

    public void <init>(java.io.Reader, java.io.PrintStream, java.io.PrintStream, boolean)
    {
        java.io.PrintStream r2, r3;
        bsh.Interpreter r0;
        java.io.Reader r1;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.io.PrintStream;

        r3 := @parameter2: java.io.PrintStream;

        z0 := @parameter3: boolean;

        specialinvoke r0.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean,bsh.NameSpace)>(r1, r2, r3, z0, null);

        return;
    }

    public void <init>(bsh.ConsoleInterface, bsh.NameSpace)
    {
        java.io.PrintStream $r3, $r4;
        bsh.Interpreter r0;
        bsh.NameSpace r5;
        bsh.ConsoleInterface r1;
        java.io.Reader $r2;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: bsh.ConsoleInterface;

        r5 := @parameter1: bsh.NameSpace;

        $r2 = interfaceinvoke r1.<bsh.ConsoleInterface: java.io.Reader getIn()>();

        $r3 = interfaceinvoke r1.<bsh.ConsoleInterface: java.io.PrintStream getOut()>();

        $r4 = interfaceinvoke r1.<bsh.ConsoleInterface: java.io.PrintStream getErr()>();

        specialinvoke r0.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean,bsh.NameSpace)>($r2, $r3, $r4, 1, r5);

        virtualinvoke r0.<bsh.Interpreter: void setConsole(bsh.ConsoleInterface)>(r1);

        return;
    }

    public void <init>(bsh.ConsoleInterface)
    {
        bsh.ConsoleInterface r1;
        bsh.Interpreter r0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: bsh.ConsoleInterface;

        specialinvoke r0.<bsh.Interpreter: void <init>(bsh.ConsoleInterface,bsh.NameSpace)>(r1, null);

        return;
    }

    public void <init>()
    {
        java.io.PrintStream $r2, $r3;
        bsh.Interpreter r0;
        java.io.StringReader $r1;
        bsh.Primitive $r4;

        r0 := @this: bsh.Interpreter;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>("");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke r0.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean,bsh.NameSpace)>($r1, $r3, $r2, 0, null);

        r0.<bsh.Interpreter: boolean evalOnly> = 1;

        $r4 = new bsh.Primitive;

        specialinvoke $r4.<bsh.Primitive: void <init>(boolean)>(1);

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.evalOnly", $r4);

        return;
    }

    public void setConsole(bsh.ConsoleInterface)
    {
        java.io.PrintStream $r2, $r3;
        bsh.Interpreter r0;
        bsh.ConsoleInterface r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: bsh.ConsoleInterface;

        r0.<bsh.Interpreter: bsh.ConsoleInterface console> = r1;

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.console", r1);

        $r2 = interfaceinvoke r1.<bsh.ConsoleInterface: java.io.PrintStream getOut()>();

        virtualinvoke r0.<bsh.Interpreter: void setOut(java.io.PrintStream)>($r2);

        $r3 = interfaceinvoke r1.<bsh.ConsoleInterface: java.io.PrintStream getErr()>();

        virtualinvoke r0.<bsh.Interpreter: void setErr(java.io.PrintStream)>($r3);

        return;
    }

    private void initRootSystemObject()
    {
        bsh.NameSpace $r2, $r7, $r12;
        bsh.BshClassManager $r1;
        bsh.This $r3, $r4, $r5, $r6, $r8, $r13;
        java.lang.SecurityException $r14;
        java.lang.String $r9;
        boolean $z0, $z1;
        bsh.Interpreter r0;
        bsh.Primitive $r10, $r11;

        r0 := @this: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

        $r2 = new bsh.NameSpace;

        specialinvoke $r2.<bsh.NameSpace: void <init>(bsh.BshClassManager,java.lang.String)>($r1, "Bsh Object");

        $r3 = virtualinvoke $r2.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r0);

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh", $r3);

        $r4 = <bsh.Interpreter: bsh.This sharedObject>;

        if $r4 != null goto label1;

        $r12 = new bsh.NameSpace;

        specialinvoke $r12.<bsh.NameSpace: void <init>(bsh.BshClassManager,java.lang.String)>($r1, "Bsh Shared System Object");

        $r13 = virtualinvoke $r12.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r0);

        <bsh.Interpreter: bsh.This sharedObject> = $r13;

     label1:
        $r5 = <bsh.Interpreter: bsh.This sharedObject>;

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.system", $r5);

        $r6 = <bsh.Interpreter: bsh.This sharedObject>;

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.shared", $r6);

        $r7 = new bsh.NameSpace;

        specialinvoke $r7.<bsh.NameSpace: void <init>(bsh.BshClassManager,java.lang.String)>($r1, "Bsh Command Help Text");

        $r8 = virtualinvoke $r7.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r0);

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.help", $r8);

     label2:
        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.cwd", $r9);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.cwd", ".");

        goto label5;

     label5:
        $r10 = new bsh.Primitive;

        $z0 = r0.<bsh.Interpreter: boolean interactive>;

        specialinvoke $r10.<bsh.Primitive: void <init>(boolean)>($z0);

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.interactive", $r10);

        $r11 = new bsh.Primitive;

        $z1 = r0.<bsh.Interpreter: boolean evalOnly>;

        specialinvoke $r11.<bsh.Primitive: void <init>(boolean)>($z1);

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.evalOnly", $r11);

        return;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    public void setNameSpace(bsh.NameSpace)
    {
        bsh.Interpreter r0;
        bsh.NameSpace r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: bsh.NameSpace;

        r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace> = r1;

        return;
    }

    public bsh.NameSpace getNameSpace()
    {
        bsh.Interpreter r0;
        bsh.NameSpace $r1;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        return $r1;
    }

    public static void main(java.lang.String[])
    {
        bsh.TargetError $r21;
        java.lang.Exception $r34;
        java.lang.reflect.InvocationTargetException $r42;
        java.lang.Throwable r45;
        bsh.NameSpace $r6;
        java.lang.StringBuffer $r10, $r12, $r13, $r16, $r18, $r19, $r22, $r24, $r25, $r29, $r31, $r32, $r35, $r37, $r38, $r39, $r40;
        java.lang.String $r1, $r2, $r14, $r20, $r26, $r33, $r41, r43;
        bsh.EvalError $r15;
        java.io.IOException $r9;
        java.io.InputStreamReader $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        bsh.Interpreter $r5, $r49;
        java.io.FileNotFoundException $r28;
        bsh.Interpreter$1 $r3;
        bsh.CommandLineReader $r47;
        java.lang.String[] r0, r44;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.io.PrintStream $r11, $r17, $r23, $r27, $r30, $r36, $r50, $r51;
        java.lang.Object $r7;
        java.lang.Class $r8;
        java.io.InputStream $r4, r46;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label14;

        r43 = r0[0];

        $i1 = lengthof r0;

        if $i1 <= 1 goto label01;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        r44 = newarray (java.lang.String)[$i3];

        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 1, r44, 0, $i5);

        goto label02;

     label01:
        r44 = newarray (java.lang.String)[0];

     label02:
        $r5 = new bsh.Interpreter;

        specialinvoke $r5.<bsh.Interpreter: void <init>()>();

        virtualinvoke $r5.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("bsh.args", r44);

     label03:
        $r6 = $r5.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r7 = virtualinvoke $r5.<bsh.Interpreter: java.lang.Object source(java.lang.String,bsh.NameSpace)>(r43, $r6);

        $z2 = $r7 instanceof java.lang.Class;

        if $z2 == 0 goto label08;

     label04:
        $r8 = (java.lang.Class) $r7;

        staticinvoke <bsh.Interpreter: void invokeMain(java.lang.Class,java.lang.String[])>($r8, r44);

     label05:
        goto label08;

     label06:
        $r34 := @caughtexception;

        r45 = $r34;

        $z5 = $r34 instanceof java.lang.reflect.InvocationTargetException;

        if $z5 == 0 goto label07;

        $r42 = (java.lang.reflect.InvocationTargetException) $r34;

        r45 = virtualinvoke $r42.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label07:
        $r36 = <java.lang.System: java.io.PrintStream err>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" main method threw exception:");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r45);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>($r41);

        goto label08;

     label08:
        goto label17;

     label09:
        $r28 := @caughtexception;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File not found: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r33);

        goto label17;

     label10:
        $r21 := @caughtexception;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Script threw exception: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

        $z3 = virtualinvoke $r21.<bsh.TargetError: boolean inNativeCode()>();

        if $z3 == 0 goto label11;

        $z4 = <bsh.Interpreter: boolean DEBUG>;

        $r27 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<bsh.TargetError: void printStackTrace(boolean,java.io.PrintStream)>($z4, $r27);

     label11:
        goto label17;

     label12:
        $r15 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Evaluation Error: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);

        goto label17;

     label13:
        $r9 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I/O Error: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label17;

     label14:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        if $z0 == 0 goto label15;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("1.1.");

        if $z1 == 0 goto label15;

        $r3 = new bsh.Interpreter$1;

        $r4 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r3.<bsh.Interpreter$1: void <init>(java.io.InputStream)>($r4);

        r46 = $r3;

        goto label16;

     label15:
        r46 = <java.lang.System: java.io.InputStream in>;

     label16:
        $r47 = new bsh.CommandLineReader;

        $r48 = new java.io.InputStreamReader;

        specialinvoke $r48.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r46);

        specialinvoke $r47.<bsh.CommandLineReader: void <init>(java.io.Reader)>($r48);

        $r49 = new bsh.Interpreter;

        $r50 = <java.lang.System: java.io.PrintStream out>;

        $r51 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r49.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean)>($r47, $r50, $r51, 1);

        virtualinvoke $r49.<bsh.Interpreter: void run()>();

     label17:
        return;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.io.FileNotFoundException from label03 to label08 with label09;
        catch bsh.TargetError from label03 to label08 with label10;
        catch bsh.EvalError from label03 to label08 with label12;
        catch java.io.IOException from label03 to label08 with label13;
    }

    public static void invokeMain(java.lang.Class, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Object[] $r4;
        java.lang.Class[] $r1;
        java.lang.Class r0, $r2, $r6;
        java.lang.String[] r5;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String[];

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <bsh.Interpreter: java.lang.Class array$Ljava$lang$String>;

        if $r2 != null goto label1;

        $r6 = staticinvoke <bsh.Interpreter: java.lang.Class class$(java.lang.String)>("[Ljava.lang.String;");

        <bsh.Interpreter: java.lang.Class array$Ljava$lang$String> = $r6;

        goto label2;

     label1:
        $r6 = <bsh.Interpreter: java.lang.Class array$Ljava$lang$String>;

     label2:
        $r1[0] = $r6;

        $r3 = staticinvoke <bsh.Reflect: java.lang.reflect.Method resolveJavaMethod(bsh.BshClassManager,java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(null, r0, "main", $r1, 1);

        if $r3 == null goto label3;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label3:
        return;
    }

    public void run()
    {
        bsh.Parser $r31, $r78;
        bsh.TargetError $r54;
        java.io.Reader $r30, $r77;
        java.lang.Exception $r34;
        bsh.InterpreterError $r15, $r63;
        bsh.TokenMgrError $r25;
        java.lang.Throwable $r22, $r59;
        bsh.NameSpace $r4, $r24, $r33, $r40, $r48, $r61, $r70, $r80, $r83;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r26, $r27, $r28, $r35, $r36, $r37, $r42, $r43, $r45, $r49, $r50, $r52, $r55, $r56, $r57, $r64, $r65, $r67, $r72, $r73, $r75;
        java.lang.String $r13, $r19, $r20, $r29, $r38, $r44, $r46, $r51, $r53, $r58, $r66, $r68, $r74, $r76;
        bsh.EvalError $r41, $r81;
        java.lang.RuntimeException $r21;
        bsh.ReturnControl $r14;
        bsh.SimpleNode r84;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z21;
        bsh.Interpreter r0;
        bsh.JJTParserState $r3, $r5, $r23, $r32, $r39, $r47, $r60, $r69, $r79, $r86;
        bsh.Node $r6;
        bsh.CallStack $r82;
        bsh.ParseException $r71;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.io.PrintStream $r1, $r2, $r62;
        bsh.Primitive $r8;
        java.lang.Object $r7, r85;

        r0 := @this: bsh.Interpreter;

        $z0 = r0.<bsh.Interpreter: boolean evalOnly>;

        if $z0 == 0 goto label01;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>("bsh Interpreter: No stream");

        throw $r21;

     label01:
        $z1 = r0.<bsh.Interpreter: boolean interactive>;

        if $z1 == 0 goto label05;

     label02:
        virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.lang.String)>("printBanner();");

     label03:
        goto label05;

     label04:
        $r81 := @caughtexception;

        virtualinvoke r0.<bsh.Interpreter: void println(java.lang.Object)>("BeanShell 2.0b4 - by Pat Niemeyer (pat@pat.net)");

        goto label05;

     label05:
        $r82 = new bsh.CallStack;

        $r83 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        specialinvoke $r82.<bsh.CallStack: void <init>(bsh.NameSpace)>($r83);

        z21 = 0;

        goto label35;

     label06:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

        staticinvoke <java.lang.Thread: void yield()>();

        $z2 = r0.<bsh.Interpreter: boolean interactive>;

        if $z2 == 0 goto label07;

        $r20 = specialinvoke r0.<bsh.Interpreter: java.lang.String getBshPrompt()>();

        virtualinvoke r0.<bsh.Interpreter: void print(java.lang.Object)>($r20);

     label07:
        z21 = specialinvoke r0.<bsh.Interpreter: boolean Line()>();

        $r3 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        $i0 = virtualinvoke $r3.<bsh.JJTParserState: int nodeArity()>();

        if $i0 <= 0 goto label11;

        $r5 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        $r6 = virtualinvoke $r5.<bsh.JJTParserState: bsh.Node rootNode()>();

        r84 = (bsh.SimpleNode) $r6;

        $z3 = <bsh.Interpreter: boolean DEBUG>;

        if $z3 == 0 goto label08;

        virtualinvoke r84.<bsh.SimpleNode: void dump(java.lang.String)>(">");

     label08:
        $r7 = virtualinvoke r84.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r82, r0);

        r85 = $r7;

        $i1 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i1 <= 1 goto label09;

        $r15 = new bsh.InterpreterError;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Callstack growing: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r82);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<bsh.InterpreterError: void <init>(java.lang.String)>($r19);

        throw $r15;

     label09:
        $z4 = $r7 instanceof bsh.ReturnControl;

        if $z4 == 0 goto label10;

        $r14 = (bsh.ReturnControl) $r7;

        r85 = $r14.<bsh.ReturnControl: java.lang.Object value>;

     label10:
        $r8 = <bsh.Primitive: bsh.Primitive VOID>;

        if r85 == $r8 goto label11;

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("$_", r85);

        $z5 = r0.<bsh.Interpreter: boolean showResults>;

        if $z5 == 0 goto label11;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r85);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void println(java.lang.Object)>($r13);

     label11:
        $r86 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r86.<bsh.JJTParserState: void reset()>();

        $i9 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i9 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r4 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r4);

        goto label35;

     label12:
        $r71 := @caughtexception;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parser Error: ");

        $z18 = <bsh.Interpreter: boolean DEBUG>;

        $r74 = virtualinvoke $r71.<bsh.ParseException: java.lang.String getMessage(boolean)>($z18);

        $r75 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r76);

        $z19 = <bsh.Interpreter: boolean DEBUG>;

        if $z19 == 0 goto label13;

        virtualinvoke $r71.<bsh.ParseException: void printStackTrace()>();

     label13:
        $z20 = r0.<bsh.Interpreter: boolean interactive>;

        if $z20 != 0 goto label14;

        z21 = 1;

     label14:
        $r78 = r0.<bsh.Interpreter: bsh.Parser parser>;

        $r77 = r0.<bsh.Interpreter: java.io.Reader in>;

        virtualinvoke $r78.<bsh.Parser: void reInitInput(java.io.Reader)>($r77);

     label15:
        $r79 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r79.<bsh.JJTParserState: void reset()>();

        $i8 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i8 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r80 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r80);

        goto label35;

     label16:
        $r63 := @caughtexception;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal Error: ");

        $r66 = virtualinvoke $r63.<bsh.InterpreterError: java.lang.String getMessage()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r68);

        virtualinvoke $r63.<bsh.InterpreterError: void printStackTrace()>();

        $z17 = r0.<bsh.Interpreter: boolean interactive>;

        if $z17 != 0 goto label17;

        z21 = 1;

     label17:
        $r69 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r69.<bsh.JJTParserState: void reset()>();

        $i7 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i7 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r70 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r70);

        goto label35;

     label18:
        $r54 := @caughtexception;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// Uncaught Exception: ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r54);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r58);

        $z14 = virtualinvoke $r54.<bsh.TargetError: boolean inNativeCode()>();

        if $z14 == 0 goto label19;

        $z16 = <bsh.Interpreter: boolean DEBUG>;

        $r62 = r0.<bsh.Interpreter: java.io.PrintStream err>;

        virtualinvoke $r54.<bsh.TargetError: void printStackTrace(boolean,java.io.PrintStream)>($z16, $r62);

     label19:
        $z15 = r0.<bsh.Interpreter: boolean interactive>;

        if $z15 != 0 goto label20;

        z21 = 1;

     label20:
        $r59 = virtualinvoke $r54.<bsh.TargetError: java.lang.Throwable getTarget()>();

        virtualinvoke r0.<bsh.Interpreter: void setu(java.lang.String,java.lang.Object)>("$_e", $r59);

     label21:
        $r60 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r60.<bsh.JJTParserState: void reset()>();

        $i6 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i6 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r61 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r61);

        goto label35;

     label22:
        $r41 := @caughtexception;

        $z11 = r0.<bsh.Interpreter: boolean interactive>;

        if $z11 == 0 goto label23;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EvalError: ");

        $r51 = virtualinvoke $r41.<bsh.EvalError: java.lang.String toString()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r53);

        goto label24;

     label23:
        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EvalError: ");

        $r44 = virtualinvoke $r41.<bsh.EvalError: java.lang.String getMessage()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r46);

     label24:
        $z12 = <bsh.Interpreter: boolean DEBUG>;

        if $z12 == 0 goto label25;

        virtualinvoke $r41.<bsh.EvalError: void printStackTrace()>();

     label25:
        $z13 = r0.<bsh.Interpreter: boolean interactive>;

        if $z13 != 0 goto label26;

        z21 = 1;

     label26:
        $r47 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r47.<bsh.JJTParserState: void reset()>();

        $i5 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i5 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r48 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r48);

        goto label35;

     label27:
        $r34 := @caughtexception;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown error: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r34);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r38);

        $z9 = <bsh.Interpreter: boolean DEBUG>;

        if $z9 == 0 goto label28;

        virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>();

     label28:
        $z10 = r0.<bsh.Interpreter: boolean interactive>;

        if $z10 != 0 goto label29;

        z21 = 1;

     label29:
        $r39 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r39.<bsh.JJTParserState: void reset()>();

        $i4 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i4 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r40 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r40);

        goto label35;

     label30:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error parsing input: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void error(java.lang.Object)>($r29);

        $r31 = r0.<bsh.Interpreter: bsh.Parser parser>;

        $r30 = r0.<bsh.Interpreter: java.io.Reader in>;

        virtualinvoke $r31.<bsh.Parser: void reInitTokenInput(java.io.Reader)>($r30);

        $z8 = r0.<bsh.Interpreter: boolean interactive>;

        if $z8 != 0 goto label31;

        z21 = 1;

     label31:
        $r32 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r32.<bsh.JJTParserState: void reset()>();

        $i3 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i3 <= 1 goto label35;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r33 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r33);

        goto label35;

     label32:
        $r22 := @caughtexception;

     label33:
        $r23 = specialinvoke r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r23.<bsh.JJTParserState: void reset()>();

        $i2 = virtualinvoke $r82.<bsh.CallStack: int depth()>();

        if $i2 <= 1 goto label34;

        virtualinvoke $r82.<bsh.CallStack: void clear()>();

        $r24 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r82.<bsh.CallStack: void push(bsh.NameSpace)>($r24);

     label34:
        throw $r22;

     label35:
        if z21 == 0 goto label06;

        $z6 = r0.<bsh.Interpreter: boolean interactive>;

        if $z6 == 0 goto label36;

        $z7 = r0.<bsh.Interpreter: boolean exitOnEOF>;

        if $z7 == 0 goto label36;

        staticinvoke <java.lang.System: void exit(int)>(0);

     label36:
        return;

        catch bsh.EvalError from label02 to label03 with label04;
        catch bsh.ParseException from label06 to label11 with label12;
        catch bsh.InterpreterError from label06 to label11 with label16;
        catch bsh.TargetError from label06 to label11 with label18;
        catch bsh.EvalError from label06 to label11 with label22;
        catch java.lang.Exception from label06 to label11 with label27;
        catch bsh.TokenMgrError from label06 to label11 with label30;
        catch java.lang.Throwable from label06 to label11 with label32;
        catch java.lang.Throwable from label12 to label15 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label18 to label21 with label32;
        catch java.lang.Throwable from label22 to label26 with label32;
        catch java.lang.Throwable from label27 to label29 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    public java.lang.Object source(java.lang.String, bsh.NameSpace) throws java.io.FileNotFoundException, java.io.IOException, bsh.EvalError
    {
        java.lang.Throwable $r11;
        bsh.Interpreter r0;
        bsh.NameSpace r5;
        java.io.File $r2;
        java.lang.StringBuffer $r7, $r8, $r9;
        java.lang.Object $r6;
        java.lang.String r1, $r10;
        java.io.BufferedReader $r3;
        java.io.FileReader $r4;
        boolean $z0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: bsh.NameSpace;

        $r2 = virtualinvoke r0.<bsh.Interpreter: java.io.File pathToFile(java.lang.String)>(r1);

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourcing file: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r10);

     label1:
        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>($r2);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label2:
        $r6 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)>($r3, r5, r1);

        goto label6;

     label3:
        return $r6;

     label4:
        $r11 := @caughtexception;

        goto label7;

     label5:
        throw $r11;

     label6:
        virtualinvoke $r3.<java.io.Reader: void close()>();

        goto label3;

     label7:
        virtualinvoke $r3.<java.io.Reader: void close()>();

        goto label5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object source(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException, bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.NameSpace $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r3 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object source(java.lang.String,bsh.NameSpace)>(r1, $r2);

        return $r3;
    }

    public java.lang.Object eval(java.io.Reader, bsh.NameSpace, java.lang.String) throws bsh.EvalError
    {
        bsh.TargetError $r61;
        java.io.Reader r1;
        java.lang.Exception $r45;
        bsh.InterpreterError $r20, $r68;
        bsh.TokenMgrError $r36;
        java.lang.Throwable $r34;
        bsh.NameSpace r3;
        java.lang.StringBuffer $r13, $r14, $r15, $r16, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r31, $r32, $r38, $r39, $r40, $r41, $r43, $r47, $r48, $r49, $r50, $r52, $r56, $r57, $r58, $r63, $r64, $r65, $r70, $r71, $r72, $r73, $r75;
        java.lang.String r4, $r17, $r24, $r27, $r29, $r33, $r42, $r44, $r51, $r53, $r59, $r66, $r74, $r76, $r78;
        bsh.EvalError $r37, $r46, $r54, $r69;
        bsh.ReturnControl $r18;
        bsh.SimpleNode $r55, $r62, r80;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        bsh.Interpreter $r0, r2;
        bsh.JJTParserState $r8, $r9, $r19, $r35, $r60, $r67, $r81;
        bsh.Node $r10;
        bsh.CallStack $r7;
        bsh.ParseException $r77;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.PrintStream $r5, $r6;
        bsh.Primitive $r12;
        java.lang.Object $r11, r79, $r82;

        r2 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.Reader;

        r3 := @parameter1: bsh.NameSpace;

        r4 := @parameter2: java.lang.String;

        r79 = null;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("eval: nameSpace = ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r33);

     label01:
        $r0 = new bsh.Interpreter;

        $r6 = r2.<bsh.Interpreter: java.io.PrintStream out>;

        $r5 = r2.<bsh.Interpreter: java.io.PrintStream err>;

        specialinvoke $r0.<bsh.Interpreter: void <init>(java.io.Reader,java.io.PrintStream,java.io.PrintStream,boolean,bsh.NameSpace,bsh.Interpreter,java.lang.String)>(r1, $r6, $r5, 0, r3, r2, r4);

        $r7 = new bsh.CallStack;

        specialinvoke $r7.<bsh.CallStack: void <init>(bsh.NameSpace)>(r3);

        z8 = 0;

        goto label25;

     label02:
        r80 = null;

     label03:
        z8 = specialinvoke $r0.<bsh.Interpreter: boolean Line()>();

        $r8 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        $i0 = virtualinvoke $r8.<bsh.JJTParserState: int nodeArity()>();

        if $i0 <= 0 goto label08;

        $r9 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        $r10 = virtualinvoke $r9.<bsh.JJTParserState: bsh.Node rootNode()>();

        r80 = (bsh.SimpleNode) $r10;

        virtualinvoke r80.<bsh.SimpleNode: void setSourceFile(java.lang.String)>(r4);

        $z1 = <bsh.Interpreter: boolean TRACE>;

        if $z1 == 0 goto label04;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// ");

        $r27 = virtualinvoke r80.<bsh.SimpleNode: java.lang.String getText()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<bsh.Interpreter: void println(java.lang.Object)>($r29);

     label04:
        $r11 = virtualinvoke r80.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>($r7, $r0);

        r79 = $r11;

        $i1 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i1 <= 1 goto label05;

        $r20 = new bsh.InterpreterError;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Callstack growing: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<bsh.InterpreterError: void <init>(java.lang.String)>($r24);

        throw $r20;

     label05:
        $z2 = $r11 instanceof bsh.ReturnControl;

        if $z2 == 0 goto label07;

        $r18 = (bsh.ReturnControl) $r11;

        r79 = $r18.<bsh.ReturnControl: java.lang.Object value>;

     label06:
        $r19 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r19.<bsh.JJTParserState: void reset()>();

        $i2 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i2 <= 1 goto label26;

        virtualinvoke $r7.<bsh.CallStack: void clear()>();

        virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3);

        goto label26;

     label07:
        $z3 = $r0.<bsh.Interpreter: boolean showResults>;

        if $z3 == 0 goto label08;

        $r12 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r11 == $r12 goto label08;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<bsh.Interpreter: void println(java.lang.Object)>($r17);

     label08:
        $r81 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r81.<bsh.JJTParserState: void reset()>();

        $i6 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i6 <= 1 goto label25;

        virtualinvoke $r7.<bsh.CallStack: void clear()>();

        virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3);

        goto label25;

     label09:
        $r77 := @caughtexception;

        $z6 = <bsh.Interpreter: boolean DEBUG>;

        if $z6 == 0 goto label10;

        $z7 = <bsh.Interpreter: boolean DEBUG>;

        $r78 = virtualinvoke $r77.<bsh.ParseException: java.lang.String getMessage(boolean)>($z7);

        virtualinvoke r2.<bsh.Interpreter: void error(java.lang.Object)>($r78);

     label10:
        virtualinvoke $r77.<bsh.ParseException: void setErrorSourceFile(java.lang.String)>(r4);

        throw $r77;

     label11:
        $r68 := @caughtexception;

        virtualinvoke $r68.<bsh.InterpreterError: void printStackTrace()>();

        $r69 = new bsh.EvalError;

        $r70 = new java.lang.StringBuffer;

        specialinvoke $r70.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourced file: ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" internal Error: ");

        $r74 = virtualinvoke $r68.<bsh.InterpreterError: java.lang.String getMessage()>();

        $r75 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r69.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r76, r80, $r7);

        throw $r69;

     label12:
        $r61 := @caughtexception;

        $r62 = virtualinvoke $r61.<bsh.TargetError: bsh.SimpleNode getNode()>();

        if $r62 != null goto label13;

        virtualinvoke $r61.<bsh.TargetError: void setNode(bsh.SimpleNode)>(r80);

     label13:
        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourced file: ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r61.<bsh.TargetError: void reThrow(java.lang.String)>($r66);

     label14:
        $r67 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r67.<bsh.JJTParserState: void reset()>();

        $i5 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i5 <= 1 goto label25;

        virtualinvoke $r7.<bsh.CallStack: void clear()>();

        virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3);

        goto label25;

     label15:
        $r54 := @caughtexception;

        $z5 = <bsh.Interpreter: boolean DEBUG>;

        if $z5 == 0 goto label16;

        virtualinvoke $r54.<bsh.EvalError: void printStackTrace()>();

     label16:
        $r55 = virtualinvoke $r54.<bsh.EvalError: bsh.SimpleNode getNode()>();

        if $r55 != null goto label17;

        virtualinvoke $r54.<bsh.EvalError: void setNode(bsh.SimpleNode)>(r80);

     label17:
        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourced file: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<bsh.EvalError: void reThrow(java.lang.String)>($r59);

     label18:
        $r60 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r60.<bsh.JJTParserState: void reset()>();

        $i4 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i4 <= 1 goto label25;

        virtualinvoke $r7.<bsh.CallStack: void clear()>();

        virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3);

        goto label25;

     label19:
        $r45 := @caughtexception;

        $z4 = <bsh.Interpreter: boolean DEBUG>;

        if $z4 == 0 goto label20;

        virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>();

     label20:
        $r46 = new bsh.EvalError;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourced file: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" unknown error: ");

        $r51 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r46.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r53, r80, $r7);

        throw $r46;

     label21:
        $r36 := @caughtexception;

        $r37 = new bsh.EvalError;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sourced file: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Token Parsing Error: ");

        $r42 = virtualinvoke $r36.<bsh.TokenMgrError: java.lang.String getMessage()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r37.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r44, r80, $r7);

        throw $r37;

     label22:
        $r34 := @caughtexception;

     label23:
        $r35 = specialinvoke $r0.<bsh.Interpreter: bsh.JJTParserState get_jjtree()>();

        virtualinvoke $r35.<bsh.JJTParserState: void reset()>();

        $i3 = virtualinvoke $r7.<bsh.CallStack: int depth()>();

        if $i3 <= 1 goto label24;

        virtualinvoke $r7.<bsh.CallStack: void clear()>();

        virtualinvoke $r7.<bsh.CallStack: void push(bsh.NameSpace)>(r3);

     label24:
        throw $r34;

     label25:
        if z8 == 0 goto label02;

     label26:
        $r82 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>(r79);

        return $r82;

        catch bsh.ParseException from label03 to label06 with label09;
        catch bsh.ParseException from label07 to label08 with label09;
        catch bsh.InterpreterError from label03 to label06 with label11;
        catch bsh.InterpreterError from label07 to label08 with label11;
        catch bsh.TargetError from label03 to label06 with label12;
        catch bsh.TargetError from label07 to label08 with label12;
        catch bsh.EvalError from label03 to label06 with label15;
        catch bsh.EvalError from label07 to label08 with label15;
        catch java.lang.Exception from label03 to label06 with label19;
        catch java.lang.Exception from label07 to label08 with label19;
        catch bsh.TokenMgrError from label03 to label06 with label21;
        catch bsh.TokenMgrError from label07 to label08 with label21;
        catch java.lang.Throwable from label03 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label14 with label22;
        catch java.lang.Throwable from label15 to label18 with label22;
        catch java.lang.Throwable from label19 to label23 with label22;
    }

    public java.lang.Object eval(java.io.Reader) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.NameSpace $r2;
        java.lang.Object $r3;
        java.io.Reader r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.Reader;

        $r2 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r3 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)>(r1, $r2, "eval stream");

        return $r3;
    }

    public java.lang.Object eval(java.lang.String) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.NameSpace $r2;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String r1, $r7;
        boolean $z0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("eval(String): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r7);

     label1:
        $r2 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r3 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.lang.String,bsh.NameSpace)>(r1, $r2);

        return $r3;
    }

    public java.lang.Object eval(java.lang.String, bsh.NameSpace) throws bsh.EvalError
    {
        bsh.NameSpace r6;
        java.lang.StringBuffer $r1, $r2, $r3, $r7, $r8, $r10, $r11;
        java.lang.String r0, $r9, $r12, $r14;
        boolean $z0;
        bsh.Interpreter r4;
        java.io.StringReader $r5;
        java.lang.Object $r13;

        r4 := @this: bsh.Interpreter;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: bsh.NameSpace;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z0 == 0 goto label1;

        $r14 = r0;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r14 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r14);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("inline evaluation of: ``");

        $r9 = specialinvoke r4.<bsh.Interpreter: java.lang.String showEvalString(java.lang.String)>($r14);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = virtualinvoke r4.<bsh.Interpreter: java.lang.Object eval(java.io.Reader,bsh.NameSpace,java.lang.String)>($r5, r6, $r12);

        return $r13;
    }

    private java.lang.String showEvalString(java.lang.String)
    {
        bsh.Interpreter r6;
        java.lang.StringBuffer $r2, $r4, $r5;
        int $i0;
        java.lang.String $r0, $r1, $r3, r7, r8;

        r6 := @this: bsh.Interpreter;

        r7 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r7.<java.lang.String: java.lang.String replace(char,char)>(10, 32);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(13, 32);

        r8 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 80 goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 80);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" . . . ");

        r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r8;
    }

    public final void error(java.lang.Object)
    {
        java.io.PrintStream $r3, $r8;
        bsh.Interpreter r0;
        java.lang.StringBuffer $r2, $r4, $r6, $r9, $r11, $r12, $r13;
        bsh.ConsoleInterface $r1, $r10;
        java.lang.Object r5;
        java.lang.String $r7, $r14;

        r0 := @this: bsh.Interpreter;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<bsh.Interpreter: bsh.ConsoleInterface console>;

        if $r1 == null goto label1;

        $r10 = r0.<bsh.Interpreter: bsh.ConsoleInterface console>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// Error: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<bsh.ConsoleInterface: void error(java.lang.Object)>($r14);

        goto label2;

     label1:
        $r3 = r0.<bsh.Interpreter: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// Error: ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = r0.<bsh.Interpreter: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void flush()>();

     label2:
        return;
    }

    public java.io.Reader getIn()
    {
        bsh.Interpreter r0;
        java.io.Reader $r1;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: java.io.Reader in>;

        return $r1;
    }

    public java.io.PrintStream getOut()
    {
        java.io.PrintStream $r1;
        bsh.Interpreter r0;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: java.io.PrintStream out>;

        return $r1;
    }

    public java.io.PrintStream getErr()
    {
        java.io.PrintStream $r1;
        bsh.Interpreter r0;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: java.io.PrintStream err>;

        return $r1;
    }

    public final void println(java.lang.Object)
    {
        bsh.Interpreter r0;
        java.lang.StringBuffer $r1, $r4, $r6;
        java.lang.Object r2;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: bsh.Interpreter;

        r2 := @parameter0: java.lang.Object;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = <bsh.Interpreter: java.lang.String systemLineSeparator>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<bsh.Interpreter: void print(java.lang.Object)>($r7);

        return;
    }

    public final void print(java.lang.Object)
    {
        java.io.PrintStream $r3, $r4;
        bsh.Interpreter r0;
        bsh.ConsoleInterface $r1, $r5;
        java.lang.Object r2;

        r0 := @this: bsh.Interpreter;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<bsh.Interpreter: bsh.ConsoleInterface console>;

        if $r1 == null goto label1;

        $r5 = r0.<bsh.Interpreter: bsh.ConsoleInterface console>;

        interfaceinvoke $r5.<bsh.ConsoleInterface: void print(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = r0.<bsh.Interpreter: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.Object)>(r2);

        $r4 = r0.<bsh.Interpreter: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void flush()>();

     label2:
        return;
    }

    public static final void debug(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = <bsh.Interpreter: java.io.PrintStream debug>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// Debug: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        return;
    }

    public java.lang.Object get(java.lang.String) throws bsh.EvalError
    {
        bsh.EvalError $r8;
        bsh.Interpreter r0;
        bsh.NameSpace $r2;
        bsh.UtilEvalError $r5;
        bsh.SimpleNode $r7;
        bsh.CallStack $r6;
        java.lang.Object $r3, $r4;
        java.lang.String r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r3 = virtualinvoke $r2.<bsh.NameSpace: java.lang.Object get(java.lang.String,bsh.Interpreter)>(r1, r0);

        $r4 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

        $r6 = new bsh.CallStack;

        specialinvoke $r6.<bsh.CallStack: void <init>()>();

        $r8 = virtualinvoke $r5.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>($r7, $r6);

        throw $r8;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    java.lang.Object getu(java.lang.String)
    {
        bsh.EvalError $r3;
        bsh.Interpreter r0;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Object $r2;
        java.lang.String r1, $r8;
        bsh.InterpreterError $r4;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object get(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new bsh.InterpreterError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>($r8);

        throw $r4;

        catch bsh.EvalError from label1 to label2 with label3;
    }

    public void set(java.lang.String, java.lang.Object) throws bsh.EvalError
    {
        bsh.EvalError $r9;
        bsh.Interpreter r2;
        bsh.Name $r5;
        bsh.NameSpace $r3, $r4;
        bsh.UtilEvalError $r7;
        bsh.SimpleNode $r8;
        bsh.CallStack $r0;
        bsh.LHS $r6;
        java.lang.Object r10;
        java.lang.String r1;
        boolean $z0;

        r2 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.Object;

        if r10 != null goto label1;

        r10 = <bsh.Primitive: bsh.Primitive NULL>;

     label1:
        $r0 = new bsh.CallStack;

        specialinvoke $r0.<bsh.CallStack: void <init>()>();

     label2:
        $z0 = staticinvoke <bsh.Name: boolean isCompound(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        $r4 = r2.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r5 = virtualinvoke $r4.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>($r0, r2);

        virtualinvoke $r6.<bsh.LHS: java.lang.Object assign(java.lang.Object,boolean)>(r10, 0);

        goto label4;

     label3:
        $r3 = r2.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke $r3.<bsh.NameSpace: void setVariable(java.lang.String,java.lang.Object,boolean)>(r1, r10, 0);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

        $r9 = virtualinvoke $r7.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>($r8, $r0);

        throw $r9;

     label6:
        return;

        catch bsh.UtilEvalError from label2 to label4 with label5;
    }

    void setu(java.lang.String, java.lang.Object)
    {
        bsh.EvalError $r3;
        bsh.Interpreter r0;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Object r2;
        java.lang.String r1, $r8;
        bsh.InterpreterError $r4;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

     label1:
        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new bsh.InterpreterError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        return;

        catch bsh.EvalError from label1 to label2 with label3;
    }

    public void set(java.lang.String, long) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.Primitive $r2;
        long l0;
        java.lang.String r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(long)>(l0);

        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void set(java.lang.String, int) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.Primitive $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(int)>(i0);

        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void set(java.lang.String, double) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.Primitive $r2;
        java.lang.String r1;
        double d0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(double)>(d0);

        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void set(java.lang.String, float) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.Primitive $r2;
        float f0;
        java.lang.String r1;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(float)>(f0);

        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void set(java.lang.String, boolean) throws bsh.EvalError
    {
        bsh.Interpreter r0;
        bsh.Primitive $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(boolean)>(z0);

        virtualinvoke r0.<bsh.Interpreter: void set(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void unset(java.lang.String) throws bsh.EvalError
    {
        bsh.Name $r4;
        bsh.NameSpace $r3, $r6;
        bsh.UtilEvalError $r14;
        bsh.SimpleNode $r13, $r18;
        bsh.CallStack $r0, $r12, $r17;
        bsh.LHS $r5;
        java.lang.StringBuffer $r8, $r9, $r10;
        int $i0;
        java.lang.String r2, $r11, $r16;
        bsh.EvalError $r7, $r15;
        bsh.Interpreter r1;

        r1 := @this: bsh.Interpreter;

        r2 := @parameter0: java.lang.String;

        $r0 = new bsh.CallStack;

        specialinvoke $r0.<bsh.CallStack: void <init>()>();

     label1:
        $r3 = r1.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r4 = virtualinvoke $r3.<bsh.NameSpace: bsh.Name getNameResolver(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<bsh.Name: bsh.LHS toLHS(bsh.CallStack,bsh.Interpreter)>($r0, r1);

        $i0 = $r5.<bsh.LHS: int type>;

        if $i0 == 0 goto label2;

        $r7 = new bsh.EvalError;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t unset, not a variable: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

        $r12 = new bsh.CallStack;

        specialinvoke $r12.<bsh.CallStack: void <init>()>();

        specialinvoke $r7.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r11, $r13, $r12);

        throw $r7;

     label2:
        $r6 = $r5.<bsh.LHS: bsh.NameSpace nameSpace>;

        virtualinvoke $r6.<bsh.NameSpace: void unsetVariable(java.lang.String)>(r2);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = new bsh.EvalError;

        $r16 = virtualinvoke $r14.<bsh.UtilEvalError: java.lang.String getMessage()>();

        $r18 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

        $r17 = new bsh.CallStack;

        specialinvoke $r17.<bsh.CallStack: void <init>()>();

        specialinvoke $r15.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r16, $r18, $r17);

        throw $r15;

     label5:
        return;

        catch bsh.UtilEvalError from label1 to label3 with label4;
    }

    public java.lang.Object getInterface(java.lang.Class) throws bsh.EvalError
    {
        bsh.EvalError $r8;
        bsh.Interpreter r0;
        bsh.NameSpace $r1;
        bsh.UtilEvalError $r5;
        bsh.SimpleNode $r7;
        bsh.CallStack $r6;
        bsh.This $r2;
        java.lang.Class r3;
        java.lang.Object $r4;

        r0 := @this: bsh.Interpreter;

        r3 := @parameter0: java.lang.Class;

     label1:
        $r1 = r0.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        $r2 = virtualinvoke $r1.<bsh.NameSpace: bsh.This getThis(bsh.Interpreter)>(r0);

        $r4 = virtualinvoke $r2.<bsh.This: java.lang.Object getInterface(java.lang.Class)>(r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <bsh.SimpleNode: bsh.SimpleNode JAVACODE>;

        $r6 = new bsh.CallStack;

        specialinvoke $r6.<bsh.CallStack: void <init>()>();

        $r8 = virtualinvoke $r5.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>($r7, $r6);

        throw $r8;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    private bsh.JJTParserState get_jjtree()
    {
        bsh.Parser $r1;
        bsh.Interpreter r0;
        bsh.JJTParserState $r2;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: bsh.Parser parser>;

        $r2 = $r1.<bsh.Parser: bsh.JJTParserState jjtree>;

        return $r2;
    }

    private bsh.JavaCharStream get_jj_input_stream()
    {
        bsh.Parser $r1;
        bsh.Interpreter r0;
        bsh.JavaCharStream $r2;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: bsh.Parser parser>;

        $r2 = $r1.<bsh.Parser: bsh.JavaCharStream jj_input_stream>;

        return $r2;
    }

    private boolean Line() throws bsh.ParseException
    {
        bsh.Parser $r1;
        bsh.Interpreter r0;
        boolean $z0;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: bsh.Parser parser>;

        $z0 = virtualinvoke $r1.<bsh.Parser: boolean Line()>();

        return $z0;
    }

    void loadRCFiles()
    {
        bsh.Interpreter r7;
        bsh.NameSpace $r8;
        java.lang.Exception $r9;
        java.lang.StringBuffer $r0, $r2, $r4, $r5, $r10, $r11, $r12;
        java.lang.String $r1, $r3, $r6, $r13;
        boolean $z0;

        r7 := @this: bsh.Interpreter;

     label1:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = <java.io.File: java.lang.String separator>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".bshrc");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7.<bsh.Interpreter: bsh.NameSpace globalNameSpace>;

        virtualinvoke r7.<bsh.Interpreter: java.lang.Object source(java.lang.String,bsh.NameSpace)>($r6, $r8);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find rc file: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r13);

     label4:
        goto label5;

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.io.File pathToFile(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuffer $r8, $r9, $r11, $r12;
        java.lang.String r1, $r3, r6, $r10, $r13;
        boolean $z0;
        bsh.Interpreter r4;
        java.io.File $r0, $r2, $r7, r14;
        java.lang.Object $r5;

        r4 := @this: bsh.Interpreter;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        r14 = $r0;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r4.<bsh.Interpreter: java.lang.Object getu(java.lang.String)>("bsh.cwd");

        r6 = (java.lang.String) $r5;

        $r7 = new java.io.File;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r10 = <java.io.File: java.lang.String separator>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r13);

        r14 = $r7;

     label1:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r14.<java.io.File: java.lang.String getCanonicalPath()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        return $r2;
    }

    public static void redirectOutputToFile(java.lang.String)
    {
        java.io.PrintStream $r0, $r5;
        java.io.FileOutputStream $r1;
        java.io.IOException $r3;
        java.lang.StringBuffer $r4, $r6, $r7;
        java.lang.String r2, $r8;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.PrintStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1);

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r0);

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t redirect output to file: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        goto label4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        bsh.Interpreter r0;
        java.lang.ClassLoader r2;
        bsh.BshClassManager $r1;

        r0 := @this: bsh.Interpreter;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

        virtualinvoke $r1.<bsh.BshClassManager: void setClassLoader(java.lang.ClassLoader)>(r2);

        return;
    }

    public bsh.BshClassManager getClassManager()
    {
        bsh.Interpreter r0;
        bsh.BshClassManager $r2;
        bsh.NameSpace $r1;

        r0 := @this: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.Interpreter: bsh.NameSpace getNameSpace()>();

        $r2 = virtualinvoke $r1.<bsh.NameSpace: bsh.BshClassManager getClassManager()>();

        return $r2;
    }

    public void setStrictJava(boolean)
    {
        bsh.Interpreter r0;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        z0 := @parameter0: boolean;

        r0.<bsh.Interpreter: boolean strictJava> = z0;

        return;
    }

    public boolean getStrictJava()
    {
        bsh.Interpreter r0;
        boolean $z0;

        r0 := @this: bsh.Interpreter;

        $z0 = r0.<bsh.Interpreter: boolean strictJava>;

        return $z0;
    }

    static void staticInit()
    {
        java.lang.Throwable $r3;
        java.lang.StringBuffer $r4, $r6, $r7, $r10, $r12, $r13, $r16, $r18, $r19;
        java.lang.SecurityException $r15;
        java.lang.String $r0, $r2, $r8, $r14, $r20;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r1, $r5, $r11, $r17;
        java.lang.Exception $r9;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <bsh.Interpreter: java.lang.String systemLineSeparator> = $r0;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        <bsh.Interpreter: java.io.PrintStream debug> = $r1;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("debug");

        <bsh.Interpreter: boolean DEBUG> = $z0;

        $z1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("trace");

        <bsh.Interpreter: boolean TRACE> = $z1;

        $z2 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("localscoping");

        <bsh.Interpreter: boolean LOCALSCOPING> = $z2;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("outfile");

        if $r2 == null goto label2;

        staticinvoke <bsh.Interpreter: void redirectOutputToFile(java.lang.String)>($r2);

     label2:
        goto label6;

     label3:
        $r15 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not init static:");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);

        goto label6;

     label4:
        $r9 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not init static(2):");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label6;

     label5:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not init static(3):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        goto label6;

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.lang.String getSourceFileInfo()
    {
        bsh.Interpreter r0;
        java.lang.String $r1, $r2;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: java.lang.String sourceFileInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<bsh.Interpreter: java.lang.String sourceFileInfo>;

        return $r2;

     label1:
        return "<unknown source>";
    }

    public bsh.Interpreter getParent()
    {
        bsh.Interpreter r0, $r1;

        r0 := @this: bsh.Interpreter;

        $r1 = r0.<bsh.Interpreter: bsh.Interpreter parent>;

        return $r1;
    }

    public void setOut(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        bsh.Interpreter r0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.PrintStream;

        r0.<bsh.Interpreter: java.io.PrintStream out> = r1;

        return;
    }

    public void setErr(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        bsh.Interpreter r0;

        r0 := @this: bsh.Interpreter;

        r1 := @parameter0: java.io.PrintStream;

        r0.<bsh.Interpreter: java.io.PrintStream err> = r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.PrintStream $r3, $r4, $r6, $r8;
        bsh.Interpreter r1;
        java.io.ObjectInputStream r0;
        bsh.ConsoleInterface $r2, $r5, $r7;

        r1 := @this: bsh.Interpreter;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r1.<bsh.Interpreter: bsh.ConsoleInterface console>;

        if $r2 == null goto label1;

        $r5 = r1.<bsh.Interpreter: bsh.ConsoleInterface console>;

        $r6 = interfaceinvoke $r5.<bsh.ConsoleInterface: java.io.PrintStream getOut()>();

        virtualinvoke r1.<bsh.Interpreter: void setOut(java.io.PrintStream)>($r6);

        $r7 = r1.<bsh.Interpreter: bsh.ConsoleInterface console>;

        $r8 = interfaceinvoke $r7.<bsh.ConsoleInterface: java.io.PrintStream getErr()>();

        virtualinvoke r1.<bsh.Interpreter: void setErr(java.io.PrintStream)>($r8);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<bsh.Interpreter: void setOut(java.io.PrintStream)>($r3);

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r1.<bsh.Interpreter: void setErr(java.io.PrintStream)>($r4);

     label2:
        return;
    }

    private java.lang.String getBshPrompt()
    {
        bsh.Interpreter r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        java.lang.Exception $r3;

        r0 := @this: bsh.Interpreter;

     label1:
        $r1 = virtualinvoke r0.<bsh.Interpreter: java.lang.Object eval(java.lang.String)>("getBshPrompt()");

        $r2 = (java.lang.String) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return "bsh % ";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setExitOnEOF(boolean)
    {
        bsh.Interpreter r0;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        z0 := @parameter0: boolean;

        r0.<bsh.Interpreter: boolean exitOnEOF> = z0;

        return;
    }

    public void setShowResults(boolean)
    {
        bsh.Interpreter r0;
        boolean z0;

        r0 := @this: bsh.Interpreter;

        z0 := @parameter0: boolean;

        r0.<bsh.Interpreter: boolean showResults> = z0;

        return;
    }

    public boolean getShowResults()
    {
        bsh.Interpreter r0;
        boolean $z0;

        r0 := @this: bsh.Interpreter;

        $z0 = r0.<bsh.Interpreter: boolean showResults>;

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        <bsh.Interpreter: java.lang.String VERSION> = "2.0b4";

        <bsh.Interpreter: java.lang.String systemLineSeparator> = "\n";

        staticinvoke <bsh.Interpreter: void staticInit()>();

        return;
    }
}
