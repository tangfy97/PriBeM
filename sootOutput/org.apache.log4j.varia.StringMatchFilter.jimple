public class org.apache.log4j.varia.StringMatchFilter extends org.apache.log4j.spi.Filter
{
    public static final java.lang.String STRING_TO_MATCH_OPTION;
    public static final java.lang.String ACCEPT_ON_MATCH_OPTION;
    boolean acceptOnMatch;
    java.lang.String stringToMatch;

    public void <init>()
    {
        org.apache.log4j.varia.StringMatchFilter r0;

        r0 := @this: org.apache.log4j.varia.StringMatchFilter;

        specialinvoke r0.<org.apache.log4j.spi.Filter: void <init>()>();

        r0.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch> = 1;

        return;
    }

    public java.lang.String[] getOptionStrings()
    {
        org.apache.log4j.varia.StringMatchFilter r1;
        java.lang.String[] $r0;

        r1 := @this: org.apache.log4j.varia.StringMatchFilter;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "StringToMatch";

        $r0[1] = "AcceptOnMatch";

        return $r0;
    }

    public void setOption(java.lang.String, java.lang.String)
    {
        org.apache.log4j.varia.StringMatchFilter r1;
        java.lang.String r0, r2;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.log4j.varia.StringMatchFilter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("StringToMatch");

        if $z0 == 0 goto label1;

        r1.<org.apache.log4j.varia.StringMatchFilter: java.lang.String stringToMatch> = r2;

        goto label2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AcceptOnMatch");

        if $z1 == 0 goto label2;

        $z2 = r1.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch>;

        $z3 = staticinvoke <org.apache.log4j.helpers.OptionConverter: boolean toBoolean(java.lang.String,boolean)>(r2, $z2);

        r1.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch> = $z3;

     label2:
        return;
    }

    public void setStringToMatch(java.lang.String)
    {
        org.apache.log4j.varia.StringMatchFilter r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.varia.StringMatchFilter;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.varia.StringMatchFilter: java.lang.String stringToMatch> = r1;

        return;
    }

    public java.lang.String getStringToMatch()
    {
        org.apache.log4j.varia.StringMatchFilter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.varia.StringMatchFilter;

        $r1 = r0.<org.apache.log4j.varia.StringMatchFilter: java.lang.String stringToMatch>;

        return $r1;
    }

    public void setAcceptOnMatch(boolean)
    {
        org.apache.log4j.varia.StringMatchFilter r0;
        boolean z0;

        r0 := @this: org.apache.log4j.varia.StringMatchFilter;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch> = z0;

        return;
    }

    public boolean getAcceptOnMatch()
    {
        org.apache.log4j.varia.StringMatchFilter r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.varia.StringMatchFilter;

        $z0 = r0.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch>;

        return $z0;
    }

    public int decide(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.varia.StringMatchFilter r2;
        org.apache.log4j.spi.LoggingEvent r0;
        int $i0, $i2, $i4;
        java.lang.String $r1, $r3, $r4;
        boolean $z0;

        r2 := @this: org.apache.log4j.varia.StringMatchFilter;

        r0 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = virtualinvoke r0.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        if $r1 == null goto label1;

        $r3 = r2.<org.apache.log4j.varia.StringMatchFilter: java.lang.String stringToMatch>;

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r2.<org.apache.log4j.varia.StringMatchFilter: java.lang.String stringToMatch>;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>($r4);

        $i2 = (int) -1;

        if $i0 != $i2 goto label3;

        return 0;

     label3:
        $z0 = r2.<org.apache.log4j.varia.StringMatchFilter: boolean acceptOnMatch>;

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i4 = (int) -1;

        return $i4;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.varia.StringMatchFilter: java.lang.String ACCEPT_ON_MATCH_OPTION> = "AcceptOnMatch";

        <org.apache.log4j.varia.StringMatchFilter: java.lang.String STRING_TO_MATCH_OPTION> = "StringToMatch";

        return;
    }
}
