public class com.hp.hpl.jena.sparql.algebra.Algebra extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.Algebra r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.Algebra;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.Context)>(r0, null);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.util.Context r2;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        if r2 != null goto label1;

        r2 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

     label1:
        if r0 != null goto label2;

        return null;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.Optimize: com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.Context)>(r0, r2);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void <init>()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.query.Query)>(r0);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r0;
        com.hp.hpl.jena.sparql.algebra.AlgebraGenerator $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.algebra.AlgebraGenerator;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: void <init>()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.AlgebraGenerator: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.sparql.syntax.Element)>(r0);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op toQuadForm(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.AlgebraQuad: com.hp.hpl.jena.sparql.algebra.Op quadize(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op unionDefaultGraph(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TransformUnionQuery: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op read(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item readFile(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op parse(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op parse(java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.Item $r1;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op parse(com.hp.hpl.jena.sparql.sse.Item)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op parse(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.sse.Item parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op parse(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op parse(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.Item r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.Item)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Dataset r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.graph.Graph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createOneGraph(com.hp.hpl.jena.graph.Graph)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.engine.QueryEngineFactory $r2;
        com.hp.hpl.jena.sparql.engine.Plan $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.QueryEngineRegistry: com.hp.hpl.jena.sparql.engine.QueryEngineFactory findFactory(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, null);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.QueryEngineFactory: com.hp.hpl.jena.sparql.engine.Plan create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.Context)>(r0, r1, $r3, null);

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.Plan: com.hp.hpl.jena.sparql.engine.QueryIterator iterator()>();

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Dataset r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.query.Dataset;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.sparql.core.DatasetGraph asDatasetGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.graph.Graph getGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.graph.Graph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphFactory: com.hp.hpl.jena.sparql.core.DatasetGraph createOneGraph(com.hp.hpl.jena.graph.Graph)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator execRef(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef $r0;
        com.hp.hpl.jena.sparql.engine.Plan $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph r2;
        com.hp.hpl.jena.sparql.util.Context $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.Op r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r6;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r0 = new com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef;

        $r3 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.Context: com.hp.hpl.jena.sparql.util.Context copy()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.util.Context)>(r1, r2, $r4);

        $r5 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: com.hp.hpl.jena.sparql.engine.Plan getPlan()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.engine.Plan: com.hp.hpl.jena.sparql.engine.QueryIterator iterator()>();

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.engine.binding.Binding merge(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r1;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r2;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: boolean compatible(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r5);

        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r5);

        if $z2 != 0 goto label3;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r5, $r6);

     label3:
        goto label2;

     label4:
        return $r2;
    }

    public static boolean compatible(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.graph.Node $r4, $r6;
        com.hp.hpl.jena.sparql.core.Var r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r5;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Var) $r2;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r3);

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r3);

        if $r6 == null goto label2;

        $z1 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public static boolean disjoint(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r4;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.core.Var r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Var) $r2;

        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r3);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }
}
