public class org.springframework.aop.aspectj.'annotation'.AspectMetadata extends java.lang.Object
{
    private final org.aspectj.lang.reflect.AjType ajType;
    private final org.springframework.aop.Pointcut perClausePointcut;
    private java.lang.String aspectName;
    private static int[] $SWITCH_TABLE$org$aspectj$lang$reflect$PerClauseKind;

    public void <init>(java.lang.Class, java.lang.String)
    {
        org.springframework.aop.support.ComposablePointcut $r10;
        org.aspectj.lang.reflect.AjType $r3, $r4, $r7, r36;
        org.aspectj.lang.reflect.DeclarePrecedence[] $r5;
        int[] $r6;
        org.springframework.aop.aspectj.TypePatternClassFilter $r11;
        org.aspectj.lang.reflect.PerClause $r8, $r22;
        boolean $z0, $z1;
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.aspectj.lang.reflect.PerClauseKind $r9, $r23;
        java.lang.StringBuilder $r14, $r16, $r21, $r24, $r25, $r26, $r30, $r32, $r33;
        org.springframework.aop.Pointcut $r19;
        org.springframework.aop.framework.AopConfigException $r20;
        int $i0, $i1, $i2;
        java.lang.String r1, $r12, $r15, $r17, $r18, $r27, $r31, $r34;
        java.lang.IllegalArgumentException $r28, $r29;
        java.lang.Class r2, r35;
        org.springframework.aop.aspectj.AspectJExpressionPointcut $r13;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.String aspectName> = r1;

        r35 = r2;

        r36 = null;

        goto label03;

     label01:
        $r3 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>(r35);

        $z1 = interfaceinvoke $r3.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z1 == 0 goto label02;

        r36 = $r3;

        goto label04;

     label02:
        r35 = virtualinvoke r35.<java.lang.Class: java.lang.Class getSuperclass()>();

     label03:
        $z0 = virtualinvoke r35.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z0 == 0 goto label01;

     label04:
        if r36 != null goto label05;

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class \'");

        $r31 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not an @AspectJ aspect");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label05:
        r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType ajType> = r36;

        $r4 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType ajType>;

        $r5 = interfaceinvoke $r4.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.DeclarePrecedence[] getDeclarePrecedence()>();

        $i0 = lengthof $r5;

        if $i0 <= 0 goto label06;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DeclarePrecendence not presently supported in Spring AOP");

        throw $r28;

     label06:
        $r6 = staticinvoke <org.springframework.aop.aspectj.'annotation'.AspectMetadata: int[] $SWITCH_TABLE$org$aspectj$lang$reflect$PerClauseKind()>();

        $r7 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType ajType>;

        $r8 = interfaceinvoke $r7.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r9 = interfaceinvoke $r8.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $i1 = virtualinvoke $r9.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        $i2 = $r6[$i1];

        tableswitch($i2)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label08;
            case 4: goto label10;
            case 5: goto label10;
            case 6: goto label09;
            default: goto label10;
        };

     label07:
        $r19 = <org.springframework.aop.Pointcut: org.springframework.aop.Pointcut TRUE>;

        r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.springframework.aop.Pointcut perClausePointcut> = $r19;

        return;

     label08:
        $r13 = new org.springframework.aop.aspectj.AspectJExpressionPointcut;

        specialinvoke $r13.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void <init>()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("@Aspect annotation on ");

        $r15 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setLocation(java.lang.String)>($r17);

        $r18 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.String findPerClause(java.lang.Class)>(r2);

        virtualinvoke $r13.<org.springframework.aop.aspectj.AspectJExpressionPointcut: void setExpression(java.lang.String)>($r18);

        r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.springframework.aop.Pointcut perClausePointcut> = $r13;

        return;

     label09:
        $r10 = new org.springframework.aop.support.ComposablePointcut;

        $r11 = new org.springframework.aop.aspectj.TypePatternClassFilter;

        $r12 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.String findPerClause(java.lang.Class)>(r2);

        specialinvoke $r11.<org.springframework.aop.aspectj.TypePatternClassFilter: void <init>(java.lang.String)>($r12);

        specialinvoke $r10.<org.springframework.aop.support.ComposablePointcut: void <init>(org.springframework.aop.ClassFilter)>($r11);

        r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.springframework.aop.Pointcut perClausePointcut> = $r10;

        return;

     label10:
        $r20 = new org.springframework.aop.framework.AopConfigException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("PerClause ");

        $r22 = interfaceinvoke r36.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r23 = interfaceinvoke $r22.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported by Spring AOP for ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r27);

        throw $r20;
    }

    private java.lang.String findPerClause(java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r6;
        org.aspectj.lang.'annotation'.Aspect $r2;
        java.lang.'annotation'.Annotation $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Class r0;
        java.lang.String $r3, $r4, $r5;

        r6 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Aspect;");

        $r2 = (org.aspectj.lang.'annotation'.Aspect) $r1;

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.'annotation'.Aspect: java.lang.String value()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("(");

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        return $r5;
    }

    public org.aspectj.lang.reflect.AjType getAjType()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType ajType>;

        return $r1;
    }

    public java.lang.Class getAspectClass()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        java.lang.Class $r2;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType ajType>;

        $r2 = interfaceinvoke $r1.<org.aspectj.lang.reflect.AjType: java.lang.Class getJavaClass()>();

        return $r2;
    }

    public java.lang.String getAspectName()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: java.lang.String aspectName>;

        return $r1;
    }

    public org.springframework.aop.Pointcut getPerClausePointcut()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.springframework.aop.Pointcut $r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.springframework.aop.Pointcut perClausePointcut>;

        return $r1;
    }

    public boolean isPerThisOrPerTarget()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.aspectj.lang.reflect.AjType $r1;
        org.aspectj.lang.reflect.PerClauseKind $r3, $r4, $r5;
        org.aspectj.lang.reflect.PerClause $r2;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $r2 = interfaceinvoke $r1.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r4 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTARGET>;

        if $r3 == $r4 goto label1;

        $r5 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTHIS>;

        if $r3 == $r5 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean isPerTypeWithin()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        org.aspectj.lang.reflect.AjType $r1;
        org.aspectj.lang.reflect.PerClauseKind $r3, $r4;
        org.aspectj.lang.reflect.PerClause $r2;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $r1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $r2 = interfaceinvoke $r1.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r4 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTYPEWITHIN>;

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isLazilyInstantiated()
    {
        org.springframework.aop.aspectj.'annotation'.AspectMetadata r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        $z0 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: boolean isPerThisOrPerTarget()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: boolean isPerTypeWithin()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    static int[] $SWITCH_TABLE$org$aspectj$lang$reflect$PerClauseKind()
    {
        java.lang.NoSuchFieldError $r9, $r10, $r11, $r12, $r13, $r14;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.aspectj.lang.reflect.PerClauseKind $r3, $r4, $r5, $r6, $r7, $r8;
        org.aspectj.lang.reflect.PerClauseKind[] $r1;

        $r0 = <org.springframework.aop.aspectj.'annotation'.AspectMetadata: int[] $SWITCH_TABLE$org$aspectj$lang$reflect$PerClauseKind>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOW>;

        $i1 = virtualinvoke $r3.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i1] = 4;

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

     label05:
        $r4 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOWBELOW>;

        $i2 = virtualinvoke $r4.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i2] = 5;

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

     label08:
        $r5 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTARGET>;

        $i3 = virtualinvoke $r5.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        $r6 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTHIS>;

        $i4 = virtualinvoke $r6.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i4] = 2;

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        $r7 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTYPEWITHIN>;

        $i5 = virtualinvoke $r7.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i5] = 6;

     label15:
        goto label17;

     label16:
        $r10 := @caughtexception;

     label17:
        $r8 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind SINGLETON>;

        $i6 = virtualinvoke $r8.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        r2[$i6] = 1;

     label18:
        goto label20;

     label19:
        $r9 := @caughtexception;

     label20:
        <org.springframework.aop.aspectj.'annotation'.AspectMetadata: int[] $SWITCH_TABLE$org$aspectj$lang$reflect$PerClauseKind> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
    }
}
