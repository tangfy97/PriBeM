public class org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder extends java.lang.Object
{
    private final org.springframework.beans.factory.ListableBeanFactory beanFactory;
    private final org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory;
    private java.util.List aspectBeanNames;
    private final java.util.Map advisorsCache;
    private final java.util.Map aspectFactoryCache;

    public void <init>(org.springframework.beans.factory.ListableBeanFactory)
    {
        org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder r0;
        org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory $r2;
        org.springframework.beans.factory.ListableBeanFactory r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder;

        r1 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        $r2 = new org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory;

        specialinvoke $r2.<org.springframework.aop.aspectj.'annotation'.ReflectiveAspectJAdvisorFactory: void <init>()>();

        specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: void <init>(org.springframework.beans.factory.ListableBeanFactory,org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory)>(r1, $r2);

        return;
    }

    public void <init>(org.springframework.beans.factory.ListableBeanFactory, org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory)
    {
        org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder r0;
        java.util.HashMap $r1, $r2;
        org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory r4;
        org.springframework.beans.factory.ListableBeanFactory r3;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder;

        r3 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r4 := @parameter1: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map advisorsCache> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map aspectFactoryCache> = $r2;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "ListableBeanFactory must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r4, "AspectJAdvisorFactory must not be null");

        r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory> = r3;

        r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory> = r4;

        return;
    }

    public java.util.List buildAspectJAdvisors()
    {
        org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory r46;
        org.aspectj.lang.reflect.AjType $r19;
        org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectInstanceFactory $r34;
        java.util.Map $r4, $r6, $r26, $r39, $r40;
        org.aspectj.lang.reflect.PerClause $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.aop.aspectj.'annotation'.AspectMetadata $r18;
        org.aspectj.lang.reflect.PerClauseKind $r21, $r22;
        org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder r0;
        java.util.List $r9, $r10, $r28, $r37, r42, r45;
        org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory $r24;
        java.lang.StringBuilder $r30, $r31, $r32;
        org.springframework.beans.factory.ListableBeanFactory $r13, $r15, $r23, $r25, $r35, $r38;
        java.lang.Throwable $r41;
        org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory $r8, $r17, $r27, $r36;
        java.lang.String[] $r14;
        int i0, i1;
        java.lang.String $r33, r43, r44;
        java.util.LinkedList $r1, $r11, $r12;
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r29;
        java.lang.Object $r3, $r5, $r7;
        java.lang.Class $r16;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder;

        entermonitor r0;

     label01:
        r42 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.List aspectBeanNames>;

        if r42 != null goto label12;

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        $r13 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r14 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class,boolean,boolean)>($r13, class "Ljava/lang/Object;", 1, 0);

        i0 = lengthof $r14;

        i1 = 0;

        goto label10;

     label02:
        r43 = $r14[i1];

        $z1 = virtualinvoke r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: boolean isEligibleBean(java.lang.String)>(r43);

        if $z1 != 0 goto label03;

        goto label09;

     label03:
        $r15 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r16 = interfaceinvoke $r15.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Class getType(java.lang.String)>(r43);

        if $r16 != null goto label04;

        goto label09;

     label04:
        $r17 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory>;

        $z2 = interfaceinvoke $r17.<org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory: boolean isAspect(java.lang.Class)>($r16);

        if $z2 == 0 goto label09;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r43);

        $r18 = new org.springframework.aop.aspectj.'annotation'.AspectMetadata;

        specialinvoke $r18.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: void <init>(java.lang.Class,java.lang.String)>($r16, r43);

        $r19 = virtualinvoke $r18.<org.springframework.aop.aspectj.'annotation'.AspectMetadata: org.aspectj.lang.reflect.AjType getAjType()>();

        $r20 = interfaceinvoke $r19.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        $r21 = interfaceinvoke $r20.<org.aspectj.lang.reflect.PerClause: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $r22 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind SINGLETON>;

        if $r21 != $r22 goto label07;

        $r34 = new org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectInstanceFactory;

        $r35 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        specialinvoke $r34.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectInstanceFactory: void <init>(org.springframework.beans.factory.BeanFactory,java.lang.String)>($r35, r43);

        $r36 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory>;

        $r37 = interfaceinvoke $r36.<org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory: java.util.List getAdvisors(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>($r34);

        $r38 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z4 = interfaceinvoke $r38.<org.springframework.beans.factory.ListableBeanFactory: boolean isSingleton(java.lang.String)>(r43);

        if $z4 == 0 goto label05;

        $r40 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map advisorsCache>;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r43, $r37);

        goto label06;

     label05:
        $r39 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map aspectFactoryCache>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r43, $r34);

     label06:
        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r37);

        goto label09;

     label07:
        $r23 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z3 = interfaceinvoke $r23.<org.springframework.beans.factory.ListableBeanFactory: boolean isSingleton(java.lang.String)>(r43);

        if $z3 == 0 goto label08;

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with name \'");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a singleton, but aspect instantiation model is not singleton");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label08:
        $r24 = new org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory;

        $r25 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        specialinvoke $r24.<org.springframework.aop.aspectj.'annotation'.PrototypeAspectInstanceFactory: void <init>(org.springframework.beans.factory.BeanFactory,java.lang.String)>($r25, r43);

        $r26 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map aspectFactoryCache>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r43, $r24);

        $r27 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory>;

        $r28 = interfaceinvoke $r27.<org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory: java.util.List getAdvisors(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>($r24);

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r28);

     label09:
        i1 = i1 + 1;

     label10:
        if i1 < i0 goto label02;

        r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.List aspectBeanNames> = $r12;

        exitmonitor r0;

     label11:
        return $r11;

     label12:
        exitmonitor r0;

     label13:
        goto label16;

     label14:
        $r41 := @caughtexception;

        exitmonitor r0;

     label15:
        throw $r41;

     label16:
        $z0 = interfaceinvoke r42.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label17;

        $r10 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r10;

     label17:
        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>();

        goto label20;

     label18:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.lang.String) $r3;

        $r4 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map advisorsCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        r45 = (java.util.List) $r5;

        if r45 == null goto label19;

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>(r45);

        goto label20;

     label19:
        $r6 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: java.util.Map aspectFactoryCache>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        r46 = (org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory) $r7;

        $r8 = r0.<org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder: org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory advisorFactory>;

        $r9 = interfaceinvoke $r8.<org.springframework.aop.aspectj.'annotation'.AspectJAdvisorFactory: java.util.List getAdvisors(org.springframework.aop.aspectj.'annotation'.MetadataAwareAspectInstanceFactory)>(r46);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r9);

     label20:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label18;

        return $r1;

        catch java.lang.Throwable from label01 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected boolean isEligibleBean(java.lang.String)
    {
        org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.BeanFactoryAspectJAdvisorsBuilder;

        r1 := @parameter0: java.lang.String;

        return 1;
    }
}
