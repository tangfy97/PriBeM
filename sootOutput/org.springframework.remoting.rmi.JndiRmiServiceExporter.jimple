public class org.springframework.remoting.rmi.JndiRmiServiceExporter extends org.springframework.remoting.rmi.RmiBasedExporter implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    private org.springframework.jndi.JndiTemplate jndiTemplate;
    private java.lang.String jndiName;
    private java.rmi.Remote exportedObject;

    public void <init>()
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        org.springframework.jndi.JndiTemplate $r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        specialinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: void <init>()>();

        $r1 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r1.<org.springframework.jndi.JndiTemplate: void <init>()>();

        r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.springframework.jndi.JndiTemplate jndiTemplate> = $r1;

        return;
    }

    public void setJndiTemplate(org.springframework.jndi.JndiTemplate)
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        org.springframework.jndi.JndiTemplate r1, $r2;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        r1 := @parameter0: org.springframework.jndi.JndiTemplate;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r2.<org.springframework.jndi.JndiTemplate: void <init>()>();

     label2:
        r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.springframework.jndi.JndiTemplate jndiTemplate> = $r2;

        return;
    }

    public void setJndiEnvironment(java.util.Properties)
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        java.util.Properties r2;
        org.springframework.jndi.JndiTemplate $r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        r2 := @parameter0: java.util.Properties;

        $r1 = new org.springframework.jndi.JndiTemplate;

        specialinvoke $r1.<org.springframework.jndi.JndiTemplate: void <init>(java.util.Properties)>(r2);

        r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.springframework.jndi.JndiTemplate jndiTemplate> = $r1;

        return;
    }

    public void setJndiName(java.lang.String)
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName> = r1;

        return;
    }

    public void afterPropertiesSet() throws javax.naming.NamingException, java.rmi.RemoteException
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: void prepare()>();

        return;
    }

    public void prepare() throws javax.naming.NamingException, java.rmi.RemoteException
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        java.rmi.Remote $r2, $r3;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'jndiName\' is required");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.rmi.Remote getObjectToExport()>();

        r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.rmi.Remote exportedObject> = $r2;

        $r3 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.rmi.Remote exportedObject>;

        staticinvoke <javax.rmi.PortableRemoteObject: void exportObject(java.rmi.Remote)>($r3);

        virtualinvoke r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: void rebind()>();

        return;
    }

    public void rebind() throws javax.naming.NamingException
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        java.rmi.Remote $r2;
        org.springframework.jndi.JndiTemplate $r4;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r3, $r7, $r10;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Binding RMI service to JNDI location [");

        $r7 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10);

     label1:
        $r4 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.springframework.jndi.JndiTemplate jndiTemplate>;

        $r3 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName>;

        $r2 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.rmi.Remote exportedObject>;

        virtualinvoke $r4.<org.springframework.jndi.JndiTemplate: void rebind(java.lang.String,java.lang.Object)>($r3, $r2);

        return;
    }

    public void destroy() throws javax.naming.NamingException, java.rmi.NoSuchObjectException
    {
        org.springframework.remoting.rmi.JndiRmiServiceExporter r0;
        java.rmi.Remote $r4;
        org.springframework.jndi.JndiTemplate $r3;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r2, $r7, $r10;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.JndiRmiServiceExporter;

        $r1 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unbinding RMI service from JNDI location [");

        $r7 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10);

     label1:
        $r3 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: org.springframework.jndi.JndiTemplate jndiTemplate>;

        $r2 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.lang.String jndiName>;

        virtualinvoke $r3.<org.springframework.jndi.JndiTemplate: void unbind(java.lang.String)>($r2);

        $r4 = r0.<org.springframework.remoting.rmi.JndiRmiServiceExporter: java.rmi.Remote exportedObject>;

        staticinvoke <javax.rmi.PortableRemoteObject: void unexportObject(java.rmi.Remote)>($r4);

        return;
    }
}
