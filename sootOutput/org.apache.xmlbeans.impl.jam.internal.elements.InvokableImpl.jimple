public abstract class org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl extends org.apache.xmlbeans.impl.jam.internal.elements.MemberImpl implements org.apache.xmlbeans.impl.jam.mutable.MInvokable
{
    private java.util.List mExceptionClassRefs;
    private java.util.List mParameters;

    protected void <init>(org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl)
    {
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.MemberImpl: void <init>(org.apache.xmlbeans.impl.jam.internal.elements.ElementImpl)>(r1);

        r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters> = null;

        return;
    }

    public void addException(org.apache.xmlbeans.impl.jam.JClass)
    {
        java.util.List $r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        org.apache.xmlbeans.impl.jam.JClass r0;
        java.lang.IllegalArgumentException $r6;
        java.util.ArrayList $r5;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.JClass;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null exception class");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        if $r2 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = $r5;

     label2:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.DirectJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(org.apache.xmlbeans.impl.jam.JClass)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public void addException(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.JClass $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r5;
        java.lang.IllegalArgumentException $r8;
        java.util.ArrayList $r7;
        java.util.List $r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r6;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        java.lang.String r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null qcname");

        throw $r8;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        if $r2 != null goto label2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = $r7;

     label2:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r5 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r4;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.QualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>(r0, $r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void addUnqualifiedException(java.lang.String)
    {
        org.apache.xmlbeans.impl.jam.JClass $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r5;
        java.lang.IllegalArgumentException $r8;
        java.util.ArrayList $r7;
        java.util.List $r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r6;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        java.lang.String r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null qcname");

        throw $r8;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        if $r2 != null goto label2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = $r7;

     label2:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r5 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r4;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>(r0, $r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    public void removeException(java.lang.String)
    {
        java.util.List $r2, $r3;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null classname");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        if $r2 == null goto label2;

        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r0);

     label2:
        return;
    }

    public void removeException(org.apache.xmlbeans.impl.jam.JClass)
    {
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.jam.JClass r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.JClass;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: void removeException(java.lang.String)>($r2);

        return;
    }

    public org.apache.xmlbeans.impl.jam.mutable.MParameter addNewParameter()
    {
        java.util.ArrayList $r6;
        org.apache.xmlbeans.impl.jam.internal.elements.ParameterImpl $r2;
        java.util.List $r1, $r3, $r5;
        int $i0;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        java.lang.String $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        if $r1 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters> = $r6;

     label1:
        $r2 = new org.apache.xmlbeans.impl.jam.internal.elements.ParameterImpl;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.lang.String defaultName(int)>($i0);

        specialinvoke $r2.<org.apache.xmlbeans.impl.jam.internal.elements.ParameterImpl: void <init>(java.lang.String,org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl,java.lang.String)>($r4, r0, "java.lang.Object");

        $r5 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public void removeParameter(org.apache.xmlbeans.impl.jam.mutable.MParameter)
    {
        java.util.List $r1, $r3;
        org.apache.xmlbeans.impl.jam.mutable.MParameter r2;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MParameter;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public org.apache.xmlbeans.impl.jam.mutable.MParameter[] getMutableParameters()
    {
        java.util.List $r1, $r3, $r4, $r6;
        int $i0, $i1;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        org.apache.xmlbeans.impl.jam.mutable.MParameter[] $r2, r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = newarray (org.apache.xmlbeans.impl.jam.mutable.MParameter)[0];

        return $r2;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        r5 = newarray (org.apache.xmlbeans.impl.jam.mutable.MParameter)[$i1];

        $r6 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mParameters>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        return r5;
    }

    public org.apache.xmlbeans.impl.jam.JParameter[] getParameters()
    {
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        org.apache.xmlbeans.impl.jam.mutable.MParameter[] $r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.mutable.MParameter[] getMutableParameters()>();

        return $r1;
    }

    public org.apache.xmlbeans.impl.jam.JClass[] getExceptionTypes()
    {
        org.apache.xmlbeans.impl.jam.JClass $r9;
        java.util.List $r1, $r3, $r4, $r6;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r8;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r0;
        java.lang.Object $r7;
        org.apache.xmlbeans.impl.jam.JClass[] $r2, r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = newarray (org.apache.xmlbeans.impl.jam.JClass)[0];

        return $r2;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        r5 = newarray (org.apache.xmlbeans.impl.jam.JClass)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r5;

        if i3 >= $i2 goto label4;

        $r6 = r0.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        $r8 = (org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef) $r7;

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef: org.apache.xmlbeans.impl.jam.JClass getRefClass()>();

        r5[i3] = $r9;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r5;
    }

    public java.lang.String getQualifiedName()
    {
        java.io.StringWriter $r0;
        org.apache.xmlbeans.impl.jam.JParameter[] $r5;
        org.apache.xmlbeans.impl.jam.JClass $r2, $r8;
        org.apache.xmlbeans.impl.jam.JParameter $r7;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        java.lang.String $r3, $r4, $r6, $r9;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);

        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(46);

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.lang.String getSimpleName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r4);

        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(40);

        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.JParameter[] getParameters()>();

        i3 = 0;

     label1:
        $i0 = lengthof $r5;

        if i3 >= $i0 goto label3;

        $r7 = $r5[i3];

        $r8 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.jam.JParameter: org.apache.xmlbeans.impl.jam.JClass getType()>();

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.impl.jam.JClass: java.lang.String getQualifiedName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r9);

        $i1 = lengthof $r5;

        $i2 = $i1 - 1;

        if i3 >= $i2 goto label2;

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.io.StringWriter: void write(int)>(41);

        $r6 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r6;
    }

    public void setUnqualifiedThrows(java.util.List)
    {
        org.apache.xmlbeans.impl.jam.JClass $r6;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r7;
        java.util.ArrayList $r2;
        java.util.List r0, $r3;
        org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef $r8;
        int $i0, $i1, $i2, i3;
        org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl r1;
        java.lang.Object $r4;
        java.lang.String $r5;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = null;

        return;

     label2:
        $r2 = new java.util.ArrayList;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs> = $r2;

        i3 = 0;

     label3:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: java.util.List mExceptionClassRefs>;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.elements.InvokableImpl: org.apache.xmlbeans.impl.jam.JClass getContainingClass()>();

        $r7 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r6;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.classrefs.UnqualifiedJClassRef: org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRef create(java.lang.String,org.apache.xmlbeans.impl.jam.internal.classrefs.JClassRefContext)>($r5, $r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }
}
