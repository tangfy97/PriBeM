public class minalloy.translator.MinSimplifier extends java.lang.Object
{
    private edu.mit.csail.sdg.alloy4.A4Reporter rep;
    private minalloy.translator.MinA4Solution sol;

    public void <init>()
    {
        minalloy.translator.MinSimplifier r0;

        r0 := @this: minalloy.translator.MinSimplifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep> = null;

        r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol> = null;

        return;
    }

    public boolean simplify(edu.mit.csail.sdg.alloy4.A4Reporter, minalloy.translator.MinA4Solution, java.util.List) throws edu.mit.csail.sdg.alloy4.Err
    {
        java.util.Iterator $r4, $r6;
        minalloy.translator.MinA4Solution r2;
        kodkod.ast.Formula r8, r9;
        java.util.List r3;
        minalloy.translator.MinSimplifier r0;
        java.lang.Object $r5, $r7;
        edu.mit.csail.sdg.alloy4.A4Reporter r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: minalloy.translator.MinSimplifier;

        r1 := @parameter0: edu.mit.csail.sdg.alloy4.A4Reporter;

        r2 := @parameter1: minalloy.translator.MinA4Solution;

        r3 := @parameter2: java.util.List;

        r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep> = r1;

        r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol> = r2;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.ast.Formula) $r5;

        $z1 = specialinvoke r0.<minalloy.translator.MinSimplifier: boolean simplify_eq(kodkod.ast.Formula)>(r8);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.ast.Formula) $r7;

        $z3 = specialinvoke r0.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Formula)>(r9);

        if $z3 != 0 goto label4;

        return 0;

     label4:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return 1;
    }

    private final kodkod.ast.Expression condense(kodkod.ast.Expression)
    {
        kodkod.ast.BinaryExpression r17, r18;
        edu.mit.csail.sdg.alloy4.Err $r15;
        int $i0, $i1;
        minalloy.translator.MinSimplifier r6;
        boolean $z0, $z1, $z2;
        kodkod.instance.TupleSet $r8, $r10;
        minalloy.translator.MinA4Solution $r7, $r9;
        kodkod.ast.Expression $r2, $r3, $r4, $r11, $r14, r16;
        kodkod.ast.operator.ExprOperator $r0, $r1, $r12, $r13;
        kodkod.ast.Relation r5;

        r6 := @this: minalloy.translator.MinSimplifier;

        r16 := @parameter0: kodkod.ast.Expression;

        goto label8;

     label1:
        r17 = (kodkod.ast.BinaryExpression) r16;

        $r0 = virtualinvoke r17.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r1 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        if $r0 != $r1 goto label9;

        $r2 = virtualinvoke r17.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $z1 = $r2 instanceof kodkod.ast.Relation;

        if $z1 == 0 goto label9;

        $r3 = virtualinvoke r17.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $z2 = $r3 instanceof kodkod.ast.BinaryExpression;

        if $z2 == 0 goto label9;

        $r4 = virtualinvoke r17.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        r5 = (kodkod.ast.Relation) $r4;

     label2:
        $r7 = r6.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r8 = virtualinvoke $r7.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(1, r5, 0);

        $i0 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        if $i0 == 1 goto label4;

     label3:
        return r16;

     label4:
        $r9 = r6.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r10 = virtualinvoke $r9.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(0, r5, 0);

        $i1 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        if $i1 == 1 goto label7;

     label5:
        return r16;

     label6:
        $r15 := @caughtexception;

        return r16;

     label7:
        $r11 = virtualinvoke r17.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        r18 = (kodkod.ast.BinaryExpression) $r11;

        $r12 = virtualinvoke r18.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r13 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        if $r12 != $r13 goto label9;

        $r14 = virtualinvoke r18.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        if $r14 != r5 goto label9;

        r16 = virtualinvoke r18.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

     label8:
        $z0 = r16 instanceof kodkod.ast.BinaryExpression;

        if $z0 != 0 goto label1;

     label9:
        return r16;

        catch edu.mit.csail.sdg.alloy4.Err from label2 to label3 with label6;
        catch edu.mit.csail.sdg.alloy4.Err from label4 to label5 with label6;
    }

    private final boolean simplify_equal(kodkod.ast.Expression, kodkod.ast.Expression)
    {
        java.lang.Exception $r55;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r33, $r35, $r36, $r37, $r38, $r39, $r40, $r44, $r46, $r47, $r48, $r49, $r50, $r51;
        java.lang.String $r19, $r30, $r41, $r52;
        edu.mit.csail.sdg.alloy4.A4Reporter $r12, $r23, $r34, $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        minalloy.translator.MinA4Solution $r3, $r5, $r7, $r9, $r21, $r32, $r43, $r54;
        kodkod.ast.Expression $r1, $r2, r56, r57;
        kodkod.ast.Relation $r20, $r31, $r42, $r53;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        minalloy.translator.MinSimplifier r0;
        kodkod.instance.TupleSet $r4, $r6, $r8, $r10, r58, r59, r60;

        r0 := @this: minalloy.translator.MinSimplifier;

        r56 := @parameter0: kodkod.ast.Expression;

        r57 := @parameter1: kodkod.ast.Expression;

        $r1 = specialinvoke r0.<minalloy.translator.MinSimplifier: kodkod.ast.Expression condense(kodkod.ast.Expression)>(r56);

        $r2 = specialinvoke r0.<minalloy.translator.MinSimplifier: kodkod.ast.Expression condense(kodkod.ast.Expression)>(r57);

        $z0 = $r1 instanceof kodkod.ast.Relation;

        if $z0 != 0 goto label1;

        $z10 = $r2 instanceof kodkod.ast.Relation;

        if $z10 == 0 goto label7;

     label1:
        $r3 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r4 = virtualinvoke $r3.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(0, $r1, 0);

        r58 = $r4;

        $r5 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r6 = virtualinvoke $r5.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(1, $r1, 0);

        r59 = $r6;

        $r7 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r8 = virtualinvoke $r7.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(0, $r2, 0);

        r60 = $r8;

        $r9 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r10 = virtualinvoke $r9.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(1, $r2, 0);

        $z1 = $r1 instanceof kodkod.ast.Relation;

        if $z1 == 0 goto label2;

        $i24 = virtualinvoke $r4.<kodkod.instance.TupleSet: int size()>();

        $i25 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        if $i24 >= $i25 goto label2;

        $z8 = virtualinvoke $r8.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r4);

        if $z8 == 0 goto label2;

        $z9 = virtualinvoke $r6.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r8);

        if $z9 == 0 goto label2;

        $r45 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i26 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i27 = virtualinvoke $r4.<kodkod.instance.TupleSet: int size()>();

        $i28 = $i26 - $i27;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i29 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i30 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        $i31 = $i29 - $i30;

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r45.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r52);

        $r54 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r53 = (kodkod.ast.Relation) $r1;

        r58 = $r8;

        virtualinvoke $r54.<minalloy.translator.MinA4Solution: void shrink(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r53, $r8, $r6);

     label2:
        $z11 = $r1 instanceof kodkod.ast.Relation;

        if $z11 == 0 goto label3;

        $i16 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i17 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        if $i16 <= $i17 goto label3;

        $z6 = virtualinvoke $r10.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r58);

        if $z6 == 0 goto label3;

        $z7 = virtualinvoke $r6.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r10);

        if $z7 == 0 goto label3;

        $r34 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i18 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i19 = virtualinvoke r58.<kodkod.instance.TupleSet: int size()>();

        $i20 = $i18 - $i19;

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i21 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        $i22 = virtualinvoke r58.<kodkod.instance.TupleSet: int size()>();

        $i23 = $i21 - $i22;

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r41);

        $r43 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r42 = (kodkod.ast.Relation) $r1;

        r59 = $r10;

        virtualinvoke $r43.<minalloy.translator.MinA4Solution: void shrink(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r42, r58, $r10);

     label3:
        $z12 = $r2 instanceof kodkod.ast.Relation;

        if $z12 == 0 goto label4;

        $i8 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        $i9 = virtualinvoke r58.<kodkod.instance.TupleSet: int size()>();

        if $i8 >= $i9 goto label4;

        $z4 = virtualinvoke r58.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r8);

        if $z4 == 0 goto label4;

        $z5 = virtualinvoke $r10.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r58);

        if $z5 == 0 goto label4;

        $r23 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i10 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        $i11 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        $i12 = $i10 - $i11;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i13 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        $i14 = virtualinvoke r58.<kodkod.instance.TupleSet: int size()>();

        $i15 = $i13 - $i14;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r30);

        $r32 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r31 = (kodkod.ast.Relation) $r2;

        r60 = r58;

        virtualinvoke $r32.<minalloy.translator.MinA4Solution: void shrink(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r31, r58, $r10);

     label4:
        $z13 = $r2 instanceof kodkod.ast.Relation;

        if $z13 == 0 goto label7;

        $i0 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        $i1 = virtualinvoke r59.<kodkod.instance.TupleSet: int size()>();

        if $i0 <= $i1 goto label7;

        $z2 = virtualinvoke r59.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r60);

        if $z2 == 0 goto label7;

        $z3 = virtualinvoke $r10.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r59);

        if $z3 == 0 goto label7;

        $r12 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i2 = virtualinvoke $r10.<kodkod.instance.TupleSet: int size()>();

        $i3 = virtualinvoke r60.<kodkod.instance.TupleSet: int size()>();

        $i4 = $i2 - $i3;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i5 = virtualinvoke r59.<kodkod.instance.TupleSet: int size()>();

        $i6 = virtualinvoke r60.<kodkod.instance.TupleSet: int size()>();

        $i7 = $i5 - $i6;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r19);

        $r21 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r20 = (kodkod.ast.Relation) $r2;

        virtualinvoke $r21.<minalloy.translator.MinA4Solution: void shrink(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r20, r60, r59);

     label5:
        goto label7;

     label6:
        $r55 := @caughtexception;

     label7:
        return 1;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    private final boolean simplify_in(kodkod.ast.Expression, kodkod.ast.Expression)
    {
        edu.mit.csail.sdg.alloy4.A4Reporter $r10, $r20, $r28;
        boolean $z0, $z1;
        minalloy.translator.MinA4Solution $r3, $r5, $r7, $r18;
        kodkod.ast.Expression $r1, $r2, r38, r39;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r21, $r22, $r23, $r24, $r27, $r29, $r30, $r31, $r32, $r35, $r36;
        kodkod.ast.Relation r40;
        java.lang.Throwable $r26;
        int $i0, $i1, $i2, $i3, $i4;
        minalloy.translator.MinSimplifier r0;
        java.lang.String $r17, $r25, $r33, $r34, $r37;
        kodkod.instance.TupleSet $r4, $r6, $r8;

        r0 := @this: minalloy.translator.MinSimplifier;

        r38 := @parameter0: kodkod.ast.Expression;

        r39 := @parameter1: kodkod.ast.Expression;

        $r1 = specialinvoke r0.<minalloy.translator.MinSimplifier: kodkod.ast.Expression condense(kodkod.ast.Expression)>(r38);

        $r2 = specialinvoke r0.<minalloy.translator.MinSimplifier: kodkod.ast.Expression condense(kodkod.ast.Expression)>(r39);

        $z0 = $r1 instanceof kodkod.ast.Relation;

        if $z0 == 0 goto label6;

     label1:
        r40 = (kodkod.ast.Relation) $r1;

        $r3 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r4 = virtualinvoke $r3.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(1, r40, 0);

        $r5 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r6 = virtualinvoke $r5.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(0, r40, 0);

        $r7 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        $r8 = virtualinvoke $r7.<minalloy.translator.MinA4Solution: kodkod.instance.TupleSet approximate(kodkod.ast.Expression)>($r2);

        virtualinvoke $r8.<kodkod.instance.TupleSet: boolean retainAll(java.util.Collection)>($r4);

        $z1 = virtualinvoke $r8.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r6);

        if $z1 != 0 goto label3;

        $r20 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i4 = virtualinvoke $r4.<kodkod.instance.TupleSet: int size()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->false\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r25);

     label2:
        return 0;

     label3:
        $i0 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        $i1 = virtualinvoke $r4.<kodkod.instance.TupleSet: int size()>();

        if $i0 >= $i1 goto label6;

        $r10 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i2 = virtualinvoke $r4.<kodkod.instance.TupleSet: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $i3 = virtualinvoke $r8.<kodkod.instance.TupleSet: int size()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r17);

        $r18 = r0.<minalloy.translator.MinSimplifier: minalloy.translator.MinA4Solution sol>;

        virtualinvoke $r18.<minalloy.translator.MinA4Solution: void shrink(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>(r40, $r6, $r8);

     label4:
        goto label6;

     label5:
        $r26 := @caughtexception;

        $r28 = r0.<minalloy.translator.MinSimplifier: edu.mit.csail.sdg.alloy4.A4Reporter rep>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Comment: Simplify ");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exception: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r33 = staticinvoke <edu.mit.csail.sdg.alloy4.MailBug: java.lang.String dump(java.lang.Throwable)>($r26);

        $r34 = virtualinvoke $r33.<java.lang.String: java.lang.String trim()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>($r37);

     label6:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private final boolean simplify_in(kodkod.ast.Formula)
    {
        kodkod.ast.operator.FormulaOperator $r12, $r13, $r16, $r17;
        kodkod.ast.ComparisonFormula r23;
        kodkod.ast.NaryFormula r21;
        kodkod.ast.operator.ExprCompOperator $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        kodkod.ast.Expression $r6, $r7, $r8, $r9, $r10, $r11;
        kodkod.ast.BinaryFormula r22;
        minalloy.translator.MinSimplifier r5;
        java.util.Iterator $r18;
        kodkod.ast.Formula r0, $r14, $r15, $r20;
        java.lang.Object $r19;

        r5 := @this: minalloy.translator.MinSimplifier;

        r0 := @parameter0: kodkod.ast.Formula;

        $z0 = r0 instanceof kodkod.ast.NaryFormula;

        if $z0 == 0 goto label3;

        r21 = (kodkod.ast.NaryFormula) r0;

        $r16 = virtualinvoke r21.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r17 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r16 != $r17 goto label3;

        $r18 = virtualinvoke r21.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (kodkod.ast.Formula) $r19;

        $z8 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Formula)>($r20);

        if $z8 != 0 goto label2;

        return 0;

     label2:
        $z7 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label1;

     label3:
        $z9 = r0 instanceof kodkod.ast.BinaryFormula;

        if $z9 == 0 goto label5;

        r22 = (kodkod.ast.BinaryFormula) r0;

        $r12 = virtualinvoke r22.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r13 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r12 != $r13 goto label5;

        $r14 = virtualinvoke r22.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $z5 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Formula)>($r14);

        if $z5 == 0 goto label4;

        $r15 = virtualinvoke r22.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $z6 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Formula)>($r15);

        if $z6 == 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $z1 = r0 instanceof kodkod.ast.ComparisonFormula;

        if $z1 == 0 goto label8;

        r23 = (kodkod.ast.ComparisonFormula) r0;

        $r1 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r2 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator SUBSET>;

        if $r1 != $r2 goto label6;

        $r10 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r11 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $z4 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Expression,kodkod.ast.Expression)>($r10, $r11);

        if $z4 != 0 goto label6;

        return 0;

     label6:
        $r3 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r4 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator EQUALS>;

        if $r3 != $r4 goto label8;

        $r6 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r7 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $z2 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Expression,kodkod.ast.Expression)>($r6, $r7);

        if $z2 != 0 goto label7;

        return 0;

     label7:
        $r8 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r9 = virtualinvoke r23.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $z3 = specialinvoke r5.<minalloy.translator.MinSimplifier: boolean simplify_in(kodkod.ast.Expression,kodkod.ast.Expression)>($r8, $r9);

        if $z3 != 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    private final boolean simplify_eq(kodkod.ast.Formula)
    {
        kodkod.ast.BinaryFormula r16;
        kodkod.ast.operator.FormulaOperator $r6, $r7, $r10, $r11;
        kodkod.ast.ComparisonFormula r17;
        minalloy.translator.MinSimplifier r3;
        kodkod.ast.NaryFormula r15;
        kodkod.ast.operator.ExprCompOperator $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator $r12;
        kodkod.ast.Formula r0, $r8, $r9, $r14;
        kodkod.ast.Expression $r4, $r5;
        java.lang.Object $r13;

        r3 := @this: minalloy.translator.MinSimplifier;

        r0 := @parameter0: kodkod.ast.Formula;

        $z0 = r0 instanceof kodkod.ast.NaryFormula;

        if $z0 == 0 goto label3;

        r15 = (kodkod.ast.NaryFormula) r0;

        $r10 = virtualinvoke r15.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r11 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r10 != $r11 goto label3;

        $r12 = virtualinvoke r15.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (kodkod.ast.Formula) $r13;

        $z6 = specialinvoke r3.<minalloy.translator.MinSimplifier: boolean simplify_eq(kodkod.ast.Formula)>($r14);

        if $z6 != 0 goto label2;

        return 0;

     label2:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label1;

     label3:
        $z7 = r0 instanceof kodkod.ast.BinaryFormula;

        if $z7 == 0 goto label5;

        r16 = (kodkod.ast.BinaryFormula) r0;

        $r6 = virtualinvoke r16.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r7 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r6 != $r7 goto label5;

        $r8 = virtualinvoke r16.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $z3 = specialinvoke r3.<minalloy.translator.MinSimplifier: boolean simplify_eq(kodkod.ast.Formula)>($r8);

        if $z3 == 0 goto label4;

        $r9 = virtualinvoke r16.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $z4 = specialinvoke r3.<minalloy.translator.MinSimplifier: boolean simplify_eq(kodkod.ast.Formula)>($r9);

        if $z4 == 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $z1 = r0 instanceof kodkod.ast.ComparisonFormula;

        if $z1 == 0 goto label6;

        r17 = (kodkod.ast.ComparisonFormula) r0;

        $r1 = virtualinvoke r17.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r2 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator EQUALS>;

        if $r1 != $r2 goto label6;

        $r4 = virtualinvoke r17.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r5 = virtualinvoke r17.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $z2 = specialinvoke r3.<minalloy.translator.MinSimplifier: boolean simplify_equal(kodkod.ast.Expression,kodkod.ast.Expression)>($r4, $r5);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }
}
