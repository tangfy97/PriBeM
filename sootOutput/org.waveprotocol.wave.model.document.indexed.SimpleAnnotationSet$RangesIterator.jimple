class org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator extends java.lang.Object implements java.util.Iterator
{
    org.waveprotocol.wave.model.util.OffsetList$Container next;
    final org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0;

    private void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)
    {
        org.waveprotocol.wave.model.util.OffsetList $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r4;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList access$700(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container firstContainer()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next> = $r4;

        return;
    }

    public boolean hasNext()
    {
        org.waveprotocol.wave.model.util.OffsetList $r3;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r0;
        org.waveprotocol.wave.model.util.OffsetList$Container $r2, $r4;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList access$700(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>($r1);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r2 == $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.document.AnnotationInterval next()
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values $r4, $r9, $r27, $r36, $r50;
        java.util.Map $r5, $r10, $r28, $r37;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r0;
        java.util.Set $r11, $r29;
        org.waveprotocol.wave.model.util.OffsetList$Container $r2, $r7, $r13, $r14, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r34, $r41, $r42, $r45, $r46, $r48;
        java.lang.String r54, r56;
        java.util.Map$Entry r53, r55;
        org.waveprotocol.wave.model.util.StringMap $r1, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.util.AnnotationIntervalImpl $r18;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet $r15, $r43, $r47;
        int $i0, $i1, $i2, $i3;
        java.util.NoSuchElementException $r52;
        org.waveprotocol.wave.model.util.OffsetList $r16, $r44;
        java.util.Iterator $r12, $r30;
        java.lang.Object $r3, $r8, $r26, $r31, $r32, $r33, $r35, $r38, $r39, $r40, $r49, $r51;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r52 = new java.util.NoSuchElementException;

        specialinvoke $r52.<java.util.NoSuchElementException: void <init>(java.lang.String)>("no more intervals");

        throw $r52;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r4 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.util.Map access$800(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)>($r4);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void putAll(java.util.Map)>($r5);

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r9 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r8;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.util.Map access$800(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)>($r9);

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r38 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.util.Map$Entry) $r38;

        $r39 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>();

        r54 = (java.lang.String) $r39;

        $r40 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r41 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r42 = interfaceinvoke $r41.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r43 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0>;

        $r44 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList access$700(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>($r43);

        $r45 = interfaceinvoke $r44.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r42 != $r45 goto label3;

        if $r40 == null goto label4;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r54, $r40);

        goto label4;

     label3:
        $r47 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0>;

        $r46 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r48 = interfaceinvoke $r46.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r49 = interfaceinvoke $r48.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r50 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r49;

        $r51 = virtualinvoke $r50.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.lang.Object get(java.lang.String)>(r54);

        $z4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: boolean access$900(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet,java.lang.Object,java.lang.Object)>($r47, $r40, $r51);

        if $z4 != 0 goto label4;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r54, $r40);

     label4:
        goto label2;

     label5:
        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet this$0>;

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet: org.waveprotocol.wave.model.util.OffsetList access$700(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>($r15);

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.util.OffsetList: org.waveprotocol.wave.model.util.OffsetList$Container sentinel()>();

        if $r14 == $r17 goto label8;

        $r24 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r25 = interfaceinvoke $r24.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getPreviousContainer()>();

        $r26 = interfaceinvoke $r25.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r27 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r26;

        $r28 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.util.Map access$800(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)>($r27);

        $r29 = interfaceinvoke $r28.<java.util.Map: java.util.Set entrySet()>();

        $r30 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.util.Map$Entry) $r31;

        $r32 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getKey()>();

        r56 = (java.lang.String) $r32;

        $r33 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r33 == null goto label7;

        $r34 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r35 = interfaceinvoke $r34.<org.waveprotocol.wave.model.util.OffsetList$Container: java.lang.Object getValue()>();

        $r36 = (org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values) $r35;

        $r37 = staticinvoke <org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values: java.util.Map access$800(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$Values)>($r36);

        $z3 = interfaceinvoke $r37.<java.util.Map: boolean containsKey(java.lang.Object)>(r56);

        if $z3 != 0 goto label7;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r56, null);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r56, null);

     label7:
        goto label6;

     label8:
        $r18 = new org.waveprotocol.wave.model.document.util.AnnotationIntervalImpl;

        $r19 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $i0 = interfaceinvoke $r19.<org.waveprotocol.wave.model.util.OffsetList$Container: int offset()>();

        $r20 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $i1 = interfaceinvoke $r20.<org.waveprotocol.wave.model.util.OffsetList$Container: int offset()>();

        $r21 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $i2 = interfaceinvoke $r21.<org.waveprotocol.wave.model.util.OffsetList$Container: int size()>();

        $i3 = $i1 + $i2;

        specialinvoke $r18.<org.waveprotocol.wave.model.document.util.AnnotationIntervalImpl: void <init>(int,int,org.waveprotocol.wave.model.util.ReadableStringMap,org.waveprotocol.wave.model.util.ReadableStringMap)>($i0, $i3, $r1, $r6);

        $r22 = r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next>;

        $r23 = interfaceinvoke $r22.<org.waveprotocol.wave.model.util.OffsetList$Container: org.waveprotocol.wave.model.util.OffsetList$Container getNextContainer()>();

        r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.util.OffsetList$Container next> = $r23;

        return $r18;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("removing an annotation interval is not supported");

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r0;
        org.waveprotocol.wave.model.document.AnnotationInterval $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: org.waveprotocol.wave.model.document.AnnotationInterval next()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet, org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1)
    {
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator r0;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1 r2;
        org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet;

        r2 := @parameter1: org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet$RangesIterator: void <init>(org.waveprotocol.wave.model.document.indexed.SimpleAnnotationSet)>(r1);

        return;
    }
}
