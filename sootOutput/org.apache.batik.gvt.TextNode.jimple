public class org.apache.batik.gvt.TextNode extends org.apache.batik.gvt.AbstractGraphicsNode implements org.apache.batik.gvt.Selectable
{
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    protected java.awt.geom.Point2D location;
    protected java.text.AttributedCharacterIterator aci;
    protected java.lang.String text;
    protected org.apache.batik.gvt.text.Mark beginMark;
    protected org.apache.batik.gvt.text.Mark endMark;
    protected java.util.List textRuns;
    protected org.apache.batik.gvt.TextPainter textPainter;
    private java.awt.geom.Rectangle2D geometryBounds;
    private java.awt.geom.Rectangle2D primitiveBounds;
    private java.awt.Shape outline;

    public void <init>()
    {
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Point2D$Float $r1;
        org.apache.batik.gvt.TextPainter $r2;

        r0 := @this: org.apache.batik.gvt.TextNode;

        specialinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void <init>()>();

        $r1 = new java.awt.geom.Point2D$Float;

        specialinvoke $r1.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Point2D location> = $r1;

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark> = null;

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark> = null;

        $r2 = staticinvoke <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.TextPainter getInstance()>();

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter> = $r2;

        return;
    }

    public void setTextPainter(org.apache.batik.gvt.TextPainter)
    {
        org.apache.batik.gvt.TextNode r1;
        org.apache.batik.gvt.TextPainter r0, $r2;

        r1 := @this: org.apache.batik.gvt.TextNode;

        r0 := @parameter0: org.apache.batik.gvt.TextPainter;

        if r0 != null goto label1;

        $r2 = staticinvoke <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.TextPainter getInstance()>();

        r1.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter> = $r2;

        goto label2;

     label1:
        r1.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter> = r0;

     label2:
        return;
    }

    public org.apache.batik.gvt.TextPainter getTextPainter()
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.TextPainter $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        return $r1;
    }

    public java.util.List getTextRuns()
    {
        org.apache.batik.gvt.TextNode r0;
        java.util.List $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.util.List textRuns>;

        return $r1;
    }

    public void setTextRuns(java.util.List)
    {
        org.apache.batik.gvt.TextNode r0;
        java.util.List r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.batik.gvt.TextNode: java.util.List textRuns> = r1;

        return;
    }

    public java.lang.String getText()
    {
        org.apache.batik.gvt.TextNode r0;
        char c1;
        java.text.AttributedCharacterIterator $r2, $r4, $r5, $r6;
        java.lang.StringBuffer $r10;
        int $i0, $i2, $i4;
        java.lang.String $r1, $r7, $r8, $r9;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.lang.String text>;

        if $r1 == null goto label1;

        $r9 = r0.<org.apache.batik.gvt.TextNode: java.lang.String text>;

        return $r9;

     label1:
        $r2 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        if $r2 != null goto label2;

        r0.<org.apache.batik.gvt.TextNode: java.lang.String text> = "";

        goto label5;

     label2:
        $r10 = new java.lang.StringBuffer;

        $r4 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        $i0 = interfaceinvoke $r4.<java.text.CharacterIterator: int getEndIndex()>();

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r5 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        c1 = interfaceinvoke $r5.<java.text.CharacterIterator: char first()>();

        goto label4;

     label3:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        $r6 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        c1 = interfaceinvoke $r6.<java.text.CharacterIterator: char next()>();

     label4:
        $i2 = (int) c1;

        $i4 = (int) 65535;

        if $i2 != $i4 goto label3;

        $r7 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.batik.gvt.TextNode: java.lang.String text> = $r7;

     label5:
        $r8 = r0.<org.apache.batik.gvt.TextNode: java.lang.String text>;

        return $r8;
    }

    public void setLocation(java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Point2D r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r1 := @parameter0: java.awt.geom.Point2D;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void invalidateGeometryCache()>();

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Point2D location> = r1;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public java.awt.geom.Point2D getLocation()
    {
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Point2D $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Point2D location>;

        return $r1;
    }

    public void swapTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.gvt.text.TextPaintInfo)
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.TextPaintInfo r1, r2;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r2 := @parameter0: org.apache.batik.gvt.text.TextPaintInfo;

        r1 := @parameter1: org.apache.batik.gvt.text.TextPaintInfo;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void invalidateGeometryCache()>();

        virtualinvoke r1.<org.apache.batik.gvt.text.TextPaintInfo: void set(org.apache.batik.gvt.text.TextPaintInfo)>(r2);

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public void setAttributedCharacterIterator(java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void invalidateGeometryCache()>();

        r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci> = r1;

        r0.<org.apache.batik.gvt.TextNode: java.lang.String text> = null;

        r0.<org.apache.batik.gvt.TextNode: java.util.List textRuns> = null;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public java.text.AttributedCharacterIterator getAttributedCharacterIterator()
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        return $r1;
    }

    protected void invalidateGeometryCache()
    {
        org.apache.batik.gvt.TextNode r0;

        r0 := @this: org.apache.batik.gvt.TextNode;

        specialinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D primitiveBounds> = null;

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D geometryBounds> = null;

        r0.<org.apache.batik.gvt.TextNode: java.awt.Shape outline> = null;

        return;
    }

    public java.awt.geom.Rectangle2D getPrimitiveBounds()
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r2;
        java.awt.geom.Rectangle2D $r1, $r4, $r5;
        org.apache.batik.gvt.TextPainter $r3;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D primitiveBounds>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.TextPainter: java.awt.geom.Rectangle2D getBounds2D(org.apache.batik.gvt.TextNode)>(r0);

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D primitiveBounds> = $r4;

     label1:
        $r5 = r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D primitiveBounds>;

        return $r5;
    }

    public java.awt.geom.Rectangle2D getGeometryBounds()
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r2;
        java.awt.geom.Rectangle2D $r1, $r4, $r5;
        org.apache.batik.gvt.TextPainter $r3;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D geometryBounds>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.TextPainter: java.awt.geom.Rectangle2D getGeometryBounds(org.apache.batik.gvt.TextNode)>(r0);

        r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D geometryBounds> = $r4;

     label1:
        $r5 = r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D geometryBounds>;

        return $r5;
    }

    public java.awt.geom.Rectangle2D getSensitiveBounds()
    {
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        return $r1;
    }

    public java.awt.Shape getOutline()
    {
        java.awt.Shape $r1, $r4, $r5;
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r2;
        org.apache.batik.gvt.TextPainter $r3;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.awt.Shape outline>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.TextPainter: java.awt.Shape getOutline(org.apache.batik.gvt.TextNode)>(r0);

        r0.<org.apache.batik.gvt.TextNode: java.awt.Shape outline> = $r4;

     label1:
        $r5 = r0.<org.apache.batik.gvt.TextNode: java.awt.Shape outline>;

        return $r5;
    }

    public org.apache.batik.gvt.text.Mark getMarkerForChar(int, boolean)
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.Mark $r2;
        int i0;
        boolean z0;
        org.apache.batik.gvt.TextPainter $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.TextPainter: org.apache.batik.gvt.text.Mark getMark(org.apache.batik.gvt.TextNode,int,boolean)>(r0, i0, z0);

        return $r2;
    }

    public void setSelection(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.gvt.TextNode $r1, r2, $r5;
        org.apache.batik.gvt.text.Mark r0, r4;
        java.lang.Error $r3;

        r2 := @this: org.apache.batik.gvt.TextNode;

        r0 := @parameter0: org.apache.batik.gvt.text.Mark;

        r4 := @parameter1: org.apache.batik.gvt.text.Mark;

        $r1 = interfaceinvoke r0.<org.apache.batik.gvt.text.Mark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r1 != r2 goto label1;

        $r5 = interfaceinvoke r4.<org.apache.batik.gvt.text.Mark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r5 == r2 goto label2;

     label1:
        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Markers not from this TextNode");

        throw $r3;

     label2:
        r2.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark> = r0;

        r2.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark> = r4;

        return;
    }

    public boolean selectAt(double, double)
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.Mark $r2;
        double d0, d1;
        org.apache.batik.gvt.TextPainter $r1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.TextPainter: org.apache.batik.gvt.text.Mark selectAt(double,double,org.apache.batik.gvt.TextNode)>(d0, d1, r0);

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark> = $r2;

        return 1;
    }

    public boolean selectTo(double, double)
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.Mark $r1, $r3, $r4;
        double d0, d1;
        org.apache.batik.gvt.TextPainter $r2;

        r0 := @this: org.apache.batik.gvt.TextNode;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r2 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark>;

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.TextPainter: org.apache.batik.gvt.text.Mark selectTo(double,double,org.apache.batik.gvt.text.Mark)>(d0, d1, $r1);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark>;

        if $r3 == $r4 goto label2;

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark> = $r3;

        return 1;

     label2:
        return 0;
    }

    public boolean selectAll(double, double)
    {
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.Mark $r2, $r4;
        org.apache.batik.gvt.TextPainter $r1, $r3;
        double d0, d1;

        r0 := @this: org.apache.batik.gvt.TextNode;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.TextPainter: org.apache.batik.gvt.text.Mark selectFirst(org.apache.batik.gvt.TextNode)>(r0);

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark> = $r2;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.TextPainter: org.apache.batik.gvt.text.Mark selectLast(org.apache.batik.gvt.TextNode)>(r0);

        r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark> = $r4;

        return 1;
    }

    public java.lang.Object getSelection()
    {
        org.apache.batik.gvt.TextNode r0;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        org.apache.batik.gvt.text.AttributedCharacterSpanIterator $r6, r8;
        org.apache.batik.gvt.text.Mark $r2, $r3;
        java.text.AttributedCharacterIterator $r1, $r7;
        org.apache.batik.gvt.TextPainter $r4;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r8 = null;

        $r1 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark>;

        $r2 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.gvt.TextPainter: int[] getSelected(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>($r3, $r2);

        if $r5 == null goto label3;

        $i0 = lengthof $r5;

        if $i0 <= 1 goto label3;

        $i2 = $r5[0];

        $i1 = $r5[1];

        if $i2 <= $i1 goto label2;

        i6 = $r5[1];

        $i7 = $r5[0];

        $r5[1] = $i7;

        $r5[0] = i6;

     label2:
        $r6 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        $r7 = r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator aci>;

        $i5 = $r5[0];

        $i3 = $r5[1];

        $i4 = $i3 + 1;

        specialinvoke $r6.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>($r7, $i5, $i4);

        r8 = $r6;

     label3:
        return r8;
    }

    public java.awt.Shape getHighlightShape()
    {
        java.awt.Shape $r4, $r6;
        org.apache.batik.gvt.TextNode r0;
        org.apache.batik.gvt.text.Mark $r1, $r2;
        java.awt.geom.AffineTransform $r5;
        org.apache.batik.gvt.TextPainter $r3;

        r0 := @this: org.apache.batik.gvt.TextNode;

        $r3 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        $r2 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark beginMark>;

        $r1 = r0.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark endMark>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.TextPainter: java.awt.Shape getHighlightShape(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>($r2, $r1);

        $r5 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        $r6 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r4);

        return $r6;
    }

    public void primitivePaint(java.awt.Graphics2D)
    {
        java.awt.Shape $r1;
        org.apache.batik.gvt.TextNode r2;
        java.awt.Graphics2D r0;
        java.awt.geom.GeneralPath $r3;
        boolean $z0;
        org.apache.batik.gvt.TextPainter $r4;

        r2 := @this: org.apache.batik.gvt.TextNode;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Shape getClip()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof java.awt.geom.GeneralPath;

        if $z0 != 0 goto label1;

        $r3 = new java.awt.geom.GeneralPath;

        specialinvoke $r3.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r1);

        virtualinvoke r0.<java.awt.Graphics: void setClip(java.awt.Shape)>($r3);

     label1:
        $r4 = r2.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.TextPainter textPainter>;

        interfaceinvoke $r4.<org.apache.batik.gvt.TextPainter: void paint(org.apache.batik.gvt.TextNode,java.awt.Graphics2D)>(r2, r0);

        return;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Point2D r1;
        java.awt.geom.Rectangle2D $r7;
        int i0, $i1;
        boolean $z0, $z1;
        double $d0, $d1;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r4;
        org.apache.batik.gvt.text.TextSpanLayout $r5;
        java.util.List $r2;
        float f0, f1;
        java.lang.Object $r3;
        org.apache.batik.gvt.text.TextHit $r6;

        r0 := @this: org.apache.batik.gvt.TextNode;

        r1 := @parameter0: java.awt.geom.Point2D;

        $z0 = specialinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean contains(java.awt.geom.Point2D)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        i0 = 0;

        goto label4;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r3;

        $r5 = virtualinvoke r4.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        f0 = (float) $d0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        f1 = (float) $d1;

        $r6 = interfaceinvoke $r5.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.text.TextHit hitTestChar(float,float)>(f0, f1);

        if $r6 == null goto label3;

        $r7 = interfaceinvoke $r5.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        $z1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: boolean contains(java.awt.geom.Point2D,java.awt.geom.Rectangle2D)>(r1, $r7);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

        return 0;
    }

    protected boolean contains(java.awt.geom.Point2D, java.awt.geom.Rectangle2D)
    {
        org.apache.batik.gvt.TextNode r2;
        java.awt.geom.Point2D r1;
        java.awt.geom.Rectangle2D r0;
        int $i0;
        boolean $z0, $z1;

        r2 := @this: org.apache.batik.gvt.TextNode;

        r1 := @parameter0: java.awt.geom.Point2D;

        r0 := @parameter1: java.awt.geom.Rectangle2D;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Point2D)>(r1);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = r2.<org.apache.batik.gvt.AbstractGraphicsNode: int pointerEventType>;

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label5;
            default: goto label6;
        };

     label3:
        $z1 = r2.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isVisible>;

        return $z1;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        return 0;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r0;

        return;
    }
}
