public class org.apache.lucene.search.spans.SpanNotQuery extends org.apache.lucene.search.spans.SpanQuery implements java.lang.Cloneable
{
    private org.apache.lucene.search.spans.SpanQuery include;
    private org.apache.lucene.search.spans.SpanQuery exclude;

    public void <init>(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        java.lang.String $r3, $r4;
        org.apache.lucene.search.spans.SpanQuery r1, r2;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanQuery;

        r2 := @parameter1: org.apache.lucene.search.spans.SpanQuery;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: void <init>()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include> = r1;

        r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude> = r2;

        $r3 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanQuery: java.lang.String getField()>();

        $r4 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanQuery: java.lang.String getField()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Clauses must have same field.");

        throw $r5;

     label1:
        return;
    }

    public org.apache.lucene.search.spans.SpanQuery getInclude()
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        return $r1;
    }

    public org.apache.lucene.search.spans.SpanQuery getExclude()
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        return $r1;
    }

    public java.lang.String getField()
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        java.lang.String $r2;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.spans.SpanQuery: java.lang.String getField()>();

        return $r2;
    }

    public void extractTerms(java.util.Set)
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        java.util.Set r1;
        org.apache.lucene.search.spans.SpanQuery $r2;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: void extractTerms(java.util.Set)>(r1);

        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.spans.SpanNotQuery r1;
        float $f0;
        java.lang.StringBuilder $r0;
        java.lang.String r2, $r4, $r6, $r7, $r8;
        org.apache.lucene.search.spans.SpanQuery $r3, $r5;

        r1 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spanNot(");

        $r3 = r1.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.SpanQuery: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r1.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.search.spans.SpanQuery: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanNotQuery: float getBoost()>();

        $r7 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public org.apache.lucene.search.spans.SpanNotQuery clone()
    {
        org.apache.lucene.search.Query $r3, $r6;
        org.apache.lucene.search.spans.SpanNotQuery $r0, r1;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r2, $r4, $r5, $r7;

        r1 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r0 = new org.apache.lucene.search.spans.SpanNotQuery;

        $r2 = r1.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query clone()>();

        $r5 = (org.apache.lucene.search.spans.SpanQuery) $r3;

        $r4 = r1.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $r6 = virtualinvoke $r4.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query clone()>();

        $r7 = (org.apache.lucene.search.spans.SpanQuery) $r6;

        specialinvoke $r0.<org.apache.lucene.search.spans.SpanNotQuery: void <init>(org.apache.lucene.search.spans.SpanQuery,org.apache.lucene.search.spans.SpanQuery)>($r5, $r7);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanNotQuery: float getBoost()>();

        virtualinvoke $r0.<org.apache.lucene.search.spans.SpanNotQuery: void setBoost(float)>($f0);

        return $r0;
    }

    public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNotQuery$1 $r0;
        java.util.Map r4;
        org.apache.lucene.search.spans.SpanNotQuery r1;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;

        r1 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r2 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter1: org.apache.lucene.util.Bits;

        r4 := @parameter2: java.util.Map;

        $r0 = new org.apache.lucene.search.spans.SpanNotQuery$1;

        specialinvoke $r0.<org.apache.lucene.search.spans.SpanNotQuery$1: void <init>(org.apache.lucene.search.spans.SpanNotQuery,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r1, r2, r3, r4);

        return $r0;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r3, $r7;
        org.apache.lucene.search.spans.SpanNotQuery r0, $r9, r11;
        org.apache.lucene.search.spans.SpanQuery $r2, r4, $r5, $r6, $r8, $r10;
        org.apache.lucene.index.IndexReader r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        r11 = null;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r1);

        r4 = (org.apache.lucene.search.spans.SpanQuery) $r3;

        $r5 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        if r4 == $r5 goto label1;

        $r9 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanNotQuery clone()>();

        r11 = $r9;

        $r9.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include> = r4;

     label1:
        $r6 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r1);

        $r10 = (org.apache.lucene.search.spans.SpanQuery) $r7;

        $r8 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        if $r10 == $r8 goto label3;

        if r11 != null goto label2;

        r11 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanNotQuery clone()>();

     label2:
        r11.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude> = $r10;

     label3:
        if r11 == null goto label4;

        return r11;

     label4:
        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanNotQuery r0, r2;
        byte $b0;
        float $f0, $f1;
        java.lang.Object r1;
        org.apache.lucene.search.spans.SpanQuery $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.search.spans.SpanNotQuery;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.search.spans.SpanNotQuery) r1;

        $r4 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $r3 = r2.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $z1 = virtualinvoke $r4.<org.apache.lucene.search.spans.SpanQuery: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $r5 = r2.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $z2 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanQuery: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: float getBoost()>();

        $f1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNotQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r1, $r2;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.SpanQuery: int hashCode()>();

        $i2 = $i0 << 1;

        $i1 = $i0 >>> 31;

        i7 = $i2 | $i1;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        $i3 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: int hashCode()>();

        i8 = i7 ^ $i3;

        $i5 = i8 << 1;

        $i4 = i8 >>> 31;

        i9 = $i5 | $i4;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: float getBoost()>();

        $i6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        i10 = i9 ^ $i6;

        return i10;
    }

    public volatile org.apache.lucene.search.Query clone()
    {
        org.apache.lucene.search.spans.SpanNotQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanNotQuery clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.search.spans.SpanNotQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanNotQuery clone()>();

        return $r1;
    }

    static org.apache.lucene.search.spans.SpanQuery access$000(org.apache.lucene.search.spans.SpanNotQuery)
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @parameter0: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery include>;

        return $r1;
    }

    static org.apache.lucene.search.spans.SpanQuery access$100(org.apache.lucene.search.spans.SpanNotQuery)
    {
        org.apache.lucene.search.spans.SpanNotQuery r0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @parameter0: org.apache.lucene.search.spans.SpanNotQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery exclude>;

        return $r1;
    }
}
