final class com.hp.hpl.jena.sparql.util.NodeUtils$3 extends java.lang.Object implements com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest
{

    void <init>()
    {
        com.hp.hpl.jena.sparql.util.NodeUtils$3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeUtils$3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean equal(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, $r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r4;
        com.hp.hpl.jena.sparql.util.NodeUtils$3 r5;
        com.hp.hpl.jena.graph.Node r0, r2;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.util.NodeUtils$3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r2);

     label1:
        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: boolean sameAs(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r1, $r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label1 to label2 with label3;
    }
}
