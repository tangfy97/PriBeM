public class org.hamcrest.core.IsCollectionContaining extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private final org.hamcrest.Matcher elementMatcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.core.IsCollectionContaining r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.core.IsCollectionContaining;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher elementMatcher> = r1;

        return;
    }

    protected boolean matchesSafely(java.lang.Iterable, org.hamcrest.Description)
    {
        org.hamcrest.Description r5;
        java.util.Iterator $r1;
        org.hamcrest.core.IsCollectionContaining r3;
        java.lang.Iterable r0;
        org.hamcrest.Matcher $r4, $r6;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r3 := @this: org.hamcrest.core.IsCollectionContaining;

        r0 := @parameter0: java.lang.Iterable;

        r5 := @parameter1: org.hamcrest.Description;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = r3.<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher elementMatcher>;

        $z1 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        if z2 == 0 goto label3;

        interfaceinvoke r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(", ");

     label3:
        $r6 = r3.<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher elementMatcher>;

        interfaceinvoke $r6.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>($r2, r5);

        z2 = 1;

        goto label1;

     label4:
        return 0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0, $r1;
        org.hamcrest.Matcher $r3;
        org.hamcrest.core.IsCollectionContaining r2;

        r2 := @this: org.hamcrest.core.IsCollectionContaining;

        r0 := @parameter0: org.hamcrest.Description;

        $r1 = interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a collection containing ");

        $r3 = r2.<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher elementMatcher>;

        interfaceinvoke $r1.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r3);

        return;
    }

    public static org.hamcrest.Matcher hasItem(org.hamcrest.Matcher)
    {
        org.hamcrest.core.IsCollectionContaining $r0;
        org.hamcrest.Matcher r1;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r0 = new org.hamcrest.core.IsCollectionContaining;

        specialinvoke $r0.<org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>(r1);

        return $r0;
    }

    public static org.hamcrest.Matcher hasItem(java.lang.Object)
    {
        java.lang.Object r1;
        org.hamcrest.core.IsCollectionContaining $r0;
        org.hamcrest.Matcher $r2;

        r1 := @parameter0: java.lang.Object;

        $r0 = new org.hamcrest.core.IsCollectionContaining;

        $r2 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        specialinvoke $r0.<org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>($r2);

        return $r0;
    }

    public static transient org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])
    {
        org.hamcrest.Matcher[] r1;
        org.hamcrest.core.IsCollectionContaining $r4;
        java.util.ArrayList $r0;
        org.hamcrest.Matcher $r2, r3;
        int $i0, i1, i2;

        r1 := @parameter0: org.hamcrest.Matcher[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r3 = r1[i2];

        $r4 = new org.hamcrest.core.IsCollectionContaining;

        specialinvoke $r4.<org.hamcrest.core.IsCollectionContaining: void <init>(org.hamcrest.Matcher)>(r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>($r0);

        return $r2;
    }

    public static transient org.hamcrest.Matcher hasItems(java.lang.Object[])
    {
        java.lang.Object[] r1;
        java.util.ArrayList $r0;
        org.hamcrest.Matcher $r2, $r4;
        int $i0, i1, i2;
        java.lang.Object r3;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r3 = r1[i2];

        $r4 = staticinvoke <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItem(java.lang.Object)>(r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.hamcrest.core.AllOf: org.hamcrest.Matcher allOf(java.lang.Iterable)>($r0);

        return $r2;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.Description r2;
        java.lang.Object r1;
        org.hamcrest.core.IsCollectionContaining r0;
        java.lang.Iterable $r3;
        boolean $z0;

        r0 := @this: org.hamcrest.core.IsCollectionContaining;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Iterable) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.core.IsCollectionContaining: boolean matchesSafely(java.lang.Iterable,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }
}
