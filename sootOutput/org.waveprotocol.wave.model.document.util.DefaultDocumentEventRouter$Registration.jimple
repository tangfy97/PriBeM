class org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration extends java.lang.Object implements org.waveprotocol.wave.model.document.util.ListenerRegistration
{
    private final org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter router;
    private final java.lang.Object key;
    private final java.lang.Object listener;
    private final java.util.Map listenerMap;

    private void <init>(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r1;
        java.util.Map r4;
        java.lang.Object r2, r3;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r4 := @parameter1: java.util.Map;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter router> = r1;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.lang.Object key> = r2;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.lang.Object listener> = r3;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.util.Map listenerMap> = r4;

        return;
    }

    public static org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration create(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter, java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r1;
        java.util.Map r2;
        java.lang.Object r3, r4;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: void <init>(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter,java.util.Map,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        return $r0;
    }

    public void detach()
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet r5;
        java.util.Map $r3, $r8;
        java.lang.Object $r2, $r4, $r6, $r7;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter router>;

        staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void access$000(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter)>($r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.util.Map listenerMap>;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.lang.Object key>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r4;

        if r5 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.lang.Object listener>;

        virtualinvoke r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>($r6);

        $z0 = virtualinvoke r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.util.Map listenerMap>;

        $r7 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: java.lang.Object key>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

     label1:
        return;
    }
}
