class com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl extends com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl implements com.sun.xml.bind.v2.model.core.ElementPropertyInfo
{
    private java.util.List types;
    private final java.util.List ref;
    private java.lang.Boolean isRequired;
    private final boolean isValueList;
    static final boolean $assertionsDisabled;

    void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl, com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed r2, $r4;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl$1 $r3;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter1: com.sun.xml.bind.v2.model.impl.PropertySeed;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        $r3 = new com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl$1;

        specialinvoke $r3.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl$1: void <init>(com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl)>(r0);

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List ref> = $r3;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $z0 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlList;");

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isValueList> = $z0;

        return;
    }

    public java.util.List getTypes()
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r3, $r6, $r38;
        com.sun.xml.bind.v2.model.impl.TypeRefImpl $r51, $r57;
        com.sun.istack.FinalArrayList $r2;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        java.lang.StringBuilder $r29, $r36, $r37, $r40;
        javax.xml.namespace.QName $r14, $r50;
        java.lang.Object[] $r28;
        java.lang.AssertionError $r12;
        java.lang.String $r35, $r39, $r41, $r43, $r45, $r46, $r55, $r56;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r30;
        javax.xml.bind.'annotation'.XmlElement[] $r25, r47, r52;
        com.sun.xml.bind.v2.model.nav.Navigator $r17, $r18, $r20, $r23, $r32;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r15;
        javax.xml.bind.'annotation'.XmlElements r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.List $r1, $r9, $r10, $r11, $r49, $r54, $r58;
        com.sun.xml.bind.v2.model.impl.Messages $r31;
        java.lang.'annotation'.Annotation $r4, $r7;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r27;
        int i0, i1;
        java.lang.Boolean $r21, $r24, $r48;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r26, $r33;
        java.lang.Object $r16, $r19, $r22, $r34, r53;
        java.lang.Class $r42, $r44;
        javax.xml.bind.'annotation'.XmlElement r5, r13;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        if $r1 != null goto label12;

        $r2 = new com.sun.istack.FinalArrayList;

        specialinvoke $r2.<com.sun.istack.FinalArrayList: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types> = $r2;

        r47 = null;

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElement;");

        r5 = (javax.xml.bind.'annotation'.XmlElement) $r4;

        $r6 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElements;");

        r8 = (javax.xml.bind.'annotation'.XmlElements) $r7;

        if r5 == null goto label01;

        if r8 == null goto label01;

        $r26 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r30 = $r26.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r27 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r31 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages MUTUALLY_EXCLUSIVE_ANNOTATIONS>;

        $r28 = newarray (java.lang.Object)[3];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r33 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r34 = virtualinvoke $r33.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r35 = interfaceinvoke $r32.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r38 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed seed>;

        $r39 = interfaceinvoke $r38.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r41;

        $r42 = interfaceinvoke r5.<javax.xml.bind.'annotation'.XmlElement: java.lang.Class annotationType()>();

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r28[1] = $r43;

        $r44 = interfaceinvoke r8.<javax.xml.bind.'annotation'.XmlElements: java.lang.Class annotationType()>();

        $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getName()>();

        $r28[2] = $r45;

        $r46 = virtualinvoke $r31.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r28);

        specialinvoke $r27.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r46, r5, r8);

        virtualinvoke $r30.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r27);

     label01:
        $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Boolean isRequired> = $r48;

        if r5 == null goto label02;

        $r25 = newarray (javax.xml.bind.'annotation'.XmlElement)[1];

        $r25[0] = r5;

        r47 = $r25;

        goto label03;

     label02:
        if r8 == null goto label03;

        r47 = interfaceinvoke r8.<javax.xml.bind.'annotation'.XmlElements: javax.xml.bind.'annotation'.XmlElement[] value()>();

     label03:
        if r47 != null goto label06;

        $r22 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Object getIndividualType()>();

        $r23 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z6 = interfaceinvoke $r23.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isPrimitive(java.lang.Object)>($r22);

        if $z6 == 0 goto label04;

        $z7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isCollection()>();

        if $z7 == 0 goto label05;

     label04:
        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Boolean isRequired> = $r24;

     label05:
        $r49 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        $r50 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: javax.xml.namespace.QName calcXmlName(javax.xml.bind.'annotation'.XmlElement)>(null);

        $z8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isCollection()>();

        $r51 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.TypeRefImpl createTypeRef(javax.xml.namespace.QName,java.lang.Object,boolean,java.lang.String)>($r50, $r22, $z8, null);

        interfaceinvoke $r49.<java.util.List: boolean add(java.lang.Object)>($r51);

        goto label11;

     label06:
        r52 = r47;

        i0 = lengthof r47;

        i1 = 0;

     label07:
        if i1 >= i0 goto label11;

        r13 = r52[i1];

        $r14 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: javax.xml.namespace.QName calcXmlName(javax.xml.bind.'annotation'.XmlElement)>(r13);

        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r16 = interfaceinvoke $r15.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r13, "type");

        r53 = $r16;

        $r17 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r18 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r19 = interfaceinvoke $r18.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlElement$DEFAULT;");

        $z2 = interfaceinvoke $r17.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r16, $r19);

        if $z2 == 0 goto label08;

        r53 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Object getIndividualType()>();

     label08:
        $r20 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z3 = interfaceinvoke $r20.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isPrimitive(java.lang.Object)>(r53);

        if $z3 == 0 goto label09;

        $z5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isCollection()>();

        if $z5 == 0 goto label10;

     label09:
        $z4 = interfaceinvoke r13.<javax.xml.bind.'annotation'.XmlElement: boolean required()>();

        if $z4 != 0 goto label10;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Boolean isRequired> = $r21;

     label10:
        $r54 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        $z9 = interfaceinvoke r13.<javax.xml.bind.'annotation'.XmlElement: boolean nillable()>();

        $r55 = interfaceinvoke r13.<javax.xml.bind.'annotation'.XmlElement: java.lang.String defaultValue()>();

        $r56 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.String getDefaultValue(java.lang.String)>($r55);

        $r57 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.TypeRefImpl createTypeRef(javax.xml.namespace.QName,java.lang.Object,boolean,java.lang.String)>($r14, r53, $z9, $r56);

        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>($r57);

        i1 = i1 + 1;

        goto label07;

     label11:
        $r9 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types> = $r10;

        $z0 = <com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label12;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        $z1 = interfaceinvoke $r11.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z1 == 0 goto label12;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label12:
        $r58 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        return $r58;
    }

    private java.lang.String getDefaultValue(java.lang.String)
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\u0000");

        if $z0 == 0 goto label1;

        return null;

     label1:
        return r0;
    }

    protected com.sun.xml.bind.v2.model.impl.TypeRefImpl createTypeRef(javax.xml.namespace.QName, java.lang.Object, boolean, java.lang.String)
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl $r0;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r1;
        java.lang.Object r3;
        javax.xml.namespace.QName r2;
        java.lang.String r4;
        boolean z0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        r3 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r4 := @parameter3: java.lang.String;

        $r0 = new com.sun.xml.bind.v2.model.impl.TypeRefImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: void <init>(com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl,javax.xml.namespace.QName,java.lang.Object,boolean,java.lang.String)>(r1, r2, r3, z0, r4);

        return $r0;
    }

    public boolean isValueList()
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isValueList>;

        return $z0;
    }

    public boolean isRequired()
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Boolean isRequired>;

        if $r1 != null goto label1;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List getTypes()>();

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.lang.Boolean isRequired>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public java.util.List ref()
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        java.util.List $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List ref>;

        return $r1;
    }

    public final com.sun.xml.bind.v2.model.core.PropertyKind kind()
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r1;
        com.sun.xml.bind.v2.model.core.PropertyKind $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $r0 = <com.sun.xml.bind.v2.model.core.PropertyKind: com.sun.xml.bind.v2.model.core.PropertyKind ELEMENT>;

        return $r0;
    }

    protected void link()
    {
        com.sun.xml.bind.v2.model.impl.TypeRefImpl r26, r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        com.sun.xml.bind.v2.model.core.NonElement $r14, $r21;
        java.util.List $r1, $r11;
        com.sun.xml.bind.v2.model.impl.Messages $r8, $r19;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r6, $r16;
        com.sun.xml.bind.v2.model.core.ID $r3, $r4;
        java.lang.Object[] $r7, $r17;
        java.lang.String $r10, $r23, $r24;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r9, $r18;
        java.util.Iterator $r2, $r12;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl $r5, $r15;
        java.lang.Object $r13, $r22, $r25;
        com.sun.xml.bind.v2.model.nav.Navigator $r20;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ERPropertyInfoImpl: void link()>();

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List getTypes()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r25 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.sun.xml.bind.v2.model.impl.TypeRefImpl) $r25;

        virtualinvoke r26.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: void link()>();

        goto label1;

     label2:
        $z1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isValueList()>();

        if $z1 == 0 goto label6;

        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.core.ID id()>();

        $r4 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        if $r3 == $r4 goto label5;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List types>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.sun.xml.bind.v2.model.impl.TypeRefImpl) $r13;

        $r14 = virtualinvoke r27.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $z3 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.core.NonElement: boolean isSimpleType()>();

        if $z3 != 0 goto label4;

        $r15 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r18 = $r15.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r16 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r19 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages XMLLIST_NEEDS_SIMPLETYPE>;

        $r17 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r21 = virtualinvoke r27.<com.sun.xml.bind.v2.model.impl.TypeRefImpl: com.sun.xml.bind.v2.model.core.NonElement getTarget()>();

        $r22 = interfaceinvoke $r21.<com.sun.xml.bind.v2.model.core.NonElement: java.lang.Object getType()>();

        $r23 = interfaceinvoke $r20.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r22);

        $r17[0] = $r23;

        $r24 = virtualinvoke $r19.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r17);

        specialinvoke $r16.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r24, r0);

        virtualinvoke $r18.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r16);

        goto label5;

     label4:
        goto label3;

     label5:
        $z4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean isCollection()>();

        if $z4 != 0 goto label6;

        $r5 = r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl parent>;

        $r9 = $r5.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r6 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r8 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages XMLLIST_ON_SINGLE_PROPERTY>;

        $r7 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke $r8.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r7);

        specialinvoke $r6.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r10, r0);

        virtualinvoke $r9.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r6);

     label6:
        return;
    }

    public volatile java.util.Collection ref()
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl r0;
        java.util.List $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: java.util.List ref()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/ElementPropertyInfoImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
