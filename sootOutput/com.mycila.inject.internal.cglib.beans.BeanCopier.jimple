public abstract class com.mycila.inject.internal.cglib.beans.BeanCopier extends java.lang.Object
{
    private static final com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey KEY_FACTORY;
    private static final com.mycila.inject.internal.asm.Type CONVERTER;
    private static final com.mycila.inject.internal.asm.Type BEAN_COPIER;
    private static final com.mycila.inject.internal.cglib.core.Signature COPY;
    private static final com.mycila.inject.internal.cglib.core.Signature CONVERT;
    static java.lang.Class class$net$sf$cglib$beans$BeanCopier$BeanCopierKey;
    static java.lang.Class class$net$sf$cglib$beans$BeanCopier;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanCopier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.cglib.beans.BeanCopier create(java.lang.Class, java.lang.Class, boolean)
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier $r3;
        com.mycila.inject.internal.cglib.beans.BeanCopier$Generator $r0;
        java.lang.Class r1, r2;
        boolean z0;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $r0 = new com.mycila.inject.internal.cglib.beans.BeanCopier$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void setSource(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void setTarget(java.lang.Class)>(r2);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: void setUseConverter(boolean)>(z0);

        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.beans.BeanCopier$Generator: com.mycila.inject.internal.cglib.beans.BeanCopier create()>();

        return $r3;
    }

    public abstract void copy(java.lang.Object, java.lang.Object, com.mycila.inject.internal.cglib.core.Converter);

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey access$000()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey $r0;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey KEY_FACTORY>;

        return $r0;
    }

    static com.mycila.inject.internal.asm.Type access$100()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type BEAN_COPIER>;

        return $r0;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$200()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature COPY>;

        return $r0;
    }

    static com.mycila.inject.internal.asm.Type access$300()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type CONVERTER>;

        return $r0;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$400()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature CONVERT>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey $r2;
        com.mycila.inject.internal.cglib.core.Signature $r5, $r11;
        com.mycila.inject.internal.asm.Type $r3, $r4, $r7, $r8, $r9, $r10;
        com.mycila.inject.internal.cglib.core.KeyFactory $r1;
        java.lang.Class $r0, $r12;
        com.mycila.inject.internal.asm.Type[] $r6;

        $r0 = <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier$BeanCopierKey>;

        if $r0 != null goto label1;

        $r12 = staticinvoke <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey");

        <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier$BeanCopierKey> = $r12;

        goto label2;

     label1:
        $r12 = <com.mycila.inject.internal.cglib.beans.BeanCopier: java.lang.Class class$net$sf$cglib$beans$BeanCopier$BeanCopierKey>;

     label2:
        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class)>($r12);

        $r2 = (com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey) $r1;

        <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.beans.BeanCopier$BeanCopierKey KEY_FACTORY> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.core.Converter");

        <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type CONVERTER> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanCopier");

        <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type BEAN_COPIER> = $r4;

        $r5 = new com.mycila.inject.internal.cglib.core.Signature;

        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r6 = newarray (com.mycila.inject.internal.asm.Type)[3];

        $r7 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r6[0] = $r7;

        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r6[1] = $r8;

        $r9 = <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.asm.Type CONVERTER>;

        $r6[2] = $r9;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("copy", $r10, $r6);

        <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature COPY> = $r5;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object convert(Object, Class, Object)");

        <com.mycila.inject.internal.cglib.beans.BeanCopier: com.mycila.inject.internal.cglib.core.Signature CONVERT> = $r11;

        return;
    }
}
