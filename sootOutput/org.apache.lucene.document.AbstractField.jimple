public abstract class org.apache.lucene.document.AbstractField extends java.lang.Object implements org.apache.lucene.document.Fieldable
{
    protected java.lang.String name;
    protected boolean storeTermVector;
    protected boolean storeOffsetWithTermVector;
    protected boolean storePositionWithTermVector;
    protected boolean omitNorms;
    protected boolean isStored;
    protected boolean isIndexed;
    protected boolean isTokenized;
    protected boolean isBinary;
    protected boolean lazy;
    protected org.apache.lucene.index.FieldInfo$IndexOptions indexOptions;
    protected float boost;
    protected java.lang.Object fieldsData;
    protected org.apache.lucene.analysis.TokenStream tokenStream;
    protected int binaryLength;
    protected int binaryOffset;

    protected void <init>()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.AbstractField: java.lang.String name> = "body";

        r0.<org.apache.lucene.document.AbstractField: boolean storeTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean storeOffsetWithTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean storePositionWithTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean omitNorms> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean isStored> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean isIndexed> = 1;

        r0.<org.apache.lucene.document.AbstractField: boolean isTokenized> = 1;

        r0.<org.apache.lucene.document.AbstractField: boolean isBinary> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean lazy> = 0;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r1;

        r0.<org.apache.lucene.document.AbstractField: float boost> = 1.0F;

        r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData> = null;

        return;
    }

    protected void <init>(java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;
        org.apache.lucene.document.Field$Store r4;
        org.apache.lucene.document.Field$Index r5;
        org.apache.lucene.document.Field$TermVector r6;
        org.apache.lucene.document.AbstractField r0;
        java.lang.NullPointerException $r7;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.document.AbstractField;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.lucene.document.Field$Store;

        r5 := @parameter2: org.apache.lucene.document.Field$Index;

        r6 := @parameter3: org.apache.lucene.document.Field$TermVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.AbstractField: java.lang.String name> = "body";

        r0.<org.apache.lucene.document.AbstractField: boolean storeTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean storeOffsetWithTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean storePositionWithTermVector> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean omitNorms> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean isStored> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean isIndexed> = 1;

        r0.<org.apache.lucene.document.AbstractField: boolean isTokenized> = 1;

        r0.<org.apache.lucene.document.AbstractField: boolean isBinary> = 0;

        r0.<org.apache.lucene.document.AbstractField: boolean lazy> = 0;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r1;

        r0.<org.apache.lucene.document.AbstractField: float boost> = 1.0F;

        r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData> = null;

        if r2 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("name cannot be null");

        throw $r7;

     label1:
        $r3 = staticinvoke <org.apache.lucene.util.StringHelper: java.lang.String intern(java.lang.String)>(r2);

        r0.<org.apache.lucene.document.AbstractField: java.lang.String name> = $r3;

        $z0 = virtualinvoke r4.<org.apache.lucene.document.Field$Store: boolean isStored()>();

        r0.<org.apache.lucene.document.AbstractField: boolean isStored> = $z0;

        $z1 = virtualinvoke r5.<org.apache.lucene.document.Field$Index: boolean isIndexed()>();

        r0.<org.apache.lucene.document.AbstractField: boolean isIndexed> = $z1;

        $z2 = virtualinvoke r5.<org.apache.lucene.document.Field$Index: boolean isAnalyzed()>();

        r0.<org.apache.lucene.document.AbstractField: boolean isTokenized> = $z2;

        $z3 = virtualinvoke r5.<org.apache.lucene.document.Field$Index: boolean omitNorms()>();

        r0.<org.apache.lucene.document.AbstractField: boolean omitNorms> = $z3;

        r0.<org.apache.lucene.document.AbstractField: boolean isBinary> = 0;

        virtualinvoke r0.<org.apache.lucene.document.AbstractField: void setStoreTermVector(org.apache.lucene.document.Field$TermVector)>(r6);

        return;
    }

    public void setBoost(float)
    {
        float f0;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        f0 := @parameter0: float;

        r0.<org.apache.lucene.document.AbstractField: float boost> = f0;

        return;
    }

    public float getBoost()
    {
        float $f0;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $f0 = r0.<org.apache.lucene.document.AbstractField: float boost>;

        return $f0;
    }

    public java.lang.String name()
    {
        java.lang.String $r1;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $r1 = r0.<org.apache.lucene.document.AbstractField: java.lang.String name>;

        return $r1;
    }

    protected void setStoreTermVector(org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.document.Field$TermVector r1;
        org.apache.lucene.document.AbstractField r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.document.AbstractField;

        r1 := @parameter0: org.apache.lucene.document.Field$TermVector;

        $z0 = virtualinvoke r1.<org.apache.lucene.document.Field$TermVector: boolean isStored()>();

        r0.<org.apache.lucene.document.AbstractField: boolean storeTermVector> = $z0;

        $z1 = virtualinvoke r1.<org.apache.lucene.document.Field$TermVector: boolean withPositions()>();

        r0.<org.apache.lucene.document.AbstractField: boolean storePositionWithTermVector> = $z1;

        $z2 = virtualinvoke r1.<org.apache.lucene.document.Field$TermVector: boolean withOffsets()>();

        r0.<org.apache.lucene.document.AbstractField: boolean storeOffsetWithTermVector> = $z2;

        return;
    }

    public final boolean isStored()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isStored>;

        return $z0;
    }

    public final boolean isIndexed()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isIndexed>;

        return $z0;
    }

    public final boolean isTokenized()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isTokenized>;

        return $z0;
    }

    public final boolean isTermVectorStored()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean storeTermVector>;

        return $z0;
    }

    public boolean isStoreOffsetWithTermVector()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean storeOffsetWithTermVector>;

        return $z0;
    }

    public boolean isStorePositionWithTermVector()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean storePositionWithTermVector>;

        return $z0;
    }

    public final boolean isBinary()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isBinary>;

        return $z0;
    }

    public byte[] getBinaryValue()
    {
        byte[] $r1;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $r1 = virtualinvoke r0.<org.apache.lucene.document.AbstractField: byte[] getBinaryValue(byte[])>(null);

        return $r1;
    }

    public byte[] getBinaryValue(byte[])
    {
        byte[] $r2, $r3, r5;
        org.apache.lucene.document.AbstractField r0;
        java.lang.Object $r1, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.document.AbstractField;

        r5 := @parameter0: byte[];

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isBinary>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        $z1 = $r4 instanceof byte[];

        if $z1 == 0 goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        $r2 = (byte[]) $r1;

        $r3 = (byte[]) $r2;

        return $r3;

     label2:
        return null;
    }

    public int getBinaryLength()
    {
        byte[] $r3, $r4;
        org.apache.lucene.document.AbstractField r0;
        int $i0, $i1;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean isBinary>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.apache.lucene.document.AbstractField: int binaryLength>;

        return $i1;

     label1:
        $r1 = r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        $z1 = $r1 instanceof byte[];

        if $z1 == 0 goto label2;

        $r2 = r0.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        $r3 = (byte[]) $r2;

        $r4 = (byte[]) $r3;

        $i0 = lengthof $r4;

        return $i0;

     label2:
        return 0;
    }

    public int getBinaryOffset()
    {
        int $i0;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $i0 = r0.<org.apache.lucene.document.AbstractField: int binaryOffset>;

        return $i0;
    }

    public boolean getOmitNorms()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean omitNorms>;

        return $z0;
    }

    public boolean getOmitTermFreqAndPositions()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r2;
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $r2 = r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $r1 = r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        return $r1;
    }

    public void setOmitNorms(boolean)
    {
        org.apache.lucene.document.AbstractField r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.document.AbstractField: boolean omitNorms> = z0;

        return;
    }

    public void setOmitTermFreqAndPositions(boolean)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r2;
        org.apache.lucene.document.AbstractField r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r2;

        goto label2;

     label1:
        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r1;

     label2:
        return;
    }

    public void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions r1;
        org.apache.lucene.document.AbstractField r0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo$IndexOptions;

        r0.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = r1;

        return;
    }

    public boolean isLazy()
    {
        org.apache.lucene.document.AbstractField r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.AbstractField;

        $z0 = r0.<org.apache.lucene.document.AbstractField: boolean lazy>;

        return $z0;
    }

    public final java.lang.String toString()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.lucene.index.FieldInfo$IndexOptions $r2, $r3, $r7;
        org.apache.lucene.document.AbstractField r1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5, $r6;

        r1 := @this: org.apache.lucene.document.AbstractField;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = r1.<org.apache.lucene.document.AbstractField: boolean isStored>;

        if $z0 == 0 goto label01;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stored");

     label01:
        $z1 = r1.<org.apache.lucene.document.AbstractField: boolean isIndexed>;

        if $z1 == 0 goto label03;

        $i5 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i5 <= 0 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label02:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indexed");

     label03:
        $z4 = r1.<org.apache.lucene.document.AbstractField: boolean isTokenized>;

        if $z4 == 0 goto label05;

        $i4 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label04:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tokenized");

     label05:
        $z5 = r1.<org.apache.lucene.document.AbstractField: boolean storeTermVector>;

        if $z5 == 0 goto label07;

        $i3 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label06;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label06:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("termVector");

     label07:
        $z6 = r1.<org.apache.lucene.document.AbstractField: boolean storeOffsetWithTermVector>;

        if $z6 == 0 goto label09;

        $i2 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label08;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label08:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("termVectorOffsets");

     label09:
        $z7 = r1.<org.apache.lucene.document.AbstractField: boolean storePositionWithTermVector>;

        if $z7 == 0 goto label11;

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label10:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("termVectorPosition");

     label11:
        $z8 = r1.<org.apache.lucene.document.AbstractField: boolean isBinary>;

        if $z8 == 0 goto label13;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label12;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label12:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("binary");

     label13:
        $z9 = r1.<org.apache.lucene.document.AbstractField: boolean omitNorms>;

        if $z9 == 0 goto label14;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",omitNorms");

     label14:
        $r3 = r1.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r2 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        if $r3 == $r2 goto label15;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",indexOptions=");

        $r7 = r1.<org.apache.lucene.document.AbstractField: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label15:
        $z2 = r1.<org.apache.lucene.document.AbstractField: boolean lazy>;

        if $z2 == 0 goto label16;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",lazy");

     label16:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r4 = r1.<org.apache.lucene.document.AbstractField: java.lang.String name>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = r1.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        if $r5 == null goto label17;

        $z3 = r1.<org.apache.lucene.document.AbstractField: boolean lazy>;

        if $z3 != 0 goto label17;

        $r6 = r1.<org.apache.lucene.document.AbstractField: java.lang.Object fieldsData>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

     label17:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
