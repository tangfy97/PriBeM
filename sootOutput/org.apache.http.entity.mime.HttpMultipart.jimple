public class org.apache.http.entity.mime.HttpMultipart extends java.lang.Object
{
    private static final org.apache.http.util.ByteArrayBuffer FIELD_SEP;
    private static final org.apache.http.util.ByteArrayBuffer CR_LF;
    private static final org.apache.http.util.ByteArrayBuffer TWO_DASHES;
    private final java.lang.String subType;
    private final java.nio.charset.Charset charset;
    private final java.lang.String boundary;
    private final java.util.List parts;
    private final org.apache.http.entity.mime.HttpMultipartMode mode;

    private static org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset, java.lang.String)
    {
        byte[] $r5;
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer $r3;
        java.nio.charset.Charset r0;
        int $i0, $i1, $i2;
        java.lang.String r1;
        org.apache.http.util.ByteArrayBuffer $r4;

        r0 := @parameter0: java.nio.charset.Charset;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);

        $r3 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r2);

        $r4 = new org.apache.http.util.ByteArrayBuffer;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r4.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r4.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r5, $i1, $i2);

        return $r4;
    }

    private static void writeBytes(org.apache.http.util.ByteArrayBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        int $i0;
        org.apache.http.util.ByteArrayBuffer r1;

        r1 := @parameter0: org.apache.http.util.ByteArrayBuffer;

        r0 := @parameter1: java.io.OutputStream;

        $r2 = virtualinvoke r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $i0 = virtualinvoke r1.<org.apache.http.util.ByteArrayBuffer: int length()>();

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        return;
    }

    private static void writeBytes(java.lang.String, java.nio.charset.Charset, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.nio.charset.Charset r0;
        java.lang.String r1;
        org.apache.http.util.ByteArrayBuffer $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: java.io.OutputStream;

        $r2 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>(r0, r1);

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r2, r3);

        return;
    }

    private static void writeBytes(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.nio.charset.Charset $r1;
        java.lang.String r0;
        org.apache.http.util.ByteArrayBuffer $r2;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.OutputStream;

        $r1 = <org.apache.http.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r2 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r1, r0);

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r2, r3);

        return;
    }

    private static void writeField(org.apache.http.entity.mime.MinimalField, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.String $r1, $r4;
        org.apache.http.entity.mime.MinimalField r0;
        org.apache.http.util.ByteArrayBuffer $r3, $r5;

        r0 := @parameter0: org.apache.http.entity.mime.MinimalField;

        r2 := @parameter1: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.http.entity.mime.MinimalField: java.lang.String getName()>();

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.io.OutputStream)>($r1, r2);

        $r3 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, r2);

        $r4 = virtualinvoke r0.<org.apache.http.entity.mime.MinimalField: java.lang.String getBody()>();

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.io.OutputStream)>($r4, r2);

        $r5 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, r2);

        return;
    }

    private static void writeField(org.apache.http.entity.mime.MinimalField, java.nio.charset.Charset, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.nio.charset.Charset r2;
        java.lang.String $r1, $r5;
        org.apache.http.entity.mime.MinimalField r0;
        org.apache.http.util.ByteArrayBuffer $r4, $r6;

        r0 := @parameter0: org.apache.http.entity.mime.MinimalField;

        r2 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.http.entity.mime.MinimalField: java.lang.String getName()>();

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r1, r2, r3);

        $r4 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r4, r3);

        $r5 = virtualinvoke r0.<org.apache.http.entity.mime.MinimalField: java.lang.String getBody()>();

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r5, r2, r3);

        $r6 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r6, r3);

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset, java.lang.String, org.apache.http.entity.mime.HttpMultipartMode)
    {
        org.apache.http.entity.mime.HttpMultipartMode r5;
        java.lang.IllegalArgumentException $r6, $r7;
        java.util.ArrayList $r4;
        org.apache.http.entity.mime.HttpMultipart r0;
        java.nio.charset.Charset r3, $r8;
        java.lang.String r1, r2;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: java.lang.String;

        r5 := @parameter3: org.apache.http.entity.mime.HttpMultipartMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multipart subtype may not be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multipart boundary may not be null");

        throw $r6;

     label2:
        r0.<org.apache.http.entity.mime.HttpMultipart: java.lang.String subType> = r1;

        if r3 == null goto label3;

        $r8 = r3;

        goto label4;

     label3:
        $r8 = <org.apache.http.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

     label4:
        r0.<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset charset> = $r8;

        r0.<org.apache.http.entity.mime.HttpMultipart: java.lang.String boundary> = r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.http.entity.mime.HttpMultipart: java.util.List parts> = $r4;

        r0.<org.apache.http.entity.mime.HttpMultipart: org.apache.http.entity.mime.HttpMultipartMode mode> = r5;

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset, java.lang.String)
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.nio.charset.Charset r2;
        org.apache.http.entity.mime.HttpMultipartMode $r4;
        java.lang.String r1, r3;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        r3 := @parameter2: java.lang.String;

        $r4 = <org.apache.http.entity.mime.HttpMultipartMode: org.apache.http.entity.mime.HttpMultipartMode STRICT>;

        specialinvoke r0.<org.apache.http.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String,org.apache.http.entity.mime.HttpMultipartMode)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String)>(r1, null, r2);

        return;
    }

    public java.lang.String getSubType()
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.lang.String subType>;

        return $r1;
    }

    public java.nio.charset.Charset getCharset()
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.nio.charset.Charset $r1;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        return $r1;
    }

    public org.apache.http.entity.mime.HttpMultipartMode getMode()
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        org.apache.http.entity.mime.HttpMultipartMode $r1;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: org.apache.http.entity.mime.HttpMultipartMode mode>;

        return $r1;
    }

    public java.util.List getBodyParts()
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.util.List $r1;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.util.List parts>;

        return $r1;
    }

    public void addBodyPart(org.apache.http.entity.mime.FormBodyPart)
    {
        org.apache.http.entity.mime.HttpMultipart r1;
        java.util.List $r2;
        org.apache.http.entity.mime.FormBodyPart r0;

        r1 := @this: org.apache.http.entity.mime.HttpMultipart;

        r0 := @parameter0: org.apache.http.entity.mime.FormBodyPart;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.entity.mime.HttpMultipart: java.util.List parts>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public java.lang.String getBoundary()
    {
        org.apache.http.entity.mime.HttpMultipart r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.lang.String boundary>;

        return $r1;
    }

    private void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode, java.io.OutputStream, boolean) throws java.io.IOException
    {
        org.apache.http.entity.mime.MinimalField $r18, $r25, r29;
        int[] $r16;
        org.apache.http.util.ByteArrayBuffer $r3, $r7, $r8, $r9, $r12, $r13, $r22, $r30;
        boolean $z0, z1, $z2;
        java.util.List $r4;
        org.apache.http.entity.mime.FormBodyPart r11;
        java.nio.charset.Charset $r1, $r19, $r26;
        int $i0, $i1;
        java.lang.String $r2, $r21;
        java.io.OutputStream r6;
        java.util.Iterator $r5, $r27;
        org.apache.http.entity.mime.Header $r14, $r17, $r24;
        org.apache.http.entity.mime.HttpMultipartMode r15;
        org.apache.http.entity.mime.HttpMultipart r0;
        java.lang.Object $r10, $r28;
        org.apache.http.entity.mime.content.ContentBody $r20, $r23;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        r15 := @parameter0: org.apache.http.entity.mime.HttpMultipartMode;

        r6 := @parameter1: java.io.OutputStream;

        z1 := @parameter2: boolean;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke r0.<org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()>();

        $r3 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r1, $r2);

        $r4 = r0.<org.apache.http.entity.mime.HttpMultipart: java.util.List parts>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.http.entity.mime.FormBodyPart) $r10;

        $r12 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r12, r6);

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, r6);

        $r13 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r13, r6);

        $r14 = virtualinvoke r11.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.Header getHeader()>();

        $r16 = <org.apache.http.entity.mime.HttpMultipart$1: int[] $SwitchMap$org$apache$http$entity$mime$HttpMultipartMode>;

        $i0 = virtualinvoke r15.<org.apache.http.entity.mime.HttpMultipartMode: int ordinal()>();

        $i1 = $r16[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label5;
            default: goto label6;
        };

     label2:
        $r27 = virtualinvoke $r14.<org.apache.http.entity.mime.Header: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.http.entity.mime.MinimalField) $r28;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeField(org.apache.http.entity.mime.MinimalField,java.io.OutputStream)>(r29, r6);

        goto label3;

     label4:
        goto label6;

     label5:
        $r17 = virtualinvoke r11.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.Header getHeader()>();

        $r18 = virtualinvoke $r17.<org.apache.http.entity.mime.Header: org.apache.http.entity.mime.MinimalField getField(java.lang.String)>("Content-Disposition");

        $r19 = r0.<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)>($r18, $r19, r6);

        $r20 = virtualinvoke r11.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.content.ContentBody getBody()>();

        $r21 = interfaceinvoke $r20.<org.apache.http.entity.mime.content.ContentBody: java.lang.String getFilename()>();

        if $r21 == null goto label6;

        $r24 = virtualinvoke r11.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.Header getHeader()>();

        $r25 = virtualinvoke $r24.<org.apache.http.entity.mime.Header: org.apache.http.entity.mime.MinimalField getField(java.lang.String)>("Content-Type");

        $r26 = r0.<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)>($r25, $r26, r6);

     label6:
        $r30 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r30, r6);

        if z1 == 0 goto label7;

        $r23 = virtualinvoke r11.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.content.ContentBody getBody()>();

        interfaceinvoke $r23.<org.apache.http.entity.mime.content.ContentBody: void writeTo(java.io.OutputStream)>(r6);

     label7:
        $r22 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r22, r6);

        goto label1;

     label8:
        $r7 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r7, r6);

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, r6);

        $r8 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r8, r6);

        $r9 = <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r9, r6);

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.http.entity.mime.HttpMultipart r0;
        org.apache.http.entity.mime.HttpMultipartMode $r2;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.apache.http.entity.mime.HttpMultipart: org.apache.http.entity.mime.HttpMultipartMode mode>;

        specialinvoke r0.<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>($r2, r1, 1);

        return;
    }

    public long getTotalLength()
    {
        byte[] $r5;
        java.io.ByteArrayOutputStream $r10;
        long $l1, $l2, $l3, l5;
        byte $b4;
        int $i0, $i6;
        boolean $z0;
        java.util.Iterator $r2;
        org.apache.http.entity.mime.HttpMultipartMode $r4;
        java.io.IOException $r8;
        org.apache.http.entity.mime.HttpMultipart r0;
        java.util.List $r1;
        org.apache.http.entity.mime.FormBodyPart r9;
        java.lang.Object $r6;
        org.apache.http.entity.mime.content.ContentBody $r7;

        r0 := @this: org.apache.http.entity.mime.HttpMultipart;

        l5 = 0L;

        $r1 = r0.<org.apache.http.entity.mime.HttpMultipart: java.util.List parts>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.http.entity.mime.FormBodyPart) $r6;

        $r7 = virtualinvoke r9.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.content.ContentBody getBody()>();

        $l3 = interfaceinvoke $r7.<org.apache.http.entity.mime.content.ContentBody: long getContentLength()>();

        $b4 = $l3 cmp 0L;

        $i6 = (int) $b4;

        if $i6 < 0 goto label2;

        l5 = l5 + $l3;

        goto label3;

     label2:
        return -1L;

     label3:
        goto label1;

     label4:
        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

     label5:
        $r4 = r0.<org.apache.http.entity.mime.HttpMultipart: org.apache.http.entity.mime.HttpMultipartMode mode>;

        specialinvoke r0.<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>($r4, $r10, 0);

        $r5 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r5;

        $l1 = (long) $i0;

        $l2 = l5 + $l1;

     label6:
        return $l2;

     label7:
        $r8 := @caughtexception;

        return -1L;

        catch java.io.IOException from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0, $r2, $r4;
        org.apache.http.util.ByteArrayBuffer $r1, $r3, $r5;

        $r0 = <org.apache.http.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r1 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r0, ": ");

        <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP> = $r1;

        $r2 = <org.apache.http.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r3 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r2, "\r\n");

        <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF> = $r3;

        $r4 = <org.apache.http.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r5 = staticinvoke <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r4, "--");

        <org.apache.http.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES> = $r5;

        return;
    }
}
