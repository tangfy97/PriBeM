public class org.dom4j.datatype.SchemaParser extends java.lang.Object
{
    private static final org.dom4j.Namespace XSD_NAMESPACE;
    private static final org.dom4j.QName XSD_ELEMENT;
    private static final org.dom4j.QName XSD_ATTRIBUTE;
    private static final org.dom4j.QName XSD_SIMPLETYPE;
    private static final org.dom4j.QName XSD_COMPLEXTYPE;
    private static final org.dom4j.QName XSD_RESTRICTION;
    private static final org.dom4j.QName XSD_SEQUENCE;
    private static final org.dom4j.QName XSD_CHOICE;
    private static final org.dom4j.QName XSD_ALL;
    private static final org.dom4j.QName XSD_INCLUDE;
    private org.dom4j.datatype.DatatypeDocumentFactory documentFactory;
    private java.util.Map dataTypeCache;
    private org.dom4j.datatype.NamedTypeResolver namedTypeResolver;
    private org.dom4j.Namespace targetNamespace;

    public void <init>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r1;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton>;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void <init>(org.dom4j.datatype.DatatypeDocumentFactory)>($r1);

        return;
    }

    public void <init>(org.dom4j.datatype.DatatypeDocumentFactory)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r2;
        org.dom4j.datatype.NamedTypeResolver $r3;
        org.dom4j.datatype.SchemaParser r0;
        java.util.HashMap $r1;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r2 := @parameter0: org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache> = $r1;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory> = r2;

        $r3 = new org.dom4j.datatype.NamedTypeResolver;

        specialinvoke $r3.<org.dom4j.datatype.NamedTypeResolver: void <init>(org.dom4j.DocumentFactory)>(r2);

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver> = $r3;

        return;
    }

    public void build(org.dom4j.Document)
    {
        org.dom4j.Document r1;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r1 := @parameter0: org.dom4j.Document;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace> = null;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void internalBuild(org.dom4j.Document)>(r1);

        return;
    }

    public void build(org.dom4j.Document, org.dom4j.Namespace)
    {
        org.dom4j.Document r2;
        org.dom4j.Namespace r1;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r2 := @parameter0: org.dom4j.Document;

        r1 := @parameter1: org.dom4j.Namespace;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace> = r1;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void internalBuild(org.dom4j.Document)>(r2);

        return;
    }

    private synchronized void internalBuild(org.dom4j.Document)
    {
        org.dom4j.io.SAXReader $r23;
        org.dom4j.datatype.NamedTypeResolver $r11;
        org.xml.sax.EntityResolver $r21;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r31;
        org.dom4j.Document r0, $r24;
        org.dom4j.datatype.DatatypeDocumentFactory $r17;
        java.lang.StringBuffer $r25, $r26, $r27, $r32, $r34, $r35, $r37, $r39, $r40, $r43, $r44, $r45;
        java.lang.String $r20, $r28, $r36, $r41, $r46;
        org.dom4j.datatype.InvalidSchemaException $r29, $r30, $r42;
        java.io.PrintStream $r33, $r38;
        org.xml.sax.InputSource $r22;
        java.util.Iterator $r3, $r5, $r7, $r9;
        org.dom4j.datatype.SchemaParser r10;
        org.dom4j.Element $r1, $r13, $r15, $r18, r47;
        org.dom4j.QName $r2, $r4, $r6, $r8;
        java.lang.Object $r12, $r14, $r16, $r19;

        r10 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Document;

        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r1 == null goto label15;

        $r2 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_INCLUDE>;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r2);

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r19 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r47 = (org.dom4j.Element) $r19;

        $r20 = interfaceinvoke r47.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("schemaLocation");

        $r21 = interfaceinvoke r0.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

     label02:
        if $r21 != null goto label03;

        $r30 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r30.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>("No EntityResolver available");

        throw $r30;

     label03:
        $r22 = interfaceinvoke $r21.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, $r20);

        if $r22 != null goto label04;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the schema URI: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r29 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r29.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r28);

        throw $r29;

     label04:
        $r23 = new org.dom4j.io.SAXReader;

        specialinvoke $r23.<org.dom4j.io.SAXReader: void <init>()>();

        $r24 = virtualinvoke $r23.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r22);

        virtualinvoke r10.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document)>($r24);

     label05:
        goto label07;

     label06:
        $r31 := @caughtexception;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r36);

        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r31);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r41);

        virtualinvoke $r31.<java.lang.Exception: void printStackTrace()>();

        $r42 = new org.dom4j.datatype.InvalidSchemaException;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r42.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r46);

        throw $r42;

     label07:
        goto label01;

     label08:
        $r4 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT>;

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r4);

     label09:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r16 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (org.dom4j.Element) $r16;

        $r17 = r10.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        specialinvoke r10.<org.dom4j.datatype.SchemaParser: void onDatatypeElement(org.dom4j.Element,org.dom4j.DocumentFactory)>($r18, $r17);

        goto label09;

     label10:
        $r6 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r7 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r6);

     label11:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.dom4j.Element) $r14;

        specialinvoke r10.<org.dom4j.datatype.SchemaParser: void onNamedSchemaSimpleType(org.dom4j.Element)>($r15);

        goto label11;

     label12:
        $r8 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE>;

        $r9 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r8);

     label13:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.dom4j.Element) $r12;

        specialinvoke r10.<org.dom4j.datatype.SchemaParser: void onNamedSchemaComplexType(org.dom4j.Element)>($r13);

        goto label13;

     label14:
        $r11 = r10.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r11.<org.dom4j.datatype.NamedTypeResolver: void resolveNamedTypes()>();

     label15:
        return;

        catch java.lang.Exception from label02 to label05 with label06;
    }

    private void onDatatypeElement(org.dom4j.Element, org.dom4j.DocumentFactory)
    {
        org.dom4j.DocumentFactory r15;
        org.dom4j.datatype.DatatypeElementFactory $r5;
        org.dom4j.datatype.NamedTypeResolver $r16;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        org.dom4j.datatype.SchemaParser r3;
        com.sun.msv.datatype.xsd.XSDatatype $r12, $r13;
        org.dom4j.Element r0, $r7, $r11, $r18;
        org.dom4j.QName $r4, $r6, $r8, $r14, $r17;
        java.lang.Object $r10;

        r3 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        r15 := @parameter1: org.dom4j.DocumentFactory;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r2 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        $r4 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r1);

        $r5 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)>($r4);

        if $r2 == null goto label3;

        $r13 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r2);

        if $r13 == null goto label1;

        virtualinvoke $r5.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r4, $r13);

        goto label2;

     label1:
        $r14 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r2);

        $r16 = r3.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r16.<org.dom4j.datatype.NamedTypeResolver: void registerTypedElement(org.dom4j.Element,org.dom4j.QName,org.dom4j.DocumentFactory)>(r0, $r14, r15);

     label2:
        return;

     label3:
        $r6 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r7 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r6);

        if $r7 == null goto label4;

        $r12 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r7);

        if $r12 == null goto label4;

        virtualinvoke $r5.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r4, $r12);

     label4:
        $r17 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE>;

        $r18 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r17);

        if $r18 == null goto label5;

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onSchemaComplexType(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r18, $r5);

     label5:
        $r8 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE>;

        $r9 = interfaceinvoke r0.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r8);

        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

     label6:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.dom4j.Element) $r10;

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onDatatypeAttribute(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory,org.dom4j.Element)>(r0, $r5, $r11);

        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label6;

     label7:
        return;
    }

    private void onNamedSchemaComplexType(org.dom4j.Element)
    {
        org.dom4j.datatype.DatatypeElementFactory $r5;
        org.dom4j.datatype.NamedTypeResolver $r6;
        org.dom4j.datatype.SchemaParser r3;
        org.dom4j.Element r0;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.Attribute $r1;

        r3 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("name");

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getText()>();

        $r4 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r2);

        $r5 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)>($r4);

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onSchemaComplexType(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>(r0, $r5);

        $r6 = r3.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r6.<org.dom4j.datatype.NamedTypeResolver: void registerComplexType(org.dom4j.QName,org.dom4j.DocumentFactory)>($r4, $r5);

        return;
    }

    private void onSchemaComplexType(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory)
    {
        org.dom4j.datatype.DatatypeElementFactory r10;
        java.lang.String $r12;
        boolean $z0;
        java.util.Iterator $r2;
        org.dom4j.datatype.SchemaParser r9;
        com.sun.msv.datatype.xsd.XSDatatype $r14;
        org.dom4j.Element r0, $r4, $r6, $r8, r15;
        org.dom4j.QName $r1, $r3, $r5, $r7, $r13;
        java.lang.Object $r11;

        r9 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        r10 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        $r1 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE>;

        $r2 = interfaceinvoke r0.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.dom4j.Element) $r11;

        $r12 = interfaceinvoke r15.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r13 = specialinvoke r9.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r12);

        $r14 = specialinvoke r9.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)>(r15);

        if $r14 == null goto label2;

        virtualinvoke r10.<org.dom4j.datatype.DatatypeElementFactory: void setAttributeXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r13, $r14);

     label2:
        goto label1;

     label3:
        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SEQUENCE>;

        $r4 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r3);

        if $r4 == null goto label4;

        specialinvoke r9.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r4, r10);

     label4:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_CHOICE>;

        $r6 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r5);

        if $r6 == null goto label5;

        specialinvoke r9.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r6, r10);

     label5:
        $r7 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ALL>;

        $r8 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r7);

        if $r8 == null goto label6;

        specialinvoke r9.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r8, r10);

     label6:
        return;
    }

    private void onChildElements(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory)
    {
        java.util.Iterator $r2;
        org.dom4j.datatype.SchemaParser r5;
        org.dom4j.datatype.DatatypeElementFactory r6;
        org.dom4j.Element r0, r4;
        org.dom4j.QName $r1;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        r6 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        $r1 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT>;

        $r2 = interfaceinvoke r0.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.dom4j.Element) $r3;

        specialinvoke r5.<org.dom4j.datatype.SchemaParser: void onDatatypeElement(org.dom4j.Element,org.dom4j.DocumentFactory)>(r4, r6);

        goto label1;

     label2:
        return;
    }

    private void onDatatypeAttribute(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory, org.dom4j.Element)
    {
        java.io.PrintStream $r7;
        org.dom4j.datatype.SchemaParser r2;
        org.dom4j.datatype.DatatypeElementFactory r13;
        java.lang.StringBuffer $r6, $r8, $r9, $r10, $r11;
        com.sun.msv.datatype.xsd.XSDatatype $r4;
        org.dom4j.Element r0, r14;
        org.dom4j.QName $r3;
        java.lang.String $r1, $r5, $r12;

        r2 := @this: org.dom4j.datatype.SchemaParser;

        r14 := @parameter0: org.dom4j.Element;

        r13 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        r0 := @parameter2: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r3 = specialinvoke r2.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r1);

        $r4 = specialinvoke r2.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)>(r0);

        if $r4 == null goto label1;

        virtualinvoke r13.<org.dom4j.datatype.DatatypeElementFactory: void setAttributeXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r3, $r4);

        goto label2;

     label1:
        $r5 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: Couldn\'t find XSDatatype for type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" attribute: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label2:
        return;
    }

    private com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)
    {
        org.dom4j.datatype.SchemaParser r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10;
        com.sun.msv.datatype.xsd.XSDatatype r13;
        org.dom4j.Element r0, $r3;
        org.dom4j.QName $r2;
        java.lang.String $r1, $r5, $r11;
        org.dom4j.datatype.InvalidSchemaException $r12;

        r4 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r1 == null goto label1;

        r13 = specialinvoke r4.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r1);

        goto label3;

     label1:
        $r2 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r3 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r2);

        if $r3 != null goto label2;

        $r5 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The attribute: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has no type attribute and does not contain a ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<simpleType/> element");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r12.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r11);

        throw $r12;

     label2:
        r13 = specialinvoke r4.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r3);

     label3:
        return r13;
    }

    private void onNamedSchemaSimpleType(org.dom4j.Element)
    {
        org.dom4j.datatype.NamedTypeResolver $r6;
        org.dom4j.datatype.SchemaParser r3;
        com.sun.msv.datatype.xsd.XSDatatype $r5;
        org.dom4j.Element r0;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.Attribute $r1;

        r3 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("name");

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getText()>();

        $r4 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r2);

        $r5 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>(r0);

        $r6 = r3.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r6.<org.dom4j.datatype.NamedTypeResolver: void registerSimpleType(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r4, $r5);

        return;
    }

    private com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r12, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r7, $r8, $r17, $r25;
        org.dom4j.datatype.SchemaParser r3;
        com.sun.msv.datatype.xsd.XSDatatype $r11, $r18, $r19;
        org.dom4j.Element r0, $r2, $r10;
        org.dom4j.QName $r1, $r9;

        r3 := @this: org.dom4j.datatype.SchemaParser;

        r0 := @parameter0: org.dom4j.Element;

        $r1 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_RESTRICTION>;

        $r2 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r1);

        if $r2 == null goto label6;

        $r8 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("base");

        if $r8 == null goto label3;

        $r18 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r8);

        if $r18 != null goto label1;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid base type: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" when trying to build restriction: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r25);

        goto label2;

     label1:
        $r19 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype deriveSimpleType(com.sun.msv.datatype.xsd.XSDatatype,org.dom4j.Element)>($r18, $r2);

        return $r19;

     label2:
        goto label5;

     label3:
        $r9 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r10 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r9);

        if $r10 != null goto label4;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The simpleType element: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must contain a base attribute or simpleType");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" element");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r17);

        goto label5;

     label4:
        $r11 = specialinvoke r3.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r10);

        return $r11;

     label5:
        goto label7;

     label6:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No <restriction>. Could not create XSDatatype for simpleType: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r3.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r7);

     label7:
        return null;
    }

    private com.sun.msv.datatype.xsd.XSDatatype deriveSimpleType(com.sun.msv.datatype.xsd.XSDatatype, org.dom4j.Element)
    {
        java.lang.Throwable $r9;
        com.sun.msv.datatype.xsd.TypeIncubator $r18;
        com.sun.msv.datatype.xsd.XSDatatypeImpl $r4;
        org.relaxng.datatype.DatatypeException $r21;
        java.lang.StringBuffer $r12, $r14, $r15, $r16, $r19;
        java.lang.String $r7, $r8, $r13, $r17;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.dom4j.datatype.SchemaParser r10;
        com.sun.msv.datatype.xsd.XSDatatype r1, $r20;
        org.dom4j.Element r2, r6;
        java.lang.Object $r5;

        r10 := @this: org.dom4j.datatype.SchemaParser;

        r1 := @parameter0: com.sun.msv.datatype.xsd.XSDatatype;

        r2 := @parameter1: org.dom4j.Element;

        $r18 = new com.sun.msv.datatype.xsd.TypeIncubator;

        specialinvoke $r18.<com.sun.msv.datatype.xsd.TypeIncubator: void <init>(com.sun.msv.datatype.xsd.XSDatatype)>(r1);

     label1:
        $r3 = interfaceinvoke r2.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.dom4j.Element) $r5;

        $r7 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getName()>();

        $r8 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("value");

        $z1 = staticinvoke <org.dom4j.util.AttributeHelper: boolean booleanValue(org.dom4j.Element,java.lang.String)>(r6, "fixed");

        virtualinvoke $r18.<com.sun.msv.datatype.xsd.TypeIncubator: void addFacet(java.lang.String,java.lang.String,boolean,org.relaxng.datatype.ValidationContext)>($r7, $r8, $z1, null);

        goto label2;

     label3:
        $r4 = virtualinvoke $r18.<com.sun.msv.datatype.xsd.TypeIncubator: com.sun.msv.datatype.xsd.XSDatatypeImpl derive(java.lang.String,java.lang.String)>("", null);

     label4:
        $r20 = (com.sun.msv.datatype.xsd.XSDatatype) $r4;

        return $r20;

     label5:
        $r9 := @caughtexception;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid restriction: ");

        $r21 = (org.relaxng.datatype.DatatypeException) $r9;

        $r13 = virtualinvoke $r21.<org.relaxng.datatype.DatatypeException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" when trying to build restriction: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r10.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r17);

        return null;

        catch org.relaxng.datatype.DatatypeException from label1 to label4 with label5;
    }

    private org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r2;
        org.dom4j.datatype.DatatypeElementFactory $r3, $r4, r5;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.QName r1;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r1 := @parameter0: org.dom4j.QName;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeElementFactory getElementFactory(org.dom4j.QName)>(r1);

        r5 = $r3;

        if $r3 != null goto label1;

        $r4 = new org.dom4j.datatype.DatatypeElementFactory;

        specialinvoke $r4.<org.dom4j.datatype.DatatypeElementFactory: void <init>(org.dom4j.QName)>(r1);

        r5 = $r4;

        virtualinvoke r1.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r4);

     label1:
        return r5;
    }

    private com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)
    {
        java.lang.Throwable $r10, $r11;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.datatype.NamedTypeResolver $r6;
        java.util.Map $r2, $r4, $r7;
        int $i0, $i1;
        com.sun.msv.datatype.xsd.XSDatatype r12;
        java.lang.Object $r3, $r8;
        org.dom4j.QName $r5;
        java.lang.String r1, $r9;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r12 = (com.sun.msv.datatype.xsd.XSDatatype) $r3;

        if r12 != null goto label10;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label04;

        $i1 = $i0 + 1;

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label01:
        r12 = staticinvoke <com.sun.msv.datatype.xsd.DatatypeFactory: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r9);

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

     label04:
        if r12 != null goto label08;

     label05:
        r12 = staticinvoke <com.sun.msv.datatype.xsd.DatatypeFactory: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>(r1);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

     label08:
        if r12 != null goto label09;

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>(r1);

        $r6 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        $r7 = $r6.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r12 = (com.sun.msv.datatype.xsd.XSDatatype) $r8;

     label09:
        if r12 == null goto label10;

        $r4 = r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

     label10:
        return r12;

        catch org.relaxng.datatype.DatatypeException from label01 to label02 with label03;
        catch org.relaxng.datatype.DatatypeException from label05 to label06 with label07;
    }

    private org.dom4j.QName getQName(java.lang.String)
    {
        org.dom4j.Namespace $r1, $r3;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.datatype.DatatypeDocumentFactory $r4, $r6;
        org.dom4j.QName $r5, $r7;
        java.lang.String r2;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace>;

        if $r1 != null goto label1;

        $r6 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r7 = virtualinvoke $r6.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName createQName(java.lang.String)>(r2);

        return $r7;

     label1:
        $r4 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r3 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace>;

        $r5 = virtualinvoke $r4.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>(r2, $r3);

        return $r5;
    }

    private void onSchemaError(java.lang.String)
    {
        java.lang.String r1;
        org.dom4j.datatype.InvalidSchemaException $r0;
        org.dom4j.datatype.SchemaParser r2;

        r2 := @this: org.dom4j.datatype.SchemaParser;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r0.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static void <clinit>()
    {
        org.dom4j.Namespace $r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        org.dom4j.QName $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;

        $r0 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema");

        <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE> = $r0;

        $r1 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("element", $r1);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT> = $r2;

        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("attribute", $r3);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE> = $r4;

        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r6 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("simpleType", $r5);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE> = $r6;

        $r7 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r8 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("complexType", $r7);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE> = $r8;

        $r9 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r10 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("restriction", $r9);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_RESTRICTION> = $r10;

        $r11 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r12 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("sequence", $r11);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SEQUENCE> = $r12;

        $r13 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r14 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("choice", $r13);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_CHOICE> = $r14;

        $r15 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r16 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("all", $r15);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ALL> = $r16;

        $r17 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r18 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("include", $r17);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_INCLUDE> = $r18;

        return;
    }
}
