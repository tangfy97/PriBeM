public class org.gagravarr.skeleton.SkeletonFisbone extends org.gagravarr.ogg.HighLevelOggStreamPacket implements org.gagravarr.skeleton.SkeletonPacket
{
    private static final int MESSAGE_HEADER_OFFSET;
    private static final java.lang.String HEADER_CONTENT_TYPE;
    private int messageHeaderOffset;
    private int serialNumber;
    private int numHeaderPackets;
    private long granulerateNumerator;
    private long granulerateDenominator;
    private long baseGranule;
    private int preroll;
    private byte granuleShift;
    private java.lang.String contentType;
    private java.util.Map messageHeaders;

    public void <init>()
    {
        org.gagravarr.skeleton.SkeletonFisbone r0;
        int $i0;
        java.util.HashMap $r1;
        java.lang.String $r3;
        org.gagravarr.ogg.OggStreamIdentifier$OggStreamType $r2;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        specialinvoke r0.<org.gagravarr.ogg.HighLevelOggStreamPacket: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders> = $r1;

        $i0 = <org.gagravarr.skeleton.SkeletonFisbone: int MESSAGE_HEADER_OFFSET>;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int messageHeaderOffset> = $i0;

        $r2 = <org.gagravarr.ogg.OggStreamIdentifier: org.gagravarr.ogg.OggStreamIdentifier$OggStreamType UNKNOWN>;

        $r3 = $r2.<org.gagravarr.ogg.OggStreamIdentifier$OggStreamType: java.lang.String mimetype>;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: java.lang.String contentType> = $r3;

        return;
    }

    public void <init>(org.gagravarr.ogg.OggPacket)
    {
        byte[] $r3, $r4;
        byte $b13;
        org.gagravarr.ogg.OggPacket r1;
        java.util.Map $r10;
        boolean $z0, $z1, $z2, $z3;
        org.gagravarr.skeleton.SkeletonFisbone r0;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19, $r20, $r21;
        java.util.HashMap $r2;
        long $l0, $l4, $l6, $l8, $l9, $l10, $l11;
        java.util.StringTokenizer $r6;
        int $i1, $i2, $i3, $i5, $i7, $i12, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r5, $r7, $r8, $r9, $r11, $r16, $r22;
        java.lang.IllegalArgumentException $r12, $r17, $r23;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        r1 := @parameter0: org.gagravarr.ogg.OggPacket;

        specialinvoke r0.<org.gagravarr.ogg.HighLevelOggStreamPacket: void <init>(org.gagravarr.ogg.OggPacket)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders> = $r2;

        $r3 = virtualinvoke r0.<org.gagravarr.skeleton.SkeletonFisbone: byte[] getData()>();

        $r4 = <org.gagravarr.skeleton.SkeletonFisbone: byte[] MAGIC_FISBONE_BYTES>;

        $z0 = staticinvoke <org.gagravarr.ogg.IOUtils: boolean byteRangeMatches(byte[],byte[],int)>($r4, $r3, 0);

        if $z0 != 0 goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type, not a Skeleton Fisbone Header");

        throw $r23;

     label1:
        $l0 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt4(byte[],int)>($r3, 8);

        $i1 = (int) $l0;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int messageHeaderOffset> = $i1;

        $i3 = r0.<org.gagravarr.skeleton.SkeletonFisbone: int messageHeaderOffset>;

        $i2 = <org.gagravarr.skeleton.SkeletonFisbone: int MESSAGE_HEADER_OFFSET>;

        if $i3 == $i2 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Skeleton message offset ");

        $i18 = r0.<org.gagravarr.skeleton.SkeletonFisbone: int messageHeaderOffset>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" detected");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label2:
        $l4 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt4(byte[],int)>($r3, 12);

        $i5 = (int) $l4;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int serialNumber> = $i5;

        $l6 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt4(byte[],int)>($r3, 16);

        $i7 = (int) $l6;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int numHeaderPackets> = $i7;

        $l8 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt8(byte[],int)>($r3, 20);

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateNumerator> = $l8;

        $l9 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt8(byte[],int)>($r3, 28);

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateDenominator> = $l9;

        $l10 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt8(byte[],int)>($r3, 36);

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long baseGranule> = $l10;

        $l11 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt4(byte[],int)>($r3, 44);

        $i12 = (int) $l11;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int preroll> = $i12;

        $b13 = $r3[48];

        r0.<org.gagravarr.skeleton.SkeletonFisbone: byte granuleShift> = $b13;

        $i14 = lengthof $r3;

        $i15 = $i14 - 52;

        $r5 = staticinvoke <org.gagravarr.ogg.IOUtils: java.lang.String getUTF8(byte[],int,int)>($r3, 52, $i15);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("Content-Type");

        if $z1 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No Content Type header found in ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label3:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r5, "\r\n");

     label4:
        $z2 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z2 == 0 goto label6;

        $r7 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i16 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i16);

        $i17 = $i16 + 2;

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i17);

        $r10 = r0.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r11 = "Content-Type";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label5;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: java.lang.String contentType> = $r9;

     label5:
        goto label4;

     label6:
        return;
    }

    public org.gagravarr.ogg.OggPacket write()
    {
        byte[] $r6, r7, $r8;
        long $l2, $l4, $l6, $l7, $l8, $l9, $l11;
        byte $b12;
        java.lang.StringBuffer $r0;
        org.gagravarr.ogg.OggPacket $r9;
        java.util.Map $r2, $r11;
        int $i0, $i1, $i3, $i5, $i10, $i13, i14;
        java.lang.String $r5, $r13, r14;
        boolean $z0;
        org.gagravarr.skeleton.SkeletonFisbone r1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Object $r10, $r12;

        r1 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r10;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r11 = r1.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14);

        $r13 = (java.lang.String) $r12;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <org.gagravarr.ogg.IOUtils: byte[] toUTF8Bytes(java.lang.String)>($r5);

        $i0 = lengthof $r6;

        i14 = 52 + $i0;

        r7 = newarray (byte)[i14];

        $r8 = <org.gagravarr.skeleton.SkeletonFisbone: byte[] MAGIC_FISBONE_BYTES>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r7, 0, 8);

        $i1 = r1.<org.gagravarr.skeleton.SkeletonFisbone: int messageHeaderOffset>;

        $l2 = (long) $i1;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt4(byte[],int,long)>(r7, 8, $l2);

        $i3 = r1.<org.gagravarr.skeleton.SkeletonFisbone: int serialNumber>;

        $l4 = (long) $i3;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt4(byte[],int,long)>(r7, 12, $l4);

        $i5 = r1.<org.gagravarr.skeleton.SkeletonFisbone: int numHeaderPackets>;

        $l6 = (long) $i5;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt4(byte[],int,long)>(r7, 16, $l6);

        $l7 = r1.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateNumerator>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt8(byte[],int,long)>(r7, 20, $l7);

        $l8 = r1.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateDenominator>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt8(byte[],int,long)>(r7, 28, $l8);

        $l9 = r1.<org.gagravarr.skeleton.SkeletonFisbone: long baseGranule>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt8(byte[],int,long)>(r7, 36, $l9);

        $i10 = r1.<org.gagravarr.skeleton.SkeletonFisbone: int preroll>;

        $l11 = (long) $i10;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt4(byte[],int,long)>(r7, 44, $l11);

        $b12 = r1.<org.gagravarr.skeleton.SkeletonFisbone: byte granuleShift>;

        r7[48] = $b12;

        $i13 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r7, 52, $i13);

        virtualinvoke r1.<org.gagravarr.skeleton.SkeletonFisbone: void setData(byte[])>(r7);

        $r9 = specialinvoke r1.<org.gagravarr.ogg.HighLevelOggStreamPacket: org.gagravarr.ogg.OggPacket write()>();

        return $r9;
    }

    public int getSerialNumber()
    {
        int $i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $i0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: int serialNumber>;

        return $i0;
    }

    public void setSerialNumber(int)
    {
        int i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        i0 := @parameter0: int;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int serialNumber> = i0;

        return;
    }

    public int getNumHeaderPackets()
    {
        int $i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $i0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: int numHeaderPackets>;

        return $i0;
    }

    public void setNumHeaderPackets(int)
    {
        int i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        i0 := @parameter0: int;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int numHeaderPackets> = i0;

        return;
    }

    public long getGranulerateNumerator()
    {
        long $l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $l0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateNumerator>;

        return $l0;
    }

    public void setGranulerateNumerator(long)
    {
        long l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        l0 := @parameter0: long;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateNumerator> = l0;

        return;
    }

    public long getGranulerateDenominator()
    {
        long $l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $l0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateDenominator>;

        return $l0;
    }

    public void setGranulerateDenominator(long)
    {
        long l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        l0 := @parameter0: long;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long granulerateDenominator> = l0;

        return;
    }

    public long getBaseGranule()
    {
        long $l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $l0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: long baseGranule>;

        return $l0;
    }

    public void setBaseGranule(long)
    {
        long l0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        l0 := @parameter0: long;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: long baseGranule> = l0;

        return;
    }

    public int getPreroll()
    {
        int $i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $i0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: int preroll>;

        return $i0;
    }

    public void setPreroll(int)
    {
        int i0;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        i0 := @parameter0: int;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: int preroll> = i0;

        return;
    }

    public byte getGranuleShift()
    {
        org.gagravarr.skeleton.SkeletonFisbone r0;
        byte $b0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $b0 = r0.<org.gagravarr.skeleton.SkeletonFisbone: byte granuleShift>;

        return $b0;
    }

    public void setGranuleShift(byte)
    {
        org.gagravarr.skeleton.SkeletonFisbone r0;
        byte b0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        b0 := @parameter0: byte;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: byte granuleShift> = b0;

        return;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r1;
        org.gagravarr.skeleton.SkeletonFisbone r0;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $r1 = r0.<org.gagravarr.skeleton.SkeletonFisbone: java.lang.String contentType>;

        return $r1;
    }

    public void setContentType(java.lang.String)
    {
        java.lang.String r1;
        org.gagravarr.skeleton.SkeletonFisbone r0;
        java.util.Map $r2;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        r1 := @parameter0: java.lang.String;

        r0.<org.gagravarr.skeleton.SkeletonFisbone: java.lang.String contentType> = r1;

        $r2 = r0.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", r1);

        return;
    }

    public java.util.Map getMessageHeaders()
    {
        org.gagravarr.skeleton.SkeletonFisbone r0;
        java.util.Map $r1;

        r0 := @this: org.gagravarr.skeleton.SkeletonFisbone;

        $r1 = r0.<org.gagravarr.skeleton.SkeletonFisbone: java.util.Map messageHeaders>;

        return $r1;
    }

    static void <clinit>()
    {
        int $i0, $i1;
        byte[] $r0;

        <org.gagravarr.skeleton.SkeletonFisbone: java.lang.String HEADER_CONTENT_TYPE> = "Content-Type";

        $r0 = <org.gagravarr.skeleton.SkeletonFisbone: byte[] MAGIC_FISBONE_BYTES>;

        $i0 = lengthof $r0;

        $i1 = 52 - $i0;

        <org.gagravarr.skeleton.SkeletonFisbone: int MESSAGE_HEADER_OFFSET> = $i1;

        return;
    }
}
