public class org.tukaani.xz.DeltaInputStream extends java.io.InputStream
{
    public static final int DISTANCE_MIN;
    public static final int DISTANCE_MAX;
    private java.io.InputStream in;
    private final org.tukaani.xz.delta.DeltaDecoder delta;
    private java.io.IOException exception;
    private final byte[] tempBuf;

    public void <init>(java.io.InputStream, int)
    {
        byte[] $r1;
        org.tukaani.xz.delta.DeltaDecoder $r3;
        int i0;
        org.tukaani.xz.DeltaInputStream r0;
        java.lang.NullPointerException $r4;
        java.io.InputStream r2;

        r0 := @this: org.tukaani.xz.DeltaInputStream;

        r2 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception> = null;

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.DeltaInputStream: byte[] tempBuf> = $r1;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in> = r2;

        $r3 = new org.tukaani.xz.delta.DeltaDecoder;

        specialinvoke $r3.<org.tukaani.xz.delta.DeltaDecoder: void <init>(int)>(i0);

        r0.<org.tukaani.xz.DeltaInputStream: org.tukaani.xz.delta.DeltaDecoder delta> = $r3;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        int $i0, $i4;
        org.tukaani.xz.DeltaInputStream r0;

        r0 := @this: org.tukaani.xz.DeltaInputStream;

        $r1 = r0.<org.tukaani.xz.DeltaInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.DeltaInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.DeltaInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        java.io.IOException $r2, $r6, $r8;
        org.tukaani.xz.XZIOException $r9;
        int i0, i1, $i2, $i4, $i6;
        org.tukaani.xz.delta.DeltaDecoder $r5;
        org.tukaani.xz.DeltaInputStream r0;
        java.io.InputStream $r1, $r4;

        r0 := @this: org.tukaani.xz.DeltaInputStream;

        r3 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        if $r1 != null goto label2;

        $r9 = new org.tukaani.xz.XZIOException;

        specialinvoke $r9.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r9;

     label2:
        $r2 = r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception>;

        if $r2 == null goto label3;

        $r6 = r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception>;

        throw $r6;

     label3:
        $r4 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r3, i1, i0);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception> = $r8;

        throw $r8;

     label6:
        $i4 = (int) -1;

        if $i2 != $i4 goto label7;

        $i6 = (int) -1;

        return $i6;

     label7:
        $r5 = r0.<org.tukaani.xz.DeltaInputStream: org.tukaani.xz.delta.DeltaDecoder delta>;

        virtualinvoke $r5.<org.tukaani.xz.delta.DeltaDecoder: void decode(byte[],int,int)>(r3, i1, $i2);

        return $i2;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        java.io.IOException $r2, $r4;
        org.tukaani.xz.XZIOException $r5;
        org.tukaani.xz.DeltaInputStream r0;
        java.io.InputStream $r1, $r3;

        r0 := @this: org.tukaani.xz.DeltaInputStream;

        $r1 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        $r5 = new org.tukaani.xz.XZIOException;

        specialinvoke $r5.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r5;

     label1:
        $r2 = r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception>;

        if $r2 == null goto label2;

        $r4 = r0.<org.tukaani.xz.DeltaInputStream: java.io.IOException exception>;

        throw $r4;

     label2:
        $r3 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.tukaani.xz.DeltaInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.tukaani.xz.DeltaInputStream;

        $r1 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in> = null;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.tukaani.xz.DeltaInputStream: java.io.InputStream in> = null;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <org.tukaani.xz.DeltaInputStream: int DISTANCE_MAX> = 256;

        <org.tukaani.xz.DeltaInputStream: int DISTANCE_MIN> = 1;

        return;
    }
}
