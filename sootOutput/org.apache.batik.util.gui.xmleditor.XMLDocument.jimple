public class org.apache.batik.util.gui.xmleditor.XMLDocument extends javax.swing.text.PlainDocument
{
    protected org.apache.batik.util.gui.xmleditor.XMLScanner lexer;
    protected org.apache.batik.util.gui.xmleditor.XMLContext context;
    protected org.apache.batik.util.gui.xmleditor.XMLToken cacheToken;

    public void <init>()
    {
        org.apache.batik.util.gui.xmleditor.XMLContext $r1;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        $r1 = new org.apache.batik.util.gui.xmleditor.XMLContext;

        specialinvoke $r1.<org.apache.batik.util.gui.xmleditor.XMLContext: void <init>()>();

        specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: void <init>(org.apache.batik.util.gui.xmleditor.XMLContext)>($r1);

        return;
    }

    public void <init>(org.apache.batik.util.gui.xmleditor.XMLContext)
    {
        org.apache.batik.util.gui.xmleditor.XMLContext r1;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;
        org.apache.batik.util.gui.xmleditor.XMLScanner $r2;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        r1 := @parameter0: org.apache.batik.util.gui.xmleditor.XMLContext;

        specialinvoke r0.<javax.swing.text.PlainDocument: void <init>()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken> = null;

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLContext context> = r1;

        $r2 = new org.apache.batik.util.gui.xmleditor.XMLScanner;

        specialinvoke $r2.<org.apache.batik.util.gui.xmleditor.XMLScanner: void <init>()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLScanner lexer> = $r2;

        return;
    }

    public org.apache.batik.util.gui.xmleditor.XMLToken getScannerStart(int) throws javax.swing.text.BadLocationException
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner $r2, $r3, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, i11, i12;
        org.apache.batik.util.gui.xmleditor.XMLToken $r1, $r4, $r5, $r6, $r7, $r8, $r10;
        java.lang.String $r11;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;
        javax.swing.text.Element $r9;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        i0 := @parameter0: int;

        i7 = 3;

        i8 = 0;

        i9 = 0;

        $r1 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        if $r1 == null goto label2;

        $r6 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        $i2 = virtualinvoke $r6.<org.apache.batik.util.gui.xmleditor.XMLToken: int getStartOffset()>();

        if $i2 <= i0 goto label1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken> = null;

        goto label2;

     label1:
        $r7 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        i7 = virtualinvoke $r7.<org.apache.batik.util.gui.xmleditor.XMLToken: int getContext()>();

        $r8 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        $i3 = virtualinvoke $r8.<org.apache.batik.util.gui.xmleditor.XMLToken: int getStartOffset()>();

        i8 = $i3;

        i9 = $i3;

        $r9 = virtualinvoke r0.<javax.swing.text.PlainDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i4 = interfaceinvoke $r9.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        $i5 = interfaceinvoke $r9.<javax.swing.text.Element: int getElementIndex(int)>($i3);

        $i6 = $i4 - $i5;

        if $i6 >= 50 goto label2;

        $r10 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        return $r10;

     label2:
        $i10 = i0 - i8;

        $r11 = virtualinvoke r0.<javax.swing.text.AbstractDocument: java.lang.String getText(int,int)>(i8, $i10);

        $r12 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLScanner lexer>;

        virtualinvoke $r12.<org.apache.batik.util.gui.xmleditor.XMLScanner: void setString(java.lang.String)>($r11);

        $r13 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLScanner lexer>;

        virtualinvoke $r13.<org.apache.batik.util.gui.xmleditor.XMLScanner: void reset()>();

        i11 = i7;

        i12 = i8;

        goto label4;

     label3:
        i12 = i8;

        i11 = i7;

        $r2 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLScanner lexer>;

        $i1 = virtualinvoke $r2.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scan(int)>(i7);

        i8 = $i1 + i9;

        $r3 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLScanner lexer>;

        i7 = virtualinvoke $r3.<org.apache.batik.util.gui.xmleditor.XMLScanner: int getScanValue()>();

     label4:
        if i8 < i0 goto label3;

        $r4 = new org.apache.batik.util.gui.xmleditor.XMLToken;

        specialinvoke $r4.<org.apache.batik.util.gui.xmleditor.XMLToken: void <init>(int,int,int)>(i11, i12, i8);

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken> = $r4;

        $r5 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        return $r5;
    }

    public void insertString(int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException
    {
        int i0, $i1;
        java.lang.String r1;
        org.apache.batik.util.gui.xmleditor.XMLToken $r3, $r4;
        javax.swing.text.AttributeSet r2;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javax.swing.text.AttributeSet;

        specialinvoke r0.<javax.swing.text.AbstractDocument: void insertString(int,java.lang.String,javax.swing.text.AttributeSet)>(i0, r1, r2);

        $r3 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        $i1 = virtualinvoke $r4.<org.apache.batik.util.gui.xmleditor.XMLToken: int getStartOffset()>();

        if $i1 < i0 goto label1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken> = null;

     label1:
        return;
    }

    public void remove(int, int) throws javax.swing.text.BadLocationException
    {
        int i0, i1, $i2;
        org.apache.batik.util.gui.xmleditor.XMLToken $r1, $r2;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javax.swing.text.AbstractDocument: void remove(int,int)>(i0, i1);

        $r1 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken>;

        $i2 = virtualinvoke $r2.<org.apache.batik.util.gui.xmleditor.XMLToken: int getStartOffset()>();

        if $i2 < i0 goto label1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLDocument: org.apache.batik.util.gui.xmleditor.XMLToken cacheToken> = null;

     label1:
        return;
    }

    public int find(java.lang.String, int, boolean) throws javax.swing.text.BadLocationException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i15, $i17, $i19;
        java.lang.String $r4, r5, r6;
        boolean z0;
        org.apache.batik.util.gui.xmleditor.XMLDocument r0;
        javax.swing.text.Element $r1, $r2, $r3;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLDocument;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i15 = (int) -1;

        i10 = $i15;

        $r1 = virtualinvoke r0.<javax.swing.text.PlainDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        if $i1 >= 0 goto label1;

        $i17 = (int) -1;

        return $i17;

     label1:
        $r2 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i1);

        $i2 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        i11 = i0 - $i2;

        i12 = $i1;

        goto label7;

     label2:
        $r3 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i12);

        $i4 = interfaceinvoke $r3.<javax.swing.text.Element: int getStartOffset()>();

        $i5 = interfaceinvoke $r3.<javax.swing.text.Element: int getEndOffset()>();

        $i6 = virtualinvoke r0.<javax.swing.text.AbstractDocument: int getLength()>();

        if $i5 <= $i6 goto label3;

        $i9 = virtualinvoke r0.<javax.swing.text.AbstractDocument: int getLength()>();

        i13 = $i9 - $i4;

        goto label4;

     label3:
        $i7 = interfaceinvoke $r3.<javax.swing.text.Element: int getEndOffset()>();

        i13 = $i7 - $i4;

     label4:
        $r4 = virtualinvoke r0.<javax.swing.text.AbstractDocument: java.lang.String getText(int,int)>($i4, i13);

        r6 = $r4;

        if z0 != 0 goto label5;

        r6 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();

     label5:
        $i8 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String,int)>(r5, i11);

        $i19 = (int) -1;

        if $i8 == $i19 goto label6;

        i10 = $i4 + $i8;

        goto label8;

     label6:
        i11 = 0;

        i12 = i12 + 1;

     label7:
        $i3 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementCount()>();

        if i12 < $i3 goto label2;

     label8:
        return i10;
    }
}
