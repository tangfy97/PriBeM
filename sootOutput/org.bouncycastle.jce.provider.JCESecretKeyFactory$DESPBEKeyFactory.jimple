public class org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory extends org.bouncycastle.jce.provider.JCESecretKeyFactory
{
    private boolean forCipher;
    private int scheme;
    private int digest;
    private int keySize;
    private int ivSize;

    public void <init>(java.lang.String, org.bouncycastle.asn1.DERObjectIdentifier, boolean, int, int, int, int)
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        org.bouncycastle.asn1.DERObjectIdentifier r2;
        boolean z0;

        r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bouncycastle.asn1.DERObjectIdentifier;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        specialinvoke r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier)>(r1, r2);

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: boolean forCipher> = z0;

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme> = i0;

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest> = i1;

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize> = i2;

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize> = i3;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        byte[] $r3, $r5, $r11;
        org.bouncycastle.crypto.params.ParametersWithIV $r9;
        java.security.spec.KeySpec r0;
        boolean $z0, $z1, $z2;
        org.bouncycastle.asn1.DERObjectIdentifier $r7, $r13;
        org.bouncycastle.crypto.CipherParameters $r10, r15;
        java.security.spec.InvalidKeySpecException $r1;
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory r4;
        javax.crypto.spec.PBEKeySpec r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r8, $r14;
        org.bouncycastle.crypto.params.KeyParameter r16, r17;
        org.bouncycastle.jce.provider.JCEPBEKey $r6, $r12;

        r4 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory;

        r0 := @parameter0: java.security.spec.KeySpec;

        $z0 = r0 instanceof javax.crypto.spec.PBEKeySpec;

        if $z0 == 0 goto label6;

        r2 = (javax.crypto.spec.PBEKeySpec) r0;

        $r3 = virtualinvoke r2.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        if $r3 != null goto label1;

        $r12 = new org.bouncycastle.jce.provider.JCEPBEKey;

        $r14 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: java.lang.String algName>;

        $r13 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: org.bouncycastle.asn1.DERObjectIdentifier algOid>;

        $i14 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i13 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i12 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i11 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        specialinvoke $r12.<org.bouncycastle.jce.provider.JCEPBEKey: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.CipherParameters)>($r14, $r13, $i14, $i13, $i12, $i11, r2, null);

        return $r12;

     label1:
        $z1 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: boolean forCipher>;

        if $z1 == 0 goto label2;

        $i10 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i9 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i8 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i7 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        r15 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec,int,int,int,int)>(r2, $i10, $i9, $i8, $i7);

        goto label3;

     label2:
        $i2 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i1 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i0 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        r15 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int)>(r2, $i2, $i1, $i0);

     label3:
        $z2 = r15 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z2 == 0 goto label4;

        $r9 = (org.bouncycastle.crypto.params.ParametersWithIV) r15;

        $r10 = virtualinvoke $r9.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r16 = (org.bouncycastle.crypto.params.KeyParameter) $r10;

        $r11 = virtualinvoke r16.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r11);

        goto label5;

     label4:
        r17 = (org.bouncycastle.crypto.params.KeyParameter) r15;

        $r5 = virtualinvoke r17.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r5);

     label5:
        $r6 = new org.bouncycastle.jce.provider.JCEPBEKey;

        $r8 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: java.lang.String algName>;

        $r7 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: org.bouncycastle.asn1.DERObjectIdentifier algOid>;

        $i6 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i5 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i4 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i3 = r4.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        specialinvoke $r6.<org.bouncycastle.jce.provider.JCEPBEKey: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.CipherParameters)>($r8, $r7, $i6, $i5, $i4, $i3, r2, r15);

        return $r6;

     label6:
        $r1 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r1.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r1;
    }
}
