public class groovy.sql.SqlWhereVisitor extends org.codehaus.groovy.ast.CodeVisitorSupport
{
    private final java.lang.StringBuffer buffer;
    private final java.util.List parameters;

    public void <init>()
    {
        groovy.sql.SqlWhereVisitor r0;
        java.lang.StringBuffer $r1;
        java.util.ArrayList $r2;

        r0 := @this: groovy.sql.SqlWhereVisitor;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<groovy.sql.SqlWhereVisitor: java.util.List parameters> = $r2;

        return;
    }

    public java.lang.String getWhere()
    {
        java.lang.String $r2;
        groovy.sql.SqlWhereVisitor r0;
        java.lang.StringBuffer $r1;

        r0 := @this: groovy.sql.SqlWhereVisitor;

        $r1 = r0.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)
    {
        org.codehaus.groovy.ast.stmt.ReturnStatement r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        groovy.sql.SqlWhereVisitor r2;

        r2 := @this: groovy.sql.SqlWhereVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ReturnStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.syntax.Token $r5;
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        groovy.sql.SqlWhereVisitor r3;
        java.lang.StringBuffer $r4, $r6, $r8, $r9, $r10;
        org.codehaus.groovy.ast.expr.Expression $r1, $r2;
        java.lang.String $r7;
        boolean z0;

        r3 := @this: groovy.sql.SqlWhereVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        z0 = $r2 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if z0 != 0 goto label1;

        $r10 = r3.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

     label1:
        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r3);

        $r4 = r3.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $r6 = r3.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        $r7 = virtualinvoke r3.<groovy.sql.SqlWhereVisitor: java.lang.String tokenAsSql(org.codehaus.groovy.syntax.Token)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = r3.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r3);

        if z0 != 0 goto label2;

        $r9 = r3.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

     label2:
        return;
    }

    public void visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;
        groovy.sql.SqlWhereVisitor r2;

        r2 := @this: groovy.sql.SqlWhereVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BooleanExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        virtualinvoke $r1.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r2);

        return;
    }

    public void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)
    {
        java.util.List $r1;
        groovy.sql.SqlWhereVisitor r0;
        java.lang.StringBuffer $r4;
        java.lang.Object $r3;
        org.codehaus.groovy.ast.expr.ConstantExpression r2;

        r0 := @this: groovy.sql.SqlWhereVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.ConstantExpression;

        $r1 = virtualinvoke r0.<groovy.sql.SqlWhereVisitor: java.util.List getParameters()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

        return;
    }

    public void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r1;
        groovy.sql.SqlWhereVisitor r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r3;

        r0 := @this: groovy.sql.SqlWhereVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r2 = r0.<groovy.sql.SqlWhereVisitor: java.lang.StringBuffer buffer>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }

    public java.util.List getParameters()
    {
        java.util.List $r1;
        groovy.sql.SqlWhereVisitor r0;

        r0 := @this: groovy.sql.SqlWhereVisitor;

        $r1 = r0.<groovy.sql.SqlWhereVisitor: java.util.List parameters>;

        return $r1;
    }

    protected java.lang.String tokenAsSql(org.codehaus.groovy.syntax.Token)
    {
        groovy.sql.SqlWhereVisitor r2;
        int $i0;
        java.lang.String $r1;
        org.codehaus.groovy.syntax.Token r0;

        r2 := @this: groovy.sql.SqlWhereVisitor;

        r0 := @parameter0: org.codehaus.groovy.syntax.Token;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.Token: int getType()>();

        lookupswitch($i0)
        {
            case 123: goto label1;
            case 162: goto label3;
            case 164: goto label2;
            default: goto label4;
        };

     label1:
        return "=";

     label2:
        return "and";

     label3:
        return "or";

     label4:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.Token: java.lang.String getText()>();

        return $r1;
    }
}
