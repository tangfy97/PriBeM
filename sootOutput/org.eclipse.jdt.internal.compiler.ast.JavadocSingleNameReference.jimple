public class org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference extends org.eclipse.jdt.internal.compiler.ast.SingleNameReference
{
    public int tagSourceStart;
    public int tagSourceEnd;

    public void <init>(char[], long, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference r0;
        long l0;
        int i1, i2, $i3, $i4, $i6;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference;

        r1 := @parameter0: char[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void <init>(char[],long)>(r1, l0);

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int tagSourceStart> = i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int tagSourceEnd> = i2;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int bits>;

        $i6 = (int) 32768;

        $i4 = $i3 | $i6;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int bits> = $i4;

        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $z0 = $r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean,boolean)>(r1, 1, $z0);

        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r0;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r5, $r9;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding $r3;
        long $l3, $l4;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope r4;
        byte $b5;
        int $i0, $i1, $i2, $i6, $i7, $i9;
        boolean z0, $z1, z2;
        java.lang.Exception $r8;
        char[] $r2, $r6, $r10;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration $r7;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        z0 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: char[] token>;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding findVariable(char[])>($r2);

        if $r3 == null goto label2;

        $z1 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: boolean isValidBinding()>();

        if $z1 == 0 goto label2;

        $l3 = $r3.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: long tagBits>;

        $l4 = $l3 & 1024L;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: org.eclipse.jdt.internal.compiler.lookup.Binding binding> = $r3;

        if z2 == 0 goto label1;

        $r3.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int useFlag> = 1;

     label1:
        return;

     label2:
        if z0 == 0 goto label6;

     label3:
        r4 = (org.eclipse.jdt.internal.compiler.lookup.MethodScope) r0;

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: char[] token>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int sourceStart>;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int sourceEnd>;

        $r7 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration referenceMethod()>();

        $i2 = $r7.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void javadocUndeclaredParamTagName(char[],int,int,int)>($r6, $i0, $i1, $i2);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: char[] token>;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int sourceStart>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference: int sourceEnd>;

        $i9 = (int) -1;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void javadocUndeclaredParamTagName(char[],int,int,int)>($r10, $i7, $i6, $i9);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;
        org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
