public class org.apache.commons.lang.math.IEEE754rUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang.math.IEEE754rUtils r0;

        r0 := @this: org.apache.commons.lang.math.IEEE754rUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double min(double[])
    {
        double[] r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0, $i1, i2;
        double $d0, d1;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        d1 = r0[0];

        i2 = 1;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $d0 = r0[i2];

        d1 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double min(double,double)>($d0, d1);

        i2 = i2 + 1;

        goto label3;

     label4:
        return d1;
    }

    public static float min(float[])
    {
        float[] r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0, $i1, i2;
        float $f0, f1;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        f1 = r0[0];

        i2 = 1;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $f0 = r0[i2];

        f1 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float min(float,float)>($f0, f1);

        i2 = i2 + 1;

        goto label3;

     label4:
        return f1;
    }

    public static double min(double, double, double)
    {
        double d0, d1, $d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $d2 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double min(double,double)>(d0, d1);

        $d4 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double min(double,double)>($d2, d3);

        return $d4;
    }

    public static double min(double, double)
    {
        double d0, d1, $d2;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        return d1;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        return d0;

     label2:
        $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1);

        return $d2;
    }

    public static float min(float, float, float)
    {
        float f0, f1, $f2, f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f3 := @parameter2: float;

        $f2 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float min(float,float)>(f0, f1);

        $f4 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float min(float,float)>($f2, f3);

        return $f4;
    }

    public static float min(float, float)
    {
        float f0, f1, $f2;
        boolean $z0, $z1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return f1;

     label1:
        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 == 0 goto label2;

        return f0;

     label2:
        $f2 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f1);

        return $f2;
    }

    public static double max(double[])
    {
        double[] r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0, $i1, i2;
        double $d0, d1;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        d1 = r0[0];

        i2 = 1;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $d0 = r0[i2];

        d1 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double max(double,double)>($d0, d1);

        i2 = i2 + 1;

        goto label3;

     label4:
        return d1;
    }

    public static float max(float[])
    {
        float[] r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0, $i1, i2;
        float $f0, f1;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $r2;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty.");

        throw $r1;

     label2:
        f1 = r0[0];

        i2 = 1;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $f0 = r0[i2];

        f1 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float max(float,float)>($f0, f1);

        i2 = i2 + 1;

        goto label3;

     label4:
        return f1;
    }

    public static double max(double, double, double)
    {
        double d0, d1, $d2, d3, $d4;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d3 := @parameter2: double;

        $d2 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double max(double,double)>(d0, d1);

        $d4 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: double max(double,double)>($d2, d3);

        return $d4;
    }

    public static double max(double, double)
    {
        double d0, d1, $d2;
        boolean $z0, $z1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        return d1;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label2;

        return d0;

     label2:
        $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1);

        return $d2;
    }

    public static float max(float, float, float)
    {
        float f0, f1, $f2, f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f3 := @parameter2: float;

        $f2 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float max(float,float)>(f0, f1);

        $f4 = staticinvoke <org.apache.commons.lang.math.IEEE754rUtils: float max(float,float)>($f2, f3);

        return $f4;
    }

    public static float max(float, float)
    {
        float f0, f1, $f2;
        boolean $z0, $z1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return f1;

     label1:
        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 == 0 goto label2;

        return f0;

     label2:
        $f2 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f1);

        return $f2;
    }
}
