public class org.springframework.expression.spel.ast.OperatorMatches extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OperatorMatches r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OperatorMatches;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>("matches", i0, r1);

        return;
    }

    public org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r13, $r16, $r20;
        java.lang.Object[] $r14, $r17, $r21;
        org.springframework.expression.spel.ast.OperatorMatches r0;
        org.springframework.expression.spel.support.BooleanTypedValue $r12;
        java.util.regex.Matcher $r11;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r10;
        org.springframework.expression.TypedValue $r6;
        boolean $z0, $z1, $z2;
        org.springframework.expression.spel.SpelMessage $r15, $r18, $r22;
        java.util.regex.PatternSyntaxException $r19;
        org.springframework.expression.spel.ExpressionState r3;
        java.lang.Object $r4, $r7;
        java.util.regex.Pattern $r9;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r2, $r5;

        r0 := @this: org.springframework.expression.spel.ast.OperatorMatches;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorMatches: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorMatches: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $r4 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.Object getValue(org.springframework.expression.spel.ExpressionState,java.lang.Class)>(r3, class "Ljava/lang/String;");

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorMatches: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

     label1:
        $z0 = $r4 instanceof java.lang.String;

        if $z0 != 0 goto label2;

        $r16 = new org.springframework.expression.spel.SpelEvaluationException;

        $i1 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r18 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR>;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = $r4;

        specialinvoke $r16.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r18, $r17);

        throw $r16;

     label2:
        $z1 = $r7 instanceof java.lang.String;

        if $z1 != 0 goto label3;

        $r13 = new org.springframework.expression.spel.SpelEvaluationException;

        $i0 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r15 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r7;

        specialinvoke $r13.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r15, $r14);

        throw $r13;

     label3:
        $r8 = (java.lang.String) $r7;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r8);

        $r10 = (java.lang.String) $r4;

        $r11 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r10);

        $z2 = virtualinvoke $r11.<java.util.regex.Matcher: boolean matches()>();

        $r12 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z2);

     label4:
        return $r12;

     label5:
        $r19 := @caughtexception;

        $r20 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r22 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INVALID_PATTERN>;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = $r7;

        specialinvoke $r20.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r19, $r22, $r21);

        throw $r20;

        catch java.util.regex.PatternSyntaxException from label1 to label4 with label5;
    }

    public volatile org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.support.BooleanTypedValue $r2;
        org.springframework.expression.spel.ast.OperatorMatches r0;

        r0 := @this: org.springframework.expression.spel.ast.OperatorMatches;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorMatches: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r2;
    }
}
