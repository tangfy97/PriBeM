final class org.springframework.core.convert.support.MapToMapConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{
    private final org.springframework.core.convert.ConversionService conversionService;

    public void <init>(org.springframework.core.convert.ConversionService)
    {
        org.springframework.core.convert.support.MapToMapConverter r0;
        org.springframework.core.convert.ConversionService r1;

        r0 := @this: org.springframework.core.convert.support.MapToMapConverter;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.support.MapToMapConverter: org.springframework.core.convert.ConversionService conversionService> = r1;

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.MapToMapConverter r2;

        r2 := @this: org.springframework.core.convert.support.MapToMapConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/util/Map;", class "Ljava/util/Map;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r1, $r3, r4, $r5, $r7, $r8;
        org.springframework.core.convert.support.MapToMapConverter r0;
        org.springframework.core.convert.ConversionService $r2, $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.core.convert.support.MapToMapConverter;

        r1 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r4 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r2 = r0.<org.springframework.core.convert.support.MapToMapConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r3 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $r5 = virtualinvoke r4.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor()>();

        $z0 = interfaceinvoke $r2.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r3, $r5);

        if $z0 == 0 goto label1;

        $r6 = r0.<org.springframework.core.convert.support.MapToMapConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r7 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $r8 = virtualinvoke r4.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        $z1 = interfaceinvoke $r6.<org.springframework.core.convert.ConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r7, $r8);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r2, r12, $r14, $r15, $r18, $r19;
        java.util.Map r1, $r4;
        int $i0;
        org.springframework.core.convert.support.MapToMapConverter r11;
        org.springframework.core.convert.ConversionService $r13, $r17;
        boolean $z0;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.lang.Object r0, $r7, $r9, $r10, $r16, $r20;
        java.lang.Class $r3;

        r11 := @this: org.springframework.core.convert.support.MapToMapConverter;

        r0 := @parameter0: java.lang.Object;

        r12 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = (java.util.Map) r0;

        $r3 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r4 = staticinvoke <org.springframework.core.CollectionFactory: java.util.Map createMap(java.lang.Class,int)>($r3, $i0);

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = r11.<org.springframework.core.convert.support.MapToMapConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r14 = virtualinvoke r12.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor(java.lang.Object)>($r9);

        $r15 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapKeyTypeDescriptor(java.lang.Object)>($r9);

        $r16 = interfaceinvoke $r13.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r9, $r14, $r15);

        $r17 = r11.<org.springframework.core.convert.support.MapToMapConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r18 = virtualinvoke r12.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor(java.lang.Object)>($r10);

        $r19 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor(java.lang.Object)>($r10);

        $r20 = interfaceinvoke $r17.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r10, $r18, $r19);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r20);

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r4;
    }
}
