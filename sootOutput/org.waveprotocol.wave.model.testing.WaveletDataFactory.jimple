public final class org.waveprotocol.wave.model.testing.WaveletDataFactory extends java.lang.Object implements org.waveprotocol.wave.model.testing.Factory
{
    private static final org.waveprotocol.wave.model.id.WaveId WAVE_ID;
    private static final org.waveprotocol.wave.model.id.WaveletId WAVELET_ID;
    private static final org.waveprotocol.wave.model.wave.ParticipantId PARTICIPANT_ID;
    private final org.waveprotocol.wave.model.wave.data.WaveletData$Factory factory;

    private void <init>(org.waveprotocol.wave.model.wave.data.WaveletData$Factory)
    {
        org.waveprotocol.wave.model.testing.WaveletDataFactory r0;
        org.waveprotocol.wave.model.wave.data.WaveletData$Factory r1;

        r0 := @this: org.waveprotocol.wave.model.testing.WaveletDataFactory;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.wave.data.WaveletData$Factory factory> = r1;

        return;
    }

    public static org.waveprotocol.wave.model.testing.Factory of(org.waveprotocol.wave.model.wave.data.WaveletData$Factory)
    {
        org.waveprotocol.wave.model.testing.WaveletDataFactory $r0;
        org.waveprotocol.wave.model.wave.data.WaveletData$Factory r1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData$Factory;

        $r0 = new org.waveprotocol.wave.model.testing.WaveletDataFactory;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.WaveletDataFactory: void <init>(org.waveprotocol.wave.model.wave.data.WaveletData$Factory)>(r1);

        return $r0;
    }

    public org.waveprotocol.wave.model.wave.data.WaveletData create()
    {
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData$Factory $r2;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r1;
        org.waveprotocol.wave.model.testing.WaveletDataFactory r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r7;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        org.waveprotocol.wave.model.wave.data.WaveletData $r8;

        r0 := @this: org.waveprotocol.wave.model.testing.WaveletDataFactory;

        $r2 = r0.<org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.wave.data.WaveletData$Factory factory>;

        $r1 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r3 = <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.id.WaveId WAVE_ID>;

        $r4 = <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.id.WaveletId WAVELET_ID>;

        $r5 = <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.wave.ParticipantId PARTICIPANT_ID>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>($r3, $r4, $r5, $r6, 0L);

        $r7 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.WaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r1);

        $r8 = (org.waveprotocol.wave.model.wave.data.WaveletData) $r7;

        return $r8;
    }

    public volatile java.lang.Object create()
    {
        org.waveprotocol.wave.model.testing.WaveletDataFactory r0;
        org.waveprotocol.wave.model.wave.data.WaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.WaveletDataFactory;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.wave.data.WaveletData create()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r0;
        org.waveprotocol.wave.model.id.IdGenerator $r1;

        $r0 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>("fake@example.com");

        <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.wave.ParticipantId PARTICIPANT_ID> = $r0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.testing.FakeIdGenerator: org.waveprotocol.wave.model.id.IdGenerator create()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveId newWaveId()>();

        <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.id.WaveId WAVE_ID> = $r2;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveletId newConversationWaveletId()>();

        <org.waveprotocol.wave.model.testing.WaveletDataFactory: org.waveprotocol.wave.model.id.WaveletId WAVELET_ID> = $r3;

        return;
    }
}
