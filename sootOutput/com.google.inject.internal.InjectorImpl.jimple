final class com.google.inject.internal.InjectorImpl extends java.lang.Object implements com.google.inject.Injector, com.google.inject.internal.Lookups
{
    public static final com.google.inject.TypeLiteral STRING_TYPE;
    final com.google.inject.internal.State state;
    final com.google.inject.internal.InjectorImpl parent;
    final com.google.inject.internal.InjectorImpl$BindingsMultimap bindingsMultimap;
    final com.google.inject.internal.InjectorImpl$InjectorOptions options;
    final java.util.Map jitBindings;
    com.google.inject.internal.Lookups lookups;
    final com.google.inject.internal.ConstructorInjectorStore constructors;
    com.google.inject.internal.MembersInjectorStore membersInjectorStore;
    final java.lang.ThreadLocal localContext;

    void <init>(com.google.inject.internal.InjectorImpl, com.google.inject.internal.State, com.google.inject.internal.InjectorImpl$InjectorOptions)
    {
        com.google.inject.internal.InjectorImpl$InjectorOptions r7;
        java.lang.ThreadLocal $r9;
        com.google.inject.internal.ConstructorInjectorStore $r4;
        java.util.HashMap $r2;
        com.google.inject.internal.InjectorImpl$BindingsMultimap $r1;
        com.google.inject.internal.InjectorImpl r0, r5;
        com.google.inject.internal.InjectorImpl$1 $r8;
        com.google.inject.internal.DeferredLookups $r3;
        com.google.inject.internal.State r6;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r5 := @parameter0: com.google.inject.internal.InjectorImpl;

        r6 := @parameter1: com.google.inject.internal.State;

        r7 := @parameter2: com.google.inject.internal.InjectorImpl$InjectorOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.inject.internal.InjectorImpl$BindingsMultimap;

        specialinvoke $r1.<com.google.inject.internal.InjectorImpl$BindingsMultimap: void <init>(com.google.inject.internal.InjectorImpl$1)>(null);

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$BindingsMultimap bindingsMultimap> = $r1;

        $r2 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings> = $r2;

        $r3 = new com.google.inject.internal.DeferredLookups;

        specialinvoke $r3.<com.google.inject.internal.DeferredLookups: void <init>(com.google.inject.internal.InjectorImpl)>(r0);

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.Lookups lookups> = $r3;

        $r4 = new com.google.inject.internal.ConstructorInjectorStore;

        specialinvoke $r4.<com.google.inject.internal.ConstructorInjectorStore: void <init>(com.google.inject.internal.InjectorImpl)>(r0);

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.ConstructorInjectorStore constructors> = $r4;

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent> = r5;

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state> = r6;

        r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options> = r7;

        if r5 == null goto label1;

        $r9 = r5.<com.google.inject.internal.InjectorImpl: java.lang.ThreadLocal localContext>;

        r0.<com.google.inject.internal.InjectorImpl: java.lang.ThreadLocal localContext> = $r9;

        goto label2;

     label1:
        $r8 = new com.google.inject.internal.InjectorImpl$1;

        specialinvoke $r8.<com.google.inject.internal.InjectorImpl$1: void <init>(com.google.inject.internal.InjectorImpl)>(r0);

        r0.<com.google.inject.internal.InjectorImpl: java.lang.ThreadLocal localContext> = $r8;

     label2:
        return;
    }

    void index()
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        com.google.inject.Binding r6;
        com.google.inject.internal.InjectorImpl r0;
        java.util.Map $r2;
        java.lang.Object $r5;
        com.google.inject.internal.State $r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.State: java.util.Map getExplicitBindingsThisLevel()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.inject.Binding) $r5;

        virtualinvoke r0.<com.google.inject.internal.InjectorImpl: void index(com.google.inject.Binding)>(r6);

        goto label1;

     label2:
        return;
    }

    void index(com.google.inject.Binding)
    {
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.Key $r3;
        com.google.inject.TypeLiteral $r4;
        com.google.inject.Binding r1;
        com.google.inject.internal.InjectorImpl$BindingsMultimap $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Binding;

        $r2 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$BindingsMultimap bindingsMultimap>;

        $r3 = interfaceinvoke r1.<com.google.inject.Binding: com.google.inject.Key getKey()>();

        $r4 = virtualinvoke $r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        virtualinvoke $r2.<com.google.inject.internal.InjectorImpl$BindingsMultimap: void put(com.google.inject.TypeLiteral,com.google.inject.Binding)>($r4, r1);

        return;
    }

    public java.util.List findBindingsByType(com.google.inject.TypeLiteral)
    {
        java.util.List $r3;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.TypeLiteral r1;
        com.google.inject.internal.InjectorImpl$BindingsMultimap $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $r2 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$BindingsMultimap bindingsMultimap>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.InjectorImpl$BindingsMultimap: java.util.List getAll(com.google.inject.TypeLiteral)>(r1);

        return $r3;
    }

    public com.google.inject.internal.BindingImpl getBinding(com.google.inject.Key)
    {
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl$JitLimitation $r3;
        com.google.inject.ConfigurationException $r6;
        com.google.inject.internal.Errors $r0, $r7, $r8;
        java.util.List $r9;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.ErrorsException $r5;
        com.google.inject.internal.BindingImpl $r4;

        r2 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

     label1:
        $r3 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation EXISTING_JIT>;

        $r4 = virtualinvoke r2.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>(r1, $r0, $r3);

        virtualinvoke $r0.<com.google.inject.internal.Errors: void throwConfigurationExceptionIfErrorsExist()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.google.inject.ConfigurationException;

        $r7 = virtualinvoke $r5.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r8 = virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r7);

        $r9 = virtualinvoke $r8.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r6.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r9);

        throw $r6;

        catch com.google.inject.internal.ErrorsException from label1 to label2 with label3;
    }

    public com.google.inject.internal.BindingImpl getExistingBinding(com.google.inject.Key)
    {
        java.lang.Throwable $r17;
        com.google.inject.Key r1, $r7;
        com.google.inject.internal.ErrorsException $r13;
        java.util.Map $r10;
        com.google.inject.internal.State $r2, $r4;
        boolean $z0;
        com.google.inject.ConfigurationException $r14;
        com.google.inject.internal.Errors $r6, $r15;
        java.util.List $r16;
        com.google.inject.internal.InjectorImpl r0, r18;
        com.google.inject.internal.BindingImpl $r3, $r8, $r9, r12;
        java.lang.Object $r5, $r11;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r2 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.State: com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key)>(r1);

        if $r3 == null goto label01;

        return $r3;

     label01:
        $r4 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r5 = interfaceinvoke $r4.<com.google.inject.internal.State: java.lang.Object lock()>();

        entermonitor $r5;

     label02:
        r18 = r0;

     label03:
        if r18 == null goto label06;

        $r10 = r18.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r12 = (com.google.inject.internal.BindingImpl) $r11;

        if r12 == null goto label05;

        exitmonitor $r5;

     label04:
        return r12;

     label05:
        r18 = r18.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        goto label03;

     label06:
        exitmonitor $r5;

     label07:
        goto label10;

     label08:
        $r17 := @caughtexception;

        exitmonitor $r5;

     label09:
        throw $r17;

     label10:
        $z0 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isProvider(com.google.inject.Key)>(r1);

        if $z0 == 0 goto label15;

     label11:
        $r6 = new com.google.inject.internal.Errors;

        specialinvoke $r6.<com.google.inject.internal.Errors: void <init>()>();

        $r7 = staticinvoke <com.google.inject.internal.InjectorImpl: com.google.inject.Key getProvidedKey(com.google.inject.Key,com.google.inject.internal.Errors)>(r1, $r6);

        $r8 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getExistingBinding(com.google.inject.Key)>($r7);

        if $r8 == null goto label13;

        $r9 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBinding(com.google.inject.Key)>(r1);

     label12:
        return $r9;

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

        $r14 = new com.google.inject.ConfigurationException;

        $r15 = virtualinvoke $r13.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r16 = virtualinvoke $r15.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r14.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r16);

        throw $r14;

     label15:
        return null;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch com.google.inject.internal.ErrorsException from label11 to label12 with label14;
    }

    com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key, com.google.inject.internal.Errors, com.google.inject.internal.InjectorImpl$JitLimitation) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r4;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.BindingImpl $r3, $r6;
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl$JitLimitation r5;
        com.google.inject.internal.State $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        r4 := @parameter1: com.google.inject.internal.Errors;

        r5 := @parameter2: com.google.inject.internal.InjectorImpl$JitLimitation;

        $r2 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.State: com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key)>(r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r6 = specialinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getJustInTimeBinding(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>(r1, r4, r5);

        return $r6;
    }

    public com.google.inject.Binding getBinding(java.lang.Class)
    {
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.BindingImpl $r3;
        com.google.inject.Key $r2;
        java.lang.Class r1;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBinding(com.google.inject.Key)>($r2);

        return $r3;
    }

    public com.google.inject.Injector getParent()
    {
        com.google.inject.internal.InjectorImpl r0, $r1;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        return $r1;
    }

    public com.google.inject.Injector createChildInjector(java.lang.Iterable)
    {
        com.google.inject.Injector $r5;
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.internal.InternalInjectorCreator $r0, $r2, $r4;
        java.lang.Iterable r3;

        r1 := @this: com.google.inject.internal.InjectorImpl;

        r3 := @parameter0: java.lang.Iterable;

        $r0 = new com.google.inject.internal.InternalInjectorCreator;

        specialinvoke $r0.<com.google.inject.internal.InternalInjectorCreator: void <init>()>();

        $r2 = virtualinvoke $r0.<com.google.inject.internal.InternalInjectorCreator: com.google.inject.internal.InternalInjectorCreator parentInjector(com.google.inject.internal.InjectorImpl)>(r1);

        $r4 = virtualinvoke $r2.<com.google.inject.internal.InternalInjectorCreator: com.google.inject.internal.InternalInjectorCreator addModules(java.lang.Iterable)>(r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.InternalInjectorCreator: com.google.inject.Injector build()>();

        return $r5;
    }

    public transient com.google.inject.Injector createChildInjector(com.google.inject.Module[])
    {
        com.google.inject.Injector $r3;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.util.$ImmutableList $r2;
        com.google.inject.Module[] r1;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Module[];

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object[])>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.Injector createChildInjector(java.lang.Iterable)>($r2);

        return $r3;
    }

    private com.google.inject.internal.BindingImpl getJustInTimeBinding(com.google.inject.Key, com.google.inject.internal.Errors, com.google.inject.internal.InjectorImpl$JitLimitation) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.InjectorImpl$InjectorOptions $r5, $r11;
        java.lang.Throwable $r15;
        com.google.inject.Key r0;
        com.google.inject.internal.InjectorImpl$JitLimitation r6, $r12;
        com.google.inject.internal.ErrorsException $r14;
        java.util.Map $r8;
        com.google.inject.internal.State $r2;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.google.inject.internal.Errors r4, $r13;
        com.google.inject.internal.InjectorImpl r1, r16;
        com.google.inject.internal.BindingImpl $r7, r10;
        java.lang.Object $r3, $r9;

        r1 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r4 := @parameter1: com.google.inject.internal.Errors;

        r6 := @parameter2: com.google.inject.internal.InjectorImpl$JitLimitation;

        $z0 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isProvider(com.google.inject.Key)>(r0);

        if $z0 != 0 goto label01;

        $z5 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isTypeLiteral(com.google.inject.Key)>(r0);

        if $z5 != 0 goto label01;

        $z6 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isMembersInjector(com.google.inject.Key)>(r0);

        if $z6 == 0 goto label02;

     label01:
        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        z1 = $z7;

        $r2 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.State: java.lang.Object lock()>();

        entermonitor $r3;

     label04:
        r16 = r1;

     label05:
        if r16 == null goto label09;

        $r8 = r16.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (com.google.inject.internal.BindingImpl) $r9;

        if r10 == null goto label08;

        $r11 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options>;

        $z3 = $r11.<com.google.inject.internal.InjectorImpl$InjectorOptions: boolean jitDisabled>;

        if $z3 == 0 goto label06;

        $r12 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        if r6 != $r12 goto label06;

        if z1 != 0 goto label06;

        $z4 = r10 instanceof com.google.inject.internal.InjectorImpl$ConvertedConstantBindingImpl;

        if $z4 != 0 goto label06;

        $r13 = virtualinvoke r4.<com.google.inject.internal.Errors: com.google.inject.internal.Errors jitDisabled(com.google.inject.Key)>(r0);

        $r14 = virtualinvoke $r13.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r14;

     label06:
        exitmonitor $r3;

     label07:
        return r10;

     label08:
        r16 = r16.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        goto label05;

     label09:
        $r5 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options>;

        $z2 = $r5.<com.google.inject.internal.InjectorImpl$InjectorOptions: boolean jitDisabled>;

        $r7 = specialinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createJustInTimeBindingRecursive(com.google.inject.Key,com.google.inject.internal.Errors,boolean,com.google.inject.internal.InjectorImpl$JitLimitation)>(r0, r4, $z2, r6);

        exitmonitor $r3;

     label10:
        return $r7;

     label11:
        $r15 := @caughtexception;

        exitmonitor $r3;

     label12:
        throw $r15;

        catch java.lang.Throwable from label04 to label07 with label11;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private static boolean isProvider(com.google.inject.Key)
    {
        com.google.inject.Key r0;
        java.lang.Class $r2;
        com.google.inject.TypeLiteral $r1;
        boolean $z0;

        r0 := @parameter0: com.google.inject.Key;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/Provider;");

        return $z0;
    }

    private static boolean isTypeLiteral(com.google.inject.Key)
    {
        com.google.inject.Key r0;
        java.lang.Class $r2;
        com.google.inject.TypeLiteral $r1;
        boolean $z0;

        r0 := @parameter0: com.google.inject.Key;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/TypeLiteral;");

        return $z0;
    }

    private static com.google.inject.Key getProvidedKey(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.Key r0, $r6;
        com.google.inject.internal.Errors r7, $r8;
        java.lang.reflect.ParameterizedType $r3;
        com.google.inject.internal.ErrorsException $r9;
        java.lang.reflect.Type $r2, r5;
        java.lang.reflect.Type[] $r4;
        com.google.inject.TypeLiteral $r1;
        boolean $z0;

        r0 := @parameter0: com.google.inject.Key;

        r7 := @parameter1: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectRawProvider()>();

        $r9 = virtualinvoke $r8.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r9;

     label1:
        $r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r5 = $r4[0];

        $r6 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.Key ofType(java.lang.reflect.Type)>(r5);

        return $r6;
    }

    private static boolean isMembersInjector(com.google.inject.Key)
    {
        com.google.inject.Key r0;
        java.lang.Class $r2, $r3;
        com.google.inject.TypeLiteral $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.google.inject.Key;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/MembersInjector;");

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r3 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private com.google.inject.internal.BindingImpl createMembersInjectorBinding(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.MembersInjectorImpl $r10;
        com.google.inject.Key r0;
        com.google.inject.internal.MembersInjectorStore $r9;
        com.google.inject.internal.InstanceBindingImpl $r13;
        com.google.inject.internal.Initializable $r12;
        com.google.inject.internal.util.$ImmutableSet $r15;
        com.google.inject.internal.ErrorsException $r17;
        com.google.inject.internal.ConstantFactory $r11;
        boolean $z0;
        com.google.inject.internal.Errors r8, $r16;
        com.google.inject.internal.InjectorImpl r7;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type $r2, $r5;
        java.lang.reflect.Type[] $r4;
        java.lang.Object $r14;
        com.google.inject.TypeLiteral $r1, $r6;

        r7 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r8 := @parameter1: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label1;

        $r16 = virtualinvoke r8.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectRawMembersInjector()>();

        $r17 = virtualinvoke $r16.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r17;

     label1:
        $r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = $r4[0];

        $r6 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.reflect.Type)>($r5);

        $r9 = r7.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.MembersInjectorStore membersInjectorStore>;

        $r10 = virtualinvoke $r9.<com.google.inject.internal.MembersInjectorStore: com.google.inject.internal.MembersInjectorImpl get(com.google.inject.TypeLiteral,com.google.inject.internal.Errors)>($r6, r8);

        $r11 = new com.google.inject.internal.ConstantFactory;

        $r12 = staticinvoke <com.google.inject.internal.Initializables: com.google.inject.internal.Initializable of(java.lang.Object)>($r10);

        specialinvoke $r11.<com.google.inject.internal.ConstantFactory: void <init>(com.google.inject.internal.Initializable)>($r12);

        $r13 = new com.google.inject.internal.InstanceBindingImpl;

        $r14 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        $r15 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        specialinvoke $r13.<com.google.inject.internal.InstanceBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,java.util.Set,java.lang.Object)>(r7, r0, $r14, $r11, $r15, $r10);

        return $r13;
    }

    private com.google.inject.internal.BindingImpl createProviderBinding(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r1;
        com.google.inject.internal.InjectorImpl r3;
        com.google.inject.internal.BindingImpl $r5;
        com.google.inject.internal.InjectorImpl$ProviderBindingImpl $r6;
        com.google.inject.Key r0, $r2;
        com.google.inject.internal.InjectorImpl$JitLimitation $r4;

        r3 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r1 := @parameter1: com.google.inject.internal.Errors;

        $r2 = staticinvoke <com.google.inject.internal.InjectorImpl: com.google.inject.Key getProvidedKey(com.google.inject.Key,com.google.inject.internal.Errors)>(r0, r1);

        $r4 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        $r5 = virtualinvoke r3.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>($r2, r1, $r4);

        $r6 = new com.google.inject.internal.InjectorImpl$ProviderBindingImpl;

        specialinvoke $r6.<com.google.inject.internal.InjectorImpl$ProviderBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,com.google.inject.Binding)>(r3, r0, $r5);

        return $r6;
    }

    private com.google.inject.internal.BindingImpl convertConstantStringBinding(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.Key r0, $r2;
        com.google.inject.spi.TypeConverter $r14;
        com.google.inject.internal.ErrorsException $r19, $r21, $r24, $r25;
        com.google.inject.spi.TypeConverterBinding $r13;
        com.google.inject.internal.State $r4, $r12;
        java.lang.String r8;
        boolean $z0, $z1;
        com.google.inject.internal.InjectorImpl$ConvertedConstantBindingImpl $r17;
        java.lang.RuntimeException $r22;
        com.google.inject.internal.Errors r11, $r18, $r20, $r23;
        com.google.inject.Provider $r6;
        com.google.inject.internal.InjectorImpl r3;
        com.google.inject.internal.BindingImpl $r5;
        java.lang.Object $r7, $r9, $r15;
        java.lang.Class $r16;
        com.google.inject.TypeLiteral $r1, $r10;

        r3 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r11 := @parameter1: com.google.inject.internal.Errors;

        $r1 = <com.google.inject.internal.InjectorImpl: com.google.inject.TypeLiteral STRING_TYPE>;

        $r2 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.Key ofType(com.google.inject.TypeLiteral)>($r1);

        $r4 = r3.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r5 = interfaceinvoke $r4.<com.google.inject.internal.State: com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key)>($r2);

        if $r5 == null goto label1;

        $z0 = virtualinvoke $r5.<com.google.inject.internal.BindingImpl: boolean isConstant()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke $r5.<com.google.inject.internal.BindingImpl: com.google.inject.Provider getProvider()>();

        $r7 = interfaceinvoke $r6.<com.google.inject.Provider: java.lang.Object get()>();

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<com.google.inject.internal.BindingImpl: java.lang.Object getSource()>();

        $r10 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r12 = r3.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r13 = interfaceinvoke $r12.<com.google.inject.internal.State: com.google.inject.spi.TypeConverterBinding getConverter(java.lang.String,com.google.inject.TypeLiteral,com.google.inject.internal.Errors,java.lang.Object)>(r8, $r10, r11, $r9);

        if $r13 != null goto label3;

        return null;

     label3:
        $r14 = virtualinvoke $r13.<com.google.inject.spi.TypeConverterBinding: com.google.inject.spi.TypeConverter getTypeConverter()>();

        $r15 = interfaceinvoke $r14.<com.google.inject.spi.TypeConverter: java.lang.Object convert(java.lang.String,com.google.inject.TypeLiteral)>(r8, $r10);

        if $r15 != null goto label4;

        $r20 = virtualinvoke r11.<com.google.inject.internal.Errors: com.google.inject.internal.Errors converterReturnedNull(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding)>(r8, $r9, $r10, $r13);

        $r21 = virtualinvoke $r20.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r21;

     label4:
        $r16 = virtualinvoke $r10.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z1 = virtualinvoke $r16.<java.lang.Class: boolean isInstance(java.lang.Object)>($r15);

        if $z1 != 0 goto label5;

        $r18 = virtualinvoke r11.<com.google.inject.internal.Errors: com.google.inject.internal.Errors conversionTypeError(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding,java.lang.Object)>(r8, $r9, $r10, $r13, $r15);

        $r19 = virtualinvoke $r18.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r19;

     label5:
        $r17 = new com.google.inject.internal.InjectorImpl$ConvertedConstantBindingImpl;

        specialinvoke $r17.<com.google.inject.internal.InjectorImpl$ConvertedConstantBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.Binding,com.google.inject.spi.TypeConverterBinding)>(r3, r0, $r15, $r5, $r13);

     label6:
        return $r17;

     label7:
        $r25 := @caughtexception;

        throw $r25;

     label8:
        $r22 := @caughtexception;

        $r23 = virtualinvoke r11.<com.google.inject.internal.Errors: com.google.inject.internal.Errors conversionError(java.lang.String,java.lang.Object,com.google.inject.TypeLiteral,com.google.inject.spi.TypeConverterBinding,java.lang.RuntimeException)>(r8, $r9, $r10, $r13, $r22);

        $r24 = virtualinvoke $r23.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r24;

        catch com.google.inject.internal.ErrorsException from label3 to label6 with label7;
        catch java.lang.RuntimeException from label3 to label6 with label8;
    }

    void initializeBinding(com.google.inject.internal.BindingImpl, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r2;
        com.google.inject.internal.ConstructorBindingImpl $r3;
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.internal.BindingImpl r0;
        boolean $z0;

        r1 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.internal.BindingImpl;

        r2 := @parameter1: com.google.inject.internal.Errors;

        $z0 = r0 instanceof com.google.inject.internal.ConstructorBindingImpl;

        if $z0 == 0 goto label1;

        $r3 = (com.google.inject.internal.ConstructorBindingImpl) r0;

        virtualinvoke $r3.<com.google.inject.internal.ConstructorBindingImpl: void initialize(com.google.inject.internal.InjectorImpl,com.google.inject.internal.Errors)>(r1, r2);

     label1:
        return;
    }

    void initializeJitBinding(com.google.inject.internal.BindingImpl, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        java.lang.Throwable $r7;
        com.google.inject.Key $r1;
        java.util.HashSet $r6, $r8;
        com.google.inject.internal.ConstructorBindingImpl r4;
        com.google.inject.internal.Errors r5;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.BindingImpl r0;
        java.util.Map $r3;
        boolean $z0;

        r2 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.internal.BindingImpl;

        r5 := @parameter1: com.google.inject.internal.Errors;

        $z0 = r0 instanceof com.google.inject.internal.ConstructorBindingImpl;

        if $z0 == 0 goto label6;

        $r1 = virtualinvoke r0.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r3 = r2.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        r4 = (com.google.inject.internal.ConstructorBindingImpl) r0;

     label1:
        virtualinvoke r4.<com.google.inject.internal.ConstructorBindingImpl: void initialize(com.google.inject.internal.InjectorImpl,com.google.inject.internal.Errors)>(r2, r5);

     label2:
        if 1 != 0 goto label6;

        specialinvoke r2.<com.google.inject.internal.InjectorImpl: void removeFailedJitBinding(com.google.inject.Key,com.google.inject.spi.InjectionPoint)>($r1, null);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        specialinvoke r2.<com.google.inject.internal.InjectorImpl: boolean cleanup(com.google.inject.internal.BindingImpl,java.util.Set)>(r0, $r6);

        goto label6;

     label3:
        $r7 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        specialinvoke r2.<com.google.inject.internal.InjectorImpl: void removeFailedJitBinding(com.google.inject.Key,com.google.inject.spi.InjectionPoint)>($r1, null);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        specialinvoke r2.<com.google.inject.internal.InjectorImpl: boolean cleanup(com.google.inject.internal.BindingImpl,java.util.Set)>(r0, $r8);

     label5:
        throw $r7;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean cleanup(com.google.inject.internal.BindingImpl, java.util.Set)
    {
        com.google.inject.Key $r6;
        com.google.inject.internal.ConstructorBindingImpl r13;
        java.util.Map $r8;
        com.google.inject.internal.State $r11;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.util.Iterator $r3;
        com.google.inject.spi.Dependency r5;
        java.util.Set $r2, r7;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.spi.InjectionPoint r14;
        com.google.inject.internal.BindingImpl r1, r10, $r12;
        java.lang.Object $r4, $r9;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.internal.BindingImpl;

        r7 := @parameter1: java.util.Set;

        z4 = 0;

        $r2 = specialinvoke r0.<com.google.inject.internal.InjectorImpl: java.util.Set getInternalDependencies(com.google.inject.internal.BindingImpl)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.inject.spi.Dependency) $r4;

        $r6 = virtualinvoke r5.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        r14 = virtualinvoke r5.<com.google.inject.spi.Dependency: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        $z1 = interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>($r6);

        if $z1 == 0 goto label5;

        $r8 = r0.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r10 = (com.google.inject.internal.BindingImpl) $r9;

        if r10 == null goto label4;

        z5 = specialinvoke r0.<com.google.inject.internal.InjectorImpl: boolean cleanup(com.google.inject.internal.BindingImpl,java.util.Set)>(r10, r7);

        $z2 = r10 instanceof com.google.inject.internal.ConstructorBindingImpl;

        if $z2 == 0 goto label2;

        r13 = (com.google.inject.internal.ConstructorBindingImpl) r10;

        r14 = virtualinvoke r13.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint getInternalConstructor()>();

        $z3 = virtualinvoke r13.<com.google.inject.internal.ConstructorBindingImpl: boolean isInitialized()>();

        if $z3 != 0 goto label2;

        z5 = 1;

     label2:
        if z5 == 0 goto label3;

        specialinvoke r0.<com.google.inject.internal.InjectorImpl: void removeFailedJitBinding(com.google.inject.Key,com.google.inject.spi.InjectionPoint)>($r6, r14);

        z4 = 1;

     label3:
        goto label5;

     label4:
        $r11 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r12 = interfaceinvoke $r11.<com.google.inject.internal.State: com.google.inject.internal.BindingImpl getExplicitBinding(com.google.inject.Key)>($r6);

        if $r12 != null goto label5;

        z4 = 1;

     label5:
        goto label1;

     label6:
        return z4;
    }

    private void removeFailedJitBinding(com.google.inject.Key, com.google.inject.spi.InjectionPoint)
    {
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.spi.InjectionPoint r5;
        com.google.inject.internal.ConstructorInjectorStore $r6;
        java.util.Map $r2;
        com.google.inject.Key r1;
        com.google.inject.internal.MembersInjectorStore $r3;
        com.google.inject.TypeLiteral $r4;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        r5 := @parameter1: com.google.inject.spi.InjectionPoint;

        $r2 = r0.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r3 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.MembersInjectorStore membersInjectorStore>;

        $r4 = virtualinvoke r1.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        virtualinvoke $r3.<com.google.inject.internal.MembersInjectorStore: boolean remove(com.google.inject.TypeLiteral)>($r4);

        if r5 == null goto label1;

        $r6 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.ConstructorInjectorStore constructors>;

        virtualinvoke $r6.<com.google.inject.internal.ConstructorInjectorStore: boolean remove(com.google.inject.spi.InjectionPoint)>(r5);

     label1:
        return;
    }

    private java.util.Set getInternalDependencies(com.google.inject.internal.BindingImpl)
    {
        com.google.inject.spi.HasDependencies $r2;
        java.util.Set $r3, $r5;
        com.google.inject.internal.ConstructorBindingImpl $r4;
        com.google.inject.internal.InjectorImpl r6;
        com.google.inject.internal.util.$ImmutableSet $r1;
        com.google.inject.internal.BindingImpl r0;
        boolean $z0, $z1;

        r6 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.internal.BindingImpl;

        $z0 = r0 instanceof com.google.inject.internal.ConstructorBindingImpl;

        if $z0 == 0 goto label1;

        $r4 = (com.google.inject.internal.ConstructorBindingImpl) r0;

        $r5 = virtualinvoke $r4.<com.google.inject.internal.ConstructorBindingImpl: java.util.Set getInternalDependencies()>();

        return $r5;

     label1:
        $z1 = r0 instanceof com.google.inject.spi.HasDependencies;

        if $z1 == 0 goto label2;

        $r2 = (com.google.inject.spi.HasDependencies) r0;

        $r3 = interfaceinvoke $r2.<com.google.inject.spi.HasDependencies: java.util.Set getDependencies()>();

        return $r3;

     label2:
        $r1 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r1;
    }

    com.google.inject.internal.BindingImpl createUninitializedBinding(com.google.inject.Key, com.google.inject.internal.Scoping, java.lang.Object, com.google.inject.internal.Errors, boolean) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.InjectorImpl$InjectorOptions $r12;
        com.google.inject.internal.Scoping r11;
        com.google.inject.Key r0;
        com.google.inject.internal.ConstructorBindingImpl $r17;
        com.google.inject.internal.ErrorsException $r5;
        com.google.inject.ProvidedBy r8;
        boolean $z0, $z1, z2, $z3, $z4;
        com.google.inject.ImplementedBy r16;
        com.google.inject.internal.Errors r3, $r4;
        com.google.inject.internal.InjectorImpl r9;
        com.google.inject.internal.BindingImpl $r13, $r14, $r15;
        java.lang.'annotation'.Annotation $r6, $r7;
        java.lang.Class $r2;
        java.lang.Object r10;
        com.google.inject.TypeLiteral $r1;

        r9 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r11 := @parameter1: com.google.inject.internal.Scoping;

        r10 := @parameter2: java.lang.Object;

        r3 := @parameter3: com.google.inject.internal.Errors;

        z2 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label2;

     label1:
        $r4 = virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors missingImplementation(com.google.inject.Key)>(r0);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r5;

     label2:
        if $r2 != class "Lcom/google/inject/TypeLiteral;" goto label3;

        $r15 = specialinvoke r9.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createTypeLiteralBinding(com.google.inject.Key,com.google.inject.internal.Errors)>(r0, r3);

        return $r15;

     label3:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/google/inject/ImplementedBy;");

        r16 = (com.google.inject.ImplementedBy) $r6;

        if r16 == null goto label4;

        staticinvoke <com.google.inject.internal.Annotations: void checkForMisplacedScopeAnnotations(java.lang.Class,java.lang.Object,com.google.inject.internal.Errors)>($r2, r10, r3);

        $r14 = specialinvoke r9.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createImplementedByBinding(com.google.inject.Key,com.google.inject.internal.Scoping,com.google.inject.ImplementedBy,com.google.inject.internal.Errors)>(r0, r11, r16, r3);

        return $r14;

     label4:
        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/google/inject/ProvidedBy;");

        r8 = (com.google.inject.ProvidedBy) $r7;

        if r8 == null goto label5;

        staticinvoke <com.google.inject.internal.Annotations: void checkForMisplacedScopeAnnotations(java.lang.Class,java.lang.Object,com.google.inject.internal.Errors)>($r2, r10, r3);

        $r13 = virtualinvoke r9.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createProvidedByBinding(com.google.inject.Key,com.google.inject.internal.Scoping,com.google.inject.ProvidedBy,com.google.inject.internal.Errors)>(r0, r11, r8, r3);

        return $r13;

     label5:
        if z2 == 0 goto label6;

        $r12 = r9.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options>;

        $z3 = $r12.<com.google.inject.internal.InjectorImpl$InjectorOptions: boolean jitDisabled>;

        if $z3 == 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        $r17 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl create(com.google.inject.internal.InjectorImpl,com.google.inject.Key,com.google.inject.spi.InjectionPoint,java.lang.Object,com.google.inject.internal.Scoping,com.google.inject.internal.Errors,boolean)>(r9, r0, null, r10, r11, r3, $z4);

        return $r17;
    }

    private com.google.inject.internal.BindingImpl createTypeLiteralBinding(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.Key r0;
        com.google.inject.internal.InstanceBindingImpl $r15;
        com.google.inject.internal.Initializable $r14;
        com.google.inject.internal.ErrorsException $r9, $r11;
        com.google.inject.internal.util.$ImmutableSet $r17;
        com.google.inject.internal.ConstantFactory $r13;
        boolean $z0, $z1, $z2, $z3;
        com.google.inject.internal.Errors r7, $r8, $r10;
        com.google.inject.internal.InjectorImpl r6;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type $r2, r5;
        java.lang.reflect.Type[] $r4;
        java.lang.Object $r16;
        com.google.inject.TypeLiteral $r1, $r12;

        r6 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r7 := @parameter1: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectRawTypeLiteral()>();

        $r11 = virtualinvoke $r10.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r11;

     label1:
        r3 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r5 = $r4[0];

        $z1 = r5 instanceof java.lang.Class;

        if $z1 != 0 goto label2;

        $z2 = r5 instanceof java.lang.reflect.GenericArrayType;

        if $z2 != 0 goto label2;

        $z3 = r5 instanceof java.lang.reflect.ParameterizedType;

        if $z3 != 0 goto label2;

        $r8 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectTypeLiteralOf(java.lang.reflect.Type)>(r5);

        $r9 = virtualinvoke $r8.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r9;

     label2:
        $r12 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.reflect.Type)>(r5);

        $r13 = new com.google.inject.internal.ConstantFactory;

        $r14 = staticinvoke <com.google.inject.internal.Initializables: com.google.inject.internal.Initializable of(java.lang.Object)>($r12);

        specialinvoke $r13.<com.google.inject.internal.ConstantFactory: void <init>(com.google.inject.internal.Initializable)>($r14);

        $r15 = new com.google.inject.internal.InstanceBindingImpl;

        $r16 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        $r17 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        specialinvoke $r15.<com.google.inject.internal.InstanceBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,java.util.Set,java.lang.Object)>(r6, r0, $r16, $r13, $r17, $r12);

        return $r15;
    }

    com.google.inject.internal.BindingImpl createProvidedByBinding(com.google.inject.Key, com.google.inject.internal.Scoping, com.google.inject.ProvidedBy, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Scoping r12;
        com.google.inject.Key r0, $r5;
        com.google.inject.internal.InjectorImpl$JitLimitation $r8;
        com.google.inject.internal.ErrorsException $r15;
        com.google.inject.internal.InjectorImpl$2 $r10;
        com.google.inject.ProvidedBy r3;
        com.google.inject.internal.LinkedProviderBindingImpl $r11;
        com.google.inject.internal.Errors r7, $r14;
        com.google.inject.internal.InjectorImpl r6;
        com.google.inject.internal.BindingImpl $r9;
        com.google.inject.internal.InternalFactory $r13;
        java.lang.Class $r2, $r4;
        com.google.inject.TypeLiteral $r1;

        r6 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r12 := @parameter1: com.google.inject.internal.Scoping;

        r3 := @parameter2: com.google.inject.ProvidedBy;

        r7 := @parameter3: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r4 = interfaceinvoke r3.<com.google.inject.ProvidedBy: java.lang.Class value()>();

        if $r4 != $r2 goto label1;

        $r14 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors recursiveProviderType()>();

        $r15 = virtualinvoke $r14.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r15;

     label1:
        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>($r4);

        $r8 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NEW_OR_EXISTING_JIT>;

        $r9 = virtualinvoke r6.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>($r5, r7, $r8);

        $r10 = new com.google.inject.internal.InjectorImpl$2;

        specialinvoke $r10.<com.google.inject.internal.InjectorImpl$2: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,com.google.inject.internal.BindingImpl,java.lang.Class,java.lang.Class)>(r6, $r5, $r9, $r2, $r4);

        $r11 = new com.google.inject.internal.LinkedProviderBindingImpl;

        $r13 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.InternalFactory scope(com.google.inject.Key,com.google.inject.internal.InjectorImpl,com.google.inject.internal.InternalFactory,java.lang.Object,com.google.inject.internal.Scoping)>(r0, r6, $r10, $r2, r12);

        specialinvoke $r11.<com.google.inject.internal.LinkedProviderBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.Key)>(r6, r0, $r2, $r13, r12, $r5);

        return $r11;
    }

    private com.google.inject.internal.BindingImpl createImplementedByBinding(com.google.inject.Key, com.google.inject.internal.Scoping, com.google.inject.ImplementedBy, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Scoping r12;
        com.google.inject.Key r0, $r5;
        com.google.inject.internal.InjectorImpl$JitLimitation $r8;
        com.google.inject.internal.InjectorImpl$3 $r10;
        com.google.inject.internal.ErrorsException $r15, $r17;
        boolean $z0;
        com.google.inject.ImplementedBy r3;
        com.google.inject.internal.LinkedBindingImpl $r11;
        com.google.inject.internal.Errors r7, $r14, $r16;
        com.google.inject.internal.InjectorImpl r6;
        com.google.inject.internal.BindingImpl $r9;
        com.google.inject.internal.InternalFactory $r13;
        java.lang.Class $r2, $r4;
        com.google.inject.TypeLiteral $r1;

        r6 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: com.google.inject.Key;

        r12 := @parameter1: com.google.inject.internal.Scoping;

        r3 := @parameter2: com.google.inject.ImplementedBy;

        r7 := @parameter3: com.google.inject.internal.Errors;

        $r1 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r2 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r4 = interfaceinvoke r3.<com.google.inject.ImplementedBy: java.lang.Class value()>();

        if $r4 != $r2 goto label1;

        $r16 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors recursiveImplementationType()>();

        $r17 = virtualinvoke $r16.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r17;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 != 0 goto label2;

        $r14 = virtualinvoke r7.<com.google.inject.internal.Errors: com.google.inject.internal.Errors notASubtype(java.lang.Class,java.lang.Class)>($r4, $r2);

        $r15 = virtualinvoke $r14.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r15;

     label2:
        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>($r4);

        $r8 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NEW_OR_EXISTING_JIT>;

        $r9 = virtualinvoke r6.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>($r5, r7, $r8);

        $r10 = new com.google.inject.internal.InjectorImpl$3;

        specialinvoke $r10.<com.google.inject.internal.InjectorImpl$3: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.internal.BindingImpl,com.google.inject.Key)>(r6, $r9, $r5);

        $r11 = new com.google.inject.internal.LinkedBindingImpl;

        $r13 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.InternalFactory scope(com.google.inject.Key,com.google.inject.internal.InjectorImpl,com.google.inject.internal.InternalFactory,java.lang.Object,com.google.inject.internal.Scoping)>(r0, r6, $r10, $r2, r12);

        specialinvoke $r11.<com.google.inject.internal.LinkedBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.Key)>(r6, r0, $r2, $r13, r12, $r5);

        return $r11;
    }

    private com.google.inject.internal.BindingImpl createJustInTimeBindingRecursive(com.google.inject.Key, com.google.inject.internal.Errors, boolean, com.google.inject.internal.InjectorImpl$JitLimitation) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.InjectorImpl$InjectorOptions $r18;
        com.google.inject.Key r2;
        com.google.inject.internal.InjectorImpl$JitLimitation r5, $r21;
        com.google.inject.internal.ErrorsException $r14, $r20;
        java.util.Map $r10;
        com.google.inject.internal.State $r3, $r7, $r8, $r11;
        boolean $z0, z1, $z2;
        java.util.Set $r12;
        com.google.inject.internal.Errors r4, $r13, $r15;
        com.google.inject.internal.InjectorImpl r0, $r1, $r16, $r17;
        com.google.inject.internal.BindingImpl $r6, $r19;
        java.lang.Object $r9;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r2 := @parameter0: com.google.inject.Key;

        r4 := @parameter1: com.google.inject.internal.Errors;

        z1 := @parameter2: boolean;

        r5 := @parameter3: com.google.inject.internal.InjectorImpl$JitLimitation;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        if $r1 == null goto label6;

     label1:
        $r16 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        $r15 = new com.google.inject.internal.Errors;

        specialinvoke $r15.<com.google.inject.internal.Errors: void <init>()>();

        $r17 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl parent>;

        $r18 = $r17.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options>;

        $z2 = $r18.<com.google.inject.internal.InjectorImpl$InjectorOptions: boolean jitDisabled>;

        if $z2 == 0 goto label2;

        $r21 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        goto label3;

     label2:
        $r21 = r5;

     label3:
        $r19 = specialinvoke $r16.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createJustInTimeBindingRecursive(com.google.inject.Key,com.google.inject.internal.Errors,boolean,com.google.inject.internal.InjectorImpl$JitLimitation)>(r2, $r15, z1, $r21);

     label4:
        return $r19;

     label5:
        $r20 := @caughtexception;

     label6:
        $r3 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $z0 = interfaceinvoke $r3.<com.google.inject.internal.State: boolean isBlacklisted(com.google.inject.Key)>(r2);

        if $z0 == 0 goto label7;

        $r11 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r12 = interfaceinvoke $r11.<com.google.inject.internal.State: java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key)>(r2);

        $r13 = virtualinvoke r4.<com.google.inject.internal.Errors: com.google.inject.internal.Errors childBindingAlreadySet(com.google.inject.Key,java.util.Set)>(r2, $r12);

        $r14 = virtualinvoke $r13.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r14;

     label7:
        $r6 = specialinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createJustInTimeBinding(com.google.inject.Key,com.google.inject.internal.Errors,boolean,com.google.inject.internal.InjectorImpl$JitLimitation)>(r2, r4, z1, r5);

        $r7 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r8 = interfaceinvoke $r7.<com.google.inject.internal.State: com.google.inject.internal.State parent()>();

        $r9 = virtualinvoke $r6.<com.google.inject.internal.BindingImpl: java.lang.Object getSource()>();

        interfaceinvoke $r8.<com.google.inject.internal.State: void blacklist(com.google.inject.Key,java.lang.Object)>(r2, $r9);

        $r10 = r0.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

        return $r6;

        catch com.google.inject.internal.ErrorsException from label1 to label4 with label5;
    }

    private com.google.inject.internal.BindingImpl createJustInTimeBinding(com.google.inject.Key, com.google.inject.internal.Errors, boolean, com.google.inject.internal.InjectorImpl$JitLimitation) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Scoping $r7;
        com.google.inject.Key r2, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.util.Set $r22;
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.TypeLiteral $r5;
        com.google.inject.internal.InjectorImpl$JitLimitation $r13, r15, $r16;
        com.google.inject.internal.ErrorsException $r10, $r18, $r24, $r25;
        int $i0;
        com.google.inject.internal.State $r3, $r21;
        com.google.inject.internal.Errors r0, $r9, $r11, $r17, $r23;
        com.google.inject.internal.BindingImpl $r4, $r8, $r14, $r19, $r20;
        java.lang.Class $r6, $r26;

        r1 := @this: com.google.inject.internal.InjectorImpl;

        r2 := @parameter0: com.google.inject.Key;

        r0 := @parameter1: com.google.inject.internal.Errors;

        z5 := @parameter2: boolean;

        r15 := @parameter3: com.google.inject.internal.InjectorImpl$JitLimitation;

        $i0 = virtualinvoke r0.<com.google.inject.internal.Errors: int size()>();

        $r3 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $z0 = interfaceinvoke $r3.<com.google.inject.internal.State: boolean isBlacklisted(com.google.inject.Key)>(r2);

        if $z0 == 0 goto label01;

        $r21 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r22 = interfaceinvoke $r21.<com.google.inject.internal.State: java.util.Set getSourcesForBlacklistedKey(com.google.inject.Key)>(r2);

        $r23 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors childBindingAlreadySet(com.google.inject.Key,java.util.Set)>(r2, $r22);

        $r24 = virtualinvoke $r23.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r24;

     label01:
        $z1 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isProvider(com.google.inject.Key)>(r2);

        if $z1 == 0 goto label02;

        $r20 = specialinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createProviderBinding(com.google.inject.Key,com.google.inject.internal.Errors)>(r2, r0);

        return $r20;

     label02:
        $z2 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isMembersInjector(com.google.inject.Key)>(r2);

        if $z2 == 0 goto label03;

        $r19 = specialinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createMembersInjectorBinding(com.google.inject.Key,com.google.inject.internal.Errors)>(r2, r0);

        return $r19;

     label03:
        $r4 = specialinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl convertConstantStringBinding(com.google.inject.Key,com.google.inject.internal.Errors)>(r2, r0);

        if $r4 == null goto label04;

        return $r4;

     label04:
        $z3 = staticinvoke <com.google.inject.internal.InjectorImpl: boolean isTypeLiteral(com.google.inject.Key)>(r2);

        if $z3 != 0 goto label05;

        if z5 == 0 goto label05;

        $r16 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NEW_OR_EXISTING_JIT>;

        if r15 == $r16 goto label05;

        $r17 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors jitDisabled(com.google.inject.Key)>(r2);

        $r18 = virtualinvoke $r17.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r18;

     label05:
        $r26 = virtualinvoke r2.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r26 == null goto label10;

        $z4 = virtualinvoke r2.<com.google.inject.Key: boolean hasAttributes()>();

        if $z4 == 0 goto label09;

     label06:
        $r11 = new com.google.inject.internal.Errors;

        specialinvoke $r11.<com.google.inject.internal.Errors: void <init>()>();

        $r12 = virtualinvoke r2.<com.google.inject.Key: com.google.inject.Key withoutAttributes()>();

        $r13 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        $r14 = virtualinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>($r12, $r11, $r13);

     label07:
        return $r14;

     label08:
        $r25 := @caughtexception;

     label09:
        $r9 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors missingImplementation(com.google.inject.Key)>(r2);

        $r10 = virtualinvoke $r9.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r10;

     label10:
        $r5 = virtualinvoke r2.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r6 = virtualinvoke $r5.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r7 = <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping UNSCOPED>;

        $r8 = virtualinvoke r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl createUninitializedBinding(com.google.inject.Key,com.google.inject.internal.Scoping,java.lang.Object,com.google.inject.internal.Errors,boolean)>(r2, $r7, $r6, r0, 1);

        virtualinvoke r0.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>($i0);

        virtualinvoke r1.<com.google.inject.internal.InjectorImpl: void initializeJitBinding(com.google.inject.internal.BindingImpl,com.google.inject.internal.Errors)>($r8, r0);

        return $r8;

        catch com.google.inject.internal.ErrorsException from label06 to label07 with label08;
    }

    com.google.inject.internal.InternalFactory getInternalFactory(com.google.inject.Key, com.google.inject.internal.Errors, com.google.inject.internal.InjectorImpl$JitLimitation) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r2;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.BindingImpl $r4;
        com.google.inject.internal.InternalFactory $r5;
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl$JitLimitation r3;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        r2 := @parameter1: com.google.inject.internal.Errors;

        r3 := @parameter2: com.google.inject.internal.InjectorImpl$JitLimitation;

        $r4 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBindingOrThrow(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>(r1, r2, r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.BindingImpl: com.google.inject.internal.InternalFactory getInternalFactory()>();

        return $r5;
    }

    public java.util.Map getBindings()
    {
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.State $r1;
        java.util.Map $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.State: java.util.Map getExplicitBindingsThisLevel()>();

        return $r2;
    }

    public java.util.Map getAllBindings()
    {
        java.lang.Throwable $r10;
        com.google.inject.internal.util.$ImmutableMap $r9;
        com.google.inject.internal.InjectorImpl r0;
        java.util.Map $r5, $r7;
        java.lang.Object $r2;
        com.google.inject.internal.State $r1, $r4;
        com.google.inject.internal.util.$ImmutableMap$Builder $r3, $r6, $r8;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.State: java.lang.Object lock()>();

        entermonitor $r2;

     label1:
        $r3 = new com.google.inject.internal.util.$ImmutableMap$Builder;

        specialinvoke $r3.<com.google.inject.internal.util.$ImmutableMap$Builder: void <init>()>();

        $r4 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r5 = interfaceinvoke $r4.<com.google.inject.internal.State: java.util.Map getExplicitBindingsThisLevel()>();

        $r6 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder putAll(java.util.Map)>($r5);

        $r7 = r0.<com.google.inject.internal.InjectorImpl: java.util.Map jitBindings>;

        $r8 = virtualinvoke $r6.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap$Builder putAll(java.util.Map)>($r7);

        $r9 = virtualinvoke $r8.<com.google.inject.internal.util.$ImmutableMap$Builder: com.google.inject.internal.util.$ImmutableMap build()>();

        exitmonitor $r2;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Map getScopeBindings()
    {
        com.google.inject.internal.InjectorImpl r0;
        java.util.Map $r2;
        com.google.inject.internal.State $r1;
        com.google.inject.internal.util.$ImmutableMap $r3;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.State: java.util.Map getScopes()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableMap copyOf(java.util.Map)>($r2);

        return $r3;
    }

    public java.util.Set getTypeConverterBindings()
    {
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.util.$ImmutableSet $r3;
        com.google.inject.internal.State $r1;
        java.lang.Iterable $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.State: java.lang.Iterable getConvertersThisLevel()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)>($r2);

        return $r3;
    }

    com.google.inject.internal.SingleParameterInjector[] getParametersInjectors(java.util.List, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.ErrorsException $r9;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        com.google.inject.internal.SingleParameterInjector $r8;
        java.util.Iterator $r3;
        com.google.inject.spi.Dependency r5;
        com.google.inject.internal.Errors r1, $r7;
        java.util.List r0;
        com.google.inject.internal.InjectorImpl r6;
        java.lang.Object $r4;
        com.google.inject.internal.SingleParameterInjector[] r2;

        r6 := @this: com.google.inject.internal.InjectorImpl;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.google.inject.internal.Errors;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r1.<com.google.inject.internal.Errors: int size()>();

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = newarray (com.google.inject.internal.SingleParameterInjector)[$i1];

        i3 = 0;

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.inject.spi.Dependency) $r4;

     label3:
        $i2 = i3;

        i3 = i3 + 1;

        $r7 = virtualinvoke r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r5);

        $r8 = virtualinvoke r6.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.SingleParameterInjector createParameterInjector(com.google.inject.spi.Dependency,com.google.inject.internal.Errors)>(r5, $r7);

        r2[$i2] = $r8;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        goto label2;

     label7:
        virtualinvoke r1.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>($i0);

        return r2;

        catch com.google.inject.internal.ErrorsException from label3 to label4 with label5;
    }

    com.google.inject.internal.SingleParameterInjector createParameterInjector(com.google.inject.spi.Dependency, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r3;
        com.google.inject.internal.SingleParameterInjector $r6;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.InternalFactory $r5;
        com.google.inject.spi.Dependency r1;
        com.google.inject.Key $r2;
        com.google.inject.internal.InjectorImpl$JitLimitation $r4;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.spi.Dependency;

        r3 := @parameter1: com.google.inject.internal.Errors;

        $r2 = virtualinvoke r1.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r4 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        $r5 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InternalFactory getInternalFactory(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>($r2, r3, $r4);

        $r6 = new com.google.inject.internal.SingleParameterInjector;

        specialinvoke $r6.<com.google.inject.internal.SingleParameterInjector: void <init>(com.google.inject.spi.Dependency,com.google.inject.internal.InternalFactory)>(r1, $r5);

        return $r6;
    }

    public void injectMembers(java.lang.Object)
    {
        com.google.inject.internal.InjectorImpl r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        com.google.inject.MembersInjector $r3;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.MembersInjector getMembersInjector(java.lang.Class)>($r2);

        interfaceinvoke $r3.<com.google.inject.MembersInjector: void injectMembers(java.lang.Object)>(r1);

        return;
    }

    public com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.MembersInjectorImpl $r4;
        com.google.inject.internal.MembersInjectorStore $r3;
        com.google.inject.ConfigurationException $r6;
        com.google.inject.internal.Errors $r0, $r7, $r8;
        java.util.List $r9;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.ErrorsException $r5;
        com.google.inject.TypeLiteral r1;

        r2 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

     label1:
        $r3 = r2.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.MembersInjectorStore membersInjectorStore>;

        $r4 = virtualinvoke $r3.<com.google.inject.internal.MembersInjectorStore: com.google.inject.internal.MembersInjectorImpl get(com.google.inject.TypeLiteral,com.google.inject.internal.Errors)>(r1, $r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.google.inject.ConfigurationException;

        $r7 = virtualinvoke $r5.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r8 = virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r7);

        $r9 = virtualinvoke $r8.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r6.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r9);

        throw $r6;

        catch com.google.inject.internal.ErrorsException from label1 to label2 with label3;
    }

    public com.google.inject.MembersInjector getMembersInjector(java.lang.Class)
    {
        com.google.inject.internal.InjectorImpl r0;
        java.lang.Class r1;
        com.google.inject.MembersInjector $r3;
        com.google.inject.TypeLiteral $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral)>($r2);

        return $r3;
    }

    public com.google.inject.Provider getProvider(java.lang.Class)
    {
        com.google.inject.Provider $r3;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.Key $r2;
        java.lang.Class r1;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.Provider getProvider(com.google.inject.Key)>($r2);

        return $r3;
    }

    com.google.inject.Provider getProviderOrThrow(com.google.inject.Key, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r2;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.InternalFactory $r4;
        com.google.inject.spi.Dependency $r5;
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl$JitLimitation $r3;
        com.google.inject.internal.InjectorImpl$4 $r6;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        r2 := @parameter1: com.google.inject.internal.Errors;

        $r3 = <com.google.inject.internal.InjectorImpl$JitLimitation: com.google.inject.internal.InjectorImpl$JitLimitation NO_JIT>;

        $r4 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InternalFactory getInternalFactory(com.google.inject.Key,com.google.inject.internal.Errors,com.google.inject.internal.InjectorImpl$JitLimitation)>(r1, r2, $r3);

        $r5 = staticinvoke <com.google.inject.spi.Dependency: com.google.inject.spi.Dependency get(com.google.inject.Key)>(r1);

        $r6 = new com.google.inject.internal.InjectorImpl$4;

        specialinvoke $r6.<com.google.inject.internal.InjectorImpl$4: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.spi.Dependency,com.google.inject.internal.InternalFactory)>(r0, $r5, $r4);

        return $r6;
    }

    public com.google.inject.Provider getProvider(com.google.inject.Key)
    {
        com.google.inject.Key r1;
        com.google.inject.ConfigurationException $r5;
        com.google.inject.internal.Errors $r0, $r6, $r7;
        com.google.inject.Provider $r3;
        java.util.List $r8;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.ErrorsException $r4;

        r2 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r0 = new com.google.inject.internal.Errors;

        specialinvoke $r0.<com.google.inject.internal.Errors: void <init>(java.lang.Object)>(r1);

     label1:
        $r3 = virtualinvoke r2.<com.google.inject.internal.InjectorImpl: com.google.inject.Provider getProviderOrThrow(com.google.inject.Key,com.google.inject.internal.Errors)>(r1, $r0);

        virtualinvoke $r0.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>(0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.google.inject.ConfigurationException;

        $r6 = virtualinvoke $r4.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r7 = virtualinvoke $r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)>($r6);

        $r8 = virtualinvoke $r7.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r5.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r8);

        throw $r5;

        catch com.google.inject.internal.ErrorsException from label1 to label2 with label3;
    }

    public java.lang.Object getInstance(com.google.inject.Key)
    {
        com.google.inject.Provider $r2;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.Key r1;
        java.lang.Object $r3;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r2 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.Provider getProvider(com.google.inject.Key)>(r1);

        $r3 = interfaceinvoke $r2.<com.google.inject.Provider: java.lang.Object get()>();

        return $r3;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.google.inject.Provider $r2;
        com.google.inject.internal.InjectorImpl r0;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.Provider getProvider(java.lang.Class)>(r1);

        $r3 = interfaceinvoke $r2.<com.google.inject.Provider: java.lang.Object get()>();

        return $r3;
    }

    java.lang.Object callInContext(com.google.inject.internal.ContextualCallable) throws com.google.inject.internal.ErrorsException
    {
        java.lang.Throwable $r13;
        java.lang.ThreadLocal $r1;
        java.lang.Object[] r3;
        com.google.inject.internal.InternalContext $r7, $r9, $r11;
        com.google.inject.internal.ContextualCallable r5;
        com.google.inject.internal.InjectorImpl r0;
        java.lang.Object $r2, $r4, $r6, $r8, $r10, $r12;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r5 := @parameter0: com.google.inject.internal.ContextualCallable;

        $r1 = r0.<com.google.inject.internal.InjectorImpl: java.lang.ThreadLocal localContext>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        $r4 = r3[0];

        if $r4 != null goto label5;

        $r9 = new com.google.inject.internal.InternalContext;

        specialinvoke $r9.<com.google.inject.internal.InternalContext: void <init>()>();

        r3[0] = $r9;

     label1:
        $r10 = r3[0];

        $r11 = (com.google.inject.internal.InternalContext) $r10;

        $r12 = interfaceinvoke r5.<com.google.inject.internal.ContextualCallable: java.lang.Object call(com.google.inject.internal.InternalContext)>($r11);

     label2:
        r3[0] = null;

        return $r12;

     label3:
        $r13 := @caughtexception;

     label4:
        r3[0] = null;

        throw $r13;

     label5:
        $r6 = r3[0];

        $r7 = (com.google.inject.internal.InternalContext) $r6;

        $r8 = interfaceinvoke r5.<com.google.inject.internal.ContextualCallable: java.lang.Object call(com.google.inject.internal.InternalContext)>($r7);

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.util.$ToStringBuilder $r0, $r5;
        com.google.inject.internal.InjectorImpl r1;
        java.util.Map $r3;
        java.util.Collection $r4;
        com.google.inject.internal.State $r2;
        java.lang.String $r6;

        r1 := @this: com.google.inject.internal.InjectorImpl;

        $r0 = new com.google.inject.internal.util.$ToStringBuilder;

        specialinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: void <init>(java.lang.Class)>(class "Lcom/google/inject/Injector;");

        $r2 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.State: java.util.Map getExplicitBindingsThisLevel()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = virtualinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("bindings", $r4);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.util.$ToStringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile com.google.inject.Binding getExistingBinding(com.google.inject.Key)
    {
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.BindingImpl $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r2 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getExistingBinding(com.google.inject.Key)>(r1);

        return $r2;
    }

    public volatile com.google.inject.Binding getBinding(com.google.inject.Key)
    {
        com.google.inject.Key r1;
        com.google.inject.internal.InjectorImpl r0;
        com.google.inject.internal.BindingImpl $r2;

        r0 := @this: com.google.inject.internal.InjectorImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r2 = virtualinvoke r0.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.BindingImpl getBinding(com.google.inject.Key)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.google.inject.TypeLiteral $r0;

        $r0 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(class "Ljava/lang/String;");

        <com.google.inject.internal.InjectorImpl: com.google.inject.TypeLiteral STRING_TYPE> = $r0;

        return;
    }
}
