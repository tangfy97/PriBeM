class org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.Iterator children;
    private org.xmlpull.v1.builder.XmlElement currentEl;
    private org.xmlpull.v1.builder.XmlNamespace n;
    private java.lang.String name;
    private final org.xmlpull.v1.builder.impl.XmlElementImpl this$0;

    void <init>(org.xmlpull.v1.builder.impl.XmlElementImpl, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.util.Iterator)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.util.Iterator r2;
        org.xmlpull.v1.builder.XmlNamespace r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator r0;
        java.lang.String r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator;

        r1 := @parameter0: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r3 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r4 := @parameter2: java.lang.String;

        r2 := @parameter3: java.util.Iterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.impl.XmlElementImpl this$0> = r1;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.util.Iterator children> = r2;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlNamespace n> = r3;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.lang.String name> = r4;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: void findNextEl()>();

        return;
    }

    private void findNextEl()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator r0;
        java.lang.String $r5, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r1, $r2;
        org.xmlpull.v1.builder.XmlNamespace $r6, $r7, $r8, $r9, $r14;
        org.xmlpull.v1.builder.XmlElement r4;
        java.lang.Object $r3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlElement currentEl> = null;

     label1:
        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.util.Iterator children>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.util.Iterator children>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label4;

        r4 = (org.xmlpull.v1.builder.XmlElement) $r3;

        $r5 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.lang.String name>;

        if $r5 == null goto label2;

        $r10 = interfaceinvoke r4.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $r11 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.lang.String name>;

        if $r10 == $r11 goto label2;

        $r12 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: java.lang.String name>;

        $r13 = interfaceinvoke r4.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 == 0 goto label4;

     label2:
        $r14 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlNamespace n>;

        if $r14 == null goto label3;

        $r6 = interfaceinvoke r4.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        $r7 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlNamespace n>;

        if $r6 == $r7 goto label3;

        $r8 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlNamespace n>;

        $r9 = interfaceinvoke r4.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        $z2 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label4;

     label3:
        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlElement currentEl> = r4;

        goto label5;

     label4:
        goto label1;

     label5:
        return;
    }

    public boolean hasNext()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        org.xmlpull.v1.builder.XmlElement $r1, r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator r0;
        org.xmlpull.v1.builder.XmlBuilderException $r3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        if $r1 != null goto label1;

        $r3 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r3.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this iterator has no content and next() is not allowed");

        throw $r3;

     label1:
        r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: org.xmlpull.v1.builder.XmlElement currentEl>;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator: void findNextEl()>();

        return r2;
    }

    public void remove()
    {
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator r1;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl$ElementsSimpleIterator;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this element iterator does nto support remove()");

        throw $r0;
    }
}
