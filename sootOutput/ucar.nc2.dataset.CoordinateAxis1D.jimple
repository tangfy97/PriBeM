public class ucar.nc2.dataset.CoordinateAxis1D extends ucar.nc2.dataset.CoordinateAxis
{
    private static org.slf4j.Logger log;
    private boolean wasRead;
    private boolean wasCalcRegular;
    private boolean wasBoundsDone;
    private boolean isInterval;
    private boolean isAscending;
    private double[] midpoint;
    private java.lang.String[] names;
    private double[] edge;
    private double[] bound1;
    private double[] bound2;
    private boolean isRegular;
    private double start;
    private double increment;
    static final boolean $assertionsDisabled;

    public void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.VariableDS)
    {
        ucar.nc2.dataset.VariableDS r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.dataset.VariableDS;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r1, r2);

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasCalcRegular> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isInterval> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 0;

        virtualinvoke r2.<ucar.nc2.dataset.VariableDS: void setCaching(boolean)>(1);

        return;
    }

    void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.CoordinateAxis1D)
    {
        ucar.nc2.dataset.CoordinateAxis1D r0, r2;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset r1;
        ucar.nc2.Variable$Cache $r4;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.dataset.CoordinateAxis1D;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r1, r2);

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasCalcRegular> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isInterval> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 0;

        $r3 = r2.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String orgName>;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String orgName> = $r3;

        $r4 = new ucar.nc2.Variable$Cache;

        specialinvoke $r4.<ucar.nc2.Variable$Cache: void <init>()>();

        r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Variable$Cache cache> = $r4;

        virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1D: void setCaching(boolean)>(1);

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Group, java.lang.String, ucar.ma2.DataType, java.lang.String, java.lang.String, java.lang.String)
    {
        ucar.ma2.DataType r4;
        ucar.nc2.Group r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        java.lang.String r3, r5, r6, r7;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.Group;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: ucar.ma2.DataType;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5, r6, r7);

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasCalcRegular> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isInterval> = 0;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names> = null;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 0;

        return;
    }

    public ucar.nc2.dataset.CoordinateAxis1D section(ucar.ma2.Range) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r1;
        ucar.ma2.Section $r0, $r2;
        ucar.nc2.dataset.CoordinateAxis1D r3, $r5;
        ucar.nc2.Variable $r4;

        r3 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        r1 := @parameter0: ucar.ma2.Range;

        $r0 = new ucar.ma2.Section;

        specialinvoke $r0.<ucar.ma2.Section: void <init>()>();

        $r2 = virtualinvoke $r0.<ucar.ma2.Section: ucar.ma2.Section appendRange(ucar.ma2.Range)>(r1);

        $r4 = virtualinvoke r3.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Variable section(ucar.ma2.Section)>($r2);

        $r5 = (ucar.nc2.dataset.CoordinateAxis1D) $r4;

        return $r5;
    }

    protected ucar.nc2.Variable copy()
    {
        ucar.nc2.dataset.CoordinateAxis1D $r0, r1;
        ucar.nc2.dataset.NetcdfDataset $r2;

        r1 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $r0 = new ucar.nc2.dataset.CoordinateAxis1D;

        $r2 = r1.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.dataset.NetcdfDataset ncd>;

        specialinvoke $r0.<ucar.nc2.dataset.CoordinateAxis1D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.CoordinateAxis1D)>($r2, r1);

        return $r0;
    }

    public ucar.nc2.dataset.CoordinateAxis copyNoCache()
    {
        ucar.ma2.DataType $r5;
        ucar.nc2.Group $r3;
        ucar.nc2.dataset.CoordinateAxis1D $r0, r1;
        ucar.nc2.constants.AxisType $r9;
        java.lang.String $r4, $r6, $r7, $r8, $r10, $r11;
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.Variable$Cache $r12;
        boolean $z0;

        r1 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $r0 = new ucar.nc2.dataset.CoordinateAxis1D;

        $r2 = r1.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r3 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Group getParentGroup()>();

        $r4 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getShortName()>();

        $r5 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.DataType getDataType()>();

        $r6 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getDimensionsString()>();

        $r7 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getUnitsString()>();

        $r8 = virtualinvoke r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getDescription()>();

        specialinvoke $r0.<ucar.nc2.dataset.CoordinateAxis1D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Group,java.lang.String,ucar.ma2.DataType,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5, $r6, $r7, $r8);

        $r9 = r1.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.constants.AxisType axisType>;

        $r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.constants.AxisType axisType> = $r9;

        $r10 = r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String boundaryRef>;

        $r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String boundaryRef> = $r10;

        $z0 = r1.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous>;

        $r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous> = $z0;

        $r11 = r1.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String positive>;

        $r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String positive> = $r11;

        $r12 = new ucar.nc2.Variable$Cache;

        specialinvoke $r12.<ucar.nc2.Variable$Cache: void <init>()>();

        $r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Variable$Cache cache> = $r12;

        return $r0;
    }

    public java.lang.String getCoordName(int)
    {
        java.lang.String[] $r1;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z1 == 0 goto label2;

        $d0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(i0);

        $r3 = staticinvoke <ucar.unidata.util.Format: java.lang.String d(double,int,int)>($d0, 5, 8);

        return $r3;

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names>;

        $r2 = $r1[i0];

        return $r2;
    }

    public double getCoordValue(int)
    {
        java.lang.UnsupportedOperationException $r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i0;
        double[] $r1;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordValue() on non-numeric");

        throw $r2;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double getMinValue()
    {
        java.lang.UnsupportedOperationException $r3;
        double[] $r1, $r2;
        long $l0;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i1, $i2;
        boolean $z0, $z1;
        double $d0, $d1, $d2;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordValue() on non-numeric");

        throw $r3;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d0 = $r1[0];

        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $i1 = (int) $l0;

        $i2 = $i1 - 1;

        $d1 = $r2[$i2];

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        return $d2;
    }

    public double getMaxValue()
    {
        java.lang.UnsupportedOperationException $r3;
        double[] $r1, $r2;
        long $l0;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i1, $i2;
        boolean $z0, $z1;
        double $d0, $d1, $d2;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordValue() on non-numeric");

        throw $r3;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d0 = $r1[0];

        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $i1 = (int) $l0;

        $i2 = $i1 - 1;

        $d1 = $r2[$i2];

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        return $d2;
    }

    public double getCoordEdge(int)
    {
        java.lang.UnsupportedOperationException $r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i0;
        double[] $r1;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordEdge() on non-numeric");

        throw $r2;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double[] getCoordValues()
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        double[] $r1, $r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordValues() on non-numeric");

        throw $r4;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public double[] getCoordEdges()
    {
        java.lang.UnsupportedOperationException $r4;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        double[] $r1, $r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getCoordEdges() on non-numeric");

        throw $r4;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public boolean isContiguous()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous>;

        return $z1;
    }

    public boolean isInterval()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isInterval>;

        return $z1;
    }

    public double[] getBound1()
    {
        java.lang.UnsupportedOperationException $r5;
        double[] $r1, $r2, $r4;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getBound1() on non-numeric");

        throw $r5;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        if $r1 != null goto label3;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBoundsFromEdges()>();

     label3:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        return $r4;
    }

    public double[] getBound2()
    {
        java.lang.UnsupportedOperationException $r5;
        double[] $r1, $r2, $r4;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis1D.getBound2() on non-numeric");

        throw $r5;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label2:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        if $r1 != null goto label3;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBoundsFromEdges()>();

     label3:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        return $r4;
    }

    public double[] getCoordEdges(int)
    {
        double[] $r1, $r2, $r3;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBounds()>();

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeBoundsFromEdges()>();

     label2:
        $r3 = newarray (double)[2];

        $z2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous()>();

        if $z2 == 0 goto label3;

        $d2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordEdge(int)>(i0);

        $r3[0] = $d2;

        $i1 = i0 + 1;

        $d3 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordEdge(int)>($i1);

        $r3[1] = $d3;

        goto label4;

     label3:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d0 = $r1[i0];

        $r3[0] = $d0;

        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d1 = $r2[i0];

        $r3[1] = $d1;

     label4:
        return $r3;
    }

    public int findCoordElement(double)
    {
        java.lang.UnsupportedOperationException $r1;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        double d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis.findCoordElement() on non-numeric");

        throw $r1;

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular()>();

        if $z1 == 0 goto label2;

        $i2 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementRegular(double,boolean)>(d0, 0);

        return $i2;

     label2:
        $z2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous()>();

        if $z2 == 0 goto label3;

        $i1 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementIrregular(double,boolean)>(d0, 0);

        return $i1;

     label3:
        $i0 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementNonContiguous(double,boolean)>(d0, 0);

        return $i0;
    }

    public int findCoordElementBounded(double)
    {
        java.lang.UnsupportedOperationException $r1;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        double d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis.findCoordElementBounded() on non-numeric");

        throw $r1;

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular()>();

        if $z1 == 0 goto label2;

        $i2 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementRegular(double,boolean)>(d0, 1);

        return $i2;

     label2:
        $z2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous()>();

        if $z2 == 0 goto label3;

        $i1 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementIrregular(double,boolean)>(d0, 1);

        return $i1;

     label3:
        $i0 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElementNonContiguous(double,boolean)>(d0, 1);

        return $i0;
    }

    public int findCoordElement(double, int)
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i0, i1;
        double d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int findCoordElement(double)>(d0);

        return $i0;
    }

    private int findCoordElementRegular(double, boolean)
    {
        long $l0, $l2;
        byte $b4;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i1, i3, $i5, $i7;
        double d0, $d1, d2, $d3, d4;
        boolean z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        $d1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double start>;

        d2 = d0 - $d1;

        $d3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double increment>;

        d4 = d2 / $d3;

        $l2 = staticinvoke <java.lang.Math: long round(double)>(d4);

        i3 = (int) $l2;

        if i3 >= 0 goto label3;

        if z0 == 0 goto label1;

        $b4 = 0;

        goto label2;

     label1:
        $b4 = -1;

     label2:
        return $b4;

     label3:
        if i3 < i1 goto label6;

        if z0 == 0 goto label4;

        $i5 = i1 - 1;

        goto label5;

     label4:
        $i7 = (int) -1;

        $i5 = $i7;

     label5:
        return $i5;

     label6:
        return i3;
    }

    private boolean betweenLon(double, double, double)
    {
        byte $b0, $b1, $b2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i3, $i4, $i5;
        double d0, d1, d2;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d2 := @parameter0: double;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

     label1:
        $b0 = d2 cmpg d0;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label2;

        d2 = d2 + 360.0;

        goto label1;

     label2:
        $b1 = d2 cmpl d0;

        $i4 = (int) $b1;

        if $i4 < 0 goto label3;

        $b2 = d2 cmpg d1;

        $i5 = (int) $b2;

        if $i5 > 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private int findCoordElementIrregular(double, boolean)
    {
        byte $b2, $b3, $b7, $b8, $b9, $b10, $b13, $b14, $b17, $b20;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0, z1;
        double[] $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0;
        int i1, $i4, $i5, $i6, $i11, $i12, i15, i16, $i18, i19, $i21, i22, $i23, $i24, $i26, $i27, $i28, $i29, $i31, $i32;
        double d0, $d1, $d2, $d3, $d4, d5, d6;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        z1 := @parameter1: boolean;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        i15 = 0;

        i16 = i1;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending>;

        if $z0 == 0 goto label11;

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d3 = $r4[0];

        $b9 = d0 cmpg $d3;

        $i23 = (int) $b9;

        if $i23 >= 0 goto label03;

        if z1 == 0 goto label01;

        $b17 = 0;

        goto label02;

     label01:
        $b17 = -1;

     label02:
        return $b17;

     label03:
        $r5 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d4 = $r5[i1];

        $b10 = d0 cmpl $d4;

        $i24 = (int) $b10;

        if $i24 <= 0 goto label06;

        if z1 == 0 goto label04;

        $i18 = i1 - 1;

        goto label05;

     label04:
        $i26 = (int) -1;

        $i18 = $i26;

     label05:
        return $i18;

     label06:
        $i11 = i15 + 1;

        if i16 <= $i11 goto label10;

        $i12 = i15 + i16;

        i19 = $i12 / 2;

        $r6 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        d5 = $r6[i19];

        $b13 = d5 cmpl d0;

        if $b13 != 0 goto label07;

        return i19;

     label07:
        $b14 = d5 cmpg d0;

        $i27 = (int) $b14;

        if $i27 >= 0 goto label08;

        i15 = i19;

        goto label09;

     label08:
        i16 = i19;

     label09:
        goto label06;

     label10:
        return i15;

     label11:
        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d1 = $r1[0];

        $b2 = d0 cmpl $d1;

        $i28 = (int) $b2;

        if $i28 <= 0 goto label14;

        if z1 == 0 goto label12;

        $b20 = 0;

        goto label13;

     label12:
        $b20 = -1;

     label13:
        return $b20;

     label14:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d2 = $r2[i1];

        $b3 = d0 cmpg $d2;

        $i29 = (int) $b3;

        if $i29 >= 0 goto label17;

        if z1 == 0 goto label15;

        $i21 = i1 - 1;

        goto label16;

     label15:
        $i31 = (int) -1;

        $i21 = $i31;

     label16:
        return $i21;

     label17:
        $i4 = i15 + 1;

        if i16 <= $i4 goto label21;

        $i6 = i15 + i16;

        i22 = $i6 / 2;

        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        d6 = $r3[i22];

        $b7 = d6 cmpl d0;

        if $b7 != 0 goto label18;

        return i22;

     label18:
        $b8 = d6 cmpg d0;

        $i32 = (int) $b8;

        if $i32 >= 0 goto label19;

        i16 = i22;

        goto label20;

     label19:
        i15 = i22;

     label20:
        goto label17;

     label21:
        $i5 = i16 - 1;

        return $i5;
    }

    private int findCoordElementNonContiguous(double, boolean)
    {
        byte $b1, $b3, $b4, $b5, $b7, $b8, $b9, $b11, $b12, $b13, $b15, $b16, $b17, $b22;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0, z1;
        int i0, $i2, $i6, $i10, $i14, $i18, i19, $i20, $i21, $i23, i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i35, $i36, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i47, $i48, $i50;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        d0 := @parameter0: double;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] getBound1()>();

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] getBound2()>();

        i0 = lengthof $r1;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending>;

        if $z0 == 0 goto label16;

        $d8 = $r1[0];

        $b9 = d0 cmpg $d8;

        $i27 = (int) $b9;

        if $i27 >= 0 goto label03;

        if z1 == 0 goto label01;

        $b17 = 0;

        goto label02;

     label01:
        $b17 = -1;

     label02:
        return $b17;

     label03:
        $i10 = i0 - 1;

        $d9 = $r2[$i10];

        $b11 = d0 cmpl $d9;

        $i28 = (int) $b11;

        if $i28 <= 0 goto label06;

        if z1 == 0 goto label04;

        $i18 = i0 - 1;

        goto label05;

     label04:
        $i30 = (int) -1;

        $i18 = $i30;

     label05:
        return $i18;

     label06:
        i19 = 0;

     label07:
        if i19 >= i0 goto label13;

        $r8 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d10 = $r8[i19];

        $b12 = $d10 cmpg d0;

        $i31 = (int) $b12;

        if $i31 > 0 goto label08;

        $r12 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d14 = $r12[i19];

        $b16 = d0 cmpg $d14;

        $i32 = (int) $b16;

        if $i32 > 0 goto label08;

        return i19;

     label08:
        $r9 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d11 = $r9[i19];

        $b13 = $d11 cmpl d0;

        $i33 = (int) $b13;

        if $i33 <= 0 goto label12;

        if z1 != 0 goto label09;

        $i35 = (int) -1;

        return $i35;

     label09:
        $r10 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d12 = $r10[i19];

        d15 = $d12 - d0;

        $r11 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $i14 = i19 - 1;

        $d13 = $r11[$i14];

        d16 = d0 - $d13;

        $b15 = d15 cmpl d16;

        $i36 = (int) $b15;

        if $i36 <= 0 goto label10;

        $i20 = i19 - 1;

        goto label11;

     label10:
        $i20 = i19;

     label11:
        return $i20;

     label12:
        i19 = i19 + 1;

        goto label07;

     label13:
        if z1 == 0 goto label14;

        $i21 = i0 - 1;

        goto label15;

     label14:
        $i38 = (int) -1;

        $i21 = $i38;

     label15:
        return $i21;

     label16:
        $d1 = $r1[0];

        $b1 = d0 cmpl $d1;

        $i39 = (int) $b1;

        if $i39 <= 0 goto label19;

        if z1 == 0 goto label17;

        $b22 = 0;

        goto label18;

     label17:
        $b22 = -1;

     label18:
        return $b22;

     label19:
        $i2 = i0 - 1;

        $d2 = $r2[$i2];

        $b3 = d0 cmpg $d2;

        $i40 = (int) $b3;

        if $i40 >= 0 goto label22;

        if z1 == 0 goto label20;

        $i23 = i0 - 1;

        goto label21;

     label20:
        $i42 = (int) -1;

        $i23 = $i42;

     label21:
        return $i23;

     label22:
        i24 = 0;

     label23:
        if i24 >= i0 goto label29;

        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d3 = $r3[i24];

        $b4 = $d3 cmpg d0;

        $i43 = (int) $b4;

        if $i43 > 0 goto label24;

        $r7 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d7 = $r7[i24];

        $b8 = d0 cmpg $d7;

        $i44 = (int) $b8;

        if $i44 > 0 goto label24;

        return i24;

     label24:
        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d4 = $r4[i24];

        $b5 = $d4 cmpg d0;

        $i45 = (int) $b5;

        if $i45 >= 0 goto label28;

        if z1 != 0 goto label25;

        $i47 = (int) -1;

        return $i47;

     label25:
        $r5 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d5 = $r5[i24];

        d17 = $d5 - d0;

        $r6 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $i6 = i24 - 1;

        $d6 = $r6[$i6];

        d18 = d0 - $d6;

        $b7 = d17 cmpl d18;

        $i48 = (int) $b7;

        if $i48 <= 0 goto label26;

        $i25 = i24 - 1;

        goto label27;

     label26:
        $i25 = i24;

     label27:
        return $i25;

     label28:
        i24 = i24 + 1;

        goto label23;

     label29:
        if z1 == 0 goto label30;

        $i26 = i0 - 1;

        goto label31;

     label30:
        $i50 = (int) -1;

        $i26 = $i50;

     label31:
        return $i26;
    }

    public double getStart()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void calcIsRegular()>();

        $d0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double start>;

        return $d0;
    }

    public double getIncrement()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void calcIsRegular()>();

        $d0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double increment>;

        return $d0;
    }

    public boolean isRegular()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void calcIsRegular()>();

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular>;

        return $z0;
    }

    private void calcIsRegular()
    {
        long $l0, $l2, $l6, $l7;
        byte $b1, $b8;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i3, $i4, $i5, $i9, i10, $i11, $i12;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasCalcRegular>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label2:
        $z2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z2 != 0 goto label3;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 0;

        goto label7;

     label3:
        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $b1 = $l0 cmp 2L;

        $i11 = (int) $b1;

        if $i11 >= 0 goto label4;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 1;

        goto label7;

     label4:
        $d0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(0);

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double start> = $d0;

        $l2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i3 = (int) $l2;

        $i4 = i3 - 1;

        $d1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>($i4);

        $d2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(0);

        $d4 = $d1 - $d2;

        $i5 = i3 - 1;

        $d3 = (double) $i5;

        $d5 = $d4 / $d3;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double increment> = $d5;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 1;

        i10 = 1;

     label5:
        $l6 = (long) i10;

        $l7 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $b8 = $l6 cmp $l7;

        $i12 = (int) $b8;

        if $i12 >= 0 goto label7;

        $d6 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(i10);

        $i9 = i10 - 1;

        $d7 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>($i9);

        $d9 = $d6 - $d7;

        $d8 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double increment>;

        $z3 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double,double)>($d9, $d8, 0.005);

        if $z3 != 0 goto label6;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isRegular> = 0;

        goto label7;

     label6:
        i10 = i10 + 1;

        goto label5;

     label7:
        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasCalcRegular> = 1;

        return;
    }

    private void doRead()
    {
        byte $b1, $b2, $b9, $b14, $b16, $b18;
        ucar.nc2.constants.AxisType $r25, $r26;
        double[] $r3, $r4, $r7, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long $l0;
        ucar.ma2.Array $r8, r27;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int[] $r6;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, z7, z8, z9, z10, z11;
        ucar.ma2.DataType $r1, $r2, $r5, $r9, $r10, $r11;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i17, i19, i20, i21, $i22, $i23, $i24, $i25, $i26, $i27;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z0 == 0 goto label22;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void readValues()>();

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 1;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $b1 = $l0 cmp 2L;

        $i22 = (int) $b1;

        if $i22 >= 0 goto label01;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending> = 1;

        goto label04;

     label01:
        $d0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(0);

        $d1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: double getCoordValue(int)>(1);

        $b2 = $d0 cmpg $d1;

        $i23 = (int) $b2;

        if $i23 >= 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending> = $z3;

     label04:
        $r25 = r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.constants.AxisType axisType>;

        $r26 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        if $r25 != $r26 goto label24;

        z4 = 1;

        i19 = 0;

     label05:
        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i3 = lengthof $r3;

        $i4 = $i3 - 1;

        if i19 >= $i4 goto label10;

        $z5 = z4;

        $z2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending>;

        if $z2 == 0 goto label07;

        $r23 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d13 = $r23[i19];

        $r24 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i17 = i19 + 1;

        $d12 = $r24[$i17];

        $b18 = $d13 cmpg $d12;

        $i24 = (int) $b18;

        if $i24 >= 0 goto label06;

        $z6 = 1;

        goto label09;

     label06:
        $z6 = 0;

        goto label09;

     label07:
        $r21 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d11 = $r21[i19];

        $r22 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i15 = i19 + 1;

        $d10 = $r22[$i15];

        $b16 = $d11 cmpl $d10;

        $i25 = (int) $b16;

        if $i25 <= 0 goto label08;

        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        z4 = $z5 & $z6;

        i19 = i19 + 1;

        goto label05;

     label10:
        if z4 != 0 goto label21;

        z7 = 0;

        z11 = 0;

        z10 = 0;

        z9 = 0;

        z8 = 0;

        $z1 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isAscending>;

        if $z1 == 0 goto label15;

        i20 = 0;

     label11:
        $r16 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i10 = lengthof $r16;

        if i20 >= $i10 goto label14;

        if z8 == 0 goto label12;

        $r20 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d8 = $r20[i20];

        $d9 = $d8 + 360.0;

        $r20[i20] = $d9;

     label12:
        if z10 != 0 goto label13;

        $r17 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i11 = lengthof $r17;

        $i12 = $i11 - 1;

        if i20 >= $i12 goto label13;

        $r18 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d7 = $r18[i20];

        $r19 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i13 = i20 + 1;

        $d6 = $r19[$i13];

        $b14 = $d7 cmpl $d6;

        $i26 = (int) $b14;

        if $i26 <= 0 goto label13;

        z7 = 1;

        z10 = 1;

        z8 = 1;

     label13:
        i20 = i20 + 1;

        goto label11;

     label14:
        goto label19;

     label15:
        i21 = 0;

     label16:
        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i5 = lengthof $r4;

        if i21 >= $i5 goto label19;

        if z9 == 0 goto label17;

        $r15 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d4 = $r15[i21];

        $d5 = $d4 - 360.0;

        $r15[i21] = $d5;

     label17:
        if z11 != 0 goto label18;

        $r12 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i6 = lengthof $r12;

        $i7 = $i6 - 1;

        if i21 >= $i7 goto label18;

        $r13 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d3 = $r13[i21];

        $r14 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i8 = i21 + 1;

        $d2 = $r14[$i8];

        $b9 = $d3 cmpg $d2;

        $i27 = (int) $b9;

        if $i27 >= 0 goto label18;

        z7 = 1;

        z11 = 1;

        z9 = 1;

     label18:
        i21 = i21 + 1;

        goto label16;

     label19:
        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r6 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: int[] getShape()>();

        $r7 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $r8 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[],java.lang.Object)>($r5, $r6, $r7);

        r27 = $r8;

        $r9 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.DataType getDataType()>();

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r9 == $r10 goto label20;

        $r11 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.DataType getDataType()>();

        r27 = staticinvoke <ucar.ma2.MAMath: ucar.ma2.Array convert(ucar.ma2.Array,ucar.ma2.DataType)>($r8, $r11);

     label20:
        virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void setCachedData(ucar.ma2.Array)>(r27);

     label21:
        goto label24;

     label22:
        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r1 != $r2 goto label23;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void readStringValues()>();

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 1;

        goto label24;

     label23:
        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void readCharValues()>();

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead> = 1;

     label24:
        return;
    }

    private void readStringValues()
    {
        java.lang.IllegalStateException $r9;
        org.slf4j.Logger $r8;
        ucar.ma2.IndexIterator $r3;
        long $l0;
        java.lang.String[] $r2, $r4;
        java.io.IOException $r7;
        ucar.ma2.Array $r1;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i1, $i2, i3;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i3 = 0;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.Array read()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <ucar.nc2.dataset.CoordinateAxis1D: org.slf4j.Logger log>;

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading string coordinate values ", $r7);

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r9;

     label4:
        $l0 = virtualinvoke $r1.<ucar.ma2.Array: long getSize()>();

        $i1 = (int) $l0;

        $r2 = newarray (java.lang.String)[$i1];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names> = $r2;

        $r3 = virtualinvoke $r1.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names>;

        $i2 = i3;

        i3 = i3 + 1;

        $r5 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: java.lang.Object getObjectNext()>();

        $r6 = (java.lang.String) $r5;

        $r4[$i2] = $r6;

        goto label5;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void readCharValues()
    {
        java.lang.IllegalStateException $r9;
        org.slf4j.Logger $r8;
        java.lang.String[] $r4, $r5;
        java.io.IOException $r7;
        ucar.ma2.Array $r1;
        ucar.ma2.ArrayChar r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i0, $i1, i2;
        java.lang.String $r6;
        ucar.ma2.ArrayChar$StringIterator $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        i2 = 0;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.Array read()>();

        r2 = (ucar.ma2.ArrayChar) $r1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <ucar.nc2.dataset.CoordinateAxis1D: org.slf4j.Logger log>;

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading char coordinate values ", $r7);

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r9;

     label4:
        $r3 = virtualinvoke r2.<ucar.ma2.ArrayChar: ucar.ma2.ArrayChar$StringIterator getStringIterator()>();

        $i0 = virtualinvoke $r3.<ucar.ma2.ArrayChar$StringIterator: int getNumElems()>();

        $r4 = newarray (java.lang.String)[$i0];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names> = $r4;

     label5:
        $z0 = virtualinvoke $r3.<ucar.ma2.ArrayChar$StringIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String[] names>;

        $i1 = i2;

        i2 = i2 + 1;

        $r6 = virtualinvoke $r3.<ucar.ma2.ArrayChar$StringIterator: java.lang.String next()>();

        $r5[$i1] = $r6;

        goto label5;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void readValues()
    {
        java.lang.IllegalStateException $r7;
        org.slf4j.Logger $r6;
        ucar.ma2.IndexIterator $r3;
        double[] $r1, $r4;
        long $l0;
        java.io.IOException $r5;
        ucar.ma2.Array $r2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int $i1, $i2, i3;
        boolean $z0;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        $i1 = (int) $l0;

        $r1 = newarray (double)[$i1];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint> = $r1;

        i3 = 0;

     label1:
        virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void setUseNaNs(boolean)>(0);

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.ma2.Array read()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = <ucar.nc2.dataset.CoordinateAxis1D: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading coordinate values ", $r5);

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw $r7;

     label4:
        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i2 = i3;

        i3 = i3 + 1;

        $d0 = interfaceinvoke $r3.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $r4[$i2] = $d0;

        goto label5;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void makeBounds()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $z0 = r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasRead>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void doRead()>();

     label1:
        $z1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isNumeric()>();

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean makeBoundsFromAux()>();

        if $z2 != 0 goto label2;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: void makeEdges()>();

     label2:
        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean wasBoundsDone> = 1;

        return;
    }

    private boolean makeBoundsFromAux()
    {
        byte $b9, $b10, $b12;
        ucar.nc2.Attribute $r1;
        java.lang.StringBuilder $r23, $r24, $r33;
        double[] $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r27, $r28, r31, r32;
        java.lang.AssertionError $r34;
        java.lang.String $r2, $r25;
        java.io.IOException $r29;
        ucar.ma2.Array $r9;
        ucar.ma2.Index $r11, $r19, $r20;
        ucar.nc2.Dimension $r6, $r7, $r8;
        ucar.nc2.dataset.NetcdfDataset $r3;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int[] $r10, $r26;
        boolean $z0, $z1, $z2, $z3, z4, z5, $z6, z7;
        ucar.nc2.dataset.VariableDS r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i13, $i14, $i15, i16, i17, $i18, i19, $i20, i21, i22, $i23, $i24;
        ucar.nc2.Variable $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        org.slf4j.Logger $r30;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>("bounds");

        if null == $r1 goto label01;

        $z0 = virtualinvoke $r1.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r2 = virtualinvoke $r1.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.dataset.NetcdfDataset ncd>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r2);

        r5 = (ucar.nc2.dataset.VariableDS) $r4;

        if null != r5 goto label03;

        return 0;

     label03:
        $i0 = virtualinvoke r5.<ucar.nc2.dataset.VariableDS: int getRank()>();

        if 2 == $i0 goto label04;

        return 0;

     label04:
        $r6 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: ucar.nc2.Dimension getDimension(int)>(0);

        $r7 = virtualinvoke r5.<ucar.nc2.dataset.VariableDS: ucar.nc2.Dimension getDimension(int)>(0);

        if $r6 == $r7 goto label05;

        return 0;

     label05:
        $r8 = virtualinvoke r5.<ucar.nc2.dataset.VariableDS: ucar.nc2.Dimension getDimension(int)>(1);

        $i1 = virtualinvoke $r8.<ucar.nc2.Dimension: int getLength()>();

        if 2 == $i1 goto label06;

        return 0;

     label06:
        virtualinvoke r5.<ucar.nc2.dataset.VariableDS: void setUseNaNs(boolean)>(0);

        $r9 = virtualinvoke r5.<ucar.nc2.dataset.VariableDS: ucar.ma2.Array read()>();

     label07:
        goto label09;

     label08:
        $r29 := @caughtexception;

        $r30 = <ucar.nc2.dataset.CoordinateAxis1D: org.slf4j.Logger log>;

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("CoordinateAxis1D.hasBounds read failed ", $r29);

        return 0;

     label09:
        $z1 = <ucar.nc2.dataset.CoordinateAxis1D: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        $i13 = virtualinvoke $r9.<ucar.ma2.Array: int getRank()>();

        if $i13 != 2 goto label10;

        $r26 = virtualinvoke $r9.<ucar.ma2.Array: int[] getShape()>();

        $i14 = $r26[1];

        if $i14 == 2 goto label11;

     label10:
        $r34 = new java.lang.AssertionError;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incorrect shape data for variable ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r34;

     label11:
        $r10 = r0.<ucar.nc2.dataset.CoordinateAxis1D: int[] shape>;

        $i15 = $r10[0];

        $r27 = newarray (double)[$i15];

        r31 = $r27;

        $r28 = newarray (double)[$i15];

        r32 = $r28;

        $r11 = virtualinvoke $r9.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        i16 = 0;

     label12:
        if i16 >= $i15 goto label13;

        virtualinvoke $r11.<ucar.ma2.Index: ucar.ma2.Index set0(int)>(i16);

        $r19 = virtualinvoke $r11.<ucar.ma2.Index: ucar.ma2.Index set1(int)>(0);

        $d16 = virtualinvoke $r9.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r19);

        $r27[i16] = $d16;

        $r20 = virtualinvoke $r11.<ucar.ma2.Index: ucar.ma2.Index set1(int)>(1);

        $d17 = virtualinvoke $r9.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r20);

        $r28[i16] = $d17;

        i16 = i16 + 1;

        goto label12;

     label13:
        if $i15 < 2 goto label14;

        $i11 = $i15 - 1;

        $d15 = $r27[$i11];

        $d14 = $r27[0];

        $b12 = $d15 cmpl $d14;

        $i23 = (int) $b12;

        if $i23 <= 0 goto label15;

     label14:
        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        z4 = $z3;

        z5 = 1;

        i17 = 0;

     label17:
        $i18 = lengthof $r27;

        if i17 >= $i18 goto label22;

        $d11 = $r27[i17];

        $d10 = $r28[i17];

        $b9 = $d11 cmpl $d10;

        if $b9 != 0 goto label18;

        goto label21;

     label18:
        $d13 = $r27[i17];

        $d12 = $r28[i17];

        $b10 = $d13 cmpg $d12;

        $i24 = (int) $b10;

        if $i24 >= 0 goto label19;

        $z6 = 1;

        goto label20;

     label19:
        $z6 = 0;

     label20:
        z5 = $z6;

        goto label22;

     label21:
        i17 = i17 + 1;

        goto label17;

     label22:
        if z4 == z5 goto label23;

        r31 = $r28;

        r32 = $r27;

     label23:
        z7 = 1;

        i19 = 0;

     label24:
        $i20 = $i15 - 1;

        if i19 >= $i20 goto label26;

        $i8 = i19 + 1;

        $d9 = r31[$i8];

        $d8 = r32[i19];

        $z2 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d9, $d8);

        if $z2 != 0 goto label25;

        z7 = 0;

     label25:
        i19 = i19 + 1;

        goto label24;

     label26:
        if z7 == 0 goto label29;

        $i5 = $i15 + 1;

        $r16 = newarray (double)[$i5];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge> = $r16;

        $r17 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d6 = r31[0];

        $r17[0] = $d6;

        i21 = 1;

     label27:
        $i6 = $i15 + 1;

        if i21 >= $i6 goto label28;

        $r18 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $i7 = i21 - 1;

        $d7 = r32[$i7];

        $r18[i21] = $d7;

        i21 = i21 + 1;

        goto label27;

     label28:
        goto label32;

     label29:
        $i2 = $i15 + 1;

        $r12 = newarray (double)[$i2];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge> = $r12;

        $r13 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d0 = r31[0];

        $r13[0] = $d0;

        i22 = 1;

     label30:
        if i22 >= $i15 goto label31;

        $r15 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d3 = r31[i22];

        $i4 = i22 - 1;

        $d2 = r32[$i4];

        $d4 = $d3 + $d2;

        $d5 = $d4 / 2.0;

        $r15[i22] = $d5;

        i22 = i22 + 1;

        goto label30;

     label31:
        $r14 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $i3 = $i15 - 1;

        $d1 = r32[$i3];

        $r14[$i15] = $d1;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isContiguous> = 0;

     label32:
        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1> = r31;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2> = r32;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: boolean isInterval> = 1;

        return 1;

        catch java.io.IOException from label06 to label07 with label08;
    }

    private void makeEdges()
    {
        ucar.nc2.dataset.CoordinateAxis1D r0;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        long $l0;
        int i1, $i2, $i3, $i4, $i5, $i6, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        $i2 = i1 + 1;

        $r1 = newarray (double)[$i2];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge> = $r1;

        if i1 >= 1 goto label1;

        return;

     label1:
        i7 = 1;

     label2:
        if i7 >= i1 goto label3;

        $r12 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $r10 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i6 = i7 - 1;

        $d11 = $r10[$i6];

        $r11 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d10 = $r11[i7];

        $d12 = $d11 + $d10;

        $d13 = $d12 / 2.0;

        $r12[i7] = $d13;

        i7 = i7 + 1;

        goto label2;

     label3:
        $r5 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d3 = $r2[0];

        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d1 = $r3[1];

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $d0 = $r4[0];

        $d2 = $d1 - $d0;

        $d4 = $d3 - $d2;

        $r5[0] = $d4;

        $r9 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $r6 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i3 = i1 - 1;

        $d8 = $r6[$i3];

        $r7 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $i4 = i1 - 1;

        $d6 = $r7[$i4];

        $r8 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $i5 = i1 - 1;

        $d5 = $r8[$i5];

        $d7 = $d6 - $d5;

        $d9 = $d8 + $d7;

        $r9[i1] = $d9;

        return;
    }

    private void makeMidpoints()
    {
        double[] $r1, $r2, $r3, $r4;
        long $l0;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i1, $i2, i3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        $r1 = newarray (double)[i1];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint> = $r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] midpoint>;

        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d1 = $r2[i3];

        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $i2 = i3 + 1;

        $d0 = $r3[$i2];

        $d2 = $d1 + $d0;

        $d3 = $d2 / 2.0;

        $r4[i3] = $d3;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void makeBoundsFromEdges()
    {
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        long $l0;
        byte $b2;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i1, $i3, i4, $i5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        if i1 != 0 goto label1;

        return;

     label1:
        $r1 = newarray (double)[i1];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1> = $r1;

        $r2 = newarray (double)[i1];

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2> = $r2;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r7 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $r6 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $d2 = $r6[i4];

        $r7[i4] = $d2;

        $r9 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $r8 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] edge>;

        $i3 = i4 + 1;

        $d3 = $r8[$i3];

        $r9[i4] = $d3;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $d1 = $r3[0];

        $r4 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        $d0 = $r4[0];

        $b2 = $d1 cmpl $d0;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label4;

        r10 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1>;

        $r5 = r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2>;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound1> = $r5;

        r0.<ucar.nc2.dataset.CoordinateAxis1D: double[] bound2> = r10;

     label4:
        return;
    }

    public java.util.List getNames()
    {
        long $l0;
        java.util.ArrayList $r1;
        ucar.nc2.dataset.CoordinateAxis1D r0;
        int i1, i2;
        java.lang.String $r3, $r4;
        ucar.nc2.util.NamedAnything $r2;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis1D;

        $l0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: long getSize()>();

        i1 = (int) $l0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = new ucar.nc2.util.NamedAnything;

        $r3 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getCoordName(int)>(i2);

        $r4 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis1D: java.lang.String getUnitsString()>();

        specialinvoke $r2.<ucar.nc2.util.NamedAnything: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/dataset/CoordinateAxis1D;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.dataset.CoordinateAxis1D: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dataset/CoordinateAxis1D;");

        <ucar.nc2.dataset.CoordinateAxis1D: org.slf4j.Logger log> = $r1;

        return;
    }
}
