public class org.apache.batik.ext.awt.image.rendered.Any2LumRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r2;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.Any2LumRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3;
        java.util.Map $r6;
        int $i0, $i1;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2LumRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2LumRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.Any2LumRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i0, $i1, null);

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        $r5 = <org.apache.batik.ext.awt.ColorSpaceHintKey: java.lang.Object VALUE_COLORSPACE_GREY>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.batik.gvt.filter.Colorspace", $r5);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.Point $r16;
        java.awt.image.SampleModel $r4, $r12, $r24;
        java.awt.image.ColorConvertOp $r23;
        java.util.Vector $r1;
        int[] $r14, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.awt.image.BufferedImage $r9, $r22, $r25, r33;
        java.awt.image.PixelInterleavedSampleModel $r13, r34;
        java.awt.image.ComponentColorModel $r19;
        org.apache.batik.ext.awt.image.rendered.Any2LumRed r0;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3;
        java.awt.image.BandCombineOp $r28;
        java.awt.image.DataBuffer $r15;
        java.awt.Rectangle $r7;
        float[] $r27, $r29, $r30;
        java.awt.color.ColorSpace $r20;
        java.awt.image.Raster $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        float[][] r31;
        java.awt.image.ColorModel $r5, $r11;
        java.lang.Object $r2;
        java.awt.image.WritableRaster r6, $r10, $r17, $r18, $r26, r32;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.Any2LumRed;

        r6 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $r5 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r7 = virtualinvoke r6.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r8 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r7);

        if $r5 != null goto label3;

        $i17 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        if $i17 != 2 goto label1;

        r31 = newmultiarray (float)[2][2];

        $r29 = r31[0];

        $r29[0] = 1.0F;

        $r30 = r31[1];

        $r30[1] = 1.0F;

        goto label2;

     label1:
        $i18 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        r31 = newmultiarray (float)[$i18][1];

        $r27 = r31[0];

        $r27[0] = 1.0F;

     label2:
        $r28 = new java.awt.image.BandCombineOp;

        specialinvoke $r28.<java.awt.image.BandCombineOp: void <init>(float[][],java.awt.RenderingHints)>(r31, null);

        virtualinvoke $r28.<java.awt.image.BandCombineOp: java.awt.image.WritableRaster filter(java.awt.image.Raster,java.awt.image.WritableRaster)>($r8, r6);

        goto label7;

     label3:
        r32 = (java.awt.image.WritableRaster) $r8;

        $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label4;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r32, $r5, 0);

     label4:
        $r9 = new java.awt.image.BufferedImage;

        $r10 = virtualinvoke r32.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        specialinvoke $r9.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r5, $r10, 0, null);

        $r11 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $z1 = virtualinvoke $r11.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z1 != 0 goto label5;

        $r25 = new java.awt.image.BufferedImage;

        $r26 = virtualinvoke r6.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z4 = virtualinvoke $r11.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r25.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r11, $r26, $z4, null);

        r33 = $r25;

        goto label6;

     label5:
        $r12 = virtualinvoke r6.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r34 = (java.awt.image.PixelInterleavedSampleModel) $r12;

        $r13 = new java.awt.image.PixelInterleavedSampleModel;

        $i0 = virtualinvoke r34.<java.awt.image.SampleModel: int getDataType()>();

        $i1 = virtualinvoke r34.<java.awt.image.SampleModel: int getWidth()>();

        $i2 = virtualinvoke r34.<java.awt.image.SampleModel: int getHeight()>();

        $i3 = virtualinvoke r34.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        $i4 = virtualinvoke r34.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $r14 = newarray (int)[1];

        $r14[0] = 0;

        specialinvoke $r13.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>($i0, $i1, $i2, $i3, $i4, $r14);

        $r15 = virtualinvoke r6.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r16 = new java.awt.Point;

        specialinvoke $r16.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r17 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)>($r13, $r15, $r16);

        $i5 = virtualinvoke r6.<java.awt.image.Raster: int getMinX()>();

        $i6 = virtualinvoke r6.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i7 = $i5 - $i6;

        $i8 = virtualinvoke r6.<java.awt.image.Raster: int getMinY()>();

        $i9 = virtualinvoke r6.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i10 = $i8 - $i9;

        $i11 = virtualinvoke r6.<java.awt.image.Raster: int getWidth()>();

        $i12 = virtualinvoke r6.<java.awt.image.Raster: int getHeight()>();

        $r18 = virtualinvoke $r17.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i7, $i10, $i11, $i12, 0, 0, null);

        $r19 = new java.awt.image.ComponentColorModel;

        $r20 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r21 = newarray (int)[1];

        $r21[0] = 8;

        specialinvoke $r19.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r20, $r21, 0, 0, 1, 0);

        $r22 = new java.awt.image.BufferedImage;

        specialinvoke $r22.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r19, $r18, 0, null);

        r33 = $r22;

     label6:
        $r23 = new java.awt.image.ColorConvertOp;

        specialinvoke $r23.<java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>(null);

        virtualinvoke $r23.<java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r9, r33);

        $z2 = virtualinvoke $r11.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z2 == 0 goto label7;

        $i13 = virtualinvoke $r4.<java.awt.image.SampleModel: int getNumBands()>();

        $i14 = $i13 - 1;

        $r24 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $i15 = virtualinvoke $r24.<java.awt.image.SampleModel: int getNumBands()>();

        $i16 = $i15 - 1;

        staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractRed: void copyBand(java.awt.image.Raster,int,java.awt.image.WritableRaster,int)>(r32, $i14, r6, $i16);

        $z3 = virtualinvoke $r11.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z3 == 0 goto label7;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void multiplyAlpha(java.awt.image.WritableRaster)>(r6);

     label7:
        return r6;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.color.ColorSpace $r4, $r7, $r10, $r13;
        java.awt.image.SampleModel $r2;
        int[] $r5, $r8, $r11, $r14;
        int $i0;
        boolean $z0, $z1;
        java.awt.image.ComponentColorModel $r3, $r6, $r9, $r12;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        $r12 = new java.awt.image.ComponentColorModel;

        $r13 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r14 = newarray (int)[2];

        $r14[0] = 8;

        $r14[1] = 8;

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r12.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r13, $r14, 1, $z1, 3, 0);

        return $r12;

     label1:
        $r9 = new java.awt.image.ComponentColorModel;

        $r10 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r11 = newarray (int)[1];

        $r11[0] = 8;

        specialinvoke $r9.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r10, $r11, 0, 0, 1, 0);

        return $r9;

     label2:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        if $i0 != 2 goto label3;

        $r6 = new java.awt.image.ComponentColorModel;

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r8 = newarray (int)[2];

        $r8[0] = 8;

        $r8[1] = 8;

        specialinvoke $r6.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r7, $r8, 1, 1, 3, 0);

        return $r6;

     label3:
        $r3 = new java.awt.image.ComponentColorModel;

        $r4 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r5 = newarray (int)[1];

        $r5[0] = 8;

        specialinvoke $r3.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r4, $r5, 0, 0, 1, 0);

        return $r3;
    }

    protected static java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r1;
        int[] $r4, $r6, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.awt.image.PixelInterleavedSampleModel $r3, $r5, $r7, $r9;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r2;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        $r9 = new java.awt.image.PixelInterleavedSampleModel;

        $i4 = 2 * $i0;

        $r10 = newarray (int)[2];

        $r10[0] = 0;

        $r10[1] = 1;

        specialinvoke $r9.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, 2, $i4, $r10);

        return $r9;

     label1:
        $r7 = new java.awt.image.PixelInterleavedSampleModel;

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        specialinvoke $r7.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, 1, $i0, $r8);

        return $r7;

     label2:
        $i2 = virtualinvoke $r1.<java.awt.image.SampleModel: int getNumBands()>();

        if $i2 != 2 goto label3;

        $r5 = new java.awt.image.PixelInterleavedSampleModel;

        $i3 = 2 * $i0;

        $r6 = newarray (int)[2];

        $r6[0] = 0;

        $r6[1] = 1;

        specialinvoke $r5.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, 2, $i3, $r6);

        return $r5;

     label3:
        $r3 = new java.awt.image.PixelInterleavedSampleModel;

        $r4 = newarray (int)[1];

        $r4[0] = 0;

        specialinvoke $r3.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, 1, $i0, $r4);

        return $r3;
    }
}
