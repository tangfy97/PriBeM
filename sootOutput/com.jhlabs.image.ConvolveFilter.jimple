public class com.jhlabs.image.ConvolveFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    static final long serialVersionUID;
    public static int ZERO_EDGES;
    public static int CLAMP_EDGES;
    public static int WRAP_EDGES;
    protected java.awt.image.Kernel kernel;
    protected boolean alpha;
    private int edgeAction;

    public void <init>()
    {
        com.jhlabs.image.ConvolveFilter r0;
        float[] $r1;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        $r1 = newarray (float)[9];

        specialinvoke r0.<com.jhlabs.image.ConvolveFilter: void <init>(float[])>($r1);

        return;
    }

    public void <init>(float[])
    {
        com.jhlabs.image.ConvolveFilter r0;
        float[] r2;
        java.awt.image.Kernel $r1;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        r2 := @parameter0: float[];

        $r1 = new java.awt.image.Kernel;

        specialinvoke $r1.<java.awt.image.Kernel: void <init>(int,int,float[])>(3, 3, r2);

        specialinvoke r0.<com.jhlabs.image.ConvolveFilter: void <init>(java.awt.image.Kernel)>($r1);

        return;
    }

    public void <init>(int, int, float[])
    {
        com.jhlabs.image.ConvolveFilter r0;
        java.awt.image.Kernel $r1;
        int i0, i1;
        float[] r2;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: float[];

        $r1 = new java.awt.image.Kernel;

        specialinvoke $r1.<java.awt.image.Kernel: void <init>(int,int,float[])>(i0, i1, r2);

        specialinvoke r0.<com.jhlabs.image.ConvolveFilter: void <init>(java.awt.image.Kernel)>($r1);

        return;
    }

    public void <init>(java.awt.image.Kernel)
    {
        int $i0;
        com.jhlabs.image.ConvolveFilter r0;
        java.awt.image.Kernel r1;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        r1 := @parameter0: java.awt.image.Kernel;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.ConvolveFilter: java.awt.image.Kernel kernel> = null;

        r0.<com.jhlabs.image.ConvolveFilter: boolean alpha> = 1;

        $i0 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        r0.<com.jhlabs.image.ConvolveFilter: int edgeAction> = $i0;

        r0.<com.jhlabs.image.ConvolveFilter: java.awt.image.Kernel kernel> = r1;

        return;
    }

    public void setKernel(java.awt.image.Kernel)
    {
        com.jhlabs.image.ConvolveFilter r0;
        java.awt.image.Kernel r1;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        r1 := @parameter0: java.awt.image.Kernel;

        r0.<com.jhlabs.image.ConvolveFilter: java.awt.image.Kernel kernel> = r1;

        return;
    }

    public java.awt.image.Kernel getKernel()
    {
        com.jhlabs.image.ConvolveFilter r0;
        java.awt.image.Kernel $r1;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        $r1 = r0.<com.jhlabs.image.ConvolveFilter: java.awt.image.Kernel kernel>;

        return $r1;
    }

    public void setEdgeAction(int)
    {
        int i0;
        com.jhlabs.image.ConvolveFilter r0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.ConvolveFilter: int edgeAction> = i0;

        return;
    }

    public int getEdgeAction()
    {
        int $i0;
        com.jhlabs.image.ConvolveFilter r0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        $i0 = r0.<com.jhlabs.image.ConvolveFilter: int edgeAction>;

        return $i0;
    }

    public void setUseAlpha(boolean)
    {
        com.jhlabs.image.ConvolveFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.ConvolveFilter: boolean alpha> = z0;

        return;
    }

    public boolean getUseAlpha()
    {
        com.jhlabs.image.ConvolveFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        $z0 = r0.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        return $z0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, r5;
        com.jhlabs.image.ConvolveFilter r1;
        int[] $r3, $r4;
        java.awt.image.Kernel $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r1 := @this: com.jhlabs.image.ConvolveFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r5 != null goto label1;

        r5 = virtualinvoke r1.<com.jhlabs.image.ConvolveFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i2 = $i0 * $i1;

        $r3 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r4 = newarray (int)[$i3];

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, $r3);

        $r2 = r1.<com.jhlabs.image.ConvolveFilter: java.awt.image.Kernel kernel>;

        $z0 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i4 = r1.<com.jhlabs.image.ConvolveFilter: int edgeAction>;

        staticinvoke <com.jhlabs.image.ConvolveFilter: void convolve(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r2, $r3, $r4, $i0, $i1, $z0, $i4);

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r5, 0, 0, $i0, $i1, $r4);

        return r5;
    }

    public java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
    {
        java.awt.image.BufferedImage $r0, r1;
        com.jhlabs.image.ConvolveFilter r3;
        java.awt.image.ColorModel r4;
        int $i0, $i1;
        java.awt.image.WritableRaster $r2;
        boolean $z0;

        r3 := @this: com.jhlabs.image.ConvolveFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r4 := @parameter1: java.awt.image.ColorModel;

        if r4 != null goto label1;

        r4 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

     label1:
        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $r2 = virtualinvoke r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i0, $i1);

        $z0 = virtualinvoke r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r4, $r2, $z0, null);

        return $r0;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r0;
        com.jhlabs.image.ConvolveFilter r2;
        java.awt.image.BufferedImage r1;
        int $i0, $i1;

        r2 := @this: com.jhlabs.image.ConvolveFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r0;
    }

    public java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D$Double $r1;
        com.jhlabs.image.ConvolveFilter r2;
        java.awt.geom.Point2D r0, r3;
        double $d0, $d1;

        r2 := @this: com.jhlabs.image.ConvolveFilter;

        r0 := @parameter0: java.awt.geom.Point2D;

        r3 := @parameter1: java.awt.geom.Point2D;

        if r3 != null goto label1;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>()>();

        r3 = $r1;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r3.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        return r3;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        com.jhlabs.image.ConvolveFilter r0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        return null;
    }

    public static void convolve(java.awt.image.Kernel, int[], int[], int, int, int)
    {
        int[] r1, r2;
        java.awt.image.Kernel r0;
        int i0, i1, i2;

        r0 := @parameter0: java.awt.image.Kernel;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        staticinvoke <com.jhlabs.image.ConvolveFilter: void convolve(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>(r0, r1, r2, i0, i1, 1, i2);

        return;
    }

    public static void convolve(java.awt.image.Kernel, int[], int[], int, int, boolean, int)
    {
        int[] r1, r2;
        java.awt.image.Kernel r0;
        int $i0, $i1, i2, i3, i4;
        boolean z0;

        r0 := @parameter0: java.awt.image.Kernel;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        $i0 = virtualinvoke r0.<java.awt.image.Kernel: int getHeight()>();

        if $i0 != 1 goto label1;

        staticinvoke <com.jhlabs.image.ConvolveFilter: void convolveH(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>(r0, r1, r2, i2, i3, z0, i4);

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<java.awt.image.Kernel: int getWidth()>();

        if $i1 != 1 goto label2;

        staticinvoke <com.jhlabs.image.ConvolveFilter: void convolveV(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>(r0, r1, r2, i2, i3, z0, i4);

        goto label3;

     label2:
        staticinvoke <com.jhlabs.image.ConvolveFilter: void convolveHV(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>(r0, r1, r2, i2, i3, z0, i4);

     label3:
        return;
    }

    public static void convolveHV(java.awt.image.Kernel, int[], int[], int, int, boolean, int)
    {
        byte $b26;
        float[] $r1;
        java.awt.image.Kernel r0;
        int[] r2, r3;
        boolean z0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, i30, i31, i32, i33, i34, i35, $i36, $i37, $i38, i39, i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.image.Kernel;

        r3 := @parameter1: int[];

        r2 := @parameter2: int[];

        i5 := @parameter3: int;

        i4 := @parameter4: int;

        z0 := @parameter5: boolean;

        i20 := @parameter6: int;

        i30 = 0;

        $r1 = virtualinvoke r0.<java.awt.image.Kernel: float[] getKernelData(float[])>(null);

        $i0 = virtualinvoke r0.<java.awt.image.Kernel: int getHeight()>();

        $i1 = virtualinvoke r0.<java.awt.image.Kernel: int getWidth()>();

        i2 = $i0 / 2;

        i3 = $i1 / 2;

        i31 = 0;

     label01:
        if i31 >= i4 goto label17;

        i32 = 0;

     label02:
        if i32 >= i5 goto label16;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        f4 = 0.0F;

        i33 = neg i2;

     label03:
        if i33 > i2 goto label13;

        i34 = i31 + i33;

        if 0 > i34 goto label04;

        if i34 >= i4 goto label04;

        i35 = i34 * i5;

        goto label06;

     label04:
        $i21 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i20 != $i21 goto label05;

        i35 = i31 * i5;

        goto label06;

     label05:
        $i22 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i20 != $i22 goto label12;

        $i23 = i34 + i4;

        $i24 = $i23 % i4;

        i35 = $i24 * i5;

     label06:
        $i36 = i33 + i2;

        $i37 = $i1 * $i36;

        $i38 = $i37 + i3;

        i39 = neg i3;

     label07:
        if i39 > i3 goto label12;

        $i25 = $i38 + i39;

        f0 = $r1[$i25];

        $b26 = f0 cmpl 0.0F;

        if $b26 == 0 goto label11;

        i40 = i32 + i39;

        if 0 > i40 goto label08;

        if i40 < i5 goto label10;

     label08:
        $i27 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i20 != $i27 goto label09;

        i40 = i32;

        goto label10;

     label09:
        $i28 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i20 != $i28 goto label11;

        $i29 = i32 + i5;

        i40 = $i29 % i5;

     label10:
        $i41 = i35 + i40;

        $i42 = r3[$i41];

        $i43 = $i42 >> 24;

        $i44 = $i43 & 255;

        $f5 = (float) $i44;

        $f6 = f0 * $f5;

        f4 = f4 + $f6;

        $i45 = $i42 >> 16;

        $i46 = $i45 & 255;

        $f7 = (float) $i46;

        $f8 = f0 * $f7;

        f1 = f1 + $f8;

        $i47 = $i42 >> 8;

        $i48 = $i47 & 255;

        $f9 = (float) $i48;

        $f10 = f0 * $f9;

        f2 = f2 + $f10;

        $i49 = $i42 & 255;

        $f11 = (float) $i49;

        $f12 = f0 * $f11;

        f3 = f3 + $f12;

     label11:
        i39 = i39 + 1;

        goto label07;

     label12:
        i33 = i33 + 1;

        goto label03;

     label13:
        if z0 == 0 goto label14;

        $d6 = (double) f4;

        $d7 = $d6 + 0.5;

        $i19 = (int) $d7;

        $i50 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i19);

        goto label15;

     label14:
        $i50 = 255;

     label15:
        $d0 = (double) f1;

        $d1 = $d0 + 0.5;

        $i6 = (int) $d1;

        $i7 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i6);

        $d2 = (double) f2;

        $d3 = $d2 + 0.5;

        $i8 = (int) $d3;

        $i9 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i8);

        $d4 = (double) f3;

        $d5 = $d4 + 0.5;

        $i10 = (int) $d5;

        $i11 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i10);

        $i12 = i30;

        i30 = i30 + 1;

        $i14 = $i50 << 24;

        $i13 = $i7 << 16;

        $i16 = $i14 | $i13;

        $i15 = $i9 << 8;

        $i17 = $i16 | $i15;

        $i18 = $i17 | $i11;

        r2[$i12] = $i18;

        i32 = i32 + 1;

        goto label02;

     label16:
        i31 = i31 + 1;

        goto label01;

     label17:
        return;
    }

    public static void convolveH(java.awt.image.Kernel, int[], int[], int, int, boolean, int)
    {
        byte $b20;
        float[] $r1;
        java.awt.image.Kernel r0;
        int[] r2, r3;
        boolean z0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int $i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.image.Kernel;

        r3 := @parameter1: int[];

        r2 := @parameter2: int[];

        i3 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        i21 := @parameter6: int;

        i28 = 0;

        $r1 = virtualinvoke r0.<java.awt.image.Kernel: float[] getKernelData(float[])>(null);

        $i0 = virtualinvoke r0.<java.awt.image.Kernel: int getWidth()>();

        i1 = $i0 / 2;

        i29 = 0;

     label01:
        if i29 >= i2 goto label13;

        i4 = i29 * i3;

        i30 = 0;

     label02:
        if i30 >= i3 goto label12;

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        i31 = neg i1;

     label03:
        if i31 > i1 goto label09;

        $i19 = i1 + i31;

        f4 = $r1[$i19];

        $b20 = f4 cmpl 0.0F;

        if $b20 == 0 goto label08;

        i32 = i30 + i31;

        if i32 >= 0 goto label05;

        $i25 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i21 != $i25 goto label04;

        i32 = 0;

        goto label07;

     label04:
        $i26 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i21 != $i26 goto label07;

        $i27 = i30 + i3;

        i32 = $i27 % i3;

        goto label07;

     label05:
        if i32 < i3 goto label07;

        $i22 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i21 != $i22 goto label06;

        i32 = i3 - 1;

        goto label07;

     label06:
        $i23 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i21 != $i23 goto label07;

        $i24 = i30 + i3;

        i32 = $i24 % i3;

     label07:
        $i33 = i4 + i32;

        $i34 = r3[$i33];

        $i35 = $i34 >> 24;

        $i36 = $i35 & 255;

        $f5 = (float) $i36;

        $f6 = f4 * $f5;

        f3 = f3 + $f6;

        $i37 = $i34 >> 16;

        $i38 = $i37 & 255;

        $f7 = (float) $i38;

        $f8 = f4 * $f7;

        f0 = f0 + $f8;

        $i39 = $i34 >> 8;

        $i40 = $i39 & 255;

        $f9 = (float) $i40;

        $f10 = f4 * $f9;

        f1 = f1 + $f10;

        $i41 = $i34 & 255;

        $f11 = (float) $i41;

        $f12 = f4 * $f11;

        f2 = f2 + $f12;

     label08:
        i31 = i31 + 1;

        goto label03;

     label09:
        if z0 == 0 goto label10;

        $d6 = (double) f3;

        $d7 = $d6 + 0.5;

        $i18 = (int) $d7;

        $i42 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i18);

        goto label11;

     label10:
        $i42 = 255;

     label11:
        $d0 = (double) f0;

        $d1 = $d0 + 0.5;

        $i5 = (int) $d1;

        $i6 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i5);

        $d2 = (double) f1;

        $d3 = $d2 + 0.5;

        $i7 = (int) $d3;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $d4 = (double) f2;

        $d5 = $d4 + 0.5;

        $i9 = (int) $d5;

        $i10 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i9);

        $i11 = i28;

        i28 = i28 + 1;

        $i13 = $i42 << 24;

        $i12 = $i6 << 16;

        $i15 = $i13 | $i12;

        $i14 = $i8 << 8;

        $i16 = $i15 | $i14;

        $i17 = $i16 | $i10;

        r2[$i11] = $i17;

        i30 = i30 + 1;

        goto label02;

     label12:
        i29 = i29 + 1;

        goto label01;

     label13:
        return;
    }

    public static void convolveV(java.awt.image.Kernel, int[], int[], int, int, boolean, int)
    {
        byte $b44;
        float[] $r1;
        java.awt.image.Kernel r0;
        int[] r2, r3;
        boolean z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9, f10, f11, $f12;
        int $i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i42, $i43, $i45;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.image.Kernel;

        r3 := @parameter1: int[];

        r2 := @parameter2: int[];

        i3 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        i27 := @parameter6: int;

        i37 = 0;

        $r1 = virtualinvoke r0.<java.awt.image.Kernel: float[] getKernelData(float[])>(null);

        $i0 = virtualinvoke r0.<java.awt.image.Kernel: int getHeight()>();

        i1 = $i0 / 2;

        i38 = 0;

     label01:
        if i38 >= i2 goto label16;

        i39 = 0;

     label02:
        if i39 >= i3 goto label15;

        f8 = 0.0F;

        f9 = 0.0F;

        f10 = 0.0F;

        f11 = 0.0F;

        i40 = neg i1;

     label03:
        if i40 > i1 goto label12;

        i41 = i38 + i40;

        if i41 >= 0 goto label06;

        $i33 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i27 != $i33 goto label04;

        i42 = 0;

        goto label10;

     label04:
        $i34 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i27 != $i34 goto label05;

        $i35 = i38 + i2;

        $i36 = $i35 % i2;

        i42 = $i36 * i3;

        goto label10;

     label05:
        i42 = i41 * i3;

        goto label10;

     label06:
        if i41 < i2 goto label09;

        $i28 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i27 != $i28 goto label07;

        $i32 = i2 - 1;

        i42 = $i32 * i3;

        goto label10;

     label07:
        $i29 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i27 != $i29 goto label08;

        $i30 = i38 + i2;

        $i31 = $i30 % i2;

        i42 = $i31 * i3;

        goto label10;

     label08:
        i42 = i41 * i3;

        goto label10;

     label09:
        i42 = i41 * i3;

     label10:
        $i43 = i40 + i1;

        $f12 = $r1[$i43];

        $b44 = $f12 cmpl 0.0F;

        if $b44 == 0 goto label11;

        $i18 = i42 + i39;

        i19 = r3[$i18];

        $i20 = i19 >> 24;

        $i21 = $i20 & 255;

        $f0 = (float) $i21;

        $f1 = $f12 * $f0;

        f11 = f11 + $f1;

        $i22 = i19 >> 16;

        $i23 = $i22 & 255;

        $f2 = (float) $i23;

        $f3 = $f12 * $f2;

        f8 = f8 + $f3;

        $i24 = i19 >> 8;

        $i25 = $i24 & 255;

        $f4 = (float) $i25;

        $f5 = $f12 * $f4;

        f9 = f9 + $f5;

        $i26 = i19 & 255;

        $f6 = (float) $i26;

        $f7 = $f12 * $f6;

        f10 = f10 + $f7;

     label11:
        i40 = i40 + 1;

        goto label03;

     label12:
        if z0 == 0 goto label13;

        $d6 = (double) f11;

        $d7 = $d6 + 0.5;

        $i17 = (int) $d7;

        $i45 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i17);

        goto label14;

     label13:
        $i45 = 255;

     label14:
        $d0 = (double) f8;

        $d1 = $d0 + 0.5;

        $i4 = (int) $d1;

        $i5 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i4);

        $d2 = (double) f9;

        $d3 = $d2 + 0.5;

        $i6 = (int) $d3;

        $i7 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i6);

        $d4 = (double) f10;

        $d5 = $d4 + 0.5;

        $i8 = (int) $d5;

        $i9 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i8);

        $i10 = i37;

        i37 = i37 + 1;

        $i12 = $i45 << 24;

        $i11 = $i5 << 16;

        $i14 = $i12 | $i11;

        $i13 = $i7 << 8;

        $i15 = $i14 | $i13;

        $i16 = $i15 | $i9;

        r2[$i10] = $i16;

        i39 = i39 + 1;

        goto label02;

     label15:
        i38 = i38 + 1;

        goto label01;

     label16:
        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ConvolveFilter r0;

        r0 := @this: com.jhlabs.image.ConvolveFilter;

        return "Blur/Convolve...";
    }

    static void <clinit>()
    {
        <com.jhlabs.image.ConvolveFilter: long serialVersionUID> = 2239251672685254626L;

        <com.jhlabs.image.ConvolveFilter: int ZERO_EDGES> = 0;

        <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES> = 1;

        <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES> = 2;

        return;
    }
}
