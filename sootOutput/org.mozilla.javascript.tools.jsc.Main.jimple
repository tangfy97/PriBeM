public class org.mozilla.javascript.tools.jsc.Main extends java.lang.Object
{
    private boolean printHelp;
    private org.mozilla.javascript.tools.ToolErrorReporter reporter;
    private org.mozilla.javascript.CompilerEnvirons compilerEnv;
    private org.mozilla.javascript.optimizer.ClassCompiler compiler;
    private java.lang.String targetName;
    private java.lang.String targetPackage;
    private java.lang.String destinationDir;
    static java.lang.Class class$org$mozilla$javascript$tools$jsc$Main;

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r3;
        org.mozilla.javascript.tools.jsc.Main $r0;
        java.lang.String[] $r1, r6;
        org.mozilla.javascript.tools.ToolErrorReporter $r8;
        java.lang.Class $r2, $r7;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;

        r6 := @parameter0: java.lang.String[];

        $r0 = new org.mozilla.javascript.tools.jsc.Main;

        specialinvoke $r0.<org.mozilla.javascript.tools.jsc.Main: void <init>()>();

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String[] processOptions(java.lang.String[])>(r6);

        if $r1 != null goto label4;

        $z0 = $r0.<org.mozilla.javascript.tools.jsc.Main: boolean printHelp>;

        if $z0 == 0 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main>;

        if $r2 != null goto label1;

        $r7 = staticinvoke <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.tools.jsc.Main");

        <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main> = $r7;

        goto label2;

     label1:
        $r7 = <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main>;

     label2:
        $r4 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.jsc.usage", $r4);

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label3:
        staticinvoke <java.lang.System: void exit(int)>(1);

     label4:
        $r8 = $r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.tools.ToolErrorReporter reporter>;

        $z1 = virtualinvoke $r8.<org.mozilla.javascript.tools.ToolErrorReporter: boolean hasReportedError()>();

        if $z1 != 0 goto label5;

        virtualinvoke $r0.<org.mozilla.javascript.tools.jsc.Main: void processSource(java.lang.String[])>($r1);

     label5:
        return;
    }

    public void <init>()
    {
        org.mozilla.javascript.CompilerEnvirons $r2, $r4, $r6;
        org.mozilla.javascript.optimizer.ClassCompiler $r5;
        org.mozilla.javascript.tools.jsc.Main r0;
        org.mozilla.javascript.tools.ToolErrorReporter $r1, $r3;

        r0 := @this: org.mozilla.javascript.tools.jsc.Main;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mozilla.javascript.tools.ToolErrorReporter;

        specialinvoke $r1.<org.mozilla.javascript.tools.ToolErrorReporter: void <init>(boolean)>(1);

        r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.tools.ToolErrorReporter reporter> = $r1;

        $r2 = new org.mozilla.javascript.CompilerEnvirons;

        specialinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: void <init>()>();

        r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv> = $r2;

        $r4 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r3 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.tools.ToolErrorReporter reporter>;

        virtualinvoke $r4.<org.mozilla.javascript.CompilerEnvirons: void setErrorReporter(org.mozilla.javascript.ErrorReporter)>($r3);

        $r5 = new org.mozilla.javascript.optimizer.ClassCompiler;

        $r6 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        specialinvoke $r5.<org.mozilla.javascript.optimizer.ClassCompiler: void <init>(org.mozilla.javascript.CompilerEnvirons)>($r6);

        r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.optimizer.ClassCompiler compiler> = $r5;

        return;
    }

    public java.lang.String[] processOptions(java.lang.String[])
    {
        org.mozilla.javascript.tools.jsc.Main r0;
        java.util.Vector $r41;
        java.lang.Error $r39, $r42;
        java.util.StringTokenizer $r40;
        java.lang.String $r3, r4, $r6, $r10, $r14, $r17, $r19, $r21, $r22, $r24, $r27, $r30, $r32, r33, r34, $r35, r36, r37;
        java.lang.Class[] r38;
        java.lang.NumberFormatException $r31;
        java.lang.ClassNotFoundException $r25, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.lang.String[] r2, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i28, $i29, $i30;
        char $c8, $c10, $c13, $c14, c27;
        org.mozilla.javascript.CompilerEnvirons $r1, $r5, $r16, $r18, $r20;
        org.mozilla.javascript.optimizer.ClassCompiler $r9, $r13, $r15;
        java.lang.Class $r11, $r12;

        r0 := @this: org.mozilla.javascript.tools.jsc.Main;

        r2 := @parameter0: java.lang.String[];

        r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetPackage> = "";

        $r1 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        virtualinvoke $r1.<org.mozilla.javascript.CompilerEnvirons: void setGenerateDebugInfo(boolean)>(0);

        i22 = 0;

     label01:
        $i0 = lengthof r2;

        if i22 >= $i0 goto label48;

        r4 = r2[i22];

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 != 0 goto label05;

        $i20 = lengthof r2;

        i23 = $i20 - i22;

        $r21 = r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetName>;

        if $r21 == null goto label02;

        if i23 <= 1 goto label02;

        $r24 = r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetName>;

        specialinvoke r0.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.multiple.js.to.file", $r24);

        return null;

     label02:
        $r23 = newarray (java.lang.String)[i23];

        i24 = 0;

     label03:
        if i24 == i23 goto label04;

        $i21 = i22 + i24;

        $r22 = r2[$i21];

        $r23[i24] = $r22;

        i24 = i24 + 1;

        goto label03;

     label04:
        return $r23;

     label05:
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-help");

        if $z1 != 0 goto label06;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-h");

        if $z2 != 0 goto label06;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("--help");

        if $z3 == 0 goto label07;

     label06:
        r0.<org.mozilla.javascript.tools.jsc.Main: boolean printHelp> = 1;

        return null;

     label07:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-version");

        if $z4 == 0 goto label09;

        i22 = i22 + 1;

        $i18 = lengthof r2;

        if i22 >= $i18 goto label09;

        $r19 = r2[i22];

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19);

        $r20 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        virtualinvoke $r20.<org.mozilla.javascript.CompilerEnvirons: void setLanguageVersion(int)>($i19);

     label08:
        goto label47;

     label09:
        $z5 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-opt");

        if $z5 != 0 goto label10;

        $z21 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-O");

        if $z21 == 0 goto label12;

     label10:
        i22 = i22 + 1;

        $i1 = lengthof r2;

        if i22 >= $i1 goto label12;

        $r17 = r2[i22];

        $i17 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        $r18 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        virtualinvoke $r18.<org.mozilla.javascript.CompilerEnvirons: void setOptimizationLevel(int)>($i17);

     label11:
        goto label47;

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;

        $r32 = r2[i22];

        staticinvoke <org.mozilla.javascript.tools.jsc.Main: void badUsage(java.lang.String)>($r32);

        return null;

     label14:
        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-nosource");

        if $z6 == 0 goto label15;

        $r16 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        virtualinvoke $r16.<org.mozilla.javascript.CompilerEnvirons: void setGeneratingSource(boolean)>(0);

        goto label47;

     label15:
        $z7 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-debug");

        if $z7 != 0 goto label16;

        $z8 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-g");

        if $z8 == 0 goto label17;

     label16:
        $r5 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        virtualinvoke $r5.<org.mozilla.javascript.CompilerEnvirons: void setGenerateDebugInfo(boolean)>(1);

        goto label47;

     label17:
        $z9 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-main-method-class");

        if $z9 == 0 goto label18;

        i22 = i22 + 1;

        $i16 = lengthof r2;

        if i22 >= $i16 goto label18;

        $r15 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.optimizer.ClassCompiler compiler>;

        $r14 = r2[i22];

        virtualinvoke $r15.<org.mozilla.javascript.optimizer.ClassCompiler: void setMainMethodClass(java.lang.String)>($r14);

        goto label47;

     label18:
        $z10 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-o");

        if $z10 == 0 goto label25;

        i22 = i22 + 1;

        $i11 = lengthof r2;

        if i22 >= $i11 goto label25;

        r33 = r2[i22];

        $i12 = virtualinvoke r33.<java.lang.String: int length()>();

        if $i12 == 0 goto label19;

        $c13 = virtualinvoke r33.<java.lang.String: char charAt(int)>(0);

        $z18 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c13);

        if $z18 != 0 goto label20;

     label19:
        specialinvoke r0.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.invalid.classfile.name", r33);

        goto label47;

     label20:
        i25 = 1;

     label21:
        if i25 >= $i12 goto label24;

        $c14 = virtualinvoke r33.<java.lang.String: char charAt(int)>(i25);

        $z19 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c14);

        if $z19 != 0 goto label23;

        $i29 = (int) $c14;

        if $i29 != 46 goto label22;

        $i15 = $i12 - 6;

        if i25 != $i15 goto label22;

        $z20 = virtualinvoke r33.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z20 == 0 goto label22;

        r33 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int,int)>(0, i25);

        goto label24;

     label22:
        specialinvoke r0.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.invalid.classfile.name", r33);

        goto label24;

     label23:
        i25 = i25 + 1;

        goto label21;

     label24:
        r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetName> = r33;

        goto label47;

     label25:
        $z11 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-package");

        if $z11 == 0 goto label34;

        i22 = i22 + 1;

        $i6 = lengthof r2;

        if i22 >= $i6 goto label34;

        r34 = r2[i22];

        $i7 = virtualinvoke r34.<java.lang.String: int length()>();

        i26 = 0;

     label26:
        if i26 == $i7 goto label33;

        $c8 = virtualinvoke r34.<java.lang.String: char charAt(int)>(i26);

        c27 = $c8;

        $z16 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c8);

        if $z16 == 0 goto label31;

        i28 = i26 + 1;

     label27:
        if i28 == $i7 goto label29;

        $c10 = virtualinvoke r34.<java.lang.String: char charAt(int)>(i28);

        c27 = $c10;

        $z17 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c10);

        if $z17 != 0 goto label28;

        goto label29;

     label28:
        i28 = i28 + 1;

        goto label27;

     label29:
        if i28 != $i7 goto label30;

        goto label33;

     label30:
        $i30 = (int) c27;

        if $i30 != 46 goto label31;

        $i9 = $i7 - 1;

        if i28 == $i9 goto label31;

        goto label32;

     label31:
        $r35 = r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetPackage>;

        specialinvoke r0.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.package.name", $r35);

        return null;

     label32:
        i26 = i28 + 1;

        goto label26;

     label33:
        r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetPackage> = r34;

        goto label47;

     label34:
        $z12 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-extends");

        if $z12 == 0 goto label39;

        i22 = i22 + 1;

        $i5 = lengthof r2;

        if i22 >= $i5 goto label39;

        r36 = r2[i22];

     label35:
        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r36);

     label36:
        goto label38;

     label37:
        $r28 := @caughtexception;

        $r39 = new java.lang.Error;

        $r30 = virtualinvoke $r28.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.Error: void <init>(java.lang.String)>($r30);

        throw $r39;

     label38:
        $r13 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.optimizer.ClassCompiler compiler>;

        virtualinvoke $r13.<org.mozilla.javascript.optimizer.ClassCompiler: void setTargetExtends(java.lang.Class)>($r12);

        goto label47;

     label39:
        $z13 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-implements");

        if $z13 == 0 goto label45;

        i22 = i22 + 1;

        $i3 = lengthof r2;

        if i22 >= $i3 goto label45;

        r37 = r2[i22];

        $r40 = new java.util.StringTokenizer;

        specialinvoke $r40.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r37, ",");

        $r41 = new java.util.Vector;

        specialinvoke $r41.<java.util.Vector: void <init>()>();

     label40:
        $z15 = virtualinvoke $r40.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z15 == 0 goto label44;

        $r10 = virtualinvoke $r40.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label41:
        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r10);

        virtualinvoke $r41.<java.util.Vector: void addElement(java.lang.Object)>($r11);

     label42:
        goto label40;

     label43:
        $r25 := @caughtexception;

        $r42 = new java.lang.Error;

        $r27 = virtualinvoke $r25.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.Error: void <init>(java.lang.String)>($r27);

        throw $r42;

     label44:
        $i4 = virtualinvoke $r41.<java.util.Vector: int size()>();

        r38 = newarray (java.lang.Class)[$i4];

        virtualinvoke $r41.<java.util.Vector: void copyInto(java.lang.Object[])>(r38);

        $r9 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.optimizer.ClassCompiler compiler>;

        virtualinvoke $r9.<org.mozilla.javascript.optimizer.ClassCompiler: void setTargetImplements(java.lang.Class[])>(r38);

        goto label47;

     label45:
        $z14 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-d");

        if $z14 == 0 goto label46;

        i22 = i22 + 1;

        $i2 = lengthof r2;

        if i22 >= $i2 goto label46;

        $r6 = r2[i22];

        r0.<org.mozilla.javascript.tools.jsc.Main: java.lang.String destinationDir> = $r6;

        goto label47;

     label46:
        staticinvoke <org.mozilla.javascript.tools.jsc.Main: void badUsage(java.lang.String)>(r4);

        return null;

     label47:
        i22 = i22 + 1;

        goto label01;

     label48:
        $r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String)>("msg.no.file");

        staticinvoke <org.mozilla.javascript.tools.jsc.Main: void p(java.lang.String)>($r3);

        return null;

        catch java.lang.NumberFormatException from label07 to label08 with label13;
        catch java.lang.NumberFormatException from label09 to label11 with label13;
        catch java.lang.ClassNotFoundException from label35 to label36 with label37;
        catch java.lang.ClassNotFoundException from label41 to label42 with label43;
    }

    private static void badUsage(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.Class $r0, $r5;
        java.lang.String $r2, r3, $r4;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.tools.jsc.Main");

        <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main> = $r5;

        goto label2;

     label1:
        $r5 = <org.mozilla.javascript.tools.jsc.Main: java.lang.Class class$org$mozilla$javascript$tools$jsc$Main>;

     label2:
        $r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object,java.lang.Object)>("msg.jsc.bad.usage", $r2, r3);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    public void processSource(java.lang.String[])
    {
        byte[] r13;
        org.mozilla.javascript.tools.jsc.Main r3;
        boolean $z0;
        java.lang.Throwable $r28;
        java.lang.Object[] $r7;
        java.lang.String[] r0;
        java.lang.StringBuffer $r19, $r21, $r22, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.String r1, $r4, $r5, $r8, $r9, r11, $r18, $r20, $r24, $r25, $r27, r29;
        java.io.FileOutputStream $r15;
        java.io.IOException $r26;
        java.io.File $r2, $r14, $r16, $r17, r30;
        org.mozilla.javascript.optimizer.ClassCompiler $r6;
        java.lang.Object $r10, $r12;

        r3 := @this: org.mozilla.javascript.tools.jsc.Main;

        r0 := @parameter0: java.lang.String[];

        i6 = 0;

     label01:
        $i0 = lengthof r0;

        if i6 == $i0 goto label20;

        r1 = r0[i6];

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".js");

        if $z0 != 0 goto label02;

        specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.extension.not.js", r1);

        return;

     label02:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        $r4 = specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String readSource(java.io.File)>($r2);

        if $r4 != null goto label03;

        return;

     label03:
        r29 = r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetName>;

        if r29 != null goto label04;

        $r24 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $i4 = virtualinvoke $r24.<java.lang.String: int length()>();

        $i5 = $i4 - 3;

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        r29 = virtualinvoke r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String getClassName(java.lang.String)>($r25);

     label04:
        $r5 = r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetPackage>;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 == 0 goto label05;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String targetPackage>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        r29 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

     label05:
        $r6 = r3.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.optimizer.ClassCompiler compiler>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Object[] compileToClassFiles(java.lang.String,java.lang.String,int,java.lang.String)>($r4, r1, 1, r29);

        if $r7 == null goto label06;

        $i2 = lengthof $r7;

        if $i2 != 0 goto label07;

     label06:
        return;

     label07:
        r30 = null;

        $r8 = r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String destinationDir>;

        if $r8 == null goto label08;

        $r17 = new java.io.File;

        $r18 = r3.<org.mozilla.javascript.tools.jsc.Main: java.lang.String destinationDir>;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r18);

        r30 = $r17;

        goto label09;

     label08:
        $r9 = virtualinvoke $r2.<java.io.File: java.lang.String getParent()>();

        if $r9 == null goto label09;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r9);

        r30 = $r16;

     label09:
        i7 = 0;

     label10:
        $i8 = lengthof $r7;

        if i7 == $i8 goto label19;

        $r10 = $r7[i7];

        r11 = (java.lang.String) $r10;

        $i3 = i7 + 1;

        $r12 = $r7[$i3];

        r13 = (byte[]) $r12;

        $r14 = specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: java.io.File getOutputFile(java.io.File,java.lang.String)>(r30, r11);

     label11:
        $r15 = new java.io.FileOutputStream;

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

     label12:
        virtualinvoke $r15.<java.io.FileOutputStream: void write(byte[])>(r13);

     label13:
        virtualinvoke $r15.<java.io.FileOutputStream: void close()>();

        goto label16;

     label14:
        $r28 := @caughtexception;

     label15:
        virtualinvoke $r15.<java.io.FileOutputStream: void close()>();

        throw $r28;

     label16:
        goto label18;

     label17:
        $r26 := @caughtexception;

        $r27 = virtualinvoke $r26.<java.io.IOException: java.lang.String toString()>();

        specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: void addFormatedError(java.lang.String)>($r27);

     label18:
        i7 = i7 + 2;

        goto label10;

     label19:
        i6 = i6 + 1;

        goto label01;

     label20:
        return;

        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.io.IOException from label11 to label16 with label17;
    }

    private java.lang.String readSource(java.io.File)
    {
        java.lang.Throwable $r9;
        org.mozilla.javascript.tools.jsc.Main r3;
        java.io.IOException $r5;
        java.io.File r0;
        java.io.FileNotFoundException $r7;
        java.io.FileReader $r1;
        java.lang.String $r2, $r4, $r6, $r8;
        boolean $z0;

        r3 := @this: org.mozilla.javascript.tools.jsc.Main;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.jsfile.not.found", $r4);

        return null;

     label1:
        $r1 = new java.io.FileReader;

        specialinvoke $r1.<java.io.FileReader: void <init>(java.io.File)>(r0);

     label2:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.String readReader(java.io.Reader)>($r1);

     label3:
        virtualinvoke $r1.<java.io.Reader: void close()>();

     label4:
        return $r2;

     label5:
        $r9 := @caughtexception;

     label6:
        virtualinvoke $r1.<java.io.Reader: void close()>();

        throw $r9;

     label7:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: void addError(java.lang.String,java.lang.String)>("msg.couldnt.open", $r8);

        goto label9;

     label8:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.io.IOException: java.lang.String toString()>();

        specialinvoke r3.<org.mozilla.javascript.tools.jsc.Main: void addFormatedError(java.lang.String)>($r6);

     label9:
        return null;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.io.FileNotFoundException from label1 to label4 with label7;
        catch java.io.FileNotFoundException from label5 to label7 with label7;
        catch java.io.IOException from label1 to label4 with label8;
        catch java.io.IOException from label5 to label7 with label8;
    }

    private java.io.File getOutputFile(java.io.File, java.lang.String)
    {
        org.mozilla.javascript.tools.jsc.Main r7;
        char $c0;
        java.io.File $r3, r4, $r6;
        java.lang.String r0, $r1, $r2, $r5;
        boolean $z0;

        r7 := @this: org.mozilla.javascript.tools.jsc.Main;

        r4 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, $c0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>(".class");

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, $r2);

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getParent()>();

        if $r5 == null goto label1;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r5);

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

     label1:
        return $r3;
    }

    java.lang.String getClassName(java.lang.String)
    {
        org.mozilla.javascript.tools.jsc.Main r4;
        char $c2, $c3;
        int $i0, $i1, i4, i5, $i6;
        char[] r1;
        java.lang.String r0, $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: org.mozilla.javascript.tools.jsc.Main;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        r1 = newarray (char)[$i1];

        i4 = 0;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c2);

        if $z0 != 0 goto label1;

        i4 = 1;

        r1[0] = 95;

     label1:
        i5 = 0;

     label2:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i6 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c3);

        if $z1 == 0 goto label3;

        r1[i4] = $c3;

        goto label4;

     label3:
        r1[i4] = 95;

     label4:
        i5 = i5 + 1;

        i4 = i4 + 1;

        goto label2;

     label5:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    private static void p(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    private void addError(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.tools.jsc.Main r2;
        java.lang.String r0, r1, r3;

        r2 := @this: org.mozilla.javascript.tools.jsc.Main;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String)>(r1);

        goto label2;

     label1:
        r3 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>(r1, r0);

     label2:
        specialinvoke r2.<org.mozilla.javascript.tools.jsc.Main: void addFormatedError(java.lang.String)>(r3);

        return;
    }

    private void addFormatedError(java.lang.String)
    {
        org.mozilla.javascript.tools.jsc.Main r0;
        int $i1, $i3;
        java.lang.String r1;
        org.mozilla.javascript.tools.ToolErrorReporter $r2;

        r0 := @this: org.mozilla.javascript.tools.jsc.Main;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.tools.jsc.Main: org.mozilla.javascript.tools.ToolErrorReporter reporter>;

        $i1 = (int) -1;

        $i3 = (int) -1;

        virtualinvoke $r2.<org.mozilla.javascript.tools.ToolErrorReporter: void error(java.lang.String,java.lang.String,int,java.lang.String,int)>(r1, null, $i1, null, $i3);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
