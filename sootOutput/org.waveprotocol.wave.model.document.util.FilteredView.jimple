public abstract class org.waveprotocol.wave.model.document.util.FilteredView extends org.waveprotocol.wave.model.document.util.IdentityView implements org.waveprotocol.wave.model.document.util.ReadableDocumentView
{

    protected abstract org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object);

    public void <init>(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        return;
    }

    public java.lang.Object getFirstChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2;
        java.lang.Object r1, $r3, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>($r3, r1, 1);

        return $r4;
    }

    public java.lang.Object getLastChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2;
        java.lang.Object r1, $r3, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPreviousVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>($r3, r1, 1);

        return $r4;
    }

    public java.lang.Object getNextSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r3;
        java.lang.Object r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r3, r1, $r2, 0);

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>($r4, $r2, 1);

        return $r5;
    }

    public java.lang.Object getPreviousSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r3;
        java.lang.Object r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r3, r1, $r2, 0);

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPreviousVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>($r4, $r2, 1);

        return $r5;
    }

    public java.lang.Object getParentElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r5, $r6;
        java.lang.RuntimeException $r7;
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object r1, r8;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r8 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

     label1:
        if r8 == null goto label7;

        $r3 = <org.waveprotocol.wave.model.document.util.FilteredView$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$util$FilteredView$Skip>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)>(r8);

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.FilteredView$Skip: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        return r8;

     label3:
        $r6 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r8);

        goto label1;

     label4:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r8 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getParentElement(java.lang.Object)>(r8);

        goto label1;

     label5:
        return null;

     label6:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented");

        throw $r7;

     label7:
        return null;
    }

    public java.lang.Object getVisibleNodeNext(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>(r1, null, 0);

        return $r2;
    }

    public java.lang.Object getVisibleNodePrevious(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPreviousVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>(r1, null, 0);

        return $r2;
    }

    public java.lang.Object getVisibleNodeFirst(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>(r1, null, 1);

        return $r2;
    }

    public java.lang.Object getVisibleNodeLast(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPreviousVisibleNodeDepthFirst(java.lang.Object,java.lang.Object,boolean)>(r1, null, 1);

        return $r2;
    }

    public java.lang.Object getVisibleNode(java.lang.Object)
    {
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.model.document.util.FilteredView r1;
        int[] $r2;
        int $i0, $i1;
        java.lang.Object r0, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r3;

        r1 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return r0;

     label1:
        $r2 = <org.waveprotocol.wave.model.document.util.FilteredView$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$util$FilteredView$Skip>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)>(r0);

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FilteredView$Skip: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label2:
        return r0;

     label3:
        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getParentElement(java.lang.Object)>(r0);

        return $r4;

     label4:
        return null;

     label5:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented");

        throw $r5;
    }

    public void onBeforeFilter(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point r1;
        org.waveprotocol.wave.model.document.util.FilteredView r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        return;
    }

    private java.lang.Object getNextVisibleNodeDepthFirst(java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r4, $r5;
        java.lang.RuntimeException $r6;
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.Object r3, r7;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r2;
        boolean z0, z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r7 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        z1 = z0;

     label1:
        if r7 == null goto label8;

        $r1 = <org.waveprotocol.wave.model.document.util.FilteredView$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$util$FilteredView$Skip>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)>(r7);

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FilteredView$Skip: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        return r7;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r5, r7, r3, z1);

        goto label7;

     label4:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r4, r7, r3, 0);

        goto label7;

     label5:
        return null;

     label6:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented");

        throw $r6;

     label7:
        z1 = 1;

        goto label1;

     label8:
        return null;
    }

    private java.lang.Object getPreviousVisibleNodeDepthFirst(java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r4, $r5;
        java.lang.RuntimeException $r6;
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.Object r3, r7;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r2;
        boolean z0, z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r7 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        z1 = z0;

     label1:
        if r7 == null goto label8;

        $r1 = <org.waveprotocol.wave.model.document.util.FilteredView$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$util$FilteredView$Skip>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)>(r7);

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FilteredView$Skip: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        return r7;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r5, r7, r3, z1);

        goto label7;

     label4:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r4, r7, r3, 0);

        goto label7;

     label5:
        return null;

     label6:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented");

        throw $r6;

     label7:
        z1 = 1;

        goto label1;

     label8:
        return null;
    }

    private java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, r3, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r1, r2, r3, z0, 1);

        return $r4;
    }

    private java.lang.Object getPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, r3, $r4;
        org.waveprotocol.wave.model.document.util.FilteredView r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r1, r2, r3, z0, 0);

        return $r4;
    }

    protected java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, r2, $r3;
        boolean z0, z1;
        org.waveprotocol.wave.model.document.util.FilteredView r4;

        r4 := @this: org.waveprotocol.wave.model.document.util.FilteredView;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r0, r1, r2, z0, z1);

        return $r3;
    }
}
