public abstract class org.codehaus.jackson.JsonNode extends java.lang.Object implements java.lang.Iterable
{
    static final java.util.List NO_NODES;
    static final java.util.List NO_STRINGS;

    protected void <init>()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isValueNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isContainerNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isMissingNode()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isArray()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isObject()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isPojo()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isIntegralNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isFloatingPointNumber()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isInt()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isLong()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isDouble()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBigDecimal()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBigInteger()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isTextual()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBoolean()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isNull()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public boolean isBinary()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public abstract org.codehaus.jackson.JsonToken asToken();

    public abstract org.codehaus.jackson.JsonParser$NumberType getNumberType();

    public java.lang.String getTextValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public byte[] getBinaryValue() throws java.io.IOException
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public boolean getBooleanValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public java.lang.Number getNumberValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return null;
    }

    public int getIntValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public long getLongValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0L;
    }

    public double getDoubleValue()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0.0;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        java.math.BigDecimal $r0;
        org.codehaus.jackson.JsonNode r1;

        r1 := @this: org.codehaus.jackson.JsonNode;

        $r0 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return $r0;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        java.math.BigInteger $r0;
        org.codehaus.jackson.JsonNode r1;

        r1 := @this: org.codehaus.jackson.JsonNode;

        $r0 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r0;
    }

    public org.codehaus.jackson.JsonNode get(int)
    {
        int i0;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        i0 := @parameter0: int;

        return null;
    }

    public org.codehaus.jackson.JsonNode get(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public final org.codehaus.jackson.JsonNode getFieldValue(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.JsonNode r0, $r2;

        r0 := @this: org.codehaus.jackson.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(java.lang.String)>(r1);

        return $r2;
    }

    public final org.codehaus.jackson.JsonNode getElementValue(int)
    {
        int i0;
        org.codehaus.jackson.JsonNode r0, $r1;

        r0 := @this: org.codehaus.jackson.JsonNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode get(int)>(i0);

        return $r1;
    }

    public abstract java.lang.String getValueAsText();

    public int size()
    {
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        return 0;
    }

    public final java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r0;

        r0 := @this: org.codehaus.jackson.JsonNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: java.util.Iterator getElements()>();

        return $r1;
    }

    public java.util.Iterator getElements()
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r2;

        r2 := @this: org.codehaus.jackson.JsonNode;

        $r0 = <org.codehaus.jackson.JsonNode: java.util.List NO_NODES>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public java.util.Iterator getFieldNames()
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        org.codehaus.jackson.JsonNode r2;

        r2 := @this: org.codehaus.jackson.JsonNode;

        $r0 = <org.codehaus.jackson.JsonNode: java.util.List NO_STRINGS>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public abstract org.codehaus.jackson.JsonNode path(java.lang.String);

    public final org.codehaus.jackson.JsonNode getPath(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jackson.JsonNode r0, $r2;

        r0 := @this: org.codehaus.jackson.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode path(java.lang.String)>(r1);

        return $r2;
    }

    public abstract org.codehaus.jackson.JsonNode path(int);

    public final org.codehaus.jackson.JsonNode getPath(int)
    {
        int i0;
        org.codehaus.jackson.JsonNode r0, $r1;

        r0 := @this: org.codehaus.jackson.JsonNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonNode path(int)>(i0);

        return $r1;
    }

    public abstract void writeTo(org.codehaus.jackson.JsonGenerator) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract org.codehaus.jackson.JsonParser traverse();

    public abstract java.lang.String toString();

    public abstract boolean equals(java.lang.Object);

    static void <clinit>()
    {
        java.util.List $r0, $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.codehaus.jackson.JsonNode: java.util.List NO_NODES> = $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.codehaus.jackson.JsonNode: java.util.List NO_STRINGS> = $r1;

        return;
    }
}
