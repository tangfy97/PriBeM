public class org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor extends org.apache.velocity.runtime.parser.node.PropertyExecutor
{
    static java.lang.Class class$java$lang$Boolean;

    public void <init>(org.apache.velocity.runtime.log.Log, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.util.introspection.Introspector r2;
        org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor r0;
        java.lang.Class r3;
        java.lang.String r4;

        r0 := @this: org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor;

        r1 := @parameter0: org.apache.velocity.runtime.log.Log;

        r2 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void <init>(org.apache.velocity.runtime.log.Log,org.apache.velocity.util.introspection.Introspector,java.lang.Class,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(org.apache.velocity.runtime.RuntimeLogger, org.apache.velocity.util.introspection.Introspector, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.RuntimeLoggerLog $r1;
        org.apache.velocity.util.introspection.Introspector r3;
        org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor r0;
        java.lang.Class r4;
        java.lang.String r5;
        org.apache.velocity.runtime.RuntimeLogger r2;

        r0 := @this: org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor;

        r2 := @parameter0: org.apache.velocity.runtime.RuntimeLogger;

        r3 := @parameter1: org.apache.velocity.util.introspection.Introspector;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.String;

        $r1 = new org.apache.velocity.runtime.log.RuntimeLoggerLog;

        specialinvoke $r1.<org.apache.velocity.runtime.log.RuntimeLoggerLog: void <init>(org.apache.velocity.runtime.RuntimeLogger)>(r2);

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.PropertyExecutor: void <init>(org.apache.velocity.runtime.log.Log,org.apache.velocity.util.introspection.Introspector,java.lang.Class,java.lang.String)>($r1, r3, r4, r5);

        return;
    }

    protected void discover(java.lang.Class, java.lang.String)
    {
        org.apache.velocity.exception.VelocityException $r22;
        java.lang.reflect.Method $r6, $r7, $r10, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r16;
        java.lang.Object[] r24;
        java.lang.StringBuffer $r0, $r17, $r18, $r19;
        org.apache.velocity.util.introspection.Introspector $r3, $r13;
        java.lang.String r1, $r5, $r14, $r20;
        char $c0, $c1, $c2;
        java.lang.RuntimeException $r23;
        org.apache.velocity.runtime.log.Log $r21;
        org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor r2;
        java.lang.Class r4, $r8, $r9, $r11, $r12, $r25;

        r2 := @this: org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor;

        r4 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label01:
        r24 = newarray (java.lang.Object)[0];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("is");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: org.apache.velocity.util.introspection.Introspector getIntrospector()>();

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r4, $r5, r24);

        virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: void setMethod(java.lang.reflect.Method)>($r6);

        $z0 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: boolean isAlive()>();

        if $z0 != 0 goto label04;

        $c0 = virtualinvoke $r0.<java.lang.StringBuffer: char charAt(int)>(2);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z1 == 0 goto label02;

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        virtualinvoke $r0.<java.lang.StringBuffer: void setCharAt(int,char)>(2, $c2);

        goto label03;

     label02:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        virtualinvoke $r0.<java.lang.StringBuffer: void setCharAt(int,char)>(2, $c1);

     label03:
        $r13 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: org.apache.velocity.util.introspection.Introspector getIntrospector()>();

        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<org.apache.velocity.util.introspection.Introspector: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r4, $r14, r24);

        virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: void setMethod(java.lang.reflect.Method)>($r15);

     label04:
        $z2 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: boolean isAlive()>();

        if $z2 == 0 goto label07;

        $r7 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.reflect.Method getMethod()>();

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r8 == $r9 goto label07;

        $r10 = virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.reflect.Method getMethod()>();

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r12 = <org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.Class class$java$lang$Boolean>;

        if $r12 != null goto label05;

        $r25 = staticinvoke <org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.Class class$java$lang$Boolean> = $r25;

        goto label06;

     label05:
        $r25 = <org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: java.lang.Class class$java$lang$Boolean>;

     label06:
        if $r11 == $r25 goto label07;

        virtualinvoke r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: void setMethod(java.lang.reflect.Method)>(null);

     label07:
        goto label10;

     label08:
        $r23 := @caughtexception;

        throw $r23;

     label09:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while looking for boolean property getter for \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = r2.<org.apache.velocity.runtime.parser.node.BooleanPropertyExecutor: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r21.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r20, $r16);

        $r22 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r22.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r16);

        throw $r22;

     label10:
        return;

        catch java.lang.RuntimeException from label01 to label07 with label08;
        catch java.lang.Exception from label01 to label07 with label09;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
