public class org.apache.batik.transcoder.image.JPEGTranscoder extends org.apache.batik.transcoder.image.ImageTranscoder
{
    public static final org.apache.batik.transcoder.TranscodingHints$Key KEY_QUALITY;

    public void <init>()
    {
        java.awt.Color $r1;
        org.apache.batik.transcoder.TranscodingHints $r3;
        org.apache.batik.transcoder.image.JPEGTranscoder r0;
        org.apache.batik.transcoder.TranscodingHints$Key $r2;

        r0 := @this: org.apache.batik.transcoder.image.JPEGTranscoder;

        specialinvoke r0.<org.apache.batik.transcoder.image.ImageTranscoder: void <init>()>();

        $r3 = r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r2 = <org.apache.batik.transcoder.image.ImageTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_BACKGROUND_COLOR>;

        $r1 = <java.awt.Color: java.awt.Color white>;

        virtualinvoke $r3.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public java.awt.image.BufferedImage createImage(int, int)
    {
        java.awt.image.BufferedImage $r0;
        int i0, i1;
        org.apache.batik.transcoder.image.JPEGTranscoder r1;

        r1 := @this: org.apache.batik.transcoder.image.JPEGTranscoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);

        return $r0;
    }

    public void writeImage(java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.lang.Float $r17;
        org.apache.batik.transcoder.ErrorHandler $r8;
        org.apache.batik.ext.awt.image.spi.ImageWriter $r10;
        int $i0;
        org.apache.batik.transcoder.TranscodingHints$Key $r4, $r14;
        java.lang.String $r7, $r19;
        boolean $z0;
        double $d0, $d1, $d2;
        java.io.OutputStream $r1;
        org.apache.batik.ext.awt.image.spi.ImageWriterRegistry $r9;
        java.awt.image.BufferedImage r13;
        org.apache.batik.transcoder.TranscoderOutput r0;
        org.apache.batik.transcoder.image.JPEGTranscoder r3;
        java.io.IOException $r20;
        org.apache.batik.transcoder.TranscodingHints $r5, $r15;
        org.apache.batik.bridge.UserAgent $r12;
        org.apache.batik.transcoder.TranscoderException $r6, $r18, $r21;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams $r11;
        float $f0, f1;
        java.lang.Object $r16;
        org.apache.batik.transcoder.image.JPEGTranscoder$OutputStreamWrapper $r2;

        r3 := @this: org.apache.batik.transcoder.image.JPEGTranscoder;

        r13 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        $r2 = new org.apache.batik.transcoder.image.JPEGTranscoder$OutputStreamWrapper;

        specialinvoke $r2.<org.apache.batik.transcoder.image.JPEGTranscoder$OutputStreamWrapper: void <init>(java.io.OutputStream)>($r1);

        if $r2 != null goto label1;

        $r18 = new org.apache.batik.transcoder.TranscoderException;

        $r19 = staticinvoke <org.apache.batik.transcoder.image.resources.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("jpeg.badoutput", null);

        specialinvoke $r18.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label1:
        $r5 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r4 = <org.apache.batik.transcoder.image.JPEGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_QUALITY>;

        $z0 = virtualinvoke $r5.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r15 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints hints>;

        $r14 = <org.apache.batik.transcoder.image.JPEGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_QUALITY>;

        $r16 = virtualinvoke $r15.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r14);

        $r17 = (java.lang.Float) $r16;

        f1 = virtualinvoke $r17.<java.lang.Float: float floatValue()>();

        goto label3;

     label2:
        $r6 = new org.apache.batik.transcoder.TranscoderException;

        $r7 = staticinvoke <org.apache.batik.transcoder.image.resources.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("jpeg.unspecifiedQuality", null);

        specialinvoke $r6.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.String)>($r7);

        $r8 = r3.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.ErrorHandler handler>;

        interfaceinvoke $r8.<org.apache.batik.transcoder.ErrorHandler: void error(org.apache.batik.transcoder.TranscoderException)>($r6);

        f1 = 0.75F;

     label3:
        $r9 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriterRegistry getInstance()>();

        $r10 = virtualinvoke $r9.<org.apache.batik.ext.awt.image.spi.ImageWriterRegistry: org.apache.batik.ext.awt.image.spi.ImageWriter getWriterFor(java.lang.String)>("image/jpeg");

        $r11 = new org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        specialinvoke $r11.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void <init>()>();

        virtualinvoke $r11.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setJPEGQuality(float,boolean)>(f1, 1);

        $r12 = r3.<org.apache.batik.transcoder.SVGAbstractTranscoder: org.apache.batik.bridge.UserAgent userAgent>;

        $f0 = interfaceinvoke $r12.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        $d0 = (double) $f0;

        $d1 = 25.4 / $d0;

        $d2 = $d1 + 0.5;

        $i0 = (int) $d2;

        virtualinvoke $r11.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: void setResolution(int)>($i0);

        interfaceinvoke $r10.<org.apache.batik.ext.awt.image.spi.ImageWriter: void writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>(r13, $r2, $r11);

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r21.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r20);

        throw $r21;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        org.apache.batik.transcoder.image.JPEGTranscoder$QualityKey $r0;

        $r0 = new org.apache.batik.transcoder.image.JPEGTranscoder$QualityKey;

        specialinvoke $r0.<org.apache.batik.transcoder.image.JPEGTranscoder$QualityKey: void <init>(org.apache.batik.transcoder.image.JPEGTranscoder$1)>(null);

        <org.apache.batik.transcoder.image.JPEGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_QUALITY> = $r0;

        return;
    }
}
