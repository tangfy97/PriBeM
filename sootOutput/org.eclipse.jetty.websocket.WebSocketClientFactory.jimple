public class org.eclipse.jetty.websocket.WebSocketClientFactory extends org.eclipse.jetty.util.component.AggregateLifeCycle
{
    private static final org.eclipse.jetty.util.log.Logger __log;
    private static final org.eclipse.jetty.io.ByteArrayBuffer __ACCEPT;
    private final java.util.Queue connections;
    private final org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory;
    private final org.eclipse.jetty.util.thread.ThreadPool _threadPool;
    private final org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector _selector;
    private org.eclipse.jetty.websocket.MaskGen _maskGen;
    private org.eclipse.jetty.websocket.WebSocketBuffers _buffers;

    public void <init>()
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        specialinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: void <init>(org.eclipse.jetty.util.thread.ThreadPool)>(null);

        return;
    }

    public void <init>(org.eclipse.jetty.util.thread.ThreadPool)
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.websocket.RandomMaskGen $r2;
        org.eclipse.jetty.util.thread.ThreadPool r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r1 := @parameter0: org.eclipse.jetty.util.thread.ThreadPool;

        $r2 = new org.eclipse.jetty.websocket.RandomMaskGen;

        specialinvoke $r2.<org.eclipse.jetty.websocket.RandomMaskGen: void <init>()>();

        specialinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: void <init>(org.eclipse.jetty.util.thread.ThreadPool,org.eclipse.jetty.websocket.MaskGen)>(r1, $r2);

        return;
    }

    public void <init>(org.eclipse.jetty.util.thread.ThreadPool, org.eclipse.jetty.websocket.MaskGen)
    {
        org.eclipse.jetty.websocket.MaskGen r2;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.util.thread.ThreadPool r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r1 := @parameter0: org.eclipse.jetty.util.thread.ThreadPool;

        r2 := @parameter1: org.eclipse.jetty.websocket.MaskGen;

        specialinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: void <init>(org.eclipse.jetty.util.thread.ThreadPool,org.eclipse.jetty.websocket.MaskGen,int)>(r1, r2, 8192);

        return;
    }

    public void <init>(org.eclipse.jetty.util.thread.ThreadPool, org.eclipse.jetty.websocket.MaskGen, int)
    {
        org.eclipse.jetty.websocket.WebSocketBuffers $r4, $r5;
        org.eclipse.jetty.websocket.MaskGen r6, $r7;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2, $r10;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.util.thread.ThreadPool $r3, r12;
        org.eclipse.jetty.util.thread.QueuedThreadPool $r11;
        int i0;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector $r8, $r9;
        java.util.concurrent.ConcurrentLinkedQueue $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r12 := @parameter0: org.eclipse.jetty.util.thread.ThreadPool;

        r6 := @parameter1: org.eclipse.jetty.websocket.MaskGen;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.util.Queue connections> = $r1;

        $r2 = new org.eclipse.jetty.util.ssl.SslContextFactory;

        specialinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory> = $r2;

        if r12 != null goto label1;

        $r11 = new org.eclipse.jetty.util.thread.QueuedThreadPool;

        specialinvoke $r11.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>()>();

        r12 = $r11;

     label1:
        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.thread.ThreadPool _threadPool> = r12;

        $r3 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r3);

        $r4 = new org.eclipse.jetty.websocket.WebSocketBuffers;

        specialinvoke $r4.<org.eclipse.jetty.websocket.WebSocketBuffers: void <init>(int)>(i0);

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers> = $r4;

        $r5 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r5);

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen _maskGen> = r6;

        $r7 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen _maskGen>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r7);

        $r8 = new org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector;

        specialinvoke $r8.<org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector: void <init>(org.eclipse.jetty.websocket.WebSocketClientFactory)>(r0);

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector _selector> = $r8;

        $r9 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector _selector>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r9);

        $r10 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r10);

        return;
    }

    public org.eclipse.jetty.util.ssl.SslContextFactory getSslContextFactory()
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.util.ssl.SslContextFactory $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        return $r1;
    }

    public org.eclipse.jetty.io.nio.SelectorManager getSelectorManager()
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketClientFactory$WebSocketClientSelector _selector>;

        return $r1;
    }

    public org.eclipse.jetty.util.thread.ThreadPool getThreadPool()
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.util.thread.ThreadPool $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        return $r1;
    }

    public org.eclipse.jetty.websocket.MaskGen getMaskGen()
    {
        org.eclipse.jetty.websocket.MaskGen $r1;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen _maskGen>;

        return $r1;
    }

    public void setMaskGen(org.eclipse.jetty.websocket.MaskGen)
    {
        java.lang.IllegalStateException $r3;
        org.eclipse.jetty.websocket.MaskGen $r1, r2;
        java.lang.String $r4;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r2 := @parameter0: org.eclipse.jetty.websocket.MaskGen;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.lang.String getState()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen _maskGen>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean removeBean(java.lang.Object)>($r1);

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen _maskGen> = r2;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>(r2);

        return;
    }

    public void setBufferSize(int)
    {
        org.eclipse.jetty.websocket.WebSocketBuffers $r1, $r2, $r3;
        java.lang.IllegalStateException $r4;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        int i0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.lang.String getState()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean removeBean(java.lang.Object)>($r1);

        $r2 = new org.eclipse.jetty.websocket.WebSocketBuffers;

        specialinvoke $r2.<org.eclipse.jetty.websocket.WebSocketBuffers: void <init>(int)>(i0);

        r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers> = $r2;

        $r3 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers>;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean addBean(java.lang.Object)>($r3);

        return;
    }

    public int getBufferSize()
    {
        org.eclipse.jetty.websocket.WebSocketBuffers $r1;
        int $i0;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers>;

        $i0 = virtualinvoke $r1.<org.eclipse.jetty.websocket.WebSocketBuffers: int getBufferSize()>();

        return $i0;
    }

    protected void doStop() throws java.lang.Exception
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: void closeConnections()>();

        specialinvoke r0.<org.eclipse.jetty.util.component.AggregateLifeCycle: void doStop()>();

        return;
    }

    public org.eclipse.jetty.websocket.WebSocketClient newWebSocketClient()
    {
        org.eclipse.jetty.websocket.WebSocketClient $r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory r1;

        r1 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r0 = new org.eclipse.jetty.websocket.WebSocketClient;

        specialinvoke $r0.<org.eclipse.jetty.websocket.WebSocketClient: void <init>(org.eclipse.jetty.websocket.WebSocketClientFactory)>(r1);

        return $r0;
    }

    protected javax.net.ssl.SSLEngine newSslEngine(java.nio.channels.SocketChannel) throws java.io.IOException
    {
        java.net.Socket $r3, $r6;
        org.eclipse.jetty.util.ssl.SslContextFactory $r2, $r7;
        org.eclipse.jetty.websocket.WebSocketClientFactory r1;
        javax.net.ssl.SSLEngine r8;
        java.net.InetAddress $r4;
        java.nio.channels.SocketChannel r0;
        int $i0;
        java.lang.String $r5;

        r1 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r0 := @parameter0: java.nio.channels.SocketChannel;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r4 = virtualinvoke $r3.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6 = virtualinvoke r0.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $i0 = virtualinvoke $r6.<java.net.Socket: int getPort()>();

        $r7 = r1.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        r8 = virtualinvoke $r7.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine(java.lang.String,int)>($r5, $i0);

        goto label2;

     label1:
        $r2 = r1.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.ssl.SslContextFactory _sslContextFactory>;

        r8 = virtualinvoke $r2.<org.eclipse.jetty.util.ssl.SslContextFactory: javax.net.ssl.SSLEngine newSslEngine()>();

     label2:
        virtualinvoke r8.<javax.net.ssl.SSLEngine: void setUseClientMode(boolean)>(1);

        virtualinvoke r8.<javax.net.ssl.SSLEngine: void beginHandshake()>();

        return r8;
    }

    protected boolean addConnection(org.eclipse.jetty.websocket.WebSocketConnection)
    {
        org.eclipse.jetty.websocket.WebSocketConnection r1;
        java.util.Queue $r2;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r1 := @parameter0: org.eclipse.jetty.websocket.WebSocketConnection;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.util.Queue connections>;

        $z1 = interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected boolean removeConnection(org.eclipse.jetty.websocket.WebSocketConnection)
    {
        org.eclipse.jetty.websocket.WebSocketConnection r1;
        java.util.Queue $r2;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        r1 := @parameter0: org.eclipse.jetty.websocket.WebSocketConnection;

        $r2 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.util.Queue connections>;

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    protected void closeConnections()
    {
        java.util.Iterator $r2;
        org.eclipse.jetty.websocket.WebSocketConnection r4;
        java.lang.Object $r3;
        java.util.Queue $r1;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: java.util.Queue connections>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.eclipse.jetty.websocket.WebSocketConnection) $r3;

        interfaceinvoke r4.<org.eclipse.jetty.websocket.WebSocketConnection: void shutdown()>();

        goto label1;

     label2:
        return;
    }

    static org.eclipse.jetty.util.thread.ThreadPool access$000(org.eclipse.jetty.websocket.WebSocketClientFactory)
    {
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;
        org.eclipse.jetty.util.thread.ThreadPool $r1;

        r0 := @parameter0: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.thread.ThreadPool _threadPool>;

        return $r1;
    }

    static org.eclipse.jetty.util.log.Logger access$100()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.log.Logger __log>;

        return $r0;
    }

    static org.eclipse.jetty.websocket.WebSocketBuffers access$200(org.eclipse.jetty.websocket.WebSocketClientFactory)
    {
        org.eclipse.jetty.websocket.WebSocketBuffers $r1;
        org.eclipse.jetty.websocket.WebSocketClientFactory r0;

        r0 := @parameter0: org.eclipse.jetty.websocket.WebSocketClientFactory;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.WebSocketBuffers _buffers>;

        return $r1;
    }

    static org.eclipse.jetty.io.ByteArrayBuffer access$500()
    {
        org.eclipse.jetty.io.ByteArrayBuffer $r0;

        $r0 = <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.io.ByteArrayBuffer __ACCEPT>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.eclipse.jetty.util.log.Logger $r2;
        org.eclipse.jetty.io.ByteArrayBuffer$CaseInsensitive $r3;

        $r0 = class "Lorg/eclipse/jetty/websocket/WebSocketClientFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)>($r1);

        <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.util.log.Logger __log> = $r2;

        $r3 = new org.eclipse.jetty.io.ByteArrayBuffer$CaseInsensitive;

        specialinvoke $r3.<org.eclipse.jetty.io.ByteArrayBuffer$CaseInsensitive: void <init>(java.lang.String)>("Sec-WebSocket-Accept");

        <org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.io.ByteArrayBuffer __ACCEPT> = $r3;

        return;
    }
}
