public class org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml extends org.waveprotocol.wave.model.document.util.FilteredView implements org.waveprotocol.wave.client.editor.impl.HtmlView, org.waveprotocol.wave.client.editor.content.TransparentManager
{
    private final java.util.List invadingElements;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument, org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;
        java.util.ArrayList $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r2 := @parameter1: org.waveprotocol.wave.model.document.ReadableDocument;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.util.List invadingElements> = $r3;

        return;
    }

    protected org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r7;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r1, $r6, $r10, $r11;
        boolean $z0, $z1, $z2;
        com.google.gwt.core.client.JavaScriptObject $r2, $r4;
        com.google.gwt.dom.client.Element $r3, r5, $r9;
        java.lang.Object $r8;
        com.google.gwt.dom.client.Node r0, $r12;

        r7 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r3 = (com.google.gwt.dom.client.Element) $r2;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean hasBackReference(com.google.gwt.dom.client.Element)>($r3);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip NONE>;

        return $r1;

     label2:
        $r4 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r5 = (com.google.gwt.dom.client.Element) $r4;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.FilteredView$Skip getTransparency(com.google.gwt.dom.client.Element)>(r5);

        if $r6 != null goto label4;

        $r8 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.lang.Object getDocumentElement()>();

        $r9 = (com.google.gwt.dom.client.Element) $r8;

        $r12 = (com.google.gwt.dom.client.Node) r5;

        $z2 = virtualinvoke $r9.<com.google.gwt.dom.client.Element: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r12);

        if $z2 != 0 goto label3;

        $r10 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip INVALID>;

        return $r10;

     label3:
        specialinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: void register(com.google.gwt.dom.client.Element)>(r5);

     label4:
        if $r6 != null goto label5;

        $r11 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip SHALLOW>;

        goto label6;

     label5:
        $r11 = $r6;

     label6:
        return $r11;
    }

    protected com.google.gwt.dom.client.Node getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Node, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r15, r20;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r9, $r13;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent $r10;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException $r17;
        com.google.gwt.dom.client.Element $r7, r19;
        java.lang.AssertionError $r22;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r1;
        int i0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r11;
        java.lang.String $r6;
        com.google.gwt.core.client.JavaScriptObject $r5, $r8;
        java.lang.Object $r3, $r12, r18;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r14;
        com.google.gwt.dom.client.Node r0, $r4, $r21, $r23, $r24, $r25;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: com.google.gwt.dom.client.Node;

        r18 := @parameter2: com.google.gwt.dom.client.Node;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z0 != 0 goto label11;

        $r5 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r7 = (com.google.gwt.dom.client.Element) $r5;

        $r6 = <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String COMPLEX_IMPLEMENTATION_MARKER>;

        $z3 = virtualinvoke $r7.<com.google.gwt.dom.client.Element: boolean getPropertyBoolean(java.lang.String)>($r6);

        if $z3 == 0 goto label11;

        $r8 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r19 = (com.google.gwt.dom.client.Element) $r8;

     label01:
        $z4 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean hasBackReference(com.google.gwt.dom.client.Element)>(r19);

        if $z4 != 0 goto label02;

        r19 = virtualinvoke r19.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        goto label01;

     label02:
        $z5 = <org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: boolean $assertionsDisabled>;

        if $z5 != 0 goto label03;

        if r0 == r18 goto label03;

        $r23 = (com.google.gwt.dom.client.Node) r18;

        $z6 = virtualinvoke r0.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r23);

        if $z6 == 0 goto label03;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label03:
        r20 = null;

        i0 = 1;

     label04:
        if i0 > 3 goto label08;

     label05:
        $r13 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r14 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager access$500(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r13);

        $r24 = (com.google.gwt.dom.client.Node) r18;

        r20 = virtualinvoke $r14.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode findNodeWrapper(com.google.gwt.dom.client.Node)>($r24);

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        $r25 = (com.google.gwt.dom.client.Node) r18;

        r18 = virtualinvoke $r25.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        i0 = i0 + 1;

        goto label04;

     label08:
        $r9 = r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent access$2100(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r9);

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>(r19);

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>($r10, $r11, r20, z1, z2);

        $r15 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r12;

        if $r15 == null goto label09;

        $r21 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        goto label10;

     label09:
        $r21 = null;

     label10:
        return $r21;

     label11:
        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.document.util.FilteredView: java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean,boolean)>(r2, r0, r18, z1, z2);

        $r4 = (com.google.gwt.dom.client.Node) $r3;

        return $r4;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException from label05 to label06 with label07;
    }

    public com.google.gwt.dom.client.Element needToSplit(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, r3;
        com.google.gwt.core.client.JavaScriptObject $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r4;
        com.google.gwt.dom.client.Node $r1;

        r4 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node cloneNode(boolean)>(0);

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r3 = (com.google.gwt.dom.client.Element) $r2;

        specialinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: void register(com.google.gwt.dom.client.Element)>(r3);

        return r3;
    }

    public void clearInvadingElements()
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.util.List invadingElements>;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.TransparencyUtil: void clear(java.util.List)>($r1);

        return;
    }

    public void forgetInvadingElements()
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.util.List invadingElements>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.util.List getInvadingElements()
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.util.List invadingElements>;

        return $r1;
    }

    private void register(com.google.gwt.dom.client.Element)
    {
        java.util.List $r3;
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r2;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip SHALLOW>;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setTransparency(com.google.gwt.dom.client.Element,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>(r0, $r1);

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setTransparentBackref(com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.TransparentManager)>(r0, r2);

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: java.util.List invadingElements>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    protected volatile java.lang.Object getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, boolean, boolean)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;
        java.lang.Object r2, r3;
        com.google.gwt.dom.client.Node $r4, $r5, $r6;
        boolean z0, z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r5 = (com.google.gwt.dom.client.Node) r2;

        $r4 = (com.google.gwt.dom.client.Node) r3;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: com.google.gwt.dom.client.Node getNextOrPrevNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node,boolean,boolean)>(r1, $r5, $r4, z0, z1);

        return $r6;
    }

    protected volatile org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;
        com.google.gwt.dom.client.Node $r2;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.gwt.dom.client.Node) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(com.google.gwt.dom.client.Node)>($r2);

        return $r3;
    }

    public volatile java.lang.Object needToSplit(java.lang.Object)
    {
        com.google.gwt.dom.client.Element $r2, $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.gwt.dom.client.Element) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: com.google.gwt.dom.client.Element needToSplit(com.google.gwt.dom.client.Element)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentDocument;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml: boolean $assertionsDisabled> = $z1;

        return;
    }
}
