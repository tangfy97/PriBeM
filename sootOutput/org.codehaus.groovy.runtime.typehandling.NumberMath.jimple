public abstract class org.codehaus.groovy.runtime.typehandling.NumberMath extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Number abs(java.lang.Number)
    {
        java.lang.Number r0, $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath $r1;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number absImpl(java.lang.Number)>(r0);

        return $r2;
    }

    public static java.lang.Number add(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number addImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number subtract(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number subtractImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number multiply(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number multiplyImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number divide(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number divideImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static int compareTo(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        int $i0;
        java.lang.Number r0, r1;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $i0 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: int compareToImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $i0;
    }

    public static java.lang.Number or(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number orImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number and(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number andImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number xor(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number xorImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number intdiv(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number intdivImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number mod(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r2;
        java.lang.Number r0, r1, $r3;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number,java.lang.Number)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number modImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    public static java.lang.Number leftShift(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r12;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.Number r0, r11, $r13;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r1;
        java.lang.Class $r6;

        r11 := @parameter0: java.lang.Number;

        r0 := @parameter1: java.lang.Number;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Shift distance must be an integral type, but ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") was supplied");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)>(r11);

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number leftShiftImpl(java.lang.Number,java.lang.Number)>(r11, r0);

        return $r13;
    }

    public static java.lang.Number rightShift(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r12;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.Number r0, r11, $r13;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r1;
        java.lang.Class $r6;

        r11 := @parameter0: java.lang.Number;

        r0 := @parameter1: java.lang.Number;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Shift distance must be an integral type, but ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") was supplied");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)>(r11);

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number rightShiftImpl(java.lang.Number,java.lang.Number)>(r11, r0);

        return $r13;
    }

    public static java.lang.Number rightShiftUnsigned(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.NumberMath $r12;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;
        java.lang.Number r0, r11, $r13;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r1;
        java.lang.Class $r6;

        r11 := @parameter0: java.lang.Number;

        r0 := @parameter1: java.lang.Number;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Shift distance must be an integral type, but ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") was supplied");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)>(r11);

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number rightShiftUnsignedImpl(java.lang.Number,java.lang.Number)>(r11, r0);

        return $r13;
    }

    public static java.lang.Number unaryMinus(java.lang.Number)
    {
        java.lang.Number r0, $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath $r1;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.Number unaryMinusImpl(java.lang.Number)>(r0);

        return $r2;
    }

    public static boolean isFloatingPoint(java.lang.Number)
    {
        java.lang.Number r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.lang.Double;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Float;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isInteger(java.lang.Number)
    {
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.lang.Integer;

        return $z0;
    }

    public static boolean isLong(java.lang.Number)
    {
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.lang.Long;

        return $z0;
    }

    public static boolean isBigDecimal(java.lang.Number)
    {
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigDecimal;

        return $z0;
    }

    public static boolean isBigInteger(java.lang.Number)
    {
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigInteger;

        return $z0;
    }

    public static java.math.BigDecimal toBigDecimal(java.lang.Number)
    {
        java.math.BigDecimal $r2;
        java.lang.String $r1;
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r2 = (java.math.BigDecimal) r0;

        goto label2;

     label1:
        $r2 = new java.math.BigDecimal;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label2:
        return $r2;
    }

    public static java.math.BigInteger toBigInteger(java.lang.Number)
    {
        java.math.BigInteger $r2;
        java.lang.String $r1;
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $r2 = (java.math.BigInteger) r0;

        goto label2;

     label1:
        $r2 = new java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.math.BigInteger: void <init>(java.lang.String)>($r1);

     label2:
        return $r2;
    }

    private static org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.FloatingPointMath $r1;
        org.codehaus.groovy.runtime.typehandling.IntegerMath $r6;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath $r4;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r3;
        org.codehaus.groovy.runtime.typehandling.LongMath $r5;
        java.lang.Number r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r2);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.codehaus.groovy.runtime.typehandling.FloatingPointMath: org.codehaus.groovy.runtime.typehandling.FloatingPointMath INSTANCE>;

        return $r1;

     label2:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r0);

        if $z2 != 0 goto label3;

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r2);

        if $z3 == 0 goto label4;

     label3:
        $r3 = <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE>;

        return $r3;

     label4:
        $z4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigInteger(java.lang.Number)>(r0);

        if $z4 != 0 goto label5;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigInteger(java.lang.Number)>(r2);

        if $z5 == 0 goto label6;

     label5:
        $r4 = <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: org.codehaus.groovy.runtime.typehandling.BigIntegerMath INSTANCE>;

        return $r4;

     label6:
        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isLong(java.lang.Number)>(r0);

        if $z6 != 0 goto label7;

        $z7 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isLong(java.lang.Number)>(r2);

        if $z7 == 0 goto label8;

     label7:
        $r5 = <org.codehaus.groovy.runtime.typehandling.LongMath: org.codehaus.groovy.runtime.typehandling.LongMath INSTANCE>;

        return $r5;

     label8:
        $r6 = <org.codehaus.groovy.runtime.typehandling.IntegerMath: org.codehaus.groovy.runtime.typehandling.IntegerMath INSTANCE>;

        return $r6;
    }

    private static org.codehaus.groovy.runtime.typehandling.NumberMath getMath(java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.FloatingPointMath $r4;
        org.codehaus.groovy.runtime.typehandling.IntegerMath $r1;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath $r2;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r3;
        org.codehaus.groovy.runtime.typehandling.LongMath $r5;
        java.lang.Number r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Number;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isLong(java.lang.Number)>(r0);

        if $z0 == 0 goto label1;

        $r5 = <org.codehaus.groovy.runtime.typehandling.LongMath: org.codehaus.groovy.runtime.typehandling.LongMath INSTANCE>;

        return $r5;

     label1:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isFloatingPoint(java.lang.Number)>(r0);

        if $z1 == 0 goto label2;

        $r4 = <org.codehaus.groovy.runtime.typehandling.FloatingPointMath: org.codehaus.groovy.runtime.typehandling.FloatingPointMath INSTANCE>;

        return $r4;

     label2:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigDecimal(java.lang.Number)>(r0);

        if $z2 == 0 goto label3;

        $r3 = <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE>;

        return $r3;

     label3:
        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.NumberMath: boolean isBigInteger(java.lang.Number)>(r0);

        if $z3 == 0 goto label4;

        $r2 = <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: org.codehaus.groovy.runtime.typehandling.BigIntegerMath INSTANCE>;

        return $r2;

     label4:
        $r1 = <org.codehaus.groovy.runtime.typehandling.IntegerMath: org.codehaus.groovy.runtime.typehandling.IntegerMath INSTANCE>;

        return $r1;
    }

    protected abstract java.lang.Number absImpl(java.lang.Number);

    protected abstract java.lang.Number addImpl(java.lang.Number, java.lang.Number);

    protected abstract java.lang.Number subtractImpl(java.lang.Number, java.lang.Number);

    protected abstract java.lang.Number multiplyImpl(java.lang.Number, java.lang.Number);

    protected abstract java.lang.Number divideImpl(java.lang.Number, java.lang.Number);

    protected abstract int compareToImpl(java.lang.Number, java.lang.Number);

    protected abstract java.lang.Number unaryMinusImpl(java.lang.Number);

    protected java.lang.Number orImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("or()", r1);

        throw $r2;
    }

    protected java.lang.Number andImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("and()", r1);

        throw $r2;
    }

    protected java.lang.Number xorImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("xor()", r1);

        throw $r2;
    }

    protected java.lang.Number modImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("mod()", r1);

        throw $r2;
    }

    protected java.lang.Number intdivImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("intdiv()", r1);

        throw $r2;
    }

    protected java.lang.Number leftShiftImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("leftShift()", r1);

        throw $r2;
    }

    protected java.lang.Number rightShiftImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("rightShift()", r1);

        throw $r2;
    }

    protected java.lang.Number rightShiftUnsignedImpl(java.lang.Number, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r2;
        org.codehaus.groovy.runtime.typehandling.NumberMath r0;
        java.lang.Number r1, r3;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r1 := @parameter0: java.lang.Number;

        r3 := @parameter1: java.lang.Number;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String,java.lang.Number)>("rightShiftUnsigned()", r1);

        throw $r2;
    }

    protected java.lang.UnsupportedOperationException createUnsupportedException(java.lang.String, java.lang.Number)
    {
        java.lang.UnsupportedOperationException $r0;
        org.codehaus.groovy.runtime.typehandling.NumberMath r13;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r9, $r10, $r11;
        java.lang.Class $r7;
        java.lang.String r3, $r8, $r12;
        java.lang.Number r6;

        r13 := @this: org.codehaus.groovy.runtime.typehandling.NumberMath;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Number;

        $r0 = new java.lang.UnsupportedOperationException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot use ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on this number type: ");

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with value: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        return $r0;
    }
}
