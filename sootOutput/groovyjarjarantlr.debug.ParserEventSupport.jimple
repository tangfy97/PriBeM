public class groovyjarjarantlr.debug.ParserEventSupport extends java.lang.Object
{
    private java.lang.Object source;
    private java.util.Hashtable doneListeners;
    private java.util.Vector matchListeners;
    private java.util.Vector messageListeners;
    private java.util.Vector tokenListeners;
    private java.util.Vector traceListeners;
    private java.util.Vector semPredListeners;
    private java.util.Vector synPredListeners;
    private java.util.Vector newLineListeners;
    private groovyjarjarantlr.debug.ParserMatchEvent matchEvent;
    private groovyjarjarantlr.debug.MessageEvent messageEvent;
    private groovyjarjarantlr.debug.ParserTokenEvent tokenEvent;
    private groovyjarjarantlr.debug.SemanticPredicateEvent semPredEvent;
    private groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent;
    private groovyjarjarantlr.debug.TraceEvent traceEvent;
    private groovyjarjarantlr.debug.NewLineEvent newLineEvent;
    private groovyjarjarantlr.debug.ParserController controller;
    protected static final int CONSUME;
    protected static final int ENTER_RULE;
    protected static final int EXIT_RULE;
    protected static final int LA;
    protected static final int MATCH;
    protected static final int MATCH_NOT;
    protected static final int MISMATCH;
    protected static final int MISMATCH_NOT;
    protected static final int REPORT_ERROR;
    protected static final int REPORT_WARNING;
    protected static final int SEMPRED;
    protected static final int SYNPRED_FAILED;
    protected static final int SYNPRED_STARTED;
    protected static final int SYNPRED_SUCCEEDED;
    protected static final int NEW_LINE;
    protected static final int DONE_PARSING;
    private int ruleDepth;

    public void <init>(java.lang.Object)
    {
        groovyjarjarantlr.debug.SyntacticPredicateEvent $r7;
        groovyjarjarantlr.debug.ParserTokenEvent $r4;
        groovyjarjarantlr.debug.SemanticPredicateEvent $r6;
        groovyjarjarantlr.debug.TraceEvent $r5;
        groovyjarjarantlr.debug.NewLineEvent $r8;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.Object r2;
        groovyjarjarantlr.debug.MessageEvent $r3;
        groovyjarjarantlr.debug.ParserMatchEvent $r1;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth> = 0;

        $r1 = new groovyjarjarantlr.debug.ParserMatchEvent;

        specialinvoke $r1.<groovyjarjarantlr.debug.ParserMatchEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent> = $r1;

        $r3 = new groovyjarjarantlr.debug.MessageEvent;

        specialinvoke $r3.<groovyjarjarantlr.debug.MessageEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent> = $r3;

        $r4 = new groovyjarjarantlr.debug.ParserTokenEvent;

        specialinvoke $r4.<groovyjarjarantlr.debug.ParserTokenEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserTokenEvent tokenEvent> = $r4;

        $r5 = new groovyjarjarantlr.debug.TraceEvent;

        specialinvoke $r5.<groovyjarjarantlr.debug.TraceEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent> = $r5;

        $r6 = new groovyjarjarantlr.debug.SemanticPredicateEvent;

        specialinvoke $r6.<groovyjarjarantlr.debug.SemanticPredicateEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SemanticPredicateEvent semPredEvent> = $r6;

        $r7 = new groovyjarjarantlr.debug.SyntacticPredicateEvent;

        specialinvoke $r7.<groovyjarjarantlr.debug.SyntacticPredicateEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent> = $r7;

        $r8 = new groovyjarjarantlr.debug.NewLineEvent;

        specialinvoke $r8.<groovyjarjarantlr.debug.NewLineEvent: void <init>(java.lang.Object)>(r2);

        r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.NewLineEvent newLineEvent> = $r8;

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.lang.Object source> = r2;

        return;
    }

    public void addDoneListener(groovyjarjarantlr.debug.ListenerBase)
    {
        java.lang.Integer $r5, $r8;
        groovyjarjarantlr.debug.ListenerBase r2;
        int $i0, i1;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.Object $r4;
        java.util.Hashtable $r1, $r3, $r6, $r7;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ListenerBase;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        if $r1 != null goto label1;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners> = $r7;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (java.lang.Integer) $r4;

        if $r8 == null goto label2;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        i1 = $i0 + 1;

        goto label3;

     label2:
        i1 = 1;

     label3:
        $r6 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

        return;
    }

    public void addMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.MessageListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addNewLineListener(groovyjarjarantlr.debug.NewLineListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.NewLineListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.NewLineListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserController $r2, $r3;
        groovyjarjarantlr.debug.ParserEventSupport r1;
        groovyjarjarantlr.debug.ParserListener r0;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r0 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $z0 = r0 instanceof groovyjarjarantlr.debug.ParserController;

        if $z0 == 0 goto label1;

        $r2 = (groovyjarjarantlr.debug.ParserController) r0;

        interfaceinvoke $r2.<groovyjarjarantlr.debug.ParserController: void setParserEventSupport(groovyjarjarantlr.debug.ParserEventSupport)>(r1);

        $r3 = (groovyjarjarantlr.debug.ParserController) r0;

        r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserController controller> = $r3;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r0);

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r0);

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addMessageListener(groovyjarjarantlr.debug.MessageListener)>(r0);

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addTraceListener(groovyjarjarantlr.debug.TraceListener)>(r0);

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r0);

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r0);

        return;
    }

    public void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.ParserMatchListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserTokenListener r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.SemanticPredicateListener r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r2;
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void addTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        java.util.Vector $r1, $r3, $r4;
        groovyjarjarantlr.debug.TraceListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        if $r1 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners> = $r4;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void addDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void fireConsume(int)
    {
        java.util.Vector $r2;
        int i0, $i1;
        groovyjarjarantlr.debug.ParserTokenEvent $r1;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserTokenEvent tokenEvent>;

        $i1 = <groovyjarjarantlr.debug.ParserTokenEvent: int CONSUME>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserTokenEvent: void setValues(int,int,int)>($i1, 1, i0);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(0, $r2);

        return;
    }

    public void fireDoneParsing()
    {
        java.lang.Throwable $r9;
        groovyjarjarantlr.debug.ParserController $r5, $r6;
        java.util.Enumeration $r7;
        groovyjarjarantlr.debug.TraceEvent $r1;
        groovyjarjarantlr.debug.ListenerBase r11;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.Object $r4, $r8;
        java.util.Hashtable $r2, $r3, r10;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        $i0 = <groovyjarjarantlr.debug.TraceEvent: int DONE_PARSING>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.TraceEvent: void setValues(int,int,int,int)>($i0, 0, 0, 0);

        entermonitor r0;

     label01:
        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        if $r2 != null goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object clone()>();

        r10 = (java.util.Hashtable) $r4;

        exitmonitor r0;

     label04:
        goto label07;

     label05:
        $r9 := @caughtexception;

        exitmonitor r0;

     label06:
        throw $r9;

     label07:
        if r10 == null goto label09;

        $r7 = virtualinvoke r10.<java.util.Hashtable: java.util.Enumeration keys()>();

     label08:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label09;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r11 = (groovyjarjarantlr.debug.ListenerBase) $r8;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvent(int,groovyjarjarantlr.debug.ListenerBase)>(15, r11);

        goto label08;

     label09:
        $r5 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserController controller>;

        if $r5 == null goto label10;

        $r6 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserController controller>;

        interfaceinvoke $r6.<groovyjarjarantlr.debug.ParserController: void checkBreak()>();

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public void fireEnterRule(int, int, int)
    {
        groovyjarjarantlr.debug.TraceEvent $r1;
        java.util.Vector $r2;
        int $i0, $i1, i2, i3, i4, $i5;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        $i0 = r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth> = $i1;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        $i5 = <groovyjarjarantlr.debug.TraceEvent: int ENTER>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.TraceEvent: void setValues(int,int,int,int)>($i5, i2, i3, i4);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(1, $r2);

        return;
    }

    public void fireEvent(int, groovyjarjarantlr.debug.ListenerBase)
    {
        groovyjarjarantlr.debug.SyntacticPredicateEvent $r5, $r7, $r9;
        groovyjarjarantlr.debug.SyntacticPredicateListener $r6, $r8, $r10;
        groovyjarjarantlr.debug.MessageListener $r14, $r16;
        groovyjarjarantlr.debug.ParserEventSupport r1;
        groovyjarjarantlr.debug.SemanticPredicateListener $r12;
        groovyjarjarantlr.debug.MessageEvent $r13, $r15;
        groovyjarjarantlr.debug.ParserTokenListener $r26, $r32;
        groovyjarjarantlr.debug.TraceEvent $r2, $r27, $r29;
        groovyjarjarantlr.debug.TraceListener $r28, $r30;
        groovyjarjarantlr.debug.ParserTokenEvent $r25, $r31;
        groovyjarjarantlr.debug.NewLineEvent $r3;
        java.lang.StringBuffer $r34, $r35, $r36, $r37;
        int i0;
        java.lang.String $r38;
        groovyjarjarantlr.debug.ParserMatchEvent $r17, $r19, $r21, $r23;
        groovyjarjarantlr.debug.ParserMatchListener $r18, $r20, $r22, $r24;
        java.lang.IllegalArgumentException $r33;
        groovyjarjarantlr.debug.SemanticPredicateEvent $r11;
        groovyjarjarantlr.debug.ListenerBase r0;
        groovyjarjarantlr.debug.NewLineListener $r4;

        r1 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.debug.ListenerBase;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label02;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label13;
            case 9: goto label14;
            case 10: goto label09;
            case 11: goto label11;
            case 12: goto label10;
            case 13: goto label12;
            case 14: goto label16;
            case 15: goto label15;
            default: goto label17;
        };

     label01:
        $r32 = (groovyjarjarantlr.debug.ParserTokenListener) r0;

        $r31 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserTokenEvent tokenEvent>;

        interfaceinvoke $r32.<groovyjarjarantlr.debug.ParserTokenListener: void parserConsume(groovyjarjarantlr.debug.ParserTokenEvent)>($r31);

        goto label18;

     label02:
        $r26 = (groovyjarjarantlr.debug.ParserTokenListener) r0;

        $r25 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserTokenEvent tokenEvent>;

        interfaceinvoke $r26.<groovyjarjarantlr.debug.ParserTokenListener: void parserLA(groovyjarjarantlr.debug.ParserTokenEvent)>($r25);

        goto label18;

     label03:
        $r30 = (groovyjarjarantlr.debug.TraceListener) r0;

        $r29 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        interfaceinvoke $r30.<groovyjarjarantlr.debug.TraceListener: void enterRule(groovyjarjarantlr.debug.TraceEvent)>($r29);

        goto label18;

     label04:
        $r28 = (groovyjarjarantlr.debug.TraceListener) r0;

        $r27 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        interfaceinvoke $r28.<groovyjarjarantlr.debug.TraceListener: void exitRule(groovyjarjarantlr.debug.TraceEvent)>($r27);

        goto label18;

     label05:
        $r24 = (groovyjarjarantlr.debug.ParserMatchListener) r0;

        $r23 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        interfaceinvoke $r24.<groovyjarjarantlr.debug.ParserMatchListener: void parserMatch(groovyjarjarantlr.debug.ParserMatchEvent)>($r23);

        goto label18;

     label06:
        $r22 = (groovyjarjarantlr.debug.ParserMatchListener) r0;

        $r21 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        interfaceinvoke $r22.<groovyjarjarantlr.debug.ParserMatchListener: void parserMatchNot(groovyjarjarantlr.debug.ParserMatchEvent)>($r21);

        goto label18;

     label07:
        $r20 = (groovyjarjarantlr.debug.ParserMatchListener) r0;

        $r19 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        interfaceinvoke $r20.<groovyjarjarantlr.debug.ParserMatchListener: void parserMismatch(groovyjarjarantlr.debug.ParserMatchEvent)>($r19);

        goto label18;

     label08:
        $r18 = (groovyjarjarantlr.debug.ParserMatchListener) r0;

        $r17 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        interfaceinvoke $r18.<groovyjarjarantlr.debug.ParserMatchListener: void parserMismatchNot(groovyjarjarantlr.debug.ParserMatchEvent)>($r17);

        goto label18;

     label09:
        $r12 = (groovyjarjarantlr.debug.SemanticPredicateListener) r0;

        $r11 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SemanticPredicateEvent semPredEvent>;

        interfaceinvoke $r12.<groovyjarjarantlr.debug.SemanticPredicateListener: void semanticPredicateEvaluated(groovyjarjarantlr.debug.SemanticPredicateEvent)>($r11);

        goto label18;

     label10:
        $r8 = (groovyjarjarantlr.debug.SyntacticPredicateListener) r0;

        $r7 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        interfaceinvoke $r8.<groovyjarjarantlr.debug.SyntacticPredicateListener: void syntacticPredicateStarted(groovyjarjarantlr.debug.SyntacticPredicateEvent)>($r7);

        goto label18;

     label11:
        $r10 = (groovyjarjarantlr.debug.SyntacticPredicateListener) r0;

        $r9 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        interfaceinvoke $r10.<groovyjarjarantlr.debug.SyntacticPredicateListener: void syntacticPredicateFailed(groovyjarjarantlr.debug.SyntacticPredicateEvent)>($r9);

        goto label18;

     label12:
        $r6 = (groovyjarjarantlr.debug.SyntacticPredicateListener) r0;

        $r5 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        interfaceinvoke $r6.<groovyjarjarantlr.debug.SyntacticPredicateListener: void syntacticPredicateSucceeded(groovyjarjarantlr.debug.SyntacticPredicateEvent)>($r5);

        goto label18;

     label13:
        $r16 = (groovyjarjarantlr.debug.MessageListener) r0;

        $r15 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent>;

        interfaceinvoke $r16.<groovyjarjarantlr.debug.MessageListener: void reportError(groovyjarjarantlr.debug.MessageEvent)>($r15);

        goto label18;

     label14:
        $r14 = (groovyjarjarantlr.debug.MessageListener) r0;

        $r13 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent>;

        interfaceinvoke $r14.<groovyjarjarantlr.debug.MessageListener: void reportWarning(groovyjarjarantlr.debug.MessageEvent)>($r13);

        goto label18;

     label15:
        $r2 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        interfaceinvoke r0.<groovyjarjarantlr.debug.ListenerBase: void doneParsing(groovyjarjarantlr.debug.TraceEvent)>($r2);

        goto label18;

     label16:
        $r4 = (groovyjarjarantlr.debug.NewLineListener) r0;

        $r3 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.NewLineEvent newLineEvent>;

        interfaceinvoke $r4.<groovyjarjarantlr.debug.NewLineListener: void hitNewLine(groovyjarjarantlr.debug.NewLineEvent)>($r3);

        goto label18;

     label17:
        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("bad type ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for fireEvent()");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label18:
        return;
    }

    public void fireEvents(int, java.util.Vector)
    {
        groovyjarjarantlr.debug.ParserController $r2, $r3;
        java.util.Vector r0;
        groovyjarjarantlr.debug.ListenerBase r5;
        int $i0, i1, i2;
        groovyjarjarantlr.debug.ParserEventSupport r1;
        java.lang.Object $r4;

        r1 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i1 := @parameter0: int;

        r0 := @parameter1: java.util.Vector;

        if r0 == null goto label2;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        if i2 >= $i0 goto label2;

        $r4 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r5 = (groovyjarjarantlr.debug.ListenerBase) $r4;

        virtualinvoke r1.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvent(int,groovyjarjarantlr.debug.ListenerBase)>(i1, r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserController controller>;

        if $r2 == null goto label3;

        $r3 = r1.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserController controller>;

        interfaceinvoke $r3.<groovyjarjarantlr.debug.ParserController: void checkBreak()>();

     label3:
        return;
    }

    public void fireExitRule(int, int, int)
    {
        groovyjarjarantlr.debug.TraceEvent $r1;
        java.util.Vector $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.TraceEvent traceEvent>;

        $i3 = <groovyjarjarantlr.debug.TraceEvent: int EXIT>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.TraceEvent: void setValues(int,int,int,int)>($i3, i0, i1, i2);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(2, $r2);

        $i4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth> = $i5;

        $i6 = r0.<groovyjarjarantlr.debug.ParserEventSupport: int ruleDepth>;

        if $i6 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireDoneParsing()>();

     label1:
        return;
    }

    public void fireLA(int, int)
    {
        java.util.Vector $r2;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserTokenEvent $r1;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserTokenEvent tokenEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserTokenEvent: int LA>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.ParserTokenEvent: void setValues(int,int,int)>($i2, i0, i1);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(3, $r2);

        return;
    }

    public void fireMatch(char, int)
    {
        char c0;
        java.util.Vector $r3;
        java.lang.Character $r4;
        int $i1, i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        i2 := @parameter1: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i1 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR>;

        $r4 = new java.lang.Character;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>(c0);

        $i3 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i1, $i3, $r4, null, i2, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r3);

        return;
    }

    public void fireMatch(char, groovyjarjarantlr.collections.impl.BitSet, int)
    {
        char c0;
        groovyjarjarantlr.collections.impl.BitSet r1;
        java.util.Vector $r3;
        int i1, $i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        i1 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR_BITSET>;

        $i3 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i3, r1, null, i1, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r3);

        return;
    }

    public void fireMatch(char, java.lang.String, int)
    {
        char c0;
        java.util.Vector $r3;
        int i1, $i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR_RANGE>;

        $i3 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i3, r1, null, i1, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r3);

        return;
    }

    public void fireMatch(int, groovyjarjarantlr.collections.impl.BitSet, java.lang.String, int)
    {
        groovyjarjarantlr.collections.impl.BitSet r1;
        java.util.Vector $r4;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r2;
        groovyjarjarantlr.debug.ParserMatchEvent $r3;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int BITSET>;

        virtualinvoke $r3.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, i0, r1, r2, i1, 0, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r4);

        return;
    }

    public void fireMatch(int, java.lang.String, int)
    {
        java.lang.Integer $r1;
        java.util.Vector $r4;
        int i0, $i1, i2;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r3;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i1 = <groovyjarjarantlr.debug.ParserMatchEvent: int TOKEN>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i1, i0, $r1, r3, i2, 0, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r4);

        return;
    }

    public void fireMatch(java.lang.String, int)
    {
        java.util.Vector $r3;
        int i0, $i1;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i1 = <groovyjarjarantlr.debug.ParserMatchEvent: int STRING>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i1, 0, r1, null, i0, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(4, $r3);

        return;
    }

    public void fireMatchNot(char, char, int)
    {
        char c0, c1;
        java.util.Vector $r3;
        java.lang.Character $r4;
        int $i2, i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        i3 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR>;

        $r4 = new java.lang.Character;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>(c1);

        $i4 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i4, $r4, null, i3, 1, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(5, $r3);

        return;
    }

    public void fireMatchNot(int, int, java.lang.String, int)
    {
        java.lang.Integer $r1;
        java.util.Vector $r4;
        int i0, i1, $i2, i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r3;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i3 := @parameter3: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int TOKEN>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, i0, $r1, r3, i3, 1, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(5, $r4);

        return;
    }

    public void fireMismatch(char, char, int)
    {
        char c0, c1;
        java.util.Vector $r3;
        java.lang.Character $r4;
        int $i2, i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        i3 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR>;

        $r4 = new java.lang.Character;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>(c1);

        $i4 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i4, $r4, null, i3, 0, 0);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r3);

        return;
    }

    public void fireMismatch(char, groovyjarjarantlr.collections.impl.BitSet, int)
    {
        char c0;
        groovyjarjarantlr.collections.impl.BitSet r1;
        java.util.Vector $r3;
        int i1, $i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        i1 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR_BITSET>;

        $i3 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i3, r1, null, i1, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r3);

        return;
    }

    public void fireMismatch(char, java.lang.String, int)
    {
        char c0;
        java.util.Vector $r3;
        int i1, $i2, $i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR_RANGE>;

        $i3 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i3, r1, null, i1, 0, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r3);

        return;
    }

    public void fireMismatch(int, int, java.lang.String, int)
    {
        java.lang.Integer $r1;
        java.util.Vector $r4;
        int i0, i1, $i2, i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r3;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i3 := @parameter3: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int TOKEN>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, i0, $r1, r3, i3, 0, 0);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r4);

        return;
    }

    public void fireMismatch(int, groovyjarjarantlr.collections.impl.BitSet, java.lang.String, int)
    {
        groovyjarjarantlr.collections.impl.BitSet r1;
        java.util.Vector $r4;
        int i0, i1, $i2;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r2;
        groovyjarjarantlr.debug.ParserMatchEvent $r3;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int BITSET>;

        virtualinvoke $r3.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, i0, r1, r2, i1, 0, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r4);

        return;
    }

    public void fireMismatch(java.lang.String, java.lang.String, int)
    {
        java.util.Vector $r4;
        int i0, $i1;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1, r2;
        groovyjarjarantlr.debug.ParserMatchEvent $r3;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i1 = <groovyjarjarantlr.debug.ParserMatchEvent: int STRING>;

        virtualinvoke $r3.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i1, 0, r1, r2, i0, 0, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(6, $r4);

        return;
    }

    public void fireMismatchNot(char, char, int)
    {
        char c0, c1;
        java.util.Vector $r3;
        java.lang.Character $r4;
        int $i2, i3, $i4;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        i3 := @parameter2: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int CHAR>;

        $r4 = new java.lang.Character;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>(c1);

        $i4 = (int) c0;

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, $i4, $r4, null, i3, 1, 1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(7, $r3);

        return;
    }

    public void fireMismatchNot(int, int, java.lang.String, int)
    {
        java.lang.Integer $r1;
        java.util.Vector $r4;
        int i0, i1, $i2, i3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r3;
        groovyjarjarantlr.debug.ParserMatchEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i3 := @parameter3: int;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.ParserMatchEvent matchEvent>;

        $i2 = <groovyjarjarantlr.debug.ParserMatchEvent: int TOKEN>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r2.<groovyjarjarantlr.debug.ParserMatchEvent: void setValues(int,int,java.lang.Object,java.lang.String,int,boolean,boolean)>($i2, i0, $r1, r3, i3, 1, 1);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(7, $r4);

        return;
    }

    public void fireNewLine(int)
    {
        groovyjarjarantlr.debug.NewLineEvent $r1;
        java.util.Vector $r2;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.NewLineEvent newLineEvent>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.NewLineEvent: void setValues(int)>(i0);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(14, $r2);

        return;
    }

    public void fireReportError(java.lang.Exception)
    {
        java.util.Vector $r4;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String $r3;
        groovyjarjarantlr.debug.MessageEvent $r2;
        java.lang.Exception r1;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent>;

        $i0 = <groovyjarjarantlr.debug.MessageEvent: int ERROR>;

        $r3 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r2.<groovyjarjarantlr.debug.MessageEvent: void setValues(int,java.lang.String)>($i0, $r3);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(8, $r4);

        return;
    }

    public void fireReportError(java.lang.String)
    {
        java.util.Vector $r3;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1;
        groovyjarjarantlr.debug.MessageEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent>;

        $i0 = <groovyjarjarantlr.debug.MessageEvent: int ERROR>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.MessageEvent: void setValues(int,java.lang.String)>($i0, r1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(8, $r3);

        return;
    }

    public void fireReportWarning(java.lang.String)
    {
        java.util.Vector $r3;
        int $i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.String r1;
        groovyjarjarantlr.debug.MessageEvent $r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.MessageEvent messageEvent>;

        $i0 = <groovyjarjarantlr.debug.MessageEvent: int WARNING>;

        virtualinvoke $r2.<groovyjarjarantlr.debug.MessageEvent: void setValues(int,java.lang.String)>($i0, r1);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(9, $r3);

        return;
    }

    public boolean fireSemanticPredicateEvaluated(int, int, boolean, int)
    {
        java.util.Vector $r2;
        int i0, i1, i2;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        boolean z0;
        groovyjarjarantlr.debug.SemanticPredicateEvent $r1;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 := @parameter3: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SemanticPredicateEvent semPredEvent>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.SemanticPredicateEvent: void setValues(int,int,boolean,int)>(i0, i1, z0, i2);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(10, $r2);

        return z0;
    }

    public void fireSyntacticPredicateFailed(int)
    {
        groovyjarjarantlr.debug.SyntacticPredicateEvent $r1;
        java.util.Vector $r2;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.SyntacticPredicateEvent: void setValues(int,int)>(0, i0);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(11, $r2);

        return;
    }

    public void fireSyntacticPredicateStarted(int)
    {
        groovyjarjarantlr.debug.SyntacticPredicateEvent $r1;
        java.util.Vector $r2;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.SyntacticPredicateEvent: void setValues(int,int)>(0, i0);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(12, $r2);

        return;
    }

    public void fireSyntacticPredicateSucceeded(int)
    {
        groovyjarjarantlr.debug.SyntacticPredicateEvent $r1;
        java.util.Vector $r2;
        int i0;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: groovyjarjarantlr.debug.SyntacticPredicateEvent synPredEvent>;

        virtualinvoke $r1.<groovyjarjarantlr.debug.SyntacticPredicateEvent: void setValues(int,int)>(0, i0);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void fireEvents(int,java.util.Vector)>(13, $r2);

        return;
    }

    protected void refresh(java.util.Vector)
    {
        java.lang.Throwable $r5;
        java.util.Vector r0, r2;
        groovyjarjarantlr.debug.ListenerBase $r4;
        int $i0, i1;
        groovyjarjarantlr.debug.ParserEventSupport r6;
        java.lang.Object $r1, $r3;

        r6 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r0 := @parameter0: java.util.Vector;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object clone()>();

        r2 = (java.util.Vector) $r1;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r5;

     label5:
        if r2 == null goto label7;

        i1 = 0;

     label6:
        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        if i1 >= $i0 goto label7;

        $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r4 = (groovyjarjarantlr.debug.ListenerBase) $r3;

        interfaceinvoke $r4.<groovyjarjarantlr.debug.ListenerBase: void refresh()>();

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void refreshListeners()
    {
        java.util.Vector $r1, $r2, $r3, $r4, $r5, $r6;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r1);

        $r2 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r2);

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r3);

        $r4 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r4);

        $r5 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r5);

        $r6 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void refresh(java.util.Vector)>($r6);

        return;
    }

    public void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)
    {
        java.lang.Integer r5, $r6;
        groovyjarjarantlr.debug.ListenerBase r2;
        int $i0, i1;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        java.lang.Object $r4;
        java.util.Hashtable $r1, $r3, $r7, $r8;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ListenerBase;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.Integer) $r4;

        i1 = 0;

        if r5 == null goto label2;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        i1 = $i0 - 1;

     label2:
        if i1 != 0 goto label3;

        $r8 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r2);

        goto label4;

     label3:
        $r7 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Hashtable doneListeners>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i1);

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

     label4:
        return;
    }

    public void removeMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.MessageListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector messageListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeNewLineListener(groovyjarjarantlr.debug.NewLineListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.NewLineListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.NewLineListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector newLineListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserListener r1;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r1 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeMessageListener(groovyjarjarantlr.debug.MessageListener)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeTraceListener(groovyjarjarantlr.debug.TraceListener)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)>(r1);

        return;
    }

    public void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.ParserMatchListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector matchListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.ParserTokenListener r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector tokenListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.ParserEventSupport r0;
        groovyjarjarantlr.debug.SemanticPredicateListener r2;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector semPredListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r2;
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector synPredListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public void removeTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        java.util.Vector $r1, $r3;
        groovyjarjarantlr.debug.TraceListener r2;
        groovyjarjarantlr.debug.ParserEventSupport r0;

        r0 := @this: groovyjarjarantlr.debug.ParserEventSupport;

        r2 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $r1 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.debug.ParserEventSupport: java.util.Vector traceListeners>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>(r2);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.debug.ParserEventSupport: void removeDoneListener(groovyjarjarantlr.debug.ListenerBase)>(r2);

        return;
    }

    public static void <clinit>()
    {
        <groovyjarjarantlr.debug.ParserEventSupport: int DONE_PARSING> = 15;

        <groovyjarjarantlr.debug.ParserEventSupport: int NEW_LINE> = 14;

        <groovyjarjarantlr.debug.ParserEventSupport: int SYNPRED_SUCCEEDED> = 13;

        <groovyjarjarantlr.debug.ParserEventSupport: int SYNPRED_STARTED> = 12;

        <groovyjarjarantlr.debug.ParserEventSupport: int SYNPRED_FAILED> = 11;

        <groovyjarjarantlr.debug.ParserEventSupport: int SEMPRED> = 10;

        <groovyjarjarantlr.debug.ParserEventSupport: int REPORT_WARNING> = 9;

        <groovyjarjarantlr.debug.ParserEventSupport: int REPORT_ERROR> = 8;

        <groovyjarjarantlr.debug.ParserEventSupport: int MISMATCH_NOT> = 7;

        <groovyjarjarantlr.debug.ParserEventSupport: int MISMATCH> = 6;

        <groovyjarjarantlr.debug.ParserEventSupport: int MATCH_NOT> = 5;

        <groovyjarjarantlr.debug.ParserEventSupport: int MATCH> = 4;

        <groovyjarjarantlr.debug.ParserEventSupport: int LA> = 3;

        <groovyjarjarantlr.debug.ParserEventSupport: int EXIT_RULE> = 2;

        <groovyjarjarantlr.debug.ParserEventSupport: int ENTER_RULE> = 1;

        <groovyjarjarantlr.debug.ParserEventSupport: int CONSUME> = 0;

        return;
    }
}
