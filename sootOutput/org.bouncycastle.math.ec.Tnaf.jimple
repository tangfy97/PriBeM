class org.bouncycastle.math.ec.Tnaf extends java.lang.Object
{
    private static final java.math.BigInteger MINUS_ONE;
    private static final java.math.BigInteger MINUS_TWO;
    private static final java.math.BigInteger MINUS_THREE;
    public static final byte WIDTH;
    public static final byte POW_2_WIDTH;
    public static final org.bouncycastle.math.ec.ZTauElement[] alpha0;
    public static final byte[][] alpha0Tnaf;
    public static final org.bouncycastle.math.ec.ZTauElement[] alpha1;
    public static final byte[][] alpha1Tnaf;

    void <init>()
    {
        org.bouncycastle.math.ec.Tnaf r0;

        r0 := @this: org.bouncycastle.math.ec.Tnaf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigInteger norm(byte, org.bouncycastle.math.ec.ZTauElement)
    {
        byte b0;
        int $i1, $i3;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, r14;
        org.bouncycastle.math.ec.ZTauElement r0;
        java.lang.IllegalArgumentException $r15;

        b0 := @parameter0: byte;

        r0 := @parameter1: org.bouncycastle.math.ec.ZTauElement;

        $r2 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r1 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r5 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r4 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r8 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r7 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        if b0 != 1 goto label1;

        $r13 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        r14 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        goto label3;

     label1:
        $i1 = (int) b0;

        $i3 = (int) -1;

        if $i1 != $i3 goto label2;

        $r12 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

        r14 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        goto label3;

     label2:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r15;

     label3:
        return r14;
    }

    public static org.bouncycastle.math.ec.SimpleBigDecimal norm(byte, org.bouncycastle.math.ec.SimpleBigDecimal, org.bouncycastle.math.ec.SimpleBigDecimal)
    {
        java.lang.IllegalArgumentException $r10;
        org.bouncycastle.math.ec.SimpleBigDecimal r0, $r1, r2, $r3, $r4, $r5, $r7, $r8, r9;
        byte b0;
        int $i1, $i3;

        b0 := @parameter0: byte;

        r0 := @parameter1: org.bouncycastle.math.ec.SimpleBigDecimal;

        r2 := @parameter2: org.bouncycastle.math.ec.SimpleBigDecimal;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal multiply(org.bouncycastle.math.ec.SimpleBigDecimal)>(r0);

        $r3 = virtualinvoke r0.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal multiply(org.bouncycastle.math.ec.SimpleBigDecimal)>(r2);

        $r4 = virtualinvoke r2.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal multiply(org.bouncycastle.math.ec.SimpleBigDecimal)>(r2);

        $r5 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal shiftLeft(int)>(1);

        if b0 != 1 goto label1;

        $r8 = virtualinvoke $r1.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r3);

        r9 = virtualinvoke $r8.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        goto label3;

     label1:
        $i1 = (int) b0;

        $i3 = (int) -1;

        if $i1 != $i3 goto label2;

        $r7 = virtualinvoke $r1.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(org.bouncycastle.math.ec.SimpleBigDecimal)>($r3);

        r9 = virtualinvoke $r7.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        goto label3;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r10;

     label3:
        return r9;
    }

    public static org.bouncycastle.math.ec.ZTauElement round(org.bouncycastle.math.ec.SimpleBigDecimal, org.bouncycastle.math.ec.SimpleBigDecimal, byte)
    {
        byte b2, b10, b11;
        java.math.BigInteger $r2, $r3, $r10, $r11, $r12, $r13, $r14, $r20, $r21, $r22, $r23, $r24;
        org.bouncycastle.math.ec.SimpleBigDecimal r0, r1, $r4, $r5, $r6, $r7, $r8, $r9, r17, r18, r19;
        long $l13, $l14;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i15, $i17, $i18, $i19;
        org.bouncycastle.math.ec.ZTauElement $r28;
        java.lang.IllegalArgumentException $r26, $r27;

        r0 := @parameter0: org.bouncycastle.math.ec.SimpleBigDecimal;

        r1 := @parameter1: org.bouncycastle.math.ec.SimpleBigDecimal;

        b2 := @parameter2: byte;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.SimpleBigDecimal: int getScale()>();

        $i1 = virtualinvoke r1.<org.bouncycastle.math.ec.SimpleBigDecimal: int getScale()>();

        if $i1 == $i0 goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lambda0 and lambda1 do not have same scale");

        throw $r26;

     label01:
        if b2 == 1 goto label02;

        $i15 = (int) b2;

        $i17 = (int) -1;

        if $i15 == $i17 goto label02;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r27;

     label02:
        $r2 = virtualinvoke r0.<org.bouncycastle.math.ec.SimpleBigDecimal: java.math.BigInteger round()>();

        $r3 = virtualinvoke r1.<org.bouncycastle.math.ec.SimpleBigDecimal: java.math.BigInteger round()>();

        $r4 = virtualinvoke r0.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger)>($r2);

        $r5 = virtualinvoke r1.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger)>($r3);

        $r6 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r4);

        if b2 != 1 goto label03;

        r17 = virtualinvoke $r6.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        goto label04;

     label03:
        r17 = virtualinvoke $r6.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

     label04:
        $r7 = virtualinvoke $r5.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        $r8 = virtualinvoke $r7.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        $r9 = virtualinvoke $r8.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r5);

        if b2 != 1 goto label05;

        r18 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(org.bouncycastle.math.ec.SimpleBigDecimal)>($r8);

        r19 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r9);

        goto label06;

     label05:
        r18 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal)>($r8);

        r19 = virtualinvoke $r4.<org.bouncycastle.math.ec.SimpleBigDecimal: org.bouncycastle.math.ec.SimpleBigDecimal subtract(org.bouncycastle.math.ec.SimpleBigDecimal)>($r9);

     label06:
        b10 = 0;

        b11 = 0;

        $r10 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i3 = virtualinvoke r17.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r10);

        if $i3 < 0 goto label08;

        $r14 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $i9 = virtualinvoke r18.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r14);

        if $i9 >= 0 goto label07;

        b11 = b2;

        goto label09;

     label07:
        b10 = 1;

        goto label09;

     label08:
        $r11 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $i4 = virtualinvoke r19.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r11);

        if $i4 < 0 goto label09;

        b11 = b2;

     label09:
        $r20 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $i12 = virtualinvoke r17.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r20);

        if $i12 >= 0 goto label11;

        $r13 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $i7 = virtualinvoke r18.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r13);

        if $i7 < 0 goto label10;

        $i18 = (int) b2;

        $i8 = neg $i18;

        b11 = (byte) $i8;

        goto label12;

     label10:
        b10 = -1;

        goto label12;

     label11:
        $r12 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_TWO>;

        $i5 = virtualinvoke r19.<org.bouncycastle.math.ec.SimpleBigDecimal: int compareTo(java.math.BigInteger)>($r12);

        if $i5 >= 0 goto label12;

        $i19 = (int) b2;

        $i6 = neg $i19;

        b11 = (byte) $i6;

     label12:
        $l13 = (long) b10;

        $r21 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l13);

        $r22 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r21);

        $l14 = (long) b11;

        $r23 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l14);

        $r24 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r23);

        $r28 = new org.bouncycastle.math.ec.ZTauElement;

        specialinvoke $r28.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r22, $r24);

        return $r28;
    }

    public static org.bouncycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, byte, int, int)
    {
        byte b6;
        int i0, $i1, i2, $i3, i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        java.math.BigInteger r0, $r1, r2, $r3, $r4, r5, $r6, $r7, $r8, $r10, r11;
        boolean $z0;
        org.bouncycastle.math.ec.SimpleBigDecimal $r12;

        r0 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.BigInteger;

        r5 := @parameter2: java.math.BigInteger;

        b6 := @parameter3: byte;

        i0 := @parameter4: int;

        i2 := @parameter5: int;

        $i1 = i0 + 5;

        $i3 = $i1 / 2;

        i4 = $i3 + i2;

        $i5 = i0 - i4;

        $i7 = $i5 - 2;

        $i12 = (int) b6;

        $i8 = $i7 + $i12;

        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i8);

        $r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i0);

        $r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r7 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $i9 = i4 - i2;

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i9);

        r11 = $r8;

        $i10 = i4 - i2;

        $i11 = $i10 - 1;

        $z0 = virtualinvoke $r7.<java.math.BigInteger: boolean testBit(int)>($i11);

        if $z0 == 0 goto label1;

        $r10 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r11 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

     label1:
        $r12 = new org.bouncycastle.math.ec.SimpleBigDecimal;

        specialinvoke $r12.<org.bouncycastle.math.ec.SimpleBigDecimal: void <init>(java.math.BigInteger,int)>(r11, i2);

        return $r12;
    }

    public static byte[] tauAdicNaf(byte, org.bouncycastle.math.ec.ZTauElement)
    {
        byte[] $r12, r18;
        byte b0, $b3, $b4;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r14, r15, $r16, r17;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i5, i6, i7, i8, $i9, $i11;
        org.bouncycastle.math.ec.ZTauElement r0;
        java.lang.IllegalArgumentException $r19;

        b0 := @parameter0: byte;

        r0 := @parameter1: org.bouncycastle.math.ec.ZTauElement;

        if b0 == 1 goto label01;

        $i9 = (int) b0;

        $i11 = (int) -1;

        if $i9 == $i11 goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r19;

     label01:
        $r1 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger norm(byte,org.bouncycastle.math.ec.ZTauElement)>(b0, r0);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 30 goto label02;

        $i5 = $i1 + 4;

        goto label03;

     label02:
        $i5 = 34;

     label03:
        $r12 = newarray (byte)[$i5];

        i6 = 0;

        i7 = 0;

        r14 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r15 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

     label04:
        $r16 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke r14.<java.math.BigInteger: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label05;

        $r11 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke r15.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label12;

     label05:
        $z0 = virtualinvoke r14.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label08;

        $r4 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r5 = virtualinvoke r15.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r6 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

        $r7 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger FOUR>;

        $r8 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r9 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8);

        $i2 = virtualinvoke $r9.<java.math.BigInteger: int intValue()>();

        $b3 = (byte) $i2;

        $r12[i6] = $b3;

        $b4 = $r12[i6];

        if $b4 != 1 goto label06;

        r14 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger clearBit(int)>(0);

        goto label07;

     label06:
        $r10 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        r14 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

     label07:
        i7 = i6;

        goto label09;

     label08:
        $r12[i6] = 0;

     label09:
        r17 = r14;

        $r2 = virtualinvoke r14.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        if b0 != 1 goto label10;

        r14 = virtualinvoke r15.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        goto label11;

     label10:
        r14 = virtualinvoke r15.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

     label11:
        $r3 = virtualinvoke r17.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r15 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        i6 = i6 + 1;

        goto label04;

     label12:
        i8 = i7 + 1;

        r18 = newarray (byte)[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r18, 0, i8);

        return r18;
    }

    public static org.bouncycastle.math.ec.ECPoint$F2m tau(org.bouncycastle.math.ec.ECPoint$F2m)
    {
        org.bouncycastle.math.ec.ECCurve $r4;
        org.bouncycastle.math.ec.ECFieldElement $r1, $r2, $r5, $r6;
        org.bouncycastle.math.ec.ECPoint$F2m r0, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        $z0 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: boolean isInfinity()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r2 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECFieldElement getY()>();

        $r3 = new org.bouncycastle.math.ec.ECPoint$F2m;

        $r4 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r5 = virtualinvoke $r1.<org.bouncycastle.math.ec.ECFieldElement: org.bouncycastle.math.ec.ECFieldElement square()>();

        $r6 = virtualinvoke $r2.<org.bouncycastle.math.ec.ECFieldElement: org.bouncycastle.math.ec.ECFieldElement square()>();

        $z1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: boolean isCompressed()>();

        specialinvoke $r3.<org.bouncycastle.math.ec.ECPoint$F2m: void <init>(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)>($r4, $r5, $r6, $z1);

        return $r3;
    }

    public static byte getMu(org.bouncycastle.math.ec.ECCurve$F2m)
    {
        org.bouncycastle.math.ec.ECFieldElement $r1;
        java.lang.IllegalArgumentException $r5;
        byte b0;
        java.math.BigInteger $r2, $r3, $r4;
        org.bouncycastle.math.ec.ECCurve$F2m r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.bouncycastle.math.ec.ECCurve$F2m;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement getA()>();

        $r2 = virtualinvoke $r1.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r3 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        b0 = -1;

        goto label3;

     label1:
        $r4 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        b0 = 1;

        goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No Koblitz curve (ABC), TNAF multiplication not possible");

        throw $r5;

     label3:
        return b0;
    }

    public static java.math.BigInteger[] getLucas(byte, int, boolean)
    {
        java.math.BigInteger[] $r0;
        long $l2;
        java.lang.IllegalArgumentException $r6;
        byte b0;
        int i1, i3, $i4, $i6;
        java.math.BigInteger $r1, r3, r4, r5;
        boolean z0;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if b0 == 1 goto label1;

        $i4 = (int) b0;

        $i6 = (int) -1;

        if $i4 == $i6 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r6;

     label1:
        if z0 == 0 goto label2;

        r3 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $l2 = (long) b0;

        r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        goto label3;

     label2:
        r3 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        r4 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

     label3:
        i3 = 1;

     label4:
        if i3 >= i1 goto label7;

        if b0 != 1 goto label5;

        r5 = r4;

        goto label6;

     label5:
        r5 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger negate()>();

     label6:
        $r1 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r3 = r4;

        r4 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        i3 = i3 + 1;

        goto label4;

     label7:
        $r0 = newarray (java.math.BigInteger)[2];

        $r0[0] = r3;

        $r0[1] = r4;

        return $r0;
    }

    public static java.math.BigInteger getTw(byte, int)
    {
        java.math.BigInteger[] $r0;
        byte b1;
        int i0;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        b1 := @parameter0: byte;

        i0 := @parameter1: int;

        if i0 != 4 goto label2;

        if b1 != 1 goto label1;

        $r11 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(6L);

        return $r11;

     label1:
        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10L);

        return $r10;

     label2:
        $r0 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>(b1, i0, 0);

        $r1 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i0);

        $r3 = $r0[1];

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r2);

        $r6 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r5 = $r0[0];

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r2);

        return $r9;
    }

    public static java.math.BigInteger[] getSi(org.bouncycastle.math.ec.ECCurve$F2m)
    {
        byte $b2;
        java.math.BigInteger $r2, $r3, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, r23, r24;
        boolean $z0;
        org.bouncycastle.math.ec.ECCurve$F2m r0;
        org.bouncycastle.math.ec.ECFieldElement $r1;
        int $i0, $i1, $i3, $i4, i5, $i6, $i8;
        java.math.BigInteger[] $r4, $r21;
        java.lang.IllegalArgumentException $r25, $r26, $r27;

        r0 := @parameter0: org.bouncycastle.math.ec.ECCurve$F2m;

        $z0 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: boolean isKoblitz()>();

        if $z0 != 0 goto label1;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("si is defined for Koblitz curves only");

        throw $r25;

     label1:
        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: int getM()>();

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement getA()>();

        $r2 = virtualinvoke $r1.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int intValue()>();

        $b2 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: byte getMu()>();

        $r3 = virtualinvoke r0.<org.bouncycastle.math.ec.ECCurve$F2m: java.math.BigInteger getH()>();

        $i3 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        $i4 = $i0 + 3;

        i5 = $i4 - $i1;

        $r4 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>($b2, i5, 0);

        if $b2 != 1 goto label2;

        $r18 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r17 = $r4[1];

        r23 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

        $r20 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r19 = $r4[0];

        r24 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r19);

        goto label4;

     label2:
        $i6 = (int) $b2;

        $i8 = (int) -1;

        if $i6 != $i8 goto label3;

        $r7 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r6 = $r4[1];

        r23 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $r9 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r8 = $r4[0];

        r24 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

        goto label4;

     label3:
        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r26;

     label4:
        $r21 = newarray (java.math.BigInteger)[2];

        if $i3 != 2 goto label5;

        $r14 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r21[0] = $r14;

        $r15 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r21[1] = $r16;

        goto label7;

     label5:
        if $i3 != 4 goto label6;

        $r11 = virtualinvoke r23.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(2);

        $r21[0] = $r11;

        $r12 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(2);

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger negate()>();

        $r21[1] = $r13;

        goto label7;

     label6:
        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("h (Cofactor) must be 2 or 4");

        throw $r27;

     label7:
        return $r21;
    }

    public static org.bouncycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger, int, byte, java.math.BigInteger[], byte, byte)
    {
        byte b0, b2, b3;
        java.math.BigInteger $r1, $r2, r4, $r5, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, r30;
        org.bouncycastle.math.ec.SimpleBigDecimal $r6, $r8;
        int i1, $i4, $i5;
        org.bouncycastle.math.ec.ZTauElement $r9, $r31;
        java.math.BigInteger[] r0, $r3;

        r4 := @parameter0: java.math.BigInteger;

        i1 := @parameter1: int;

        b2 := @parameter2: byte;

        r0 := @parameter3: java.math.BigInteger[];

        b0 := @parameter4: byte;

        b3 := @parameter5: byte;

        if b0 != 1 goto label1;

        $r28 = r0[0];

        $r27 = r0[1];

        r30 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r27);

        goto label2;

     label1:
        $r2 = r0[0];

        $r1 = r0[1];

        r30 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label2:
        $r3 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger[] getLucas(byte,int,boolean)>(b0, i1, 1);

        $r29 = $r3[1];

        $r5 = r0[0];

        $i4 = (int) b3;

        $r6 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int)>(r4, $r5, $r29, b2, i1, $i4);

        $r7 = r0[1];

        $i5 = (int) b3;

        $r8 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int)>(r4, $r7, $r29, b2, i1, $i5);

        $r9 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement round(org.bouncycastle.math.ec.SimpleBigDecimal,org.bouncycastle.math.ec.SimpleBigDecimal,byte)>($r6, $r8, b0);

        $r10 = $r9.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r11 = virtualinvoke r30.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r10);

        $r12 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        $r14 = r0[1];

        $r15 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r16 = $r9.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r17 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r16);

        $r18 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

        $r20 = r0[1];

        $r19 = $r9.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        $r23 = r0[0];

        $r22 = $r9.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        $r24 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r22);

        $r25 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r24);

        $r31 = new org.bouncycastle.math.ec.ZTauElement;

        specialinvoke $r31.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r18, $r25);

        return $r31;
    }

    public static org.bouncycastle.math.ec.ECPoint$F2m multiplyRTnaf(org.bouncycastle.math.ec.ECPoint$F2m, java.math.BigInteger)
    {
        org.bouncycastle.math.ec.ECCurve $r1;
        org.bouncycastle.math.ec.ECFieldElement $r3;
        java.math.BigInteger[] $r5;
        byte b2, $b3;
        int $i0, $i1;
        org.bouncycastle.math.ec.ECPoint$F2m r0, $r8;
        java.math.BigInteger $r4, r6;
        org.bouncycastle.math.ec.ECCurve$F2m r2;
        org.bouncycastle.math.ec.ZTauElement $r7;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        r6 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r2 = (org.bouncycastle.math.ec.ECCurve$F2m) $r1;

        $i0 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: int getM()>();

        $r3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement getA()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $i1 = virtualinvoke $r4.<java.math.BigInteger: int intValue()>();

        b2 = (byte) $i1;

        $b3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: byte getMu()>();

        $r5 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: java.math.BigInteger[] getSi()>();

        $r7 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte)>(r6, $i0, b2, $r5, $b3, 10);

        $r8 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m multiplyTnaf(org.bouncycastle.math.ec.ECPoint$F2m,org.bouncycastle.math.ec.ZTauElement)>(r0, $r7);

        return $r8;
    }

    public static org.bouncycastle.math.ec.ECPoint$F2m multiplyTnaf(org.bouncycastle.math.ec.ECPoint$F2m, org.bouncycastle.math.ec.ZTauElement)
    {
        byte[] $r4;
        org.bouncycastle.math.ec.ECCurve $r1;
        byte $b0;
        org.bouncycastle.math.ec.ECPoint$F2m r0, $r5;
        org.bouncycastle.math.ec.ECCurve$F2m r2;
        org.bouncycastle.math.ec.ZTauElement r3;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        r3 := @parameter1: org.bouncycastle.math.ec.ZTauElement;

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r2 = (org.bouncycastle.math.ec.ECCurve$F2m) $r1;

        $b0 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: byte getMu()>();

        $r4 = staticinvoke <org.bouncycastle.math.ec.Tnaf: byte[] tauAdicNaf(byte,org.bouncycastle.math.ec.ZTauElement)>($b0, r3);

        $r5 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m multiplyFromTnaf(org.bouncycastle.math.ec.ECPoint$F2m,byte[])>(r0, $r4);

        return $r5;
    }

    public static org.bouncycastle.math.ec.ECPoint$F2m multiplyFromTnaf(org.bouncycastle.math.ec.ECPoint$F2m, byte[])
    {
        byte[] r4;
        org.bouncycastle.math.ec.ECCurve $r1;
        org.bouncycastle.math.ec.ECPoint $r3;
        byte $b1, $b2;
        int $i0, i3, $i4, $i6, $i8;
        org.bouncycastle.math.ec.ECPoint$F2m r0, $r5, r6;
        org.bouncycastle.math.ec.ECCurve$F2m r2;

        r0 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        r4 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r2 = (org.bouncycastle.math.ec.ECCurve$F2m) $r1;

        $r3 = virtualinvoke r2.<org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECPoint getInfinity()>();

        r6 = (org.bouncycastle.math.ec.ECPoint$F2m) $r3;

        $i0 = lengthof r4;

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label4;

        $r5 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m tau(org.bouncycastle.math.ec.ECPoint$F2m)>(r6);

        r6 = $r5;

        $b1 = r4[i3];

        if $b1 != 1 goto label2;

        r6 = virtualinvoke $r5.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECPoint$F2m addSimple(org.bouncycastle.math.ec.ECPoint$F2m)>(r0);

        goto label3;

     label2:
        $b2 = r4[i3];

        $i4 = (int) $b2;

        $i6 = (int) -1;

        if $i4 != $i6 goto label3;

        r6 = virtualinvoke $r5.<org.bouncycastle.math.ec.ECPoint$F2m: org.bouncycastle.math.ec.ECPoint$F2m subtractSimple(org.bouncycastle.math.ec.ECPoint$F2m)>(r0);

     label3:
        $i8 = (int) -1;

        i3 = i3 + $i8;

        goto label1;

     label4:
        return r6;
    }

    public static byte[] tauAdicWNaf(byte, org.bouncycastle.math.ec.ZTauElement, byte, java.math.BigInteger, java.math.BigInteger, org.bouncycastle.math.ec.ZTauElement[])
    {
        byte[] $r22;
        byte b0, b2, b10;
        java.math.BigInteger $r1, r2, $r3, $r4, $r5, $r6, r7, $r8, $r9, $r10, $r13, $r15, $r17, $r19, $r20, $r21, r24, r25, $r26, r27;
        boolean $z0, $z1, $z2, z3;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.bouncycastle.math.ec.ZTauElement r0, $r12, $r14, $r16, $r18;
        org.bouncycastle.math.ec.ZTauElement[] r11;
        java.lang.IllegalArgumentException $r28;

        b0 := @parameter0: byte;

        r0 := @parameter1: org.bouncycastle.math.ec.ZTauElement;

        b2 := @parameter2: byte;

        r2 := @parameter3: java.math.BigInteger;

        r7 := @parameter4: java.math.BigInteger;

        r11 := @parameter5: org.bouncycastle.math.ec.ZTauElement[];

        if b0 == 1 goto label01;

        $i11 = (int) b0;

        $i13 = (int) -1;

        if $i11 == $i13 goto label01;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mu must be 1 or -1");

        throw $r28;

     label01:
        $r1 = staticinvoke <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger norm(byte,org.bouncycastle.math.ec.ZTauElement)>(b0, r0);

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        if $i1 <= 30 goto label02;

        $i7 = $i1 + 4;

        $i14 = (int) b2;

        $i8 = $i7 + $i14;

        goto label03;

     label02:
        $i15 = (int) b2;

        $i8 = 34 + $i15;

     label03:
        $r22 = newarray (byte)[$i8];

        $r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r24 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r25 = r0.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        i9 = 0;

     label04:
        $r26 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke r24.<java.math.BigInteger: boolean equals(java.lang.Object)>($r26);

        if $z2 == 0 goto label05;

        $r21 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke r25.<java.math.BigInteger: boolean equals(java.lang.Object)>($r21);

        if $z1 != 0 goto label15;

     label05:
        $z0 = virtualinvoke r24.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label11;

        $r8 = virtualinvoke r25.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        $r9 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $i3 = virtualinvoke $r10.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i3 < 0 goto label06;

        $r20 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r2);

        $i6 = virtualinvoke $r20.<java.math.BigInteger: int intValue()>();

        b10 = (byte) $i6;

        goto label07;

     label06:
        $i4 = virtualinvoke $r10.<java.math.BigInteger: int intValue()>();

        b10 = (byte) $i4;

     label07:
        $r22[i9] = b10;

        z3 = 1;

        $i16 = (int) b10;

        if $i16 >= 0 goto label08;

        z3 = 0;

        $i17 = (int) b10;

        $i5 = neg $i17;

        b10 = (byte) $i5;

     label08:
        if z3 == 0 goto label09;

        $i18 = (int) b10;

        $r16 = r11[$i18];

        $r17 = $r16.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r24 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r17);

        $i19 = (int) b10;

        $r18 = r11[$i19];

        $r19 = $r18.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        r25 = virtualinvoke r25.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r19);

        goto label10;

     label09:
        $i20 = (int) b10;

        $r12 = r11[$i20];

        $r13 = $r12.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger u>;

        r24 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        $i21 = (int) b10;

        $r14 = r11[$i21];

        $r15 = $r14.<org.bouncycastle.math.ec.ZTauElement: java.math.BigInteger v>;

        r25 = virtualinvoke r25.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r15);

     label10:
        goto label12;

     label11:
        $r22[i9] = 0;

     label12:
        r27 = r24;

        if b0 != 1 goto label13;

        $r6 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r24 = virtualinvoke r25.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        goto label14;

     label13:
        $r4 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r24 = virtualinvoke r25.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r4);

     label14:
        $r5 = virtualinvoke r27.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r25 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger negate()>();

        i9 = i9 + 1;

        goto label04;

     label15:
        return $r22;
    }

    public static org.bouncycastle.math.ec.ECPoint$F2m[] getPreComp(org.bouncycastle.math.ec.ECPoint$F2m, byte)
    {
        byte[] $r2;
        org.bouncycastle.math.ec.ECPoint$F2m[] r0;
        byte[][] r4;
        byte b0;
        int $i1, i2;
        org.bouncycastle.math.ec.ECPoint$F2m r1, $r3;

        r1 := @parameter0: org.bouncycastle.math.ec.ECPoint$F2m;

        b0 := @parameter1: byte;

        r0 = newarray (org.bouncycastle.math.ec.ECPoint$F2m)[16];

        r0[1] = r1;

        if b0 != 0 goto label1;

        r4 = <org.bouncycastle.math.ec.Tnaf: byte[][] alpha0Tnaf>;

        goto label2;

     label1:
        r4 = <org.bouncycastle.math.ec.Tnaf: byte[][] alpha1Tnaf>;

     label2:
        $i1 = lengthof r4;

        i2 = 3;

     label3:
        if i2 >= $i1 goto label4;

        $r2 = r4[i2];

        $r3 = staticinvoke <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ECPoint$F2m multiplyFromTnaf(org.bouncycastle.math.ec.ECPoint$F2m,byte[])>(r1, $r2);

        r0[i2] = $r3;

        i2 = i2 + 2;

        goto label3;

     label4:
        return r0;
    }

    static void <clinit>()
    {
        byte[] $r20, $r21, $r22, $r23, $r38, $r39, $r40, $r41;
        java.math.BigInteger $r0, $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36;
        byte[][] $r19, $r37;
        org.bouncycastle.math.ec.ZTauElement $r7, $r10, $r13, $r16, $r25, $r28, $r31, $r34;
        org.bouncycastle.math.ec.ZTauElement[] $r6, $r24;

        <org.bouncycastle.math.ec.Tnaf: byte POW_2_WIDTH> = 16;

        <org.bouncycastle.math.ec.Tnaf: byte WIDTH> = 4;

        $r0 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE> = $r1;

        $r2 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger TWO>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_TWO> = $r3;

        $r4 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger THREE>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger negate()>();

        <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE> = $r5;

        $r6 = newarray (org.bouncycastle.math.ec.ZTauElement)[9];

        $r6[0] = null;

        $r7 = new org.bouncycastle.math.ec.ZTauElement;

        $r9 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r8 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        specialinvoke $r7.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r9, $r8);

        $r6[1] = $r7;

        $r6[2] = null;

        $r10 = new org.bouncycastle.math.ec.ZTauElement;

        $r12 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE>;

        $r11 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r10.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r12, $r11);

        $r6[3] = $r10;

        $r6[4] = null;

        $r13 = new org.bouncycastle.math.ec.ZTauElement;

        $r15 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $r14 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r13.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r15, $r14);

        $r6[5] = $r13;

        $r6[6] = null;

        $r16 = new org.bouncycastle.math.ec.ZTauElement;

        $r18 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r17 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        specialinvoke $r16.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r18, $r17);

        $r6[7] = $r16;

        $r6[8] = null;

        <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement[] alpha0> = $r6;

        $r19 = newarray (byte[])[8];

        $r19[0] = null;

        $r20 = newarray (byte)[1];

        $r20[0] = 1;

        $r19[1] = $r20;

        $r19[2] = null;

        $r21 = newarray (byte)[3];

        $r21[0] = -1;

        $r21[1] = 0;

        $r21[2] = 1;

        $r19[3] = $r21;

        $r19[4] = null;

        $r22 = newarray (byte)[3];

        $r22[0] = 1;

        $r22[1] = 0;

        $r22[2] = 1;

        $r19[5] = $r22;

        $r19[6] = null;

        $r23 = newarray (byte)[4];

        $r23[0] = -1;

        $r23[1] = 0;

        $r23[2] = 0;

        $r23[3] = 1;

        $r19[7] = $r23;

        <org.bouncycastle.math.ec.Tnaf: byte[][] alpha0Tnaf> = $r19;

        $r24 = newarray (org.bouncycastle.math.ec.ZTauElement)[9];

        $r24[0] = null;

        $r25 = new org.bouncycastle.math.ec.ZTauElement;

        $r27 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r26 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        specialinvoke $r25.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r27, $r26);

        $r24[1] = $r25;

        $r24[2] = null;

        $r28 = new org.bouncycastle.math.ec.ZTauElement;

        $r30 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_THREE>;

        $r29 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r28.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r30, $r29);

        $r24[3] = $r28;

        $r24[4] = null;

        $r31 = new org.bouncycastle.math.ec.ZTauElement;

        $r33 = <org.bouncycastle.math.ec.Tnaf: java.math.BigInteger MINUS_ONE>;

        $r32 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r31.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r33, $r32);

        $r24[5] = $r31;

        $r24[6] = null;

        $r34 = new org.bouncycastle.math.ec.ZTauElement;

        $r36 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r35 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        specialinvoke $r34.<org.bouncycastle.math.ec.ZTauElement: void <init>(java.math.BigInteger,java.math.BigInteger)>($r36, $r35);

        $r24[7] = $r34;

        $r24[8] = null;

        <org.bouncycastle.math.ec.Tnaf: org.bouncycastle.math.ec.ZTauElement[] alpha1> = $r24;

        $r37 = newarray (byte[])[8];

        $r37[0] = null;

        $r38 = newarray (byte)[1];

        $r38[0] = 1;

        $r37[1] = $r38;

        $r37[2] = null;

        $r39 = newarray (byte)[3];

        $r39[0] = -1;

        $r39[1] = 0;

        $r39[2] = 1;

        $r37[3] = $r39;

        $r37[4] = null;

        $r40 = newarray (byte)[3];

        $r40[0] = 1;

        $r40[1] = 0;

        $r40[2] = 1;

        $r37[5] = $r40;

        $r37[6] = null;

        $r41 = newarray (byte)[4];

        $r41[0] = -1;

        $r41[1] = 0;

        $r41[2] = 0;

        $r41[3] = -1;

        $r37[7] = $r41;

        <org.bouncycastle.math.ec.Tnaf: byte[][] alpha1Tnaf> = $r37;

        return;
    }
}
