public abstract class org.apache.pdfbox.encoding.Encoding extends java.lang.Object implements org.apache.pdfbox.pdmodel.common.COSObjectable
{
    private static final org.apache.commons.logging.Log LOG;
    public static final java.lang.String NOTDEF;
    protected final java.util.Map codeToName;
    protected final java.util.Map nameToCode;
    private static final java.util.Map NAME_TO_CHARACTER;
    private static final java.util.Map CHARACTER_TO_NAME;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        org.apache.pdfbox.encoding.Encoding r0;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map codeToName> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode> = $r2;

        return;
    }

    private static void loadGlyphList(java.lang.String)
    {
        java.util.Map $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.MissingResourceException $r20;
        java.lang.StringBuilder $r8, $r12, $r14, $r15, $r16, $r17, $r21, $r22, $r23, $r37, $r39, $r40;
        java.lang.Throwable $r29;
        java.util.StringTokenizer $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r4, $r5, $r6, $r11, $r18, $r19, $r24, $r26, $r41, $r43, r44;
        char $c4;
        java.io.IOException $r27, $r30, $r32, $r34;
        java.lang.NumberFormatException $r36;
        java.io.InputStreamReader $r3;
        org.apache.commons.logging.Log $r13, $r28, $r31, $r33, $r35, $r38;
        java.lang.Class $r25;
        java.io.BufferedReader $r2, r42;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.String;

        r42 = null;

     label01:
        $r1 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>(r0);

        if $r1 != null goto label02;

        $r20 = new java.util.MissingResourceException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Glyphlist not found: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = class "Lorg/apache/pdfbox/encoding/Encoding;";

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r20.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r24, $r26, r0);

        throw $r20;

     label02:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r1);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r42 = $r2;

     label03:
        $r43 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r43 == null goto label11;

        $r4 = virtualinvoke $r43.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 != 0 goto label03;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(59);

        if $i0 < 0 goto label10;

        r44 = null;

     label04:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        r44 = $r6;

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>($r6, " ", 0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

     label05:
        $z1 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label06;

        $r19 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r19, 16);

        $c4 = (char) $i3;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label05;

     label06:
        $r9 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $z2 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z2 == 0 goto label07;

        $r13 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate value for characterName=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

        goto label08;

     label07:
        $r10 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r11);

     label08:
        goto label10;

     label09:
        $r36 := @caughtexception;

        $r38 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed unicode value ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r41, $r36);

     label10:
        goto label03;

     label11:
        if $r2 == null goto label26;

     label12:
        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

     label13:
        goto label26;

     label14:
        $r34 := @caughtexception;

        $r35 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("error when closing the glyph list.", $r34);

        goto label26;

     label15:
        $r32 := @caughtexception;

        $r33 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("error while reading the glyph list.", $r32);

     label16:
        if r42 == null goto label26;

     label17:
        virtualinvoke r42.<java.io.BufferedReader: void close()>();

     label18:
        goto label26;

     label19:
        $r30 := @caughtexception;

        $r31 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("error when closing the glyph list.", $r30);

        goto label26;

     label20:
        $r29 := @caughtexception;

     label21:
        if r42 == null goto label25;

     label22:
        virtualinvoke r42.<java.io.BufferedReader: void close()>();

     label23:
        goto label25;

     label24:
        $r27 := @caughtexception;

        $r28 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("error when closing the glyph list.", $r27);

     label25:
        throw $r29;

     label26:
        return;

        catch java.lang.NumberFormatException from label04 to label08 with label09;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label01 to label11 with label15;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label01 to label11 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public java.util.Map getCodeToNameMap()
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        $r1 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getNameToCodeMap()
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        $r1 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public void addCharacterEncoding(int, java.lang.String)
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r1, $r4;
        int i0;
        java.lang.String r3;
        java.lang.Integer $r2, $r5;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        $r4 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        return;
    }

    public boolean hasCodeForName(java.lang.String)
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasNameForCode(int)
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r1;
        int i0;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public int getCode(java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.io.IOException $r5;
        java.lang.Integer r4;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r1, $r10;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No character code for character name \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.lang.String getName(int) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.Encoding r0;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Integer $r2;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.pdfbox.encoding.Encoding: java.util.Map codeToName>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public static java.lang.String getCharacterForName(java.lang.String)
    {
        java.util.Map $r1, $r7;
        java.lang.StringBuilder $r2, $r4, $r5;
        org.apache.commons.logging.Log $r3;
        java.lang.Object $r8;
        java.lang.String r0, $r6, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No character for name ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r6);

        $r7 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r9 = (java.lang.String) $r8;

        return $r9;

     label1:
        return null;
    }

    public java.lang.String getNameFromCharacter(char) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.Encoding r10;
        char c0;
        java.io.IOException $r4;
        java.util.Map $r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r1, r3, $r9;

        r10 := @this: org.apache.pdfbox.encoding.Encoding;

        c0 := @parameter0: char;

        $r0 = <org.apache.pdfbox.encoding.Encoding: java.util.Map CHARACTER_TO_NAME>;

        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No name for character \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return r3;
    }

    public java.lang.String getCharacter(int) throws java.io.IOException
    {
        org.apache.pdfbox.encoding.Encoding r0;
        int i0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.pdfbox.encoding.Encoding;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.encoding.Encoding: java.lang.String getName(int)>(i0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacter(java.lang.String)>($r1);

        return $r2;

     label1:
        return null;
    }

    public java.lang.String getCharacter(java.lang.String)
    {
        org.apache.pdfbox.encoding.Encoding r3;
        java.lang.Integer $r7;
        java.util.Map $r1, $r4, $r5, $r10, $r18;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r13, $r14, $r22, $r23, $r29, $r30, $r35, $r36, $r39, $r40, $r41, $r42, $r43;
        int $i0, $i1, $i3, $i5, $i6, $i7, $i8, $i10, i11, $i13, $i15, $i17, $i19;
        java.lang.String r0, $r8, $r9, $r15, $r17, $r19, $r24, $r25, $r31, $r37, r38;
        char $c2, $c4, $c9;
        java.lang.NumberFormatException $r26, $r32;
        java.lang.Object $r2, $r6;
        org.apache.commons.logging.Log $r12, $r21, $r28, $r34;

        r3 := @this: org.apache.pdfbox.encoding.Encoding;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r38 = (java.lang.String) $r2;

        if r38 != null goto label17;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        if $i0 <= 0 goto label01;

        $i10 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        $r25 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        r38 = virtualinvoke r3.<org.apache.pdfbox.encoding.Encoding: java.lang.String getCharacter(java.lang.String)>($r25);

        goto label17;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("uni");

        if $z0 == 0 goto label10;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

     label02:
        i11 = 3;

     label03:
        $i6 = i11 + 4;

        if $i6 > $i5 goto label06;

        $i7 = i11 + 4;

        $r19 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i11, $i7);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r19, 16);

        $i13 = (int) 55295;

        if $i8 <= $i13 goto label04;

        $i15 = (int) 57344;

        if $i8 >= $i15 goto label04;

        $r21 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode character name with not allowed code area: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r24);

        goto label05;

     label04:
        $c9 = (char) $i8;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

     label05:
        i11 = i11 + 4;

        goto label03;

     label06:
        $r17 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        r38 = $r17;

        $r18 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r17);

     label07:
        goto label09;

     label08:
        $r32 := @caughtexception;

        $r34 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number in Unicode character name: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r37);

        r38 = r0;

     label09:
        goto label17;

     label10:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("u");

        if $z1 == 0 goto label15;

     label11:
        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r8, 16);

        $i17 = (int) 55295;

        if $i3 <= $i17 goto label12;

        $i19 = (int) 57344;

        if $i3 >= $i19 goto label12;

        $r12 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unicode character name with not allowed code area: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r15);

        goto label13;

     label12:
        $c4 = (char) $i3;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c4);

        r38 = $r9;

        $r10 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

     label13:
        goto label17;

     label14:
        $r26 := @caughtexception;

        $r28 = <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number in Unicode character name: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r31);

        r38 = r0;

        goto label17;

     label15:
        $r4 = r3.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $z2 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z2 == 0 goto label16;

        $r5 = r3.<org.apache.pdfbox.encoding.Encoding: java.util.Map nameToCode>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $c2 = (char) $i1;

        r38 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c2);

        goto label17;

     label16:
        r38 = r0;

     label17:
        return r38;

        catch java.lang.NumberFormatException from label02 to label07 with label08;
        catch java.lang.NumberFormatException from label11 to label13 with label14;
    }

    static void <clinit>()
    {
        java.util.HashMap $r1, $r2;
        java.util.Map $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14;
        java.lang.SecurityException $r18;
        java.lang.String $r3;
        boolean $z0, $z1;
        java.util.Map$Entry r19;
        java.util.Iterator $r12;
        java.util.Set $r11;
        java.io.File $r17;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r13, $r15, $r16;

        <org.apache.pdfbox.encoding.Encoding: java.lang.String NOTDEF> = ".notdef";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/encoding/Encoding;");

        <org.apache.pdfbox.encoding.Encoding: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.pdfbox.encoding.Encoding: java.util.Map CHARACTER_TO_NAME> = $r2;

        staticinvoke <org.apache.pdfbox.encoding.Encoding: void loadGlyphList(java.lang.String)>("org/apache/pdfbox/resources/glyphlist.txt");

        staticinvoke <org.apache.pdfbox.encoding.Encoding: void loadGlyphList(java.lang.String)>("org/apache/pdfbox/resources/additional_glyphlist.txt");

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("glyphlist_ext");

        if $r3 == null goto label2;

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        staticinvoke <org.apache.pdfbox.encoding.Encoding: void loadGlyphList(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

     label4:
        $r4 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(".notdef", "");

        $r5 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fi", "fi");

        $r6 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fl", "fl");

        $r7 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ffi", "ffi");

        $r8 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ff", "ff");

        $r9 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pi", "pi");

        $r10 = <org.apache.pdfbox.encoding.Encoding: java.util.Map NAME_TO_CHARACTER>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r13;

        $r14 = <org.apache.pdfbox.encoding.Encoding: java.util.Map CHARACTER_TO_NAME>;

        $r15 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        goto label5;

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
