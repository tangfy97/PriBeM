public class com.jidesoft.converter.RgbColorConverter extends com.jidesoft.converter.ColorConverter
{
    private boolean _alphaIncluded;

    public void <init>()
    {
        com.jidesoft.converter.RgbColorConverter r0;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        specialinvoke r0.<com.jidesoft.converter.ColorConverter: void <init>()>();

        r0.<com.jidesoft.converter.RgbColorConverter: boolean _alphaIncluded> = 0;

        return;
    }

    public void <init>(boolean)
    {
        com.jidesoft.converter.RgbColorConverter r0;
        boolean z0;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.jidesoft.converter.ColorConverter: void <init>()>();

        r0.<com.jidesoft.converter.RgbColorConverter: boolean _alphaIncluded> = 0;

        r0.<com.jidesoft.converter.RgbColorConverter: boolean _alphaIncluded> = z0;

        return;
    }

    public boolean isAlphaIncluded()
    {
        com.jidesoft.converter.RgbColorConverter r0;
        boolean $z0;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        $z0 = r0.<com.jidesoft.converter.RgbColorConverter: boolean _alphaIncluded>;

        return $z0;
    }

    public void setAlphaIncluded(boolean)
    {
        com.jidesoft.converter.RgbColorConverter r0;
        boolean z0;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.converter.RgbColorConverter: boolean _alphaIncluded> = z0;

        return;
    }

    public java.lang.String toString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.awt.Color r1;
        com.jidesoft.converter.RgbColorConverter r5;
        com.jidesoft.converter.ConverterContext r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        java.lang.String $r6;
        boolean $z0, $z1;

        r5 := @this: com.jidesoft.converter.RgbColorConverter;

        r0 := @parameter0: java.lang.Object;

        r8 := @parameter1: com.jidesoft.converter.ConverterContext;

        $z0 = r0 instanceof java.awt.Color;

        if $z0 == 0 goto label2;

        r1 = (java.awt.Color) r0;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r1.<java.awt.Color: int getRed()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $i1 = virtualinvoke r1.<java.awt.Color: int getGreen()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $i2 = virtualinvoke r1.<java.awt.Color: int getBlue()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $z1 = virtualinvoke r5.<com.jidesoft.converter.RgbColorConverter: boolean isAlphaIncluded()>();

        if $z1 == 0 goto label1;

        $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $i3 = virtualinvoke r1.<java.awt.Color: int getAlpha()>();

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

     label1:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.StringBuffer)>($r2);

        return $r6;

     label2:
        return "";
    }

    public boolean supportToString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.lang.Object r1;
        com.jidesoft.converter.RgbColorConverter r0;
        com.jidesoft.converter.ConverterContext r2;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public boolean supportFromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        java.lang.String r1;
        com.jidesoft.converter.RgbColorConverter r0;
        com.jidesoft.converter.ConverterContext r2;

        r0 := @this: com.jidesoft.converter.RgbColorConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public java.lang.Object fromString(java.lang.String, com.jidesoft.converter.ConverterContext)
    {
        java.awt.Color $r13;
        java.util.StringTokenizer $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.String r0, $r1, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.jidesoft.converter.RgbColorConverter r3;
        java.lang.NumberFormatException $r8, $r9, $r10, $r11;
        com.jidesoft.converter.ConverterContext r12;

        r3 := @this: com.jidesoft.converter.RgbColorConverter;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: com.jidesoft.converter.ConverterContext;

        if r0 == null goto label01;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, ",; ");

        i5 = 0;

        i6 = 0;

        i7 = 0;

        i8 = 255;

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label06;

        $r7 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label03:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 10);

        i5 = $i4 % 256;

        if i5 >= 0 goto label04;

        i5 = i5 + 256;

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        return null;

     label06:
        $z1 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label10;

        $r6 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label07:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r6, 10);

        i6 = $i3 % 256;

        if i6 >= 0 goto label08;

        i6 = i6 + 256;

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        return null;

     label10:
        $z2 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label14;

        $r5 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label11:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, 10);

        i7 = $i2 % 256;

        if i7 >= 0 goto label12;

        i7 = i7 + 256;

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

        return null;

     label14:
        $z3 = virtualinvoke r3.<com.jidesoft.converter.RgbColorConverter: boolean isAlphaIncluded()>();

        if $z3 == 0 goto label18;

        $z4 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z4 == 0 goto label18;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label15:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 10);

        i8 = $i1 % 256;

        if i8 >= 0 goto label16;

        i8 = i8 + 256;

     label16:
        goto label18;

     label17:
        $r8 := @caughtexception;

        return null;

     label18:
        $r13 = new java.awt.Color;

        specialinvoke $r13.<java.awt.Color: void <init>(int,int,int,int)>(i5, i6, i7, i8);

        return $r13;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
        catch java.lang.NumberFormatException from label15 to label16 with label17;
    }
}
