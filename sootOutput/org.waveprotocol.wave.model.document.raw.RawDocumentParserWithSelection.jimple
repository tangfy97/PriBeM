public class org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection create(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection $r0;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument$Factory;

        $r0 = new org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: void <init>(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)>(r1);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.document.raw.RawDocument$Factory)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection r0;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        r1 := @parameter0: org.waveprotocol.wave.model.document.raw.RawDocument$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.raw.RawDocument parse(java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection r0;
        org.waveprotocol.wave.model.document.raw.RawDocument $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: org.waveprotocol.wave.model.document.raw.RawDocument parseIntoDocument(java.lang.String,org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener)>(r1, null);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.raw.RawDocument parseIntoDocument(java.lang.String, org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener)
    {
        org.waveprotocol.wave.model.document.parser.XmlParseException $r12;
        org.waveprotocol.wave.model.util.StringMap $r7;
        org.waveprotocol.wave.model.document.raw.RawDocument$Factory $r5;
        java.util.Map $r8;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection r4;
        java.lang.String r0, $r6, $r17;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener r10;
        java.lang.RuntimeException $r13;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser $r1;
        org.waveprotocol.wave.model.document.raw.RawDocument r18;
        org.waveprotocol.wave.model.document.parser.ItemType $r2, $r3;
        java.lang.Object $r9, $r11;
        java.lang.StringBuilder $r14, $r15, $r16;

        r4 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.document.parser.XmlParserFactory: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser buffered(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse xml: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r13;

     label4:
        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        $r3 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType START_ELEMENT>;

        if $r2 == $r3 goto label5;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

        goto label4;

     label5:
        $r5 = r4.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: org.waveprotocol.wave.model.document.raw.RawDocument$Factory factory>;

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getTagName()>();

        $r7 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r7);

        $r9 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.raw.RawDocument$Factory: java.lang.Object create(java.lang.String,java.util.Map)>($r6, $r8);

        r18 = (org.waveprotocol.wave.model.document.raw.RawDocument) $r9;

        $r11 = interfaceinvoke r18.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object getDocumentElement()>();

        specialinvoke r4.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.Object parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>($r1, r10, r18, $r11);

        return r18;

        catch org.waveprotocol.wave.model.document.parser.XmlParseException from label1 to label2 with label3;
    }

    private java.lang.Object parseElement(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser, org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener, org.waveprotocol.wave.model.document.raw.RawDocument, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener r2;
        org.waveprotocol.wave.model.util.StringMap $r5;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser r1;
        org.waveprotocol.wave.model.document.raw.RawDocument r3;
        java.util.Map $r6;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection r0;
        java.lang.Object r7, r8, $r9, $r10;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        r1 := @parameter0: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser;

        r2 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener;

        r3 := @parameter2: org.waveprotocol.wave.model.document.raw.RawDocument;

        r7 := @parameter3: java.lang.Object;

        r8 := @parameter4: java.lang.Object;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getTagName()>();

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r5);

        $r9 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createElement(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>($r4, $r6, r7, r8);

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.Object parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object)>(r1, r2, r3, $r9);

        return $r10;
    }

    private java.lang.Object parseChildren(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser, org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener, org.waveprotocol.wave.model.document.raw.RawDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Point$Tx $r9, $r10;
        int[] $r3;
        boolean z0, z1, $z2, z3, z4, z5, z6;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener r5;
        org.waveprotocol.wave.model.document.util.Point$El $r13, $r14;
        org.waveprotocol.wave.model.document.parser.SafeXmlPullParser r0;
        org.waveprotocol.wave.model.document.raw.RawDocument r6;
        java.lang.AssertionError $r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21;
        org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection r12;
        java.lang.String $r4, r18;
        org.waveprotocol.wave.model.document.parser.ItemType $r1, $r2;
        java.lang.Object r7, $r8, r15, r16, r17;

        r12 := @this: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection;

        r0 := @parameter0: org.waveprotocol.wave.model.document.parser.SafeXmlPullParser;

        r5 := @parameter1: org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener;

        r6 := @parameter2: org.waveprotocol.wave.model.document.raw.RawDocument;

        r7 := @parameter3: java.lang.Object;

        $i9 = (int) -1;

        i5 = $i9;

        $i11 = (int) -1;

        i6 = $i11;

        z0 = 0;

        z6 = 0;

        z5 = 0;

        z1 = 0;

        z4 = 0;

        z3 = 0;

        r15 = null;

        r16 = null;

        r17 = null;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

     label01:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        $r2 = <org.waveprotocol.wave.model.document.parser.ItemType: org.waveprotocol.wave.model.document.parser.ItemType END_ELEMENT>;

        if $r1 != $r2 goto label02;

        goto label16;

     label02:
        $r3 = <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$parser$ItemType>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.ItemType: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            default: goto label13;
        };

     label03:
        r17 = specialinvoke r12.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.Object parseElement(org.waveprotocol.wave.model.document.parser.SafeXmlPullParser,org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener,org.waveprotocol.wave.model.document.raw.RawDocument,java.lang.Object,java.lang.Object)>(r0, r5, r6, r7, null);

        goto label13;

     label04:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: java.lang.String getText()>();

        r18 = $r4;

        if r5 == null goto label08;

        $i2 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(124);

        i5 = $i2;

        i6 = $i2;

        if $i2 < 0 goto label05;

        r18 = staticinvoke <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.String removeChar(java.lang.String,int)>($r4, $i2);

        goto label07;

     label05:
        $i3 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(91);

        i5 = $i3;

        if $i3 < 0 goto label06;

        r18 = staticinvoke <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.String removeChar(java.lang.String,int)>($r4, $i3);

     label06:
        $i4 = virtualinvoke r18.<java.lang.String: int indexOf(int)>(93);

        i6 = $i4;

        if $i4 < 0 goto label07;

        r18 = staticinvoke <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: java.lang.String removeChar(java.lang.String,int)>(r18, $i4);

     label07:
        $z2 = <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: boolean $assertionsDisabled>;

        if $z2 != 0 goto label08;

        $i13 = (int) -1;

        if i6 == $i13 goto label08;

        if i6 >= i5 goto label08;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label08:
        $i7 = virtualinvoke r18.<java.lang.String: int length()>();

        if $i7 <= 0 goto label10;

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.document.raw.RawDocument: java.lang.Object createTextNode(java.lang.String,java.lang.Object,java.lang.Object)>(r18, r7, null);

        r17 = $r8;

        if i5 < 0 goto label09;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r8, i5);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener: void onStartSelection(org.waveprotocol.wave.model.document.util.Point)>($r10);

     label09:
        if i6 < 0 goto label12;

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r8, i6);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener: void onEndSelection(org.waveprotocol.wave.model.document.util.Point)>($r9);

        goto label12;

     label10:
        if i5 < 0 goto label11;

        z0 = 1;

        z6 = 1;

        z5 = 1;

     label11:
        if i6 < 0 goto label12;

        z1 = 1;

        z4 = 1;

        z3 = 1;

     label12:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

     label13:
        if z6 == 0 goto label14;

        $i15 = (int) -1;

        if i5 != $i15 goto label14;

        r15 = r17;

        z0 = 0;

        z6 = 0;

        z5 = 0;

     label14:
        if z3 == 0 goto label15;

        $i17 = (int) -1;

        if i6 != $i17 goto label15;

        r16 = r17;

        z1 = 0;

        z4 = 0;

        z3 = 0;

     label15:
        $i19 = (int) -1;

        i5 = $i19;

        $i21 = (int) -1;

        i6 = $i21;

        goto label01;

     label16:
        if z5 != 0 goto label17;

        if r15 == null goto label18;

     label17:
        $r13 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r7, r15);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener: void onStartSelection(org.waveprotocol.wave.model.document.util.Point)>($r13);

     label18:
        if z4 != 0 goto label19;

        if r16 == null goto label20;

     label19:
        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r7, r16);

        interfaceinvoke r5.<org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection$SelectionParsingListener: void onEndSelection(org.waveprotocol.wave.model.document.util.Point)>($r14);

     label20:
        interfaceinvoke r0.<org.waveprotocol.wave.model.document.parser.SafeXmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

        return r7;
    }

    private static java.lang.String removeChar(java.lang.String, int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0, $r3, $r5;
        java.lang.String r1, $r2, $r4, $r6;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = i0 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/raw/RawDocumentParserWithSelection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.raw.RawDocumentParserWithSelection: boolean $assertionsDisabled> = $z1;

        return;
    }
}
