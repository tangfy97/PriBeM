public class org.waveprotocol.wave.client.editor.extract.TypingExtractor extends java.lang.Object
{
    private final org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink sink;
    private final org.waveprotocol.wave.client.editor.impl.NodeManager manager;
    private final org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource selectionSource;
    private final java.util.List statePool;
    private int numStates;
    private final org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView;
    private final org.waveprotocol.wave.client.editor.content.ContentView renderedContentView;
    private final org.waveprotocol.wave.client.editor.extract.Repairer repairer;
    private boolean searchingForAdjacentArea;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task flushCmd;
    private final org.waveprotocol.wave.client.scheduler.TimerService timerService;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink, org.waveprotocol.wave.client.editor.impl.NodeManager, org.waveprotocol.wave.client.editor.impl.HtmlView, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.client.editor.extract.Repairer, org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r7;
        org.waveprotocol.wave.client.scheduler.SchedulerTimerService $r10;
        org.waveprotocol.wave.client.scheduler.Scheduler $r4;
        org.waveprotocol.wave.client.scheduler.Scheduler$Priority $r5;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink r1;
        org.waveprotocol.wave.client.editor.impl.HtmlView r6;
        org.waveprotocol.wave.client.scheduler.TimerService $r11;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource r9;
        org.waveprotocol.wave.client.editor.extract.Repairer r8;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r6 := @parameter2: org.waveprotocol.wave.client.editor.impl.HtmlView;

        r7 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentView;

        r8 := @parameter4: org.waveprotocol.wave.client.editor.extract.Repairer;

        r9 := @parameter5: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource;

        $r10 = new org.waveprotocol.wave.client.scheduler.SchedulerTimerService;

        $r4 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r5 = <org.waveprotocol.wave.client.scheduler.Scheduler$Priority: org.waveprotocol.wave.client.scheduler.Scheduler$Priority CRITICAL>;

        specialinvoke $r10.<org.waveprotocol.wave.client.scheduler.SchedulerTimerService: void <init>(org.waveprotocol.wave.client.scheduler.Scheduler,org.waveprotocol.wave.client.scheduler.Scheduler$Priority)>($r4, $r5);

        $r11 = (org.waveprotocol.wave.client.scheduler.TimerService) $r10;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink,org.waveprotocol.wave.client.editor.impl.NodeManager,org.waveprotocol.wave.client.scheduler.TimerService,org.waveprotocol.wave.client.editor.impl.HtmlView,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.client.editor.extract.Repairer,org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource)>(r1, r2, $r11, r6, r7, r8, r9);

        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink, org.waveprotocol.wave.client.editor.impl.NodeManager, org.waveprotocol.wave.client.scheduler.TimerService, org.waveprotocol.wave.client.editor.impl.HtmlView, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.client.editor.extract.Repairer, org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r7;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink r2;
        org.waveprotocol.wave.client.editor.impl.HtmlView r6;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.client.scheduler.TimerService r5;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource r4;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$1 $r9;
        org.waveprotocol.wave.client.editor.extract.Repairer r8;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r5 := @parameter2: org.waveprotocol.wave.client.scheduler.TimerService;

        r6 := @parameter3: org.waveprotocol.wave.client.editor.impl.HtmlView;

        r7 := @parameter4: org.waveprotocol.wave.client.editor.content.ContentView;

        r8 := @parameter5: org.waveprotocol.wave.client.editor.extract.Repairer;

        r4 := @parameter6: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool> = $r1;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates> = 0;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean searchingForAdjacentArea> = 0;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink sink> = r2;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.NodeManager manager> = r3;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource selectionSource> = r4;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.scheduler.TimerService timerService> = r5;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView> = r6;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView> = r7;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = r8;

        $r9 = new org.waveprotocol.wave.client.editor.extract.TypingExtractor$1;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$1: void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>(r0);

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.scheduler.Scheduler$Task flushCmd> = $r9;

        return;
    }

    public void somethingHappened(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r22;
        org.waveprotocol.wave.model.document.util.Point$Tx $r3, $r4;
        com.google.gwt.dom.client.Text $r16, r17;
        org.waveprotocol.wave.client.scheduler.TimerService $r21;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.gwt.core.client.JavaScriptObject $r10, $r11, $r14;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState $r1, $r19, r20;
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r5;
        org.waveprotocol.wave.client.editor.impl.HtmlView r18;
        java.lang.Object $r6, $r8, $r12;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        com.google.gwt.dom.client.Node r7, r9, $r13;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r15 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r15, "Typing extractor notified with null selection");

        $z0 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r13 = (com.google.gwt.dom.client.Node) $r12;

        $r14 = virtualinvoke $r13.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r16 = (com.google.gwt.dom.client.Text) $r14;

        goto label2;

     label1:
        $r16 = null;

     label2:
        r17 = $r16;

        if $r16 != null goto label4;

        r18 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView>;

        $r5 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r18, $r5);

        r7 = (com.google.gwt.dom.client.Node) $r6;

        $r8 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r9 = (com.google.gwt.dom.client.Node) $r8;

        if r7 == null goto label3;

        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r7);

        if $z3 == 0 goto label3;

        $r11 = virtualinvoke r7.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r17 = (com.google.gwt.dom.client.Text) $r11;

        r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r17, 0);

        goto label4;

     label3:
        if r9 == null goto label4;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r9);

        if $z2 == 0 goto label4;

        $r10 = virtualinvoke r9.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r17 = (com.google.gwt.dom.client.Text) $r10;

        $i0 = virtualinvoke r17.<com.google.gwt.dom.client.Text: int getLength()>();

        r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r17, $i0);

     label4:
        $r19 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState findTypingState(org.waveprotocol.wave.model.document.util.Point)>(r15);

        r20 = $r19;

        if $r19 != null goto label8;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState getFreshTypingState()>();

        r20 = $r1;

        if r17 == null goto label5;

        $r3 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "previousSelectionStart must be a text point");

        $r4 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx asTextPoint()>();

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void access$800(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState,org.waveprotocol.wave.model.document.util.Point$Tx)>($r1, $r4);

        goto label9;

     label5:
        $z1 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 != 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "previousSelectionStart must not be a text point");

        $r2 = virtualinvoke r15.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void access$900(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState,org.waveprotocol.wave.model.document.util.Point$El)>($r1, $r2);

        goto label9;

     label8:
        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void access$1000(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState,org.waveprotocol.wave.model.document.util.Point)>($r19, r15);

     label9:
        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void access$1100(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState,com.google.gwt.dom.client.Text)>(r20, r17);

        $r21 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.scheduler.TimerService timerService>;

        $r22 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.scheduler.Scheduler$Task flushCmd>;

        interfaceinvoke $r21.<org.waveprotocol.wave.client.scheduler.TimerService: void schedule(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r22);

        return;
    }

    public void flush()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r4;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink $r1;
        java.util.List $r2;
        int $i0, i1;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink sink>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink: void aboutToFlush()>();

        i1 = 0;

     label1:
        $i0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        if i1 >= $i0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState) $r3;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean access$1200(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState)>(r4);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void flush()>();

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates> = 0;

        return;
    }

    public boolean isBusy()
    {
        java.util.List $r1;
        int $i0, i1;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        i1 = 0;

     label1:
        $i0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        if i1 >= $i0 goto label4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState) $r2;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean access$1200(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState)>(r3);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    private org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState findTypingState(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r3;
        java.util.List $r1;
        int $i0, i1;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.model.document.util.Point r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        i1 = 0;

     label1:
        $i0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        if i1 >= $i0 goto label4;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState) $r2;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean access$1200(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState)>(r3);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean access$1300(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState,org.waveprotocol.wave.model.document.util.Point)>(r3, r4);

        if $z1 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return null;
    }

    private org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState getFreshTypingState()
    {
        java.lang.AssertionError $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState $r4, $r7, $r9;
        java.util.List $r1, $r2, $r5, $r10;
        java.lang.Object $r3, $r6;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $i0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates> = $i1;

        $i2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i2 <= $i3 goto label1;

        $r9 = new org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor,org.waveprotocol.wave.client.editor.extract.TypingExtractor$1)>(r0, null);

        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        return $r9;

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $i6 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        $i7 = $i6 - 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i7);

        $r7 = (org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState) $r6;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean access$1200(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState)>($r7);

        if $z1 != 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: java.util.List statePool>;

        $i4 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: int numStates>;

        $i5 = $i4 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i5);

        $r4 = (org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState) $r3;

        return $r4;
    }

    private void checkRangeIsValid()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        return;
    }

    static void access$000(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void checkRangeIsValid()>();

        return;
    }

    static org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.impl.NodeManager access$300(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.NodeManager manager>;

        return $r1;
    }

    static boolean access$400(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $z0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean searchingForAdjacentArea>;

        return $z0;
    }

    static boolean access$402(org.waveprotocol.wave.client.editor.extract.TypingExtractor, boolean)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean searchingForAdjacentArea> = z0;

        return z0;
    }

    static org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink access$500(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink sink>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource access$600(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource selectionSource>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.extract.Repairer access$700(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.Repairer $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/TypingExtractor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
