public class org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet extends org.eclipse.jetty.websocket.WebSocketServlet
{
    org.waveprotocol.box.server.rpc.ServerRpcProvider provider;

    public void <init>(org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r1;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet;

        r1 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        specialinvoke r0.<org.eclipse.jetty.websocket.WebSocketServlet: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet: org.waveprotocol.box.server.rpc.ServerRpcProvider provider> = r1;

        return;
    }

    public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpSession $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        org.waveprotocol.box.server.authentication.SessionManager $r2;
        javax.servlet.http.HttpServletRequest r3;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r1, $r7;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$WebSocketConnection $r6;
        org.waveprotocol.box.server.rpc.WebSocketServerChannel $r8;
        java.lang.String r9;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r9 := @parameter1: java.lang.String;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        $r2 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager access$200(org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r1);

        $r4 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r5 = interfaceinvoke $r2.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r4);

        $r6 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$WebSocketConnection;

        $r7 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WaveWebSocketServlet: org.waveprotocol.box.server.rpc.ServerRpcProvider provider>;

        specialinvoke $r6.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WebSocketConnection: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r5, $r7);

        $r8 = virtualinvoke $r6.<org.waveprotocol.box.server.rpc.ServerRpcProvider$WebSocketConnection: org.waveprotocol.box.server.rpc.WebSocketServerChannel getWebSocketServerChannel()>();

        return $r8;
    }
}
