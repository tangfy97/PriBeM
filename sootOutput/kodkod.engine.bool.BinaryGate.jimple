final class kodkod.engine.bool.BinaryGate extends kodkod.engine.bool.MultiGate
{
    private final kodkod.engine.bool.BooleanFormula low;
    private final kodkod.engine.bool.BooleanFormula high;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/BinaryGate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.BinaryGate: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.engine.bool.Operator$Nary, int, int, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r1;
        kodkod.engine.bool.BinaryGate r0;
        kodkod.engine.bool.BooleanFormula r2, r3;
        java.lang.AssertionError $r4;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BinaryGate;

        r1 := @parameter0: kodkod.engine.bool.Operator$Nary;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter4: kodkod.engine.bool.BooleanFormula;

        specialinvoke r0.<kodkod.engine.bool.MultiGate: void <init>(kodkod.engine.bool.Operator$Nary,int,int)>(r1, i0, i1);

        $z0 = <kodkod.engine.bool.BinaryGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i3 = virtualinvoke r3.<kodkod.engine.bool.BooleanFormula: int label()>();

        if $i2 < $i3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula low> = r2;

        r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula high> = r3;

        return;
    }

    int contains(kodkod.engine.bool.Operator, int, int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BooleanFormula $r3, $r4;
        java.lang.AssertionError $r6;
        kodkod.engine.bool.Operator r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        boolean $z0;
        kodkod.engine.bool.BinaryGate r0;

        r0 := @this: kodkod.engine.bool.BinaryGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = <kodkod.engine.bool.BinaryGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $i1 = virtualinvoke r0.<kodkod.engine.bool.BinaryGate: int label()>();

        if i0 != $i1 goto label2;

        return 1;

     label2:
        $r2 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.Operator$Nary op>;

        if $r2 != r1 goto label3;

        if i2 < 2 goto label3;

        $i3 = virtualinvoke r0.<kodkod.engine.bool.BinaryGate: int label()>();

        if i0 > $i3 goto label3;

        $i4 = neg i0;

        $i5 = virtualinvoke r0.<kodkod.engine.bool.BinaryGate: int label()>();

        if $i4 <= $i5 goto label4;

     label3:
        $i12 = (int) -1;

        return $i12;

     label4:
        $r3 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula low>;

        $i6 = i2 - 1;

        $i7 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFormula: int contains(kodkod.engine.bool.Operator,int,int)>(r1, i0, $i6);

        if $i7 <= 0 goto label5;

        return $i7;

     label5:
        $r4 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula high>;

        $i8 = i2 - $i7;

        $i9 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFormula: int contains(kodkod.engine.bool.Operator,int,int)>(r1, i0, $i8);

        if $i9 <= 0 goto label6;

        $i10 = $i9 - $i7;

        goto label7;

     label6:
        $i10 = $i9 + $i7;

     label7:
        return $i10;
    }

    void flatten(kodkod.engine.bool.Operator, java.util.Set, int)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        kodkod.engine.bool.BinaryGate r0;
        kodkod.engine.bool.BooleanFormula $r4, $r5;
        java.util.Set r3;
        java.lang.AssertionError $r6;
        kodkod.engine.bool.Operator r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BinaryGate;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        r3 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $z0 = <kodkod.engine.bool.BinaryGate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.Operator$Nary op>;

        if $r2 != r1 goto label2;

        if i0 <= 1 goto label2;

        $i1 = interfaceinvoke r3.<java.util.Set: int size()>();

        $r4 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula low>;

        $i2 = i0 - 1;

        virtualinvoke $r4.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r1, r3, $i2);

        $r5 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula high>;

        $i3 = interfaceinvoke r3.<java.util.Set: int size()>();

        $i4 = $i3 - $i1;

        $i5 = i0 - $i4;

        virtualinvoke $r5.<kodkod.engine.bool.BooleanFormula: void flatten(kodkod.engine.bool.Operator,java.util.Set,int)>(r1, r3, $i5);

        goto label3;

     label2:
        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label3:
        return;
    }

    public int size()
    {
        kodkod.engine.bool.BinaryGate r0;

        r0 := @this: kodkod.engine.bool.BinaryGate;

        return 2;
    }

    public java.util.Iterator iterator()
    {
        kodkod.engine.bool.BinaryGate r1;
        kodkod.engine.bool.BinaryGate$1 $r0;

        r1 := @this: kodkod.engine.bool.BinaryGate;

        $r0 = new kodkod.engine.bool.BinaryGate$1;

        specialinvoke $r0.<kodkod.engine.bool.BinaryGate$1: void <init>(kodkod.engine.bool.BinaryGate)>(r1);

        return $r0;
    }

    public kodkod.engine.bool.BooleanFormula input(int)
    {
        java.lang.IndexOutOfBoundsException $r3;
        kodkod.engine.bool.BinaryGate r0;
        kodkod.engine.bool.BooleanFormula $r1, $r2;
        int i0;

        r0 := @this: kodkod.engine.bool.BinaryGate;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula low>;

        return $r2;

     label2:
        $r1 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula high>;

        return $r1;

     label3:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    static kodkod.engine.bool.BooleanFormula access$0(kodkod.engine.bool.BinaryGate)
    {
        kodkod.engine.bool.BinaryGate r0;
        kodkod.engine.bool.BooleanFormula $r1;

        r0 := @parameter0: kodkod.engine.bool.BinaryGate;

        $r1 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula low>;

        return $r1;
    }

    static kodkod.engine.bool.BooleanFormula access$1(kodkod.engine.bool.BinaryGate)
    {
        kodkod.engine.bool.BinaryGate r0;
        kodkod.engine.bool.BooleanFormula $r1;

        r0 := @parameter0: kodkod.engine.bool.BinaryGate;

        $r1 = r0.<kodkod.engine.bool.BinaryGate: kodkod.engine.bool.BooleanFormula high>;

        return $r1;
    }
}
