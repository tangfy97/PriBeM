class org.apache.lucene.search.spans.SpanNotQuery$1 extends org.apache.lucene.search.spans.Spans
{
    private org.apache.lucene.search.spans.Spans includeSpans;
    private boolean moreInclude;
    private org.apache.lucene.search.spans.Spans excludeSpans;
    private boolean moreExclude;
    final org.apache.lucene.index.AtomicReaderContext val$context;
    final org.apache.lucene.util.Bits val$acceptDocs;
    final java.util.Map val$termContexts;
    final org.apache.lucene.search.spans.SpanNotQuery this$0;

    void <init>(org.apache.lucene.search.spans.SpanNotQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNotQuery r1, $r5, $r11;
        java.util.Map r4, $r7, $r13;
        org.apache.lucene.search.spans.SpanQuery $r6, $r12;
        org.apache.lucene.util.Bits r3, $r8, $r14;
        boolean $z0;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        org.apache.lucene.index.AtomicReaderContext r2, $r9, $r15;
        org.apache.lucene.search.spans.Spans $r10, $r16, $r17;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanNotQuery;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter2: org.apache.lucene.util.Bits;

        r4 := @parameter3: java.util.Map;

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.SpanNotQuery this$0> = r1;

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.index.AtomicReaderContext val$context> = r2;

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.util.Bits val$acceptDocs> = r3;

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: java.util.Map val$termContexts> = r4;

        specialinvoke r0.<org.apache.lucene.search.spans.Spans: void <init>()>();

        $r5 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.SpanNotQuery this$0>;

        $r6 = staticinvoke <org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery access$000(org.apache.lucene.search.spans.SpanNotQuery)>($r5);

        $r9 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.index.AtomicReaderContext val$context>;

        $r8 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.util.Bits val$acceptDocs>;

        $r7 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: java.util.Map val$termContexts>;

        $r10 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>($r9, $r8, $r7);

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans> = $r10;

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude> = 1;

        $r11 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.SpanNotQuery this$0>;

        $r12 = staticinvoke <org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery access$100(org.apache.lucene.search.spans.SpanNotQuery)>($r11);

        $r15 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.index.AtomicReaderContext val$context>;

        $r14 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.util.Bits val$acceptDocs>;

        $r13 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: java.util.Map val$termContexts>;

        $r16 = virtualinvoke $r12.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>($r15, $r14, $r13);

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans> = $r16;

        $r17 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $z0 = virtualinvoke $r17.<org.apache.lucene.search.spans.Spans: boolean next()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude> = $z0;

        return;
    }

    public boolean next() throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.lucene.search.spans.Spans $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $z0 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude>;

        if $z0 == 0 goto label1;

        $r15 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $z5 = virtualinvoke $r15.<org.apache.lucene.search.spans.Spans: boolean next()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude> = $z5;

     label1:
        $z6 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude>;

        if $z6 == 0 goto label5;

        $z1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z1 == 0 goto label5;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r2 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i0 <= $i1 goto label2;

        $r14 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $r13 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i10 = virtualinvoke $r13.<org.apache.lucene.search.spans.Spans: int doc()>();

        $z4 = virtualinvoke $r14.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>($i10);

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude> = $z4;

     label2:
        $z7 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z7 == 0 goto label3;

        $r8 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i6 = virtualinvoke $r8.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r9 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i7 = virtualinvoke $r9.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i6 != $i7 goto label3;

        $r10 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i8 = virtualinvoke $r10.<org.apache.lucene.search.spans.Spans: int end()>();

        $r11 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i9 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i8 > $i9 goto label3;

        $r12 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $z3 = virtualinvoke $r12.<org.apache.lucene.search.spans.Spans: boolean next()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude> = $z3;

        goto label2;

     label3:
        $z8 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z8 == 0 goto label5;

        $r3 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i2 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r4 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i3 = virtualinvoke $r4.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i2 != $i3 goto label5;

        $r5 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i4 = virtualinvoke $r5.<org.apache.lucene.search.spans.Spans: int end()>();

        $r6 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i5 = virtualinvoke $r6.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i4 > $i5 goto label4;

        goto label5;

     label4:
        $r7 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $z2 = virtualinvoke $r7.<org.apache.lucene.search.spans.Spans: boolean next()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude> = $z2;

        goto label1;

     label5:
        $z9 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude>;

        return $z9;
    }

    public boolean skipTo(int) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.apache.lucene.search.spans.Spans $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        i11 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude>;

        if $z0 == 0 goto label1;

        $r14 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $z6 = virtualinvoke $r14.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>(i11);

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude> = $z6;

     label1:
        $z1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreInclude>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z2 == 0 goto label3;

        $r10 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i8 = virtualinvoke $r10.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r11 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i9 = virtualinvoke $r11.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i8 <= $i9 goto label3;

        $r13 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $r12 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i10 = virtualinvoke $r12.<org.apache.lucene.search.spans.Spans: int doc()>();

        $z5 = virtualinvoke $r13.<org.apache.lucene.search.spans.Spans: boolean skipTo(int)>($i10);

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude> = $z5;

     label3:
        $z7 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z7 == 0 goto label4;

        $r5 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i4 = virtualinvoke $r5.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r6 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i5 = virtualinvoke $r6.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i4 != $i5 goto label4;

        $r7 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i6 = virtualinvoke $r7.<org.apache.lucene.search.spans.Spans: int end()>();

        $r8 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i7 = virtualinvoke $r8.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i6 > $i7 goto label4;

        $r9 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $z4 = virtualinvoke $r9.<org.apache.lucene.search.spans.Spans: boolean next()>();

        r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude> = $z4;

        goto label3;

     label4:
        $z8 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean moreExclude>;

        if $z8 == 0 goto label5;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        $r2 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i0 != $i1 goto label5;

        $r3 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i2 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: int end()>();

        $r4 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans excludeSpans>;

        $i3 = virtualinvoke $r4.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i2 > $i3 goto label6;

     label5:
        return 1;

     label6:
        $z3 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNotQuery$1: boolean next()>();

        return $z3;
    }

    public int doc()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        return $i0;
    }

    public int start()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int start()>();

        return $i0;
    }

    public int end()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: int end()>();

        return $i0;
    }

    public java.util.Collection getPayload() throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        java.util.Collection $r4;
        org.apache.lucene.search.spans.Spans $r1, $r3;
        boolean $z0;
        java.util.ArrayList $r2, r5;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        r5 = null;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: java.util.Collection getPayload()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r5 = $r2;

     label1:
        return r5;
    }

    public boolean isPayloadAvailable() throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        org.apache.lucene.search.spans.Spans $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: boolean isPayloadAvailable()>();

        return $z0;
    }

    public long cost()
    {
        org.apache.lucene.search.spans.SpanNotQuery$1 r0;
        long $l0;
        org.apache.lucene.search.spans.Spans $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.Spans includeSpans>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.search.spans.Spans: long cost()>();

        return $l0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.search.spans.SpanNotQuery $r3;
        org.apache.lucene.search.spans.SpanNotQuery$1 r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: org.apache.lucene.search.spans.SpanNotQuery$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spans(");

        $r3 = r2.<org.apache.lucene.search.spans.SpanNotQuery$1: org.apache.lucene.search.spans.SpanNotQuery this$0>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.SpanNotQuery: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
