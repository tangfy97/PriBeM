public class com.mycila.inject.internal.cglib.core.TypeUtils extends java.lang.Object
{
    private static final java.util.Map transforms;
    private static final java.util.Map rtransforms;

    private void <init>()
    {
        com.mycila.inject.internal.cglib.core.TypeUtils r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.TypeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.asm.Type getType(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r7;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        java.lang.String r2, $r3, $r6;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r6);

        return $r7;
    }

    public static boolean isFinal(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 16 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isStatic(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 8 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isProtected(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 4 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isPublic(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 1 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAbstract(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 1024 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isInterface(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 512 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isPrivate(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 2 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isSynthetic(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 4096 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isBridge(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = 64 & i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getPackageName(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String getClassName(com.mycila.inject.internal.asm.Type)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String getPackageName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getPackageName(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        return $r1;
    }

    public static java.lang.String upperFirst(java.lang.String)
    {
        char $c1, $c2;
        java.lang.StringBuffer $r1, $r2, $r4;
        int $i0;
        java.lang.String r0, $r3, $r5;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String getClassName(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r3;
        java.lang.StringBuffer $r2, $r5, $r6;
        java.util.Map $r8;
        java.lang.Object $r10;
        java.lang.String $r1, $r4, $r7, $r9, $r11;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        $r8 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map rtransforms>;

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.String) $r10;

        return $r11;

     label1:
        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z1 == 0 goto label2;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type getComponentType(com.mycila.inject.internal.asm.Type)>(r0);

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String getClassName(com.mycila.inject.internal.asm.Type)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label2:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getClassName()>();

        return $r1;
    }

    public static com.mycila.inject.internal.asm.Type[] add(com.mycila.inject.internal.asm.Type[], com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r2;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        com.mycila.inject.internal.asm.Type[] r0, r3, $r4;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type[];

        r2 := @parameter1: com.mycila.inject.internal.asm.Type;

        if r0 != null goto label1;

        $r4 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r4[0] = r2;

        return $r4;

     label1:
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        r3 = newarray (com.mycila.inject.internal.asm.Type)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r3, 0, $i2);

        $i3 = lengthof r0;

        r3[$i3] = r2;

        return r3;
    }

    public static com.mycila.inject.internal.asm.Type[] add(com.mycila.inject.internal.asm.Type[], com.mycila.inject.internal.asm.Type[])
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.mycila.inject.internal.asm.Type[] r0, r1, r2;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type[];

        r1 := @parameter1: com.mycila.inject.internal.asm.Type[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (com.mycila.inject.internal.asm.Type)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static com.mycila.inject.internal.asm.Type fromInternalName(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r1, $r3, $r4;
        com.mycila.inject.internal.asm.Type $r6;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r5);

        return $r6;
    }

    public static com.mycila.inject.internal.asm.Type[] fromInternalNames(java.lang.String[])
    {
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.Type $r3;
        java.lang.String[] r0;
        java.lang.String $r2;
        com.mycila.inject.internal.asm.Type[] r1;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (com.mycila.inject.internal.asm.Type)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type fromInternalName(java.lang.String)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static int getStackSize(com.mycila.inject.internal.asm.Type[])
    {
        int $i0, $i1, i2, i3;
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.asm.Type[] r0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type[];

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label2;

        $r1 = r0[i3];

        $i1 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: int getSize()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public static java.lang.String[] toInternalNames(com.mycila.inject.internal.asm.Type[])
    {
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.Type $r2;
        java.lang.String[] r1;
        java.lang.String $r3;
        com.mycila.inject.internal.asm.Type[] r0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r0, $r1, $r2, $r6, $r8;
        boolean $z0;
        java.util.Iterator $r5;
        com.mycila.inject.internal.cglib.core.Signature $r7;
        java.util.List $r4;
        java.lang.Object $r9;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(40, $i0);

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(41, $i1);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i3 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i1);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $i4 = $i1 + 1;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.List parseTypes(java.lang.String,int,int)>(r0, $i4, $i2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        goto label1;

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String map(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = new com.mycila.inject.internal.cglib.core.Signature;

        $r8 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>($r2, $r8);

        return $r7;
    }

    public static com.mycila.inject.internal.asm.Type parseType(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String map(java.lang.String)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.asm.Type[] parseTypes(java.lang.String)
    {
        com.mycila.inject.internal.asm.Type $r5;
        java.util.List $r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        java.lang.String r0, $r4;
        com.mycila.inject.internal.asm.Type[] r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.List parseTypes(java.lang.String,int,int)>(r0, 0, $i0);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (com.mycila.inject.internal.asm.Type)[$i1];

        i3 = 0;

     label1:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r4);

        r2[i3] = $r5;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static com.mycila.inject.internal.cglib.core.Signature parseConstructor(com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.core.Signature $r2;
        com.mycila.inject.internal.asm.Type $r4;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.String $r3, $r5;
        com.mycila.inject.internal.asm.Type[] r1;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r4 = r1[i1];

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("V");

        $r2 = new com.mycila.inject.internal.cglib.core.Signature;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>("<init>", $r3);

        return $r2;
    }

    public static com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)
    {
        java.lang.StringBuffer $r0, $r1, $r3, $r4;
        com.mycila.inject.internal.cglib.core.Signature $r6;
        java.lang.String r2, $r5;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("void <init>(");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>($r5);

        return $r6;
    }

    private static java.util.List parseTypes(java.lang.String, int, int)
    {
        java.util.ArrayList $r0;
        int $i0, i1, i2;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(5);

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i2);

        if $i0 >= 0 goto label2;

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String map(java.lang.String)>($r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = $i0 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i1);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String map(java.lang.String)>($r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        return $r0;
    }

    private static java.lang.String map(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r5, $r7, $r9, $r10, $r11;
        java.util.Map $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r2, $r4, $r6, $r8, $r12, $r13, r14;
        boolean $z0;
        java.lang.Object $r1;

        r14 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return r14;

     label1:
        $r0 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14);

        r2 = (java.lang.String) $r1;

        if r2 == null goto label2;

        return r2;

     label2:
        $i0 = virtualinvoke r14.<java.lang.String: int indexOf(int)>(46);

        if $i0 >= 0 goto label3;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java.lang.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String map(java.lang.String)>($r12);

        return $r13;

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i7 = 0;

     label4:
        $i1 = virtualinvoke r14.<java.lang.String: int indexOf(java.lang.String,int)>("[]", i7);

        $i2 = $i1 + 1;

        i7 = $i2;

        if $i2 <= 0 goto label5;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        goto label4;

     label5:
        $i3 = virtualinvoke r14.<java.lang.String: int length()>();

        $i4 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        $i5 = $i4 * 2;

        $i6 = $i3 - $i5;

        $r4 = virtualinvoke r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r8 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static com.mycila.inject.internal.asm.Type getBoxedType(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label8;
            case 4: goto label7;
            case 5: goto label6;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label3;
            default: goto label9;
        };

     label1:
        $r7 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CHARACTER>;

        return $r7;

     label2:
        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BOOLEAN>;

        return $r8;

     label3:
        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_DOUBLE>;

        return $r1;

     label4:
        $r3 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_FLOAT>;

        return $r3;

     label5:
        $r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_LONG>;

        return $r2;

     label6:
        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_INTEGER>;

        return $r4;

     label7:
        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_SHORT>;

        return $r5;

     label8:
        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BYTE>;

        return $r6;

     label9:
        return r0;
    }

    public static com.mycila.inject.internal.asm.Type getUnboxedType(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_INTEGER>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r16 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        return $r16;

     label1:
        $r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BOOLEAN>;

        $z1 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r15 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BOOLEAN_TYPE>;

        return $r15;

     label2:
        $r3 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_DOUBLE>;

        $z2 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        $r14 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        return $r14;

     label3:
        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_LONG>;

        $z3 = virtualinvoke $r4.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        $r13 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        return $r13;

     label4:
        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CHARACTER>;

        $z4 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label5;

        $r12 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        return $r12;

     label5:
        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BYTE>;

        $z5 = virtualinvoke $r6.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z5 == 0 goto label6;

        $r11 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        return $r11;

     label6:
        $r7 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_FLOAT>;

        $z6 = virtualinvoke $r7.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z6 == 0 goto label7;

        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        return $r10;

     label7:
        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_SHORT>;

        $z7 = virtualinvoke $r8.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r0);

        if $z7 == 0 goto label8;

        $r9 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        return $r9;

     label8:
        return r0;
    }

    public static boolean isArray(com.mycila.inject.internal.asm.Type)
    {
        int $i0;
        com.mycila.inject.internal.asm.Type r0;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 != 9 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.mycila.inject.internal.asm.Type getComponentType(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.lang.String $r1, $r2, $r9;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an array");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r2);

        return $r3;
    }

    public static boolean isPrimitive(com.mycila.inject.internal.asm.Type)
    {
        int $i0;
        com.mycila.inject.internal.asm.Type r0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static java.lang.String emulateClassGetName(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r3;

     label1:
        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String getClassName(com.mycila.inject.internal.asm.Type)>(r0);

        return $r1;
    }

    public static boolean isConstructor(com.mycila.inject.internal.cglib.core.MethodInfo)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.cglib.core.MethodInfo r0;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.MethodInfo;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        return $z0;
    }

    public static com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])
    {
        int $i0, $i1, i2;
        java.lang.Class[] r0;
        com.mycila.inject.internal.asm.Type $r3;
        java.lang.Class $r2;
        com.mycila.inject.internal.asm.Type[] r1;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (com.mycila.inject.internal.asm.Type)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static int ICONST(int)
    {
        int i0, $i2;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label8;
        };

     label1:
        return 2;

     label2:
        return 3;

     label3:
        return 4;

     label4:
        return 5;

     label5:
        return 6;

     label6:
        return 7;

     label7:
        return 8;

     label8:
        $i2 = (int) -1;

        return $i2;
    }

    public static int LCONST(long)
    {
        byte $b1, $b2;
        int $i4;
        long l0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 9;

     label1:
        $b2 = l0 cmp 1L;

        if $b2 != 0 goto label2;

        return 10;

     label2:
        $i4 = (int) -1;

        return $i4;
    }

    public static int FCONST(float)
    {
        byte $b0, $b1, $b2;
        int $i4;
        float f0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 11;

     label1:
        $b1 = f0 cmpl 1.0F;

        if $b1 != 0 goto label2;

        return 12;

     label2:
        $b2 = f0 cmpl 2.0F;

        if $b2 != 0 goto label3;

        return 13;

     label3:
        $i4 = (int) -1;

        return $i4;
    }

    public static int DCONST(double)
    {
        byte $b0, $b1;
        int $i3;
        double d0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 14;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return 15;

     label2:
        $i3 = (int) -1;

        return $i3;
    }

    public static int NEWARRAY(com.mycila.inject.internal.asm.Type)
    {
        int $i0, $i2;
        com.mycila.inject.internal.asm.Type r0;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label8;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label7;
            case 5: goto label5;
            case 6: goto label4;
            case 7: goto label6;
            case 8: goto label3;
            default: goto label9;
        };

     label1:
        return 8;

     label2:
        return 5;

     label3:
        return 7;

     label4:
        return 6;

     label5:
        return 10;

     label6:
        return 11;

     label7:
        return 9;

     label8:
        return 4;

     label9:
        $i2 = (int) -1;

        return $i2;
    }

    public static java.lang.String escapeType(java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label01:
        if i2 >= $i0 goto label11;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 36: goto label02;
            case 40: goto label06;
            case 41: goto label07;
            case 46: goto label03;
            case 47: goto label08;
            case 59: goto label05;
            case 91: goto label04;
            default: goto label09;
        };

     label02:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$24");

        goto label10;

     label03:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$2E");

        goto label10;

     label04:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$5B");

        goto label10;

     label05:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$3B");

        goto label10;

     label06:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$28");

        goto label10;

     label07:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$29");

        goto label10;

     label08:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$2F");

        goto label10;

     label09:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1;
        java.util.Map $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map rtransforms> = $r1;

        $r2 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", "V");

        $r3 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");

        $r4 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");

        $r5 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");

        $r6 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");

        $r7 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");

        $r8 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");

        $r9 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");

        $r10 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");

        $r12 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map transforms>;

        $r11 = <com.mycila.inject.internal.cglib.core.TypeUtils: java.util.Map rtransforms>;

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: void reverse(java.util.Map,java.util.Map)>($r12, $r11);

        return;
    }
}
