public class org.mozilla.javascript.serialize.ScriptableOutputStream extends java.io.ObjectOutputStream
{
    private org.mozilla.javascript.Scriptable scope;
    private java.util.Hashtable table;

    public void <init>(java.io.OutputStream, org.mozilla.javascript.Scriptable) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        java.util.Hashtable $r3, $r4;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        specialinvoke r0.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: org.mozilla.javascript.Scriptable scope> = r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>(int)>(31);

        r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table> = $r3;

        $r4 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, "");

        virtualinvoke r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: boolean enableReplaceObject(boolean)>(1);

        virtualinvoke r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: void excludeStandardObjectNames()>();

        return;
    }

    public void addOptionalExcludedName(java.lang.String)
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        org.mozilla.javascript.UniqueTag $r4;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r13;
        java.lang.String r1, $r12, $r14;
        java.util.Hashtable $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        org.mozilla.javascript.Scriptable $r2;
        java.lang.Object $r3;
        java.lang.Class $r11;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: org.mozilla.javascript.Scriptable scope>;

        $r3 = staticinvoke <org.mozilla.javascript.serialize.ScriptableOutputStream: java.lang.Object lookupQualifiedName(org.mozilla.javascript.Scriptable,java.lang.String)>($r2, r1);

        if $r3 == null goto label2;

        $r4 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NOT_FOUND>;

        if $r3 == $r4 goto label2;

        $z0 = $r3 instanceof org.mozilla.javascript.Scriptable;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Object for excluded name ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a Scriptable, it is ");

        $r11 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label1:
        $r5 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

     label2:
        return;
    }

    public void addExcludedName(java.lang.String)
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        java.lang.IllegalArgumentException $r5;
        org.mozilla.javascript.Scriptable $r2;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        java.lang.Object $r3;
        java.lang.String r1, $r10;
        java.util.Hashtable $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: org.mozilla.javascript.Scriptable scope>;

        $r3 = staticinvoke <org.mozilla.javascript.serialize.ScriptableOutputStream: java.lang.Object lookupQualifiedName(org.mozilla.javascript.Scriptable,java.lang.String)>($r2, r1);

        $z0 = $r3 instanceof org.mozilla.javascript.Scriptable;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Object for excluded name ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r4 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public boolean hasExcludedName(java.lang.String)
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void removeExcludedName(java.lang.String)
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void excludeStandardObjectNames()
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream r2;
        java.lang.String[] $r0, $r1;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, $r4;

        r2 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        $r0 = newarray (java.lang.String)[21];

        $r0[0] = "Object";

        $r0[1] = "Object.prototype";

        $r0[2] = "Function";

        $r0[3] = "Function.prototype";

        $r0[4] = "String";

        $r0[5] = "String.prototype";

        $r0[6] = "Math";

        $r0[7] = "Array";

        $r0[8] = "Array.prototype";

        $r0[9] = "Error";

        $r0[10] = "Error.prototype";

        $r0[11] = "Number";

        $r0[12] = "Number.prototype";

        $r0[13] = "Date";

        $r0[14] = "Date.prototype";

        $r0[15] = "RegExp";

        $r0[16] = "RegExp.prototype";

        $r0[17] = "Script";

        $r0[18] = "Script.prototype";

        $r0[19] = "Continuation";

        $r0[20] = "Continuation.prototype";

        i2 = 0;

     label1:
        $i0 = lengthof $r0;

        if i2 >= $i0 goto label2;

        $r4 = $r0[i2];

        virtualinvoke r2.<org.mozilla.javascript.serialize.ScriptableOutputStream: void addExcludedName(java.lang.String)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "XML";

        $r1[1] = "XML.prototype";

        $r1[2] = "XMLList";

        $r1[3] = "XMLList.prototype";

        i3 = 0;

     label3:
        $i1 = lengthof $r1;

        if i3 >= $i1 goto label4;

        $r3 = $r1[i3];

        virtualinvoke r2.<org.mozilla.javascript.serialize.ScriptableOutputStream: void addOptionalExcludedName(java.lang.String)>($r3);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    static java.lang.Object lookupQualifiedName(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r2, $r4;
        java.util.StringTokenizer $r0;
        java.lang.Object $r5, r6;
        java.lang.String r1, $r3;
        boolean $z0, $z1;

        r2 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ".");

        r6 = r2;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = (org.mozilla.javascript.Scriptable) r6;

        $r5 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>($r4, $r3);

        r6 = $r5;

        if $r5 == null goto label2;

        $z1 = $r5 instanceof org.mozilla.javascript.Scriptable;

        if $z1 != 0 goto label1;

        goto label2;

     label2:
        return r6;
    }

    protected java.lang.Object replaceObject(java.lang.Object) throws java.io.IOException
    {
        org.mozilla.javascript.serialize.ScriptableOutputStream$PendingLookup $r5;
        org.mozilla.javascript.serialize.ScriptableOutputStream r0;
        java.lang.Object r1, $r3;
        java.lang.String r4;
        java.util.Hashtable $r2;

        r0 := @this: org.mozilla.javascript.serialize.ScriptableOutputStream;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.mozilla.javascript.serialize.ScriptableOutputStream: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        return r1;

     label1:
        $r5 = new org.mozilla.javascript.serialize.ScriptableOutputStream$PendingLookup;

        specialinvoke $r5.<org.mozilla.javascript.serialize.ScriptableOutputStream$PendingLookup: void <init>(java.lang.String)>(r4);

        return $r5;
    }
}
