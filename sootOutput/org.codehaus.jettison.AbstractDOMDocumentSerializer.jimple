public class org.codehaus.jettison.AbstractDOMDocumentSerializer extends java.lang.Object
{
    private java.io.OutputStream output;
    private org.codehaus.jettison.AbstractXMLOutputFactory writerFactory;

    public void <init>(java.io.OutputStream, org.codehaus.jettison.AbstractXMLOutputFactory)
    {
        java.io.OutputStream r1;
        org.codehaus.jettison.AbstractDOMDocumentSerializer r0;
        org.codehaus.jettison.AbstractXMLOutputFactory r2;

        r0 := @this: org.codehaus.jettison.AbstractDOMDocumentSerializer;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.codehaus.jettison.AbstractXMLOutputFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.AbstractDOMDocumentSerializer: java.io.OutputStream output> = r1;

        r0.<org.codehaus.jettison.AbstractDOMDocumentSerializer: org.codehaus.jettison.AbstractXMLOutputFactory writerFactory> = r2;

        return;
    }

    public void serialize(org.w3c.dom.Element) throws java.io.IOException
    {
        javax.xml.transform.dom.DOMSource $r2;
        java.lang.IllegalStateException $r10;
        javax.xml.stream.XMLInputFactory $r4;
        javax.xml.stream.XMLEventWriter $r9;
        javax.xml.stream.XMLStreamReader $r5;
        javax.xml.stream.XMLStreamException $r11;
        java.lang.String $r16;
        java.io.OutputStream $r1, $r7;
        javax.xml.stream.XMLEventReader $r6;
        java.io.IOException $r12;
        org.w3c.dom.Element r3;
        org.codehaus.jettison.AbstractDOMDocumentSerializer r0;
        org.codehaus.jettison.AbstractXMLOutputFactory $r8;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @this: org.codehaus.jettison.AbstractDOMDocumentSerializer;

        r3 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.codehaus.jettison.AbstractDOMDocumentSerializer: java.io.OutputStream output>;

        if $r1 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OutputStream cannot be null");

        throw $r10;

     label1:
        $r2 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r2.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r3);

        $r4 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>($r2);

        $r6 = virtualinvoke $r4.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.stream.XMLStreamReader)>($r5);

        $r8 = r0.<org.codehaus.jettison.AbstractDOMDocumentSerializer: org.codehaus.jettison.AbstractXMLOutputFactory writerFactory>;

        $r7 = r0.<org.codehaus.jettison.AbstractDOMDocumentSerializer: java.io.OutputStream output>;

        $r9 = virtualinvoke $r8.<org.codehaus.jettison.AbstractXMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream)>($r7);

        interfaceinvoke $r9.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.XMLEventReader)>($r6);

        interfaceinvoke $r9.<javax.xml.stream.XMLEventWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot serialize: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        virtualinvoke $r12.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }
}
