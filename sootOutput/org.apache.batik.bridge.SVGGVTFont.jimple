public final class org.apache.batik.bridge.SVGGVTFont extends java.lang.Object implements org.apache.batik.gvt.font.GVTFont, org.apache.batik.util.SVGConstants
{
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    private float fontSize;
    private org.apache.batik.gvt.font.GVTFontFace fontFace;
    private java.lang.String[] glyphUnicodes;
    private java.lang.String[] glyphNames;
    private java.lang.String[] glyphLangs;
    private java.lang.String[] glyphOrientations;
    private java.lang.String[] glyphForms;
    private org.w3c.dom.Element[] glyphElements;
    private org.w3c.dom.Element[] hkernElements;
    private org.w3c.dom.Element[] vkernElements;
    private org.apache.batik.bridge.BridgeContext ctx;
    private org.w3c.dom.Element textElement;
    private org.w3c.dom.Element missingGlyphElement;
    private org.apache.batik.gvt.font.KerningTable hKerningTable;
    private org.apache.batik.gvt.font.KerningTable vKerningTable;
    private java.lang.String language;
    private java.lang.String orientation;
    private float scale;
    private org.apache.batik.gvt.font.GVTLineMetrics lineMetrics;

    public void <init>(float, org.apache.batik.gvt.font.GVTFontFace, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[], org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element[], org.w3c.dom.Element, org.w3c.dom.Element[], org.w3c.dom.Element[], org.w3c.dom.Element)
    {
        org.apache.batik.gvt.font.GVTFontFace r1;
        java.lang.String[] r2, r3, r4, r5, r6;
        java.lang.String $r13, $r15;
        boolean $z0;
        org.apache.batik.bridge.SVGGVTFont r0;
        org.apache.batik.bridge.BridgeContext r7;
        org.apache.batik.css.engine.value.Value $r14;
        org.w3c.dom.Element r9, r12;
        float f0, $f1, $f2;
        org.w3c.dom.Element[] r8, r10, r11;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        f0 := @parameter0: float;

        r1 := @parameter1: org.apache.batik.gvt.font.GVTFontFace;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.String[];

        r6 := @parameter6: java.lang.String[];

        r7 := @parameter7: org.apache.batik.bridge.BridgeContext;

        r8 := @parameter8: org.w3c.dom.Element[];

        r9 := @parameter9: org.w3c.dom.Element;

        r10 := @parameter10: org.w3c.dom.Element[];

        r11 := @parameter11: org.w3c.dom.Element[];

        r12 := @parameter12: org.w3c.dom.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics lineMetrics> = null;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace> = r1;

        r0.<org.apache.batik.bridge.SVGGVTFont: float fontSize> = f0;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes> = r2;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames> = r3;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs> = r4;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations> = r5;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphForms> = r6;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx> = r7;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] glyphElements> = r8;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element missingGlyphElement> = r9;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] hkernElements> = r10;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] vkernElements> = r11;

        $f1 = virtualinvoke r1.<org.apache.batik.gvt.font.GVTFontFace: float getUnitsPerEm()>();

        $f2 = f0 / $f1;

        r0.<org.apache.batik.bridge.SVGGVTFont: float scale> = $f2;

        r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element textElement> = r12;

        $r13 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLLang(org.w3c.dom.Element)>(r12);

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String language> = $r13;

        $r14 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r12, 59);

        $r15 = interfaceinvoke $r14.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("tb");

        if $z0 == 0 goto label1;

        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String orientation> = "v";

        goto label2;

     label1:
        r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String orientation> = "h";

     label2:
        specialinvoke r0.<org.apache.batik.bridge.SVGGVTFont: void createKerningTables()>();

        return;
    }

    private void createKerningTables()
    {
        org.apache.batik.bridge.SVGVKernElementBridge r15;
        org.apache.batik.gvt.font.Kern $r8, $r17;
        org.apache.batik.bridge.SVGHKernElementBridge r20;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.batik.bridge.SVGGVTFont r0;
        org.apache.batik.gvt.font.Kern[] r2, r21;
        org.apache.batik.bridge.BridgeContext $r5, $r7, $r13, $r16;
        org.apache.batik.bridge.Bridge $r6, $r14;
        org.w3c.dom.Element r19, r22;
        org.w3c.dom.Element[] $r1, $r3, $r4, $r10, $r11, $r12;
        org.apache.batik.gvt.font.KerningTable $r9, $r18;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] hkernElements>;

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.batik.gvt.font.Kern)[$i0];

        i4 = 0;

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] hkernElements>;

        r19 = $r4[i4];

        $r5 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r19);

        r20 = (org.apache.batik.bridge.SVGHKernElementBridge) $r6;

        $r7 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r8 = virtualinvoke r20.<org.apache.batik.bridge.SVGKernElementBridge: org.apache.batik.gvt.font.Kern createKern(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.bridge.SVGGVTFont)>($r7, r19, r0);

        r2[i4] = $r8;

        i4 = i4 + 1;

     label2:
        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] hkernElements>;

        $i1 = lengthof $r3;

        if i4 < $i1 goto label1;

        $r9 = new org.apache.batik.gvt.font.KerningTable;

        specialinvoke $r9.<org.apache.batik.gvt.font.KerningTable: void <init>(org.apache.batik.gvt.font.Kern[])>(r2);

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.KerningTable hKerningTable> = $r9;

        $r10 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] vkernElements>;

        $i2 = lengthof $r10;

        r21 = newarray (org.apache.batik.gvt.font.Kern)[$i2];

        i5 = 0;

        goto label4;

     label3:
        $r12 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] vkernElements>;

        r22 = $r12[i5];

        $r13 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r14 = virtualinvoke $r13.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r22);

        r15 = (org.apache.batik.bridge.SVGVKernElementBridge) $r14;

        $r16 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r17 = virtualinvoke r15.<org.apache.batik.bridge.SVGKernElementBridge: org.apache.batik.gvt.font.Kern createKern(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.bridge.SVGGVTFont)>($r16, r22, r0);

        r21[i5] = $r17;

        i5 = i5 + 1;

     label4:
        $r11 = r0.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] vkernElements>;

        $i3 = lengthof $r11;

        if i5 < $i3 goto label3;

        $r18 = new org.apache.batik.gvt.font.KerningTable;

        specialinvoke $r18.<org.apache.batik.gvt.font.KerningTable: void <init>(org.apache.batik.gvt.font.Kern[])>(r21);

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.KerningTable vKerningTable> = $r18;

        return;
    }

    public float getHKern(int, int)
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        java.lang.String[] $r1, $r2, $r3, $r4;
        int i0, $i1, i2, $i3;
        float $f0, $f1, $f2;
        java.lang.String $r5, $r6;
        org.apache.batik.gvt.font.KerningTable $r7;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        if i2 < 0 goto label1;

        $r2 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i3 = lengthof $r2;

        if i2 < $i3 goto label2;

     label1:
        return 0.0F;

     label2:
        $r7 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.KerningTable hKerningTable>;

        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r6 = $r3[i0];

        $r4 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r5 = $r4[i2];

        $f0 = virtualinvoke $r7.<org.apache.batik.gvt.font.KerningTable: float getKerningValue(int,int,java.lang.String,java.lang.String)>(i0, i2, $r6, $r5);

        $f1 = r0.<org.apache.batik.bridge.SVGGVTFont: float scale>;

        $f2 = $f0 * $f1;

        return $f2;
    }

    public float getVKern(int, int)
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        java.lang.String[] $r1, $r2, $r3, $r4;
        int i0, $i1, i2, $i3;
        float $f0, $f1, $f2;
        java.lang.String $r5, $r6;
        org.apache.batik.gvt.font.KerningTable $r7;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        if i2 < 0 goto label1;

        $r2 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i3 = lengthof $r2;

        if i2 < $i3 goto label2;

     label1:
        return 0.0F;

     label2:
        $r7 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.KerningTable vKerningTable>;

        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r6 = $r3[i0];

        $r4 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r5 = $r4[i2];

        $f0 = virtualinvoke $r7.<org.apache.batik.gvt.font.KerningTable: float getKerningValue(int,int,java.lang.String,java.lang.String)>(i0, i2, $r6, $r5);

        $f1 = r0.<org.apache.batik.bridge.SVGGVTFont: float scale>;

        $f2 = $f0 * $f1;

        return $f2;
    }

    public int[] getGlyphCodesForName(java.lang.String)
    {
        java.lang.String[] $r2, $r4, $r11;
        java.lang.Integer $r7, $r10;
        java.util.ArrayList $r0;
        int[] r8;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String $r3, r5, $r6;
        boolean $z0;
        org.apache.batik.bridge.SVGGVTFont r1;
        java.lang.Object $r9;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        goto label3;

     label1:
        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $r3 = $r2[i3];

        if $r3 == null goto label2;

        $r4 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $r6 = $r4[i3];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        i3 = i3 + 1;

     label3:
        $r11 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $i4 = lengthof $r11;

        if i3 < $i4 goto label1;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r8 = newarray (int)[$i0];

        i5 = 0;

        goto label5;

     label4:
        $r9 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r8[i5] = $i2;

        i5 = i5 + 1;

     label5:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i5 < $i1 goto label4;

        return r8;
    }

    public int[] getGlyphCodesForUnicode(java.lang.String)
    {
        java.lang.String[] $r2, $r4, $r11;
        java.lang.Integer $r7, $r10;
        java.util.ArrayList $r0;
        int[] r8;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String $r3, r5, $r6;
        boolean $z0;
        org.apache.batik.bridge.SVGGVTFont r1;
        java.lang.Object $r9;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        goto label3;

     label1:
        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r3 = $r2[i3];

        if $r3 == null goto label2;

        $r4 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r6 = $r4[i3];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        i3 = i3 + 1;

     label3:
        $r11 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i4 = lengthof $r11;

        if i3 < $i4 goto label1;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r8 = newarray (int)[$i0];

        i5 = 0;

        goto label5;

     label4:
        $r9 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i5);

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r8[i5] = $i2;

        i5 = i5 + 1;

     label5:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i5 < $i1 goto label4;

        return r8;
    }

    private boolean languageMatches(java.lang.String)
    {
        java.util.StringTokenizer $r8;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String r0, $r2, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        org.apache.batik.bridge.SVGGVTFont r3;
        char $c4;

        r3 := @this: org.apache.batik.bridge.SVGGVTFont;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, ",");

        goto label5;

     label3:
        $r2 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = r3.<org.apache.batik.bridge.SVGGVTFont: java.lang.String language>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r5 = r3.<org.apache.batik.bridge.SVGGVTFont: java.lang.String language>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z1 == 0 goto label5;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r6 = r3.<org.apache.batik.bridge.SVGGVTFont: java.lang.String language>;

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label5;

        $r7 = r3.<org.apache.batik.bridge.SVGGVTFont: java.lang.String language>;

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        $i5 = (int) $c4;

        if $i5 != 45 goto label5;

     label4:
        return 1;

     label5:
        $z2 = virtualinvoke $r8.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 != 0 goto label3;

        return 0;
    }

    private boolean orientationMatches(java.lang.String)
    {
        org.apache.batik.bridge.SVGGVTFont r1;
        int $i0;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String orientation>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean formMatches(java.lang.String, java.lang.String, java.text.AttributedCharacterIterator, int)
    {
        java.lang.Integer r4, $r5, $r7, $r8, $r9, r12, $r13, $r14, $r15, $r16, $r17, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17;
        java.text.AttributedCharacterIterator r0;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r2, $r10;
        int $i0, i1, $i2, $i3, $i6, $i7, $i8, i9, $i10, $i11;
        java.lang.String r1, r6;
        org.apache.batik.bridge.SVGGVTFont r18;
        char $c4, $c5;
        java.lang.Object $r3, $r11;

        r18 := @this: org.apache.batik.bridge.SVGGVTFont;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: java.text.AttributedCharacterIterator;

        i1 := @parameter3: int;

        if r0 == null goto label01;

        if r1 == null goto label01;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 1;

     label02:
        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i1);

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ARABIC_FORM>;

        $r3 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r2);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label03;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_NONE>;

        $z0 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

     label03:
        return 0;

     label04:
        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i2 <= 1 goto label11;

        z16 = 1;

        i9 = 1;

        goto label07;

     label05:
        $c4 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        $c5 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i9);

        $i10 = (int) $c5;

        $i11 = (int) $c4;

        if $i10 == $i11 goto label06;

        z16 = 0;

        goto label08;

     label06:
        i9 = i9 + 1;

     label07:
        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if i9 < $i3 goto label05;

     label08:
        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i1);

        if z16 == 0 goto label11;

        $i6 = virtualinvoke r6.<java.lang.String: int length()>();

        $i7 = i1 + $i6;

        $i8 = $i7 - 1;

        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>($i8);

        $r10 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ARABIC_FORM>;

        $r11 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r10);

        r12 = (java.lang.Integer) $r11;

        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i1);

        if r4 == null goto label11;

        if r12 == null goto label11;

        $r13 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_TERMINAL>;

        $z8 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r13);

        if $z8 == 0 goto label09;

        $r17 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_INITIAL>;

        $z14 = virtualinvoke r12.<java.lang.Integer: boolean equals(java.lang.Object)>($r17);

        if $z14 == 0 goto label09;

        $z15 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("isolated");

        return $z15;

     label09:
        $r14 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_TERMINAL>;

        $z9 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r14);

        if $z9 == 0 goto label10;

        $z13 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("terminal");

        return $z13;

     label10:
        $r15 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_MEDIAL>;

        $z10 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r15);

        if $z10 == 0 goto label11;

        $r16 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_MEDIAL>;

        $z11 = virtualinvoke r12.<java.lang.Integer: boolean equals(java.lang.Object)>($r16);

        if $z11 == 0 goto label11;

        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("medial");

        return $z12;

     label11:
        $r19 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_ISOLATED>;

        $z17 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r19);

        if $z17 == 0 goto label12;

        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("isolated");

        return $z7;

     label12:
        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_TERMINAL>;

        $z1 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label13;

        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("terminal");

        return $z6;

     label13:
        $r8 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_INITIAL>;

        $z2 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label14;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("initial");

        return $z5;

     label14:
        $r9 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ARABIC_MEDIAL>;

        $z3 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label15;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("medial");

        return $z4;

     label15:
        return 0;
    }

    public boolean canDisplayGivenName(java.lang.String)
    {
        java.lang.String[] $r1, $r3, $r6, $r8, $r10;
        int i0, $i1;
        java.lang.String $r2, r4, $r5, $r7, $r9;
        boolean $z0, $z1, $z2;
        org.apache.batik.bridge.SVGGVTFont r0;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        r4 := @parameter0: java.lang.String;

        i0 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $r2 = $r1[i0];

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $r5 = $r3[i0];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs>;

        $r7 = $r6[i0];

        $z1 = specialinvoke r0.<org.apache.batik.bridge.SVGGVTFont: boolean languageMatches(java.lang.String)>($r7);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations>;

        $r9 = $r8[i0];

        $z2 = specialinvoke r0.<org.apache.batik.bridge.SVGGVTFont: boolean orientationMatches(java.lang.String)>($r9);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

     label3:
        $r10 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $i1 = lengthof $r10;

        if i0 < $i1 goto label1;

        return 0;
    }

    public boolean canDisplay(char)
    {
        java.lang.String[] $r1, $r3, $r5, $r7;
        int $i1, i2, $i3, $i4, $i6;
        java.lang.String $r2, $r4, $r6;
        boolean $z0, $z1;
        org.apache.batik.bridge.SVGGVTFont r0;
        char c0;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        c0 := @parameter0: char;

        i2 = 0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r2 = $r1[i2];

        $i4 = (int) c0;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i4);

        $i6 = (int) -1;

        if $i1 == $i6 goto label2;

        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs>;

        $r4 = $r3[i2];

        $z0 = specialinvoke r0.<org.apache.batik.bridge.SVGGVTFont: boolean languageMatches(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations>;

        $r6 = $r5[i2];

        $z1 = specialinvoke r0.<org.apache.batik.bridge.SVGGVTFont: boolean orientationMatches(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

     label3:
        $r7 = r0.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i3 = lengthof $r7;

        if i2 < $i3 goto label1;

        return 0;
    }

    public int canDisplayUpTo(char[], int, int)
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r3;
        int i0, i1, $i2;
        char[] r2;
        java.lang.String $r1;

        r3 := @this: org.apache.batik.bridge.SVGGVTFont;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.text.StringCharacterIterator;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r2);

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>($r1);

        $i2 = virtualinvoke r3.<org.apache.batik.bridge.SVGGVTFont: int canDisplayUpTo(java.text.CharacterIterator,int,int)>($r0, i0, i1);

        return $i2;
    }

    public int canDisplayUpTo(java.text.CharacterIterator, int, int)
    {
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.text.CharacterIterator r0;
        java.text.AttributedCharacterIterator r18;
        java.lang.String[] $r2, $r4, $r6, $r8, $r9, $r12, $r14, $r16, $r19;
        int i0, i1, $i2, $i3, $i4, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19;
        java.lang.String $r3, $r5, $r7, $r10, $r11, $r13, $r15, $r17;
        org.apache.batik.bridge.SVGGVTFont r1;
        char $c5, $c6, c7;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        r0 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r18 = null;

        $z0 = r0 instanceof java.text.AttributedCharacterIterator;

        if $z0 == 0 goto label01;

        r18 = (java.text.AttributedCharacterIterator) r0;

     label01:
        c7 = interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i0);

        i8 = i0;

        goto label14;

     label02:
        z4 = 0;

        i9 = 0;

        goto label11;

     label03:
        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r3 = $r2[i9];

        $i12 = (int) c7;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($i12);

        if $i2 != 0 goto label10;

        $r4 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs>;

        $r5 = $r4[i9];

        $z1 = specialinvoke r1.<org.apache.batik.bridge.SVGGVTFont: boolean languageMatches(java.lang.String)>($r5);

        if $z1 == 0 goto label10;

        $r6 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations>;

        $r7 = $r6[i9];

        $z2 = specialinvoke r1.<org.apache.batik.bridge.SVGGVTFont: boolean orientationMatches(java.lang.String)>($r7);

        if $z2 == 0 goto label10;

        $r8 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r11 = $r8[i9];

        $r9 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphForms>;

        $r10 = $r9[i9];

        $z3 = specialinvoke r1.<org.apache.batik.bridge.SVGGVTFont: boolean formMatches(java.lang.String,java.lang.String,java.text.AttributedCharacterIterator,int)>($r11, $r10, r18, i8);

        if $z3 == 0 goto label10;

        $r12 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r13 = $r12[i9];

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i3 != 1 goto label04;

        z4 = 1;

        goto label12;

     label04:
        z5 = 1;

        i10 = 1;

        goto label07;

     label05:
        $c5 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        $r16 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r17 = $r16[i9];

        $c6 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(i10);

        $i13 = (int) $c6;

        $i14 = (int) $c5;

        if $i13 == $i14 goto label06;

        z5 = 0;

        goto label08;

     label06:
        i10 = i10 + 1;

     label07:
        $r14 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r15 = $r14[i9];

        $i4 = virtualinvoke $r15.<java.lang.String: int length()>();

        if i10 < $i4 goto label05;

     label08:
        if z5 == 0 goto label09;

        z4 = 1;

        goto label12;

     label09:
        c7 = interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i8);

     label10:
        i9 = i9 + 1;

     label11:
        $r19 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i11 = lengthof $r19;

        if i9 < $i11 goto label03;

     label12:
        if z4 != 0 goto label13;

        return i8;

     label13:
        c7 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        i8 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

     label14:
        $i15 = (int) c7;

        $i17 = (int) 65535;

        if $i15 == $i17 goto label15;

        if i8 < i1 goto label02;

     label15:
        $i19 = (int) -1;

        return $i19;
    }

    public int canDisplayUpTo(java.lang.String)
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r2;
        int $i0, $i1;
        java.lang.String r1;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<org.apache.batik.bridge.SVGGVTFont: int canDisplayUpTo(java.text.CharacterIterator,int,int)>($r0, 0, $i0);

        return $i1;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, char[])
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r3;
        java.awt.font.FontRenderContext r4;
        org.apache.batik.gvt.font.GVTGlyphVector $r5;
        char[] r2;
        java.lang.String $r1;

        r3 := @this: org.apache.batik.bridge.SVGGVTFont;

        r4 := @parameter0: java.awt.font.FontRenderContext;

        r2 := @parameter1: char[];

        $r0 = new java.text.StringCharacterIterator;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r2);

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>($r1);

        $r5 = virtualinvoke r3.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)>(r4, $r0);

        return $r5;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        org.apache.batik.bridge.BridgeContext $r20, $r25, $r28, $r33, $r40, $r44;
        org.apache.batik.bridge.Bridge $r21, $r29, $r41;
        java.lang.Object[] $r49;
        java.util.ArrayList $r62;
        org.apache.batik.bridge.SVGGlyphElementBridge r22, r54, r59;
        java.text.AttributedCharacterIterator$Attribute $r35, $r37, $r46;
        java.lang.String $r4, $r6, $r8, $r11, $r12, $r14, $r16, $r18;
        org.apache.batik.gvt.font.Glyph $r26, $r34, $r45;
        java.awt.font.FontRenderContext r51;
        org.w3c.dom.Element[] $r19, $r39;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        org.apache.batik.gvt.font.SVGGVTGlyphVector $r63;
        java.text.AttributedCharacterIterator r52;
        float $f0, $f1, $f2;
        org.apache.batik.gvt.font.GVTFontFace $r23, $r30, $r42;
        java.lang.String[] $r3, $r5, $r7, $r9, $r10, $r13, $r15, $r17, $r58;
        org.apache.batik.gvt.font.Glyph[] $r48, r61;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, i11, i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21;
        org.apache.batik.bridge.SVGGVTFont r2;
        char $c5, $c6, c10;
        org.apache.batik.gvt.text.TextPaintInfo r55, r57, r60;
        org.w3c.dom.Element $r24, $r27, $r31, $r32, $r43, r53, r56;
        java.lang.Object $r36, $r38, $r47;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r51 := @parameter0: java.awt.font.FontRenderContext;

        r0 := @parameter1: java.text.CharacterIterator;

        r52 = null;

        $z0 = r0 instanceof java.text.AttributedCharacterIterator;

        if $z0 == 0 goto label01;

        r52 = (java.text.AttributedCharacterIterator) r0;

     label01:
        $r62 = new java.util.ArrayList;

        specialinvoke $r62.<java.util.ArrayList: void <init>()>();

        c10 = interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        goto label17;

     label02:
        z4 = 0;

        i11 = 0;

        goto label13;

     label03:
        $r3 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r4 = $r3[i11];

        $i14 = (int) c10;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>($i14);

        if $i0 != 0 goto label12;

        $r5 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs>;

        $r6 = $r5[i11];

        $z1 = specialinvoke r2.<org.apache.batik.bridge.SVGGVTFont: boolean languageMatches(java.lang.String)>($r6);

        if $z1 == 0 goto label12;

        $r7 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations>;

        $r8 = $r7[i11];

        $z2 = specialinvoke r2.<org.apache.batik.bridge.SVGGVTFont: boolean orientationMatches(java.lang.String)>($r8);

        if $z2 == 0 goto label12;

        $r9 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r11 = $r9[i11];

        $r10 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphForms>;

        $r12 = $r10[i11];

        $i1 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        $z3 = specialinvoke r2.<org.apache.batik.bridge.SVGGVTFont: boolean formMatches(java.lang.String,java.lang.String,java.text.AttributedCharacterIterator,int)>($r11, $r12, r52, $i1);

        if $z3 == 0 goto label12;

        $r13 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r14 = $r13[i11];

        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i2 != 1 goto label05;

        $r39 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] glyphElements>;

        r53 = $r39[i11];

        $r40 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r41 = virtualinvoke $r40.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r53);

        r54 = (org.apache.batik.bridge.SVGGlyphElementBridge) $r41;

        r55 = null;

        if r52 == null goto label04;

        $r46 = <org.apache.batik.bridge.SVGGVTFont: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r47 = interfaceinvoke r52.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r46);

        r55 = (org.apache.batik.gvt.text.TextPaintInfo) $r47;

     label04:
        $r44 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r43 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element textElement>;

        $f2 = r2.<org.apache.batik.bridge.SVGGVTFont: float fontSize>;

        $r42 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r45 = virtualinvoke r54.<org.apache.batik.bridge.SVGGlyphElementBridge: org.apache.batik.gvt.font.Glyph createGlyph(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,int,float,org.apache.batik.gvt.font.GVTFontFace,org.apache.batik.gvt.text.TextPaintInfo)>($r44, r53, $r43, i11, $f2, $r42, r55);

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r45);

        z4 = 1;

        goto label14;

     label05:
        $i3 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        z5 = 1;

        i12 = 1;

        goto label08;

     label06:
        $c5 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        $r17 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r18 = $r17[i11];

        $c6 = virtualinvoke $r18.<java.lang.String: char charAt(int)>(i12);

        $i15 = (int) $c6;

        $i16 = (int) $c5;

        if $i15 == $i16 goto label07;

        z5 = 0;

        goto label09;

     label07:
        i12 = i12 + 1;

     label08:
        $r15 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r16 = $r15[i11];

        $i4 = virtualinvoke $r16.<java.lang.String: int length()>();

        if i12 < $i4 goto label06;

     label09:
        if z5 == 0 goto label11;

        $r19 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] glyphElements>;

        r56 = $r19[i11];

        $r20 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r21 = virtualinvoke $r20.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r56);

        r22 = (org.apache.batik.bridge.SVGGlyphElementBridge) $r21;

        r57 = null;

        if r52 == null goto label10;

        $i8 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        interfaceinvoke r52.<java.text.CharacterIterator: char setIndex(int)>($i8);

        $r37 = <org.apache.batik.bridge.SVGGVTFont: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r38 = interfaceinvoke r52.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r37);

        r57 = (org.apache.batik.gvt.text.TextPaintInfo) $r38;

     label10:
        $r25 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r24 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element textElement>;

        $f0 = r2.<org.apache.batik.bridge.SVGGVTFont: float fontSize>;

        $r23 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r26 = virtualinvoke r22.<org.apache.batik.bridge.SVGGlyphElementBridge: org.apache.batik.gvt.font.Glyph createGlyph(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,int,float,org.apache.batik.gvt.font.GVTFontFace,org.apache.batik.gvt.text.TextPaintInfo)>($r25, r56, $r24, i11, $f0, $r23, r57);

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r26);

        z4 = 1;

        goto label14;

     label11:
        c10 = interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>($i3);

     label12:
        i11 = i11 + 1;

     label13:
        $r58 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i13 = lengthof $r58;

        if i11 < $i13 goto label03;

     label14:
        if z4 != 0 goto label16;

        $r28 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r27 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element missingGlyphElement>;

        $r29 = virtualinvoke $r28.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r27);

        r59 = (org.apache.batik.bridge.SVGGlyphElementBridge) $r29;

        r60 = null;

        if r52 == null goto label15;

        $i7 = interfaceinvoke r0.<java.text.CharacterIterator: int getIndex()>();

        interfaceinvoke r52.<java.text.CharacterIterator: char setIndex(int)>($i7);

        $r35 = <org.apache.batik.bridge.SVGGVTFont: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r36 = interfaceinvoke r52.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r35);

        r60 = (org.apache.batik.gvt.text.TextPaintInfo) $r36;

     label15:
        $r33 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r32 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element missingGlyphElement>;

        $r31 = r2.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element textElement>;

        $f1 = r2.<org.apache.batik.bridge.SVGGVTFont: float fontSize>;

        $r30 = r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $i18 = (int) -1;

        $r34 = virtualinvoke r59.<org.apache.batik.bridge.SVGGlyphElementBridge: org.apache.batik.gvt.font.Glyph createGlyph(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,int,float,org.apache.batik.gvt.font.GVTFontFace,org.apache.batik.gvt.text.TextPaintInfo)>($r33, $r32, $r31, $i18, $f1, $r30, r60);

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r34);

     label16:
        c10 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

     label17:
        $i19 = (int) c10;

        $i21 = (int) 65535;

        if $i19 != $i21 goto label02;

        $i9 = interfaceinvoke $r62.<java.util.List: int size()>();

        $r48 = newarray (org.apache.batik.gvt.font.Glyph)[$i9];

        $r49 = interfaceinvoke $r62.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r48);

        r61 = (org.apache.batik.gvt.font.Glyph[]) $r49;

        $r63 = new org.apache.batik.gvt.font.SVGGVTGlyphVector;

        specialinvoke $r63.<org.apache.batik.gvt.font.SVGGVTGlyphVector: void <init>(org.apache.batik.gvt.font.GVTFont,org.apache.batik.gvt.font.Glyph[],java.awt.font.FontRenderContext)>(r2, r61, r51);

        return $r63;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, int[], java.text.CharacterIterator)
    {
        org.apache.batik.bridge.SVGGVTFont r2;
        java.text.CharacterIterator r9;
        java.lang.String[] $r3;
        java.text.StringCharacterIterator $r5;
        java.awt.font.FontRenderContext r7;
        int[] r0;
        org.apache.batik.gvt.font.GVTGlyphVector $r8;
        java.lang.StringBuffer $r1;
        int i0, $i1, i2;
        java.lang.String $r4, $r6;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r7 := @parameter0: java.awt.font.FontRenderContext;

        r0 := @parameter1: int[];

        r9 := @parameter2: java.text.CharacterIterator;

        i0 = lengthof r0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(i0);

        i2 = 0;

        goto label2;

     label1:
        $r3 = r2.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $i1 = r0[i2];

        $r4 = $r3[$i1];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        $r5 = new java.text.StringCharacterIterator;

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.text.StringCharacterIterator: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)>(r7, $r5);

        return $r8;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r2;
        java.awt.font.FontRenderContext r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r4;
        java.lang.String r1;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r3 := @parameter0: java.awt.font.FontRenderContext;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)>(r3, $r0);

        return $r4;
    }

    public org.apache.batik.gvt.font.GVTFont deriveFont(float)
    {
        org.apache.batik.bridge.SVGGVTFont $r0, r1;
        org.apache.batik.gvt.font.GVTFontFace $r13;
        org.apache.batik.bridge.BridgeContext $r7;
        java.lang.String[] $r8, $r9, $r10, $r11, $r12;
        org.w3c.dom.Element $r2, $r5;
        float f0;
        org.w3c.dom.Element[] $r3, $r4, $r6;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        f0 := @parameter0: float;

        $r0 = new org.apache.batik.bridge.SVGGVTFont;

        $r13 = r1.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r12 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphUnicodes>;

        $r11 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphNames>;

        $r10 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphLangs>;

        $r9 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphOrientations>;

        $r8 = r1.<org.apache.batik.bridge.SVGGVTFont: java.lang.String[] glyphForms>;

        $r7 = r1.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.bridge.BridgeContext ctx>;

        $r6 = r1.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] glyphElements>;

        $r5 = r1.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element missingGlyphElement>;

        $r4 = r1.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] hkernElements>;

        $r3 = r1.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element[] vkernElements>;

        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: org.w3c.dom.Element textElement>;

        specialinvoke $r0.<org.apache.batik.bridge.SVGGVTFont: void <init>(float,org.apache.batik.gvt.font.GVTFontFace,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element[],org.w3c.dom.Element,org.w3c.dom.Element[],org.w3c.dom.Element[],org.w3c.dom.Element)>(f0, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2);

        return $r0;
    }

    public java.lang.String getFamilyName()
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        org.apache.batik.gvt.font.GVTFontFace $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String getFamilyName()>();

        return $r2;
    }

    protected org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(int, int)
    {
        float $f0, $f1, f2, $f3, f4, $f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, $f14, f15, $f16, f17, $f18, f19, $f20, $f21, f22, $f23, f24;
        org.apache.batik.gvt.font.GVTFontFace $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        float[] r5;
        int i0, i1, $i2;
        org.apache.batik.gvt.font.GVTLineMetrics $r1, $r12, $r13, $r14;
        org.apache.batik.bridge.SVGGVTFont r0;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics lineMetrics>;

        if $r1 == null goto label1;

        $r14 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics lineMetrics>;

        return $r14;

     label1:
        $r2 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f0 = virtualinvoke $r2.<org.apache.batik.gvt.font.GVTFontFace: float getUnitsPerEm()>();

        $f1 = r0.<org.apache.batik.bridge.SVGGVTFont: float fontSize>;

        f2 = $f1 / $f0;

        $r3 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f3 = virtualinvoke $r3.<org.apache.batik.gvt.font.GVTFontFace: float getAscent()>();

        f4 = $f3 * f2;

        $r4 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f5 = virtualinvoke $r4.<org.apache.batik.gvt.font.GVTFontFace: float getDescent()>();

        f6 = $f5 * f2;

        r5 = newarray (float)[3];

        r5[0] = 0.0F;

        $f7 = f4 + f6;

        $f8 = $f7 / 2.0F;

        $f9 = $f8 - f4;

        r5[1] = $f9;

        $f10 = neg f4;

        r5[2] = $f10;

        $r6 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f11 = virtualinvoke $r6.<org.apache.batik.gvt.font.GVTFontFace: float getStrikethroughPosition()>();

        $f12 = neg f2;

        f13 = $f11 * $f12;

        $r7 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f14 = virtualinvoke $r7.<org.apache.batik.gvt.font.GVTFontFace: float getStrikethroughThickness()>();

        f15 = $f14 * f2;

        $r8 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f16 = virtualinvoke $r8.<org.apache.batik.gvt.font.GVTFontFace: float getUnderlinePosition()>();

        f17 = $f16 * f2;

        $r9 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f18 = virtualinvoke $r9.<org.apache.batik.gvt.font.GVTFontFace: float getUnderlineThickness()>();

        f19 = $f18 * f2;

        $r10 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f20 = virtualinvoke $r10.<org.apache.batik.gvt.font.GVTFontFace: float getOverlinePosition()>();

        $f21 = neg f2;

        f22 = $f20 * $f21;

        $r11 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $f23 = virtualinvoke $r11.<org.apache.batik.gvt.font.GVTFontFace: float getOverlineThickness()>();

        f24 = $f23 * f2;

        $r12 = new org.apache.batik.gvt.font.GVTLineMetrics;

        $i2 = i0 - i1;

        specialinvoke $r12.<org.apache.batik.gvt.font.GVTLineMetrics: void <init>(float,int,float[],float,float,float,int,float,float,float,float,float,float)>(f4, 0, r5, f6, $f0, $f0, $i2, f13, f15, f17, f19, f22, f24);

        r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics lineMetrics> = $r12;

        $r13 = r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics lineMetrics>;

        return $r13;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(char[], int, int, java.awt.font.FontRenderContext)
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        java.awt.font.FontRenderContext r3;
        int i0, i1;
        char[] r2;
        org.apache.batik.gvt.font.GVTLineMetrics $r1;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(int,int)>(i0, i1);

        return $r1;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext)
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        java.awt.font.FontRenderContext r3;
        java.text.CharacterIterator r2;
        int i0, i1;
        org.apache.batik.gvt.font.GVTLineMetrics $r1;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        r2 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(int,int)>(i0, i1);

        return $r1;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext)
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r2;
        java.awt.font.FontRenderContext r3;
        int $i0;
        java.lang.String r1;
        org.apache.batik.gvt.font.GVTLineMetrics $r4;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.awt.font.FontRenderContext;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>($r0, 0, $i0, r3);

        return $r4;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String, int, int, java.awt.font.FontRenderContext)
    {
        java.text.StringCharacterIterator $r0;
        org.apache.batik.bridge.SVGGVTFont r2;
        java.awt.font.FontRenderContext r3;
        int i0, i1;
        java.lang.String r1;
        org.apache.batik.gvt.font.GVTLineMetrics $r4;

        r2 := @this: org.apache.batik.bridge.SVGGVTFont;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>($r0, i0, i1, r3);

        return $r4;
    }

    public float getSize()
    {
        org.apache.batik.bridge.SVGGVTFont r0;
        float $f0;

        r0 := @this: org.apache.batik.bridge.SVGGVTFont;

        $f0 = r0.<org.apache.batik.bridge.SVGGVTFont: float fontSize>;

        return $f0;
    }

    public java.lang.String toString()
    {
        org.apache.batik.bridge.SVGGVTFont r1;
        org.apache.batik.gvt.font.GVTFontFace $r2, $r6, $r10;
        java.lang.StringBuffer $r0, $r4, $r5, $r8, $r9, $r12;
        java.lang.String $r3, $r7, $r11, $r13;

        r1 := @this: org.apache.batik.bridge.SVGGVTFont;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String getFamilyName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r6 = r1.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r7 = virtualinvoke $r6.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String getFontWeight()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r10 = r1.<org.apache.batik.bridge.SVGGVTFont: org.apache.batik.gvt.font.GVTFontFace fontFace>;

        $r11 = virtualinvoke $r10.<org.apache.batik.gvt.font.GVTFontFace: java.lang.String getFontStyle()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.bridge.SVGGVTFont: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r0;

        return;
    }
}
