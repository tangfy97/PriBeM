public class org.eclipse.jdt.internal.compiler.batch.ClasspathJar extends org.eclipse.jdt.internal.compiler.batch.ClasspathLocation
{
    protected java.io.File file;
    protected java.util.zip.ZipFile zipFile;
    protected boolean closeZipFileAtEnd;
    protected java.util.Hashtable packageCache;
    public static final org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER;

    static void <clinit>()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer $r0;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer: void <init>()>();

        <org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER> = $r0;

        return;
    }

    public void <init>(java.io.File, boolean, org.eclipse.jdt.internal.compiler.env.AccessRuleSet, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r1;
        java.lang.String r2;
        java.io.File r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r3 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathLocation: void <init>(org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>(r1, r2);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.io.File file> = r3;

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: boolean closeZipFileAtEnd> = z0;

        return;
    }

    public java.util.List fetchLinkedJars(org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet $r24;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0, $r40;
        java.util.zip.ZipFile $r2, $r6;
        java.util.zip.ZipEntry $r3;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter r11;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer $r8, $r9, $r26, $r27;
        java.util.List $r10;
        java.lang.Throwable $r30;
        java.util.ArrayList $r35;
        java.lang.StringBuffer $r21, $r38;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r13, $r14, $r18, $r20, $r22, $r23, $r25, $r28;
        java.util.Iterator $r12;
        char $c0;
        java.io.IOException $r29, $r31, $r32, $r33;
        java.io.InputStreamReader $r36;
        java.io.File $r39;
        java.lang.Object $r19;
        java.io.BufferedReader r34, $r37;
        java.io.InputStream $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r11 := @parameter0: org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter;

        r34 = null;

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: void initialize()>();

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        $r3 = virtualinvoke $r2.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>("META-INF/MANIFEST.MF");

        if $r3 == null goto label07;

        $r37 = new java.io.BufferedReader;

        $r36 = new java.io.InputStreamReader;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        $r7 = virtualinvoke $r6.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r3);

        specialinvoke $r36.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r7);

        specialinvoke $r37.<java.io.BufferedReader: void <init>(java.io.Reader)>($r36);

        r34 = $r37;

        $r8 = <org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER>;

        $z0 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer: boolean analyzeManifestContents(java.io.Reader)>($r37);

        $r9 = <org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer: java.util.List getCalledFileNames()>();

        if r11 == null goto label04;

        if $z0 == 0 goto label02;

        $r26 = <org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER>;

        $i3 = virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer: int getClasspathSectionsCount()>();

        if $i3 != 1 goto label03;

        if $r10 != null goto label03;

     label02:
        $r25 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String getPath()>();

        interfaceinvoke r11.<org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter: void invalidClasspathSection(java.lang.String)>($r25);

        goto label04;

     label03:
        $r27 = <org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer MANIFEST_ANALYZER>;

        $i4 = virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar$ManifestAnalyzer: int getClasspathSectionsCount()>();

        if $i4 <= 1 goto label04;

        $r28 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String getPath()>();

        interfaceinvoke r11.<org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter: void multipleClasspathSections(java.lang.String)>($r28);

     label04:
        if $r10 == null goto label07;

        $r12 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        $r13 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String getPath()>();

        $c0 = <java.io.File: char separatorChar>;

        $i5 = (int) $c0;

        $i1 = virtualinvoke $r13.<java.lang.String: int lastIndexOf(int)>($i5);

        $i2 = $i1 + 1;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label06;

     label05:
        $r40 = new org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r39 = new java.io.File;

        $r38 = new java.lang.StringBuffer;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        specialinvoke $r38.<java.lang.StringBuffer: void <init>(java.lang.String)>($r18);

        $r19 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.String) $r19;

        $r21 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<java.io.File: void <init>(java.lang.String)>($r22);

        $z2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: boolean closeZipFileAtEnd>;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.env.AccessRuleSet accessRuleSet>;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String destinationPath>;

        specialinvoke $r40.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: void <init>(java.io.File,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>($r39, $z2, $r24, $r23);

        virtualinvoke $r35.<java.util.ArrayList: boolean add(java.lang.Object)>($r40);

     label06:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

     label07:
        if r34 == null goto label11;

     label08:
        virtualinvoke r34.<java.io.BufferedReader: void close()>();

     label09:
        goto label11;

     label10:
        $r33 := @caughtexception;

     label11:
        return $r35;

     label12:
        $r32 := @caughtexception;

     label13:
        if r34 == null goto label17;

     label14:
        virtualinvoke r34.<java.io.BufferedReader: void close()>();

     label15:
        goto label17;

     label16:
        $r31 := @caughtexception;

     label17:
        return null;

     label18:
        $r30 := @caughtexception;

        if r34 == null goto label22;

     label19:
        virtualinvoke r34.<java.io.BufferedReader: void close()>();

     label20:
        goto label22;

     label21:
        $r29 := @caughtexception;

     label22:
        throw $r30;

        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label01 to label07 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label01 to label07 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.io.IOException from label19 to label20 with label21;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[], java.lang.String, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r4;
        char[] r1;
        java.lang.String r2, r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[],java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[], java.lang.String, java.lang.String, boolean)
    {
        org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException $r8;
        java.io.IOException $r7;
        org.eclipse.jdt.internal.compiler.env.AccessRestriction $r6;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r5;
        char[] r9;
        java.util.zip.ZipFile $r3;
        java.lang.String r1, r2;
        org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader $r4;
        boolean $z0, z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r9 := @parameter0: char[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: boolean isPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader: org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader read(java.util.zip.ZipFile,java.lang.String)>($r3, r2);

        if $r4 == null goto label5;

        $r5 = new org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: org.eclipse.jdt.internal.compiler.env.AccessRestriction fetchAccessRestriction(java.lang.String)>(r2);

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: void <init>(org.eclipse.jdt.internal.compiler.env.IBinaryType,org.eclipse.jdt.internal.compiler.env.AccessRestriction)>($r4, $r6);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        return null;

        catch org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public char[][][] findTypeNames(java.lang.String)
    {
        java.util.Enumeration $r4;
        char[][] $r11, $r13;
        java.util.ArrayList $r15;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        int $i0, $i1, $i2, $i3, $i5;
        java.util.zip.ZipFile $r3;
        java.lang.String r1, $r7, $r8, $r9;
        java.util.zip.ZipEntry $r6;
        boolean $z0, $z1, $z2;
        char[][][] r14;
        char[] $r10, $r12;
        java.lang.Object $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: boolean isPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        $r4 = virtualinvoke $r3.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        goto label6;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.util.zip.ZipEntry) $r5;

        $r7 = virtualinvoke $r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(int)>(47);

        goto label5;

     label3:
        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        goto label6;

     label4:
        $i1 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(int)>(46);

        $i5 = (int) -1;

        if $i1 == $i5 goto label5;

        $i2 = $i0 + 1;

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $r10 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        $r11 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitOn(char,char[])>(47, $r10);

        $r12 = virtualinvoke $r9.<java.lang.String: char[] toCharArray()>();

        $r13 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] arrayConcat(char[][],char[])>($r11, $r12);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label5:
        if $i0 > 0 goto label3;

     label6:
        $z2 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label2;

        $i3 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i3 == 0 goto label7;

        r14 = newarray (char[][])[$i3];

        virtualinvoke $r15.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r14);

        return null;

     label7:
        return null;
    }

    public void initialize() throws java.io.IOException
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        java.util.zip.ZipFile $r1, $r2;
        java.io.File $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        if $r1 != null goto label1;

        $r2 = new java.util.zip.ZipFile;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.io.File file>;

        specialinvoke $r2.<java.util.zip.ZipFile: void <init>(java.io.File)>($r3);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile> = $r2;

     label1:
        return;
    }

    public boolean isPackage(java.lang.String)
    {
        java.util.Enumeration $r7;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        int i0;
        java.util.zip.ZipFile $r6;
        java.lang.String $r3, $r4, $r10, $r11, r14;
        java.util.zip.ZipEntry $r9;
        java.util.Hashtable $r1, $r2, $r5, $r12, $r13, $r15, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        r14 := @parameter0: java.lang.String;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        if $r1 == null goto label1;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        $z2 = virtualinvoke $r16.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r14);

        return $z2;

     label1:
        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(41);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache> = $r2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        $r4 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        $r3 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        $r7 = virtualinvoke $r6.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        goto label6;

     label2:
        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = (java.util.zip.ZipEntry) $r8;

        $r10 = virtualinvoke $r9.<java.util.zip.ZipEntry: java.lang.String getName()>();

        i0 = virtualinvoke $r10.<java.lang.String: int lastIndexOf(int)>(47);

        goto label5;

     label3:
        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        $z0 = virtualinvoke $r12.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        goto label6;

     label4:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r11);

        i0 = virtualinvoke $r11.<java.lang.String: int lastIndexOf(int)>(47);

     label5:
        if i0 > 0 goto label3;

     label6:
        $z3 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 != 0 goto label2;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache>;

        $z1 = virtualinvoke $r15.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r14);

        return $z1;
    }

    public void reset()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        java.util.zip.ZipFile $r1, $r2;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        if $r1 == null goto label5;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: boolean closeZipFileAtEnd>;

        if $z0 == 0 goto label5;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile>;

        virtualinvoke $r2.<java.util.zip.ZipFile: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.zip.ZipFile zipFile> = null;

     label5:
        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.util.Hashtable packageCache> = null;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r1;
        java.lang.StringBuffer $r0, $r4;
        java.lang.String $r3, $r5;
        java.io.File $r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("Classpath for jar file ");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.io.File file>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public char[] normalizedPath()
    {
        char $c0;
        java.io.File $r2;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        int $i1, $i2;
        char[] $r1, $r4, $r5, $r6;
        java.lang.String $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: char[] normalizedPath>;

        if $r1 != null goto label2;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.io.File file>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $c0 = <java.io.File: char separatorChar>;

        $i2 = (int) $c0;

        if $i2 != 92 goto label1;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>($r4, 92, 47);

     label1:
        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(46, $r4);

        $r5 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] subarray(char[],int,int)>($r4, 0, $i1);

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: char[] normalizedPath> = $r5;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: char[] normalizedPath>;

        return $r6;
    }

    public java.lang.String getPath()
    {
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar r0;
        java.lang.String $r1, $r2, $r4;
        java.io.File $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String path>;

        if $r1 != null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.io.File file>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String path> = $r4;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: java.lang.String path>;

        return $r2;
    }
}
