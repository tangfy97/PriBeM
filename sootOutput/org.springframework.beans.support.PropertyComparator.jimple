public class org.springframework.beans.support.PropertyComparator extends java.lang.Object implements java.util.Comparator
{
    protected final org.apache.commons.logging.Log logger;
    private final org.springframework.beans.support.SortDefinition sortDefinition;
    private final org.springframework.beans.BeanWrapperImpl beanWrapper;

    public void <init>(org.springframework.beans.support.SortDefinition)
    {
        org.springframework.beans.support.PropertyComparator r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.support.SortDefinition r4;

        r0 := @this: org.springframework.beans.support.PropertyComparator;

        r4 := @parameter0: org.springframework.beans.support.SortDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.support.PropertyComparator: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(boolean)>(0);

        r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.BeanWrapperImpl beanWrapper> = $r3;

        r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition> = r4;

        return;
    }

    public void <init>(java.lang.String, boolean, boolean)
    {
        org.springframework.beans.support.MutableSortDefinition $r4;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.support.PropertyComparator r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r5;
        boolean z0, z1;

        r0 := @this: org.springframework.beans.support.PropertyComparator;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.support.PropertyComparator: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(boolean)>(0);

        r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.BeanWrapperImpl beanWrapper> = $r3;

        $r4 = new org.springframework.beans.support.MutableSortDefinition;

        specialinvoke $r4.<org.springframework.beans.support.MutableSortDefinition: void <init>(java.lang.String,boolean,boolean)>(r5, z0, z1);

        r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition> = $r4;

        return;
    }

    public final org.springframework.beans.support.SortDefinition getSortDefinition()
    {
        org.springframework.beans.support.PropertyComparator r0;
        org.springframework.beans.support.SortDefinition $r1;

        r0 := @this: org.springframework.beans.support.PropertyComparator;

        $r1 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition>;

        return $r1;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.springframework.beans.support.PropertyComparator r0;
        byte $b2;
        int $i0, i1, $i3, $i5;
        java.lang.String $r8, $r9, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.RuntimeException $r10;
        org.springframework.beans.support.SortDefinition $r5, $r6;
        java.lang.Object r1, $r2, r3, $r4, r19, r20;
        java.lang.Comparable $r7;
        org.apache.commons.logging.Log $r11, $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r21;

        r0 := @this: org.springframework.beans.support.PropertyComparator;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<org.springframework.beans.support.PropertyComparator: java.lang.Object getPropertyValue(java.lang.Object)>(r1);

        r19 = $r2;

        $r4 = specialinvoke r0.<org.springframework.beans.support.PropertyComparator: java.lang.Object getPropertyValue(java.lang.Object)>(r3);

        r20 = $r4;

        $r5 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition>;

        $z0 = interfaceinvoke $r5.<org.springframework.beans.support.SortDefinition: boolean isIgnoreCase()>();

        if $z0 == 0 goto label01;

        $z2 = $r2 instanceof java.lang.String;

        if $z2 == 0 goto label01;

        $z3 = $r4 instanceof java.lang.String;

        if $z3 == 0 goto label01;

        $r8 = (java.lang.String) $r2;

        r19 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = (java.lang.String) $r4;

        r20 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

     label01:
        if r19 == null goto label04;

        if r20 == null goto label02;

        $r7 = (java.lang.Comparable) r19;

        $i0 = interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r20);

        goto label03;

     label02:
        $i5 = (int) -1;

        $i0 = $i5;

     label03:
        i1 = $i0;

        goto label10;

     label04:
        if r20 == null goto label05;

        $b2 = 1;

        goto label06;

     label05:
        $b2 = 0;

     label06:
        i1 = $b2;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        $r11 = r0.<org.springframework.beans.support.PropertyComparator: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z4 == 0 goto label09;

        $r13 = r0.<org.springframework.beans.support.PropertyComparator: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not sort objects [");

        $r14 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r18, $r10);

     label09:
        return 0;

     label10:
        $r6 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition>;

        $z1 = interfaceinvoke $r6.<org.springframework.beans.support.SortDefinition: boolean isAscending()>();

        if $z1 == 0 goto label11;

        $i3 = i1;

        goto label12;

     label11:
        $i3 = neg i1;

     label12:
        return $i3;

        catch java.lang.RuntimeException from label01 to label07 with label08;
    }

    private java.lang.Object getPropertyValue(java.lang.Object)
    {
        org.springframework.beans.BeansException $r7;
        org.springframework.beans.BeanWrapperImpl $r2, $r4;
        org.springframework.beans.support.SortDefinition $r3;
        org.springframework.beans.support.PropertyComparator r0;
        java.lang.Object r1, $r6;
        org.apache.commons.logging.Log $r8;
        java.lang.String $r5;

        r0 := @this: org.springframework.beans.support.PropertyComparator;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.BeanWrapperImpl beanWrapper>;

        virtualinvoke $r2.<org.springframework.beans.BeanWrapperImpl: void setWrappedInstance(java.lang.Object)>(r1);

        $r4 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.BeanWrapperImpl beanWrapper>;

        $r3 = r0.<org.springframework.beans.support.PropertyComparator: org.springframework.beans.support.SortDefinition sortDefinition>;

        $r5 = interfaceinvoke $r3.<org.springframework.beans.support.SortDefinition: java.lang.String getProperty()>();

        $r6 = virtualinvoke $r4.<org.springframework.beans.BeanWrapperImpl: java.lang.Object getPropertyValue(java.lang.String)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<org.springframework.beans.support.PropertyComparator: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>("PropertyComparator could not access property - treating as null for sorting", $r7);

        return null;

        catch org.springframework.beans.BeansException from label1 to label2 with label3;
    }

    public static void sort(java.util.List, org.springframework.beans.support.SortDefinition) throws org.springframework.beans.BeansException
    {
        java.util.List r2;
        org.springframework.beans.support.PropertyComparator $r3;
        java.lang.String $r1;
        org.springframework.beans.support.SortDefinition r0;
        boolean $z0;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: org.springframework.beans.support.SortDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.support.SortDefinition: java.lang.String getProperty()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new org.springframework.beans.support.PropertyComparator;

        specialinvoke $r3.<org.springframework.beans.support.PropertyComparator: void <init>(org.springframework.beans.support.SortDefinition)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r2, $r3);

     label1:
        return;
    }

    public static void sort(java.lang.Object[], org.springframework.beans.support.SortDefinition) throws org.springframework.beans.BeansException
    {
        java.lang.Object[] r2;
        org.springframework.beans.support.PropertyComparator $r3;
        java.lang.String $r1;
        org.springframework.beans.support.SortDefinition r0;
        boolean $z0;

        r2 := @parameter0: java.lang.Object[];

        r0 := @parameter1: org.springframework.beans.support.SortDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.support.SortDefinition: java.lang.String getProperty()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new org.springframework.beans.support.PropertyComparator;

        specialinvoke $r3.<org.springframework.beans.support.PropertyComparator: void <init>(org.springframework.beans.support.SortDefinition)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r3);

     label1:
        return;
    }
}
