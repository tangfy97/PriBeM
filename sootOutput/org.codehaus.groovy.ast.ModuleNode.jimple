public class org.codehaus.groovy.ast.ModuleNode extends org.codehaus.groovy.ast.ASTNode implements groovyjarjarasm.asm.Opcodes
{
    private org.codehaus.groovy.ast.stmt.BlockStatement statementBlock;
    java.util.List classes;
    private java.util.List methods;
    private java.util.List imports;
    private java.util.List importPackages;
    private java.util.Map importIndex;
    private java.util.Map staticImportAliases;
    private java.util.Map staticImportFields;
    private java.util.Map staticImportClasses;
    private org.codehaus.groovy.ast.CompileUnit unit;
    private java.lang.String packageName;
    private java.lang.String description;
    private boolean createClassForStatements;
    private transient org.codehaus.groovy.control.SourceUnit context;
    private boolean importsResolved;
    private static final java.lang.String[] EMPTY_STRING_ARRAY;
    static java.lang.Class class$org$codehaus$groovy$runtime$InvokerHelper;
    static java.lang.Class class$groovy$lang$Binding;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.SourceUnit r10;
        java.util.HashMap $r6, $r7;
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.ArrayList $r3, $r4, $r5;
        java.util.LinkedHashMap $r8, $r9;
        org.codehaus.groovy.ast.stmt.BlockStatement $r1;
        java.util.LinkedList $r2;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r10 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ASTNode: void <init>()>();

        $r1 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r1.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List imports> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List importPackages> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map importIndex> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportAliases> = $r7;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportFields> = $r8;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportClasses> = $r9;

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean createClassForStatements> = 1;

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean importsResolved> = 0;

        r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit context> = r10;

        return;
    }

    public void <init>(org.codehaus.groovy.ast.CompileUnit)
    {
        java.util.HashMap $r6, $r7;
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.ArrayList $r3, $r4, $r5;
        java.util.LinkedHashMap $r8, $r9;
        org.codehaus.groovy.ast.stmt.BlockStatement $r1;
        org.codehaus.groovy.ast.CompileUnit r10;
        java.util.LinkedList $r2;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r10 := @parameter0: org.codehaus.groovy.ast.CompileUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ASTNode: void <init>()>();

        $r1 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r1.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock> = $r1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List imports> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List importPackages> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map importIndex> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportAliases> = $r7;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportFields> = $r8;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportClasses> = $r9;

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean createClassForStatements> = 1;

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean importsResolved> = 0;

        r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit> = r10;

        return;
    }

    public org.codehaus.groovy.ast.stmt.BlockStatement getStatementBlock()
    {
        org.codehaus.groovy.ast.stmt.BlockStatement $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock>;

        return $r1;
    }

    public java.util.List getMethods()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods>;

        return $r1;
    }

    public java.util.List getClasses()
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.List $r3, $r4, $r5;
        org.codehaus.groovy.ast.stmt.BlockStatement $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $z0 = r0.<org.codehaus.groovy.ast.ModuleNode: boolean createClassForStatements>;

        if $z0 == 0 goto label2;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock>;

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.ast.stmt.BlockStatement: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods>;

        $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.ClassNode createStatementsClass()>();

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean createClassForStatements> = 0;

        $r3 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(0, $r2);

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void setModule(org.codehaus.groovy.ast.ModuleNode)>(r0);

        specialinvoke r0.<org.codehaus.groovy.ast.ModuleNode: void addToCompileUnit(org.codehaus.groovy.ast.ClassNode)>($r2);

     label2:
        $r5 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes>;

        return $r5;
    }

    public java.util.List getImports()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List imports>;

        return $r1;
    }

    public java.util.List getImportPackages()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List importPackages>;

        return $r1;
    }

    public org.codehaus.groovy.ast.ClassNode getImport(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map importIndex>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.codehaus.groovy.ast.ClassNode) $r3;

        return $r4;
    }

    public void addImport(java.lang.String, org.codehaus.groovy.ast.ClassNode)
    {
        java.util.List $r4;
        org.codehaus.groovy.ast.ImportNode $r1;
        org.codehaus.groovy.ast.ClassNode r2;
        java.util.Map $r5;
        java.lang.String r3;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r4 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List imports>;

        $r1 = new org.codehaus.groovy.ast.ImportNode;

        specialinvoke $r1.<org.codehaus.groovy.ast.ImportNode: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r2, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r5 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map importIndex>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        return;
    }

    public java.lang.String[] addImportPackage(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String[] $r3;
        java.lang.String r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List importPackages>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = <org.codehaus.groovy.ast.ModuleNode: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;
    }

    public void addStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.ast.stmt.BlockStatement $r2;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        return;
    }

    public void addClass(org.codehaus.groovy.ast.ClassNode)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void setModule(org.codehaus.groovy.ast.ModuleNode)>(r0);

        specialinvoke r0.<org.codehaus.groovy.ast.ModuleNode: void addToCompileUnit(org.codehaus.groovy.ast.ClassNode)>(r1);

        return;
    }

    private void addToCompileUnit(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r2;
        org.codehaus.groovy.ast.CompileUnit $r1, $r3;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit>;

        virtualinvoke $r3.<org.codehaus.groovy.ast.CompileUnit: void addClass(org.codehaus.groovy.ast.ClassNode)>(r2);

     label1:
        return;
    }

    public void addMethod(org.codehaus.groovy.ast.MethodNode)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.MethodNode r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        return;
    }

    public java.lang.String getPackageName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String packageName>;

        return $r1;
    }

    public void setPackageName(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String packageName> = r1;

        return;
    }

    public boolean hasPackageName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.ModuleNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String packageName>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.control.SourceUnit getContext()
    {
        org.codehaus.groovy.control.SourceUnit $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit context>;

        return $r1;
    }

    public java.lang.String getDescription()
    {
        org.codehaus.groovy.control.SourceUnit $r1, $r3;
        java.lang.String $r2, $r4;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit context>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit context>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        return $r4;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String description>;

        return $r2;
    }

    public void setDescription(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String description> = r1;

        return;
    }

    public org.codehaus.groovy.ast.CompileUnit getUnit()
    {
        org.codehaus.groovy.ast.CompileUnit $r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit>;

        return $r1;
    }

    void setUnit(org.codehaus.groovy.ast.CompileUnit)
    {
        org.codehaus.groovy.ast.CompileUnit r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: org.codehaus.groovy.ast.CompileUnit;

        r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit> = r1;

        return;
    }

    protected org.codehaus.groovy.ast.ClassNode createStatementsClass()
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r24, $r35, $r37;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r22, $r36;
        org.codehaus.groovy.ast.MethodNode $r10, $r25, r46;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r16, $r33;
        java.lang.StringBuffer $r3, $r4, $r6, $r48, $r49, $r51;
        java.lang.String $r1, $r2, $r5, $r7, $r50, $r52, r56, r57;
        org.codehaus.groovy.ast.Parameter $r12, $r39;
        org.codehaus.groovy.ast.ClassNode $r9, $r13, $r14, $r15, $r21, $r29, $r41, r58;
        java.lang.RuntimeException $r47, $r55;
        org.codehaus.groovy.control.CompilerConfiguration $r54;
        org.codehaus.groovy.ast.ModuleNode r0;
        boolean $z0;
        java.util.List $r43;
        org.codehaus.groovy.ast.stmt.BlockStatement $r26, $r30;
        org.codehaus.groovy.ast.ClassNode[] $r20, $r27, $r32, $r42;
        int $i0, $i1;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r17, $r34;
        java.util.Iterator $r44;
        org.codehaus.groovy.ast.expr.ClassExpression $r18, $r23;
        org.codehaus.groovy.ast.Parameter[] $r11, $r28, $r31, $r38;
        org.codehaus.groovy.ast.CompileUnit $r8, $r53;
        java.lang.Class $r19, $r40, $r59, $r60;
        java.lang.Object $r45;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String getPackageName()>();

        r56 = $r1;

        if $r1 != null goto label01;

        r56 = "";

     label01:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String getDescription()>();

        if $r2 != null goto label02;

        $r55 = new java.lang.RuntimeException;

        specialinvoke $r55.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot generate main(String[]) class for statements when we have no file description");

        throw $r55;

     label02:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r56);

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String extractClassFromFileDescription()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        r57 = null;

        $r8 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit>;

        if $r8 == null goto label03;

        $r53 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.CompileUnit unit>;

        $r54 = virtualinvoke $r53.<org.codehaus.groovy.ast.CompileUnit: org.codehaus.groovy.control.CompilerConfiguration getConfig()>();

        r57 = virtualinvoke $r54.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getScriptBaseClass()>();

     label03:
        r58 = null;

        if r57 == null goto label04;

        r58 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>(r57);

     label04:
        if r58 != null goto label05;

        r58 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode SCRIPT_TYPE>;

     label05:
        $r9 = new org.codehaus.groovy.ast.ClassNode;

        specialinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode)>($r7, 1, r58);

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void setScript(boolean)>(1);

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void setScriptBody(boolean)>(1);

        $r10 = new org.codehaus.groovy.ast.MethodNode;

        $r14 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        $r11 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r12 = new org.codehaus.groovy.ast.Parameter;

        $r13 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        $r15 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        specialinvoke $r12.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r15, "args");

        $r11[0] = $r12;

        $r20 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r16 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r17 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r18 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r19 = <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$org$codehaus$groovy$runtime$InvokerHelper>;

        if $r19 != null goto label06;

        $r59 = staticinvoke <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.InvokerHelper");

        <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$org$codehaus$groovy$runtime$InvokerHelper> = $r59;

        goto label07;

     label06:
        $r59 = <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$org$codehaus$groovy$runtime$InvokerHelper>;

     label07:
        $r21 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r59);

        specialinvoke $r18.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r21);

        $r22 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r23 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r23.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r9);

        $r24 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r24.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("args");

        specialinvoke $r22.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r23, $r24);

        specialinvoke $r17.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r18, "runScript", $r22);

        specialinvoke $r16.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r17);

        specialinvoke $r10.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("main", 9, $r14, $r11, $r20, $r16);

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r10);

        $r25 = new org.codehaus.groovy.ast.MethodNode;

        $r29 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r28 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r27 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r26 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock>;

        specialinvoke $r25.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("run", 1, $r29, $r28, $r27, $r26);

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r25);

        $r31 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r32 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r30 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r30.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ConstructorNode addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(1, $r31, $r32, $r30);

        $r33 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r34 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r35 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r35.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("super");

        $r36 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r37 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r37.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("context");

        specialinvoke $r36.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r37);

        specialinvoke $r34.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r35, "setBinding", $r36);

        specialinvoke $r33.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r34);

        $r38 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r39 = new org.codehaus.groovy.ast.Parameter;

        $r40 = <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$groovy$lang$Binding>;

        if $r40 != null goto label08;

        $r60 = staticinvoke <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$(java.lang.String)>("groovy.lang.Binding");

        <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$groovy$lang$Binding> = $r60;

        goto label09;

     label08:
        $r60 = <org.codehaus.groovy.ast.ModuleNode: java.lang.Class class$groovy$lang$Binding>;

     label09:
        $r41 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r60);

        specialinvoke $r39.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r41, "context");

        $r38[0] = $r39;

        $r42 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ConstructorNode addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(1, $r38, $r42, $r33);

        $r43 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List methods>;

        $r44 = interfaceinvoke $r43.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.codehaus.groovy.ast.MethodNode) $r45;

        $i0 = virtualinvoke r46.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label11;

        $r47 = new java.lang.RuntimeException;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot use abstract methods in a script, they are only available inside classes. Method: ");

        $r50 = virtualinvoke r46.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.RuntimeException: void <init>(java.lang.String)>($r52);

        throw $r47;

     label11:
        virtualinvoke r46.<org.codehaus.groovy.ast.MethodNode: void setModifiers(int)>($i0);

        virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>(r46);

        goto label10;

     label12:
        return $r9;
    }

    protected java.lang.String extractClassFromFileDescription()
    {
        char $c1, $c4;
        org.codehaus.groovy.ast.ModuleNode r0;
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r1, r2;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.lang.String getDescription()>();

        r2 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        $c1 = <java.io.File: char separatorChar>;

        $i9 = (int) $c1;

        $i2 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>($i9);

        $i3 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i3 <= 0 goto label1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i2);

        if $i3 <= $i8 goto label1;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label1:
        if $i0 < 0 goto label2;

        $i7 = $i0 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i7);

     label2:
        $c4 = <java.io.File: char separatorChar>;

        $i10 = (int) $c4;

        $i5 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>($i10);

        if $i5 < 0 goto label3;

        $i6 = $i5 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i6);

     label3:
        return r2;
    }

    public boolean isEmpty()
    {
        java.util.List $r1, $r3;
        org.codehaus.groovy.ast.stmt.BlockStatement $r2;
        org.codehaus.groovy.ast.ModuleNode r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.stmt.BlockStatement statementBlock>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List getStatements()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void sortClasses()
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r5, r6;
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.List $r1;
        int i0, i1;
        java.lang.Object $r4;
        java.util.LinkedList $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List getClasses()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        i0 = 1;

     label2:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.ClassNode) $r4;

        r6 = r5;

        i1 = 0;

     label4:
        if r6 == null goto label5;

        if i1 >= i0 goto label5;

        r6 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        i1 = i1 + 1;

        goto label4;

     label5:
        if r6 == null goto label6;

        $z2 = virtualinvoke r6.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z2 == 0 goto label6;

        goto label3;

     label6:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        virtualinvoke $r2.<java.util.LinkedList: void addLast(java.lang.Object)>(r5);

        goto label3;

     label7:
        i0 = i0 + 1;

        goto label2;

     label8:
        r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List classes> = $r2;

        return;
    }

    public boolean hasImportsResolved()
    {
        org.codehaus.groovy.ast.ModuleNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $z0 = r0.<org.codehaus.groovy.ast.ModuleNode: boolean importsResolved>;

        return $z0;
    }

    public void setImportsResolved(boolean)
    {
        org.codehaus.groovy.ast.ModuleNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.ModuleNode: boolean importsResolved> = z0;

        return;
    }

    public java.util.Map getStaticImportAliases()
    {
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportAliases>;

        return $r1;
    }

    public java.util.Map getStaticImportClasses()
    {
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportClasses>;

        return $r1;
    }

    public java.util.Map getStaticImportFields()
    {
        org.codehaus.groovy.ast.ModuleNode r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        $r1 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportFields>;

        return $r1;
    }

    public void addStaticMethodOrField(org.codehaus.groovy.ast.ClassNode, java.lang.String, java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r2;
        java.util.Map $r3, $r5;
        java.lang.String r1, r4;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r3 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportAliases>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportFields>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return;
    }

    public void addStaticImportClass(java.lang.String, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r2;
        java.util.Map $r3;
        java.lang.String r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r0 := @this: org.codehaus.groovy.ast.ModuleNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        $r3 = r0.<org.codehaus.groovy.ast.ModuleNode: java.util.Map staticImportClasses>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.codehaus.groovy.ast.ModuleNode: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        return;
    }
}
