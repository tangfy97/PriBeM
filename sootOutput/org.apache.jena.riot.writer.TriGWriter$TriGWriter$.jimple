class org.apache.jena.riot.writer.TriGWriter$TriGWriter$ extends org.apache.jena.riot.writer.TurtleShell
{

    void <init>(org.apache.jena.atlas.io.IndentedWriter, org.apache.jena.riot.system.PrefixMap, java.lang.String)
    {
        org.apache.jena.riot.system.PrefixMap r2;
        org.apache.jena.riot.writer.TriGWriter$TriGWriter$ r0;
        java.lang.String r3;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: org.apache.jena.riot.writer.TriGWriter$TriGWriter$;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r2 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.jena.riot.writer.TurtleShell: void <init>(org.apache.jena.atlas.io.IndentedWriter,org.apache.jena.riot.system.PrefixMap,java.lang.String)>(r1, r2, r3);

        return;
    }

    private void write(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.util.Iterator $r10;
        com.hp.hpl.jena.graph.Node r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph r4;
        org.apache.jena.atlas.io.IndentedWriter $r5, $r9;
        org.apache.jena.riot.system.PrefixMap $r2, $r3;
        org.apache.jena.riot.writer.TriGWriter$TriGWriter$ r0;
        java.lang.Object $r6;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Graph $r8, $r11;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.writer.TriGWriter$TriGWriter$;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r1 = r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: java.lang.String baseURI>;

        virtualinvoke r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writeBase(java.lang.String)>($r1);

        $r2 = r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.riot.system.PrefixMap prefixMap>;

        virtualinvoke r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writePrefixes(org.apache.jena.riot.system.PrefixMap)>($r2);

        $r3 = r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.riot.system.PrefixMap prefixMap>;

        $z0 = interfaceinvoke $r3.<org.apache.jena.riot.system.PrefixMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r9 = r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r9.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

     label1:
        $r10 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

        $r11 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        specialinvoke r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writeGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>(null, $r11);

     label2:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r5 = r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r5.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r7);

        specialinvoke r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writeGraph(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>(r7, $r8);

        goto label2;

     label3:
        return;
    }

    private void writeGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.Node r0, $r11;
        byte b0, $b1;
        com.hp.hpl.jena.graph.Graph r5;
        boolean z0, z1, $z3, $z4, $z5;
        org.apache.jena.atlas.io.IndentedWriter $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        org.apache.jena.riot.writer.TriGWriter$TriGWriter$ r1;

        r1 := @this: org.apache.jena.riot.writer.TriGWriter$TriGWriter$;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Graph;

        if r0 == null goto label01;

        $r11 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        if r0 != $r11 goto label02;

     label01:
        $z5 = 1;

        $z4 = 1;

        goto label03;

     label02:
        $z5 = 0;

        $z4 = 0;

     label03:
        z0 = $z4;

        if $z5 == 0 goto label04;

        $z3 = 0;

        goto label05;

     label04:
        $z3 = 1;

     label05:
        z1 = $z3;

        if z0 == 0 goto label06;

        goto label06;

     label06:
        if z0 == 0 goto label07;

        $b1 = 2;

        goto label08;

     label07:
        $b1 = 4;

     label08:
        b0 = $b1;

        if z0 != 0 goto label09;

        virtualinvoke r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writeNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r10 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r10.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

     label09:
        $r2 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("{");

        if z1 == 0 goto label10;

        $r9 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r9.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        goto label11;

     label10:
        $r3 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

     label11:
        $r4 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r4.<org.apache.jena.atlas.io.IndentedWriter: void incIndent(int)>(b0);

        virtualinvoke r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void writeGraphTTL(com.hp.hpl.jena.graph.Graph)>(r5);

        $r6 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r6.<org.apache.jena.atlas.io.IndentedWriter: void decIndent(int)>(b0);

        if 1 == 0 goto label12;

        $r8 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r8.<org.apache.jena.atlas.io.IndentedWriter: void ensureStartOfLine()>();

     label12:
        $r7 = r1.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: org.apache.jena.atlas.io.IndentedWriter out>;

        virtualinvoke $r7.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("}");

        return;
    }

    static void access$000(org.apache.jena.riot.writer.TriGWriter$TriGWriter$, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        org.apache.jena.riot.writer.TriGWriter$TriGWriter$ r0;

        r0 := @parameter0: org.apache.jena.riot.writer.TriGWriter$TriGWriter$;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        specialinvoke r0.<org.apache.jena.riot.writer.TriGWriter$TriGWriter$: void write(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        return;
    }
}
