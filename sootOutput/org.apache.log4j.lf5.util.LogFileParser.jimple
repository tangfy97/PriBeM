public class org.apache.log4j.lf5.util.LogFileParser extends java.lang.Object implements java.lang.Runnable
{
    public static final java.lang.String RECORD_DELIMITER;
    public static final java.lang.String ATTRIBUTE_DELIMITER;
    public static final java.lang.String DATE_DELIMITER;
    public static final java.lang.String THREAD_DELIMITER;
    public static final java.lang.String CATEGORY_DELIMITER;
    public static final java.lang.String LOCATION_DELIMITER;
    public static final java.lang.String MESSAGE_DELIMITER;
    public static final java.lang.String PRIORITY_DELIMITER;
    public static final java.lang.String NDC_DELIMITER;
    private static java.text.SimpleDateFormat _sdf;
    private org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor;
    org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog _loadDialog;
    private java.io.InputStream _in;

    public void <init>(java.io.File) throws java.io.IOException, java.io.FileNotFoundException
    {
        java.io.FileInputStream $r1;
        java.io.File r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r2 := @parameter0: java.io.File;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void <init>(java.io.InputStream)>($r1);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.log4j.lf5.util.LogFileParser r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.lf5.util.LogFileParser: java.io.InputStream _in> = null;

        r0.<org.apache.log4j.lf5.util.LogFileParser: java.io.InputStream _in> = r1;

        return;
    }

    public void parse(org.apache.log4j.lf5.viewer.LogBrokerMonitor) throws java.lang.RuntimeException
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor r1;
        org.apache.log4j.lf5.util.LogFileParser r0;
        java.lang.Thread $r2;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: org.apache.log4j.lf5.viewer.LogBrokerMonitor;

        r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor> = r1;

        $r2 = new java.lang.Thread;

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return;
    }

    public void run()
    {
        org.apache.log4j.lf5.LogRecord $r9, $r12;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String $r5, $r8, $r11, $r13;
        org.apache.log4j.lf5.util.LogFileParser$1 $r19;
        javax.swing.JFrame $r3;
        org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog $r17;
        boolean z0, z1, z2;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r2, $r10, $r14;
        java.io.IOException $r15;
        java.lang.RuntimeException $r16, $r18;
        org.apache.log4j.lf5.util.LogFileParser r0;
        java.io.InputStream $r4;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        i3 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r17 = new org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog;

        $r2 = r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>();

        specialinvoke $r17.<org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog: void <init>(javax.swing.JFrame,java.lang.String)>($r3, "Loading file...");

        r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog _loadDialog> = $r17;

     label01:
        $r4 = r0.<org.apache.log4j.lf5.util.LogFileParser: java.io.InputStream _in>;

        $r5 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String loadLogFile(java.io.InputStream)>($r4);

     label02:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String,int)>("[slf5s.start]", i3);

        $i5 = (int) -1;

        if $i0 == $i5 goto label04;

        $r11 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(i3, $i0);

        $r12 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)>($r11);

        z0 = 1;

        z2 = 1;

        z1 = 1;

        if $r12 == null goto label03;

        $r14 = r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r12);

     label03:
        $r13 = "[slf5s.start]";

        $i2 = virtualinvoke $r13.<java.lang.String: int length()>();

        i3 = $i0 + $i2;

        goto label02;

     label04:
        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i3 >= $i1 goto label05;

        if z1 == 0 goto label05;

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(i3);

        $r9 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)>($r8);

        if $r9 == null goto label05;

        $r10 = r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void addMessage(org.apache.log4j.lf5.LogRecord)>($r9);

     label05:
        if z2 != 0 goto label06;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid log file format");

        throw $r18;

     label06:
        $r19 = new org.apache.log4j.lf5.util.LogFileParser$1;

        specialinvoke $r19.<org.apache.log4j.lf5.util.LogFileParser$1: void <init>(org.apache.log4j.lf5.util.LogFileParser)>(r0);

        staticinvoke <javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>($r19);

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void destroyDialog()>();

        virtualinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)>("Error - Invalid log file format.\nPlease see documentation on how to load log files.");

        goto label10;

     label09:
        $r15 := @caughtexception;

        specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void destroyDialog()>();

        virtualinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void displayError(java.lang.String)>("Error - Unable to load log file!");

     label10:
        r0.<org.apache.log4j.lf5.util.LogFileParser: java.io.InputStream _in> = null;

        return;

        catch java.lang.RuntimeException from label01 to label07 with label08;
        catch java.io.IOException from label01 to label07 with label09;
    }

    protected void displayError(java.lang.String)
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r2;
        java.lang.String r4;
        org.apache.log4j.lf5.viewer.LogFactor5ErrorDialog $r0;
        javax.swing.JFrame $r3;
        org.apache.log4j.lf5.util.LogFileParser r1;

        r1 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r4 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.lf5.viewer.LogFactor5ErrorDialog;

        $r2 = r1.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JFrame getBaseFrame()>();

        specialinvoke $r0.<org.apache.log4j.lf5.viewer.LogFactor5ErrorDialog: void <init>(javax.swing.JFrame,java.lang.String)>($r3, r4);

        return;
    }

    private void destroyDialog()
    {
        org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog $r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        $r1 = r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog _loadDialog>;

        virtualinvoke $r1.<java.awt.Dialog: void hide()>();

        $r2 = r0.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.viewer.LogFactor5LoadingDialog _loadDialog>;

        virtualinvoke $r2.<java.awt.Window: void dispose()>();

        return;
    }

    private java.lang.String loadLogFile(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedInputStream $r7;
        char $c1;
        java.lang.StringBuffer r6, $r8, $r9;
        int $i0, $i2, $i4;
        java.lang.String $r3;
        java.io.InputStream r1;
        org.apache.log4j.lf5.util.LogFileParser r5;

        r5 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.io.InputStream;

        $r7 = new java.io.BufferedInputStream;

        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r1);

        $i0 = virtualinvoke $r7.<java.io.BufferedInputStream: int available()>();

        if $i0 <= 0 goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>($i0);

        r6 = $r8;

        goto label2;

     label1:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(int)>(1024);

        r6 = $r9;

     label2:
        $i2 = virtualinvoke $r7.<java.io.BufferedInputStream: int read()>();

        $i4 = (int) -1;

        if $i2 == $i4 goto label3;

        $c1 = (char) $i2;

        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label2;

     label3:
        virtualinvoke $r7.<java.io.BufferedInputStream: void close()>();

        $r3 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private java.lang.String parseAttribute(java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, r1, $r3;
        org.apache.log4j.lf5.util.LogFileParser r2;

        r2 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        return null;

     label1:
        $r3 = specialinvoke r2.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String getAttribute(int,java.lang.String)>($i0, r0);

        return $r3;
    }

    private long parseDate(java.lang.String)
    {
        java.util.Date $r4;
        java.text.SimpleDateFormat $r3;
        long $l0;
        java.lang.String r1, $r2;
        java.text.ParseException $r5;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.DATE]", r1);

        if $r2 != null goto label3;

     label2:
        return 0L;

     label3:
        $r3 = <org.apache.log4j.lf5.util.LogFileParser: java.text.SimpleDateFormat _sdf>;

        $r4 = virtualinvoke $r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r2);

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

     label4:
        return $l0;

     label5:
        $r5 := @caughtexception;

        return 0L;

        catch java.text.ParseException from label1 to label2 with label5;
        catch java.text.ParseException from label3 to label4 with label5;
    }

    private org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)
    {
        org.apache.log4j.lf5.LogLevelFormatException $r5;
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;
        org.apache.log4j.lf5.LogLevel $r3, $r4, $r6;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.PRIORITY]", r1);

        if $r2 == null goto label4;

     label1:
        $r4 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel DEBUG>;

        return $r6;

     label4:
        $r3 = <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel DEBUG>;

        return $r3;

        catch org.apache.log4j.lf5.LogLevelFormatException from label1 to label2 with label3;
    }

    private java.lang.String parseThread(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.THREAD]", r1);

        return $r2;
    }

    private java.lang.String parseCategory(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.CATEGORY]", r1);

        return $r2;
    }

    private java.lang.String parseLocation(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.LOCATION]", r1);

        return $r2;
    }

    private java.lang.String parseMessage(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.MESSAGE]", r1);

        return $r2;
    }

    private java.lang.String parseNDC(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseAttribute(java.lang.String,java.lang.String)>("[slf5s.NDC]", r1);

        return $r2;
    }

    private java.lang.String parseThrowable(java.lang.String)
    {
        int $i0;
        java.lang.String r1, $r2;
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String getAttribute(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    private org.apache.log4j.lf5.LogRecord createLogRecord(java.lang.String)
    {
        long $l1;
        org.apache.log4j.lf5.LogLevel $r4;
        int $i0;
        org.apache.log4j.lf5.Log4JLogRecord $r2;
        java.lang.String r0, $r1, $r5, $r6, $r7, $r8, $r9, $r10;
        org.apache.log4j.lf5.util.LogFileParser r3;

        r3 := @this: org.apache.log4j.lf5.util.LogFileParser;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = new org.apache.log4j.lf5.Log4JLogRecord;

        specialinvoke $r2.<org.apache.log4j.lf5.Log4JLogRecord: void <init>()>();

        $l1 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: long parseDate(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMillis(long)>($l1);

        $r4 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: org.apache.log4j.lf5.LogLevel parsePriority(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLevel(org.apache.log4j.lf5.LogLevel)>($r4);

        $r5 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseCategory(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setCategory(java.lang.String)>($r5);

        $r6 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseLocation(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setLocation(java.lang.String)>($r6);

        $r7 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseThread(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThreadDescription(java.lang.String)>($r7);

        $r8 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseNDC(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setNDC(java.lang.String)>($r8);

        $r9 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseMessage(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setMessage(java.lang.String)>($r9);

        $r10 = specialinvoke r3.<org.apache.log4j.lf5.util.LogFileParser: java.lang.String parseThrowable(java.lang.String)>(r0);

        virtualinvoke $r2.<org.apache.log4j.lf5.LogRecord: void setThrownStackTrace(java.lang.String)>($r10);

        return $r2;
    }

    private java.lang.String getAttribute(int, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String r0, $r1, $r2, $r3;
        org.apache.log4j.lf5.util.LogFileParser r4;

        r4 := @this: org.apache.log4j.lf5.util.LogFileParser;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = i0 - 1;

        $i2 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String,int)>("[slf5s.", $i1);

        $i6 = (int) -1;

        if $i2 != $i6 goto label1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r3;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("]", $i2);

        $i4 = $i3 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, i0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    static void access$000(org.apache.log4j.lf5.util.LogFileParser)
    {
        org.apache.log4j.lf5.util.LogFileParser r0;

        r0 := @parameter0: org.apache.log4j.lf5.util.LogFileParser;

        specialinvoke r0.<org.apache.log4j.lf5.util.LogFileParser: void destroyDialog()>();

        return;
    }

    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0;

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String NDC_DELIMITER> = "[slf5s.NDC]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String PRIORITY_DELIMITER> = "[slf5s.PRIORITY]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String MESSAGE_DELIMITER> = "[slf5s.MESSAGE]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String LOCATION_DELIMITER> = "[slf5s.LOCATION]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String CATEGORY_DELIMITER> = "[slf5s.CATEGORY]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String THREAD_DELIMITER> = "[slf5s.THREAD]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String DATE_DELIMITER> = "[slf5s.DATE]";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String ATTRIBUTE_DELIMITER> = "[slf5s.";

        <org.apache.log4j.lf5.util.LogFileParser: java.lang.String RECORD_DELIMITER> = "[slf5s.start]";

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd MMM yyyy HH:mm:ss,S");

        <org.apache.log4j.lf5.util.LogFileParser: java.text.SimpleDateFormat _sdf> = $r0;

        return;
    }
}
