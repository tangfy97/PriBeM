public class org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes extends org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes
{
    private final org.apache.batik.bridge.svg12.DefaultXBLManager this$0;

    public void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager, org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord r2;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes;

        r1 := @parameter0: org.apache.batik.bridge.svg12.DefaultXBLManager;

        r2 := @parameter1: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord;

        specialinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: void <init>(org.apache.batik.bridge.svg12.DefaultXBLManager,org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord)>(r1, r2);

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0> = r1;

        return;
    }

    protected void update()
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes r0;
        org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord $r1, $r5;
        org.apache.batik.bridge.svg12.DefaultXBLManager $r3;
        org.w3c.dom.Element $r4;
        org.w3c.dom.Node $r2, $r6, $r7, r8;

        r0 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes;

        r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = 0;

        $r3 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r1 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record>;

        $r2 = $r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node node>;

        $r4 = virtualinvoke $r3.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>($r2);

        if $r4 != null goto label1;

        $r5 = r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord record>;

        $r6 = $r5.<org.apache.batik.bridge.svg12.DefaultXBLManager$XBLRecord: org.w3c.dom.Node node>;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label2:
        r8 = $r7;

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: void collectXblScopedChildNodes(org.w3c.dom.Node)>(r8);

        r8 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if r8 != null goto label3;

        return;
    }

    protected void collectXblScopedChildNodes(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes r1;
        org.apache.batik.bridge.svg12.DefaultXBLManager $r4;
        short $s0;
        org.w3c.dom.Node r0, $r8;
        int $i1, $i2, $i3, i4;
        java.lang.String $r3;
        boolean $z0, $z1, z2;
        org.w3c.dom.NodeList $r7;
        java.util.List $r2;
        org.apache.batik.bridge.svg12.ContentManager $r5;
        org.apache.batik.dom.svg12.XBLOMContentElement $r6;

        r1 := @this: org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes;

        r0 := @parameter0: org.w3c.dom.Node;

        z2 = 0;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2004/xbl");

        if $z0 != 0 goto label1;

        z2 = 1;

        goto label6;

     label1:
        $z1 = r0 instanceof org.apache.batik.dom.svg12.XBLOMContentElement;

        if $z1 == 0 goto label6;

        $r4 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: org.apache.batik.bridge.svg12.DefaultXBLManager this$0>;

        $r5 = virtualinvoke $r4.<org.apache.batik.bridge.svg12.DefaultXBLManager: org.apache.batik.bridge.svg12.ContentManager getContentManager(org.w3c.dom.Node)>(r0);

        if $r5 == null goto label4;

        $r6 = (org.apache.batik.dom.svg12.XBLOMContentElement) r0;

        $r7 = virtualinvoke $r5.<org.apache.batik.bridge.svg12.ContentManager: org.w3c.dom.NodeList getSelectedContent(org.apache.batik.dom.svg12.XBLOMContentElement)>($r6);

        i4 = 0;

        goto label3;

     label2:
        $r8 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        virtualinvoke r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblScopedChildNodes: void collectXblScopedChildNodes(org.w3c.dom.Node)>($r8);

        i4 = i4 + 1;

     label3:
        $i3 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        if i4 < $i3 goto label2;

     label4:
        goto label6;

     label5:
        z2 = 1;

     label6:
        if z2 == 0 goto label7;

        $r2 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $i1 = r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size>;

        $i2 = $i1 + 1;

        r1.<org.apache.batik.bridge.svg12.DefaultXBLManager$XblChildNodes: int size> = $i2;

     label7:
        return;
    }
}
