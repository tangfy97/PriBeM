public class thredds.util.HttpUriResolver extends java.lang.Object
{
    private org.slf4j.Logger logger;
    private java.net.URI uri;
    private long connectionTimeout;
    private int socketTimeout;
    private java.lang.String contentEncoding;
    private boolean allowContentEncoding;
    private boolean followRedirects;
    private opendap.dap.http.HTTPMethod method;
    private opendap.dap.http.HTTPSession session;
    private java.util.Map respHeaders;

    void <init>(java.net.URI, long, int, boolean, boolean)
    {
        thredds.util.HttpUriResolver r0;
        long l0;
        int i1;
        java.net.URI r2;
        java.lang.String $r3, $r7, $r10;
        boolean $z0, z1, z2;
        org.slf4j.Logger $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r0 := @this: thredds.util.HttpUriResolver;

        r2 := @parameter0: java.net.URI;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/util/HttpUriResolver;");

        r0.<thredds.util.HttpUriResolver: org.slf4j.Logger logger> = $r1;

        r0.<thredds.util.HttpUriResolver: java.lang.String contentEncoding> = "gzip,deflate";

        r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method> = null;

        r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session> = null;

        $r3 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("http");

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given a Non-HTTP URI [");

        $r7 = virtualinvoke r2.<java.net.URI: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<thredds.util.HttpUriResolver: java.net.URI uri> = r2;

        r0.<thredds.util.HttpUriResolver: long connectionTimeout> = l0;

        r0.<thredds.util.HttpUriResolver: int socketTimeout> = i1;

        r0.<thredds.util.HttpUriResolver: boolean allowContentEncoding> = z1;

        r0.<thredds.util.HttpUriResolver: boolean followRedirects> = z2;

        return;
    }

    public void close()
    {
        opendap.dap.http.HTTPMethod $r1, $r4;
        opendap.dap.http.HTTPSession $r2, $r3;
        thredds.util.HttpUriResolver r0;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 == null goto label1;

        $r4 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        virtualinvoke $r4.<opendap.dap.http.HTTPMethod: void close()>();

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        if $r2 == null goto label2;

        $r3 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        virtualinvoke $r3.<opendap.dap.http.HTTPSession: void close()>();

     label2:
        return;
    }

    public java.net.URI getUri()
    {
        thredds.util.HttpUriResolver r0;
        java.net.URI $r1;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: java.net.URI uri>;

        return $r1;
    }

    public long getConnectionTimeout()
    {
        thredds.util.HttpUriResolver r0;
        long $l0;

        r0 := @this: thredds.util.HttpUriResolver;

        $l0 = r0.<thredds.util.HttpUriResolver: long connectionTimeout>;

        return $l0;
    }

    public int getSocketTimeout()
    {
        int $i0;
        thredds.util.HttpUriResolver r0;

        r0 := @this: thredds.util.HttpUriResolver;

        $i0 = r0.<thredds.util.HttpUriResolver: int socketTimeout>;

        return $i0;
    }

    public java.lang.String getContentEncoding()
    {
        thredds.util.HttpUriResolver r0;
        java.lang.String $r1;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: java.lang.String contentEncoding>;

        return $r1;
    }

    public boolean getAllowContentEncoding()
    {
        thredds.util.HttpUriResolver r0;
        boolean $z0;

        r0 := @this: thredds.util.HttpUriResolver;

        $z0 = r0.<thredds.util.HttpUriResolver: boolean allowContentEncoding>;

        return $z0;
    }

    public boolean getFollowRedirects()
    {
        thredds.util.HttpUriResolver r0;
        boolean $z0;

        r0 := @this: thredds.util.HttpUriResolver;

        $z0 = r0.<thredds.util.HttpUriResolver: boolean followRedirects>;

        return $z0;
    }

    public void makeRequest() throws java.io.IOException
    {
        java.lang.IllegalStateException $r4;
        opendap.dap.http.HTTPMethod $r1, $r3;
        thredds.util.HttpUriResolver r0;
        java.net.URI $r2;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 == null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request already made.");

        throw $r4;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: java.net.URI uri>;

        $r3 = specialinvoke r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod getHttpResponse(java.net.URI)>($r2);

        r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method> = $r3;

        return;
    }

    public int getResponseStatusCode()
    {
        java.lang.IllegalStateException $r3;
        opendap.dap.http.HTTPMethod $r1, $r2;
        int $i0;
        thredds.util.HttpUriResolver r0;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has not been made.");

        throw $r3;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $i0 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: int getStatusCode()>();

        return $i0;
    }

    public java.lang.String getResponseStatusText()
    {
        java.lang.IllegalStateException $r4;
        opendap.dap.http.HTTPMethod $r1, $r2;
        thredds.util.HttpUriResolver r0;
        java.lang.String $r3;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has not been made.");

        throw $r4;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $r3 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.lang.String getStatusText()>();

        return $r3;
    }

    public java.util.Map getResponseHeaders()
    {
        java.lang.IllegalStateException $r11;
        opendap.dap.http.HTTPMethod $r1, $r5;
        thredds.util.HttpUriResolver r0;
        java.util.HashMap $r4;
        org.apache.commons.httpclient.Header r7;
        java.util.Map $r2, $r3, $r8;
        int i0, i1;
        java.lang.String $r9, $r10;
        org.apache.commons.httpclient.Header[] $r6;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 != null goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has not been made.");

        throw $r11;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: java.util.Map respHeaders>;

        if $r2 != null goto label3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<thredds.util.HttpUriResolver: java.util.Map respHeaders> = $r4;

        $r5 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $r6 = virtualinvoke $r5.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header[] getResponseHeaders()>();

        i0 = lengthof $r6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r7 = $r6[i1];

        $r8 = r0.<thredds.util.HttpUriResolver: java.util.Map respHeaders>;

        $r9 = virtualinvoke r7.<org.apache.commons.httpclient.Header: java.lang.String getName()>();

        $r10 = virtualinvoke r7.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = r0.<thredds.util.HttpUriResolver: java.util.Map respHeaders>;

        return $r3;
    }

    public java.lang.String getResponseHeaderValue(java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        opendap.dap.http.HTTPMethod $r1, $r3;
        thredds.util.HttpUriResolver r0;
        java.lang.String r2, $r6;
        org.apache.commons.httpclient.Header $r4;

        r0 := @this: thredds.util.HttpUriResolver;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has not been made.");

        throw $r5;

     label1:
        $r3 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $r4 = virtualinvoke $r3.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>(r2);

        if $r4 != null goto label2;

        $r6 = null;

        goto label3;

     label2:
        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

     label3:
        return $r6;
    }

    public java.io.InputStream getResponseBodyAsInputStream() throws java.io.IOException
    {
        java.lang.IllegalStateException $r9;
        java.util.zip.GZIPInputStream $r8;
        opendap.dap.http.HTTPMethod $r1, $r2, $r4;
        java.util.zip.InflaterInputStream $r7;
        thredds.util.HttpUriResolver r0;
        org.apache.commons.httpclient.Header $r5;
        java.lang.String $r6;
        java.io.InputStream $r3;
        boolean $z0, $z1;

        r0 := @this: thredds.util.HttpUriResolver;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request has not been made.");

        throw $r9;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $r3 = virtualinvoke $r2.<opendap.dap.http.HTTPMethod: java.io.InputStream getResponseAsStream()>();

        $r4 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPMethod method>;

        $r5 = virtualinvoke $r4.<opendap.dap.http.HTTPMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("Content-Encoding");

        if $r5 == null goto label3;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        if $r6 == null goto label3;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gzip");

        if $z0 == 0 goto label2;

        $r8 = new java.util.zip.GZIPInputStream;

        specialinvoke $r8.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r3);

        return $r8;

     label2:
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("deflate");

        if $z1 == 0 goto label3;

        $r7 = new java.util.zip.InflaterInputStream;

        specialinvoke $r7.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r3);

        return $r7;

     label3:
        return $r3;
    }

    private opendap.dap.http.HTTPMethod getHttpResponse(java.net.URI) throws java.io.IOException, opendap.dap.http.HTTPException
    {
        opendap.dap.http.HTTPMethod $r7;
        opendap.dap.http.HTTPSession $r1, $r2, $r3, $r5, $r9;
        thredds.util.HttpUriResolver r0;
        long $l0;
        int $i1, $i2;
        java.net.URI r4;
        java.lang.String $r6, $r8;
        boolean $z0;

        r0 := @this: thredds.util.HttpUriResolver;

        r4 := @parameter0: java.net.URI;

        $r1 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        if $r1 != null goto label1;

        $r9 = new opendap.dap.http.HTTPSession;

        specialinvoke $r9.<opendap.dap.http.HTTPSession: void <init>()>();

        r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session> = $r9;

     label1:
        $r2 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        $l0 = r0.<thredds.util.HttpUriResolver: long connectionTimeout>;

        virtualinvoke $r2.<opendap.dap.http.HTTPSession: void setConnectionManagerTimeout(long)>($l0);

        $r3 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        $i1 = r0.<thredds.util.HttpUriResolver: int socketTimeout>;

        virtualinvoke $r3.<opendap.dap.http.HTTPSession: void setSoTimeout(int)>($i1);

        $r5 = r0.<thredds.util.HttpUriResolver: opendap.dap.http.HTTPSession session>;

        $r6 = virtualinvoke r4.<java.net.URI: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<opendap.dap.http.HTTPSession: opendap.dap.http.HTTPMethod newMethodGet(java.lang.String)>($r6);

        $z0 = r0.<thredds.util.HttpUriResolver: boolean followRedirects>;

        virtualinvoke $r7.<opendap.dap.http.HTTPMethod: void setFollowRedirects(boolean)>($z0);

        $r8 = r0.<thredds.util.HttpUriResolver: java.lang.String contentEncoding>;

        virtualinvoke $r7.<opendap.dap.http.HTTPMethod: void setRequestHeader(java.lang.String,java.lang.String)>("Accept-Encoding", $r8);

        virtualinvoke $r7.<opendap.dap.http.HTTPMethod: int execute()>();

        $i2 = virtualinvoke $r7.<opendap.dap.http.HTTPMethod: int getStatusCode()>();

        if $i2 == 200 goto label2;

        if $i2 != 201 goto label3;

     label2:
        return $r7;

     label3:
        return null;
    }
}
