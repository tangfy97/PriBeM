final class org.apache.commons.codec.language.bm.Rule$Phoneme$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r0;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.commons.codec.language.bm.Rule$Phoneme, org.apache.commons.codec.language.bm.Rule$Phoneme)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme r0, r3;
        int $i0, $i1, $i2, $i3, i6, i7, $i8, $i9, $i11;
        java.lang.CharSequence $r1, $r2, $r4, $r5, $r6, $r7;
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r8;
        char $c4, $c5;

        r8 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        r0 := @parameter0: org.apache.commons.codec.language.bm.Rule$Phoneme;

        r3 := @parameter1: org.apache.commons.codec.language.bm.Rule$Phoneme;

        i7 = 0;

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r0);

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i7 >= $i0 goto label4;

        $r5 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r3);

        $i3 = interfaceinvoke $r5.<java.lang.CharSequence: int length()>();

        if i7 < $i3 goto label2;

        return 1;

     label2:
        $r6 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r0);

        $c4 = interfaceinvoke $r6.<java.lang.CharSequence: char charAt(int)>(i7);

        $r7 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r3);

        $c5 = interfaceinvoke $r7.<java.lang.CharSequence: char charAt(int)>(i7);

        $i8 = (int) $c4;

        $i9 = (int) $c5;

        i6 = $i8 - $i9;

        if i6 == 0 goto label3;

        return i6;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $r2 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r0);

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $r4 = staticinvoke <org.apache.commons.codec.language.bm.Rule$Phoneme: java.lang.CharSequence access$000(org.apache.commons.codec.language.bm.Rule$Phoneme)>(r3);

        $i2 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        if $i1 >= $i2 goto label5;

        $i11 = (int) -1;

        return $i11;

     label5:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.codec.language.bm.Rule$Phoneme$1 r0;
        int $i0;
        java.lang.Object r1, r2;
        org.apache.commons.codec.language.bm.Rule$Phoneme $r3, $r4;

        r0 := @this: org.apache.commons.codec.language.bm.Rule$Phoneme$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.commons.codec.language.bm.Rule$Phoneme) r1;

        $r3 = (org.apache.commons.codec.language.bm.Rule$Phoneme) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.codec.language.bm.Rule$Phoneme$1: int compare(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme)>($r4, $r3);

        return $i0;
    }
}
