public abstract class org.codehaus.jettison.AbstractXMLInputFactory extends javax.xml.stream.XMLInputFactory
{
    static final int INPUT_BUF_SIZE;

    public void <init>()
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        specialinvoke r0.<javax.xml.stream.XMLInputFactory: void <init>()>();

        return;
    }

    public javax.xml.stream.XMLEventReader createFilteredReader(javax.xml.stream.XMLEventReader, javax.xml.stream.EventFilter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r1;
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.EventFilter r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        r2 := @parameter1: javax.xml.stream.EventFilter;

        return null;
    }

    public javax.xml.stream.XMLStreamReader createFilteredReader(javax.xml.stream.XMLStreamReader, javax.xml.stream.StreamFilter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.StreamFilter r2;
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        r2 := @parameter1: javax.xml.stream.StreamFilter;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(java.io.InputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.InputStream;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.io.Reader r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.Reader;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.transform.Source r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.transform.Source;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String, java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String, java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        return null;
    }

    public javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        return null;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)>(r1, null);

        return $r2;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.io.IOException $r5;
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader $r4;
        javax.xml.stream.XMLStreamException $r6;
        org.codehaus.jettison.json.JSONTokener $r3;
        java.lang.String $r2, r7;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.InputStream;

        r7 := @parameter1: java.lang.String;

        if r7 != null goto label1;

        r7 = "UTF-8";

     label1:
        $r2 = specialinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: java.lang.String readAll(java.io.InputStream,java.lang.String)>(r1, r7);

        $r3 = new org.codehaus.jettison.json.JSONTokener;

        specialinvoke $r3.<org.codehaus.jettison.json.JSONTokener: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.codehaus.jettison.json.JSONTokener)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r6.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.String readAll(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        java.io.ByteArrayOutputStream r4, $r5;
        org.codehaus.jettison.AbstractXMLInputFactory r3;
        int $i0, i1;
        java.lang.String r2, $r6;
        java.io.InputStream r1;

        r3 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r0 = newarray (byte)[512];

        r4 = null;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 >= 0 goto label2;

        goto label7;

     label2:
        if r4 != null goto label6;

        if $i0 >= 64 goto label3;

        i1 = 64;

        goto label5;

     label3:
        if $i0 != 512 goto label4;

        i1 = 2048;

        goto label5;

     label4:
        i1 = $i0;

     label5:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>(i1);

        r4 = $r5;

     label6:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label7:
        if r4 != null goto label8;

        $r6 = "";

        goto label9;

     label8:
        $r6 = virtualinvoke r4.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>(r2);

     label9:
        return $r6;
    }

    public abstract javax.xml.stream.XMLStreamReader createXMLStreamReader(org.codehaus.jettison.json.JSONTokener) throws javax.xml.stream.XMLStreamException;

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader $r4;
        javax.xml.stream.XMLStreamException $r6;
        org.codehaus.jettison.json.JSONTokener $r1;
        java.io.IOException $r5;
        java.io.Reader r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r2 := @parameter0: java.io.Reader;

     label1:
        $r1 = new org.codehaus.jettison.json.JSONTokener;

        $r3 = specialinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: java.lang.String readAll(java.io.Reader)>(r2);

        specialinvoke $r1.<org.codehaus.jettison.json.JSONTokener: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.codehaus.jettison.json.JSONTokener)>($r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r6.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.String readAll(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r1;
        java.io.CharArrayWriter $r7;
        org.codehaus.jettison.AbstractXMLInputFactory r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        char[] r0;
        java.lang.String $r3, $r5, $r6;

        r4 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.io.Reader;

        r0 = newarray (char)[512];

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 - i5;

        $i2 = virtualinvoke r1.<java.io.Reader: int read(char[],int,int)>(r0, i5, $i1);

        if $i2 >= 0 goto label4;

        if i5 != 0 goto label2;

        $r5 = "";

        goto label3;

     label2:
        $r6 = new java.lang.String;

        $r5 = $r6;

        specialinvoke $r6.<java.lang.String: void <init>(char[],int,int)>(r0, 0, i5);

     label3:
        return $r5;

     label4:
        i5 = i5 + $i2;

        $i3 = lengthof r0;

        if i5 < $i3 goto label1;

        $r7 = new java.io.CharArrayWriter;

        specialinvoke $r7.<java.io.CharArrayWriter: void <init>(int)>(2048);

        virtualinvoke $r7.<java.io.CharArrayWriter: void write(char[],int,int)>(r0, 0, i5);

     label5:
        $i4 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r0);

        $i7 = (int) -1;

        if $i4 == $i7 goto label6;

        virtualinvoke $r7.<java.io.CharArrayWriter: void write(char[],int,int)>(r0, 0, $i4);

        goto label5;

     label6:
        $r3 = virtualinvoke $r7.<java.io.CharArrayWriter: java.lang.String toString()>();

        return $r3;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        java.lang.UnsupportedOperationException $r1, $r6;
        javax.xml.transform.stream.StreamSource r2;
        javax.xml.transform.Source r0;
        java.io.Reader $r5;
        org.codehaus.jettison.AbstractXMLInputFactory r7;
        javax.xml.stream.XMLStreamReader $r8, $r9, $r10, $r11;
        java.lang.String $r4;
        boolean $z0;
        java.io.InputStream $r3;

        r7 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r0 := @parameter0: javax.xml.transform.Source;

        $z0 = r0 instanceof javax.xml.transform.stream.StreamSource;

        if $z0 == 0 goto label5;

        r2 = (javax.xml.transform.stream.StreamSource) r0;

        $r3 = virtualinvoke r2.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

        $r4 = virtualinvoke r2.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        if $r3 == null goto label2;

        if $r4 == null goto label1;

        $r11 = virtualinvoke r7.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.InputStream)>($r4, $r3);

        return $r11;

     label1:
        $r10 = virtualinvoke r7.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>($r3);

        return $r10;

     label2:
        $r5 = virtualinvoke r2.<javax.xml.transform.stream.StreamSource: java.io.Reader getReader()>();

        if $r5 == null goto label4;

        if $r4 == null goto label3;

        $r9 = virtualinvoke r7.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.Reader)>($r4, $r5);

        return $r9;

     label3:
        $r8 = virtualinvoke r7.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>($r5);

        return $r8;

     label4:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only those javax.xml.transform.stream.StreamSource instances supported that have an InputStream or Reader");

        throw $r6;

     label5:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only javax.xml.transform.stream.StreamSource type supported");

        throw $r1;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String, java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.String r3;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)>(r1, null);

        return $r2;
    }

    public javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String, java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.io.Reader r1;
        java.lang.String r3;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Reader;

        $r2 = virtualinvoke r0.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1);

        return $r2;
    }

    public javax.xml.stream.util.XMLEventAllocator getEventAllocator()
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        return null;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r1;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public javax.xml.stream.XMLReporter getXMLReporter()
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        return null;
    }

    public javax.xml.stream.XMLResolver getXMLResolver()
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        return null;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void setEventAllocator(javax.xml.stream.util.XMLEventAllocator)
    {
        javax.xml.stream.util.XMLEventAllocator r1;
        org.codehaus.jettison.AbstractXMLInputFactory r0;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.util.XMLEventAllocator;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jettison.AbstractXMLInputFactory r1;
        java.lang.Object r3;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public void setXMLReporter(javax.xml.stream.XMLReporter)
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLReporter r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLReporter;

        return;
    }

    public void setXMLResolver(javax.xml.stream.XMLResolver)
    {
        org.codehaus.jettison.AbstractXMLInputFactory r0;
        javax.xml.stream.XMLResolver r1;

        r0 := @this: org.codehaus.jettison.AbstractXMLInputFactory;

        r1 := @parameter0: javax.xml.stream.XMLResolver;

        return;
    }

    public static void <clinit>()
    {
        <org.codehaus.jettison.AbstractXMLInputFactory: int INPUT_BUF_SIZE> = 512;

        return;
    }
}
