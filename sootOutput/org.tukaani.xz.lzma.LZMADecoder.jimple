public final class org.tukaani.xz.lzma.LZMADecoder extends org.tukaani.xz.lzma.LZMACoder
{
    private final org.tukaani.xz.lz.LZDecoder lz;
    private final org.tukaani.xz.rangecoder.RangeDecoder rc;
    private final org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder literalDecoder;
    private final org.tukaani.xz.lzma.LZMADecoder$LengthDecoder matchLenDecoder;
    private final org.tukaani.xz.lzma.LZMADecoder$LengthDecoder repLenDecoder;

    public void <init>(org.tukaani.xz.lz.LZDecoder, org.tukaani.xz.rangecoder.RangeDecoder, int, int, int)
    {
        org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder $r5;
        int i0, i1, i2;
        org.tukaani.xz.lz.LZDecoder r3;
        org.tukaani.xz.lzma.LZMADecoder r0;
        org.tukaani.xz.rangecoder.RangeDecoder r4;
        org.tukaani.xz.lzma.LZMADecoder$LengthDecoder $r1, $r2;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        r3 := @parameter0: org.tukaani.xz.lz.LZDecoder;

        r4 := @parameter1: org.tukaani.xz.rangecoder.RangeDecoder;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder: void <init>(int)>(i0);

        $r1 = new org.tukaani.xz.lzma.LZMADecoder$LengthDecoder;

        specialinvoke $r1.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: void <init>(org.tukaani.xz.lzma.LZMADecoder,org.tukaani.xz.lzma.LZMADecoder$1)>(r0, null);

        r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder matchLenDecoder> = $r1;

        $r2 = new org.tukaani.xz.lzma.LZMADecoder$LengthDecoder;

        specialinvoke $r2.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: void <init>(org.tukaani.xz.lzma.LZMADecoder,org.tukaani.xz.lzma.LZMADecoder$1)>(r0, null);

        r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder repLenDecoder> = $r2;

        r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz> = r3;

        r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc> = r4;

        $r5 = new org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder;

        specialinvoke $r5.<org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder: void <init>(org.tukaani.xz.lzma.LZMADecoder,int,int)>(r0, i1, i2);

        r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder literalDecoder> = $r5;

        virtualinvoke r0.<org.tukaani.xz.lzma.LZMADecoder: void reset()>();

        return;
    }

    public void reset()
    {
        org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder $r1;
        org.tukaani.xz.lzma.LZMADecoder r0;
        org.tukaani.xz.lzma.LZMADecoder$LengthDecoder $r2, $r3;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder: void reset()>();

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder literalDecoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder: void reset()>();

        $r2 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder matchLenDecoder>;

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: void reset()>();

        $r3 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder repLenDecoder>;

        virtualinvoke $r3.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: void reset()>();

        return;
    }

    public boolean endMarkerDetected()
    {
        int[] $r1;
        int $i0, $i2;
        org.tukaani.xz.lzma.LZMADecoder r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i0 = $r1[0];

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void decode() throws java.io.IOException
    {
        short[][] $r7;
        org.tukaani.xz.lzma.State $r5, $r9;
        int[] $r12;
        org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder $r14;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.tukaani.xz.lzma.LZMADecoder r0;
        boolean $z0;
        org.tukaani.xz.lz.LZDecoder $r1, $r2, $r4, $r13;
        short[] $r8, $r11;
        org.tukaani.xz.rangecoder.RangeDecoder $r3, $r6, $r10;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz>;

        virtualinvoke $r1.<org.tukaani.xz.lz.LZDecoder: void repeatPending()>();

     label1:
        $r2 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz>;

        $z0 = virtualinvoke $r2.<org.tukaani.xz.lz.LZDecoder: boolean hasSpace()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz>;

        $i0 = virtualinvoke $r4.<org.tukaani.xz.lz.LZDecoder: int getPos()>();

        $i1 = r0.<org.tukaani.xz.lzma.LZMADecoder: int posMask>;

        i2 = $i0 & $i1;

        $r6 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[][] isMatch>;

        $r5 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.lzma.State: int get()>();

        $r8 = $r7[$i3];

        $i4 = virtualinvoke $r6.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r8, i2);

        if $i4 != 0 goto label2;

        $r14 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder literalDecoder>;

        virtualinvoke $r14.<org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder: void decode()>();

        goto label5;

     label2:
        $r10 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r11 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[] isRep>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i5 = virtualinvoke $r9.<org.tukaani.xz.lzma.State: int get()>();

        $i6 = virtualinvoke $r10.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r11, $i5);

        if $i6 != 0 goto label3;

        $i8 = specialinvoke r0.<org.tukaani.xz.lzma.LZMADecoder: int decodeMatch(int)>(i2);

        goto label4;

     label3:
        $i8 = specialinvoke r0.<org.tukaani.xz.lzma.LZMADecoder: int decodeRepMatch(int)>(i2);

     label4:
        $r13 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz>;

        $r12 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i7 = $r12[0];

        virtualinvoke $r13.<org.tukaani.xz.lz.LZDecoder: void repeat(int,int)>($i7, $i8);

     label5:
        goto label1;

     label6:
        $r3 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        virtualinvoke $r3.<org.tukaani.xz.rangecoder.RangeDecoder: void normalize()>();

        return;
    }

    private int decodeMatch(int) throws java.io.IOException
    {
        short[][] $r10, $r19;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r12, $r13, $r15, $r18, $r22;
        short[] $r11, $r16, $r20;
        org.tukaani.xz.lzma.State $r1;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        org.tukaani.xz.lzma.LZMADecoder r0;
        org.tukaani.xz.lzma.LZMADecoder$LengthDecoder $r8;
        org.tukaani.xz.rangecoder.RangeDecoder $r9, $r14, $r17, $r21;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        i3 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.State: void updateMatch()>();

        $r3 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i0 = $r2[2];

        $r3[3] = $i0;

        $r5 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r4 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i1 = $r4[1];

        $r5[2] = $i1;

        $r7 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r6 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i2 = $r6[0];

        $r7[1] = $i2;

        $r8 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder matchLenDecoder>;

        $i4 = virtualinvoke $r8.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: int decode(int)>(i3);

        $r9 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r10 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[][] distSlots>;

        $i5 = staticinvoke <org.tukaani.xz.lzma.LZMADecoder: int getDistState(int)>($i4);

        $r11 = $r10[$i5];

        $i6 = virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBitTree(short[])>($r11);

        if $i6 >= 4 goto label1;

        $r22 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r22[0] = $i6;

        goto label3;

     label1:
        $i7 = $i6 >> 1;

        i8 = $i7 - 1;

        $r12 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i9 = $i6 & 1;

        $i10 = 2 | $i9;

        $i11 = $i10 << i8;

        $r12[0] = $i11;

        if $i6 >= 14 goto label2;

        $r18 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i21 = $r18[0];

        $r21 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r19 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[][] distSpecial>;

        $i20 = $i6 - 4;

        $r20 = $r19[$i20];

        $i22 = virtualinvoke $r21.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeReverseBitTree(short[])>($r20);

        $i23 = $i21 | $i22;

        $r18[0] = $i23;

        goto label3;

     label2:
        $r13 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i13 = $r13[0];

        $r14 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $i12 = i8 - 4;

        $i14 = virtualinvoke $r14.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeDirectBits(int)>($i12);

        $i15 = $i14 << 4;

        $i16 = $i13 | $i15;

        $r13[0] = $i16;

        $r15 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i17 = $r15[0];

        $r17 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r16 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[] distAlign>;

        $i18 = virtualinvoke $r17.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeReverseBitTree(short[])>($r16);

        $i19 = $i17 | $i18;

        $r15[0] = $i19;

     label3:
        return $i4;
    }

    private int decodeRepMatch(int) throws java.io.IOException
    {
        short[][] $r19;
        int[] $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r22, $r23, $r24;
        short[] $r3, $r6, $r9, $r20;
        org.tukaani.xz.lzma.State $r1, $r4, $r7, $r17, $r21, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, $i12, $i13;
        org.tukaani.xz.lzma.LZMADecoder r0;
        org.tukaani.xz.lzma.LZMADecoder$LengthDecoder $r26;
        org.tukaani.xz.rangecoder.RangeDecoder $r2, $r5, $r8, $r18;

        r0 := @this: org.tukaani.xz.lzma.LZMADecoder;

        i8 := @parameter0: int;

        $r2 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r3 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[] isRep0>;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i0 = virtualinvoke $r1.<org.tukaani.xz.lzma.State: int get()>();

        $i1 = virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r3, $i0);

        if $i1 != 0 goto label1;

        $r18 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r19 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[][] isRep0Long>;

        $r17 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i9 = virtualinvoke $r17.<org.tukaani.xz.lzma.State: int get()>();

        $r20 = $r19[$i9];

        $i10 = virtualinvoke $r18.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r20, i8);

        if $i10 != 0 goto label6;

        $r21 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r21.<org.tukaani.xz.lzma.State: void updateShortRep()>();

        return 1;

     label1:
        $r5 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r6 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[] isRep1>;

        $r4 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i2 = virtualinvoke $r4.<org.tukaani.xz.lzma.State: int get()>();

        $i3 = virtualinvoke $r5.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r6, $i2);

        if $i3 != 0 goto label2;

        $r16 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        i11 = $r16[1];

        goto label5;

     label2:
        $r8 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMADecoder: short[] isRep2>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        $i4 = virtualinvoke $r7.<org.tukaani.xz.lzma.State: int get()>();

        $i5 = virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeDecoder: int decodeBit(short[],int)>($r9, $i4);

        if $i5 != 0 goto label3;

        $r15 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        i11 = $r15[2];

        goto label4;

     label3:
        $r10 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        i11 = $r10[3];

        $r12 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r11 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i6 = $r11[2];

        $r12[3] = $i6;

     label4:
        $r14 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r13 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i7 = $r13[1];

        $r14[2] = $i7;

     label5:
        $r22 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r23 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $i12 = $r23[0];

        $r22[1] = $i12;

        $r24 = r0.<org.tukaani.xz.lzma.LZMADecoder: int[] reps>;

        $r24[0] = i11;

     label6:
        $r25 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r25.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        $r26 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lzma.LZMADecoder$LengthDecoder repLenDecoder>;

        $i13 = virtualinvoke $r26.<org.tukaani.xz.lzma.LZMADecoder$LengthDecoder: int decode(int)>(i8);

        return $i13;
    }

    static org.tukaani.xz.lz.LZDecoder access$200(org.tukaani.xz.lzma.LZMADecoder)
    {
        org.tukaani.xz.lz.LZDecoder $r1;
        org.tukaani.xz.lzma.LZMADecoder r0;

        r0 := @parameter0: org.tukaani.xz.lzma.LZMADecoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.lz.LZDecoder lz>;

        return $r1;
    }

    static org.tukaani.xz.rangecoder.RangeDecoder access$400(org.tukaani.xz.lzma.LZMADecoder)
    {
        org.tukaani.xz.lzma.LZMADecoder r0;
        org.tukaani.xz.rangecoder.RangeDecoder $r1;

        r0 := @parameter0: org.tukaani.xz.lzma.LZMADecoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMADecoder: org.tukaani.xz.rangecoder.RangeDecoder rc>;

        return $r1;
    }
}
