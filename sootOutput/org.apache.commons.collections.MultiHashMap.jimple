public class org.apache.commons.collections.MultiHashMap extends java.util.HashMap implements org.apache.commons.collections.MultiMap
{
    private transient java.util.Collection values;
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.collections.MultiHashMap r0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values> = null;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.commons.collections.MultiHashMap r0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(i0);

        r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values> = null;

        return;
    }

    public void <init>(int, float)
    {
        int i0;
        float f0;
        org.apache.commons.collections.MultiHashMap r0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values> = null;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Map r1;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $f0 = (float) $i0;

        $f1 = $f0 * 1.4F;

        $i1 = (int) $f1;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>($i1);

        r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values> = null;

        virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections.MultiHashMap r1;
        java.io.ObjectInputStream r0;
        java.lang.SecurityException $r11;
        java.lang.String r12;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Iterator $r3, $r9;
        java.util.Collection $r8;
        java.util.Set $r2;
        java.lang.Object $r4, $r6, $r7, $r10;

        r1 := @this: org.apache.commons.collections.MultiHashMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        r12 = "1.2";

     label1:
        r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        $z0 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("1.2");

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("1.3");

        if $z1 == 0 goto label7;

     label5:
        $r2 = virtualinvoke r1.<org.apache.commons.collections.MultiHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.util.Collection) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        specialinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        goto label6;

     label7:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public int totalSize()
    {
        java.util.Iterator $r2;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r1, r4;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        i1 = 0;

        $r1 = specialinvoke r0.<java.util.HashMap: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Collection) $r3;

        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public java.util.Collection getCollection(java.lang.Object)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r3;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (java.util.Collection) $r2;

        return $r3;
    }

    public int size(java.lang.Object)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        return $i0;
    }

    public java.util.Iterator iterator(java.lang.Object)
    {
        java.util.Iterator $r3, $r4;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r4 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r2, $r4, r5;
        java.lang.Object r1, r3, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        r5 = $r2;

        if $r2 != null goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection createCollection(java.util.Collection)>(null);

        r5 = $r4;

        specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        $z0 = interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        $r6 = r3;

        goto label3;

     label2:
        $r6 = null;

     label3:
        return $r6;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections.MultiHashMap r4;
        java.util.Map r0;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r13, r14;
        java.util.Iterator $r2, $r8;
        java.util.Collection r11;
        java.util.Set $r1, $r7;
        java.lang.Object $r3, $r5, $r6, $r9, $r10, $r12;

        r4 := @this: org.apache.commons.collections.MultiHashMap;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof org.apache.commons.collections.MultiMap;

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.util.Collection) $r10;

        $r12 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r4.<org.apache.commons.collections.MultiHashMap: boolean putAll(java.lang.Object,java.util.Collection)>($r12, r11);

        goto label1;

     label2:
        goto label5;

     label3:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r4.<org.apache.commons.collections.MultiHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label4;

     label5:
        return;
    }

    public boolean putAll(java.lang.Object, java.util.Collection)
    {
        org.apache.commons.collections.MultiHashMap r1;
        java.util.Collection r0, $r3, $r4;
        int $i0, $i1;
        java.lang.Object r2;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.MultiHashMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r2);

        if $r3 != null goto label4;

        $r4 = virtualinvoke r1.<org.apache.commons.collections.MultiHashMap: java.util.Collection createCollection(java.util.Collection)>(r0);

        $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        if $i1 != 0 goto label3;

        return 0;

     label3:
        specialinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return 1;

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>(r0);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection r6;
        java.util.Set $r1;
        java.lang.Object $r3, $r5, r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r7 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.util.Collection) $r5;

        $z1 = interfaceinvoke r6.<java.util.Collection: boolean contains(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public boolean containsValue(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        return $z0;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label3:
        return r3;
    }

    public void clear()
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection r6;
        java.util.Set $r1;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        $r1 = specialinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.util.Collection) $r5;

        interfaceinvoke r6.<java.util.Collection: void clear()>();

        goto label1;

     label2:
        specialinvoke r0.<java.util.HashMap: void clear()>();

        return;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.MultiHashMap$Values $r3;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection r1, $r2;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        r1 = r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.commons.collections.MultiHashMap$Values;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.commons.collections.MultiHashMap$Values: void <init>(org.apache.commons.collections.MultiHashMap,org.apache.commons.collections.MultiHashMap$1)>(r0, null);

        r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection values> = $r3;

     label2:
        return $r2;
    }

    java.util.Iterator superValuesIterator()
    {
        java.util.Iterator $r2;
        org.apache.commons.collections.MultiHashMap r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        $r1 = specialinvoke r0.<java.util.HashMap: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.lang.Object clone()
    {
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        org.apache.commons.collections.MultiHashMap r0, r2;
        java.util.Collection r8, $r9;
        java.util.Set $r3;
        java.lang.Object $r1, $r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.MultiHashMap;

        $r1 = specialinvoke r0.<java.util.HashMap: java.lang.Object clone()>();

        r2 = (org.apache.commons.collections.MultiHashMap) $r1;

        $r3 = virtualinvoke r2.<org.apache.commons.collections.MultiHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.util.Collection) $r7;

        $r9 = virtualinvoke r0.<org.apache.commons.collections.MultiHashMap: java.util.Collection createCollection(java.util.Collection)>(r8);

        interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r9);

        goto label1;

     label2:
        return r2;
    }

    protected java.util.Collection createCollection(java.util.Collection)
    {
        org.apache.commons.collections.MultiHashMap r3;
        java.util.Collection r0;
        java.util.ArrayList $r1, $r2;

        r3 := @this: org.apache.commons.collections.MultiHashMap;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.MultiHashMap: long serialVersionUID> = 1943563828307035349L;

        return;
    }
}
