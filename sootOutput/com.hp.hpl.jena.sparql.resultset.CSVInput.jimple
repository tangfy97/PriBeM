public class com.hp.hpl.jena.sparql.resultset.CSVInput extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.CSVInput r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.query.ResultSet fromCSV(java.io.InputStream)
    {
        java.lang.String[] $r7;
        java.util.ArrayList $r2, $r3;
        int i0, i1;
        java.lang.String $r4, r8, $r10;
        com.hp.hpl.jena.sparql.ARQException $r11, $r13;
        boolean $z0;
        java.io.IOException $r12;
        com.hp.hpl.jena.sparql.core.Var $r9;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r5;
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator $r6;
        java.io.BufferedReader $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $r4 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r4 != null goto label2;

        $r11 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("CSV Results malformed, input is empty (no header row)");

        throw $r11;

     label2:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof $r7;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r8 = $r7[i1];

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r8);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        i1 = i1 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        $r13 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label6:
        $r5 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r6 = new com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: void <init>(java.io.BufferedReader,java.util.List)>($r1, $r2);

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r3, null, $r6);

        return $r5;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public static boolean booleanFromCSV(java.io.InputStream)
    {
        java.lang.String $r2, $r3, $r4, $r5, $r10;
        com.hp.hpl.jena.sparql.ARQException $r6, $r11, $r12, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r14;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.io.BufferedReader $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

     label1:
        $r2 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 != null goto label2;

        $r13 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("CSV Boolean Results malformed, input is empty");

        throw $r13;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("_askResult");

        if $z0 != 0 goto label3;

        $r12 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("CSV Boolean Results malformed, did not get expected ?_askResult header row");

        throw $r12;

     label3:
        $r4 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r4 != null goto label4;

        $r11 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("CSV Boolean Results malformed, unexpected end of input after header row");

        throw $r11;

     label4:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z2 == 0 goto label6;

     label5:
        return 1;

     label6:
        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z3 != 0 goto label7;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z4 == 0 goto label8;

     label7:
        return 0;

     label8:
        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CSV Boolean Results malformed, expected one of - true yes false no - but got ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label9:
        $r14 := @caughtexception;

        $r15 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.io.IOException from label1 to label5 with label9;
        catch java.io.IOException from label6 to label7 with label9;
        catch java.io.IOException from label8 to label9 with label9;
    }
}
