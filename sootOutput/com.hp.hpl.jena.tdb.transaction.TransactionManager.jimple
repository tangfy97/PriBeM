public class com.hp.hpl.jena.tdb.transaction.TransactionManager extends java.lang.Object
{
    private static boolean checking;
    private static org.slf4j.Logger log;
    private java.util.Set activeTransactions;
    private boolean recordHistory;
    public static int QueueBatchSize;
    private java.util.List transactionStateTransition;
    int maxQueue;
    java.util.List commitedAwaitingFlush;
    static java.util.concurrent.atomic.AtomicLong transactionId;
    java.util.concurrent.atomic.AtomicLong activeReaders;
    java.util.concurrent.atomic.AtomicLong activeWriters;
    java.util.concurrent.atomic.AtomicLong finishedReaders;
    java.util.concurrent.atomic.AtomicLong committedWriters;
    java.util.concurrent.atomic.AtomicLong abortedWriters;
    private java.util.concurrent.atomic.AtomicReference currentReaderView;
    private java.util.concurrent.Semaphore writersWaiting;
    private java.util.concurrent.BlockingQueue queue;
    private java.lang.Thread committerThread;
    private com.hp.hpl.jena.tdb.store.DatasetGraphTDB baseDataset;
    private com.hp.hpl.jena.tdb.transaction.Journal journal;
    private com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions;
    public static final boolean DEBUG;
    private final boolean logstate;

    public synchronized boolean activeTransactions()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.Set $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.Set activeTransactions>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static int setQueueBatchSize()
    {
        boolean $z0;

        $z0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean is64bitSystem>;

        if $z0 == 0 goto label1;

        return 10;

     label1:
        return 0;
    }

    private void record(com.hp.hpl.jena.tdb.transaction.Transaction, com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint)
    {
        java.util.List $r4;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        org.apache.jena.atlas.lib.Pair $r1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint r3;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r2 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r3 := @parameter1: com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void initRecordingState()>();

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List transactionStateTransition>;

        $r1 = new org.apache.jena.atlas.lib.Pair;

        specialinvoke $r1.<org.apache.jena.atlas.lib.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public long getCountActiveReaders()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getCountActiveWriters()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    static long inc(java.util.concurrent.atomic.AtomicLong)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        return $l0;
    }

    static long dec(java.util.concurrent.atomic.AtomicLong)
    {
        java.util.concurrent.atomic.AtomicLong r0;
        long $l0;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicLong;

        $l0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return $l0;
    }

    public void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Counters $r12;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Logger $r13;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r16;
        com.hp.hpl.jena.tdb.base.file.Location $r17;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.util.ArrayList $r2;
        java.util.HashSet $r1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_WriteBackEndTxn $r14;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] $r11;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.tdb.transaction.Journal $r18;
        org.slf4j.Logger $r15, $r19;
        java.util.concurrent.Semaphore $r9;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.atomic.AtomicLong $r3, $r4, $r5, $r6, $r7;
        java.util.concurrent.LinkedBlockingDeque $r10;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Record $r20;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r16 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.Set activeTransactions> = $r1;

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory> = 0;

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: int maxQueue> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong finishedReaders> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong committedWriters> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong abortedWriters> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicReference currentReaderView> = $r8;

        $r9 = new java.util.concurrent.Semaphore;

        specialinvoke $r9.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(1, 1);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.Semaphore writersWaiting> = $r9;

        $r10 = new java.util.concurrent.LinkedBlockingDeque;

        specialinvoke $r10.<java.util.concurrent.LinkedBlockingDeque: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue> = $r10;

        $r11 = newarray (com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM)[4];

        $r12 = new com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Counters;

        specialinvoke $r12.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Counters: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r0);

        $r11[0] = $r12;

        $r13 = new com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Logger;

        specialinvoke $r13.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Logger: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r0);

        $r11[1] = $r13;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory>;

        if $z0 == 0 goto label1;

        $r20 = new com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Record;

        specialinvoke $r20.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_Record: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r0);

        goto label2;

     label1:
        $r20 = null;

     label2:
        $r11[2] = $r20;

        $r14 = new com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_WriteBackEndTxn;

        specialinvoke $r14.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM_WriteBackEndTxn: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r0);

        $r11[3] = $r14;

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions> = $r11;

        $r15 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger syslog>;

        $z1 = interfaceinvoke $r15.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 != 0 goto label3;

        $r19 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r19.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean logstate> = $z3;

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.store.DatasetGraphTDB baseDataset> = r16;

        $r17 = virtualinvoke r16.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        $r18 = staticinvoke <com.hp.hpl.jena.tdb.transaction.Journal: com.hp.hpl.jena.tdb.transaction.Journal create(com.hp.hpl.jena.tdb.base.file.Location)>($r17);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Journal journal> = $r18;

        return;
    }

    public void closedown()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Journal $r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)>(null);

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.transaction.Journal: void close()>();

        return;
    }

    public com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin(com.hp.hpl.jena.query.ReadWrite)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.query.ReadWrite r1;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter0: com.hp.hpl.jena.query.ReadWrite;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin(com.hp.hpl.jena.query.ReadWrite,java.lang.String)>(r1, null);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin(com.hp.hpl.jena.query.ReadWrite, java.lang.String)
    {
        org.slf4j.Logger $r7;
        java.util.concurrent.Semaphore $r5;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r2;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r4;
        com.hp.hpl.jena.query.ReadWrite r0, $r1;
        java.lang.InterruptedException $r6;
        com.hp.hpl.jena.tdb.transaction.TDBTransactionException $r8;
        java.lang.String r3;

        r2 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.query.ReadWrite;

        r3 := @parameter1: java.lang.String;

        $r1 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        if r0 != $r1 goto label4;

     label1:
        $r5 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.Semaphore writersWaiting>;

        virtualinvoke $r5.<java.util.concurrent.Semaphore: void acquire()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log>;

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(r3, $r6);

        $r8 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r8.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.Throwable)>($r6);

        throw $r8;

     label4:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin$(com.hp.hpl.jena.query.ReadWrite,java.lang.String)>(r0, r3);

        return $r4;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private synchronized com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin$(com.hp.hpl.jena.query.ReadWrite, java.lang.String)
    {
        long $l3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r21;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r6, $r18;
        byte $b4;
        int $i0, $i1, $i2, $i5;
        com.hp.hpl.jena.tdb.transaction.TDBTransactionException $r23;
        java.lang.String r4;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.transaction.Transaction $r5, $r7, $r12, $r17;
        org.slf4j.Logger $r13;
        java.util.Iterator $r22;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r2;
        java.util.concurrent.atomic.AtomicLong $r19;
        java.util.List $r3, $r8, $r14, $r15;
        com.hp.hpl.jena.tdb.transaction.TransactionLifecycle r11;
        com.hp.hpl.jena.query.ReadWrite r0, $r1, $r9;
        java.lang.Object $r10, $r16;

        r2 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.query.ReadWrite;

        r4 := @parameter1: java.lang.String;

        $r1 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        if r0 != $r1 goto label1;

        $r19 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters>;

        $l3 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b4 = $l3 cmp 0L;

        $i5 = (int) $b4;

        if $i5 <= 0 goto label1;

        $r23 = new com.hp.hpl.jena.tdb.transaction.TDBTransactionException;

        specialinvoke $r23.<com.hp.hpl.jena.tdb.transaction.TDBTransactionException: void <init>(java.lang.String)>("Existing active write transaction");

        throw $r23;

     label1:
        r21 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.store.DatasetGraphTDB baseDataset>;

        $r3 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r15 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        $r14 = r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i2);

        $r17 = (com.hp.hpl.jena.tdb.transaction.Transaction) $r16;

        $r18 = virtualinvoke $r17.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn getActiveDataset()>();

        r21 = virtualinvoke $r18.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getView()>();

     label2:
        $r5 = specialinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Transaction createTransaction(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.query.ReadWrite,java.lang.String)>(r21, r0, r4);

        specialinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("begin$", $r5);

        $r6 = specialinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn createDSGTxn(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.tdb.transaction.Transaction,com.hp.hpl.jena.query.ReadWrite)>(r21, $r5, r0);

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.transaction.Transaction: void setActiveDataset(com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn)>($r6);

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: com.hp.hpl.jena.tdb.transaction.Transaction getTransaction()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List lifecycleComponents()>();

        $r9 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if r0 != $r9 goto label3;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 == 0 goto label3;

        $r13 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log>;

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>("read transaction, non-empty lifecycleComponents list");

     label3:
        $r22 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.hp.hpl.jena.tdb.transaction.TransactionLifecycle) $r10;

        $r12 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: com.hp.hpl.jena.tdb.transaction.Transaction getTransaction()>();

        interfaceinvoke r11.<com.hp.hpl.jena.tdb.transaction.TransactionLifecycle: void begin(com.hp.hpl.jena.tdb.transaction.Transaction)>($r12);

        goto label4;

     label5:
        specialinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void noteStartTxn(com.hp.hpl.jena.tdb.transaction.Transaction)>($r5);

        return $r6;
    }

    private com.hp.hpl.jena.tdb.transaction.Transaction createTransaction(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.query.ReadWrite, java.lang.String)
    {
        java.util.concurrent.atomic.AtomicLong $r3;
        com.hp.hpl.jena.query.ReadWrite r2;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        long $l0;
        java.lang.String r4;
        com.hp.hpl.jena.tdb.transaction.Transaction $r0;

        r5 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter1: com.hp.hpl.jena.query.ReadWrite;

        r4 := @parameter2: java.lang.String;

        $r0 = new com.hp.hpl.jena.tdb.transaction.Transaction;

        $r3 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong transactionId>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke $r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.query.ReadWrite,long,java.lang.String,com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r1, r2, $l0, r4, r5);

        return $r0;
    }

    private com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn createDSGTxn(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.tdb.transaction.Transaction, com.hp.hpl.jena.query.ReadWrite)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r5, $r9, r13;
        java.util.concurrent.atomic.AtomicReference $r8, $r10;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r6, $r12;
        com.hp.hpl.jena.query.ReadWrite r0, $r1, $r7;
        com.hp.hpl.jena.tdb.transaction.DatasetBuilderTxn $r2;
        java.lang.Object $r11;
        com.hp.hpl.jena.tdb.transaction.Transaction r4;

        r3 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r5 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r4 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        r0 := @parameter2: com.hp.hpl.jena.query.ReadWrite;

        $r1 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if r0 != $r1 goto label1;

        $r10 = r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicReference currentReaderView>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r13 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r11;

        if r13 == null goto label1;

        $r12 = new com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn;

        specialinvoke $r12.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.tdb.transaction.Transaction)>(r13, r4);

        return $r12;

     label1:
        $r2 = new com.hp.hpl.jena.tdb.transaction.DatasetBuilderTxn;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.transaction.DatasetBuilderTxn: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r3);

        $r6 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.transaction.DatasetBuilderTxn: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn build(com.hp.hpl.jena.tdb.transaction.Transaction,com.hp.hpl.jena.query.ReadWrite,com.hp.hpl.jena.tdb.store.DatasetGraphTDB)>(r4, r0, r5);

        $r7 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if r0 != $r7 goto label2;

        $r8 = r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicReference currentReaderView>;

        $r9 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getView()>();

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r9);

     label2:
        return $r6;
    }

    public synchronized void notifyCommit(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        long $l2;
        java.util.concurrent.atomic.AtomicReference $r5;
        int[] $r3;
        int $i0, $i1;
        java.lang.String $r11;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;
        boolean $z0;
        org.slf4j.Logger $r8;
        java.util.concurrent.Semaphore $r6;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.Set $r2;
        com.hp.hpl.jena.query.ReadWrite $r4;
        java.lang.StringBuilder $r7, $r9, $r10;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.Set activeTransactions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction not active: ");

        $l2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void noteTxnCommit(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        $r3 = <com.hp.hpl.jena.tdb.transaction.TransactionManager$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $i0 = virtualinvoke $r4.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        goto label4;

     label3:
        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicReference currentReaderView>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        $r6 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.Semaphore writersWaiting>;

        virtualinvoke $r6.<java.util.concurrent.Semaphore: void release()>();

     label4:
        return;
    }

    public synchronized void notifyAbort(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        org.slf4j.Logger $r7;
        java.util.concurrent.Semaphore $r5;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.Set $r2;
        long $l2;
        int[] $r3;
        com.hp.hpl.jena.query.ReadWrite $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.Set activeTransactions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r7 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction not active: ");

        $l2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>($r10);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void noteTxnAbort(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        $r3 = <com.hp.hpl.jena.tdb.transaction.TransactionManager$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $i0 = virtualinvoke $r4.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        goto label4;

     label3:
        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.Semaphore writersWaiting>;

        virtualinvoke $r5.<java.util.concurrent.Semaphore: void release()>();

     label4:
        return;
    }

    private void enactTransaction(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        java.util.List $r1;
        com.hp.hpl.jena.tdb.transaction.TransactionLifecycle r4;
        java.util.Iterator $r2;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r5;
        java.lang.Object $r3;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: java.util.List lifecycleComponents()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.tdb.transaction.TransactionLifecycle) $r3;

        interfaceinvoke r4.<com.hp.hpl.jena.tdb.transaction.TransactionLifecycle: void commitEnact(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        interfaceinvoke r4.<com.hp.hpl.jena.tdb.transaction.TransactionLifecycle: void commitClearup(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label1;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void signalEnacted()>();

        return;
    }

    public synchronized void flush()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)>(null);

        return;
    }

    private void readerFinishesWorker(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.BlockingQueue $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r2 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>();

        $i1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: int QueueBatchSize>;

        if $i0 < $i1 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)>(r2);

     label1:
        return;
    }

    private void writerAbortsWorker(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        int $i0, $i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.BlockingQueue $r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r2 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: int size()>();

        $i1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: int QueueBatchSize>;

        if $i0 < $i1 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)>(r2);

     label1:
        return;
    }

    private void writerCommitsWorker(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        long $l0;
        byte $b1;
        int $i2, $i3, $i4, $i5, $i6;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.BlockingQueue $r5, $r6;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.util.List $r3, $r4;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r2 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r6 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i5 = interfaceinvoke $r6.<java.util.concurrent.BlockingQueue: int size()>();

        $i6 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: int QueueBatchSize>;

        if $i5 < $i6 goto label2;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("Commit immediately", r2);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void enactTransaction(com.hp.hpl.jena.tdb.transaction.Transaction)>(r2);

        staticinvoke <com.hp.hpl.jena.tdb.transaction.JournalControl: void replay(com.hp.hpl.jena.tdb.transaction.Transaction)>(r2);

        goto label4;

     label2:
        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: int maxQueue>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: int maxQueue> = $i4;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("Add to pending queue", r2);

     label3:
        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(r2);

     label4:
        return;
    }

    private void processDelayedReplayQueue(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r11;
        byte $b1, $b4;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.tdb.transaction.Transaction r7, r25;
        com.hp.hpl.jena.tdb.transaction.Journal $r12;
        java.util.concurrent.BlockingQueue $r2, $r9, $r13, $r24;
        java.util.List $r17;
        com.hp.hpl.jena.query.ReadWrite $r15, $r16;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.lang.Object[] $r3;
        long $l0, $l3;
        java.util.concurrent.atomic.AtomicReference $r10;
        int $i2, $i5, $i6;
        java.lang.String $r6, $r20, $r22;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r4, $r5, $r8;
        java.lang.InterruptedException $r23;
        java.lang.Object $r14;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r7 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label01;

        $r8 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters>;

        $l3 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label03;

     label01:
        $r2 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i2 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: int size()>();

        if $i2 <= 0 goto label02;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z0 == 0 goto label02;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders>;

        $r3[0] = $r4;

        $r5 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters>;

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Pending transactions: R=%s / W=%s", $r3);

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>($r6, r7);

     label02:
        return;

     label03:
        $r9 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i5 = interfaceinvoke $r9.<java.util.concurrent.BlockingQueue: int size()>();

        if $i5 != 0 goto label04;

        if r7 == null goto label04;

        return;

     label04:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z1 == 0 goto label05;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("Start flush delayed commits", r7);

     label05:
        $r10 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicReference currentReaderView>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label06:
        $r24 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $i6 = interfaceinvoke $r24.<java.util.concurrent.BlockingQueue: int size()>();

        if $i6 <= 0 goto label13;

     label07:
        $r13 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        $r14 = interfaceinvoke $r13.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        r25 = (com.hp.hpl.jena.tdb.transaction.Transaction) $r14;

        $r15 = virtualinvoke r25.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $r16 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        if $r15 != $r16 goto label09;

     label08:
        goto label06;

     label09:
        $z3 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z3 == 0 goto label10;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Flush delayed commit of ");

        $r20 = virtualinvoke r25.<com.hp.hpl.jena.tdb.transaction.Transaction: java.lang.String getLabel()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>($r22, r7);

     label10:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void checkReplaySafe()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void enactTransaction(com.hp.hpl.jena.tdb.transaction.Transaction)>(r25);

        $r17 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List commitedAwaitingFlush>;

        interfaceinvoke $r17.<java.util.List: boolean remove(java.lang.Object)>(r25);

     label11:
        goto label06;

     label12:
        $r23 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Object,java.lang.String,java.lang.Throwable)>(r0, "Interruped!", $r23);

        goto label06;

     label13:
        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void checkReplaySafe()>();

        $r12 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        $r11 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.store.DatasetGraphTDB baseDataset>;

        staticinvoke <com.hp.hpl.jena.tdb.transaction.JournalControl: void replay(com.hp.hpl.jena.tdb.transaction.Journal,com.hp.hpl.jena.tdb.store.DatasetGraphTDB)>($r12, $r11);

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void checkReplaySafe()>();

        $z2 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z2 == 0 goto label14;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("End flush delayed commits", r7);

     label14:
        return;

        catch java.lang.InterruptedException from label07 to label08 with label12;
        catch java.lang.InterruptedException from label09 to label11 with label12;
    }

    private void checkNodesDatJrnl(java.lang.String, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r10;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        long $l0;
        com.hp.hpl.jena.tdb.base.file.Location $r2;
        java.io.File $r9;
        byte $b1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r4, $r7, $r8;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r10 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getBaseDataset()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": nodes.dat-jrnl");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.file.Location: java.lang.String getPath(java.lang.String)>($r7);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r8);

        $l0 = virtualinvoke $r9.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        specialinvoke r10.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>("nodes.dat-jrnl: not empty", r0);

     label1:
        return;
    }

    private void checkReplaySafe()
    {
        org.slf4j.Logger $r2;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        long $l0, $l2;
        java.util.concurrent.atomic.AtomicLong $r1, $r3;
        byte $b1, $b3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $z0 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean checking>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeReaders>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r3 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong activeWriters>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

     label2:
        $r2 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log>;

        interfaceinvoke $r2.<org.slf4j.Logger: void error(java.lang.String)>("There are now active transactions");

     label3:
        return;
    }

    public synchronized void notifyClose(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        org.slf4j.Logger $r8;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r4;
        long $l0;
        com.hp.hpl.jena.tdb.base.file.Location $r5;
        com.hp.hpl.jena.tdb.transaction.TxnState $r1, $r2;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        java.lang.String $r6, $r13;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r3 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.transaction.TxnState getState()>();

        $r2 = <com.hp.hpl.jena.tdb.transaction.TxnState: com.hp.hpl.jena.tdb.transaction.TxnState ACTIVE>;

        if $r1 != $r2 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getBaseDataset()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.base.file.Location getLocation()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.file.Location: java.lang.String getDirectoryPath()>();

        $r8 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger syslog>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close: Transaction not commited or aborted: Transaction: ");

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: long getTxnId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r13);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void abort()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: void close()>();

        return;

     label1:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void noteTxnClose(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        return;
    }

    private void noteStartTxn(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        int[] $r1;
        com.hp.hpl.jena.query.ReadWrite $r2;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r3;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r3 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void readerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label3;

     label2:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void writerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

     label3:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void transactionStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        return;
    }

    private void noteTxnCommit(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        int[] $r1;
        com.hp.hpl.jena.query.ReadWrite $r2;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r3;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r3 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void readerFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label3;

     label2:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void writerCommits(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

     label3:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void transactionFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        return;
    }

    private void noteTxnAbort(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        int[] $r1;
        com.hp.hpl.jena.query.ReadWrite $r2;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r3;
        com.hp.hpl.jena.tdb.transaction.Transaction r0;

        r3 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        $r1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager$1: int[] $SwitchMap$com$hp$hpl$jena$query$ReadWrite>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.Transaction: com.hp.hpl.jena.query.ReadWrite getMode()>();

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.query.ReadWrite: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void readerFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        goto label3;

     label2:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void writerAborts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

     label3:
        specialinvoke r3.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void transactionFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r0);

        return;
    }

    private void noteTxnClose(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void transactionCloses(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        return;
    }

    public boolean recording()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory>;

        return $z0;
    }

    public void recording(boolean)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory> = z0;

        $z1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean recordHistory>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void initRecordingState()>();

     label1:
        return;
    }

    public void clearRecordingState()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void initRecordingState()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List transactionStateTransition>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    private void initRecordingState()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.List $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List transactionStateTransition>;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.List transactionStateTransition> = $r2;

     label1:
        return;
    }

    public com.hp.hpl.jena.tdb.transaction.Journal getJournal()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Journal $r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.Journal journal>;

        return $r1;
    }

    private boolean log()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $z0 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean logstate>;

        return $z0;
    }

    private void log(java.lang.String, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        java.lang.String $r4, r7, $r9, $r14;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;
        org.slf4j.Logger $r2, $r10;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r11, $r12, $r13;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r10 = staticinvoke <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger logger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<No txn>: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

        goto label3;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger logger()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label3:
        return;
    }

    private void logInternal(java.lang.String, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        org.slf4j.Logger $r2;
        java.lang.Object[] $r3;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.SysTxnState $r5;
        java.lang.String r4, $r6, $r7;
        boolean $z0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean log()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r7 = "<null>";

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<com.hp.hpl.jena.tdb.transaction.Transaction: java.lang.String getLabel()>();

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger logger()>();

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r4;

        $r3[1] = $r7;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.SysTxnState state()>();

        $r3[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%6s %s -- %s", $r3);

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

        return;
    }

    private static org.slf4j.Logger logger()
    {
        org.slf4j.Logger $r0, $r1, $r2;
        boolean $z0;

        $r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger syslog>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger syslog>;

        return $r2;

     label1:
        $r1 = <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log>;

        return $r1;
    }

    public synchronized com.hp.hpl.jena.tdb.transaction.SysTxnState state()
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r1;
        com.hp.hpl.jena.tdb.transaction.SysTxnState $r0;

        r1 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r0 = new com.hp.hpl.jena.tdb.transaction.SysTxnState;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.transaction.SysTxnState: void <init>(com.hp.hpl.jena.tdb.transaction.TransactionManager)>(r1);

        return $r0;
    }

    private void transactionStarts(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void transactionStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void transactionFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void transactionFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void transactionCloses(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void transactionCloses(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void readerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void readerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void readerFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void readerFinishes(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void writerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void writerStarts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void writerCommits(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void writerCommits(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void writerAborts(com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM r2;
        int i0, i1;
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r3;

        r0 := @this: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r3 := @parameter0: com.hp.hpl.jena.tdb.transaction.Transaction;

        r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM[] actions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.transaction.TransactionManager$TSM: void writerAborts(com.hp.hpl.jena.tdb.transaction.Transaction)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    static void access$000(com.hp.hpl.jena.tdb.transaction.TransactionManager, java.lang.String, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.lang.String r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void log(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>(r1, r2);

        return;
    }

    static void access$100(com.hp.hpl.jena.tdb.transaction.TransactionManager, java.lang.String, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.lang.String r1;
        com.hp.hpl.jena.tdb.transaction.Transaction r2;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void logInternal(java.lang.String,com.hp.hpl.jena.tdb.transaction.Transaction)>(r1, r2);

        return;
    }

    static java.util.Set access$200(com.hp.hpl.jena.tdb.transaction.TransactionManager)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.Set $r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.Set activeTransactions>;

        return $r1;
    }

    static void access$300(com.hp.hpl.jena.tdb.transaction.TransactionManager, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void readerFinishesWorker(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        return;
    }

    static void access$400(com.hp.hpl.jena.tdb.transaction.TransactionManager, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void writerCommitsWorker(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        return;
    }

    static void access$500(com.hp.hpl.jena.tdb.transaction.TransactionManager, com.hp.hpl.jena.tdb.transaction.Transaction)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void writerAbortsWorker(com.hp.hpl.jena.tdb.transaction.Transaction)>(r1);

        return;
    }

    static void access$600(com.hp.hpl.jena.tdb.transaction.TransactionManager, com.hp.hpl.jena.tdb.transaction.Transaction, com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint r2;
        com.hp.hpl.jena.tdb.transaction.Transaction r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        r1 := @parameter1: com.hp.hpl.jena.tdb.transaction.Transaction;

        r2 := @parameter2: com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint;

        specialinvoke r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: void record(com.hp.hpl.jena.tdb.transaction.Transaction,com.hp.hpl.jena.tdb.transaction.TransactionManager$TxnPoint)>(r1, r2);

        return;
    }

    static java.util.concurrent.BlockingQueue access$700(com.hp.hpl.jena.tdb.transaction.TransactionManager)
    {
        com.hp.hpl.jena.tdb.transaction.TransactionManager r0;
        java.util.concurrent.BlockingQueue $r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.transaction.TransactionManager;

        $r1 = r0.<com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.BlockingQueue queue>;

        return $r1;
    }

    static void <clinit>()
    {
        int $i0;
        java.util.concurrent.atomic.AtomicLong $r1;
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean DEBUG> = 0;

        <com.hp.hpl.jena.tdb.transaction.TransactionManager: boolean checking> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/transaction/TransactionManager;");

        <com.hp.hpl.jena.tdb.transaction.TransactionManager: org.slf4j.Logger log> = $r0;

        $i0 = staticinvoke <com.hp.hpl.jena.tdb.transaction.TransactionManager: int setQueueBatchSize()>();

        <com.hp.hpl.jena.tdb.transaction.TransactionManager: int QueueBatchSize> = $i0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1L);

        <com.hp.hpl.jena.tdb.transaction.TransactionManager: java.util.concurrent.atomic.AtomicLong transactionId> = $r1;

        return;
    }
}
