public final class org.codehaus.jackson.node.TextNode extends org.codehaus.jackson.node.ValueNode
{
    static final int INT_SPACE;
    static final org.codehaus.jackson.node.TextNode EMPTY_STRING_NODE;
    final java.lang.String _value;

    public void <init>(java.lang.String)
    {
        org.codehaus.jackson.node.TextNode r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.codehaus.jackson.node.ValueNode: void <init>()>();

        r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value> = r1;

        return;
    }

    public static org.codehaus.jackson.node.TextNode valueOf(java.lang.String)
    {
        int $i0;
        org.codehaus.jackson.node.TextNode $r1, $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r2 = <org.codehaus.jackson.node.TextNode: org.codehaus.jackson.node.TextNode EMPTY_STRING_NODE>;

        return $r2;

     label2:
        $r1 = new org.codehaus.jackson.node.TextNode;

        specialinvoke $r1.<org.codehaus.jackson.node.TextNode: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.node.TextNode r1;
        org.codehaus.jackson.JsonToken $r0;

        r1 := @this: org.codehaus.jackson.node.TextNode;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        return $r0;
    }

    public boolean isTextual()
    {
        org.codehaus.jackson.node.TextNode r0;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        return 1;
    }

    public java.lang.String getTextValue()
    {
        org.codehaus.jackson.node.TextNode r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        return $r1;
    }

    public byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException
    {
        byte[] $r9;
        org.codehaus.jackson.Base64Variant r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r7, $r11;
        org.codehaus.jackson.node.TextNode r1;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, $i25, $i27, $i29;
        java.lang.String r2, $r8;
        char $c2, $c4, $c7, $c10, $c14, $c15;
        org.codehaus.jackson.util.ByteArrayBuilder $r10;

        r1 := @this: org.codehaus.jackson.node.TextNode;

        r3 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r10 = new org.codehaus.jackson.util.ByteArrayBuilder;

        specialinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(int)>(100);

        r2 = r1.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        i18 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i18 >= $i0 goto label18;

     label02:
        $i1 = i18;

        i18 = i18 + 1;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i1);

        if i18 < $i0 goto label03;

        goto label18;

     label03:
        $i25 = (int) $c2;

        if $i25 <= 32 goto label02;

        $i3 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c2);

        if $i3 >= 0 goto label04;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c2, 0);

     label04:
        if i18 < $i0 goto label05;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportBase64EOF()>();

     label05:
        i19 = i18 + 1;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i18);

        $i5 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c4);

        if $i5 >= 0 goto label06;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c4, 1);

     label06:
        $i6 = $i3 << 6;

        $i17 = $i6 | $i5;

        if i19 < $i0 goto label08;

        $z2 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: boolean usesPadding()>();

        if $z2 != 0 goto label07;

        i20 = $i17 >> 4;

        virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i20);

        goto label18;

     label07:
        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportBase64EOF()>();

     label08:
        i21 = i19 + 1;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i19);

        $i8 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c7);

        if $i8 >= 0 goto label12;

        $i27 = (int) -2;

        if $i8 == $i27 goto label09;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c7, 2);

     label09:
        if i21 < $i0 goto label10;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportBase64EOF()>();

     label10:
        i18 = i21 + 1;

        $c14 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i21);

        $z1 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c14);

        if $z1 != 0 goto label11;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c15 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r3, $c14, 3, $r8);

     label11:
        $i16 = $i17 >> 4;

        virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i16);

        goto label01;

     label12:
        $i9 = $i17 << 6;

        i22 = $i9 | $i8;

        if i21 < $i0 goto label14;

        $z0 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: boolean usesPadding()>();

        if $z0 != 0 goto label13;

        i23 = i22 >> 2;

        virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>(i23);

        goto label18;

     label13:
        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportBase64EOF()>();

     label14:
        i18 = i21 + 1;

        $c10 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i21);

        $i11 = virtualinvoke r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c10);

        if $i11 >= 0 goto label16;

        $i29 = (int) -2;

        if $i11 == $i29 goto label15;

        virtualinvoke r1.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int)>(r3, $c10, 3);

     label15:
        $i13 = i22 >> 2;

        virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>($i13);

        goto label17;

     label16:
        $i12 = i22 << 6;

        i24 = $i12 | $i11;

        virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i24);

     label17:
        goto label01;

     label18:
        $r9 = virtualinvoke $r10.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r9;
    }

    public byte[] getBinaryValue() throws java.io.IOException
    {
        org.codehaus.jackson.node.TextNode r0;
        org.codehaus.jackson.Base64Variant $r1;
        byte[] $r2;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        $r1 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        $r2 = virtualinvoke r0.<org.codehaus.jackson.node.TextNode: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r1);

        return $r2;
    }

    public java.lang.String asText()
    {
        org.codehaus.jackson.node.TextNode r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        return $r1;
    }

    public boolean asBoolean(boolean)
    {
        org.codehaus.jackson.node.TextNode r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean z0, $z1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        if $r1 == null goto label1;

        $r3 = "true";

        $r2 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return z0;
    }

    public int asInt(int)
    {
        org.codehaus.jackson.node.TextNode r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $i1 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseAsInt(java.lang.String,int)>($r1, i0);

        return $i1;
    }

    public long asLong(long)
    {
        org.codehaus.jackson.node.TextNode r0;
        long l0, $l1;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        l0 := @parameter0: long;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $l1 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseAsLong(java.lang.String,long)>($r1, l0);

        return $l1;
    }

    public double asDouble(double)
    {
        org.codehaus.jackson.node.TextNode r0;
        java.lang.String $r1;
        double d0, $d1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        d0 := @parameter0: double;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $d1 = staticinvoke <org.codehaus.jackson.io.NumberInput: double parseAsDouble(java.lang.String,double)>($r1, d0);

        return $d1;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.node.TextNode r0;
        org.codehaus.jackson.map.SerializerProvider r4;
        java.lang.String $r1, $r3;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        r2 := @parameter0: org.codehaus.jackson.JsonGenerator;

        r4 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        if $r1 != null goto label1;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeNull()>();

        goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        virtualinvoke r2.<org.codehaus.jackson.JsonGenerator: void writeString(java.lang.String)>($r3);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.node.TextNode r1, $r4;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.node.TextNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        $r4 = (org.codehaus.jackson.node.TextNode) r0;

        $r6 = $r4.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $r5 = r1.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public int hashCode()
    {
        org.codehaus.jackson.node.TextNode r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.node.TextNode r0;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3, $r4;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        $r1 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i0 + 2;

        $i1 = $i0 >> 4;

        i3 = $i2 + $i1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(i3);

        $r3 = r0.<org.codehaus.jackson.node.TextNode: java.lang.String _value>;

        staticinvoke <org.codehaus.jackson.node.TextNode: void appendQuoted(java.lang.StringBuilder,java.lang.String)>($r2, $r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected static void appendQuoted(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        staticinvoke <org.codehaus.jackson.util.CharTypes: void appendQuoted(java.lang.StringBuilder,java.lang.String)>(r0, r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return;
    }

    protected void _reportInvalidBase64(org.codehaus.jackson.Base64Variant, char, int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TextNode r0;
        org.codehaus.jackson.Base64Variant r1;
        int i1;
        char c0;

        r0 := @this: org.codehaus.jackson.node.TextNode;

        r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.node.TextNode: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, c0, i1, null);

        return;
    }

    protected void _reportInvalidBase64(org.codehaus.jackson.Base64Variant, char, int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r4, $r5, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r38, $r39;
        org.codehaus.jackson.node.TextNode r33;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, r6, $r17, $r28, r34;
        char c0, $c1;
        org.codehaus.jackson.JsonLocation $r8;
        org.codehaus.jackson.JsonParseException $r40;

        r33 := @this: org.codehaus.jackson.node.TextNode;

        r0 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i2 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        $i5 = (int) c0;

        if $i5 > 32 goto label1;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $i6 = (int) c0;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i4 = i2 + 1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c1 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i3 = i2 + 1;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r34 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $i7 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r34 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $i8 = (int) c0;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r34 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r6 == null goto label6;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r34 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r40 = new org.codehaus.jackson.JsonParseException;

        $r8 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        specialinvoke $r40.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>(r34, $r8);

        throw $r40;
    }

    protected void _reportBase64EOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TextNode r2;
        org.codehaus.jackson.JsonParseException $r0;
        org.codehaus.jackson.JsonLocation $r1;

        r2 := @this: org.codehaus.jackson.node.TextNode;

        $r0 = new org.codehaus.jackson.JsonParseException;

        $r1 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        specialinvoke $r0.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>("Unexpected end-of-String when base64 content", $r1);

        throw $r0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.node.TextNode $r0;

        <org.codehaus.jackson.node.TextNode: int INT_SPACE> = 32;

        $r0 = new org.codehaus.jackson.node.TextNode;

        specialinvoke $r0.<org.codehaus.jackson.node.TextNode: void <init>(java.lang.String)>("");

        <org.codehaus.jackson.node.TextNode: org.codehaus.jackson.node.TextNode EMPTY_STRING_NODE> = $r0;

        return;
    }
}
