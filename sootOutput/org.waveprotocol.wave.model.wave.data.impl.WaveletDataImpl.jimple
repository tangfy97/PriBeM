public final class org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl extends org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData
{
    private final java.util.LinkedHashSet participants;
    private final java.util.Map documents;

    public void <init>(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId, long, long, org.waveprotocol.wave.model.version.HashedVersion, long, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        long l0, l1, l2;
        java.util.HashMap $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r5;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        java.util.LinkedHashSet $r6;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r3 := @parameter4: org.waveprotocol.wave.model.version.HashedVersion;

        l2 := @parameter5: long;

        r4 := @parameter6: org.waveprotocol.wave.model.id.WaveId;

        r5 := @parameter7: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void <init>(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion,long,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.DocumentFactory)>(r1, r2, l0, l1, r3, l2, r4, r5);

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.LinkedHashSet participants> = $r6;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents> = $r7;

        return;
    }

    private void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        java.util.HashMap $r4;
        java.util.LinkedHashSet $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.data.DocumentFactory)>(r1, r2);

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.LinkedHashSet participants> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents> = $r4;

        return;
    }

    protected java.util.Set getMutableParticipants()
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.LinkedHashSet participants>;

        return $r1;
    }

    protected org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl internalCreateDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl $r4;
        java.lang.Object[] $r3;
        java.util.Collection r6;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.ParticipantId r5;
        java.util.Map $r2, $r8;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink r7;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r6 := @parameter2: java.util.Collection;

        r7 := @parameter3: org.waveprotocol.wave.model.wave.data.DocumentOperationSink;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Duplicate doc id: %s", $r3);

        $r4 = new org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl;

        specialinvoke $r4.<org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.wave.data.DocumentOperationSink,long,long)>(r1, r0, r5, r6, r7, l0, l1);

        $r8 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    public org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl $r4;
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl) $r3;

        return $r4;
    }

    public java.util.Set getDocumentIds()
    {
        java.util.Map $r1;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: java.util.Map documents>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl getDocument(java.lang.String)>(r1);

        return $r2;
    }

    protected volatile org.waveprotocol.wave.model.wave.data.BlipData internalCreateDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long)
    {
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl $r5;
        java.util.Collection r3;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        long l0, l1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink r4;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: org.waveprotocol.wave.model.wave.data.DocumentOperationSink;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl internalCreateDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.wave.data.DocumentOperationSink,long,long)>(r1, r2, r3, r4, l0, l1);

        return $r5;
    }

    public volatile org.waveprotocol.wave.model.wave.data.ReadableBlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;
        org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: org.waveprotocol.wave.model.wave.data.impl.BlipDataImpl getDocument(java.lang.String)>(r1);

        return $r2;
    }

    void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.data.DocumentFactory, org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$1)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$1 r3;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl: void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.wave.model.wave.data.DocumentFactory)>(r1, r2);

        return;
    }
}
