public abstract class org.apache.batik.ext.awt.g2d.TransformStackElement extends java.lang.Object implements java.lang.Cloneable
{
    private org.apache.batik.ext.awt.g2d.TransformType type;
    private double[] transformParameters;

    protected void <init>(org.apache.batik.ext.awt.g2d.TransformType, double[])
    {
        double[] r2;
        org.apache.batik.ext.awt.g2d.TransformStackElement r0;
        org.apache.batik.ext.awt.g2d.TransformType r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        r1 := @parameter0: org.apache.batik.ext.awt.g2d.TransformType;

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformType type> = r1;

        r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters> = r2;

        return;
    }

    public java.lang.Object clone()
    {
        double[] $r2, $r3, $r5;
        org.apache.batik.ext.awt.g2d.TransformStackElement r0, r6;
        java.lang.CloneNotSupportedException $r4;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        r6 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r6 = (org.apache.batik.ext.awt.g2d.TransformStackElement) $r1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r2 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $i0 = lengthof $r2;

        $r5 = newarray (double)[$i0];

        $r3 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, 0, $i1);

        r6.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters> = $r5;

        return r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static org.apache.batik.ext.awt.g2d.TransformStackElement createTranslateElement(double, double)
    {
        org.apache.batik.ext.awt.g2d.TransformStackElement$1 $r0;
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformType $r2;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new org.apache.batik.ext.awt.g2d.TransformStackElement$1;

        $r2 = <org.apache.batik.ext.awt.g2d.TransformType: org.apache.batik.ext.awt.g2d.TransformType TRANSLATE>;

        $r1 = newarray (double)[2];

        $r1[0] = d0;

        $r1[1] = d1;

        specialinvoke $r0.<org.apache.batik.ext.awt.g2d.TransformStackElement$1: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>($r2, $r1);

        return $r0;
    }

    public static org.apache.batik.ext.awt.g2d.TransformStackElement createRotateElement(double)
    {
        org.apache.batik.ext.awt.g2d.TransformStackElement$2 $r0;
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformType $r2;
        double d0;

        d0 := @parameter0: double;

        $r0 = new org.apache.batik.ext.awt.g2d.TransformStackElement$2;

        $r2 = <org.apache.batik.ext.awt.g2d.TransformType: org.apache.batik.ext.awt.g2d.TransformType ROTATE>;

        $r1 = newarray (double)[1];

        $r1[0] = d0;

        specialinvoke $r0.<org.apache.batik.ext.awt.g2d.TransformStackElement$2: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>($r2, $r1);

        return $r0;
    }

    public static org.apache.batik.ext.awt.g2d.TransformStackElement createScaleElement(double, double)
    {
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformType $r2;
        org.apache.batik.ext.awt.g2d.TransformStackElement$3 $r0;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new org.apache.batik.ext.awt.g2d.TransformStackElement$3;

        $r2 = <org.apache.batik.ext.awt.g2d.TransformType: org.apache.batik.ext.awt.g2d.TransformType SCALE>;

        $r1 = newarray (double)[2];

        $r1[0] = d0;

        $r1[1] = d1;

        specialinvoke $r0.<org.apache.batik.ext.awt.g2d.TransformStackElement$3: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>($r2, $r1);

        return $r0;
    }

    public static org.apache.batik.ext.awt.g2d.TransformStackElement createShearElement(double, double)
    {
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformType $r2;
        org.apache.batik.ext.awt.g2d.TransformStackElement$4 $r0;
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new org.apache.batik.ext.awt.g2d.TransformStackElement$4;

        $r2 = <org.apache.batik.ext.awt.g2d.TransformType: org.apache.batik.ext.awt.g2d.TransformType SHEAR>;

        $r1 = newarray (double)[2];

        $r1[0] = d0;

        $r1[1] = d1;

        specialinvoke $r0.<org.apache.batik.ext.awt.g2d.TransformStackElement$4: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>($r2, $r1);

        return $r0;
    }

    public static org.apache.batik.ext.awt.g2d.TransformStackElement createGeneralTransformElement(java.awt.geom.AffineTransform)
    {
        double[] r0;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.g2d.TransformStackElement$5 $r2;
        org.apache.batik.ext.awt.g2d.TransformType $r3;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        r0 = newarray (double)[6];

        virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r0);

        $r2 = new org.apache.batik.ext.awt.g2d.TransformStackElement$5;

        $r3 = <org.apache.batik.ext.awt.g2d.TransformType: org.apache.batik.ext.awt.g2d.TransformType GENERAL>;

        specialinvoke $r2.<org.apache.batik.ext.awt.g2d.TransformStackElement$5: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>($r3, r0);

        return $r2;
    }

    abstract boolean isIdentity(double[]);

    public boolean isIdentity()
    {
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformStackElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: boolean isIdentity(double[])>($r1);

        return $z0;
    }

    public double[] getTransformParameters()
    {
        double[] $r1;
        org.apache.batik.ext.awt.g2d.TransformStackElement r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        return $r1;
    }

    public org.apache.batik.ext.awt.g2d.TransformType getType()
    {
        org.apache.batik.ext.awt.g2d.TransformStackElement r0;
        org.apache.batik.ext.awt.g2d.TransformType $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformType type>;

        return $r1;
    }

    public boolean concatenate(org.apache.batik.ext.awt.g2d.TransformStackElement)
    {
        org.apache.batik.ext.awt.g2d.TransformType $r1, $r3, $r4;
        boolean z0;
        double[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        org.apache.batik.ext.awt.g2d.TransformStackElement r0, r2;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        r2 := @parameter0: org.apache.batik.ext.awt.g2d.TransformStackElement;

        z0 = 0;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformType type>;

        $i0 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.TransformType: int toInt()>();

        $r3 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformType type>;

        $i1 = virtualinvoke $r3.<org.apache.batik.ext.awt.g2d.TransformType: int toInt()>();

        if $i0 != $i1 goto label6;

        z0 = 1;

        $r4 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: org.apache.batik.ext.awt.g2d.TransformType type>;

        $i2 = virtualinvoke $r4.<org.apache.batik.ext.awt.g2d.TransformType: int toInt()>();

        tableswitch($i2)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r14 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d10 = $r14[0];

        $r15 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d9 = $r15[0];

        $d11 = $d10 + $d9;

        $r14[0] = $d11;

        $r16 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d13 = $r16[1];

        $r17 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d12 = $r17[1];

        $d14 = $d13 + $d12;

        $r16[1] = $d14;

        goto label6;

     label2:
        $r12 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d7 = $r12[0];

        $r13 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d6 = $r13[0];

        $d8 = $d7 + $d6;

        $r12[0] = $d8;

        goto label6;

     label3:
        $r8 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d1 = $r8[0];

        $r9 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d0 = $r9[0];

        $d2 = $d1 * $d0;

        $r8[0] = $d2;

        $r10 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d4 = $r10[1];

        $r11 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $d3 = $r11[1];

        $d5 = $d4 * $d3;

        $r10[1] = $d5;

        goto label6;

     label4:
        $r6 = r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $r5 = r2.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters>;

        $r7 = specialinvoke r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] matrixMultiply(double[],double[])>($r6, $r5);

        r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: double[] transformParameters> = $r7;

        goto label6;

     label5:
        z0 = 0;

     label6:
        return z0;
    }

    private double[] matrixMultiply(double[], double[])
    {
        double[] r0, r2, r4;
        org.apache.batik.ext.awt.g2d.TransformStackElement r5;
        java.awt.geom.AffineTransform $r1, $r3;

        r5 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement;

        r2 := @parameter0: double[];

        r4 := @parameter1: double[];

        r0 = newarray (double)[6];

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(double[])>(r2);

        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(double[])>(r4);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r3);

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r0);

        return r0;
    }
}
