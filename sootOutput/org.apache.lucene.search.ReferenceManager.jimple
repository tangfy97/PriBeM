public abstract class org.apache.lucene.search.ReferenceManager extends java.lang.Object implements java.io.Closeable
{
    private static final java.lang.String REFERENCE_MANAGER_IS_CLOSED_MSG;
    protected volatile java.lang.Object current;
    private final java.util.concurrent.locks.Lock refreshLock;
    private final java.util.List refreshListeners;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.concurrent.locks.ReentrantLock $r1;
        org.apache.lucene.search.ReferenceManager r0;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock> = $r1;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.lucene.search.ReferenceManager: java.util.List refreshListeners> = $r2;

        return;
    }

    private void ensureOpen()
    {
        org.apache.lucene.store.AlreadyClosedException $r2;
        java.lang.Object $r1;
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object current>;

        if $r1 != null goto label1;

        $r2 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r2.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this ReferenceManager is closed");

        throw $r2;

     label1:
        return;
    }

    private synchronized void swapReference(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1, r2;
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void ensureOpen()>();

        r1 = r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object current>;

        r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object current> = r2;

        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void release(java.lang.Object)>(r1);

        return;
    }

    protected abstract void decRef(java.lang.Object) throws java.io.IOException;

    protected abstract java.lang.Object refreshIfNeeded(java.lang.Object) throws java.io.IOException;

    protected abstract boolean tryIncRef(java.lang.Object) throws java.io.IOException;

    public final java.lang.Object acquire() throws java.io.IOException
    {
        org.apache.lucene.store.AlreadyClosedException $r2;
        java.lang.Object $r1;
        org.apache.lucene.search.ReferenceManager r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

     label1:
        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object current>;

        if $r1 != null goto label2;

        $r2 = new org.apache.lucene.store.AlreadyClosedException;

        specialinvoke $r2.<org.apache.lucene.store.AlreadyClosedException: void <init>(java.lang.String)>("this ReferenceManager is closed");

        throw $r2;

     label2:
        $z0 = virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: boolean tryIncRef(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return $r1;
    }

    public final synchronized void close() throws java.io.IOException
    {
        java.lang.Object $r1;
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object current>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void swapReference(java.lang.Object)>(null);

        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void afterClose()>();

     label1:
        return;
    }

    protected void afterClose() throws java.io.IOException
    {
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        return;
    }

    private void doMaybeRefresh() throws java.io.IOException
    {
        java.lang.Throwable $r6, $r8, $r9;
        java.lang.AssertionError $r5;
        org.apache.lucene.search.ReferenceManager r0;
        java.util.concurrent.locks.Lock $r1, $r4, $r7;
        java.lang.Object $r2, $r3;
        boolean $z0, z1, z2, z3;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        z1 = 0;

        z3 = 0;

        z2 = 0;

     label01:
        $r2 = virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object acquire()>();

     label02:
        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void notifyRefreshListenersBefore()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: java.lang.Object refreshIfNeeded(java.lang.Object)>($r2);

        if $r3 == null goto label08;

        $z0 = <org.apache.lucene.search.ReferenceManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        if $r3 != $r2 goto label03;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("refreshIfNeeded should return null if refresh wasn\'t needed");

        throw $r5;

     label03:
        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void swapReference(java.lang.Object)>($r3);

        z1 = 1;

        z3 = 1;

        z2 = 1;

     label04:
        if 1 != 0 goto label08;

        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void release(java.lang.Object)>($r3);

        goto label08;

     label05:
        $r9 := @caughtexception;

     label06:
        if 0 != 0 goto label07;

        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void release(java.lang.Object)>($r3);

     label07:
        throw $r9;

     label08:
        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void release(java.lang.Object)>($r2);

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void notifyRefreshListenersRefreshed(boolean)>(z3);

        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void release(java.lang.Object)>($r2);

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void notifyRefreshListenersRefreshed(boolean)>(z2);

        throw $r8;

     label11:
        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void afterMaybeRefresh()>();

     label12:
        $r4 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label15;

     label13:
        $r6 := @caughtexception;

     label14:
        $r7 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

     label15:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public final boolean maybeRefresh() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        org.apache.lucene.search.ReferenceManager r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.locks.Lock: boolean tryLock()>();

        if $z0 == 0 goto label5;

     label1:
        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void doMaybeRefresh()>();

     label2:
        $r2 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

     label5:
        return $z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void maybeRefreshBlocking() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        specialinvoke r0.<org.apache.lucene.search.ReferenceManager: void doMaybeRefresh()>();

     label2:
        $r2 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.lucene.search.ReferenceManager: java.util.concurrent.locks.Lock refreshLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void afterMaybeRefresh() throws java.io.IOException
    {
        org.apache.lucene.search.ReferenceManager r0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        return;
    }

    public final void release(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        java.lang.AssertionError $r2;
        org.apache.lucene.search.ReferenceManager r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        r1 := @parameter0: java.lang.Object;

        $z0 = <org.apache.lucene.search.ReferenceManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.lucene.search.ReferenceManager: void decRef(java.lang.Object)>(r1);

        return;
    }

    private void notifyRefreshListenersBefore() throws java.io.IOException
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.apache.lucene.search.ReferenceManager$RefreshListener r4;
        java.lang.Object $r3;
        org.apache.lucene.search.ReferenceManager r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.util.List refreshListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.search.ReferenceManager$RefreshListener) $r3;

        interfaceinvoke r4.<org.apache.lucene.search.ReferenceManager$RefreshListener: void beforeRefresh()>();

        goto label1;

     label2:
        return;
    }

    private void notifyRefreshListenersRefreshed(boolean) throws java.io.IOException
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.apache.lucene.search.ReferenceManager$RefreshListener r4;
        java.lang.Object $r3;
        org.apache.lucene.search.ReferenceManager r0;
        boolean $z0, z1;

        r0 := @this: org.apache.lucene.search.ReferenceManager;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.lucene.search.ReferenceManager: java.util.List refreshListeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.search.ReferenceManager$RefreshListener) $r3;

        interfaceinvoke r4.<org.apache.lucene.search.ReferenceManager$RefreshListener: void afterRefresh(boolean)>(z1);

        goto label1;

     label2:
        return;
    }

    public void addListener(org.apache.lucene.search.ReferenceManager$RefreshListener)
    {
        java.util.List $r2;
        org.apache.lucene.search.ReferenceManager$RefreshListener r0;
        org.apache.lucene.search.ReferenceManager r1;
        java.lang.NullPointerException $r3;

        r1 := @this: org.apache.lucene.search.ReferenceManager;

        r0 := @parameter0: org.apache.lucene.search.ReferenceManager$RefreshListener;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Listener cannot be null");

        throw $r3;

     label1:
        $r2 = r1.<org.apache.lucene.search.ReferenceManager: java.util.List refreshListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void removeListener(org.apache.lucene.search.ReferenceManager$RefreshListener)
    {
        java.util.List $r2;
        org.apache.lucene.search.ReferenceManager$RefreshListener r0;
        org.apache.lucene.search.ReferenceManager r1;
        java.lang.NullPointerException $r3;

        r1 := @this: org.apache.lucene.search.ReferenceManager;

        r0 := @parameter0: org.apache.lucene.search.ReferenceManager$RefreshListener;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Listener cannot be null");

        throw $r3;

     label1:
        $r2 = r1.<org.apache.lucene.search.ReferenceManager: java.util.List refreshListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.search.ReferenceManager: java.lang.String REFERENCE_MANAGER_IS_CLOSED_MSG> = "this ReferenceManager is closed";

        $r0 = class "Lorg/apache/lucene/search/ReferenceManager;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.ReferenceManager: boolean $assertionsDisabled> = $z1;

        return;
    }
}
