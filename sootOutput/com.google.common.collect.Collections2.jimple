public final class com.google.common.collect.Collections2 extends java.lang.Object
{
    static final com.google.common.base.Joiner STANDARD_JOINER;

    private void <init>()
    {
        com.google.common.collect.Collections2 r0;

        r0 := @this: com.google.common.collect.Collections2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection filter(java.util.Collection, com.google.common.base.Predicate)
    {
        java.util.Collection r0, $r4;
        com.google.common.collect.Collections2$FilteredCollection $r1, $r7, $r8;
        com.google.common.base.Predicate r3, $r6;
        java.lang.Object $r2, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: com.google.common.base.Predicate;

        $z0 = r0 instanceof com.google.common.collect.Collections2$FilteredCollection;

        if $z0 == 0 goto label1;

        $r7 = (com.google.common.collect.Collections2$FilteredCollection) r0;

        $r8 = virtualinvoke $r7.<com.google.common.collect.Collections2$FilteredCollection: com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate)>(r3);

        return $r8;

     label1:
        $r1 = new com.google.common.collect.Collections2$FilteredCollection;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (java.util.Collection) $r2;

        $r5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r6 = (com.google.common.base.Predicate) $r5;

        specialinvoke $r1.<com.google.common.collect.Collections2$FilteredCollection: void <init>(java.util.Collection,com.google.common.base.Predicate)>($r4, $r6);

        return $r1;
    }

    static boolean safeContains(java.util.Collection, java.lang.Object)
    {
        java.util.Collection r0;
        java.lang.Object r1;
        java.lang.ClassCastException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.util.Collection transform(java.util.Collection, com.google.common.base.Function)
    {
        com.google.common.collect.Collections2$TransformedCollection $r0;
        com.google.common.base.Function r2;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.google.common.base.Function;

        $r0 = new com.google.common.collect.Collections2$TransformedCollection;

        specialinvoke $r0.<com.google.common.collect.Collections2$TransformedCollection: void <init>(java.util.Collection,com.google.common.base.Function)>(r1, r2);

        return $r0;
    }

    static boolean containsAllImpl(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0, r1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    static java.lang.String toStringImpl(java.util.Collection)
    {
        java.util.Collection r0;
        java.lang.Iterable $r5;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r6;
        java.lang.String $r7;
        com.google.common.collect.Collections2$1 $r3;
        com.google.common.base.Joiner $r4;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r4 = <com.google.common.collect.Collections2: com.google.common.base.Joiner STANDARD_JOINER>;

        $r3 = new com.google.common.collect.Collections2$1;

        specialinvoke $r3.<com.google.common.collect.Collections2$1: void <init>(java.util.Collection)>(r0);

        $r5 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>(r0, $r3);

        virtualinvoke $r4.<com.google.common.base.Joiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable)>($r2, $r5);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static java.lang.StringBuilder newStringBuilderForCollection(int)
    {
        int i0, $i4;
        java.lang.StringBuilder $r0;
        long $l1, $l2, $l3;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "size must be non-negative");

        $r0 = new java.lang.StringBuilder;

        $l1 = (long) i0;

        $l2 = $l1 * 8L;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, 1073741824L);

        $i4 = (int) $l3;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i4);

        return $r0;
    }

    static java.util.Collection cast(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Collection $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = (java.util.Collection) r0;

        return $r1;
    }

    static void <clinit>()
    {
        com.google.common.base.Joiner $r0;

        $r0 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(", ");

        <com.google.common.collect.Collections2: com.google.common.base.Joiner STANDARD_JOINER> = $r0;

        return;
    }
}
