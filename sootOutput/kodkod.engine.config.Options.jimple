public final class kodkod.engine.config.Options extends java.lang.Object
{
    private kodkod.engine.config.Reporter reporter;
    private kodkod.engine.satlab.SATFactory solver;
    private int symmetryBreaking;
    private kodkod.engine.config.Options$IntEncoding intEncoding;
    private int bitwidth;
    private int sharing;
    private int skolemDepth;
    private boolean flatten;
    private int logTranslation;
    private int coreGranularity;

    public void <init>()
    {
        kodkod.engine.config.Options r0;
        kodkod.engine.satlab.SATFactory $r2;
        kodkod.engine.config.Options$1 $r1;
        kodkod.engine.config.Options$IntEncoding $r3;

        r0 := @this: kodkod.engine.config.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new kodkod.engine.config.Options$1;

        specialinvoke $r1.<kodkod.engine.config.Options$1: void <init>(kodkod.engine.config.Options)>(r0);

        r0.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter> = $r1;

        $r2 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory DefaultSAT4J>;

        r0.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver> = $r2;

        r0.<kodkod.engine.config.Options: int symmetryBreaking> = 20;

        $r3 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT>;

        r0.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding> = $r3;

        r0.<kodkod.engine.config.Options: int bitwidth> = 4;

        r0.<kodkod.engine.config.Options: int sharing> = 3;

        r0.<kodkod.engine.config.Options: int skolemDepth> = 0;

        r0.<kodkod.engine.config.Options: boolean flatten> = 0;

        r0.<kodkod.engine.config.Options: int logTranslation> = 0;

        r0.<kodkod.engine.config.Options: int coreGranularity> = 0;

        return;
    }

    public kodkod.engine.satlab.SATFactory solver()
    {
        kodkod.engine.config.Options r0;
        kodkod.engine.satlab.SATFactory $r1;

        r0 := @this: kodkod.engine.config.Options;

        $r1 = r0.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver>;

        return $r1;
    }

    public void setSolver(kodkod.engine.satlab.SATFactory)
    {
        kodkod.engine.satlab.SATFactory r0;
        kodkod.engine.config.Options r1;
        java.lang.NullPointerException $r2;

        r1 := @this: kodkod.engine.config.Options;

        r0 := @parameter0: kodkod.engine.satlab.SATFactory;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r1.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver> = r0;

        return;
    }

    public kodkod.engine.config.Reporter reporter()
    {
        kodkod.engine.config.Options r0;
        kodkod.engine.config.Reporter $r1;

        r0 := @this: kodkod.engine.config.Options;

        $r1 = r0.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter>;

        return $r1;
    }

    public void setReporter(kodkod.engine.config.Reporter)
    {
        kodkod.engine.config.Options r1;
        java.lang.NullPointerException $r2;
        kodkod.engine.config.Reporter r0;

        r1 := @this: kodkod.engine.config.Options;

        r0 := @parameter0: kodkod.engine.config.Reporter;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter> = r0;

        return;
    }

    private void checkRange(int, int, int)
    {
        kodkod.engine.config.Options r9;
        java.lang.IllegalArgumentException $r0;
        int i0, i1, i2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r2, $r8;

        r9 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < i1 goto label1;

        if i0 <= i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        return;
    }

    public kodkod.engine.config.Options$IntEncoding intEncoding()
    {
        kodkod.engine.config.Options r0;
        kodkod.engine.config.Options$IntEncoding $r1;

        r0 := @this: kodkod.engine.config.Options;

        $r1 = r0.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding>;

        return $r1;
    }

    public void setIntEncoding(kodkod.engine.config.Options$IntEncoding)
    {
        kodkod.engine.config.Options r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        kodkod.engine.config.Options$IntEncoding r0;

        r1 := @this: kodkod.engine.config.Options;

        r0 := @parameter0: kodkod.engine.config.Options$IntEncoding;

        $i0 = virtualinvoke r0.<kodkod.engine.config.Options$IntEncoding: int maxAllowedBitwidth()>();

        $i1 = r1.<kodkod.engine.config.Options: int bitwidth>;

        if $i0 >= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r1.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding> = r0;

        return;
    }

    public int bitwidth()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int bitwidth>;

        return $i0;
    }

    public void setBitwidth(int)
    {
        kodkod.engine.config.Options r0;
        int i0, $i1;
        kodkod.engine.config.Options$IntEncoding $r1;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding>;

        $i1 = virtualinvoke $r1.<kodkod.engine.config.Options$IntEncoding: int maxAllowedBitwidth()>();

        specialinvoke r0.<kodkod.engine.config.Options: void checkRange(int,int,int)>(i0, 1, $i1);

        r0.<kodkod.engine.config.Options: int bitwidth> = i0;

        return;
    }

    public kodkod.util.ints.IntRange integers()
    {
        kodkod.engine.config.Options r0;
        int $i0;
        kodkod.util.ints.IntRange $r2;
        kodkod.engine.config.Options$IntEncoding $r1;

        r0 := @this: kodkod.engine.config.Options;

        $r1 = r0.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding>;

        $i0 = r0.<kodkod.engine.config.Options: int bitwidth>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options$IntEncoding: kodkod.util.ints.IntRange range(int)>($i0);

        return $r2;
    }

    public boolean flatten()
    {
        kodkod.engine.config.Options r0;
        boolean $z0;

        r0 := @this: kodkod.engine.config.Options;

        $z0 = r0.<kodkod.engine.config.Options: boolean flatten>;

        return $z0;
    }

    public void setFlatten(boolean)
    {
        kodkod.engine.config.Options r0;
        java.lang.IllegalStateException $r1;
        int $i0;
        boolean z0;

        r0 := @this: kodkod.engine.config.Options;

        z0 := @parameter0: boolean;

        $i0 = r0.<kodkod.engine.config.Options: int logTranslation>;

        if $i0 <= 0 goto label1;

        if z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("logTranslation enabled:  flattening must be off.");

        throw $r1;

     label1:
        r0.<kodkod.engine.config.Options: boolean flatten> = z0;

        return;
    }

    public int symmetryBreaking()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int symmetryBreaking>;

        return $i0;
    }

    public void setSymmetryBreaking(int)
    {
        kodkod.engine.config.Options r0;
        int i0;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.config.Options: void checkRange(int,int,int)>(i0, 0, 2147483647);

        r0.<kodkod.engine.config.Options: int symmetryBreaking> = i0;

        return;
    }

    public int sharing()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int sharing>;

        return $i0;
    }

    public void setSharing(int)
    {
        kodkod.engine.config.Options r0;
        int i0;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.config.Options: void checkRange(int,int,int)>(i0, 1, 2147483647);

        r0.<kodkod.engine.config.Options: int sharing> = i0;

        return;
    }

    public int skolemDepth()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int skolemDepth>;

        return $i0;
    }

    public void setSkolemDepth(int)
    {
        kodkod.engine.config.Options r0;
        int i0;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        r0.<kodkod.engine.config.Options: int skolemDepth> = i0;

        return;
    }

    public int logTranslation()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int logTranslation>;

        return $i0;
    }

    public void setLogTranslation(int)
    {
        kodkod.engine.config.Options r0;
        int i0;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.config.Options: void checkRange(int,int,int)>(i0, 0, 2);

        if i0 <= 0 goto label1;

        r0.<kodkod.engine.config.Options: boolean flatten> = 0;

     label1:
        r0.<kodkod.engine.config.Options: int logTranslation> = i0;

        return;
    }

    public int coreGranularity()
    {
        kodkod.engine.config.Options r0;
        int $i0;

        r0 := @this: kodkod.engine.config.Options;

        $i0 = r0.<kodkod.engine.config.Options: int coreGranularity>;

        return $i0;
    }

    public void setCoreGranularity(int)
    {
        kodkod.engine.config.Options r0;
        int i0;

        r0 := @this: kodkod.engine.config.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.engine.config.Options: void checkRange(int,int,int)>(i0, 0, 3);

        r0.<kodkod.engine.config.Options: int coreGranularity> = i0;

        return;
    }

    public java.lang.String toString()
    {
        kodkod.engine.config.Options r1;
        kodkod.engine.satlab.SATFactory $r2;
        kodkod.engine.config.Reporter $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r0;
        java.lang.String $r5;
        kodkod.engine.config.Options$IntEncoding $r4;
        boolean $z0;

        r1 := @this: kodkod.engine.config.Options;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Options:");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n solver: ");

        $r2 = r1.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n reporter: ");

        $r3 = r1.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n intEncoding: ");

        $r4 = r1.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n bitwidth: ");

        $i0 = r1.<kodkod.engine.config.Options: int bitwidth>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n sharing: ");

        $i1 = r1.<kodkod.engine.config.Options: int sharing>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n flatten: ");

        $z0 = r1.<kodkod.engine.config.Options: boolean flatten>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n symmetryBreaking: ");

        $i2 = r1.<kodkod.engine.config.Options: int symmetryBreaking>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n skolemDepth: ");

        $i3 = r1.<kodkod.engine.config.Options: int skolemDepth>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n logTranslation: ");

        $i4 = r1.<kodkod.engine.config.Options: int logTranslation>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n coreGranularity: ");

        $i5 = r1.<kodkod.engine.config.Options: int coreGranularity>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
