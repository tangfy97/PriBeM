public class org.apache.batik.bridge.SVGAnimateTransformElementBridge extends org.apache.batik.bridge.SVGAnimateElementBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        return "animateTransform";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.SVGAnimateTransformElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        $r0 = new org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: void <init>()>();

        return $r0;
    }

    protected org.apache.batik.anim.AbstractAnimation createAnimation(org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.dom.anim.AnimationTarget r8;
        org.apache.batik.anim.TransformAnimation $r4;
        float[] $r6, $r7;
        org.apache.batik.anim.values.AnimatableValue[] $r9;
        short $s0;
        int $i1;
        java.lang.String $r11, $r13, $r15;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r2, $r3, $r10, $r12, $r14;
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.anim.timing.TimedElement $r5;
        org.apache.batik.anim.values.AnimatableValue r16, r17, r18;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        r8 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        $s0 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: short parseType()>();

        r16 = null;

        r17 = null;

        r18 = null;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "from");

        if $z0 == 0 goto label1;

        $r14 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r15 = virtualinvoke $r14.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "from");

        r16 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: org.apache.batik.anim.values.AnimatableValue parseValue(java.lang.String,short,org.apache.batik.dom.anim.AnimationTarget)>($r15, $s0, r8);

     label1:
        $r2 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $z1 = virtualinvoke $r2.<org.apache.batik.dom.AbstractElement: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "to");

        if $z1 == 0 goto label2;

        $r12 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r13 = virtualinvoke $r12.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "to");

        r17 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: org.apache.batik.anim.values.AnimatableValue parseValue(java.lang.String,short,org.apache.batik.dom.anim.AnimationTarget)>($r13, $s0, r8);

     label2:
        $r3 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $z2 = virtualinvoke $r3.<org.apache.batik.dom.AbstractElement: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "by");

        if $z2 == 0 goto label3;

        $r10 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r11 = virtualinvoke $r10.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "by");

        r18 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: org.apache.batik.anim.values.AnimatableValue parseValue(java.lang.String,short,org.apache.batik.dom.anim.AnimationTarget)>($r11, $s0, r8);

     label3:
        $r4 = new org.apache.batik.anim.TransformAnimation;

        $r5 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.anim.timing.TimedElement timedElement>;

        $i1 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: int parseCalcMode()>();

        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: float[] parseKeyTimes()>();

        $r7 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: float[] parseKeySplines()>();

        $z3 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: boolean parseAdditive()>();

        $z4 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateElementBridge: boolean parseAccumulate()>();

        $r9 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: org.apache.batik.anim.values.AnimatableValue[] parseValues(short,org.apache.batik.dom.anim.AnimationTarget)>($s0, r8);

        specialinvoke $r4.<org.apache.batik.anim.TransformAnimation: void <init>(org.apache.batik.anim.timing.TimedElement,org.apache.batik.dom.anim.AnimatableElement,int,float[],float[],boolean,boolean,org.apache.batik.anim.values.AnimatableValue[],org.apache.batik.anim.values.AnimatableValue,org.apache.batik.anim.values.AnimatableValue,org.apache.batik.anim.values.AnimatableValue,short)>($r5, r0, $i1, $r6, $r7, $z3, $z4, $r9, r16, r17, r18, $s0);

        return $r4;
    }

    protected short parseType()
    {
        java.lang.Object[] $r4;
        org.apache.batik.bridge.BridgeException $r3;
        org.apache.batik.bridge.BridgeContext $r6;
        java.lang.String $r2;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r5;
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "type");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("translate");

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("scale");

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("rotate");

        if $z2 == 0 goto label3;

        return 4;

     label3:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("skewX");

        if $z3 == 0 goto label4;

        return 5;

     label4:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("skewY");

        if $z4 == 0 goto label5;

        return 6;

     label5:
        $r3 = new org.apache.batik.bridge.BridgeException;

        $r6 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r5 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "type";

        $r4[1] = $r2;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r6, $r5, "attribute.malformed", $r4);

        throw $r3;
    }

    protected org.apache.batik.anim.values.AnimatableValue parseValue(java.lang.String, short, org.apache.batik.dom.anim.AnimationTarget)
    {
        byte b12, b15, b16, b17;
        org.apache.batik.anim.values.AnimatableTransformListValue $r9;
        float f0, f1, $f2;
        org.apache.batik.dom.anim.AnimationTarget r2;
        short s2;
        int $i0, i10, i11, i13, i14, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.lang.String r0, $r4, $r5, $r6;
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r3;
        char $c1, $c3, $c4, $c5, $c6, $c7, $c8, $c9;
        org.apache.batik.dom.svg.SVGOMTransform $r8;

        r3 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        r0 := @parameter0: java.lang.String;

        s2 := @parameter1: short;

        r2 := @parameter2: org.apache.batik.dom.anim.AnimationTarget;

        f0 = 0.0F;

        f1 = 0.0F;

        i10 = 0;

        i11 = 44;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label03;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = $c1;

        $i18 = (int) $c1;

        if $i18 == 32 goto label04;

        $i19 = (int) $c1;

        if $i19 != 44 goto label02;

        goto label04;

     label02:
        i10 = i10 + 1;

     label03:
        if i10 < $i0 goto label01;

     label04:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i10);

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

        if i10 >= $i0 goto label05;

        i10 = i10 + 1;

     label05:
        b12 = 1;

        b17 = 1;

        b16 = 1;

        b15 = 1;

        if i10 >= $i0 goto label11;

        if i11 != 32 goto label11;

        goto label08;

     label06:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = $c9;

        $i20 = (int) $c9;

        if $i20 == 32 goto label07;

        goto label09;

     label07:
        i10 = i10 + 1;

     label08:
        if i10 < $i0 goto label06;

     label09:
        if i11 != 44 goto label11;

        i10 = i10 + 1;

        goto label11;

     label10:
        i10 = i10 + 1;

     label11:
        if i10 >= $i0 goto label12;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i21 = (int) $c8;

        if $i21 == 32 goto label10;

     label12:
        i13 = i10;

        if i10 >= $i0 goto label32;

        $i22 = (int) s2;

        if $i22 == 5 goto label32;

        $i23 = (int) s2;

        if $i23 == 6 goto label32;

        goto label15;

     label13:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = $c3;

        $i24 = (int) $c3;

        if $i24 == 32 goto label16;

        $i25 = (int) $c3;

        if $i25 != 44 goto label14;

        goto label16;

     label14:
        i10 = i10 + 1;

     label15:
        if i10 < $i0 goto label13;

     label16:
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i10);

        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

        if i10 >= $i0 goto label17;

        i10 = i10 + 1;

     label17:
        b12 = 2;

        b17 = 2;

        b16 = 2;

        b15 = 2;

        if i10 >= $i0 goto label23;

        if i11 != 32 goto label23;

        goto label20;

     label18:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        i11 = $c7;

        $i26 = (int) $c7;

        if $i26 == 32 goto label19;

        goto label21;

     label19:
        i10 = i10 + 1;

     label20:
        if i10 < $i0 goto label18;

     label21:
        if i11 != 44 goto label23;

        i10 = i10 + 1;

        goto label23;

     label22:
        i10 = i10 + 1;

     label23:
        if i10 >= $i0 goto label24;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i27 = (int) $c6;

        if $i27 == 32 goto label22;

     label24:
        i14 = i10;

        if i10 >= $i0 goto label32;

        $i28 = (int) s2;

        if $i28 != 4 goto label32;

        goto label27;

     label25:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i29 = (int) $c4;

        if $i29 == 44 goto label28;

        $i30 = (int) $c4;

        if $i30 != 32 goto label26;

        goto label28;

     label26:
        i10 = i10 + 1;

     label27:
        if i10 < $i0 goto label25;

     label28:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i14, i10);

        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r6);

        if i10 >= $i0 goto label29;

        i10 = i10 + 1;

     label29:
        b12 = 3;

        b17 = 3;

        b16 = 3;

        b15 = 3;

        goto label31;

     label30:
        i10 = i10 + 1;

     label31:
        if i10 >= $i0 goto label32;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i31 = (int) $c5;

        if $i31 == 32 goto label30;

     label32:
        if i10 == $i0 goto label33;

        return null;

     label33:
        $r8 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r8.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        $i32 = (int) s2;

        tableswitch($i32)
        {
            case 2: goto label34;
            case 3: goto label36;
            case 4: goto label38;
            case 5: goto label40;
            case 6: goto label41;
            default: goto label42;
        };

     label34:
        if b15 != 2 goto label35;

        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>($f2, f0);

        goto label42;

     label35:
        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>($f2, 0.0F);

        goto label42;

     label36:
        if b17 != 2 goto label37;

        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>($f2, f0);

        goto label42;

     label37:
        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>($f2, $f2);

        goto label42;

     label38:
        if b16 != 3 goto label39;

        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>($f2, f0, f1);

        goto label42;

     label39:
        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>($f2, 0.0F, 0.0F);

        goto label42;

     label40:
        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewX(float)>($f2);

        goto label42;

     label41:
        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewY(float)>($f2);

     label42:
        $r9 = new org.apache.batik.anim.values.AnimatableTransformListValue;

        specialinvoke $r9.<org.apache.batik.anim.values.AnimatableTransformListValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,org.apache.batik.dom.svg.AbstractSVGTransform)>(r2, $r8);

        return $r9;
    }

    protected org.apache.batik.anim.values.AnimatableValue[] parseValues(short, org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.dom.anim.AnimationTarget r6;
        java.lang.Object[] $r4, $r8;
        org.apache.batik.anim.values.AnimatableValue[] $r5, $r11;
        java.util.ArrayList $r14;
        short s3;
        int $i0, $i2, i4, i5, i6, $i8, $i9;
        java.lang.String $r2, $r12;
        org.apache.batik.dom.svg.SVGOMElement $r1, $r9;
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;
        org.apache.batik.bridge.BridgeException $r15;
        char $c1, c7;
        org.apache.batik.bridge.BridgeContext $r10;
        org.apache.batik.anim.values.AnimatableValue $r13;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        s3 := @parameter0: short;

        r6 := @parameter1: org.apache.batik.dom.anim.AnimationTarget;

        $r1 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "values");

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(7);

        i4 = 0;

        goto label09;

     label02:
        i4 = i4 + 1;

        if i4 != $i0 goto label03;

        goto label10;

     label03:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i4);

        $i8 = (int) $c1;

        if $i8 == 32 goto label02;

        i5 = i4 + 1;

        i6 = i4;

        if i5 >= $i0 goto label07;

        c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i5);

        goto label06;

     label04:
        i5 = i5 + 1;

        if i5 != $i0 goto label05;

        goto label07;

     label05:
        c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i5);

     label06:
        $i9 = (int) c7;

        if $i9 != 59 goto label04;

     label07:
        i4 = i5 + 1;

        $r12 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i6, i5);

        $r13 = virtualinvoke r0.<org.apache.batik.bridge.SVGAnimateTransformElementBridge: org.apache.batik.anim.values.AnimatableValue parseValue(java.lang.String,short,org.apache.batik.dom.anim.AnimationTarget)>($r12, s3, r6);

        if $r13 != null goto label08;

        $r15 = new org.apache.batik.bridge.BridgeException;

        $r10 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r9 = r0.<org.apache.batik.bridge.SVGAnimationElementBridge: org.apache.batik.dom.svg.SVGOMElement element>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "values";

        $r8[1] = $r2;

        specialinvoke $r15.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r10, $r9, "attribute.malformed", $r8);

        throw $r15;

     label08:
        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label09:
        if i4 < $i0 goto label03;

     label10:
        $i2 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        $r11 = newarray (org.apache.batik.anim.values.AnimatableValue)[$i2];

        $r4 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r5 = (org.apache.batik.anim.values.AnimatableValue[]) $r4;

        return $r5;
    }

    protected boolean canAnimateType(int)
    {
        int i0;
        org.apache.batik.bridge.SVGAnimateTransformElementBridge r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGAnimateTransformElementBridge;

        i0 := @parameter0: int;

        if i0 != 9 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
