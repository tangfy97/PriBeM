public class org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory extends java.lang.Object implements org.apache.cxf.jaxrs.lifecycle.ResourceProvider
{
    private org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer;
    private java.lang.reflect.Constructor c;
    private java.lang.String beanId;
    private java.lang.reflect.Method postConstructMethod;
    private java.lang.reflect.Method preDestroyMethod;
    private boolean isSingleton;

    public void <init>()
    {
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId> = r1;

        return;
    }

    private void init()
    {
        java.lang.reflect.Method $r8, $r9;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.osgi.service.blueprint.reflect.BeanMetadata r13;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;
        org.osgi.service.blueprint.container.BlueprintContainer $r2, $r11, $r26;
        java.lang.reflect.Constructor $r6, $r7;
        org.osgi.service.blueprint.reflect.ComponentMetadata $r12;
        java.lang.String $r1, $r10, $r14, $r15, $r16, $r17, $r23, $r25;
        java.lang.RuntimeException $r18;
        java.lang.Object $r3, $r27;
        java.lang.Class $r4, $r5, $r24, r28;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        $r2 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer>;

        $r1 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId>;

        $r3 = interfaceinvoke $r2.<org.osgi.service.blueprint.container.BlueprintContainer: java.lang.Object getComponentInstance(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.cxf.common.util.ClassHelper: java.lang.Class getRealClassFromClass(java.lang.Class)>($r4);

        r28 = $r5;

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        $r26 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer>;

        $r25 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId>;

        $r27 = interfaceinvoke $r26.<org.osgi.service.blueprint.container.BlueprintContainer: java.lang.Object getComponentInstance(java.lang.String)>($r25);

        r28 = staticinvoke <org.apache.cxf.common.util.ClassHelper: java.lang.Class getRealClass(java.lang.Object)>($r27);

     label1:
        $r24 = r28;

        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: boolean isSingleton()>();

        if $z1 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)>($r24, $z4);

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Constructor c> = $r6;

        $r7 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Constructor c>;

        if $r7 != null goto label4;

        $r18 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource class ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no valid constructor");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label4:
        $r8 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Method findPostConstructMethod(java.lang.Class)>(r28);

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Method postConstructMethod> = $r8;

        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Method findPreDestroyMethod(java.lang.Class)>(r28);

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Method preDestroyMethod> = $r9;

        $r11 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer>;

        $r10 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId>;

        $r12 = interfaceinvoke $r11.<org.osgi.service.blueprint.container.BlueprintContainer: org.osgi.service.blueprint.reflect.ComponentMetadata getComponentMetadata(java.lang.String)>($r10);

        $z2 = $r12 instanceof org.osgi.service.blueprint.reflect.BeanMetadata;

        if $z2 == 0 goto label8;

        r13 = (org.osgi.service.blueprint.reflect.BeanMetadata) $r12;

        $r14 = "singleton";

        $r15 = interfaceinvoke r13.<org.osgi.service.blueprint.reflect.BeanMetadata: java.lang.String getScope()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 != 0 goto label5;

        $r16 = interfaceinvoke r13.<org.osgi.service.blueprint.reflect.BeanMetadata: java.lang.String getScope()>();

        if $r16 != null goto label6;

        $r17 = interfaceinvoke r13.<org.osgi.service.blueprint.reflect.BeanMetadata: java.lang.String getId()>();

        if $r17 == null goto label6;

     label5:
        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: boolean isSingleton> = $z5;

     label8:
        return;
    }

    public java.lang.Object getInstance(org.apache.cxf.message.Message)
    {
        java.lang.Object[] $r3;
        org.apache.cxf.message.Message r1;
        java.lang.reflect.Constructor $r2;
        int $i0;
        java.lang.Object r6, $r10;
        java.lang.String $r4, $r8;
        org.osgi.service.blueprint.container.BlueprintContainer $r5, $r9;
        java.lang.reflect.Method $r7;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Constructor c>;

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.Object[] createConstructorArguments(java.lang.reflect.Constructor,org.apache.cxf.message.Message)>($r2, r1);

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label1;

        $r9 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer>;

        $r8 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId>;

        $r10 = interfaceinvoke $r9.<org.osgi.service.blueprint.container.BlueprintContainer: java.lang.Object getComponentInstance(java.lang.String)>($r8);

        goto label2;

     label1:
        $r5 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer>;

        $r4 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId>;

        $r10 = interfaceinvoke $r5.<org.osgi.service.blueprint.container.BlueprintContainer: java.lang.Object getComponentInstance(java.lang.String)>($r4);

     label2:
        r6 = $r10;

        $z0 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: boolean isSingleton>;

        if $z0 == 0 goto label3;

        if r1 != null goto label4;

     label3:
        $r7 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Method postConstructMethod>;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void invokeLifeCycleMethod(java.lang.Object,java.lang.reflect.Method)>(r6, $r7);

     label4:
        return r6;
    }

    public boolean isSingleton()
    {
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        $z0 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: boolean isSingleton>;

        return $z0;
    }

    public void releaseInstance(org.apache.cxf.message.Message, java.lang.Object)
    {
        org.apache.cxf.message.Message r3;
        java.lang.Object r1;
        java.lang.reflect.Method $r2;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        r3 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: boolean isSingleton>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Method preDestroyMethod>;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void invokeLifeCycleMethod(java.lang.Object,java.lang.reflect.Method)>(r1, $r2);

     label1:
        return;
    }

    public void setBeanId(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.String beanId> = r1;

        return;
    }

    java.lang.reflect.Constructor getBeanConstructor()
    {
        java.lang.reflect.Constructor $r1;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        $r1 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Constructor c>;

        return $r1;
    }

    public java.lang.Class getResourceClass()
    {
        java.lang.Class $r2;
        java.lang.reflect.Constructor $r1;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        $r1 = r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: java.lang.reflect.Constructor c>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        return $r2;
    }

    public void setBlueprintContainer(org.osgi.service.blueprint.container.BlueprintContainer)
    {
        org.osgi.service.blueprint.container.BlueprintContainer r1;
        org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory r0;

        r0 := @this: org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory;

        r1 := @parameter0: org.osgi.service.blueprint.container.BlueprintContainer;

        r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: org.osgi.service.blueprint.container.BlueprintContainer blueprintContainer> = r1;

        specialinvoke r0.<org.apache.cxf.jaxrs.blueprint.BlueprintResourceFactory: void init()>();

        return;
    }
}
