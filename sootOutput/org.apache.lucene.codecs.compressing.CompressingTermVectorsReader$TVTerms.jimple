class org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms extends org.apache.lucene.index.Terms
{
    private final int numTerms;
    private final int flags;
    private final int[] prefixLengths;
    private final int[] suffixLengths;
    private final int[] termFreqs;
    private final int[] positionIndex;
    private final int[] positions;
    private final int[] startOffsets;
    private final int[] lengths;
    private final int[] payloadIndex;
    private final org.apache.lucene.util.BytesRef termBytes;
    private final org.apache.lucene.util.BytesRef payloadBytes;
    final org.apache.lucene.codecs.compressing.CompressingTermVectorsReader this$0;

    void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader, int, int, int[], int[], int[], int[], int[], int[], int[], int[], org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.util.BytesRef r10, r11;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int[] r2, r3, r4, r5, r6, r7, r8, r9;
        int i0, i1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        r1 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        r4 := @parameter5: int[];

        r5 := @parameter6: int[];

        r6 := @parameter7: int[];

        r7 := @parameter8: int[];

        r8 := @parameter9: int[];

        r9 := @parameter10: int[];

        r10 := @parameter11: org.apache.lucene.util.BytesRef;

        r11 := @parameter12: org.apache.lucene.util.BytesRef;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader this$0> = r1;

        specialinvoke r0.<org.apache.lucene.index.Terms: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int numTerms> = i0;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int flags> = i1;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] prefixLengths> = r2;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] suffixLengths> = r3;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] termFreqs> = r4;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] positionIndex> = r5;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] positions> = r6;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] startOffsets> = r7;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] lengths> = r8;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] payloadIndex> = r9;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef payloadBytes> = r10;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef termBytes> = r11;

        return;
    }

    public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException
    {
        byte[] $r15;
        org.apache.lucene.store.ByteArrayDataInput $r13;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum $r1, r3;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r2;
        int[] $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.lucene.index.TermsEnum r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r12, $r14, $r16, $r17;

        r2 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        r0 := @parameter0: org.apache.lucene.index.TermsEnum;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum;

        if $z0 == 0 goto label1;

        r3 = (org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum) r0;

        goto label2;

     label1:
        $r1 = new org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum;

        specialinvoke $r1.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum: void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$1)>(null);

        r3 = $r1;

     label2:
        $i0 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int numTerms>;

        $i1 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int flags>;

        $r4 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] prefixLengths>;

        $r5 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] suffixLengths>;

        $r6 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] termFreqs>;

        $r7 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] positionIndex>;

        $r8 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] positions>;

        $r9 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] startOffsets>;

        $r10 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] lengths>;

        $r11 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int[] payloadIndex>;

        $r12 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef payloadBytes>;

        $r13 = new org.apache.lucene.store.ByteArrayDataInput;

        $r14 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef termBytes>;

        $r15 = $r14.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r16 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef termBytes>;

        $i2 = $r16.<org.apache.lucene.util.BytesRef: int offset>;

        $r17 = r2.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: org.apache.lucene.util.BytesRef termBytes>;

        $i3 = $r17.<org.apache.lucene.util.BytesRef: int length>;

        specialinvoke $r13.<org.apache.lucene.store.ByteArrayDataInput: void <init>(byte[],int,int)>($r15, $i2, $i3);

        virtualinvoke r3.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum: void reset(int,int,int[],int[],int[],int[],int[],int[],int[],int[],org.apache.lucene.util.BytesRef,org.apache.lucene.store.ByteArrayDataInput)>($i0, $i1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13);

        return r3;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r1;
        java.util.Comparator $r0;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $r0 = staticinvoke <org.apache.lucene.util.BytesRef: java.util.Comparator getUTF8SortedAsUnicodeComparator()>();

        return $r0;
    }

    public long size() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int numTerms>;

        $l1 = (long) $i0;

        return $l1;
    }

    public long getSumTotalTermFreq() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        return -1L;
    }

    public long getSumDocFreq() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int numTerms>;

        $l1 = (long) $i0;

        return $l1;
    }

    public int getDocCount() throws java.io.IOException
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        return 1;
    }

    public boolean hasOffsets()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPositions()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPayloads()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
