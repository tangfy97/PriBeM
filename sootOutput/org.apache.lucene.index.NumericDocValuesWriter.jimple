class org.apache.lucene.index.NumericDocValuesWriter extends org.apache.lucene.index.DocValuesWriter
{
    private static final long MISSING;
    private org.apache.lucene.util.packed.AppendingLongBuffer pending;
    private final org.apache.lucene.util.Counter iwBytesUsed;
    private long bytesUsed;
    private final org.apache.lucene.index.FieldInfo fieldInfo;

    public void <init>(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)
    {
        org.apache.lucene.index.NumericDocValuesWriter r0;
        org.apache.lucene.util.Counter r4;
        org.apache.lucene.util.packed.AppendingLongBuffer $r1, $r2;
        org.apache.lucene.index.FieldInfo r3;
        long $l0, $l1;

        r0 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        r3 := @parameter0: org.apache.lucene.index.FieldInfo;

        r4 := @parameter1: org.apache.lucene.util.Counter;

        specialinvoke r0.<org.apache.lucene.index.DocValuesWriter: void <init>()>();

        $r1 = new org.apache.lucene.util.packed.AppendingLongBuffer;

        specialinvoke $r1.<org.apache.lucene.util.packed.AppendingLongBuffer: void <init>()>();

        r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending> = $r1;

        $r2 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        $l0 = virtualinvoke $r2.<org.apache.lucene.util.packed.AppendingLongBuffer: long ramBytesUsed()>();

        r0.<org.apache.lucene.index.NumericDocValuesWriter: long bytesUsed> = $l0;

        r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.index.FieldInfo fieldInfo> = r3;

        r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.Counter iwBytesUsed> = r4;

        $l1 = r0.<org.apache.lucene.index.NumericDocValuesWriter: long bytesUsed>;

        virtualinvoke r4.<org.apache.lucene.util.Counter: long addAndGet(long)>($l1);

        return;
    }

    public void addValue(int, long)
    {
        long $l1, $l2, $l4, l5;
        org.apache.lucene.index.NumericDocValuesWriter r0;
        byte $b3;
        int i0, i6, $i7;
        java.lang.String $r9, $r12;
        java.lang.IllegalArgumentException $r14;
        org.apache.lucene.util.packed.AppendingLongBuffer $r1, $r2, $r3, $r4;
        org.apache.lucene.index.FieldInfo $r8;
        java.lang.StringBuilder $r7, $r10, $r11, $r13;

        r0 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        i0 := @parameter0: int;

        l5 := @parameter1: long;

        $l1 = (long) i0;

        $r1 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        $l2 = virtualinvoke $r1.<org.apache.lucene.util.packed.AppendingLongBuffer: long size()>();

        $b3 = $l1 cmp $l2;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocValuesField \"");

        $r8 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r9 = $r8.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" appears more than once in this document (only one value is allowed per field)");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $r2 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        $l4 = virtualinvoke $r2.<org.apache.lucene.util.packed.AppendingLongBuffer: long size()>();

        i6 = (int) $l4;

     label2:
        if i6 >= i0 goto label3;

        $r4 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        virtualinvoke $r4.<org.apache.lucene.util.packed.AppendingLongBuffer: void add(long)>(0L);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r3 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        virtualinvoke $r3.<org.apache.lucene.util.packed.AppendingLongBuffer: void add(long)>(l5);

        specialinvoke r0.<org.apache.lucene.index.NumericDocValuesWriter: void updateBytesUsed()>();

        return;
    }

    private void updateBytesUsed()
    {
        org.apache.lucene.index.NumericDocValuesWriter r0;
        org.apache.lucene.util.Counter $r2;
        org.apache.lucene.util.packed.AppendingLongBuffer $r1;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        $r1 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.util.packed.AppendingLongBuffer: long ramBytesUsed()>();

        $r2 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.Counter iwBytesUsed>;

        $l1 = r0.<org.apache.lucene.index.NumericDocValuesWriter: long bytesUsed>;

        $l2 = $l0 - $l1;

        virtualinvoke $r2.<org.apache.lucene.util.Counter: long addAndGet(long)>($l2);

        r0.<org.apache.lucene.index.NumericDocValuesWriter: long bytesUsed> = $l0;

        return;
    }

    public void finish(int)
    {
        int i0;
        org.apache.lucene.index.NumericDocValuesWriter r0;

        r0 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        i0 := @parameter0: int;

        return;
    }

    public void flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer) throws java.io.IOException
    {
        org.apache.lucene.codecs.DocValuesConsumer r2;
        org.apache.lucene.index.NumericDocValuesWriter r3;
        org.apache.lucene.index.SegmentInfo $r1;
        org.apache.lucene.index.NumericDocValuesWriter$1 $r4;
        org.apache.lucene.index.SegmentWriteState r0;
        int $i0;
        org.apache.lucene.index.FieldInfo $r5;

        r3 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        r0 := @parameter0: org.apache.lucene.index.SegmentWriteState;

        r2 := @parameter1: org.apache.lucene.codecs.DocValuesConsumer;

        $r1 = r0.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $r5 = r3.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r4 = new org.apache.lucene.index.NumericDocValuesWriter$1;

        specialinvoke $r4.<org.apache.lucene.index.NumericDocValuesWriter$1: void <init>(org.apache.lucene.index.NumericDocValuesWriter,int)>(r3, $i0);

        virtualinvoke r2.<org.apache.lucene.codecs.DocValuesConsumer: void addNumericField(org.apache.lucene.index.FieldInfo,java.lang.Iterable)>($r5, $r4);

        return;
    }

    public void abort()
    {
        org.apache.lucene.index.NumericDocValuesWriter r0;

        r0 := @this: org.apache.lucene.index.NumericDocValuesWriter;

        return;
    }

    static org.apache.lucene.util.packed.AppendingLongBuffer access$000(org.apache.lucene.index.NumericDocValuesWriter)
    {
        org.apache.lucene.index.NumericDocValuesWriter r0;
        org.apache.lucene.util.packed.AppendingLongBuffer $r1;

        r0 := @parameter0: org.apache.lucene.index.NumericDocValuesWriter;

        $r1 = r0.<org.apache.lucene.index.NumericDocValuesWriter: org.apache.lucene.util.packed.AppendingLongBuffer pending>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.index.NumericDocValuesWriter: long MISSING> = 0L;

        return;
    }
}
