public class com.jidesoft.tree.StyledTreeCellRenderer extends com.jidesoft.swing.StyledLabel implements javax.swing.tree.TreeCellRenderer
{
    private javax.swing.JTree tree;
    protected boolean selected;
    protected boolean hasFocus;
    private boolean drawsFocusBorderAroundIcon;
    private boolean drawDashedFocusIndicator;
    private java.awt.Color treeBGColor;
    private java.awt.Color focusBGColor;
    protected transient javax.swing.Icon closedIcon;
    protected transient javax.swing.Icon leafIcon;
    protected transient javax.swing.Icon openIcon;
    protected java.awt.Color textSelectionColor;
    protected java.awt.Color textNonSelectionColor;
    protected java.awt.Color backgroundSelectionColor;
    protected java.awt.Color backgroundNonSelectionColor;
    protected java.awt.Color borderSelectionColor;

    public void <init>()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        specialinvoke r0.<com.jidesoft.swing.StyledLabel: void <init>()>();

        specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void updateUIDefaults()>();

        return;
    }

    public void updateUI()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        specialinvoke r0.<com.jidesoft.swing.StyledLabel: void updateUI()>();

        specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void updateUIDefaults()>();

        return;
    }

    private void updateUIDefaults()
    {
        java.awt.Color $r4, $r5, $r6, $r7, $r8;
        java.lang.Boolean $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        javax.swing.Icon $r1, $r2, $r3;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.Object $r9, $r12;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.leafIcon");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setLeafIcon(javax.swing.Icon)>($r1);

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.closedIcon");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setClosedIcon(javax.swing.Icon)>($r2);

        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.openIcon");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setOpenIcon(javax.swing.Icon)>($r3);

        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Tree.selectionForeground");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setTextSelectionColor(java.awt.Color)>($r4);

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Tree.textForeground");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setTextNonSelectionColor(java.awt.Color)>($r5);

        $r6 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Tree.selectionBackground");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setBackgroundSelectionColor(java.awt.Color)>($r6);

        $r7 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Tree.textBackground");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setBackgroundNonSelectionColor(java.awt.Color)>($r7);

        $r8 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Tree.selectionBorderColor");

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setBorderSelectionColor(java.awt.Color)>($r8);

        $r9 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("Tree.drawsFocusBorderAroundIcon");

        if $r9 == null goto label1;

        $r11 = (java.lang.Boolean) $r9;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean drawsFocusBorderAroundIcon> = $z2;

        $r12 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("Tree.drawDashedFocusIndicator");

        if $r12 == null goto label3;

        $r10 = (java.lang.Boolean) $r12;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean drawDashedFocusIndicator> = $z3;

        return;
    }

    public javax.swing.Icon getDefaultOpenIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r1;
        javax.swing.Icon $r0;

        r1 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.openIcon");

        return $r0;
    }

    public javax.swing.Icon getDefaultClosedIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r1;
        javax.swing.Icon $r0;

        r1 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.closedIcon");

        return $r0;
    }

    public javax.swing.Icon getDefaultLeafIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r1;
        javax.swing.Icon $r0;

        r1 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: javax.swing.Icon getIcon(java.lang.Object)>("Tree.leafIcon");

        return $r0;
    }

    public void setOpenIcon(javax.swing.Icon)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: javax.swing.Icon;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon openIcon> = r1;

        return;
    }

    public javax.swing.Icon getOpenIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon $r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon openIcon>;

        return $r1;
    }

    public void setClosedIcon(javax.swing.Icon)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: javax.swing.Icon;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon closedIcon> = r1;

        return;
    }

    public javax.swing.Icon getClosedIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon $r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon closedIcon>;

        return $r1;
    }

    public void setLeafIcon(javax.swing.Icon)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: javax.swing.Icon;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon leafIcon> = r1;

        return;
    }

    public javax.swing.Icon getLeafIcon()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.Icon $r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon leafIcon>;

        return $r1;
    }

    public void setTextSelectionColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color textSelectionColor> = r1;

        return;
    }

    public java.awt.Color getTextSelectionColor()
    {
        java.awt.Color $r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color textSelectionColor>;

        return $r1;
    }

    public void setTextNonSelectionColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color textNonSelectionColor> = r1;

        return;
    }

    public java.awt.Color getTextNonSelectionColor()
    {
        java.awt.Color $r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color textNonSelectionColor>;

        return $r1;
    }

    public void setBackgroundSelectionColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color backgroundSelectionColor> = r1;

        return;
    }

    public java.awt.Color getBackgroundSelectionColor()
    {
        java.awt.Color $r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color backgroundSelectionColor>;

        return $r1;
    }

    public void setBackgroundNonSelectionColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color backgroundNonSelectionColor> = r1;

        return;
    }

    public java.awt.Color getBackgroundNonSelectionColor()
    {
        java.awt.Color $r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color backgroundNonSelectionColor>;

        return $r1;
    }

    public void setBorderSelectionColor(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color borderSelectionColor> = r1;

        return;
    }

    public java.awt.Color getBorderSelectionColor()
    {
        java.awt.Color $r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color borderSelectionColor>;

        return $r1;
    }

    public void setFont(java.awt.Font)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.awt.Font r1;
        boolean $z0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Font;

        $z0 = r1 instanceof javax.swing.plaf.FontUIResource;

        if $z0 == 0 goto label1;

        r1 = null;

     label1:
        specialinvoke r0.<com.jidesoft.swing.StyledLabel: void setFont(java.awt.Font)>(r1);

        return;
    }

    public java.awt.Font getFont()
    {
        java.awt.Font $r1, r4;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        javax.swing.JTree $r2, $r3;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = specialinvoke r0.<com.jidesoft.swing.StyledLabel: java.awt.Font getFont()>();

        r4 = $r1;

        if $r1 != null goto label1;

        $r2 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.JTree tree>;

        if $r2 == null goto label1;

        $r3 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.JTree tree>;

        r4 = virtualinvoke $r3.<javax.swing.JTree: java.awt.Font getFont()>();

     label1:
        return r4;
    }

    public void setBackground(java.awt.Color)
    {
        java.awt.Color r1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        boolean $z0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Color;

        $z0 = r1 instanceof javax.swing.plaf.ColorUIResource;

        if $z0 == 0 goto label1;

        r1 = null;

     label1:
        specialinvoke r0.<com.jidesoft.swing.StyledLabel: void setBackground(java.awt.Color)>(r1);

        return;
    }

    public java.awt.Component getTreeCellRendererComponent(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)
    {
        java.awt.Color $r4, $r6;
        int i0;
        boolean $z0, z1, z2, z3, z4;
        javax.swing.Icon $r2, $r7, $r8, $r9, $r10, $r11;
        javax.swing.JTree r1;
        java.awt.ComponentOrientation $r5;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.Object r3;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: javax.swing.JTree;

        r3 := @parameter1: java.lang.Object;

        z3 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        z4 := @parameter6: boolean;

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setOpaque(boolean)>(0);

        $z0 = virtualinvoke r1.<javax.swing.JTree: boolean isEnabled()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setEnabled(boolean)>(0);

        if z1 == 0 goto label1;

        $r11 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getLeafIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setDisabledIcon(javax.swing.Icon)>($r11);

        goto label6;

     label1:
        if z2 == 0 goto label2;

        $r10 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getOpenIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setDisabledIcon(javax.swing.Icon)>($r10);

        goto label6;

     label2:
        $r9 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getClosedIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setDisabledIcon(javax.swing.Icon)>($r9);

        goto label6;

     label3:
        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setEnabled(boolean)>(1);

        if z1 == 0 goto label4;

        $r8 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getLeafIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setIcon(javax.swing.Icon)>($r8);

        goto label6;

     label4:
        if z2 == 0 goto label5;

        $r7 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getOpenIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setIcon(javax.swing.Icon)>($r7);

        goto label6;

     label5:
        $r2 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getClosedIcon()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setIcon(javax.swing.Icon)>($r2);

     label6:
        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setIgnoreColorSettings(boolean)>(z3);

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void customizeStyledLabel(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)>(r1, r3, z3, z2, z1, i0, z4);

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.JTree tree> = r1;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean hasFocus> = z4;

        if z3 == 0 goto label7;

        $r6 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getTextSelectionColor()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setForeground(java.awt.Color)>($r6);

        goto label8;

     label7:
        $r4 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getTextNonSelectionColor()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void setForeground(java.awt.Color)>($r4);

     label8:
        $r5 = virtualinvoke r1.<javax.swing.JTree: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void applyComponentOrientation(java.awt.ComponentOrientation)>($r5);

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean selected> = z3;

        return r0;
    }

    protected void customizeStyledLabel(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)
    {
        javax.swing.JTree r0;
        int i0;
        com.jidesoft.tree.StyledTreeCellRenderer r3;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean z0, z1, z2, z3;

        r3 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r0 := @parameter0: javax.swing.JTree;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        i0 := @parameter5: int;

        z3 := @parameter6: boolean;

        $r2 = virtualinvoke r0.<javax.swing.JTree: java.lang.String convertValueToText(java.lang.Object,boolean,boolean,boolean,int,boolean)>(r1, z0, z1, z2, i0, z3);

        virtualinvoke r3.<com.jidesoft.tree.StyledTreeCellRenderer: void clearStyleRanges()>();

        virtualinvoke r3.<com.jidesoft.tree.StyledTreeCellRenderer: void setText(java.lang.String)>($r2);

        return;
    }

    public void paint(java.awt.Graphics)
    {
        java.awt.Color $r1, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15, $i17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.ComponentOrientation $r3, $r5;
        java.awt.Graphics r2;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r2 := @parameter0: java.awt.Graphics;

        $z0 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean selected>;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackgroundSelectionColor()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackgroundNonSelectionColor()>();

        r4 = $r1;

        if $r1 != null goto label2;

        r4 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackground()>();

     label2:
        $i15 = (int) -1;

        i13 = $i15;

        $z4 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean selected>;

        if $z4 != 0 goto label3;

        $z3 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean isOpaque()>();

        if $z3 == 0 goto label5;

     label3:
        if r4 == null goto label5;

        $i6 = specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getLabelStart()>();

        i13 = $i6;

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>(r4);

        $r3 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.ComponentOrientation getComponentOrientation()>();

        $z2 = virtualinvoke $r3.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z2 == 0 goto label4;

        $i10 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getWidth()>();

        $i11 = $i10 - $i6;

        $i12 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getHeight()>();

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>($i6, 0, $i11, $i12);

        goto label5;

     label4:
        $i7 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getWidth()>();

        $i8 = $i7 - $i6;

        $i9 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getHeight()>();

        virtualinvoke r2.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i8, $i9);

     label5:
        specialinvoke r0.<com.jidesoft.swing.StyledLabel: void paint(java.awt.Graphics)>(r2);

        $z5 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean hasFocus>;

        if $z5 == 0 goto label9;

        $z1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean drawsFocusBorderAroundIcon>;

        if $z1 == 0 goto label6;

        i13 = 0;

        goto label7;

     label6:
        $i17 = (int) -1;

        if i13 != $i17 goto label7;

        i13 = specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getLabelStart()>();

     label7:
        $r5 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.ComponentOrientation getComponentOrientation()>();

        $z6 = virtualinvoke $r5.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z6 == 0 goto label8;

        $i3 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getWidth()>();

        $i4 = $i3 - i13;

        $i5 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getHeight()>();

        specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void paintFocus(java.awt.Graphics,int,int,int,int)>(r2, i13, 0, $i4, $i5);

        goto label9;

     label8:
        $i0 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getWidth()>();

        $i1 = $i0 - i13;

        $i2 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getHeight()>();

        specialinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: void paintFocus(java.awt.Graphics,int,int,int,int)>(r2, 0, 0, $i1, $i2);

     label9:
        return;
    }

    private void paintFocus(java.awt.Graphics, int, int, int, int)
    {
        java.awt.Color $r1, $r2, $r4, r6, $r7, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Graphics r3;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r3 := @parameter0: java.awt.Graphics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBorderSelectionColor()>();

        if $r1 == null goto label2;

        $z1 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean selected>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean drawDashedFocusIndicator>;

        if $z2 != 0 goto label2;

     label1:
        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        $i7 = i2 - 1;

        $i6 = i3 - 1;

        virtualinvoke r3.<java.awt.Graphics: void drawRect(int,int,int,int)>(i0, i1, $i7, $i6);

     label2:
        $z3 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean drawDashedFocusIndicator>;

        if $z3 == 0 goto label6;

        $z0 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: boolean selected>;

        if $z0 == 0 goto label3;

        r6 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackgroundSelectionColor()>();

        goto label4;

     label3:
        $r2 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackgroundNonSelectionColor()>();

        r6 = $r2;

        if $r2 != null goto label4;

        r6 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color getBackground()>();

     label4:
        $r7 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color treeBGColor>;

        if $r7 == r6 goto label5;

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color treeBGColor> = r6;

        $r8 = new java.awt.Color;

        $i4 = virtualinvoke r6.<java.awt.Color: int getRGB()>();

        $i9 = (int) -1;

        $i5 = $i4 ^ $i9;

        specialinvoke $r8.<java.awt.Color: void <init>(int)>($i5);

        r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color focusBGColor> = $r8;

     label5:
        $r4 = r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.awt.Color focusBGColor>;

        virtualinvoke r3.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        staticinvoke <javax.swing.plaf.basic.BasicGraphicsUtils: void drawDashedRect(java.awt.Graphics,int,int,int,int)>(r3, i0, i1, i2, i3);

     label6:
        return;
    }

    private int getLabelStart()
    {
        javax.swing.Icon $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String $r2, $r3;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: javax.swing.Icon getIcon()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: java.lang.String getText()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $i1 = interfaceinvoke $r1.<javax.swing.Icon: int getIconWidth()>();

        $i2 = virtualinvoke r0.<com.jidesoft.tree.StyledTreeCellRenderer: int getIconTextGap()>();

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i4 = $i1 + $i3;

        return $i4;

     label1:
        return 0;
    }

    public java.awt.Dimension getPreferredSize()
    {
        java.awt.Dimension $r1, $r2, r3;
        int $i0, $i1, $i2;
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        $r1 = specialinvoke r0.<com.jidesoft.swing.StyledLabel: java.awt.Dimension getPreferredSize()>();

        r3 = $r1;

        if $r1 == null goto label1;

        $r2 = new java.awt.Dimension;

        $i0 = $r1.<java.awt.Dimension: int width>;

        $i2 = $i0 + 3;

        $i1 = $r1.<java.awt.Dimension: int height>;

        specialinvoke $r2.<java.awt.Dimension: void <init>(int,int)>($i2, $i1);

        r3 = $r2;

     label1:
        return r3;
    }

    public void validate()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        return;
    }

    public void invalidate()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        return;
    }

    public void revalidate()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        return;
    }

    public void repaint(long, int, int, int, int)
    {
        int i1, i2, i3, i4;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        long l0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        return;
    }

    public void repaint(java.awt.Rectangle)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.awt.Rectangle r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.awt.Rectangle;

        return;
    }

    public void repaint()
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        return;
    }

    protected void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r1;
        java.lang.Object r2, r3;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 == 0 goto label1;

        specialinvoke r1.<com.jidesoft.swing.StyledLabel: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r2, r3);

     label1:
        return;
    }

    public void firePropertyChange(java.lang.String, byte, byte)
    {
        byte b0, b1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        return;
    }

    public void firePropertyChange(java.lang.String, char, char)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        char c0, c1;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        return;
    }

    public void firePropertyChange(java.lang.String, short, short)
    {
        short s0, s1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        return;
    }

    public void firePropertyChange(java.lang.String, int, int)
    {
        int i0, i1;
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void firePropertyChange(java.lang.String, long, long)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        long l0, l1;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        return;
    }

    public void firePropertyChange(java.lang.String, float, float)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        float f0, f1;
        java.lang.String r1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return;
    }

    public void firePropertyChange(java.lang.String, double, double)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String r1;
        double d0, d1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        return;
    }

    public void firePropertyChange(java.lang.String, boolean, boolean)
    {
        com.jidesoft.tree.StyledTreeCellRenderer r0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: com.jidesoft.tree.StyledTreeCellRenderer;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        return;
    }
}
