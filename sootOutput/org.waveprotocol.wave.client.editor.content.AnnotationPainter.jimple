public class org.waveprotocol.wave.client.editor.content.AnnotationPainter extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.document.util.Property DOCUMENT_MODE;
    private static final int MAX_RUN_ITERATIONS;
    private static final int MANY_ITERATIONS;
    private static final org.waveprotocol.wave.model.document.util.Property PAINTER_PROP;
    private static final java.lang.String REPAINT_KEY;
    private static final org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP;
    private static final org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters;
    private final org.waveprotocol.wave.client.scheduler.TimerService scheduler;
    static final boolean $assertionsDisabled;

    public static boolean isEditing(org.waveprotocol.wave.model.document.util.LocalDocument)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.LocalDocument;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getDocumentElement()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean isInEditingDocument(org.waveprotocol.wave.model.document.util.ElementManager,java.lang.Object)>(r0, $r1);

        return $z0;
    }

    public static boolean isInEditingDocument(org.waveprotocol.wave.model.document.util.ElementManager, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.ElementManager r0;
        org.waveprotocol.wave.model.document.util.Property $r2;
        java.lang.Boolean $r3;
        java.lang.Object r1, $r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.ElementManager;

        r1 := @parameter1: java.lang.Object;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOCUMENT_MODE>;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, r1);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public void <init>(org.waveprotocol.wave.client.scheduler.TimerService)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r0;
        org.waveprotocol.wave.client.scheduler.TimerService r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        r1 := @parameter0: org.waveprotocol.wave.client.scheduler.TimerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.client.scheduler.TimerService scheduler> = r1;

        return;
    }

    public static void maybeScheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext, int, int)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r1;
        org.waveprotocol.wave.model.document.util.Property $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r6;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        org.waveprotocol.wave.model.document.MutableDocument $r3;
        int i0, i1;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r2 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property PAINTER_PROP>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r5 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, $r4);

        r6 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter) $r5;

        if r6 == null goto label1;

        virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: void scheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext,int,int)>(r0, i0, i1);

     label1:
        return;
    }

    private static void setPainterProp(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.client.editor.content.AnnotationPainter)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r3;
        org.waveprotocol.wave.model.document.util.Property $r5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r4;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.MutableDocument $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r5 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property PAINTER_PROP>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>($r5, $r2, r4);

        return;
    }

    public static boolean repaintNow(org.waveprotocol.wave.model.document.util.DocumentContext)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r3;
        org.waveprotocol.wave.model.document.util.Property $r4;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r6;
        java.lang.Object $r2, $r5;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r4 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r4, $r2);

        r6 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter) $r5;

        if r6 == null goto label1;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean access$000(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,int)>(r6, 80);

        return $z0;

     label1:
        return 0;
    }

    public static void hackFlush()
    {
        java.lang.Throwable $r6;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.util.ConcurrentSet $r0, $r1, $r3, $r7;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r5;
        java.lang.Object $r4;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.util.ConcurrentSet: void lock()>();

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ConcurrentSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter) $r4;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void flush(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>(r5);

        goto label2;

     label3:
        $r3 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.util.ConcurrentSet: void unlock()>();

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        virtualinvoke $r7.<org.waveprotocol.wave.model.util.ConcurrentSet: void unlock()>();

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void flush(org.waveprotocol.wave.model.document.util.DocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter $r1;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter getDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)>(r0);

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void flush(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r1);

        return;
    }

    private static void flush(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean access$000(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,int)>(r0, 2000);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        return;
    }

    private void schedule(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.client.scheduler.TimerService $r2;
        org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask $r3;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        org.waveprotocol.wave.model.util.ConcurrentSet $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.client.scheduler.TimerService scheduler>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask access$500(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>(r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.TimerService: void schedule(org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask)>($r3);

        $r4 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.ConcurrentSet: void add(java.lang.Object)>(r1);

        return;
    }

    public void scheduleRepaint(org.waveprotocol.wave.model.document.util.DocumentContext, int, int)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r3;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r1;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        java.lang.AssertionError $r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, $i10;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter $r5;
        java.lang.String $r4;
        boolean $z0;
        org.waveprotocol.wave.model.document.MutableDocument $r2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: void setPainterProp(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.AnnotationPainter)>(r0, r1);

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        $i1 = i6 + 3;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        i7 = $i2;

        $i3 = i5 - 3;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        i8 = $i4;

        if $i4 != $i2 goto label2;

        if $i4 != 0 goto label1;

        if $i2 >= $i0 goto label2;

        i7 = $i2 + 1;

        goto label2;

     label1:
        $i10 = (int) -1;

        i8 = $i4 + $i10;

     label2:
        $z0 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if i8 < 0 goto label3;

        if i7 < i8 goto label3;

        if $i0 >= i7 goto label4;

     label3:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations()>();

        $r4 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String REPAINT_KEY>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: void setAnnotation(int,int,java.lang.String,java.lang.Object)>(i8, i7, $r4, "y");

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter getDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)>(r0);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter: void schedule(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>($r5);

        return;
    }

    public static org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter getDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r3, $r8;
        org.waveprotocol.wave.model.document.util.Property $r4, $r9;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r7;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter $r6, r10;
        java.lang.Object $r2, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r4 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r4, $r2);

        r10 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter) $r5;

        if r10 != null goto label1;

        $r6 = new org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r7 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY>;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void <init>(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.PainterRegistry,org.waveprotocol.wave.client.editor.content.AnnotationPainter$1)>(r0, $r7, null);

        r10 = $r6;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r9 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>($r9, $r2, $r6);

     label1:
        return r10;
    }

    public static void createAndSetDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.client.editor.content.PainterRegistry)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r3, $r9;
        org.waveprotocol.wave.model.document.util.Property $r4, $r10;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        org.waveprotocol.wave.model.document.MutableDocument $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistry r8;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r6, $r7;
        java.lang.Object $r2, $r5;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r8 := @parameter1: org.waveprotocol.wave.client.editor.content.PainterRegistry;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r4 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r4, $r2);

        r6 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter) $r5;

        if r6 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean access$702(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,boolean)>(r6, 1);

     label1:
        $r7 = new org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void <init>(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.PainterRegistry,org.waveprotocol.wave.client.editor.content.AnnotationPainter$1)>(r0, r8, null);

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r10 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.document.util.ElementManager: void setProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object,java.lang.Object)>($r10, $r2, $r7);

        return;
    }

    public static void clearDocPainter(org.waveprotocol.wave.model.document.util.DocumentContext)
    {
        org.waveprotocol.wave.model.document.util.ElementManager $r1;
        org.waveprotocol.wave.model.document.util.Property $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r6;
        org.waveprotocol.wave.model.document.util.DocumentContext r0;
        java.lang.Object $r4, $r5;
        org.waveprotocol.wave.model.document.MutableDocument $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ElementManager elementManager()>();

        $r2 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableDocument document()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getDocumentElement()>();

        $r5 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.ElementManager: java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property,java.lang.Object)>($r2, $r4);

        r6 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter) $r5;

        if r6 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean access$702(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,boolean)>(r6, 1);

     label1:
        return;
    }

    public void registerPaintFunctionz(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r3;

        r3 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction;

        $r2 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.PainterRegistry: void registerPaintFunction(org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction)>(r0, r1);

        return;
    }

    public void registerBoundaryFunctionz(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r3;

        r3 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction;

        $r2 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.PainterRegistry ROOT_PAINT_REGISTRY>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.content.PainterRegistry: void registerBoundaryFunction(org.waveprotocol.wave.model.util.ReadableStringSet,org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction)>(r0, r1);

        return;
    }

    static java.lang.String access$100()
    {
        java.lang.String $r0;

        $r0 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String REPAINT_KEY>;

        return $r0;
    }

    static org.waveprotocol.wave.model.util.ConcurrentSet access$200()
    {
        org.waveprotocol.wave.model.util.ConcurrentSet $r0;

        $r0 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.util.Property$MutableProperty $r2, $r4;
        org.waveprotocol.wave.model.util.ConcurrentSet $r5;
        org.waveprotocol.wave.model.document.util.Property$ImmutableProperty $r1;
        java.lang.Class $r0;
        java.lang.String $r3;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: int MANY_ITERATIONS> = 2000;

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: int MAX_RUN_ITERATIONS> = 80;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/AnnotationPainter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$ImmutableProperty immutable(java.lang.String)>("doc_mode");

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOCUMENT_MODE> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$MutableProperty mutable(java.lang.String)>("annotation-painter");

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property PAINTER_PROP> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: java.lang.String makeUniqueLocal(java.lang.String)>("paint");

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String REPAINT_KEY> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Property: org.waveprotocol.wave.model.document.util.Property$MutableProperty mutable(java.lang.String)>("doc-annotation-painter");

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.document.util.Property DOC_PAINTER_PROP> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.ConcurrentSet: org.waveprotocol.wave.model.util.ConcurrentSet create()>();

        <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet maybeScheduledPainters> = $r5;

        return;
    }
}
