public class org.apache.batik.svggen.SVGGraphics2D extends org.apache.batik.ext.awt.g2d.AbstractGraphics2D implements java.lang.Cloneable, org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants
{
    public static final java.lang.String DEFAULT_XML_ENCODING;
    public static final int DEFAULT_MAX_GC_OVERRIDES;
    protected org.apache.batik.svggen.DOMTreeManager domTreeManager;
    protected org.apache.batik.svggen.DOMGroupManager domGroupManager;
    protected org.apache.batik.svggen.SVGGeneratorContext generatorCtx;
    protected org.apache.batik.svggen.SVGShape shapeConverter;
    protected java.awt.Dimension svgCanvasSize;
    protected java.awt.Graphics2D fmg;
    protected java.util.Set unsupportedAttributes;

    public final java.awt.Dimension getSVGCanvasSize()
    {
        java.awt.Dimension $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Dimension svgCanvasSize>;

        return $r1;
    }

    public final void setSVGCanvasSize(java.awt.Dimension)
    {
        java.awt.Dimension $r1, r2;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.awt.Dimension;

        $r1 = new java.awt.Dimension;

        specialinvoke $r1.<java.awt.Dimension: void <init>(java.awt.Dimension)>(r2);

        r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Dimension svgCanvasSize> = $r1;

        return;
    }

    public final org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()
    {
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r1;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        return $r1;
    }

    public final org.apache.batik.svggen.SVGShape getShapeConverter()
    {
        org.apache.batik.svggen.SVGShape $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter>;

        return $r1;
    }

    public final org.apache.batik.svggen.DOMTreeManager getDOMTreeManager()
    {
        org.apache.batik.svggen.DOMTreeManager $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        return $r1;
    }

    protected final void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager)
    {
        org.apache.batik.svggen.GenericImageHandler $r4;
        org.apache.batik.svggen.SVGGeneratorContext $r2;
        org.apache.batik.svggen.DOMTreeManager r1, $r3;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.apache.batik.svggen.DOMTreeManager;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager> = r1;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r4 = $r2.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.GenericImageHandler genericImageHandler>;

        $r3 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        interfaceinvoke $r4.<org.apache.batik.svggen.GenericImageHandler: void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager)>($r3);

        return;
    }

    protected final org.apache.batik.svggen.DOMGroupManager getDOMGroupManager()
    {
        org.apache.batik.svggen.DOMGroupManager $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        return $r1;
    }

    protected final void setDOMGroupManager(org.apache.batik.svggen.DOMGroupManager)
    {
        org.apache.batik.svggen.DOMGroupManager r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.apache.batik.svggen.DOMGroupManager;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager> = r1;

        return;
    }

    public final org.w3c.dom.Document getDOMFactory()
    {
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r1;
        org.w3c.dom.Document $r2;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r2 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: org.w3c.dom.Document domFactory>;

        return $r2;
    }

    public final org.apache.batik.svggen.ImageHandler getImageHandler()
    {
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r1;
        org.apache.batik.svggen.ImageHandler $r2;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r2 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ImageHandler imageHandler>;

        return $r2;
    }

    public final org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()
    {
        org.apache.batik.svggen.GenericImageHandler $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r1;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r2 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.GenericImageHandler genericImageHandler>;

        return $r2;
    }

    public final org.apache.batik.svggen.ExtensionHandler getExtensionHandler()
    {
        org.apache.batik.svggen.ExtensionHandler $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r1;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r2 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ExtensionHandler extensionHandler>;

        return $r2;
    }

    public final void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler)
    {
        org.apache.batik.svggen.ExtensionHandler r1;
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.SVGGeneratorContext $r2;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.apache.batik.svggen.ExtensionHandler;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        virtualinvoke $r2.<org.apache.batik.svggen.SVGGeneratorContext: void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler)>(r1);

        return;
    }

    public void <init>(org.w3c.dom.Document)
    {
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.w3c.dom.Document r1;
        org.apache.batik.svggen.SVGGeneratorContext $r2;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.w3c.dom.Document;

        $r2 = staticinvoke <org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.SVGGeneratorContext createDefault(org.w3c.dom.Document)>(r1);

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void <init>(org.apache.batik.svggen.SVGGeneratorContext,boolean)>($r2, 0);

        return;
    }

    public void <init>(org.w3c.dom.Document, org.apache.batik.svggen.ImageHandler, org.apache.batik.svggen.ExtensionHandler, boolean)
    {
        org.apache.batik.svggen.ExtensionHandler r3;
        org.w3c.dom.Document r1;
        org.apache.batik.svggen.SVGGeneratorContext $r4;
        org.apache.batik.svggen.ImageHandler r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean z0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: org.apache.batik.svggen.ImageHandler;

        r3 := @parameter2: org.apache.batik.svggen.ExtensionHandler;

        z0 := @parameter3: boolean;

        $r4 = staticinvoke <org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document,org.apache.batik.svggen.ImageHandler,org.apache.batik.svggen.ExtensionHandler)>(r1, r2, r3);

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void <init>(org.apache.batik.svggen.SVGGeneratorContext,boolean)>($r4, z0);

        return;
    }

    public static org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document, org.apache.batik.svggen.ImageHandler, org.apache.batik.svggen.ExtensionHandler)
    {
        org.apache.batik.svggen.DefaultStyleHandler $r5;
        org.apache.batik.svggen.DefaultErrorHandler $r6;
        org.apache.batik.svggen.ExtensionHandler r3;
        org.apache.batik.svggen.SVGGeneratorContext $r0;
        org.w3c.dom.Document r1;
        org.apache.batik.svggen.ImageHandler r4;
        org.apache.batik.svggen.SVGIDGenerator $r2;

        r1 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.apache.batik.svggen.ImageHandler;

        r3 := @parameter2: org.apache.batik.svggen.ExtensionHandler;

        $r0 = new org.apache.batik.svggen.SVGGeneratorContext;

        specialinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void <init>(org.w3c.dom.Document)>(r1);

        $r2 = new org.apache.batik.svggen.SVGIDGenerator;

        specialinvoke $r2.<org.apache.batik.svggen.SVGIDGenerator: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setIDGenerator(org.apache.batik.svggen.SVGIDGenerator)>($r2);

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler)>(r3);

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setImageHandler(org.apache.batik.svggen.ImageHandler)>(r4);

        $r5 = new org.apache.batik.svggen.DefaultStyleHandler;

        specialinvoke $r5.<org.apache.batik.svggen.DefaultStyleHandler: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setStyleHandler(org.apache.batik.svggen.StyleHandler)>($r5);

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setComment(java.lang.String)>("Generated by the Batik Graphics2D SVG Generator");

        $r6 = new org.apache.batik.svggen.DefaultErrorHandler;

        specialinvoke $r6.<org.apache.batik.svggen.DefaultErrorHandler: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.svggen.SVGGeneratorContext: void setErrorHandler(org.apache.batik.svggen.ErrorHandler)>($r6);

        return $r0;
    }

    public void <init>(org.apache.batik.svggen.SVGGeneratorContext, boolean)
    {
        java.awt.font.TextAttribute $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r23;
        java.util.HashSet $r3;
        java.awt.Graphics2D $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean z0;
        java.awt.image.BufferedImage $r1;
        java.util.Set $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        org.apache.batik.svggen.SVGGeneratorContext r22;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r22 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void <init>(boolean)>(z0);

        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Graphics2D fmg> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes> = $r3;

        $r5 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r4 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BACKGROUND>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r7 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r6 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r9 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r8 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute CHAR_REPLACEMENT>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r8);

        $r11 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r10 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute JUSTIFICATION>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $r13 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r12 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r15 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r14 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SUPERSCRIPT>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r14);

        $r17 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r16 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SWAP_COLORS>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r19 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r18 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute TRANSFORM>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $r21 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r20 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WIDTH>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r20);

        if r22 != null goto label1;

        $r23 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r23.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("generatorContext should not be null");

        throw $r23;

     label1:
        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext)>(r22);

        return;
    }

    protected void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext)
    {
        java.awt.Color $r11, $r13;
        java.awt.RenderingHints $r9, $r17;
        java.awt.Shape $r8, $r19;
        java.awt.Composite $r7, $r21;
        java.awt.Font $r10, $r15;
        java.awt.geom.AffineTransform $r3;
        java.awt.Paint $r5, $r25;
        org.apache.batik.svggen.SVGGeneratorContext r1;
        org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults $r4;
        org.apache.batik.svggen.DOMGroupManager $r29, $r33;
        org.apache.batik.svggen.SVGGraphics2D r0;
        java.awt.Stroke $r6, $r23;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r28, $r30;
        org.apache.batik.svggen.GenericImageHandler $r34;
        org.apache.batik.svggen.SVGShape $r26;
        org.apache.batik.svggen.DOMTreeManager $r27, $r31, $r32, $r35;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx> = r1;

        $r2 = new org.apache.batik.ext.awt.g2d.GraphicContext;

        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>()>();

        specialinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void <init>(java.awt.geom.AffineTransform)>($r3);

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc> = $r2;

        $r4 = virtualinvoke r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults getGraphicContextDefaults()>();

        if $r4 == null goto label7;

        $r5 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Paint getPaint()>();

        if $r5 == null goto label1;

        $r24 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r25 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Paint getPaint()>();

        virtualinvoke $r24.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>($r25);

     label1:
        $r6 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Stroke getStroke()>();

        if $r6 == null goto label2;

        $r22 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r23 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Stroke getStroke()>();

        virtualinvoke $r22.<org.apache.batik.ext.awt.g2d.GraphicContext: void setStroke(java.awt.Stroke)>($r23);

     label2:
        $r7 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Composite getComposite()>();

        if $r7 == null goto label3;

        $r20 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r21 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Composite getComposite()>();

        virtualinvoke $r20.<org.apache.batik.ext.awt.g2d.GraphicContext: void setComposite(java.awt.Composite)>($r21);

     label3:
        $r8 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Shape getClip()>();

        if $r8 == null goto label4;

        $r18 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r19 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Shape getClip()>();

        virtualinvoke $r18.<org.apache.batik.ext.awt.g2d.GraphicContext: void setClip(java.awt.Shape)>($r19);

     label4:
        $r9 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.RenderingHints getRenderingHints()>();

        if $r9 == null goto label5;

        $r16 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r17 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.RenderingHints getRenderingHints()>();

        virtualinvoke $r16.<org.apache.batik.ext.awt.g2d.GraphicContext: void setRenderingHints(java.util.Map)>($r17);

     label5:
        $r10 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Font getFont()>();

        if $r10 == null goto label6;

        $r14 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r15 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Font getFont()>();

        virtualinvoke $r14.<org.apache.batik.ext.awt.g2d.GraphicContext: void setFont(java.awt.Font)>($r15);

     label6:
        $r11 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Color getBackground()>();

        if $r11 == null goto label7;

        $r12 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r13 = virtualinvoke $r4.<org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults: java.awt.Color getBackground()>();

        virtualinvoke $r12.<org.apache.batik.ext.awt.g2d.GraphicContext: void setBackground(java.awt.Color)>($r13);

     label7:
        $r26 = new org.apache.batik.svggen.SVGShape;

        specialinvoke $r26.<org.apache.batik.svggen.SVGShape: void <init>(org.apache.batik.svggen.SVGGeneratorContext)>(r1);

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter> = $r26;

        $r27 = new org.apache.batik.svggen.DOMTreeManager;

        $r28 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        specialinvoke $r27.<org.apache.batik.svggen.DOMTreeManager: void <init>(org.apache.batik.ext.awt.g2d.GraphicContext,org.apache.batik.svggen.SVGGeneratorContext,int)>($r28, r1, 3);

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager> = $r27;

        $r29 = new org.apache.batik.svggen.DOMGroupManager;

        $r30 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r31 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        specialinvoke $r29.<org.apache.batik.svggen.DOMGroupManager: void <init>(org.apache.batik.ext.awt.g2d.GraphicContext,org.apache.batik.svggen.DOMTreeManager)>($r30, $r31);

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager> = $r29;

        $r32 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r33 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r32.<org.apache.batik.svggen.DOMTreeManager: void addGroupManager(org.apache.batik.svggen.DOMGroupManager)>($r33);

        $r34 = r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.GenericImageHandler genericImageHandler>;

        $r35 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        interfaceinvoke $r34.<org.apache.batik.svggen.GenericImageHandler: void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager)>($r35);

        return;
    }

    public void <init>(org.apache.batik.svggen.SVGGraphics2D)
    {
        java.awt.image.BufferedImage $r2;
        java.util.Set $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        org.apache.batik.svggen.SVGGeneratorContext $r23;
        java.awt.font.TextAttribute $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        java.util.HashSet $r4;
        org.apache.batik.svggen.DOMGroupManager $r27, $r30;
        java.awt.Graphics2D $r3;
        org.apache.batik.svggen.SVGGraphics2D r0, r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r24, $r29;
        org.apache.batik.svggen.SVGShape $r25;
        org.apache.batik.svggen.DOMTreeManager $r26, $r28, $r31;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.apache.batik.svggen.SVGGraphics2D;

        specialinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void <init>(org.apache.batik.ext.awt.g2d.AbstractGraphics2D)>(r1);

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);

        $r3 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Graphics2D fmg> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes> = $r4;

        $r6 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r5 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BACKGROUND>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r8 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r7 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r9 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute CHAR_REPLACEMENT>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r12 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r11 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute JUSTIFICATION>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r14 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r13 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r13);

        $r16 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r15 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SUPERSCRIPT>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r18 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r17 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SWAP_COLORS>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r17);

        $r20 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r19 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute TRANSFORM>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r19);

        $r22 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r21 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WIDTH>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>($r21);

        $r23 = r1.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx> = $r23;

        $r24 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r24.<org.apache.batik.ext.awt.g2d.GraphicContext: void validateTransformStack()>();

        $r25 = r1.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter>;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter> = $r25;

        $r26 = r1.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager> = $r26;

        $r27 = new org.apache.batik.svggen.DOMGroupManager;

        $r29 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r28 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        specialinvoke $r27.<org.apache.batik.svggen.DOMGroupManager: void <init>(org.apache.batik.ext.awt.g2d.GraphicContext,org.apache.batik.svggen.DOMTreeManager)>($r29, $r28);

        r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager> = $r27;

        $r31 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r30 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r31.<org.apache.batik.svggen.DOMTreeManager: void addGroupManager(org.apache.batik.svggen.DOMGroupManager)>($r30);

        return;
    }

    public void stream(java.lang.String) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        java.lang.String r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void stream(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void stream(java.lang.String, boolean) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.apache.batik.svggen.SVGGraphics2DIOException $r6, $r8;
        java.io.FileOutputStream $r1;
        java.io.IOException $r4;
        org.apache.batik.svggen.SVGGeneratorContext $r5;
        java.io.OutputStreamWriter $r0;
        java.lang.String r2;
        org.apache.batik.svggen.SVGGraphics2D r3;
        boolean z0;
        org.apache.batik.svggen.ErrorHandler $r7;

        r3 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r0 = new java.io.OutputStreamWriter;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, "ISO-8859-1");

        virtualinvoke r3.<org.apache.batik.svggen.SVGGraphics2D: void stream(java.io.Writer,boolean)>($r0, z0);

        virtualinvoke $r0.<java.io.OutputStreamWriter: void flush()>();

        virtualinvoke $r0.<java.io.OutputStreamWriter: void close()>();

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        throw $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = r3.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r7 = $r5.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ErrorHandler errorHandler>;

        $r6 = new org.apache.batik.svggen.SVGGraphics2DIOException;

        specialinvoke $r6.<org.apache.batik.svggen.SVGGraphics2DIOException: void <init>(java.io.IOException)>($r4);

        interfaceinvoke $r7.<org.apache.batik.svggen.ErrorHandler: void handleError(org.apache.batik.svggen.SVGGraphics2DIOException)>($r6);

     label5:
        return;

        catch org.apache.batik.svggen.SVGGraphics2DIOException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public void stream(java.io.Writer) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        java.io.Writer r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: java.io.Writer;

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void stream(java.io.Writer,boolean)>(r1, 0);

        return;
    }

    public void stream(java.io.Writer, boolean, boolean) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.Element $r1;
        java.io.Writer r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean z0, z1;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getRoot()>();

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>($r1, r2, z0, z1);

        return;
    }

    public void stream(java.io.Writer, boolean) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        org.w3c.dom.Element $r1;
        java.io.Writer r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean z0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getRoot()>();

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>($r1, r2, z0, 0);

        return;
    }

    public void stream(org.w3c.dom.Element, java.io.Writer) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        java.io.Writer r2;
        org.w3c.dom.Element r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.io.Writer;

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void stream(org.w3c.dom.Element,java.io.Writer,boolean,boolean)>(r1, r2, 0, 0);

        return;
    }

    public void stream(org.w3c.dom.Element, java.io.Writer, boolean, boolean) throws org.apache.batik.svggen.SVGGraphics2DIOException
    {
        java.lang.Throwable $r6;
        org.w3c.dom.Document $r3;
        org.w3c.dom.Node $r1, $r2;
        org.apache.batik.svggen.SVGGraphics2D r8;
        boolean z0, z1;
        org.apache.batik.svggen.ErrorHandler $r11, $r14;
        org.apache.batik.svggen.SVGGraphics2DIOException $r10, $r12;
        java.io.IOException $r7;
        org.w3c.dom.DocumentFragment $r4;
        org.w3c.dom.Element r0;
        org.apache.batik.svggen.SVGGeneratorContext $r9, $r13;
        java.io.Writer r5;

        r8 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: java.io.Writer;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label01:
        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.DocumentFragment createDocumentFragment()>();

        interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        if z0 == 0 goto label02;

        staticinvoke <org.apache.batik.svggen.SVGCSSStyler: void style(org.w3c.dom.Node)>($r4);

     label02:
        staticinvoke <org.apache.batik.svggen.XmlWriter: void writeXml(org.w3c.dom.Node,java.io.Writer,boolean)>($r4, r5, z1);

        virtualinvoke r5.<java.io.Writer: void flush()>();

     label03:
        goto label12;

     label04:
        goto label11;

     label05:
        $r12 := @caughtexception;

        $r13 = r8.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r14 = $r13.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ErrorHandler errorHandler>;

        interfaceinvoke $r14.<org.apache.batik.svggen.ErrorHandler: void handleError(org.apache.batik.svggen.SVGGraphics2DIOException)>($r12);

        goto label15;

     label06:
        goto label11;

     label07:
        $r7 := @caughtexception;

        $r9 = r8.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r11 = $r9.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ErrorHandler errorHandler>;

        $r10 = new org.apache.batik.svggen.SVGGraphics2DIOException;

        specialinvoke $r10.<org.apache.batik.svggen.SVGGraphics2DIOException: void <init>(java.io.IOException)>($r7);

        interfaceinvoke $r11.<org.apache.batik.svggen.ErrorHandler: void handleError(org.apache.batik.svggen.SVGGraphics2DIOException)>($r10);

        goto label18;

     label08:
        goto label11;

     label09:
        $r6 := @caughtexception;

        goto label21;

     label10:
        throw $r6;

     label11:
        return;

     label12:
        if $r1 == null goto label14;

        if $r2 != null goto label13;

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        goto label14;

     label13:
        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r2);

     label14:
        goto label04;

     label15:
        if $r1 == null goto label17;

        if $r2 != null goto label16;

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        goto label17;

     label16:
        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r2);

     label17:
        goto label06;

     label18:
        if $r1 == null goto label20;

        if $r2 != null goto label19;

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        goto label20;

     label19:
        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r2);

     label20:
        goto label08;

     label21:
        if $r1 == null goto label23;

        if $r2 != null goto label22;

        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        goto label23;

     label22:
        interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r2);

     label23:
        goto label10;

        catch org.apache.batik.svggen.SVGGraphics2DIOException from label01 to label03 with label05;
        catch java.io.IOException from label01 to label03 with label07;
        catch java.lang.Throwable from label01 to label09 with label09;
    }

    public java.util.List getDefinitionSet()
    {
        java.util.List $r2;
        org.apache.batik.svggen.DOMTreeManager $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r2 = virtualinvoke $r1.<org.apache.batik.svggen.DOMTreeManager: java.util.List getDefinitionSet()>();

        return $r2;
    }

    public org.w3c.dom.Element getTopLevelGroup()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getTopLevelGroup(boolean)>(1);

        return $r1;
    }

    public org.w3c.dom.Element getTopLevelGroup(boolean)
    {
        org.w3c.dom.Element $r2;
        org.apache.batik.svggen.DOMTreeManager $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean z0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r2 = virtualinvoke $r1.<org.apache.batik.svggen.DOMTreeManager: org.w3c.dom.Element getTopLevelGroup(boolean)>(z0);

        return $r2;
    }

    public void setTopLevelGroup(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.apache.batik.svggen.DOMTreeManager $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        virtualinvoke $r2.<org.apache.batik.svggen.DOMTreeManager: void setTopLevelGroup(org.w3c.dom.Element)>(r1);

        return;
    }

    public org.w3c.dom.Element getRoot()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getRoot(org.w3c.dom.Element)>(null);

        return $r1;
    }

    public org.w3c.dom.Element getRoot(org.w3c.dom.Element)
    {
        java.awt.Dimension $r3, $r4, $r6;
        org.w3c.dom.Element $r2, r8;
        int $i0, $i1;
        org.apache.batik.svggen.DOMTreeManager $r1;
        java.lang.String $r5, $r7;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r8 := @parameter0: org.w3c.dom.Element;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r2 = virtualinvoke $r1.<org.apache.batik.svggen.DOMTreeManager: org.w3c.dom.Element getRoot(org.w3c.dom.Element)>(r8);

        $r3 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Dimension svgCanvasSize>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Dimension svgCanvasSize>;

        $i0 = $r4.<java.awt.Dimension: int width>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "width", $r5);

        $r6 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Dimension svgCanvasSize>;

        $i1 = $r6.<java.awt.Dimension: int height>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "height", $r7);

     label1:
        return $r2;
    }

    public java.awt.Graphics create()
    {
        org.apache.batik.svggen.SVGGraphics2D $r0, r1;

        r1 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r0 = new org.apache.batik.svggen.SVGGraphics2D;

        specialinvoke $r0.<org.apache.batik.svggen.SVGGraphics2D: void <init>(org.apache.batik.svggen.SVGGraphics2D)>(r1);

        return $r0;
    }

    public void setXORMode(java.awt.Color)
    {
        java.awt.Color r4;
        org.apache.batik.svggen.SVGGeneratorContext $r1;
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;
        org.apache.batik.svggen.ErrorHandler $r3;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r4 := @parameter0: java.awt.Color;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $r3 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.ErrorHandler errorHandler>;

        $r2 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r2.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("XOR Mode is not supported by Graphics2D SVG Generator");

        interfaceinvoke $r3.<org.apache.batik.svggen.ErrorHandler: void handleError(org.apache.batik.svggen.SVGGraphics2DRuntimeException)>($r2);

        return;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        java.awt.FontMetrics $r3;
        java.awt.Graphics2D $r2;
        java.awt.Font r1;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: java.awt.Font;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Graphics2D fmg>;

        $r3 = virtualinvoke $r2.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(r1);

        return $r3;
    }

    public void copyArea(int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        return;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r14;
        java.awt.image.ImageObserver r15;
        org.apache.batik.svggen.DOMGroupManager $r10, $r12;
        int i0, i1, $i2, $i3;
        java.awt.geom.NoninvertibleTransformException $r13;
        org.apache.batik.svggen.SVGGraphics2D r0;
        java.awt.Image r5;
        org.apache.batik.ext.awt.g2d.GraphicContext $r9, $r11;
        java.awt.geom.AffineTransform $r7, $r8;
        org.apache.batik.svggen.GenericImageHandler $r1, $r4;
        org.w3c.dom.Element $r3;
        org.apache.batik.svggen.SVGGeneratorContext $r2, $r6;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r5 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r15 := @parameter3: java.awt.image.ImageObserver;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $r2 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.svggen.GenericImageHandler: org.w3c.dom.Element createElement(org.apache.batik.svggen.SVGGeneratorContext)>($r2);

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $i2 = virtualinvoke r5.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i3 = virtualinvoke r5.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        $r6 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r7 = interfaceinvoke $r4.<org.apache.batik.svggen.GenericImageHandler: java.awt.geom.AffineTransform handleImage(java.awt.Image,org.w3c.dom.Element,int,int,int,int,org.apache.batik.svggen.SVGGeneratorContext)>(r5, $r3, i0, i1, $i2, $i3, $r6);

        if $r7 != null goto label1;

        $r12 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r12.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        goto label5;

     label1:
        $r8 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r14.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("unexpected exception");

        throw $r14;

     label4:
        $r9 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r7);

        $r10 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r10.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r11 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r11.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r8);

     label5:
        return 1;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r14;
        java.awt.image.ImageObserver r15;
        org.apache.batik.svggen.DOMGroupManager $r10, $r12;
        int i0, i1, i2, i3;
        java.awt.geom.NoninvertibleTransformException $r13;
        org.apache.batik.svggen.SVGGraphics2D r0;
        java.awt.Image r5;
        org.apache.batik.ext.awt.g2d.GraphicContext $r9, $r11;
        java.awt.geom.AffineTransform $r7, $r8;
        org.apache.batik.svggen.GenericImageHandler $r1, $r4;
        org.w3c.dom.Element $r3;
        org.apache.batik.svggen.SVGGeneratorContext $r2, $r6;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r5 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r15 := @parameter5: java.awt.image.ImageObserver;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $r2 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.svggen.GenericImageHandler: org.w3c.dom.Element createElement(org.apache.batik.svggen.SVGGeneratorContext)>($r2);

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $r6 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r7 = interfaceinvoke $r4.<org.apache.batik.svggen.GenericImageHandler: java.awt.geom.AffineTransform handleImage(java.awt.Image,org.w3c.dom.Element,int,int,int,int,org.apache.batik.svggen.SVGGeneratorContext)>(r5, $r3, i0, i1, i2, i3, $r6);

        if $r7 != null goto label1;

        $r12 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r12.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        goto label5;

     label1:
        $r8 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r14.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("unexpected exception");

        throw $r14;

     label4:
        $r9 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r7);

        $r10 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r10.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r11 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r11.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r8);

     label5:
        return 1;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public void dispose()
    {
        org.apache.batik.svggen.DOMGroupManager $r1;
        org.apache.batik.svggen.DOMTreeManager $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r2.<org.apache.batik.svggen.DOMTreeManager: void removeGroupManager(org.apache.batik.svggen.DOMGroupManager)>($r1);

        return;
    }

    public void draw(java.awt.Shape)
    {
        java.awt.Stroke $r2;
        java.awt.Shape r3, $r4;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.svggen.DOMGroupManager $r7;
        org.w3c.dom.Element $r6;
        org.apache.batik.svggen.SVGShape $r5;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean $z0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r3 := @parameter0: java.awt.Shape;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke getStroke()>();

        $z0 = $r2 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter>;

        $r6 = virtualinvoke $r5.<org.apache.batik.svggen.SVGShape: org.w3c.dom.Element toSVG(java.awt.Shape)>(r3);

        if $r6 == null goto label1;

        $r7 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r7.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element,short)>($r6, 1);

     label1:
        goto label3;

     label2:
        $r4 = interfaceinvoke $r2.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r3);

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void fill(java.awt.Shape)>($r4);

     label3:
        return;
    }

    public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
    {
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r12;
        java.awt.image.ImageObserver r13;
        byte $b0;
        java.awt.geom.NoninvertibleTransformException $r11;
        org.apache.batik.svggen.SVGGraphics2D r2;
        double $d0;
        boolean z0;
        java.awt.Image r6;
        org.apache.batik.ext.awt.g2d.GraphicContext $r3, $r5, $r7, $r9, $r10;
        java.awt.geom.AffineTransform r0, $r1, $r4, $r8;

        r2 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r6 := @parameter0: java.awt.Image;

        r0 := @parameter1: java.awt.geom.AffineTransform;

        r13 := @parameter2: java.awt.image.ImageObserver;

        if r0 != null goto label1;

        z0 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        goto label7;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label6;

     label2:
        $r8 = virtualinvoke r0.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r12.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("unexpected exception");

        throw $r12;

     label5:
        $r9 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r0);

        z0 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        $r10 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r10.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r8);

        goto label7;

     label6:
        $r1 = new java.awt.geom.AffineTransform;

        $r3 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r4);

        $r5 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r0);

        z0 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        $r7 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r7.<org.apache.batik.ext.awt.g2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>($r1);

     label7:
        return z0;

        catch java.awt.geom.NoninvertibleTransformException from label2 to label3 with label4;
    }

    public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)
    {
        java.awt.image.BufferedImage $r1, r3;
        int i0, i1;
        java.awt.image.BufferedImageOp r0;
        org.apache.batik.svggen.SVGGraphics2D r2;

        r2 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r3 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: java.awt.image.BufferedImageOp;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = interfaceinvoke r0.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r3, null);

        virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, i0, i1, null);

        return;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r22;
        org.apache.batik.svggen.DOMGroupManager $r14, $r18, $r20;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        java.awt.geom.NoninvertibleTransformException $r21;
        org.apache.batik.svggen.SVGGraphics2D r0;
        double $d0;
        java.awt.image.RenderedImage r5;
        org.apache.batik.ext.awt.g2d.GraphicContext $r11, $r13, $r15, $r17, $r19;
        java.awt.geom.AffineTransform $r7, r8, $r9, $r10, $r12, $r16, r23;
        org.apache.batik.svggen.GenericImageHandler $r1, $r4;
        org.w3c.dom.Element $r3;
        org.apache.batik.svggen.SVGGeneratorContext $r2, $r6;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r5 := @parameter0: java.awt.image.RenderedImage;

        r8 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $r2 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.svggen.GenericImageHandler: org.w3c.dom.Element createElement(org.apache.batik.svggen.SVGGeneratorContext)>($r2);

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $i0 = interfaceinvoke r5.<java.awt.image.RenderedImage: int getMinX()>();

        $i1 = interfaceinvoke r5.<java.awt.image.RenderedImage: int getMinY()>();

        $i2 = interfaceinvoke r5.<java.awt.image.RenderedImage: int getWidth()>();

        $i3 = interfaceinvoke r5.<java.awt.image.RenderedImage: int getHeight()>();

        $r6 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r7 = interfaceinvoke $r4.<org.apache.batik.svggen.GenericImageHandler: java.awt.geom.AffineTransform handleImage(java.awt.image.RenderedImage,org.w3c.dom.Element,int,int,int,int,org.apache.batik.svggen.SVGGeneratorContext)>(r5, $r3, $i0, $i1, $i2, $i3, $r6);

        if r8 != null goto label01;

        r23 = $r7;

        goto label03;

     label01:
        if $r7 != null goto label02;

        r23 = r8;

        goto label03;

     label02:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r8);

        r23 = $r9;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label03:
        if r23 != null goto label04;

        $r20 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r20.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        goto label10;

     label04:
        $d0 = virtualinvoke r23.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $b4 = $d0 cmpl 0.0;

        if $b4 == 0 goto label09;

     label05:
        $r16 = virtualinvoke r23.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        $r22 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r22.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("unexpected exception");

        throw $r22;

     label08:
        $r17 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r17.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r23);

        $r18 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r18.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r19 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r19.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r16);

        goto label10;

     label09:
        $r10 = new java.awt.geom.AffineTransform;

        $r11 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r12 = virtualinvoke $r11.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        specialinvoke $r10.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r12);

        $r13 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r13.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r23);

        $r14 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r14.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r15 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r15.<org.apache.batik.ext.awt.g2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>($r10);

     label10:
        return;

        catch java.awt.geom.NoninvertibleTransformException from label05 to label06 with label07;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        org.apache.batik.svggen.SVGGraphics2DRuntimeException $r22;
        byte $b0;
        java.awt.geom.NoninvertibleTransformException $r21;
        java.awt.image.renderable.RenderableImage r5;
        java.awt.geom.AffineTransform $r7, r8, $r9, $r10, $r12, $r16, r23;
        org.apache.batik.svggen.SVGGeneratorContext $r2, $r6;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.svggen.DOMGroupManager $r14, $r18, $r20;
        org.apache.batik.svggen.SVGGraphics2D r0;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.batik.ext.awt.g2d.GraphicContext $r11, $r13, $r15, $r17, $r19;
        org.apache.batik.svggen.GenericImageHandler $r1, $r4;
        org.w3c.dom.Element $r3;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r5 := @parameter0: java.awt.image.renderable.RenderableImage;

        r8 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $r2 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.svggen.GenericImageHandler: org.w3c.dom.Element createElement(org.apache.batik.svggen.SVGGeneratorContext)>($r2);

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.GenericImageHandler getGenericImageHandler()>();

        $f0 = interfaceinvoke r5.<java.awt.image.renderable.RenderableImage: float getMinX()>();

        $d0 = (double) $f0;

        $f1 = interfaceinvoke r5.<java.awt.image.renderable.RenderableImage: float getMinY()>();

        $d1 = (double) $f1;

        $f2 = interfaceinvoke r5.<java.awt.image.renderable.RenderableImage: float getWidth()>();

        $d2 = (double) $f2;

        $f3 = interfaceinvoke r5.<java.awt.image.renderable.RenderableImage: float getHeight()>();

        $d3 = (double) $f3;

        $r6 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r7 = interfaceinvoke $r4.<org.apache.batik.svggen.GenericImageHandler: java.awt.geom.AffineTransform handleImage(java.awt.image.renderable.RenderableImage,org.w3c.dom.Element,double,double,double,double,org.apache.batik.svggen.SVGGeneratorContext)>(r5, $r3, $d0, $d1, $d2, $d3, $r6);

        if r8 != null goto label01;

        r23 = $r7;

        goto label03;

     label01:
        if $r7 != null goto label02;

        r23 = r8;

        goto label03;

     label02:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r8);

        r23 = $r9;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label03:
        if r23 != null goto label04;

        $r20 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r20.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        goto label10;

     label04:
        $d4 = virtualinvoke r23.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $b0 = $d4 cmpl 0.0;

        if $b0 == 0 goto label09;

     label05:
        $r16 = virtualinvoke r23.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        $r22 = new org.apache.batik.svggen.SVGGraphics2DRuntimeException;

        specialinvoke $r22.<org.apache.batik.svggen.SVGGraphics2DRuntimeException: void <init>(java.lang.String)>("unexpected exception");

        throw $r22;

     label08:
        $r17 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r17.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r23);

        $r18 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r18.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r19 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r19.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r16);

        goto label10;

     label09:
        $r10 = new java.awt.geom.AffineTransform;

        $r11 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r12 = virtualinvoke $r11.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        specialinvoke $r10.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r12);

        $r13 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r13.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r23);

        $r14 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r14.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element)>($r3);

        $r15 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r15.<org.apache.batik.ext.awt.g2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>($r10);

     label10:
        return;

        catch java.awt.geom.NoninvertibleTransformException from label05 to label06 with label07;
    }

    public void drawString(java.lang.String, float, float)
    {
        org.w3c.dom.Text $r12;
        org.apache.batik.svggen.SVGFont $r16;
        org.apache.batik.svggen.DOMGroupManager $r13;
        org.w3c.dom.Document $r4, $r10;
        java.lang.String $r7, $r9, r11;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean $z0, $z1;
        double $d0, $d1;
        java.awt.Font $r17, $r18;
        java.awt.font.GlyphVector $r20;
        java.awt.geom.AffineTransform $r2, $r3;
        org.apache.batik.svggen.SVGGraphicContextConverter $r15;
        org.w3c.dom.Element $r5;
        java.awt.font.FontRenderContext $r19;
        org.apache.batik.svggen.SVGGeneratorContext $r1, $r6, $r8;
        float f0, f1;
        org.apache.batik.svggen.DOMTreeManager $r14;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r11 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes>;

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Font getFont()>();

        $r19 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r20 = virtualinvoke $r18.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r19, r11);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>($r20, f0, f1);

        return;

     label1:
        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $z1 = $r1.<org.apache.batik.svggen.SVGGeneratorContext: boolean svgFont>;

        if $z1 == 0 goto label2;

        $r14 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r15 = $r14.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.SVGGraphicContextConverter gcConverter>;

        $r16 = virtualinvoke $r15.<org.apache.batik.svggen.SVGGraphicContextConverter: org.apache.batik.svggen.SVGFont getFontConverter()>();

        $r17 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Font getFont()>();

        virtualinvoke $r16.<org.apache.batik.svggen.SVGFont: void recordFontUsage(java.lang.String,java.awt.Font)>(r11, $r17);

     label2:
        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r3 = specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.geom.AffineTransform transformText(float,float)>(f0, f1);

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Document getDOMFactory()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "text");

        $r6 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $d0 = (double) f0;

        $r7 = virtualinvoke $r6.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d0);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "x", $r7);

        $r8 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $d1 = (double) f1;

        $r9 = virtualinvoke $r8.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d1);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "y", $r9);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");

        $r10 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Document getDOMFactory()>();

        $r12 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r11);

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        $r13 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r13.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element,short)>($r5, 16);

        if $r3 == null goto label3;

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setTransform(java.awt.geom.AffineTransform)>($r2);

     label3:
        return;
    }

    private java.awt.geom.AffineTransform transformText(float, float)
    {
        java.awt.Font $r1;
        java.awt.geom.AffineTransform $r2, $r3, r4;
        float f0, f1, $f2, $f3;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r4 = null;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Font getFont()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<java.awt.Font: java.awt.geom.AffineTransform getTransform()>();

        r4 = $r2;

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r3 = new java.awt.geom.AffineTransform;

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>()>();

        $d1 = (double) f0;

        $d0 = (double) f1;

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d0);

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        $f2 = neg f0;

        $d3 = (double) $f2;

        $f3 = neg f1;

        $d2 = (double) $f3;

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void translate(double,double)>($d3, $d2);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void transform(java.awt.geom.AffineTransform)>($r3);

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        org.w3c.dom.Text $r34;
        org.w3c.dom.Document $r4, $r33, $r39;
        java.util.Map $r17, $r18, $r26, $r30;
        java.awt.geom.AffineTransform $r19, r41;
        org.apache.batik.svggen.SVGGeneratorContext $r6, $r8, $r21, $r32;
        java.awt.font.TextLayout $r44;
        org.apache.batik.svggen.DOMGroupManager $r16;
        java.lang.StringBuffer $r45;
        java.lang.String $r7, $r9, $r20;
        org.apache.batik.ext.awt.g2d.GraphicContext $r14, $r23;
        java.awt.font.FontRenderContext $r3;
        org.apache.batik.svggen.SVGGraphicContext $r15, $r25, $r27;
        org.apache.batik.svggen.SVGFont $r37;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, z7;
        java.awt.Font $r10, $r38;
        org.apache.batik.svggen.SVGGraphicContextConverter $r13, $r24, $r36;
        java.text.AttributedCharacterIterator r2;
        java.awt.Paint $r11;
        float f0, f1;
        org.apache.batik.svggen.StyleHandler $r29;
        int $i0, $i1, $i4, $i5, $i6, $i7, i8, $i9, $i11;
        org.apache.batik.svggen.SVGGraphics2D r0;
        double $d0, $d1;
        char $c2, c3;
        org.w3c.dom.Element $r5, $r40, r42;
        org.apache.batik.svggen.DOMTreeManager $r12, $r22, $r28, $r31, $r35;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.text.AttributedCharacterIterator;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator)>(r2);

        if $z1 == 0 goto label02;

     label01:
        $r44 = new java.awt.font.TextLayout;

        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        specialinvoke $r44.<java.awt.font.TextLayout: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)>(r2, $r3);

        virtualinvoke $r44.<java.awt.font.TextLayout: void draw(java.awt.Graphics2D,float,float)>(r0, f0, f1);

        return;

     label02:
        z4 = 0;

        $i0 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: int getRunLimit()>();

        $i1 = interfaceinvoke r2.<java.text.CharacterIterator: int getEndIndex()>();

        if $i0 >= $i1 goto label03;

        z4 = 1;

     label03:
        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Document getDOMFactory()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "text");

        $r6 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $d0 = (double) f0;

        $r7 = virtualinvoke $r6.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d0);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "x", $r7);

        $r8 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $d1 = (double) f1;

        $r9 = virtualinvoke $r8.<org.apache.batik.svggen.SVGGeneratorContext: java.lang.String doubleString(double)>($d1);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "y", $r9);

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");

        $r10 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Font getFont()>();

        $r11 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Paint getPaint()>();

        c3 = interfaceinvoke r2.<java.text.CharacterIterator: char first()>();

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void setTextElementFill(java.text.AttributedCharacterIterator)>(r2);

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: boolean setTextFontAttributes(java.text.AttributedCharacterIterator,java.awt.Font)>(r2, $r10);

        $r12 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r13 = virtualinvoke $r12.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.SVGGraphicContextConverter getGraphicContextConverter()>();

        $r14 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r15 = virtualinvoke $r13.<org.apache.batik.svggen.SVGGraphicContextConverter: org.apache.batik.svggen.SVGGraphicContext toSVG(org.apache.batik.ext.awt.g2d.GraphicContext)>($r14);

        $r16 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r16.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element,short)>($r5, 16);

        $r17 = virtualinvoke $r15.<org.apache.batik.svggen.SVGGraphicContext: java.util.Map getContext()>();

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stroke", "none");

        $r18 = virtualinvoke $r15.<org.apache.batik.svggen.SVGGraphicContext: java.util.Map getGroupContext()>();

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stroke", "none");

        z5 = 1;

        z7 = 1;

        z6 = 1;

        $r19 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        r41 = null;

        goto label13;

     label04:
        r42 = $r5;

        if z4 == 0 goto label05;

        $r39 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Document getDOMFactory()>();

        $r40 = interfaceinvoke $r39.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "tspan");

        r42 = $r40;

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r40);

     label05:
        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void setTextElementFill(java.text.AttributedCharacterIterator)>(r2);

        $z2 = specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: boolean setTextFontAttributes(java.text.AttributedCharacterIterator,java.awt.Font)>(r2, $r10);

        if $z2 != 0 goto label06;

        if z6 == 0 goto label07;

     label06:
        r41 = specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.geom.AffineTransform transformText(float,float)>(f0, f1);

        z5 = 0;

        z7 = 0;

        z6 = 0;

     label07:
        $i4 = interfaceinvoke r2.<java.text.CharacterIterator: int getIndex()>();

        $i5 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: int getRunLimit()>();

        $i6 = $i5 - 1;

        $r45 = new java.lang.StringBuffer;

        $i7 = $i6 - $i4;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>(int)>($i7);

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

        i8 = $i4;

        goto label09;

     label08:
        $c2 = interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        i8 = i8 + 1;

     label09:
        if i8 < $i6 goto label08;

        $r20 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext generatorCtx>;

        $z3 = virtualinvoke $r21.<org.apache.batik.svggen.SVGGeneratorContext: boolean isEmbeddedFontsOn()>();

        if $z3 == 0 goto label10;

        $r35 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager getDOMTreeManager()>();

        $r36 = virtualinvoke $r35.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.SVGGraphicContextConverter getGraphicContextConverter()>();

        $r37 = virtualinvoke $r36.<org.apache.batik.svggen.SVGGraphicContextConverter: org.apache.batik.svggen.SVGFont getFontConverter()>();

        $r38 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Font getFont()>();

        virtualinvoke $r37.<org.apache.batik.svggen.SVGFont: void recordFontUsage(java.lang.String,java.awt.Font)>($r20, $r38);

     label10:
        $r22 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r24 = $r22.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.SVGGraphicContextConverter gcConverter>;

        $r23 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r25 = virtualinvoke $r24.<org.apache.batik.svggen.SVGGraphicContextConverter: org.apache.batik.svggen.SVGGraphicContext toSVG(org.apache.batik.ext.awt.g2d.GraphicContext)>($r23);

        $r26 = virtualinvoke $r25.<org.apache.batik.svggen.SVGGraphicContext: java.util.Map getGroupContext()>();

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("stroke", "none");

        $r27 = staticinvoke <org.apache.batik.svggen.DOMGroupManager: org.apache.batik.svggen.SVGGraphicContext processDeltaGC(org.apache.batik.svggen.SVGGraphicContext,org.apache.batik.svggen.SVGGraphicContext)>($r25, $r15);

        specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext,java.text.AttributedCharacterIterator)>($r27, r2);

        $r28 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r29 = virtualinvoke $r28.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.StyleHandler getStyleHandler()>();

        $r30 = virtualinvoke $r27.<org.apache.batik.svggen.SVGGraphicContext: java.util.Map getContext()>();

        $r31 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMTreeManager domTreeManager>;

        $r32 = virtualinvoke $r31.<org.apache.batik.svggen.DOMTreeManager: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        interfaceinvoke $r29.<org.apache.batik.svggen.StyleHandler: void setStyle(org.w3c.dom.Element,java.util.Map,org.apache.batik.svggen.SVGGeneratorContext)>(r42, $r30, $r32);

        $r33 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Document getDOMFactory()>();

        $r34 = interfaceinvoke $r33.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r20);

        interfaceinvoke r42.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r34);

        if $z2 != 0 goto label11;

        if z7 == 0 goto label12;

     label11:
        if r41 == null goto label12;

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setTransform(java.awt.geom.AffineTransform)>($r19);

     label12:
        c3 = interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

     label13:
        $i9 = (int) c3;

        $i11 = (int) 65535;

        if $i9 != $i11 goto label04;

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setFont(java.awt.Font)>($r10);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setPaint(java.awt.Paint)>($r11);

        return;
    }

    public void fill(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.svggen.DOMGroupManager $r4;
        org.w3c.dom.Element $r3;
        org.apache.batik.svggen.SVGShape $r2;
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r1 := @parameter0: java.awt.Shape;

        $r2 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGShape shapeConverter>;

        $r3 = virtualinvoke $r2.<org.apache.batik.svggen.SVGShape: org.w3c.dom.Element toSVG(java.awt.Shape)>(r1);

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.DOMGroupManager domGroupManager>;

        virtualinvoke $r4.<org.apache.batik.svggen.DOMGroupManager: void addElement(org.w3c.dom.Element,short)>($r3, 16);

     label1:
        return;
    }

    private boolean setTextFontAttributes(java.text.AttributedCharacterIterator, java.awt.Font)
    {
        java.awt.font.TextAttribute $r1, $r5, $r7, $r9, $r11;
        java.util.Map $r13;
        org.apache.batik.svggen.SVGGraphics2D r4;
        boolean z0;
        java.awt.Font r3, $r14;
        java.text.AttributedCharacterIterator r0;
        java.lang.Object $r2, $r6, $r8, $r10, $r12;

        r4 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        r3 := @parameter1: java.awt.Font;

        z0 = 0;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FONT>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        if $r2 != null goto label1;

        $r5 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;

        $r6 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r5);

        if $r6 != null goto label1;

        $r7 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r8 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r7);

        if $r8 != null goto label1;

        $r9 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r10 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r9);

        if $r10 != null goto label1;

        $r11 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r12 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r11);

        if $r12 == null goto label2;

     label1:
        $r13 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();

        $r14 = virtualinvoke r3.<java.awt.Font: java.awt.Font deriveFont(java.util.Map)>($r13);

        virtualinvoke r4.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setFont(java.awt.Font)>($r14);

        z0 = 1;

     label2:
        return z0;
    }

    private void setTextElementFill(java.text.AttributedCharacterIterator)
    {
        java.awt.Color r5;
        java.text.AttributedCharacterIterator r0;
        java.awt.font.TextAttribute $r1, $r3;
        java.lang.Object $r2, $r4;
        org.apache.batik.svggen.SVGGraphics2D r6;

        r6 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        if $r2 == null goto label1;

        $r3 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;

        $r4 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r3);

        r5 = (java.awt.Color) $r4;

        virtualinvoke r6.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setPaint(java.awt.Paint)>(r5);

     label1:
        return;
    }

    private void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext, java.text.AttributedCharacterIterator)
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Map $r3;
        int $i0, $i1;
        java.lang.String $r4, r11;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean $z0, $z1;
        java.text.AttributedCharacterIterator r1;
        org.apache.batik.svggen.SVGGraphicContext r2;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: org.apache.batik.svggen.SVGGraphicContext;

        r1 := @parameter1: java.text.AttributedCharacterIterator;

        r11 = "";

        $z0 = specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: boolean isUnderline(java.text.AttributedCharacterIterator)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("underline ");

        r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $z1 = specialinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: boolean isStrikeThrough(java.text.AttributedCharacterIterator)>(r1);

        if $z1 == 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("line-through ");

        r11 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r3 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphicContext: java.util.Map getContext()>();

        $i1 = $i0 - 1;

        $r4 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("text-decoration", $r4);

     label3:
        return;
    }

    private boolean isBold(java.text.AttributedCharacterIterator)
    {
        java.lang.Float $r3, $r4, $r5, $r6;
        java.awt.font.TextAttribute $r1;
        java.text.AttributedCharacterIterator r0;
        java.lang.Object $r2;
        org.apache.batik.svggen.SVGGraphics2D r7;
        boolean $z0, $z1, $z2, $z3;

        r7 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r4 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMILIGHT>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r5 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRA_LIGHT>;

        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $r6 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_LIGHT>;

        $z3 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean isItalic(java.text.AttributedCharacterIterator)
    {
        java.lang.Float $r3;
        java.text.AttributedCharacterIterator r0;
        java.awt.font.TextAttribute $r1;
        java.lang.Object $r2;
        org.apache.batik.svggen.SVGGraphics2D r4;
        boolean $z0;

        r4 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        $r3 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        $z0 = virtualinvoke $r3.<java.lang.Float: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isUnderline(java.text.AttributedCharacterIterator)
    {
        java.text.AttributedCharacterIterator r0;
        java.awt.font.TextAttribute $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        org.apache.batik.svggen.SVGGraphics2D r4;
        boolean $z0;

        r4 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute UNDERLINE>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        $r3 = <java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_ON>;

        $z0 = virtualinvoke $r3.<java.lang.Integer: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isStrikeThrough(java.text.AttributedCharacterIterator)
    {
        java.text.AttributedCharacterIterator r0;
        java.awt.font.TextAttribute $r1;
        java.lang.Boolean $r3;
        java.lang.Object $r2;
        org.apache.batik.svggen.SVGGraphics2D r4;
        boolean $z0;

        r4 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute STRIKETHROUGH>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        $r3 = <java.awt.font.TextAttribute: java.lang.Boolean STRIKETHROUGH_ON>;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.awt.GraphicsConfiguration getDeviceConfiguration()
    {
        org.apache.batik.svggen.SVGGraphics2D r0;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        return null;
    }

    public void setUnsupportedAttributes(java.util.Set)
    {
        java.util.HashSet $r2;
        java.util.Set r0;
        org.apache.batik.svggen.SVGGraphics2D r1;

        r1 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r0 := @parameter0: java.util.Set;

        if r0 != null goto label1;

        r1.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes> = null;

        goto label2;

     label1:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>(r0);

        r1.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes> = $r2;

     label2:
        return;
    }

    public boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator)
    {
        java.util.Iterator $r4;
        java.util.Set $r1, $r3, $r5;
        java.text.AttributedCharacterIterator r2;
        java.lang.Object $r6;
        org.apache.batik.svggen.SVGGraphics2D r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.svggen.SVGGraphics2D;

        r2 := @parameter0: java.text.AttributedCharacterIterator;

        $r1 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = r0.<org.apache.batik.svggen.SVGGraphics2D: java.util.Set unsupportedAttributes>;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.batik.svggen.SVGGraphics2D: int DEFAULT_MAX_GC_OVERRIDES> = 3;

        <org.apache.batik.svggen.SVGGraphics2D: java.lang.String DEFAULT_XML_ENCODING> = "ISO-8859-1";

        return;
    }
}
