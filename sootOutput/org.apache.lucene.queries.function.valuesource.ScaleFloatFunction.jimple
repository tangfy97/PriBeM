public class org.apache.lucene.queries.function.valuesource.ScaleFloatFunction extends org.apache.lucene.queries.function.ValueSource
{
    protected final org.apache.lucene.queries.function.ValueSource source;
    protected final float min;
    protected final float max;

    public void <init>(org.apache.lucene.queries.function.ValueSource, float, float)
    {
        org.apache.lucene.queries.function.ValueSource r1;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r0;
        float f0, f1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        r1 := @parameter0: org.apache.lucene.queries.function.ValueSource;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source> = r1;

        r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min> = f0;

        r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max> = f1;

        return;
    }

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r2;
        float $f0, $f1;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r4, $r11;

        r2 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scale(");

        $r3 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: java.lang.String description()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $f0 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $f1 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo createScaleInfo(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo $r13;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r6;
        byte $b0, $b4, $b5;
        java.util.Map r5;
        int $i1, $i2, $i3, i6, $i7, $i8;
        org.apache.lucene.queries.function.FunctionValues $r12;
        boolean $z0;
        java.util.Iterator $r3;
        org.apache.lucene.queries.function.ValueSource $r7, $r11;
        java.util.List $r2;
        float $f0, f1, f2;
        java.lang.Object $r8;
        org.apache.lucene.index.AtomicReaderContext r0, r9;
        org.apache.lucene.index.AtomicReader $r10;
        org.apache.lucene.index.IndexReaderContext $r1;

        r6 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        r5 := @parameter0: java.util.Map;

        r0 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r1 = staticinvoke <org.apache.lucene.index.ReaderUtil: org.apache.lucene.index.IndexReaderContext getTopLevelContext(org.apache.lucene.index.IndexReaderContext)>(r0);

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.IndexReaderContext: java.util.List leaves()>();

        f1 = #InfinityF;

        f2 = #-InfinityF;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.index.AtomicReaderContext) $r8;

        $r10 = virtualinvoke r9.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $i1 = virtualinvoke $r10.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        $r11 = r6.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r5, r9);

        i6 = 0;

     label2:
        if i6 >= $i1 goto label6;

        $f0 = virtualinvoke $r12.<org.apache.lucene.queries.function.FunctionValues: float floatVal(int)>(i6);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i3 = $i2 & 2139095040;

        if $i3 != 2139095040 goto label3;

        goto label5;

     label3:
        $b4 = $f0 cmpg f1;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label4;

        f1 = $f0;

     label4:
        $b5 = $f0 cmpl f2;

        $i8 = (int) $b5;

        if $i8 <= 0 goto label5;

        f2 = $f0;

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        goto label1;

     label7:
        $b0 = f1 cmpl #InfinityF;

        if $b0 != 0 goto label8;

        f2 = 0.0F;

        f1 = 0.0F;

     label8:
        $r13 = new org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo;

        specialinvoke $r13.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: void <init>(org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$1)>(null);

        $r13.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float minVal> = f1;

        $r13.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float maxVal> = f2;

        $r7 = r6.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

        return $r13;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo r8;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$1 $r7;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r1;
        byte $b0;
        java.util.Map r0;
        org.apache.lucene.queries.function.FunctionValues $r6;
        org.apache.lucene.queries.function.ValueSource $r2, $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        java.lang.Object $r3;
        org.apache.lucene.index.AtomicReaderContext r4;

        r1 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        r0 := @parameter0: java.util.Map;

        r4 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r2 = r1.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r8 = (org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo) $r3;

        if r8 != null goto label1;

        r8 = specialinvoke r1.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo createScaleInfo(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r0, r4);

     label1:
        $f1 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float maxVal>;

        $f0 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float minVal>;

        $f2 = $f1 - $f0;

        $b0 = $f2 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $f11 = 0.0F;

        goto label3;

     label2:
        $f4 = r1.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max>;

        $f3 = r1.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min>;

        $f8 = $f4 - $f3;

        $f6 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float maxVal>;

        $f5 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float minVal>;

        $f7 = $f6 - $f5;

        $f11 = $f8 / $f7;

     label3:
        $f9 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float minVal>;

        $f10 = r8.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$ScaleInfo: float maxVal>;

        $r5 = r1.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r0, r4);

        $r7 = new org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$1;

        specialinvoke $r7.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction$1: void <init>(org.apache.lucene.queries.function.valuesource.ScaleFloatFunction,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.queries.function.FunctionValues,float,float,float)>(r1, r1, $r6, $f9, $f11, $f10);

        return $r7;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r0;
        java.util.Map r1;
        org.apache.lucene.search.IndexSearcher r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r1, r2);

        return;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.ValueSource $r1;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r0;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        $f0 = r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        i3 = $i0 * 29;

        $f1 = r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        i4 = i3 + $i1;

        i5 = i4 * 29;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $i2 = virtualinvoke $r1.<org.apache.lucene.queries.function.ValueSource: int hashCode()>();

        i6 = i5 + $i2;

        return i6;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queries.function.ValueSource $r4, $r5;
        org.apache.lucene.queries.function.valuesource.ScaleFloatFunction r2, r3;
        byte $b0, $b1;
        float $f0, $f1, $f2, $f3;
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.queries.function.valuesource.ScaleFloatFunction;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if class "Lorg/apache/lucene/queries/function/valuesource/ScaleFloatFunction;" == $r1 goto label1;

        return 0;

     label1:
        r2 = (org.apache.lucene.queries.function.valuesource.ScaleFloatFunction) r0;

        $f1 = r3.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min>;

        $f0 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float min>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label2;

        $f3 = r3.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max>;

        $f2 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: float max>;

        $b1 = $f3 cmpl $f2;

        if $b1 != 0 goto label2;

        $r5 = r3.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = r2.<org.apache.lucene.queries.function.valuesource.ScaleFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.queries.function.ValueSource: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
