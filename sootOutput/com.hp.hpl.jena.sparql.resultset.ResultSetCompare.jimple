public class com.hp.hpl.jena.sparql.resultset.ResultSetCompare extends java.lang.Object
{
    private static org.apache.jena.atlas.iterator.Transform qs2b;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.ResultSetCompare;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean equalsByValue(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso $r6;
        com.hp.hpl.jena.query.ResultSetRewindable $r2, $r3;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r7;
        com.hp.hpl.jena.query.ResultSet r0, r1;
        java.util.List $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean compareHeader(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable makeRewindable(com.hp.hpl.jena.query.ResultSet)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable makeRewindable(com.hp.hpl.jena.query.ResultSet)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>($r2);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>($r3);

        $r6 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        $r7 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameValue>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r7);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equivalent(java.util.Collection,java.util.Collection,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r4, $r5, $r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.query.ResultSetRewindable: void reset()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.query.ResultSetRewindable: void reset()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean isomorphic(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        return $z2;
    }

    public static boolean equalsByTest(java.util.Collection, java.util.Collection, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        java.util.Collection r1, r3;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r4;
        java.util.ArrayList $r0, $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        r4 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equivalent(java.util.Collection,java.util.Collection,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r0, $r2, r4);

        return $z0;
    }

    public static boolean equalsByTerm(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso $r6;
        com.hp.hpl.jena.query.ResultSetRewindable $r2, $r3;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r7;
        com.hp.hpl.jena.query.ResultSet r0, r1;
        java.util.List $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean compareHeader(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable makeRewindable(com.hp.hpl.jena.query.ResultSet)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSetRewindable makeRewindable(com.hp.hpl.jena.query.ResultSet)>(r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>($r2);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>($r3);

        $r6 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        $r7 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r7);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equivalent(java.util.Collection,java.util.Collection,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r4, $r5, $r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.query.ResultSetRewindable: void reset()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.query.ResultSetRewindable: void reset()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean isomorphic(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        return $z2;
    }

    public static boolean equalsByValueAndOrder(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso $r4;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r5;
        com.hp.hpl.jena.query.ResultSet r0, r1;
        java.util.List $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean compareHeader(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>(r1);

        $r4 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        $r5 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameValue>;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r5);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equivalentByOrder(java.util.List,java.util.List,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r2, $r3, $r4);

        return $z1;
    }

    public static boolean equalsByTermAndOrder(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso $r4;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r5;
        com.hp.hpl.jena.query.ResultSet r0, r1;
        java.util.List $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean compareHeader(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.query.ResultSet)>(r0, r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: java.util.List convert(com.hp.hpl.jena.query.ResultSet)>(r1);

        $r4 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        $r5 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r5);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equivalentByOrder(java.util.List,java.util.List,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r2, $r3, $r4);

        return $z1;
    }

    public static boolean isomorphic(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        com.hp.hpl.jena.rdf.model.Model $r1, $r3;
        com.hp.hpl.jena.query.ResultSet r0, r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r2 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)>(r2);

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: boolean isIsomorphicWith(com.hp.hpl.jena.rdf.model.Model)>($r3);

        return $z0;
    }

    public static boolean equal(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: int size()>();

        $i1 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean containedIn(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>(r0, r1, r2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private static boolean compareHeader(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.query.ResultSet)
    {
        java.util.HashSet $r2, $r4;
        java.util.List $r3, $r5;
        com.hp.hpl.jena.query.ResultSet r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r1 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        $r2 = new java.util.HashSet;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.query.ResultSet: java.util.List getResultVars()>();

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r4 = new java.util.HashSet;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.query.ResultSet: java.util.List getResultVars()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private static java.util.List convert(com.hp.hpl.jena.query.ResultSet)
    {
        org.apache.jena.atlas.iterator.Transform $r2;
        java.util.List $r4;
        org.apache.jena.atlas.iterator.Iter $r1, $r3;
        com.hp.hpl.jena.query.ResultSet r0;

        r0 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        $r1 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Iterator)>(r0);

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: org.apache.jena.atlas.iterator.Transform qs2b>;

        $r3 = virtualinvoke $r1.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter map(org.apache.jena.atlas.iterator.Transform)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.jena.atlas.iterator.Iter: java.util.List toList()>();

        return $r4;
    }

    private static boolean equivalent(java.util.Collection, java.util.Collection, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        java.util.Iterator $r2, $r5;
        java.util.Collection r0, r1;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r8;
        com.hp.hpl.jena.sparql.engine.binding.Binding r4, r7, r9;
        int $i0, $i1;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        r8 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r3;

        r9 = null;

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r6;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equal(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>(r4, r7, r8);

        if $z2 == 0 goto label4;

        r9 = r7;

        goto label5;

     label4:
        goto label3;

     label5:
        if r9 != null goto label6;

        return 0;

     label6:
        interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>(r9);

        goto label2;

     label7:
        return 1;
    }

    private static boolean equivalentByOrder(java.util.List, java.util.List, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        java.util.Iterator $r2, $r3;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r8;
        java.util.List r0, r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5, r7;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r8 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r4;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r6;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equal(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>(r5, r7, r8);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    private static boolean containedIn(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        java.util.Iterator $r1, $r3;
        com.hp.hpl.jena.graph.Node $r6, $r8;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r9;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, r7;
        java.lang.Object $r4;
        org.apache.jena.atlas.iterator.Iter $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r7 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r9 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

        $r2 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Iterator)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.jena.atlas.iterator.Iter: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r5);

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r5);

        if $r8 != null goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r9.<com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest: boolean equal(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r8);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$1 $r0;

        $r0 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$1: void <init>()>();

        <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: org.apache.jena.atlas.iterator.Transform qs2b> = $r0;

        return;
    }
}
