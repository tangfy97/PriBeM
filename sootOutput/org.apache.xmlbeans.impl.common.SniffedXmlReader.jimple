public class org.apache.xmlbeans.impl.common.SniffedXmlReader extends java.io.BufferedReader
{
    public static int MAX_SNIFFED_CHARS;
    private static java.nio.charset.Charset dummy1;
    private static java.nio.charset.Charset dummy2;
    private static java.nio.charset.Charset dummy3;
    private static java.nio.charset.Charset dummy4;
    private static java.nio.charset.Charset dummy5;
    private static java.nio.charset.Charset dummy6;
    private static java.nio.charset.Charset dummy7;
    private java.lang.String _encoding;

    public void <init>(java.io.Reader) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.common.SniffedXmlReader r0;
        java.io.Reader r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlReader;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: java.lang.String sniffForXmlDecl()>();

        r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: java.lang.String _encoding> = $r2;

        return;
    }

    private int readAsMuchAsPossible(char[], int, int) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.common.SniffedXmlReader r0;
        int i0, i1, $i2, $i3, $i4, i5;
        char[] r1;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlReader;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        $i3 = i1 + i5;

        $i2 = i0 - i5;

        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: int read(char[],int,int)>(r1, $i3, $i2);

        if $i4 >= 0 goto label2;

        goto label3;

     label2:
        i5 = i5 + $i4;

        goto label1;

     label3:
        return i5;
    }

    private java.lang.String sniffForXmlDecl() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.common.SniffedXmlReader r0;
        int $i0, $i1, $i2, $i3;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlReader;

        $i0 = <org.apache.xmlbeans.impl.common.SniffedXmlReader: int MAX_SNIFFED_CHARS>;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: void mark(int)>($i0);

     label1:
        $i1 = <org.apache.xmlbeans.impl.common.SniffedXmlReader: int MAX_SNIFFED_CHARS>;

        r1 = newarray (char)[$i1];

        $i2 = <org.apache.xmlbeans.impl.common.SniffedXmlReader: int MAX_SNIFFED_CHARS>;

        $i3 = specialinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: int readAsMuchAsPossible(char[],int,int)>(r1, 0, $i2);

        $r2 = staticinvoke <org.apache.xmlbeans.impl.common.SniffedXmlInputStream: java.lang.String extractXmlDeclEncoding(char[],int,int)>(r1, 0, $i3);

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: void reset()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: void reset()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String getXmlEncoding()
    {
        org.apache.xmlbeans.impl.common.SniffedXmlReader r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.common.SniffedXmlReader;

        $r1 = r0.<org.apache.xmlbeans.impl.common.SniffedXmlReader: java.lang.String _encoding>;

        return $r1;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: int MAX_SNIFFED_CHARS> = 192;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy1> = $r0;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy2> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16BE");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy3> = $r2;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16LE");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy4> = $r3;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy5> = $r4;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy6> = $r5;

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("Cp1252");

        <org.apache.xmlbeans.impl.common.SniffedXmlReader: java.nio.charset.Charset dummy7> = $r6;

        return;
    }
}
