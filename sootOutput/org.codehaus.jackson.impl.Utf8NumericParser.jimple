public abstract class org.codehaus.jackson.impl.Utf8NumericParser extends org.codehaus.jackson.impl.StreamBasedParserBase
{

    public void <init>(org.codehaus.jackson.io.IOContext, int, java.io.InputStream, byte[], int, int, boolean)
    {
        org.codehaus.jackson.io.IOContext r1;
        byte[] r3;
        org.codehaus.jackson.impl.Utf8NumericParser r0;
        int i0, i1, i2;
        java.io.InputStream r2;
        boolean z0;

        r0 := @this: org.codehaus.jackson.impl.Utf8NumericParser;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.InputStream;

        r3 := @parameter3: byte[];

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.codehaus.jackson.impl.StreamBasedParserBase: void <init>(org.codehaus.jackson.io.IOContext,int,java.io.InputStream,byte[],int,int,boolean)>(r1, i0, r2, r3, i1, i2, z0);

        return;
    }

    protected final org.codehaus.jackson.JsonToken parseNumberText(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r3, $r4, $r7, $r11, $r19, $r21;
        byte $b7, $b15, $b25, $b33, $b44, $b51;
        java.lang.StringBuilder $r14, $r16, $r17, $r23;
        short $s26, $s37, s58, $s62, $s66, $s69, $s72;
        java.lang.String $r15, $r18;
        char[] $r2, r22;
        org.codehaus.jackson.JsonToken $r6;
        org.codehaus.jackson.util.TextBuffer $r1, $r5, $r8, $r9, $r10, $r12, $r20;
        boolean z0, $z1, $z2, $z3, z5, $z6, $z7;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i27, $i29, $i30, $i31, $i32, $i34, $i35, $i38, $i40, $i41, $i42, $i43, $i45, $i47, $i48, $i49, $i50, i52, i53, i54, $i55, i56, i57, $i59, $i60, $i61, $i63, $i64, $i65, $i67, $i68, $i70, $i71, $i73;
        char $c2, $c10, $c20, $c28, $c36, $c39, $c46;
        org.codehaus.jackson.impl.Utf8NumericParser r0;

        r0 := @this: org.codehaus.jackson.impl.Utf8NumericParser;

        i52 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        r22 = $r2;

        i53 = 0;

        if i52 != 45 goto label01;

        $z7 = 1;

        $z6 = 1;

        goto label02;

     label01:
        $z7 = 0;

        $z6 = 0;

     label02:
        z0 = $z7;

        if $z6 == 0 goto label04;

        i53 = 1;

        $r2[0] = 45;

        $i48 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i47 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i48 < $i47 goto label03;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void loadMoreGuaranteed()>();

     label03:
        $r21 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i49 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i50 = $i49 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i50;

        $b51 = $r21[$i49];

        $i59 = (int) $b51;

        i52 = $i59 & 255;

     label04:
        i54 = 0;

        z5 = 0;

     label05:
        if i52 < 48 goto label10;

        if i52 <= 57 goto label06;

        goto label10;

     label06:
        i54 = i54 + 1;

        if i54 != 2 goto label07;

        $i45 = i53 - 1;

        $c46 = r22[$i45];

        $i60 = (int) $c46;

        if $i60 != 48 goto label07;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");

     label07:
        $i55 = lengthof r22;

        if i53 < $i55 goto label08;

        $r20 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r22 = virtualinvoke $r20.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i53 = 0;

     label08:
        $i38 = i53;

        i53 = i53 + 1;

        $c39 = (char) i52;

        r22[$i38] = $c39;

        $i41 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i40 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i41 < $i40 goto label09;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: boolean loadMore()>();

        if $z3 != 0 goto label09;

        i52 = 0;

        z5 = 1;

        goto label10;

     label09:
        $r19 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i42 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i43 = $i42 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i43;

        $b44 = $r19[$i42];

        $i61 = (int) $b44;

        i52 = $i61 & 255;

        goto label05;

     label10:
        if i54 != 0 goto label11;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing integer part (next char ");

        $r15 = staticinvoke <org.codehaus.jackson.impl.Utf8NumericParser: java.lang.String _getCharDesc(int)>(i52);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void reportInvalidNumber(java.lang.String)>($r18);

     label11:
        i56 = 0;

        if i52 != 46 goto label17;

        $i27 = i53;

        i53 = i53 + 1;

        $c28 = (char) i52;

        r22[$i27] = $c28;

     label12:
        $i30 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i29 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i30 < $i29 goto label13;

        $z2 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: boolean loadMore()>();

        if $z2 != 0 goto label13;

        z5 = 1;

        goto label16;

     label13:
        $r11 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i31 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i32 = $i31 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i32;

        $b33 = $r11[$i31];

        $s62 = (short) $b33;

        $s37 = $s62 & 255;

        $i63 = (int) $s37;

        i52 = $i63;

        $i64 = (int) $s37;

        if $i64 < 48 goto label16;

        $i65 = (int) $s37;

        if $i65 <= 57 goto label14;

        goto label16;

     label14:
        i56 = i56 + 1;

        $i34 = lengthof r22;

        if i53 < $i34 goto label15;

        $r12 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r22 = virtualinvoke $r12.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i53 = 0;

     label15:
        $i35 = i53;

        i53 = i53 + 1;

        $c36 = (char) $s37;

        r22[$i35] = $c36;

        goto label12;

     label16:
        if i56 != 0 goto label17;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>(i52, "Decimal point not followed by a digit");

     label17:
        i57 = 0;

        if i52 == 101 goto label18;

        if i52 != 69 goto label28;

     label18:
        $i0 = lengthof r22;

        if i53 < $i0 goto label19;

        $r10 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r22 = virtualinvoke $r10.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i53 = 0;

     label19:
        $i1 = i53;

        i53 = i53 + 1;

        $c2 = (char) i52;

        r22[$i1] = $c2;

        $i4 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i3 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i4 < $i3 goto label20;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void loadMoreGuaranteed()>();

     label20:
        $r3 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i5 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i6;

        $b7 = $r3[$i5];

        $s66 = (short) $b7;

        $s26 = $s66 & 255;

        s58 = $s26;

        $i67 = (int) $s26;

        if $i67 == 45 goto label21;

        $i68 = (int) $s26;

        if $i68 != 43 goto label24;

     label21:
        $i8 = lengthof r22;

        if i53 < $i8 goto label22;

        $r9 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r22 = virtualinvoke $r9.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i53 = 0;

     label22:
        $i9 = i53;

        i53 = i53 + 1;

        $c10 = (char) $s26;

        r22[$i9] = $c10;

        $i12 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i11 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i12 < $i11 goto label23;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void loadMoreGuaranteed()>();

     label23:
        $r4 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i13 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i14 = $i13 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i14;

        $b15 = $r4[$i13];

        $s69 = (short) $b15;

        s58 = $s69 & 255;

     label24:
        $i70 = (int) s58;

        if $i70 > 57 goto label27;

        $i71 = (int) s58;

        if $i71 < 48 goto label27;

        i57 = i57 + 1;

        $i18 = lengthof r22;

        if i53 < $i18 goto label25;

        $r8 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        r22 = virtualinvoke $r8.<org.codehaus.jackson.util.TextBuffer: char[] finishCurrentSegment()>();

        i53 = 0;

     label25:
        $i19 = i53;

        i53 = i53 + 1;

        $c20 = (char) s58;

        r22[$i19] = $c20;

        $i22 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i21 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputEnd>;

        if $i22 < $i21 goto label26;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: boolean loadMore()>();

        if $z1 != 0 goto label26;

        z5 = 1;

        goto label27;

     label26:
        $r7 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: byte[] _inputBuffer>;

        $i23 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i24 = $i23 + 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i24;

        $b25 = $r7[$i23];

        $s72 = (short) $b25;

        s58 = $s72 & 255;

        goto label24;

     label27:
        if i57 != 0 goto label28;

        $i73 = (int) s58;

        virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: void reportUnexpectedNumberChar(int,java.lang.String)>($i73, "Exponent indicator not followed by a digit");

     label28:
        if z5 != 0 goto label29;

        $i16 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr>;

        $i17 = $i16 - 1;

        r0.<org.codehaus.jackson.impl.Utf8NumericParser: int _inputPtr> = $i17;

     label29:
        $r5 = r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r5.<org.codehaus.jackson.util.TextBuffer: void setCurrentLength(int)>(i53);

        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.Utf8NumericParser: org.codehaus.jackson.JsonToken reset(boolean,int,int,int)>(z0, i54, i56, i57);

        return $r6;
    }
}
