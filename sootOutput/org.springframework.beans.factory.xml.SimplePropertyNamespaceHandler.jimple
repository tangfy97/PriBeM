public class org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler extends java.lang.Object implements org.springframework.beans.factory.xml.NamespaceHandler
{
    private static final java.lang.String REF_SUFFIX;

    public void <init>()
    {
        org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler r0;

        r0 := @this: org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init()
    {
        org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler r0;

        r0 := @this: org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler;

        return;
    }

    public org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r1;
        org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler r3;
        org.w3c.dom.Element r9;
        org.springframework.beans.factory.xml.ParserContext r0;
        java.lang.StringBuilder $r2, $r6, $r7;
        java.lang.Class $r4;
        java.lang.String $r5, $r8;

        r3 := @this: org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler;

        r9 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class [");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not support custom elements.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>($r8, r9);

        return null;
    }

    public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r14;
        org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler r20;
        org.w3c.dom.Attr r2;
        org.springframework.beans.factory.config.BeanDefinitionHolder r1;
        org.w3c.dom.Node r0;
        org.springframework.beans.factory.xml.ParserContext r3;
        int $i0, $i1, $i2;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r4;
        org.springframework.beans.factory.config.BeanDefinition $r7;
        java.lang.String $r5, $r6, $r9, $r10, $r11, $r12, $r19;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.config.RuntimeBeanReference $r13;
        org.springframework.beans.MutablePropertyValues $r8;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;

        r20 := @this: org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.springframework.beans.factory.config.BeanDefinitionHolder;

        r3 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        $z0 = r0 instanceof org.w3c.dom.Attr;

        if $z0 == 0 goto label3;

        r2 = (org.w3c.dom.Attr) r0;

        $r4 = virtualinvoke r3.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r5 = virtualinvoke $r4.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getLocalName(org.w3c.dom.Node)>(r2);

        $r6 = interfaceinvoke r2.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $r7 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        $r8 = interfaceinvoke $r7.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $z1 = virtualinvoke $r8.<org.springframework.beans.MutablePropertyValues: boolean contains(java.lang.String)>($r5);

        if $z1 == 0 goto label1;

        $r14 = virtualinvoke r3.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Property \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is already defined using ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("both <property> and inline syntax. Only one approach may be used per property.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>($r19, r2);

     label1:
        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("-ref");

        if $z2 == 0 goto label2;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r10 = "-ref";

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r11 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r12 = staticinvoke <org.springframework.core.Conventions: java.lang.String attributeNameToPropertyName(java.lang.String)>($r11);

        $r13 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r13.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r6);

        virtualinvoke $r8.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>($r12, $r13);

        goto label3;

     label2:
        $r9 = staticinvoke <org.springframework.core.Conventions: java.lang.String attributeNameToPropertyName(java.lang.String)>($r5);

        virtualinvoke $r8.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>($r9, $r6);

     label3:
        return r1;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler: java.lang.String REF_SUFFIX> = "-ref";

        return;
    }
}
