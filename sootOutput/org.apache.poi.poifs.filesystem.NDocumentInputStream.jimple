public final class org.apache.poi.poifs.filesystem.NDocumentInputStream extends org.apache.poi.poifs.filesystem.DocumentInputStream
{
    private int _current_offset;
    private int _current_block_count;
    private int _marked_offset;
    private int _marked_offset_count;
    private int _document_size;
    private boolean _closed;
    private org.apache.poi.poifs.filesystem.NPOIFSDocument _document;
    private java.util.Iterator _data;
    private java.nio.ByteBuffer _buffer;

    public void <init>(org.apache.poi.poifs.filesystem.DocumentEntry) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        org.apache.poi.poifs.property.Property $r3;
        org.apache.poi.poifs.property.DocumentProperty r4;
        org.apache.poi.poifs.filesystem.DocumentNode r2;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem $r8;
        int $i0;
        java.lang.String $r16;
        org.apache.poi.poifs.filesystem.DocumentEntry r1;
        boolean $z0;
        org.apache.poi.poifs.filesystem.NPOIFSDocument $r5, $r9;
        java.util.Iterator $r10;
        org.apache.poi.poifs.filesystem.DirectoryEntry $r6;
        java.io.IOException $r11;
        org.apache.poi.poifs.filesystem.DirectoryNode $r7;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DocumentEntry;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.DocumentInputStream: void <init>()>();

        $z0 = r1 instanceof org.apache.poi.poifs.filesystem.DocumentNode;

        if $z0 != 0 goto label1;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open internal document storage, ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a Document Node");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count> = 0;

        $i0 = interfaceinvoke r1.<org.apache.poi.poifs.filesystem.DocumentEntry: int getSize()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size> = $i0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed> = 0;

        r2 = (org.apache.poi.poifs.filesystem.DocumentNode) r1;

        $r3 = virtualinvoke r2.<org.apache.poi.poifs.filesystem.DocumentNode: org.apache.poi.poifs.property.Property getProperty()>();

        r4 = (org.apache.poi.poifs.property.DocumentProperty) $r3;

        $r5 = new org.apache.poi.poifs.filesystem.NPOIFSDocument;

        $r6 = virtualinvoke r2.<org.apache.poi.poifs.filesystem.DocumentNode: org.apache.poi.poifs.filesystem.DirectoryEntry getParent()>();

        $r7 = (org.apache.poi.poifs.filesystem.DirectoryNode) $r6;

        $r8 = virtualinvoke $r7.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.NPOIFSFileSystem getNFileSystem()>();

        specialinvoke $r5.<org.apache.poi.poifs.filesystem.NPOIFSDocument: void <init>(org.apache.poi.poifs.property.DocumentProperty,org.apache.poi.poifs.filesystem.NPOIFSFileSystem)>(r4, $r8);

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document> = $r5;

        $r9 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document>;

        $r10 = virtualinvoke $r9.<org.apache.poi.poifs.filesystem.NPOIFSDocument: java.util.Iterator getBlockIterator()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data> = $r10;

        return;
    }

    public void <init>(org.apache.poi.poifs.filesystem.NPOIFSDocument)
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        org.apache.poi.poifs.filesystem.NPOIFSDocument r1, $r2;
        java.util.Iterator $r3;
        int $i0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.NPOIFSDocument;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.DocumentInputStream: void <init>()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count> = 0;

        $i0 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSDocument: int getSize()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size> = $i0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed> = 0;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document> = r1;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document>;

        $r3 = virtualinvoke $r2.<org.apache.poi.poifs.filesystem.NPOIFSDocument: java.util.Iterator getBlockIterator()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data> = $r3;

        return;
    }

    public int available()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        java.lang.IllegalStateException $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $z0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot perform requested operation on a closed stream");

        throw $r1;

     label1:
        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        $i0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void close()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed> = 1;

        return;
    }

    public void mark(int)
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        i4 := @parameter0: int;

        $i0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset> = $i0;

        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count>;

        $i2 = $i1 - 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count> = $i3;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r1;
        byte $b1, $b2, $b3;
        int $i0, $i4, $i6, $i7, $i8, $i9;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void dieIfClosed()>();

        $z0 = specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean atEOD()>();

        if $z0 == 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        r1 = newarray (byte)[1];

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int read(byte[],int,int)>(r1, 0, 1);

        if $i0 < 0 goto label3;

        $b1 = r1[0];

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        $b3 = r1[0];

        $i8 = (int) $b3;

        $i4 = $i8 + 256;

        return $i4;

     label2:
        $b2 = r1[0];

        $i9 = (int) $b2;

        return $i9;

     label3:
        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r1;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.IllegalArgumentException $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i7;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void dieIfClosed()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer must not be null");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i3 = lengthof r1;

        $i2 = i0 + i1;

        if $i3 >= $i2 goto label3;

     label2:
        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("can\'t read past buffer boundaries");

        throw $r5;

     label3:
        if i1 != 0 goto label4;

        return 0;

     label4:
        $z0 = specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean atEOD()>();

        if $z0 == 0 goto label5;

        $i7 = (int) -1;

        return $i7;

     label5:
        $i4 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int available()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i1);

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, i0, $i5);

        return $i5;
    }

    public void reset()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        java.nio.ByteBuffer $r5, $r6, $r7, $r10, $r11;
        org.apache.poi.poifs.filesystem.NPOIFSDocument $r1, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, i19;
        java.util.Iterator $r2, $r3, $r8, $r13;
        java.lang.Object $r4, $r9;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $i0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset>;

        if $i0 != 0 goto label1;

        $i14 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count>;

        if $i14 != 0 goto label1;

        $i15 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count>;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = $i15;

        $i16 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset>;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = $i16;

        $r12 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document>;

        $r13 = virtualinvoke $r12.<org.apache.poi.poifs.filesystem.NPOIFSDocument: java.util.Iterator getBlockIterator()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data> = $r13;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer> = null;

        return;

     label1:
        $r1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: org.apache.poi.poifs.filesystem.NPOIFSDocument _document>;

        $r2 = virtualinvoke $r1.<org.apache.poi.poifs.filesystem.NPOIFSDocument: java.util.Iterator getBlockIterator()>();

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data> = $r2;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = 0;

        i17 = 0;

     label2:
        $i18 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count>;

        if i17 >= $i18 goto label3;

        $r8 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data>;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.nio.ByteBuffer) $r9;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer> = $r10;

        $i11 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $r11 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $i12 = virtualinvoke $r11.<java.nio.ByteBuffer: int remaining()>();

        $i13 = $i11 + $i12;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = $i13;

        i17 = i17 + 1;

        goto label2;

     label3:
        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset_count>;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = $i1;

        $i3 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i2 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset>;

        if $i3 == $i2 goto label4;

        $r3 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.nio.ByteBuffer) $r4;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer> = $r5;

        $i5 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count>;

        $i6 = $i5 + 1;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = $i6;

        $i8 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset>;

        $i7 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        i19 = $i8 - $i7;

        $r7 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $r6 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $i9 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();

        $i10 = $i9 + i19;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

     label4:
        $i4 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _marked_offset>;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = $i4;

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] $r1;
        long l0, $l9;
        byte $b1;
        int $i2, $i3, $i4, $i5, i6, $i7, $i8, $i10, $i11;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void dieIfClosed()>();

        $b1 = l0 cmp 0L;

        $i11 = (int) $b1;

        if $i11 >= 0 goto label1;

        return 0L;

     label1:
        $i3 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i2 = (int) l0;

        i6 = $i3 + $i2;

        $i4 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        if i6 >= $i4 goto label2;

        i6 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        goto label3;

     label2:
        $i5 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        if i6 <= $i5 goto label3;

        i6 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

     label3:
        $i7 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i8 = i6 - $i7;

        $l9 = (long) $i8;

        $i10 = (int) $l9;

        $r1 = newarray (byte)[$i10];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[])>($r1);

        return $l9;
    }

    private void dieIfClosed() throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $z0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("cannot perform requested operation on a closed stream");

        throw $r1;

     label1:
        return;
    }

    private boolean atEOD()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkAvaliable(int)
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        java.lang.IllegalStateException $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r8;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: boolean _closed>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot perform requested operation on a closed stream");

        throw $r9;

     label1:
        $i2 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i3 = $i2 - $i1;

        if i0 <= $i3 goto label2;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer underrun - requested ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes but ");

        $i5 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _document_size>;

        $i4 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i6 = $i5 - $i4;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was available");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label2:
        return;
    }

    public void readFully(byte[], int, int)
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r5;
        java.nio.ByteBuffer $r1, $r4, $r6, $r7, $r8;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.Iterator $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        r5 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(i0);

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        $r1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        if $r1 == null goto label2;

        $r6 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $i4 = virtualinvoke $r6.<java.nio.ByteBuffer: int remaining()>();

        if $i4 != 0 goto label3;

     label2:
        $i1 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count>;

        $i2 = $i1 + 1;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_block_count> = $i2;

        $r2 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.util.Iterator _data>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.nio.ByteBuffer) $r3;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer> = $r4;

     label3:
        $i6 = i0 - i5;

        $r7 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $i7 = virtualinvoke $r7.<java.nio.ByteBuffer: int remaining()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $r8 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: java.nio.ByteBuffer _buffer>;

        $i9 = i3 + i5;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r5, $i9, $i8);

        $i10 = r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset>;

        $i11 = $i10 + $i8;

        r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int _current_offset> = $i11;

        i5 = i5 + $i8;

        goto label1;

     label4:
        return;
    }

    public byte readByte()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: int readUByte()>();

        $b1 = (byte) $i0;

        return $b1;
    }

    public double readDouble()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        long $l0;
        double $d0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        $l0 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public long readLong()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r1;
        long $l0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(8);

        r1 = newarray (byte)[8];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, 0, 8);

        $l0 = staticinvoke <org.apache.poi.util.LittleEndian: long getLong(byte[],int)>(r1, 0);

        return $l0;
    }

    public short readShort()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r1;
        short $s0;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(2);

        r1 = newarray (byte)[2];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, 0, 2);

        $s0 = staticinvoke <org.apache.poi.util.LittleEndian: short getShort(byte[])>(r1);

        return $s0;
    }

    public int readInt()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        int $i0;
        byte[] r1;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(4);

        r1 = newarray (byte)[4];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, 0, 4);

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>(r1);

        return $i0;
    }

    public int readUShort()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        int $i0;
        byte[] r1;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(2);

        r1 = newarray (byte)[2];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, 0, 2);

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[])>(r1);

        return $i0;
    }

    public int readUByte()
    {
        org.apache.poi.poifs.filesystem.NDocumentInputStream r0;
        byte[] r1;
        byte $b0, $b1, $b3;
        int $i2, $i4, $i5, $i6;

        r0 := @this: org.apache.poi.poifs.filesystem.NDocumentInputStream;

        specialinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void checkAvaliable(int)>(1);

        r1 = newarray (byte)[1];

        virtualinvoke r0.<org.apache.poi.poifs.filesystem.NDocumentInputStream: void readFully(byte[],int,int)>(r1, 0, 1);

        $b0 = r1[0];

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $b3 = r1[0];

        $i5 = (int) $b3;

        return $i5;

     label1:
        $b1 = r1[0];

        $i6 = (int) $b1;

        $i2 = $i6 + 256;

        return $i2;
    }
}
