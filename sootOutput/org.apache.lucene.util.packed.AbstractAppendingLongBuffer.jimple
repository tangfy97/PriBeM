abstract class org.apache.lucene.util.packed.AbstractAppendingLongBuffer extends java.lang.Object
{
    static final int BLOCK_BITS;
    static final int MAX_PENDING_COUNT;
    static final int BLOCK_MASK;
    long[] minValues;
    org.apache.lucene.util.packed.PackedInts$Reader[] deltas;
    private long deltasBytes;
    int valuesOff;
    long[] pending;
    int pendingOff;

    void <init>(int)
    {
        org.apache.lucene.util.packed.PackedInts$Reader[] $r2;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        long[] $r1, $r3;
        int i0;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[16];

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] minValues> = $r1;

        $r2 = newarray (org.apache.lucene.util.packed.PackedInts$Reader)[16];

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas> = $r2;

        $r3 = newarray (long)[1024];

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] pending> = $r3;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff> = 0;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff> = 0;

        return;
    }

    public final long size()
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        int $i0, $i2;
        long $l1, $l3, $l4, $l5;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        $i0 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        $l1 = (long) $i0;

        $l4 = $l1 * 1024L;

        $i2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        return $l5;
    }

    public final void add(long)
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        long l1, $l8, $l9, $l10;
        long[] $r6;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r1, $r2, $r4;
        org.apache.lucene.util.packed.PackedInts$Reader $r3, $r5;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        l1 := @parameter0: long;

        $i0 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff>;

        if $i0 != 1024 goto label3;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i3 = lengthof $r1;

        $i2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        if $i3 != $i2 goto label1;

        $i11 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        $i12 = $i11 + 1;

        $i13 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i12, 8);

        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: void grow(int)>($i13);

     label1:
        virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: void packPendingValues()>();

        $r2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i4 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        $r3 = $r2[$i4];

        if $r3 == null goto label2;

        $l8 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long deltasBytes>;

        $r4 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i7 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        $r5 = $r4[$i7];

        $l9 = interfaceinvoke $r5.<org.apache.lucene.util.packed.PackedInts$Reader: long ramBytesUsed()>();

        $l10 = $l8 + $l9;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long deltasBytes> = $l10;

     label2:
        $i5 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int valuesOff> = $i6;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff> = 0;

     label3:
        $r6 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] pending>;

        $i14 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff>;

        $i15 = $i14 + 1;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int pendingOff> = $i15;

        $r6[$i14] = l1;

        return;
    }

    void grow(int)
    {
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3, $r5;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        long[] $r1, $r2;
        java.lang.Object[] $r4;
        int i0;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] minValues>;

        $r2 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r1, i0);

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] minValues> = $r2;

        $r3 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, i0);

        $r5 = (org.apache.lucene.util.packed.PackedInts$Reader[]) $r4;

        r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas> = $r5;

        return;
    }

    abstract void packPendingValues();

    public final long get(long)
    {
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r5;
        long l0, $l2, $l4, $l6, $l8;
        byte $b1, $b3;
        int i5, i7, $i9, $i10;
        java.lang.String $r4;
        java.lang.StringBuilder $r2, $r3, $r6;

        r5 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 < 0 goto label1;

        $l2 = virtualinvoke r5.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long size()>();

        $b3 = l0 cmp $l2;

        $i10 = (int) $b3;

        if $i10 < 0 goto label2;

     label1:
        $r7 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label2:
        $l4 = l0 >> 10;

        i5 = (int) $l4;

        $l6 = l0 & 1023L;

        i7 = (int) $l6;

        $l8 = virtualinvoke r5.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long get(int,int)>(i5, i7);

        return $l8;
    }

    abstract long get(int, int);

    abstract org.apache.lucene.util.packed.AbstractAppendingLongBuffer$Iterator iterator();

    long baseRamBytesUsed()
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i1 = 3 * $i0;

        $i3 = $i2 + $i1;

        $i4 = $i3 + 8;

        $l5 = (long) $i4;

        return $l5;
    }

    public long ramBytesUsed()
    {
        org.apache.lucene.util.packed.AbstractAppendingLongBuffer r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l9, $l10, $l11, $l12, $l13, $l14, $l15, l16, $l17, $l18;
        long[] $r1, $r2;
        int $i6, $i7, $i8;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3;

        r0 := @this: org.apache.lucene.util.packed.AbstractAppendingLongBuffer;

        $l0 = virtualinvoke r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long baseRamBytesUsed()>();

        $l1 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l0);

        $l2 = $l1 + 8L;

        $r1 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] pending>;

        $l3 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(long[])>($r1);

        $l4 = $l2 + $l3;

        $r2 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long[] minValues>;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(long[])>($r2);

        $l14 = $l4 + $l5;

        $i6 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_ARRAY_HEADER>;

        $l12 = (long) $i6;

        $i7 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $l10 = (long) $i7;

        $r3 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: org.apache.lucene.util.packed.PackedInts$Reader[] deltas>;

        $i8 = lengthof $r3;

        $l9 = (long) $i8;

        $l11 = $l10 * $l9;

        $l13 = $l12 + $l11;

        $l15 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l13);

        l16 = $l14 + $l15;

        $l17 = r0.<org.apache.lucene.util.packed.AbstractAppendingLongBuffer: long deltasBytes>;

        $l18 = l16 + $l17;

        return $l18;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int BLOCK_MASK> = 1023;

        <org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int MAX_PENDING_COUNT> = 1024;

        <org.apache.lucene.util.packed.AbstractAppendingLongBuffer: int BLOCK_BITS> = 10;

        return;
    }
}
