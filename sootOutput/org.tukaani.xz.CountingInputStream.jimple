class org.tukaani.xz.CountingInputStream extends java.io.FilterInputStream
{
    private long size;

    public void <init>(java.io.InputStream)
    {
        org.tukaani.xz.CountingInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.tukaani.xz.CountingInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.tukaani.xz.CountingInputStream: long size> = 0L;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.tukaani.xz.CountingInputStream r0;
        long $l1, $l3, $l4;
        byte $b2;
        int $i0, $i6, $i7;
        java.io.InputStream $r1;

        r0 := @this: org.tukaani.xz.CountingInputStream;

        $r1 = r0.<org.tukaani.xz.CountingInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i6 = (int) -1;

        if $i0 == $i6 goto label1;

        $l1 = r0.<org.tukaani.xz.CountingInputStream: long size>;

        $b2 = $l1 cmp 0L;

        $i7 = (int) $b2;

        if $i7 < 0 goto label1;

        $l3 = r0.<org.tukaani.xz.CountingInputStream: long size>;

        $l4 = $l3 + 1L;

        r0.<org.tukaani.xz.CountingInputStream: long size> = $l4;

     label1:
        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.tukaani.xz.CountingInputStream r0;
        long $l3, $l5, $l6, $l7;
        byte $b4;
        int i0, i1, $i2, $i8;
        java.io.InputStream $r2;

        r0 := @this: org.tukaani.xz.CountingInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.tukaani.xz.CountingInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if $i2 <= 0 goto label1;

        $l3 = r0.<org.tukaani.xz.CountingInputStream: long size>;

        $b4 = $l3 cmp 0L;

        $i8 = (int) $b4;

        if $i8 < 0 goto label1;

        $l6 = r0.<org.tukaani.xz.CountingInputStream: long size>;

        $l5 = (long) $i2;

        $l7 = $l6 + $l5;

        r0.<org.tukaani.xz.CountingInputStream: long size> = $l7;

     label1:
        return $i2;
    }

    public long getSize()
    {
        long $l0;
        org.tukaani.xz.CountingInputStream r0;

        r0 := @this: org.tukaani.xz.CountingInputStream;

        $l0 = r0.<org.tukaani.xz.CountingInputStream: long size>;

        return $l0;
    }
}
