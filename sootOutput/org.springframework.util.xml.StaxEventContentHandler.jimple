class org.springframework.util.xml.StaxEventContentHandler extends org.springframework.util.xml.AbstractStaxContentHandler
{
    private final javax.xml.stream.XMLEventFactory eventFactory;
    private final javax.xml.stream.util.XMLEventConsumer eventConsumer;

    void <init>(javax.xml.stream.util.XMLEventConsumer)
    {
        javax.xml.stream.util.XMLEventConsumer r1;
        javax.xml.stream.XMLEventFactory $r2;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r1 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxContentHandler: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'consumer\' must not be null");

        $r2 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory> = $r2;

        r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.util.XMLEventConsumer eventConsumer> = r1;

        return;
    }

    void <init>(javax.xml.stream.util.XMLEventConsumer, javax.xml.stream.XMLEventFactory)
    {
        javax.xml.stream.XMLEventFactory r1;
        javax.xml.stream.util.XMLEventConsumer r2;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r2 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        r1 := @parameter1: javax.xml.stream.XMLEventFactory;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxContentHandler: void <init>()>();

        r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory> = r1;

        r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.util.XMLEventConsumer eventConsumer> = r2;

        return;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.springframework.util.xml.StaxEventContentHandler$1 $r2;
        org.xml.sax.Locator r0;
        javax.xml.stream.XMLEventFactory $r3;
        org.springframework.util.xml.StaxEventContentHandler r1;

        r1 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r0 := @parameter0: org.xml.sax.Locator;

        if r0 == null goto label1;

        $r3 = r1.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r2 = new org.springframework.util.xml.StaxEventContentHandler$1;

        specialinvoke $r2.<org.springframework.util.xml.StaxEventContentHandler$1: void <init>(org.springframework.util.xml.StaxEventContentHandler,org.xml.sax.Locator)>(r1, r0);

        virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: void setLocation(javax.xml.stream.Location)>($r2);

     label1:
        return;
    }

    protected void startDocumentInternal() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.StartDocument $r2;
        javax.xml.stream.XMLEventFactory $r1;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        $r1 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument()>();

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r2);

        return;
    }

    protected void endDocumentInternal() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventFactory $r1;
        org.springframework.util.xml.StaxEventContentHandler r0;
        javax.xml.stream.events.EndDocument $r2;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        $r1 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndDocument createEndDocument()>();

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r2);

        return;
    }

    protected void startElementInternal(javax.xml.namespace.QName, org.xml.sax.Attributes, org.springframework.util.xml.SimpleNamespaceContext) throws javax.xml.stream.XMLStreamException
    {
        java.util.Iterator $r7, $r9;
        org.springframework.util.xml.StaxEventContentHandler r0;
        java.util.List $r2, $r4;
        org.xml.sax.Attributes r1;
        org.springframework.util.xml.SimpleNamespaceContext r3;
        javax.xml.namespace.QName r5;
        javax.xml.stream.events.StartElement $r8;
        javax.xml.stream.XMLEventFactory $r6;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r5 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: org.xml.sax.Attributes;

        r3 := @parameter2: org.springframework.util.xml.SimpleNamespaceContext;

        $r2 = specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: java.util.List getAttributes(org.xml.sax.Attributes)>(r1);

        $r4 = specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: java.util.List createNamespaces(org.springframework.util.xml.SimpleNamespaceContext)>(r3);

        $r6 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        if $r4 == null goto label1;

        $r9 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        $r8 = virtualinvoke $r6.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>(r5, $r7, $r9);

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r8);

        return;
    }

    protected void endElementInternal(javax.xml.namespace.QName, org.springframework.util.xml.SimpleNamespaceContext) throws javax.xml.stream.XMLStreamException
    {
        java.util.List $r2;
        java.util.Iterator $r6;
        org.springframework.util.xml.SimpleNamespaceContext r1;
        javax.xml.stream.events.EndElement $r5;
        javax.xml.namespace.QName r3;
        javax.xml.stream.XMLEventFactory $r4;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r3 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: org.springframework.util.xml.SimpleNamespaceContext;

        $r2 = specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: java.util.List createNamespaces(org.springframework.util.xml.SimpleNamespaceContext)>(r1);

        $r4 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        if $r2 == null goto label1;

        $r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = null;

     label2:
        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)>(r3, $r6);

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    protected void charactersInternal(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Characters $r4;
        int i0, i1;
        char[] r2;
        java.lang.String $r1;
        javax.xml.stream.XMLEventFactory $r3;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCharacters(java.lang.String)>($r1);

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    protected void ignorableWhitespaceInternal(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Characters $r4;
        int i0, i1;
        char[] r2;
        java.lang.String $r1;
        javax.xml.stream.XMLEventFactory $r3;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createIgnorableSpace(java.lang.String)>($r1);

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    protected void processingInstructionInternal(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.ProcessingInstruction $r4;
        java.lang.String r1, r2;
        javax.xml.stream.XMLEventFactory $r3;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        specialinvoke r0.<org.springframework.util.xml.StaxEventContentHandler: void consumeEvent(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    private void consumeEvent(javax.xml.stream.events.XMLEvent) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.XMLEvent r1;
        javax.xml.stream.util.XMLEventConsumer $r2;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r1 := @parameter0: javax.xml.stream.events.XMLEvent;

        $r2 = r0.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.util.XMLEventConsumer eventConsumer>;

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>(r1);

        return;
    }

    private java.util.List createNamespaces(org.springframework.util.xml.SimpleNamespaceContext)
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r1;
        org.springframework.util.xml.StaxEventContentHandler r7;
        javax.xml.stream.events.Namespace $r9, $r11;
        org.springframework.util.xml.SimpleNamespaceContext r0;
        java.lang.Object $r4;
        java.lang.String $r2, r5, $r6;
        javax.xml.stream.XMLEventFactory $r8, $r10;
        boolean $z0, $z1;

        r7 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r0 := @parameter0: org.springframework.util.xml.SimpleNamespaceContext;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<org.springframework.util.xml.SimpleNamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>("");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $r10 = r7.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r11 = virtualinvoke $r10.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String)>($r2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r11);

     label2:
        $r3 = virtualinvoke r0.<org.springframework.util.xml.SimpleNamespaceContext: java.util.Iterator getBoundPrefixes()>();

        goto label4;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.SimpleNamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r5);

        $r8 = r7.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r9 = virtualinvoke $r8.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)>(r5, $r6);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return $r1;
    }

    private java.util.List getAttributes(org.xml.sax.Attributes)
    {
        java.util.ArrayList $r0;
        org.springframework.util.xml.StaxEventContentHandler r2;
        javax.xml.stream.events.Attribute $r12;
        org.xml.sax.Attributes r1;
        int i0, $i1;
        java.lang.String $r3, $r4, $r6, $r7, $r8, $r9, $r11;
        boolean $z0, $z1;
        javax.xml.namespace.QName $r5;
        javax.xml.stream.XMLEventFactory $r10;

        r2 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r1 := @parameter0: org.xml.sax.Attributes;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        goto label3;

     label1:
        $r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i0);

        $r4 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i0);

        $r5 = virtualinvoke r2.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.namespace.QName toQName(java.lang.String,java.lang.String)>($r3, $r4);

        $r6 = "xmlns";

        $r7 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r8 = "xmlns";

        $r9 = virtualinvoke $r5.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label2;

        $r10 = r2.<org.springframework.util.xml.StaxEventContentHandler: javax.xml.stream.XMLEventFactory eventFactory>;

        $r11 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i0);

        $r12 = virtualinvoke $r10.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)>($r5, $r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r1.<org.xml.sax.Attributes: int getLength()>();

        if i0 < $i1 goto label1;

        return $r0;
    }

    protected void skippedEntityInternal(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        org.springframework.util.xml.StaxEventContentHandler r0;

        r0 := @this: org.springframework.util.xml.StaxEventContentHandler;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
