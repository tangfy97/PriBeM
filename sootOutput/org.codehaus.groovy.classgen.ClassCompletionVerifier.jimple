public class org.codehaus.groovy.classgen.ClassCompletionVerifier extends org.codehaus.groovy.ast.ClassCodeVisitorSupport
{
    private org.codehaus.groovy.ast.ClassNode currentClass;
    private org.codehaus.groovy.control.SourceUnit source;
    static java.lang.Class class$java$lang$Throwable;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.control.SourceUnit r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.control.SourceUnit source> = r1;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getClassNode()
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        $r1 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        return $r1;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.control.ErrorCollector $r5;
        org.codehaus.groovy.control.SourceUnit $r3, $r4;
        org.codehaus.groovy.ast.ClassNode r1, r2;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass> = r2;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkImplementsAndExtends(org.codehaus.groovy.ast.ClassNode)>(r2);

        $r3 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.control.SourceUnit source>;

        if $r3 == null goto label1;

        $r4 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.control.SourceUnit source>;

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        $z0 = virtualinvoke $r5.<org.codehaus.groovy.control.ErrorCollector: boolean hasErrors()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForIncorrectModifiers(org.codehaus.groovy.ast.ClassNode)>(r2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForOverwritingFinal(org.codehaus.groovy.ast.ClassNode)>(r2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodsForIncorrectModifiers(org.codehaus.groovy.ast.ClassNode)>(r2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodsForOverwritingFinal(org.codehaus.groovy.ast.ClassNode)>(r2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkNoAbstractMethodsNonabstractClass(org.codehaus.groovy.ast.ClassNode)>(r2);

     label1:
        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r2);

        r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass> = r1;

        return;
    }

    private void checkNoAbstractMethodsNonabstractClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.MethodNode r4;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r11, $r13, $r14;
        int $i0;
        java.lang.String $r8, $r12, $r15;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r5;
        java.lang.Object $r3;

        r5 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getAbstractMethods()>();

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.MethodNode) $r3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t have an abstract method in a non-abstract class. The ");

        $r8 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be declared abstract or");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" the ");

        $r12 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)>(r4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be implemented.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r15, r0);

        goto label3;

     label4:
        return;
    }

    private void checkClassForIncorrectModifiers(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForAbstractAndFinal(org.codehaus.groovy.ast.ClassNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForOtherModifiers(org.codehaus.groovy.ast.ClassNode)>(r1);

        return;
    }

    private void checkClassForAbstractAndFinal(org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12;
        int $i0, $i1;
        java.lang.String $r4, $r7, $r10, $r13;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r1;

        r1 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i1);

        if $z1 != 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z2 == 0 goto label3;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r10 = specialinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must not be final. It is by definition abstract.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r13, r0);

        goto label4;

     label3:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r4 = specialinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must not be both final and abstract.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r7, r0);

     label4:
        return;
    }

    private void checkClassForOtherModifiers(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForModifier(org.codehaus.groovy.ast.ClassNode,boolean,java.lang.String)>(r1, $z0, "transient");

        $i1 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>($i1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForModifier(org.codehaus.groovy.ast.ClassNode,boolean,java.lang.String)>(r1, $z1, "volatile");

        $i2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isNative(int)>($i2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkClassForModifier(org.codehaus.groovy.ast.ClassNode,boolean,java.lang.String)>(r1, $z2, "native");

        return;
    }

    private void checkMethodForModifier(org.codehaus.groovy.ast.MethodNode, boolean, java.lang.String)
    {
        org.codehaus.groovy.ast.MethodNode r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        java.lang.String $r4, r7, $r10;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r3 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        r7 := @parameter2: java.lang.String;

        if z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r4 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has an incorrect modifier ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r10, r3);

        return;
    }

    private void checkClassForModifier(org.codehaus.groovy.ast.ClassNode, boolean, java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        java.lang.String $r4, r7, $r10;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter1: boolean;

        r7 := @parameter2: java.lang.String;

        if z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r4 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has an incorrect modifier ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r10, r3);

        return;
    }

    private java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r1;
        java.lang.StringBuffer $r0, $r2, $r3, $r5, $r6;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r8;
        java.lang.String $r4, $r7, $r9;
        boolean $z0;

        r8 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r9 = "interface";

        goto label2;

     label1:
        $r9 = "class";

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" \'");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r7;
        java.lang.String $r3, $r6;

        r7 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("method \'");

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String getDescription(org.codehaus.groovy.ast.FieldNode)
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        org.codehaus.groovy.ast.FieldNode r2;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r7;
        java.lang.String $r3, $r6;

        r7 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("field \'");

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private void checkAbstractDeclaration(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r10, $r11;
        int $i0, $i1;
        java.lang.String $r6, $r9, $r12;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.ClassNode $r2, $r5;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r1;

        r1 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $i1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t have an abstract method in a non-abstract class. The ");

        $r5 = r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r6 = specialinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be declared abstract or the method \'");

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getTypeDescriptor()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' must not be abstract.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r12, r0);

        return;
    }

    private void checkClassForOverwritingFinal(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1;
        java.lang.StringBuffer $r2;
        int $i0;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You are not allowed to overwrite the final ");

        $r4 = specialinvoke r3.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r5, r0);

        return;
    }

    private void checkImplementsAndExtends(org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        org.codehaus.groovy.ast.ClassNode[] $r15;
        int i0, $i1;
        java.lang.String $r5, $r8, $r11, $r14;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.ClassNode r0, $r1, r16;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r2;

        r2 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z2 != 0 goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You are not allowed to extend the ");

        $r11 = specialinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", use implements instead.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r14, r0);

     label1:
        $r15 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r15;

        if i0 >= $i1 goto label4;

        r16 = $r15[i0];

        $z1 = virtualinvoke r16.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z1 != 0 goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You are not allowed to implement the ");

        $r5 = specialinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r16);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", use extends instead.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r8, r0);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return;
    }

    private void checkMethodsForIncorrectModifiers(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.MethodNode r4;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22;
        int $i0, $i1;
        java.lang.String $r8, $r11, $r14, $r17, $r20, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.List $r1;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r5;
        java.lang.Object $r3;

        r5 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.MethodNode) $r3;

        $i0 = virtualinvoke r4.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z2 == 0 goto label3;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r17 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)>(r4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from ");

        $r20 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must not be final. It is by definition abstract.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r23, r4);

     label3:
        $i1 = virtualinvoke r4.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z3 == 0 goto label4;

        $z4 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: boolean isConstructor(org.codehaus.groovy.ast.MethodNode)>(r4);

        if $z4 != 0 goto label4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r8 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)>(r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from ");

        $r11 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must not be static. Only fields may be static in an interface.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r14, r4);

     label4:
        goto label2;

     label5:
        return;
    }

    private boolean isConstructor(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r2;
        java.lang.String $r1;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        return $z0;
    }

    private void checkMethodsForOverwritingFinal(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.MethodNode r4, r11;
        int $i0;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2, $r9;
        org.codehaus.groovy.ast.ClassNode r0, $r6, $r14;
        java.util.List $r1, $r8;
        org.codehaus.groovy.ast.Parameter[] $r5, $r12;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r13;
        java.lang.Object $r3, $r10;

        r13 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.groovy.ast.MethodNode) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getSuperClass()>();

        $r7 = virtualinvoke r4.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>($r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.groovy.ast.MethodNode) $r10;

        $r12 = virtualinvoke r11.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $z2 = specialinvoke r13.<org.codehaus.groovy.classgen.ClassCompletionVerifier: boolean hasEqualParameterTypes(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.Parameter[])>($r5, $r12);

        if $z2 != 0 goto label3;

        goto label2;

     label3:
        $i0 = virtualinvoke r11.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z3 != 0 goto label4;

        return;

     label4:
        $r14 = virtualinvoke r11.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        specialinvoke r13.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addInvalidUseOfFinalError(org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode)>(r4, $r5, $r14);

        return;

     label5:
        goto label1;

     label6:
        return;
    }

    private void addInvalidUseOfFinalError(org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.Parameter $r10;
        org.codehaus.groovy.ast.ClassNode r7, $r11;
        org.codehaus.groovy.ast.Parameter[] r4;
        org.codehaus.groovy.ast.MethodNode r2;
        java.lang.StringBuffer $r0, $r1, $r5;
        int $i0, i1;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r6;
        java.lang.String $r3, $r8, $r9;
        boolean z0;

        r6 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        r4 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r7 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You are not allowed to overwrite the final method ");

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        z0 = 0;

        i1 = 0;

     label1:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label4;

        if z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        goto label3;

     label2:
        z0 = 1;

     label3:
        $r10 = r4[i1];

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") from ");

        $r8 = specialinvoke r6.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>(r7);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r6.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r9, r2);

        return;
    }

    private boolean hasEqualParameterTypes(org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r2, $r5;
        org.codehaus.groovy.ast.ClassNode $r3, $r6;
        org.codehaus.groovy.ast.Parameter[] r0, r1;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r8;
        java.lang.String $r4, $r7;
        boolean $z0;

        r8 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label5;

        $r2 = r0[i3];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = r1[i3];

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return 1;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        $r1 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    public void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r2;
        java.lang.String $r5, $r8;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You cannot create an instance from the abstract ");

        $r5 = specialinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r8, r0);

     label1:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>(r0);

        return;
    }

    public void visitMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.MethodNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkAbstractDeclaration(org.codehaus.groovy.ast.MethodNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkRepetitiveMethod(org.codehaus.groovy.ast.MethodNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkOverloadingPrivateAndPublic(org.codehaus.groovy.ast.MethodNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodModifiers(org.codehaus.groovy.ast.MethodNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitMethod(org.codehaus.groovy.ast.MethodNode)>(r1);

        return;
    }

    private void checkMethodModifiers(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.ClassNode $r1;
        org.codehaus.groovy.ast.MethodNode r2;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r1 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStrict(int)>($i2);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodForModifier(org.codehaus.groovy.ast.MethodNode,boolean,java.lang.String)>(r2, $z0, "strictfp");

        $i3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isSynchronized(int)>($i3);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodForModifier(org.codehaus.groovy.ast.MethodNode,boolean,java.lang.String)>(r2, $z1, "synchronized");

        $i4 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isNative(int)>($i4);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkMethodForModifier(org.codehaus.groovy.ast.MethodNode,boolean,java.lang.String)>(r2, $z2, "native");

     label1:
        return;
    }

    private void checkOverloadingPrivateAndPublic(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r1, r7;
        int $i0;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, z4, z5, $z6;
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.ClassNode $r2, $r8, $r9;
        java.util.List $r4;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: boolean isConstructor(org.codehaus.groovy.ast.MethodNode)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>($r3);

        z4 = 0;

        z5 = 0;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.MethodNode) $r6;

        if r7 != r1 goto label3;

        goto label2;

     label3:
        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $z1 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label4;

        goto label2;

     label4:
        $i0 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z2 != 0 goto label5;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z3 == 0 goto label6;

     label5:
        z5 = 1;

        goto label7;

     label6:
        z4 = 1;

     label7:
        goto label2;

     label8:
        if z4 == 0 goto label9;

        if z5 == 0 goto label9;

        virtualinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("Mixing private and public/protected methods of the same name causes multimethods to be disabled and is forbidden to avoid surprising behaviour. Renaming the private methods will solve the problem.", r1);

     label9:
        return;
    }

    private void checkRepetitiveMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r1, r7;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.ClassNode $r2, $r8, $r9;
        java.util.List $r4;
        org.codehaus.groovy.ast.Parameter[] $r10, $r11;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: boolean isConstructor(org.codehaus.groovy.ast.MethodNode)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.ast.MethodNode) $r6;

        if r7 != r1 goto label3;

        goto label2;

     label3:
        $r8 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getDeclaringClass()>();

        $z1 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label4;

        goto label2;

     label4:
        $r10 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r11 = virtualinvoke r7.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i1 = lengthof $r10;

        $i0 = lengthof $r11;

        if $i1 == $i0 goto label5;

        goto label2;

     label5:
        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addErrorIfParamsAndReturnTypeEqual(org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.MethodNode,org.codehaus.groovy.ast.MethodNode)>($r11, $r10, r1, r7);

        goto label2;

     label6:
        return;
    }

    private void addErrorIfParamsAndReturnTypeEqual(org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.MethodNode, org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r1, r3;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r13, $r14;
        int $i0, i1;
        java.lang.String $r8, $r12, $r15;
        boolean $z0, $z1, z2, z3;
        org.codehaus.groovy.ast.Parameter $r17, $r19;
        org.codehaus.groovy.ast.ClassNode $r2, $r4, $r11, $r18, $r20;
        org.codehaus.groovy.ast.Parameter[] r0, r16;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r5;

        r5 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        r16 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r1 := @parameter2: org.codehaus.groovy.ast.MethodNode;

        r3 := @parameter3: org.codehaus.groovy.ast.MethodNode;

        z2 = 1;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r17 = r16[i1];

        $r18 = virtualinvoke $r17.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r19 = r0[i1];

        $r20 = virtualinvoke $r19.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $z1 = virtualinvoke $r18.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r20);

        z2 = z2 & $z1;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        $z0 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean equals(java.lang.Object)>($r4);

        z3 = z2 & $z0;

        if z3 == 0 goto label3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Repetitive method name/signature for ");

        $r8 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.MethodNode)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r11 = r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r12 = specialinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r15, r1);

     label3:
        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.FieldNode r1, $r4;
        java.lang.StringBuffer $r5, $r6, $r8, $r9;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        java.lang.String $r3, $r7, $r10;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r2 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getDeclaredField(java.lang.String)>($r3);

        if $r4 == r1 goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r7 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.FieldNode)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is declared multiple times.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r10, r1);

     label1:
        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkInterfaceFieldModifiers(org.codehaus.groovy.ast.FieldNode)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitField(org.codehaus.groovy.ast.FieldNode)>(r1);

        return;
    }

    private void checkInterfaceFieldModifiers(org.codehaus.groovy.ast.FieldNode)
    {
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r10, $r11;
        int $i0, $i1;
        java.lang.String $r5, $r9, $r12;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode $r1, $r8;
        org.codehaus.groovy.ast.FieldNode r2;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r2 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r2.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i1 = $i0 & 25;

        if $i1 != 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The ");

        $r5 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.FieldNode)>(r2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not \'public final static\' but is defined in the ");

        $r8 = r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r9 = specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.String getDescription(org.codehaus.groovy.ast.ClassNode)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r12, r2);

     label2:
        return;
    }

    public void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r0;
        int $i0;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;
        org.codehaus.groovy.syntax.Token $r1;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 != 30 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $z0 = $r3 instanceof org.codehaus.groovy.ast.expr.MapEntryExpression;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("You tried to use a map entry for an index operation, this is not allowed. Maybe something should be set in parentheses or a comma is missing?", $r4);

     label1:
        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r0);

        return;
    }

    public void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)
    {
        org.codehaus.groovy.ast.ClassNode $r1, $r3;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r4;
        java.lang.Class $r2, $r5;
        org.codehaus.groovy.ast.stmt.CatchStatement r0;
        boolean $z0;

        r4 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.CatchStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.ClassNode getExceptionType()>();

        $r2 = <org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.Class class$java$lang$Throwable>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.Class class$java$lang$Throwable> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.classgen.ClassCompletionVerifier: java.lang.Class class$java$lang$Throwable>;

     label2:
        $r3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r5);

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: boolean isDerivedFrom(org.codehaus.groovy.ast.ClassNode)>($r3);

        if $z0 != 0 goto label3;

        virtualinvoke r4.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("Catch statement parameter type is not a subclass of Throwable.", r0);

     label3:
        specialinvoke r4.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)>(r0);

        return;
    }

    public void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.expr.TupleExpression r3;
        java.util.List $r4;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        java.lang.Object $r6;
        org.codehaus.groovy.ast.expr.Expression $r2, $r7;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $z0 = $r2 instanceof org.codehaus.groovy.ast.expr.TupleExpression;

        if $z0 == 0 goto label3;

        r3 = (org.codehaus.groovy.ast.expr.TupleExpression) $r2;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.TupleExpression: java.util.List getExpressions()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.groovy.ast.expr.Expression) $r6;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkForInvalidDeclaration(org.codehaus.groovy.ast.expr.Expression)>($r7);

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkForInvalidDeclaration(org.codehaus.groovy.ast.expr.Expression)>($r2);

     label4:
        return;
    }

    private void checkForInvalidDeclaration(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r1;
        org.codehaus.groovy.ast.expr.Expression r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.DeclarationExpression;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("invalid use of declartion inside method call.", r0);

        return;
    }

    public void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)
    {
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.expr.ConstantExpression r1;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ConstantExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkStringExceedingMaximumLength(org.codehaus.groovy.ast.expr.ConstantExpression)>(r1);

        return;
    }

    public void visitGStringExpression(org.codehaus.groovy.ast.expr.GStringExpression)
    {
        java.util.List $r2;
        java.util.Iterator $r3;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r0;
        org.codehaus.groovy.ast.expr.GStringExpression r1;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.expr.ConstantExpression $r5;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.GStringExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitGStringExpression(org.codehaus.groovy.ast.expr.GStringExpression)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.GStringExpression: java.util.List getStrings()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r4;

        specialinvoke r0.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void checkStringExceedingMaximumLength(org.codehaus.groovy.ast.expr.ConstantExpression)>($r5);

        goto label1;

     label2:
        return;
    }

    private void checkStringExceedingMaximumLength(org.codehaus.groovy.ast.expr.ConstantExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r9;
        int $i0, $i1, $i3;
        org.codehaus.groovy.classgen.ClassCompletionVerifier r3;
        java.lang.Object $r1;
        java.lang.String r2, $r8;
        boolean $z0;

        r3 := @this: org.codehaus.groovy.classgen.ClassCompletionVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ConstantExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = (int) 65535;

        if $i0 <= $i3 goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String too long. The given string is ");

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Unicode code units long, but only a maximum of 65535 is allowed.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.groovy.classgen.ClassCompletionVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r8, r0);

     label1:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
