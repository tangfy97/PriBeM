class com.hp.hpl.jena.sparql.resultset.XMLInputSAX extends com.hp.hpl.jena.sparql.resultset.SPARQLResult
{

    public void <init>(java.io.InputStream, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputSAX r0;
        org.xml.sax.InputSource $r1;
        com.hp.hpl.jena.rdf.model.Model r3;
        java.io.InputStream r2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputSAX;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void <init>()>();

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX: void worker(org.xml.sax.InputSource,com.hp.hpl.jena.rdf.model.Model)>($r1, r3);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.sparql.resultset.XMLInputSAX r0;
        org.xml.sax.InputSource $r1;
        com.hp.hpl.jena.rdf.model.Model r3;
        java.lang.String r2;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputSAX;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.SPARQLResult: void <init>()>();

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX: void worker(org.xml.sax.InputSource,com.hp.hpl.jena.rdf.model.Model)>($r1, r3);

        return;
    }

    private void worker(org.xml.sax.InputSource, com.hp.hpl.jena.rdf.model.Model)
    {
        org.xml.sax.XMLReader $r0;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r4;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r10, $r12;
        org.xml.sax.InputSource r2;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2 $r1;
        java.io.IOException $r9;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r3;
        com.hp.hpl.jena.sparql.resultset.XMLInputSAX r8;
        java.util.List $r5, $r6;
        org.xml.sax.SAXException $r11;
        com.hp.hpl.jena.rdf.model.Model r13;

        r8 := @this: com.hp.hpl.jena.sparql.resultset.XMLInputSAX;

        r2 := @parameter0: org.xml.sax.InputSource;

        r13 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        if r13 != null goto label1;

        r13 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphFactory: com.hp.hpl.jena.rdf.model.Model makeJenaDefaultModel()>();

     label1:
        $r0 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader()>();

        interfaceinvoke $r0.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespace-prefixes", 1);

        $r1 = new com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2: void <init>()>();

        interfaceinvoke $r0.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r1);

        interfaceinvoke $r0.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>(r2);

        $z0 = $r1.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2: boolean isBooleanResult>;

        if $z0 == 0 goto label3;

        $z1 = $r1.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2: boolean askResult>;

        virtualinvoke r8.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX: void set(boolean)>($z1);

     label2:
        return;

     label3:
        $r3 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r6 = $r1.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2: java.util.List variables>;

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r5 = $r1.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX$ResultSetXMLHandler2: java.util.List results>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator)>($r7);

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r6, r13, $r4);

        virtualinvoke r8.<com.hp.hpl.jena.sparql.resultset.XMLInputSAX: void set(com.hp.hpl.jena.query.ResultSet)>($r3);

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        $r12 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String,java.lang.Throwable)>("Problems parsing file (SAXException)", $r11);

        throw $r12;

     label6:
        $r9 := @caughtexception;

        $r10 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String,java.lang.Throwable)>("Problems parsing file (IOException)", $r9);

        throw $r10;

     label7:
        return;

        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch org.xml.sax.SAXException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }
}
