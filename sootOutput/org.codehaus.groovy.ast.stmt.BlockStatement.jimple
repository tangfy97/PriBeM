public class org.codehaus.groovy.ast.stmt.BlockStatement extends org.codehaus.groovy.ast.stmt.Statement
{
    private java.util.List statements;
    private org.codehaus.groovy.ast.VariableScope scope;

    public void <init>()
    {
        org.codehaus.groovy.ast.VariableScope $r2;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r2.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>(java.util.List,org.codehaus.groovy.ast.VariableScope)>($r1, $r2);

        return;
    }

    public void <init>(java.util.List, org.codehaus.groovy.ast.VariableScope)
    {
        java.util.List r2;
        org.codehaus.groovy.ast.VariableScope r3;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: org.codehaus.groovy.ast.VariableScope;

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements> = $r1;

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements> = r2;

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope scope> = r3;

        return;
    }

    public void <init>(org.codehaus.groovy.ast.stmt.Statement[], org.codehaus.groovy.ast.VariableScope)
    {
        java.util.List $r3, $r4;
        org.codehaus.groovy.ast.VariableScope r5;
        org.codehaus.groovy.ast.stmt.Statement[] r2;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r2 := @parameter0: org.codehaus.groovy.ast.stmt.Statement[];

        r5 := @parameter1: org.codehaus.groovy.ast.VariableScope;

        specialinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements> = $r1;

        $r3 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope scope> = r5;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;

        r1 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)>(r1);

        return;
    }

    public java.util.List getStatements()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        return $r1;
    }

    public void addStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        java.util.List $r2;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        $r2 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addStatements(java.util.List)
    {
        java.util.List r1, $r2;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        java.util.List $r4;
        java.lang.StringBuffer $r0, $r3, $r5;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;
        java.lang.String $r2, $r6;

        r1 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = r1.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.stmt.Statement $r7;
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.StringBuffer $r0;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;
        java.lang.Object $r5;
        java.lang.String $r4, $r6;
        boolean $z0, z1;

        r1 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("{ ");

        z1 = 1;

        $r2 = r1.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

     label3:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.codehaus.groovy.ast.stmt.Statement) $r5;

        $r6 = virtualinvoke $r7.<org.codehaus.groovy.ast.stmt.Statement: java.lang.String getText()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" }");

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public boolean isEmpty()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: java.util.List statements>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public void setVariableScope(org.codehaus.groovy.ast.VariableScope)
    {
        org.codehaus.groovy.ast.VariableScope r1;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        r0.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope scope> = r1;

        return;
    }

    public org.codehaus.groovy.ast.VariableScope getVariableScope()
    {
        org.codehaus.groovy.ast.VariableScope $r1;
        org.codehaus.groovy.ast.stmt.BlockStatement r0;

        r0 := @this: org.codehaus.groovy.ast.stmt.BlockStatement;

        $r1 = r0.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope scope>;

        return $r1;
    }
}
