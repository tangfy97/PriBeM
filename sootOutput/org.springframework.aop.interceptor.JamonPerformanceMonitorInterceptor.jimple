public class org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor extends org.springframework.aop.interceptor.AbstractMonitoringInterceptor
{
    private boolean trackAllInvocations;

    public void <init>()
    {
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: void <init>()>();

        r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations> = 0;

        return;
    }

    public void <init>(boolean)
    {
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: void <init>()>();

        r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations> = 0;

        virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: void setUseDynamicLogger(boolean)>(z0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;
        boolean z0, z1;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: void <init>()>();

        r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations> = 0;

        virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: void setUseDynamicLogger(boolean)>(z0);

        virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: void setTrackAllInvocations(boolean)>(z1);

        return;
    }

    public void setTrackAllInvocations(boolean)
    {
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations> = z0;

        return;
    }

    protected boolean isInterceptorEnabled(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log)
    {
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r2;
        org.apache.commons.logging.Log r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: org.apache.commons.logging.Log;

        $z0 = r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean isLogEnabled(org.apache.commons.logging.Log)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable
    {
        java.lang.Throwable $r11;
        org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.String $r2, $r10, $r16;
        boolean $z0, $z1, $z2, $z3;
        com.jamonapi.Monitor $r3;
        java.lang.Object $r4;
        org.apache.commons.logging.Log r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15;

        r0 := @this: org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r5 := @parameter1: org.apache.commons.logging.Log;

        $r2 = virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: java.lang.String createInvocationTraceName(org.aopalliance.intercept.MethodInvocation)>(r1);

        $r3 = staticinvoke <com.jamonapi.MonitorFactory: com.jamonapi.Monitor start(java.lang.String)>($r2);

     label1:
        $r4 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        virtualinvoke $r3.<com.jamonapi.Monitor: com.jamonapi.Monitor stop()>();

        $z0 = r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations>;

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean isLogEnabled(org.apache.commons.logging.Log)>(r5);

        if $z1 == 0 goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("JAMon performance statistics for method [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r10);

     label4:
        return $r4;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r3.<com.jamonapi.Monitor: com.jamonapi.Monitor stop()>();

        $z2 = r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean trackAllInvocations>;

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r0.<org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor: boolean isLogEnabled(org.apache.commons.logging.Log)>(r5);

        if $z3 == 0 goto label7;

     label6:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("JAMon performance statistics for method [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r16);

     label7:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label5;
    }
}
