public class org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry extends java.lang.Object implements org.apache.commons.compress.archivers.ArchiveEntry
{
    private java.lang.String name;
    private boolean hasStream;
    private boolean isDirectory;
    private boolean isAntiItem;
    private boolean hasCreationDate;
    private boolean hasLastModifiedDate;
    private boolean hasAccessDate;
    private long creationDate;
    private long lastModifiedDate;
    private long accessDate;
    private boolean hasWindowsAttributes;
    private int windowsAttributes;
    private boolean hasCrc;
    private long crc;
    private long compressedCrc;
    private long size;
    private long compressedSize;
    private java.lang.Iterable contentMethods;

    public void <init>()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.String name> = r1;

        return;
    }

    public boolean hasStream()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream>;

        return $z0;
    }

    public void setHasStream(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasStream> = z0;

        return;
    }

    public boolean isDirectory()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isDirectory>;

        return $z0;
    }

    public void setDirectory(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isDirectory> = z0;

        return;
    }

    public boolean isAntiItem()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isAntiItem>;

        return $z0;
    }

    public void setAntiItem(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean isAntiItem> = z0;

        return;
    }

    public boolean getHasCreationDate()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCreationDate>;

        return $z0;
    }

    public void setHasCreationDate(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCreationDate> = z0;

        return;
    }

    public java.util.Date getCreationDate()
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date $r2;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCreationDate>;

        if $z0 == 0 goto label1;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long creationDate>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date ntfsTimeToJavaTime(long)>($l0);

        return $r2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The entry doesn\'t have this timestamp");

        throw $r1;
    }

    public void setCreationDate(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long creationDate> = l0;

        return;
    }

    public void setCreationDate(java.util.Date)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        r1 := @parameter0: java.util.Date;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCreationDate> = $z1;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCreationDate>;

        if $z0 == 0 goto label3;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>(r1);

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long creationDate> = $l0;

     label3:
        return;
    }

    public boolean getHasLastModifiedDate()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasLastModifiedDate>;

        return $z0;
    }

    public void setHasLastModifiedDate(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasLastModifiedDate> = z0;

        return;
    }

    public java.util.Date getLastModifiedDate()
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date $r2;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasLastModifiedDate>;

        if $z0 == 0 goto label1;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long lastModifiedDate>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date ntfsTimeToJavaTime(long)>($l0);

        return $r2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The entry doesn\'t have this timestamp");

        throw $r1;
    }

    public void setLastModifiedDate(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long lastModifiedDate> = l0;

        return;
    }

    public void setLastModifiedDate(java.util.Date)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        r1 := @parameter0: java.util.Date;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasLastModifiedDate> = $z1;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasLastModifiedDate>;

        if $z0 == 0 goto label3;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>(r1);

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long lastModifiedDate> = $l0;

     label3:
        return;
    }

    public boolean getHasAccessDate()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasAccessDate>;

        return $z0;
    }

    public void setHasAccessDate(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasAccessDate> = z0;

        return;
    }

    public java.util.Date getAccessDate()
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date $r2;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasAccessDate>;

        if $z0 == 0 goto label1;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long accessDate>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.util.Date ntfsTimeToJavaTime(long)>($l0);

        return $r2;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The entry doesn\'t have this timestamp");

        throw $r1;
    }

    public void setAccessDate(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long accessDate> = l0;

        return;
    }

    public void setAccessDate(java.util.Date)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.util.Date r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        r1 := @parameter0: java.util.Date;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasAccessDate> = $z1;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasAccessDate>;

        if $z0 == 0 goto label3;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long javaTimeToNtfsTime(java.util.Date)>(r1);

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long accessDate> = $l0;

     label3:
        return;
    }

    public boolean getHasWindowsAttributes()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasWindowsAttributes>;

        return $z0;
    }

    public void setHasWindowsAttributes(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasWindowsAttributes> = z0;

        return;
    }

    public int getWindowsAttributes()
    {
        int $i0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: int windowsAttributes>;

        return $i0;
    }

    public void setWindowsAttributes(int)
    {
        int i0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: int windowsAttributes> = i0;

        return;
    }

    public boolean getHasCrc()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCrc>;

        return $z0;
    }

    public void setHasCrc(boolean)
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: boolean hasCrc> = z0;

        return;
    }

    public int getCrc()
    {
        int $i1;
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long crc>;

        $i1 = (int) $l0;

        return $i1;
    }

    public void setCrc(int)
    {
        int i0;
        long $l1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long crc> = $l1;

        return;
    }

    public long getCrcValue()
    {
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long crc>;

        return $l0;
    }

    public void setCrcValue(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long crc> = l0;

        return;
    }

    int getCompressedCrc()
    {
        int $i1;
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedCrc>;

        $i1 = (int) $l0;

        return $i1;
    }

    void setCompressedCrc(int)
    {
        int i0;
        long $l1;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedCrc> = $l1;

        return;
    }

    long getCompressedCrcValue()
    {
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedCrc>;

        return $l0;
    }

    void setCompressedCrcValue(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedCrc> = l0;

        return;
    }

    public long getSize()
    {
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long size>;

        return $l0;
    }

    public void setSize(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long size> = l0;

        return;
    }

    long getCompressedSize()
    {
        long $l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedSize>;

        return $l0;
    }

    void setCompressedSize(long)
    {
        long l0;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        l0 := @parameter0: long;

        r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: long compressedSize> = l0;

        return;
    }

    public void setContentMethods(java.lang.Iterable)
    {
        java.util.Iterator $r3;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration r6;
        java.lang.Iterable r0;
        java.util.List $r4;
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r1;
        java.lang.Object $r5;
        java.util.LinkedList $r2;
        boolean $z0;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        r0 := @parameter0: java.lang.Iterable;

        if r0 == null goto label3;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration) $r5;

        virtualinvoke $r2.<java.util.LinkedList: void addLast(java.lang.Object)>(r6);

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        r1.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.Iterable contentMethods> = $r4;

        goto label4;

     label3:
        r1.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.Iterable contentMethods> = null;

     label4:
        return;
    }

    public java.lang.Iterable getContentMethods()
    {
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry r0;
        java.lang.Iterable $r1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry: java.lang.Iterable contentMethods>;

        return $r1;
    }

    public static java.util.Date ntfsTimeToJavaTime(long)
    {
        java.util.Calendar $r0;
        java.util.TimeZone $r1;
        java.util.Date $r2;
        long $l0, l1, $l2, l3;

        l1 := @parameter0: long;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+0");

        virtualinvoke $r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r1);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int,int,int,int,int)>(1601, 0, 1, 0, 0, 0);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = virtualinvoke $r0.<java.util.Calendar: long getTimeInMillis()>();

        $l2 = l1 / 10000L;

        l3 = $l0 + $l2;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>(long)>(l3);

        return $r2;
    }

    public static long javaTimeToNtfsTime(java.util.Date)
    {
        java.util.TimeZone $r1;
        java.util.Date r2;
        long $l0, $l1, $l2, $l3, $l4;
        java.util.Calendar $r0;

        r2 := @parameter0: java.util.Date;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+0");

        virtualinvoke $r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r1);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int,int,int,int,int)>(1601, 0, 1, 0, 0, 0);

        virtualinvoke $r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = virtualinvoke r2.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke $r0.<java.util.Calendar: long getTimeInMillis()>();

        $l2 = $l0 - $l1;

        $l3 = $l2 * 1000L;

        $l4 = $l3 * 10L;

        return $l4;
    }
}
