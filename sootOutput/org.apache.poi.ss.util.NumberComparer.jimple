public final class org.apache.poi.ss.util.NumberComparer extends java.lang.Object
{

    public void <init>()
    {
        org.apache.poi.ss.util.NumberComparer r0;

        r0 := @this: org.apache.poi.ss.util.NumberComparer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int compare(double, double)
    {
        org.apache.poi.ss.util.NormalisedDecimal $r2, $r3, $r4, $r5;
        org.apache.poi.ss.util.ExpandedDouble $r0, $r1;
        byte $b4, $b5, $b7, $b18;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r10, $r14, $r16, $r18, $r20;
        long $l0, $l1, $l15, $l16;
        int $i2, $i3, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17, i19, $i20, $i21, $i22;
        java.lang.String $r9, $r11, $r15, $r17;
        double d0, d1;
        java.lang.IllegalArgumentException $r19, $r21;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $i2 = staticinvoke <org.apache.poi.ss.util.IEEEDouble: int getBiasedExponent(long)>($l0);

        $i3 = staticinvoke <org.apache.poi.ss.util.IEEEDouble: int getBiasedExponent(long)>($l1);

        if $i2 != 2047 goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Special double values are not allowed: ");

        $r15 = staticinvoke <org.apache.poi.ss.util.NumberComparer: java.lang.String toHex(double)>(d0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r19;

     label01:
        if $i3 != 2047 goto label02;

        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Special double values are not allowed: ");

        $r9 = staticinvoke <org.apache.poi.ss.util.NumberComparer: java.lang.String toHex(double)>(d0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r21;

     label02:
        $b4 = $l0 cmp 0L;

        $i21 = (int) $b4;

        if $i21 >= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z0 = $z1;

        $b5 = $l1 cmp 0L;

        $i22 = (int) $b5;

        if $i22 >= 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        if z0 == $z2 goto label09;

        if z0 == 0 goto label07;

        $b18 = -1;

        goto label08;

     label07:
        $b18 = 1;

     label08:
        return $b18;

     label09:
        i19 = $i2 - $i3;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>(i19);

        if $i6 <= 1 goto label12;

        if z0 == 0 goto label10;

        $i20 = neg i19;

        goto label11;

     label10:
        $i20 = i19;

     label11:
        return $i20;

     label12:
        if $i6 != 1 goto label13;

        goto label14;

     label13:
        $b7 = $l0 cmp $l1;

        if $b7 != 0 goto label14;

        return 0;

     label14:
        if $i2 != 0 goto label16;

        if $i3 != 0 goto label15;

        $l16 = $l0 & 4503599627370495L;

        $l15 = $l1 & 4503599627370495L;

        $i17 = staticinvoke <org.apache.poi.ss.util.NumberComparer: int compareSubnormalNumbers(long,long,boolean)>($l16, $l15, z0);

        return $i17;

     label15:
        $i13 = staticinvoke <org.apache.poi.ss.util.NumberComparer: int compareAcrossSubnormalThreshold(long,long,boolean)>($l1, $l0, z0);

        $i14 = neg $i13;

        return $i14;

     label16:
        if $i3 != 0 goto label17;

        $i12 = staticinvoke <org.apache.poi.ss.util.NumberComparer: int compareAcrossSubnormalThreshold(long,long,boolean)>($l0, $l1, z0);

        return $i12;

     label17:
        $i8 = $i2 - 1023;

        $r0 = staticinvoke <org.apache.poi.ss.util.ExpandedDouble: org.apache.poi.ss.util.ExpandedDouble fromRawBitsAndExponent(long,int)>($l0, $i8);

        $i9 = $i3 - 1023;

        $r1 = staticinvoke <org.apache.poi.ss.util.ExpandedDouble: org.apache.poi.ss.util.ExpandedDouble fromRawBitsAndExponent(long,int)>($l1, $i9);

        $r2 = virtualinvoke $r0.<org.apache.poi.ss.util.ExpandedDouble: org.apache.poi.ss.util.NormalisedDecimal normaliseBaseTen()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.ss.util.NormalisedDecimal: org.apache.poi.ss.util.NormalisedDecimal roundUnits()>();

        $r4 = virtualinvoke $r1.<org.apache.poi.ss.util.ExpandedDouble: org.apache.poi.ss.util.NormalisedDecimal normaliseBaseTen()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.ss.util.NormalisedDecimal: org.apache.poi.ss.util.NormalisedDecimal roundUnits()>();

        $i10 = virtualinvoke $r3.<org.apache.poi.ss.util.NormalisedDecimal: int compareNormalised(org.apache.poi.ss.util.NormalisedDecimal)>($r5);

        if z0 == 0 goto label18;

        $i11 = neg $i10;

        return $i11;

     label18:
        return $i10;
    }

    private static int compareSubnormalNumbers(long, long, boolean)
    {
        long l0, l1;
        byte $b2, $b3, $b6, $b7;
        int $i5, $i8, $i9;
        boolean z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b2 = l0 cmp l1;

        $i8 = (int) $b2;

        if $i8 <= 0 goto label1;

        $b7 = 1;

        $b6 = 1;

        goto label3;

     label1:
        $b3 = l0 cmp l1;

        $i9 = (int) $b3;

        if $i9 >= 0 goto label2;

        $b7 = -1;

        $b6 = -1;

        goto label3;

     label2:
        $b7 = 0;

        $b6 = 0;

     label3:
        if z0 == 0 goto label4;

        $i5 = neg $b6;

        goto label5;

     label4:
        $i5 = $b7;

     label5:
        return $i5;
    }

    private static int compareAcrossSubnormalThreshold(long, long, boolean)
    {
        long l0, l1, l3, l4;
        byte $b2, $b5, $b6, $b7, $b8, $b9, $b10, $b11;
        int $i12, $i13;
        boolean z0;

        l3 := @parameter0: long;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        l1 = l0 & 4503599627370495L;

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label3;

        if z0 == 0 goto label1;

        $b9 = -1;

        goto label2;

     label1:
        $b9 = 1;

     label2:
        return $b9;

     label3:
        l4 = l3 & 4503599627370495L;

        $b5 = l4 cmp 7L;

        $i12 = (int) $b5;

        if $i12 > 0 goto label7;

        $b6 = l1 cmp 4503599627370490L;

        $i13 = (int) $b6;

        if $i13 < 0 goto label7;

        $b7 = l4 cmp 7L;

        if $b7 != 0 goto label4;

        $b8 = l1 cmp 4503599627370490L;

        if $b8 != 0 goto label4;

        return 0;

     label4:
        if z0 == 0 goto label5;

        $b10 = 1;

        goto label6;

     label5:
        $b10 = -1;

     label6:
        return $b10;

     label7:
        if z0 == 0 goto label8;

        $b11 = -1;

        goto label9;

     label8:
        $b11 = 1;

     label9:
        return $b11;
    }

    private static java.lang.String toHex(double)
    {
        long $l0;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r2, $r3, $r5;
        double d0;

        d0 := @parameter0: double;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
