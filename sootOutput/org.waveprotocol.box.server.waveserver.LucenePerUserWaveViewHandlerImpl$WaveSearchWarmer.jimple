class org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer extends java.lang.Object implements org.apache.lucene.search.SearcherWarmer
{
    private final org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId;

    void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: org.waveprotocol.wave.model.wave.ParticipantId makeUnsafeSharedDomainParticipantId(java.lang.String)>(r1);

        r0.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId> = $r2;

        return;
    }

    public void warm(org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.waveprotocol.box.server.waveserver.IndexFieldType $r3;
        org.apache.lucene.index.Term $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer r5;
        org.apache.lucene.search.TermQuery $r1;
        org.apache.lucene.search.BooleanQuery $r0;
        java.lang.String $r4, $r7;
        org.apache.lucene.search.BooleanClause$Occur $r8;
        org.apache.lucene.search.IndexSearcher r9;

        r5 := @this: org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer;

        r9 := @parameter0: org.apache.lucene.search.IndexSearcher;

        $r0 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r0.<org.apache.lucene.search.BooleanQuery: void <init>()>();

        $r1 = new org.apache.lucene.search.TermQuery;

        $r2 = new org.apache.lucene.index.Term;

        $r3 = <org.waveprotocol.box.server.waveserver.IndexFieldType: org.waveprotocol.box.server.waveserver.IndexFieldType WITH>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.IndexFieldType: java.lang.String toString()>();

        $r6 = r5.<org.waveprotocol.box.server.waveserver.LucenePerUserWaveViewHandlerImpl$WaveSearchWarmer: org.waveprotocol.wave.model.wave.ParticipantId sharedDomainParticipantId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r2.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>($r4, $r7);

        specialinvoke $r1.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>($r2);

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke $r0.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r1, $r8);

        virtualinvoke r9.<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query,int)>($r0, 10000);

        return;
    }
}
