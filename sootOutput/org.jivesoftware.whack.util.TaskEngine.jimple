public class org.jivesoftware.whack.util.TaskEngine extends java.lang.Object
{
    private static org.jivesoftware.whack.util.TaskEngine instance;
    private java.util.Timer timer;
    private java.util.concurrent.ExecutorService executor;
    private java.util.Map wrappedTasks;

    public static org.jivesoftware.whack.util.TaskEngine getInstance()
    {
        org.jivesoftware.whack.util.TaskEngine $r0;

        $r0 = <org.jivesoftware.whack.util.TaskEngine: org.jivesoftware.whack.util.TaskEngine instance>;

        return $r0;
    }

    private void <init>()
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Timer $r2;
        org.jivesoftware.whack.util.TaskEngine$1 $r3;
        java.util.concurrent.ExecutorService $r4;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks> = $r1;

        $r2 = new java.util.Timer;

        specialinvoke $r2.<java.util.Timer: void <init>(java.lang.String,boolean)>("timer-whack", 1);

        r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer> = $r2;

        $r3 = new org.jivesoftware.whack.util.TaskEngine$1;

        specialinvoke $r3.<org.jivesoftware.whack.util.TaskEngine$1: void <init>(org.jivesoftware.whack.util.TaskEngine)>(r0);

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>($r3);

        r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor> = $r4;

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.Future $r3;
        org.jivesoftware.whack.util.TaskEngine r0;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1);

        return $r3;
    }

    public void schedule(java.util.TimerTask, long)
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r1;
        java.util.Timer $r3;
        long l0;
        java.util.TimerTask r2;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        l0 := @parameter1: long;

        $r3 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        $r1 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r1.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r0, r2);

        virtualinvoke $r3.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r1, l0);

        return;
    }

    public void schedule(java.util.TimerTask, java.util.Date)
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        java.util.Date r4;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r1;
        java.util.Timer $r3;
        java.util.TimerTask r2;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        r4 := @parameter1: java.util.Date;

        $r3 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        $r1 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r1.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r0, r2);

        virtualinvoke $r3.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date)>($r1, r4);

        return;
    }

    public void schedule(java.util.TimerTask, long, long)
    {
        org.jivesoftware.whack.util.TaskEngine r1;
        java.util.Map $r3;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r0;
        long l0, l1;
        java.util.Timer $r4;
        java.util.TimerTask r2;

        r1 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r0.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r1, r2);

        $r3 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

        $r4 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        virtualinvoke $r4.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r0, l0, l1);

        return;
    }

    public void schedule(java.util.TimerTask, java.util.Date, long)
    {
        org.jivesoftware.whack.util.TaskEngine r1;
        java.util.Date r4;
        java.util.Map $r3;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r0;
        long l0;
        java.util.Timer $r5;
        java.util.TimerTask r2;

        r1 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        r4 := @parameter1: java.util.Date;

        l0 := @parameter2: long;

        $r0 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r0.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r1, r2);

        $r3 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

        $r5 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,java.util.Date,long)>($r0, r4, l0);

        return;
    }

    public void scheduleAtFixedRate(java.util.TimerTask, long, long)
    {
        org.jivesoftware.whack.util.TaskEngine r1;
        java.util.Map $r3;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r0;
        long l0, l1;
        java.util.Timer $r4;
        java.util.TimerTask r2;

        r1 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r0.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r1, r2);

        $r3 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

        $r4 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        virtualinvoke $r4.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r0, l0, l1);

        return;
    }

    public void scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)
    {
        org.jivesoftware.whack.util.TaskEngine r1;
        java.util.Date r4;
        java.util.Map $r3;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper $r0;
        long l0;
        java.util.Timer $r5;
        java.util.TimerTask r2;

        r1 := @this: org.jivesoftware.whack.util.TaskEngine;

        r2 := @parameter0: java.util.TimerTask;

        r4 := @parameter1: java.util.Date;

        l0 := @parameter2: long;

        $r0 = new org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper;

        specialinvoke $r0.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: void <init>(org.jivesoftware.whack.util.TaskEngine,java.util.TimerTask)>(r1, r2);

        $r3 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

        $r5 = r1.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        virtualinvoke $r5.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)>($r0, r4, l0);

        return;
    }

    public void cancelScheduledTask(java.util.TimerTask)
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        java.util.Map $r2;
        org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper r4;
        java.lang.Object $r3;
        java.util.TimerTask r1;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        r1 := @parameter0: java.util.TimerTask;

        $r2 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Map wrappedTasks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper) $r3;

        if r4 == null goto label1;

        virtualinvoke r4.<org.jivesoftware.whack.util.TaskEngine$TimerTaskWrapper: boolean cancel()>();

     label1:
        return;
    }

    public void shutdown()
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        java.util.Timer $r2, $r3;
        java.util.concurrent.ExecutorService $r1, $r4;

        r0 := @this: org.jivesoftware.whack.util.TaskEngine;

        $r1 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor>;

        if $r1 == null goto label1;

        $r4 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor> = null;

     label1:
        $r2 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        if $r2 == null goto label2;

        $r3 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer>;

        virtualinvoke $r3.<java.util.Timer: void cancel()>();

        r0.<org.jivesoftware.whack.util.TaskEngine: java.util.Timer timer> = null;

     label2:
        return;
    }

    static java.util.concurrent.ExecutorService access$000(org.jivesoftware.whack.util.TaskEngine)
    {
        org.jivesoftware.whack.util.TaskEngine r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @parameter0: org.jivesoftware.whack.util.TaskEngine;

        $r1 = r0.<org.jivesoftware.whack.util.TaskEngine: java.util.concurrent.ExecutorService executor>;

        return $r1;
    }

    static void <clinit>()
    {
        org.jivesoftware.whack.util.TaskEngine $r0;

        $r0 = new org.jivesoftware.whack.util.TaskEngine;

        specialinvoke $r0.<org.jivesoftware.whack.util.TaskEngine: void <init>()>();

        <org.jivesoftware.whack.util.TaskEngine: org.jivesoftware.whack.util.TaskEngine instance> = $r0;

        return;
    }
}
