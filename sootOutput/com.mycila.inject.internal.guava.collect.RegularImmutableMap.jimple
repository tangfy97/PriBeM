final class com.mycila.inject.internal.guava.collect.RegularImmutableMap extends com.mycila.inject.internal.guava.collect.ImmutableMap
{
    private final transient com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries;
    private final transient com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] table;
    private final transient int mask;
    private final transient int keySetHashCode;
    private transient com.mycila.inject.internal.guava.collect.ImmutableSet entrySet;
    private transient com.mycila.inject.internal.guava.collect.ImmutableSet keySet;
    private transient com.mycila.inject.internal.guava.collect.ImmutableCollection values;
    private static final long serialVersionUID;

    transient void <init>(java.util.Map$Entry[])
    {
        java.lang.Object[] $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.util.Map$Entry[] r1;
        boolean $z0, $z1;
        java.util.Map$Entry r4;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r2, $r3, $r6, $r9, $r10;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;
        java.lang.Object $r5, $r7, $r11;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry $r8, r13;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r1 := @parameter0: java.util.Map$Entry[];

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMap: void <init>()>();

        i0 = lengthof r1;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] createEntryArray(int)>(i0);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries> = $r2;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.RegularImmutableMap: int chooseTableSize(int)>(i0);

        $r3 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] createEntryArray(int)>($i1);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] table> = $r3;

        $i2 = $i1 - 1;

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int mask> = $i2;

        i7 = 0;

        i8 = 0;

     label1:
        if i8 >= i0 goto label6;

        r4 = r1[i8];

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i3 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        i7 = i7 + $i3;

        $i4 = staticinvoke <com.mycila.inject.internal.guava.collect.Hashing: int smear(int)>($i3);

        $i5 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int mask>;

        i6 = $i4 & $i5;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] table>;

        r13 = $r6[i6];

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry newLinkedEntry(java.lang.Object,java.lang.Object,com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry)>($r5, $r7, r13);

        $r9 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] table>;

        $r9[i6] = $r8;

        $r10 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries>;

        $r10[i8] = $r8;

     label2:
        if r13 == null goto label5;

        $r11 = interfaceinvoke r13.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry: java.lang.Object getKey()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r5;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "duplicate key: %s", $r12);

        r13 = interfaceinvoke r13.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry next()>();

        goto label2;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int keySetHashCode> = i7;

        return;
    }

    private static int chooseTableSize(int)
    {
        java.lang.Object[] $r0;
        int i0, $i1, i2;
        java.lang.Integer $r1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i0);

        i2 = $i1 << 1;

        if i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "table too large: %s", $r0);

        return i2;
    }

    private com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] createEntryArray(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        i0 := @parameter0: int;

        $r0 = newarray (com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry)[i0];

        return $r0;
    }

    private static com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry newLinkedEntry(java.lang.Object, java.lang.Object, com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$TerminalEntry $r4;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry r0, $r3;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$NonTerminalEntry $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r0 := @parameter2: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry;

        if r0 != null goto label1;

        $r4 = new com.mycila.inject.internal.guava.collect.RegularImmutableMap$TerminalEntry;

        $r3 = $r4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$TerminalEntry: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label2;

     label1:
        $r5 = new com.mycila.inject.internal.guava.collect.RegularImmutableMap$NonTerminalEntry;

        $r3 = $r5;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$NonTerminalEntry: void <init>(java.lang.Object,java.lang.Object,com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry)>(r1, r2, r0);

     label2:
        return $r3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object r0, $r3, $r4;
        boolean $z0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry r5;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.Hashing: int smear(int)>($i0);

        $i2 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int mask>;

        i3 = $i1 & $i2;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] table>;

        r5 = $r2[i3];

     label2:
        if r5 == null goto label4;

        $r3 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry: java.lang.Object getValue()>();

        return $r4;

     label3:
        r5 = interfaceinvoke r5.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry next()>();

        goto label2;

     label4:
        return null;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r1;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r1;
        int i0, i1;
        java.lang.Object r0, $r4;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry r3;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        r2 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries>;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        return 0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet entrySet()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$EntrySet $r3;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.RegularImmutableMap$EntrySet;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.RegularImmutableMap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet keySet()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$KeySet $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.RegularImmutableMap$KeySet;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$KeySet: void <init>(com.mycila.inject.internal.guava.collect.RegularImmutableMap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableCollection values()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$Values $r3;
        com.mycila.inject.internal.guava.collect.ImmutableCollection r1, $r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableCollection values>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.RegularImmutableMap$Values;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.RegularImmutableMap$Values: void <init>(com.mycila.inject.internal.guava.collect.RegularImmutableMap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableCollection values> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r3;
        com.mycila.inject.internal.guava.base.Joiner $r4;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int size()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.lang.StringBuilder newStringBuilderForCollection(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r4 = <com.mycila.inject.internal.guava.collect.Collections2: com.mycila.inject.internal.guava.base.Joiner STANDARD_JOINER>;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries>;

        virtualinvoke $r4.<com.mycila.inject.internal.guava.base.Joiner: java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object[])>($r2, $r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r1;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableCollection values()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r1;
    }

    static com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] access$000(com.mycila.inject.internal.guava.collect.RegularImmutableMap)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] $r1;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: com.mycila.inject.internal.guava.collect.RegularImmutableMap$LinkedEntry[] entries>;

        return $r1;
    }

    static int access$100(com.mycila.inject.internal.guava.collect.RegularImmutableMap)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.RegularImmutableMap r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.RegularImmutableMap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableMap: int keySetHashCode>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.RegularImmutableMap: long serialVersionUID> = 0L;

        return;
    }
}
