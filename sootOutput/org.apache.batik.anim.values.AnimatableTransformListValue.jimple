public class org.apache.batik.anim.values.AnimatableTransformListValue extends org.apache.batik.anim.values.AnimatableValue
{
    protected static org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWX;
    protected static org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWY;
    protected static org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SCALE;
    protected static org.apache.batik.dom.svg.SVGOMTransform IDENTITY_ROTATE;
    protected static org.apache.batik.dom.svg.SVGOMTransform IDENTITY_TRANSLATE;
    protected java.util.Vector transforms;

    protected void <init>(org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        org.apache.batik.anim.values.AnimatableTransformListValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        specialinvoke r0.<org.apache.batik.anim.values.AnimatableValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>(r1);

        return;
    }

    public void <init>(org.apache.batik.dom.anim.AnimationTarget, org.apache.batik.dom.svg.AbstractSVGTransform)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        java.util.Vector $r2, $r4;
        org.apache.batik.anim.values.AnimatableTransformListValue r0;
        org.apache.batik.dom.svg.AbstractSVGTransform r3;

        r0 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        r3 := @parameter1: org.apache.batik.dom.svg.AbstractSVGTransform;

        specialinvoke r0.<org.apache.batik.anim.values.AnimatableValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>(r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r2;

        $r4 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void <init>(org.apache.batik.dom.anim.AnimationTarget, java.util.List)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        java.util.List r3;
        java.util.Vector $r2;
        org.apache.batik.anim.values.AnimatableTransformListValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        r3 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.batik.anim.values.AnimatableValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>(r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(java.util.Collection)>(r3);

        r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r2;

        return;
    }

    public org.apache.batik.anim.values.AnimatableValue interpolate(org.apache.batik.anim.values.AnimatableValue, org.apache.batik.anim.values.AnimatableValue, float, org.apache.batik.anim.values.AnimatableValue, int)
    {
        java.util.Vector $r4, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r19, $r22, $r23, $r25, $r26, $r28, $r29, $r36, $r38, $r39, $r41, $r45, $r53, $r54;
        org.apache.batik.anim.values.AnimatableTransformListValue r1, r3, r5, r46, $r52;
        short $s7, $s8, s15;
        org.w3c.dom.svg.SVGMatrix $r31, $r32, $r33, $r34;
        boolean $z0, $z1;
        float $f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, f33, f34, f35, f36, f37, f38, f39, f40;
        org.apache.batik.dom.svg.AbstractSVGTransform r47, r48, r49, r50, r51;
        org.apache.batik.anim.values.AnimatableValue r0, r2, r7;
        org.apache.batik.dom.anim.AnimationTarget $r43;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i9, $i10, i11, i12, i13, i14, $i16, $i17, $i18, $i19, $i20, $i21;
        org.apache.batik.dom.svg.SVGOMTransform $r55, $r56, $r57;
        java.lang.Object $r12, $r16, $r18, $r20, $r24, $r27, $r30;

        r5 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r7 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r0 := @parameter1: org.apache.batik.anim.values.AnimatableValue;

        f1 := @parameter2: float;

        r2 := @parameter3: org.apache.batik.anim.values.AnimatableValue;

        i2 := @parameter4: int;

        r1 = (org.apache.batik.anim.values.AnimatableTransformListValue) r0;

        r3 = (org.apache.batik.anim.values.AnimatableTransformListValue) r2;

        if r2 != null goto label01;

        $i10 = 0;

        goto label02;

     label01:
        $r4 = r3.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i10 = virtualinvoke $r4.<java.util.Vector: int size()>();

     label02:
        i0 = $i10;

        $r6 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        $i3 = $i10 * i2;

        $i9 = $i1 + $i3;

        if r7 != null goto label03;

        $r52 = new org.apache.batik.anim.values.AnimatableTransformListValue;

        $r43 = r5.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        specialinvoke $r52.<org.apache.batik.anim.values.AnimatableTransformListValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>($r43);

        r46 = $r52;

        $r53 = new java.util.Vector;

        specialinvoke $r53.<java.util.Vector: void <init>(int)>($i9);

        $r52.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r53;

        $r45 = $r52.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r45.<java.util.Vector: void setSize(int)>($i9);

        goto label05;

     label03:
        r46 = (org.apache.batik.anim.values.AnimatableTransformListValue) r7;

        $r8 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        if $r8 != null goto label04;

        $r54 = new java.util.Vector;

        specialinvoke $r54.<java.util.Vector: void <init>(int)>($i9);

        r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r54;

        $r41 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r41.<java.util.Vector: void setSize(int)>($i9);

        goto label05;

     label04:
        $r9 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i4 = virtualinvoke $r9.<java.util.Vector: int size()>();

        if $i4 == $i9 goto label05;

        $r39 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r39.<java.util.Vector: void setSize(int)>($i9);

     label05:
        i11 = 0;

        i12 = 0;

        goto label09;

     label06:
        i13 = 0;

        goto label08;

     label07:
        $r11 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r10 = r3.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r12 = virtualinvoke $r10.<java.util.Vector: java.lang.Object elementAt(int)>(i13);

        virtualinvoke $r11.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r12, i11);

        i13 = i13 + 1;

        i11 = i11 + 1;

     label08:
        if i13 < i0 goto label07;

        i12 = i12 + 1;

     label09:
        if i12 < i2 goto label06;

        i14 = 0;

        goto label11;

     label10:
        $r15 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r14 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r16 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>(i14);

        virtualinvoke $r15.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r16, i11);

        i14 = i14 + 1;

        i11 = i11 + 1;

     label11:
        $r13 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i5 = virtualinvoke $r13.<java.util.Vector: int size()>();

        $i6 = $i5 - 1;

        if i14 < $i6 goto label10;

        if r0 == null goto label28;

        $r23 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r24 = virtualinvoke $r23.<java.util.Vector: java.lang.Object lastElement()>();

        r47 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r24;

        r48 = null;

        $r25 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z0 = virtualinvoke $r25.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label18;

        $s8 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        s15 = $s8;

        $i16 = (int) $s8;

        tableswitch($i16)
        {
            case 2: goto label16;
            case 3: goto label14;
            case 4: goto label15;
            case 5: goto label12;
            case 6: goto label13;
            default: goto label17;
        };

     label12:
        r48 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWX>;

        goto label17;

     label13:
        r48 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWY>;

        goto label17;

     label14:
        r48 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SCALE>;

        goto label17;

     label15:
        r48 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_ROTATE>;

        goto label17;

     label16:
        r48 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_TRANSLATE>;

     label17:
        goto label19;

     label18:
        $r26 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r27 = virtualinvoke $r26.<java.util.Vector: java.lang.Object lastElement()>();

        r48 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r27;

        s15 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

     label19:
        $s7 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i17 = (int) s15;

        $i18 = (int) $s7;

        if $i17 != $i18 goto label27;

        $r28 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z1 = virtualinvoke $r28.<java.util.Vector: boolean isEmpty()>();

        if $z1 == 0 goto label20;

        $r55 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r55.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        r49 = $r55;

        $r38 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r38.<java.util.Vector: boolean add(java.lang.Object)>($r55);

        goto label21;

     label20:
        $r29 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r30 = virtualinvoke $r29.<java.util.Vector: java.lang.Object elementAt(int)>(i11);

        r49 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r30;

        if r49 != null goto label21;

        $r56 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r56.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        r49 = $r56;

        $r36 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r36.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r56, i11);

     label21:
        $i19 = (int) s15;

        tableswitch($i19)
        {
            case 2: goto label26;
            case 3: goto label24;
            case 4: goto label25;
            case 5: goto label22;
            case 6: goto label22;
            default: goto label27;
        };

     label22:
        $f0 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f2 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f3 = $f2 - $f0;

        $f4 = f1 * $f3;

        f33 = $f0 + $f4;

        $i20 = (int) s15;

        if $i20 != 5 goto label23;

        virtualinvoke r49.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewX(float)>(f33);

        goto label27;

     label23:
        $i21 = (int) s15;

        if $i21 != 6 goto label27;

        virtualinvoke r49.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewY(float)>(f33);

        goto label27;

     label24:
        $r31 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $r32 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f17 = interfaceinvoke $r31.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f18 = interfaceinvoke $r31.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f19 = interfaceinvoke $r32.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f20 = $f19 - $f17;

        $f21 = f1 * $f20;

        f34 = $f17 + $f21;

        $f22 = interfaceinvoke $r32.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f23 = $f22 - $f18;

        $f24 = f1 * $f23;

        f35 = $f18 + $f24;

        virtualinvoke r49.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>(f34, f35);

        goto label27;

     label25:
        $f5 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f6 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        $f7 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f8 = $f7 - $f5;

        $f9 = f1 * $f8;

        f36 = $f5 + $f9;

        $f10 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        $f11 = $f10 - $f6;

        $f12 = f1 * $f11;

        f37 = $f6 + $f12;

        $f13 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f14 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f15 = $f14 - $f13;

        $f16 = f1 * $f15;

        f38 = $f13 + $f16;

        virtualinvoke r49.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>(f38, f36, f37);

        goto label27;

     label26:
        $r33 = virtualinvoke r48.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $r34 = virtualinvoke r47.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f25 = interfaceinvoke $r33.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f26 = interfaceinvoke $r33.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f27 = interfaceinvoke $r34.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f28 = $f27 - $f25;

        $f29 = f1 * $f28;

        f39 = $f25 + $f29;

        $f30 = interfaceinvoke $r34.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f31 = $f30 - $f26;

        $f32 = f1 * $f31;

        f40 = $f26 + $f32;

        virtualinvoke r49.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>(f39, f40);

        goto label27;

     label27:
        goto label30;

     label28:
        $r17 = r5.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r18 = virtualinvoke $r17.<java.util.Vector: java.lang.Object lastElement()>();

        r50 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r18;

        $r19 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r20 = virtualinvoke $r19.<java.util.Vector: java.lang.Object elementAt(int)>(i11);

        r51 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r20;

        if r51 != null goto label29;

        $r57 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r57.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        r51 = $r57;

        $r22 = r46.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r22.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r57, i11);

     label29:
        virtualinvoke r51.<org.apache.batik.dom.svg.AbstractSVGTransform: void assign(org.apache.batik.dom.svg.AbstractSVGTransform)>(r50);

     label30:
        r46.<org.apache.batik.anim.values.AnimatableValue: boolean hasChanged> = 1;

        return r46;
    }

    public static org.apache.batik.anim.values.AnimatableTransformListValue interpolate(org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, float, float, org.apache.batik.anim.values.AnimatableTransformListValue, int)
    {
        java.util.Vector $r1, $r2, $r3, $r4, $r5, $r8, $r11, $r14, $r19, $r23, $r33, $r34, $r36, $r40, $r45, $r46;
        org.apache.batik.anim.values.AnimatableTransformListValue r0, r7, r10, r18, r22, r41, $r44;
        short $s4;
        org.w3c.dom.svg.SVGMatrix $r16, $r17, $r26, $r27, $r28, $r29, $r30, $r31;
        float f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, f15;
        org.apache.batik.dom.svg.AbstractSVGTransform r13, r21, r25, r42, r43;
        org.apache.batik.dom.anim.AnimationTarget $r38;
        int i0, i1, $i2, $i3, $i5, $i6, i7, i8, i9, $i10, $i11, $i12;
        org.apache.batik.dom.svg.SVGOMTransform $r47;
        java.lang.Object $r6, $r9, $r12, $r15, $r20, $r24;

        r41 := @parameter0: org.apache.batik.anim.values.AnimatableTransformListValue;

        r7 := @parameter1: org.apache.batik.anim.values.AnimatableTransformListValue;

        r10 := @parameter2: org.apache.batik.anim.values.AnimatableTransformListValue;

        r18 := @parameter3: org.apache.batik.anim.values.AnimatableTransformListValue;

        r22 := @parameter4: org.apache.batik.anim.values.AnimatableTransformListValue;

        f0 := @parameter5: float;

        f4 := @parameter6: float;

        r0 := @parameter7: org.apache.batik.anim.values.AnimatableTransformListValue;

        i1 := @parameter8: int;

        if r0 != null goto label01;

        $i6 = 0;

        goto label02;

     label01:
        $r1 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i6 = virtualinvoke $r1.<java.util.Vector: int size()>();

     label02:
        i0 = $i6;

        $i2 = $i6 * i1;

        $i5 = $i2 + 1;

        if r41 != null goto label03;

        $r44 = new org.apache.batik.anim.values.AnimatableTransformListValue;

        $r38 = r18.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        specialinvoke $r44.<org.apache.batik.anim.values.AnimatableTransformListValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>($r38);

        r41 = $r44;

        $r45 = new java.util.Vector;

        specialinvoke $r45.<java.util.Vector: void <init>(int)>($i5);

        $r44.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r45;

        $r40 = $r44.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r40.<java.util.Vector: void setSize(int)>($i5);

        goto label05;

     label03:
        $r2 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        if $r2 != null goto label04;

        $r46 = new java.util.Vector;

        specialinvoke $r46.<java.util.Vector: void <init>(int)>($i5);

        r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r46;

        $r36 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r36.<java.util.Vector: void setSize(int)>($i5);

        goto label05;

     label04:
        $r3 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i3 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i3 == $i5 goto label05;

        $r34 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r34.<java.util.Vector: void setSize(int)>($i5);

     label05:
        i7 = 0;

        i8 = 0;

        goto label09;

     label06:
        i9 = 0;

        goto label08;

     label07:
        $r5 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r4 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        virtualinvoke $r5.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r6, i7);

        i9 = i9 + 1;

        i7 = i7 + 1;

     label08:
        if i9 < i0 goto label07;

        i8 = i8 + 1;

     label09:
        if i8 < i1 goto label06;

        $r8 = r7.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r42 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $r11 = r10.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r12 = virtualinvoke $r11.<java.util.Vector: java.lang.Object lastElement()>();

        r13 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r12;

        $r14 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r15 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        r43 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r15;

        if r43 != null goto label10;

        $r47 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r47.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        r43 = $r47;

        $r33 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r33.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r47, i7);

     label10:
        $s4 = virtualinvoke r42.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i10 = (int) $s4;

        if $i10 != 3 goto label11;

        $r30 = virtualinvoke r42.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        f14 = interfaceinvoke $r30.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $r31 = virtualinvoke r13.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        f15 = interfaceinvoke $r31.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        goto label12;

     label11:
        $r16 = virtualinvoke r42.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        f14 = interfaceinvoke $r16.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $r17 = virtualinvoke r13.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        f15 = interfaceinvoke $r17.<org.w3c.dom.svg.SVGMatrix: float getF()>();

     label12:
        if r18 == null goto label14;

        $r19 = r18.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r20 = virtualinvoke $r19.<java.util.Vector: java.lang.Object lastElement()>();

        r21 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r20;

        $r23 = r22.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r24 = virtualinvoke $r23.<java.util.Vector: java.lang.Object lastElement()>();

        r25 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r24;

        $i11 = (int) $s4;

        if $i11 != 3 goto label13;

        $r28 = virtualinvoke r21.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f8 = interfaceinvoke $r28.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f9 = $f8 - f14;

        $f10 = f0 * $f9;

        f14 = f14 + $f10;

        $r29 = virtualinvoke r25.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f11 = interfaceinvoke $r29.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f12 = $f11 - f15;

        $f13 = f4 * $f12;

        f15 = f15 + $f13;

        goto label14;

     label13:
        $r26 = virtualinvoke r21.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f1 = interfaceinvoke $r26.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f2 = $f1 - f14;

        $f3 = f0 * $f2;

        f14 = f14 + $f3;

        $r27 = virtualinvoke r25.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $f5 = interfaceinvoke $r27.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f6 = $f5 - f15;

        $f7 = f4 * $f6;

        f15 = f15 + $f7;

     label14:
        $i12 = (int) $s4;

        if $i12 != 3 goto label15;

        virtualinvoke r43.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>(f14, f15);

        goto label16;

     label15:
        virtualinvoke r43.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>(f14, f15);

     label16:
        r41.<org.apache.batik.anim.values.AnimatableValue: boolean hasChanged> = 1;

        return r41;
    }

    public static org.apache.batik.anim.values.AnimatableTransformListValue interpolate(org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, org.apache.batik.anim.values.AnimatableTransformListValue, float, float, float, org.apache.batik.anim.values.AnimatableTransformListValue, int)
    {
        java.util.Vector $r1, $r2, $r3, $r4, $r5, $r8, $r11, $r15, $r18, $r21, $r25, $r29, $r33, $r34, $r35, $r36, $r39, $r40;
        org.apache.batik.anim.values.AnimatableTransformListValue r0, r7, r10, r14, r20, r24, r28, $r37, r41;
        float $f0, $f1, $f2, f3, $f4, $f5, $f6, f7, $f8, $f9, $f10, f11, $f12, $f13, $f14, f15, f16, f17;
        org.apache.batik.dom.svg.AbstractSVGTransform r13, r17, r23, r27, r31, r42, r43;
        org.apache.batik.dom.anim.AnimationTarget $r38;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.apache.batik.dom.svg.SVGOMTransform $r32;
        java.lang.Object $r6, $r9, $r12, $r16, $r19, $r22, $r26, $r30;

        r41 := @parameter0: org.apache.batik.anim.values.AnimatableTransformListValue;

        r7 := @parameter1: org.apache.batik.anim.values.AnimatableTransformListValue;

        r10 := @parameter2: org.apache.batik.anim.values.AnimatableTransformListValue;

        r14 := @parameter3: org.apache.batik.anim.values.AnimatableTransformListValue;

        r20 := @parameter4: org.apache.batik.anim.values.AnimatableTransformListValue;

        r24 := @parameter5: org.apache.batik.anim.values.AnimatableTransformListValue;

        r28 := @parameter6: org.apache.batik.anim.values.AnimatableTransformListValue;

        f3 := @parameter7: float;

        f7 := @parameter8: float;

        f11 := @parameter9: float;

        r0 := @parameter10: org.apache.batik.anim.values.AnimatableTransformListValue;

        i1 := @parameter11: int;

        if r0 != null goto label01;

        $i5 = 0;

        goto label02;

     label01:
        $r1 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i5 = virtualinvoke $r1.<java.util.Vector: int size()>();

     label02:
        i0 = $i5;

        $i2 = $i5 * i1;

        $i4 = $i2 + 1;

        if r41 != null goto label03;

        $r37 = new org.apache.batik.anim.values.AnimatableTransformListValue;

        $r38 = r20.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        specialinvoke $r37.<org.apache.batik.anim.values.AnimatableTransformListValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>($r38);

        r41 = $r37;

        $r39 = new java.util.Vector;

        specialinvoke $r39.<java.util.Vector: void <init>(int)>($i4);

        $r37.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r39;

        $r40 = $r37.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r40.<java.util.Vector: void setSize(int)>($i4);

        goto label05;

     label03:
        $r2 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        if $r2 != null goto label04;

        $r35 = new java.util.Vector;

        specialinvoke $r35.<java.util.Vector: void <init>(int)>($i4);

        r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms> = $r35;

        $r36 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r36.<java.util.Vector: void setSize(int)>($i4);

        goto label05;

     label04:
        $r3 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $i3 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i3 == $i4 goto label05;

        $r34 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r34.<java.util.Vector: void setSize(int)>($i4);

     label05:
        i6 = 0;

        i7 = 0;

        goto label09;

     label06:
        i8 = 0;

        goto label08;

     label07:
        $r5 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r4 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i8);

        virtualinvoke $r5.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r6, i6);

        i8 = i8 + 1;

        i6 = i6 + 1;

     label08:
        if i8 < i0 goto label07;

        i7 = i7 + 1;

     label09:
        if i7 < i1 goto label06;

        $r8 = r7.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r42 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $r11 = r10.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r12 = virtualinvoke $r11.<java.util.Vector: java.lang.Object lastElement()>();

        r13 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r12;

        $r15 = r14.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r16 = virtualinvoke $r15.<java.util.Vector: java.lang.Object lastElement()>();

        r17 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r16;

        $r18 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r19 = virtualinvoke $r18.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        r43 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r19;

        if r43 != null goto label10;

        $r32 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r32.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        r43 = $r32;

        $r33 = r41.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        virtualinvoke $r33.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r32, i6);

     label10:
        $f0 = virtualinvoke r42.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        f15 = $f0;

        $f1 = virtualinvoke r13.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        f16 = $f1;

        $f2 = virtualinvoke r17.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        f17 = $f2;

        if r20 == null goto label11;

        $r21 = r20.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r22 = virtualinvoke $r21.<java.util.Vector: java.lang.Object lastElement()>();

        r23 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r22;

        $r25 = r24.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r26 = virtualinvoke $r25.<java.util.Vector: java.lang.Object lastElement()>();

        r27 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r26;

        $r29 = r28.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r30 = virtualinvoke $r29.<java.util.Vector: java.lang.Object lastElement()>();

        r31 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r30;

        $f4 = virtualinvoke r23.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f5 = $f4 - $f0;

        $f6 = f3 * $f5;

        f15 = $f0 + $f6;

        $f8 = virtualinvoke r27.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f9 = $f8 - $f1;

        $f10 = f7 * $f9;

        f16 = $f1 + $f10;

        $f12 = virtualinvoke r31.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        $f13 = $f12 - $f2;

        $f14 = f11 * $f13;

        f17 = $f2 + $f14;

     label11:
        virtualinvoke r43.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>(f15, f16, f17);

        r41.<org.apache.batik.anim.values.AnimatableValue: boolean hasChanged> = 1;

        return r41;
    }

    public java.util.Iterator getTransforms()
    {
        java.util.Vector $r1;
        org.apache.batik.anim.values.AnimatableTransformListValue r0;
        java.util.Iterator $r2;

        r0 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        $r1 = r0.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r2 = virtualinvoke $r1.<java.util.AbstractList: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean canPace()
    {
        org.apache.batik.anim.values.AnimatableTransformListValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        return 1;
    }

    public float distanceTo(org.apache.batik.anim.values.AnimatableValue)
    {
        java.util.Vector $r3, $r4, $r5, $r8;
        org.apache.batik.anim.values.AnimatableTransformListValue r1, r2;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21;
        org.apache.batik.dom.svg.AbstractSVGTransform r7, r10;
        org.apache.batik.anim.values.AnimatableValue r0;
        short $s0, $s1;
        int $i2, $i3, $i4;
        org.w3c.dom.svg.SVGMatrix $r11, $r12;
        java.lang.Object $r6, $r9;

        r2 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r1 = (org.apache.batik.anim.values.AnimatableTransformListValue) r0;

        $r3 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z1 = virtualinvoke $r4.<java.util.Vector: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 0.0F;

     label2:
        $r5 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object lastElement()>();

        r7 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r6;

        $r8 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r10 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $s0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $s1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 == $i3 goto label3;

        return 0.0F;

     label3:
        $r11 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $r12 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            default: goto label7;
        };

     label4:
        $f13 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f14 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f15 = $f13 - $f14;

        $f16 = staticinvoke <java.lang.Math: float abs(float)>($f15);

        $f17 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f18 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f19 = $f17 - $f18;

        $f20 = staticinvoke <java.lang.Math: float abs(float)>($f19);

        $f21 = $f16 + $f20;

        return $f21;

     label5:
        $f4 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f5 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f6 = $f4 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $f8 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f9 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f10 = $f8 - $f9;

        $f11 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        $f12 = $f7 + $f11;

        return $f12;

     label6:
        $f0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        return $f3;

     label7:
        return 0.0F;
    }

    public float distanceTo1(org.apache.batik.anim.values.AnimatableValue)
    {
        java.util.Vector $r3, $r4, $r5, $r8;
        org.apache.batik.anim.values.AnimatableTransformListValue r1, r2;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        org.apache.batik.dom.svg.AbstractSVGTransform r7, r10;
        org.apache.batik.anim.values.AnimatableValue r0;
        short $s0, $s1;
        int $i2, $i3, $i4;
        org.w3c.dom.svg.SVGMatrix $r11, $r12;
        java.lang.Object $r6, $r9;

        r2 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r1 = (org.apache.batik.anim.values.AnimatableTransformListValue) r0;

        $r3 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z1 = virtualinvoke $r4.<java.util.Vector: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 0.0F;

     label2:
        $r5 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object lastElement()>();

        r7 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r6;

        $r8 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r10 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $s0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $s1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 == $i3 goto label3;

        return 0.0F;

     label3:
        $r11 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $r12 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            default: goto label7;
        };

     label4:
        $f8 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f9 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f10 = $f8 - $f9;

        $f11 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        return $f11;

     label5:
        $f4 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f5 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f6 = $f4 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        return $f7;

     label6:
        $f0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        return $f3;

     label7:
        return 0.0F;
    }

    public float distanceTo2(org.apache.batik.anim.values.AnimatableValue)
    {
        java.util.Vector $r3, $r4, $r5, $r8;
        org.apache.batik.anim.values.AnimatableTransformListValue r1, r2;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        org.apache.batik.dom.svg.AbstractSVGTransform r7, r10;
        org.apache.batik.anim.values.AnimatableValue r0;
        short $s0, $s1;
        int $i2, $i3, $i4;
        org.w3c.dom.svg.SVGMatrix $r11, $r12;
        java.lang.Object $r6, $r9;

        r2 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r1 = (org.apache.batik.anim.values.AnimatableTransformListValue) r0;

        $r3 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z1 = virtualinvoke $r4.<java.util.Vector: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 0.0F;

     label2:
        $r5 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object lastElement()>();

        r7 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r6;

        $r8 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r10 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $s0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $s1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 == $i3 goto label3;

        return 0.0F;

     label3:
        $r11 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $r12 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label4:
        $f8 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f9 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        $f10 = $f8 - $f9;

        $f11 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        return $f11;

     label5:
        $f4 = interfaceinvoke $r11.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f5 = interfaceinvoke $r12.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f6 = $f4 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        return $f7;

     label6:
        $f0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        return $f3;

     label7:
        return 0.0F;
    }

    public float distanceTo3(org.apache.batik.anim.values.AnimatableValue)
    {
        short $s0, $s1;
        java.util.Vector $r3, $r4, $r5, $r8;
        org.apache.batik.anim.values.AnimatableTransformListValue r1, r2;
        int $i2, $i3, $i4;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r6, $r9;
        org.apache.batik.dom.svg.AbstractSVGTransform r7, r10;
        org.apache.batik.anim.values.AnimatableValue r0;

        r2 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r1 = (org.apache.batik.anim.values.AnimatableTransformListValue) r0;

        $r3 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $z1 = virtualinvoke $r4.<java.util.Vector: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 0.0F;

     label2:
        $r5 = r2.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object lastElement()>();

        r7 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r6;

        $r8 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object lastElement()>();

        r10 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r9;

        $s0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $s1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 == $i3 goto label3;

        return 0.0F;

     label3:
        $i4 = (int) $s0;

        if $i4 != 4 goto label4;

        $f0 = virtualinvoke r7.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        $f1 = virtualinvoke r10.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        return $f3;

     label4:
        return 0.0F;
    }

    public org.apache.batik.anim.values.AnimatableValue getZeroValue()
    {
        org.apache.batik.dom.anim.AnimationTarget $r3;
        java.util.Vector $r2;
        org.apache.batik.anim.values.AnimatableTransformListValue $r0, r1;

        r1 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        $r0 = new org.apache.batik.anim.values.AnimatableTransformListValue;

        $r3 = r1.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(5);

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableTransformListValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,java.util.List)>($r3, $r2);

        return $r0;
    }

    public java.lang.String toStringRep()
    {
        short $s0;
        java.util.Vector $r2;
        org.apache.batik.anim.values.AnimatableTransformListValue r1;
        java.lang.StringBuffer $r8;
        int $i1;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.w3c.dom.svg.SVGMatrix $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.lang.Object $r4;
        org.apache.batik.dom.svg.AbstractSVGTransform r5;

        r1 := @this: org.apache.batik.anim.values.AnimatableTransformListValue;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.batik.anim.values.AnimatableTransformListValue: java.util.Vector transforms>;

        $r3 = virtualinvoke $r2.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label9;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.batik.dom.svg.AbstractSVGTransform) $r4;

        if r5 != null goto label2;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("null");

        goto label8;

     label2:
        $r6 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $s0 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: short getType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label7;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label8;
        };

     label3:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("translate(");

        $f7 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f7);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $f8 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f8);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label8;

     label4:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("scale(");

        $f5 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f5);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $f6 = interfaceinvoke $r6.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f6);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label8;

     label5:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("skewX(");

        $f1 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f1);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label8;

     label6:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("skewY(");

        $f0 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f0);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label8;

     label7:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rotate(");

        $f2 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f2);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $f3 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f3);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $f4 = virtualinvoke r5.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f4);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label8:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label9:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        org.apache.batik.dom.svg.SVGOMTransform $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWX> = $r0;

        $r1 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r1.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWY> = $r1;

        $r2 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r2.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SCALE> = $r2;

        $r3 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r3.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_ROTATE> = $r3;

        $r4 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r4.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_TRANSLATE> = $r4;

        $r5 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWX>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewX(float)>(0.0F);

        $r6 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SKEWY>;

        virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewY(float)>(0.0F);

        $r7 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_SCALE>;

        virtualinvoke $r7.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>(0.0F, 0.0F);

        $r8 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_ROTATE>;

        virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>(0.0F, 0.0F, 0.0F);

        $r9 = <org.apache.batik.anim.values.AnimatableTransformListValue: org.apache.batik.dom.svg.SVGOMTransform IDENTITY_TRANSLATE>;

        virtualinvoke $r9.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>(0.0F, 0.0F);

        return;
    }
}
