public class com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join r3;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.core.BasicPattern)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join r3;
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern getPattern()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.core.QuadPattern)>($r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join r3;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r0;
        java.util.List r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.algebra.op.OpSequence,java.util.List)>(r0, r1);

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple $r6;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.graph.Triple r5;
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r7;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.algebra.Op r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        return $r7;

     label1:
        r8 = null;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: void <init>(com.hp.hpl.jena.graph.Triple)>(r5);

        r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r8, $r6);

        goto label2;

     label3:
        return r8;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.core.QuadPattern)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.QuadPattern r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad $r6;
        com.hp.hpl.jena.sparql.core.Quad r5;
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r7;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.algebra.Op r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.QuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.QuadPattern: java.util.List getList()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        return $r7;

     label1:
        r8 = null;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.QuadPattern: java.util.List getList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: void <init>(com.hp.hpl.jena.sparql.core.Quad)>(r5);

        r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r8, $r6);

        goto label2;

     label3:
        return r8;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op expand(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        java.util.List r0;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r4;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.Op r3, r5;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r0 := @parameter1: java.util.List;

        r5 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.algebra.Op) $r2;

        r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPattern2Join: com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r5, r3);

        goto label1;

     label2:
        return r5;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op join(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op createReduce(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r1);

        return $r2;
    }
}
