public abstract class org.apache.commons.io.DirectoryWalker extends java.lang.Object
{
    private final java.io.FileFilter filter;
    private final int depthLimit;

    protected void <init>()
    {
        int $i1;
        org.apache.commons.io.DirectoryWalker r0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>(java.io.FileFilter,int)>(null, $i1);

        return;
    }

    protected void <init>(java.io.FileFilter, int)
    {
        int i0;
        java.io.FileFilter r1;
        org.apache.commons.io.DirectoryWalker r0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.FileFilter;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = r1;

        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = i0;

        return;
    }

    protected void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter, int)
    {
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2, $r4, r5, r6, $r7, r8, $r9;
        org.apache.commons.io.DirectoryWalker r0;
        int i0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r5 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r6 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r5 != null goto label1;

        if r6 != null goto label1;

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = null;

        goto label6;

     label1:
        if r5 == null goto label2;

        $r7 = r5;

        goto label3;

     label2:
        $r7 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

     label3:
        r8 = $r7;

        if r6 == null goto label4;

        $r9 = r6;

        goto label5;

     label4:
        $r9 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

     label5:
        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>(r8);

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>($r9);

        $r3 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r3[0] = $r1;

        $r3[1] = $r2;

        $r4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r3);

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = $r4;

     label6:
        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = i0;

        return;
    }

    protected final void walk(java.io.File, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker$CancelException $r4;
        org.apache.commons.io.DirectoryWalker r1;
        java.util.Collection r2;
        java.io.File r0;
        java.lang.NullPointerException $r3;

        r1 := @this: org.apache.commons.io.DirectoryWalker;

        r0 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Start Directory is null");

        throw $r3;

     label1:
        virtualinvoke r1.<org.apache.commons.io.DirectoryWalker: void handleStart(java.io.File,java.util.Collection)>(r0, r2);

        specialinvoke r1.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(r0, 0, r2);

        virtualinvoke r1.<org.apache.commons.io.DirectoryWalker: void handleEnd(java.util.Collection)>(r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>(r0, r2, $r4);

     label4:
        return;

        catch org.apache.commons.io.DirectoryWalker$CancelException from label1 to label2 with label3;
    }

    private void walk(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        int i0, i1, $i2, i3, $i4, i5;
        boolean $z0, $z1;
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        java.io.File r1, r6;
        java.io.FileFilter $r3, $r4;
        java.io.File[] $r5, $r7;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleDirectory(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        if $z0 == 0 goto label9;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryStart(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        i1 = i0 + 1;

        $i2 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if $i2 < 0 goto label1;

        $i4 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if i1 > $i4 goto label8;

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        $r3 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        if $r3 != null goto label2;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r4);

     label3:
        $r5 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: java.io.File[] filterDirectoryContents(java.io.File,int,java.io.File[])>(r1, i0, $r7);

        if $r5 != null goto label4;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleRestricted(java.io.File,int,java.util.Collection)>(r1, i1, r2);

        goto label8;

     label4:
        i3 = lengthof $r5;

        i5 = 0;

     label5:
        if i5 >= i3 goto label8;

        r6 = $r5[i5];

        $z1 = virtualinvoke r6.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label6;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(r6, i1, r2);

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r6, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleFile(java.io.File,int,java.util.Collection)>(r6, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r6, i1, r2);

     label7:
        i5 = i5 + 1;

        goto label5;

     label8:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryEnd(java.io.File,int,java.util.Collection)>(r1, i0, r2);

     label9:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        return;
    }

    protected final void checkIfCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker$CancelException $r3;
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleIsCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.io.DirectoryWalker$CancelException;

        specialinvoke $r3.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>(r1, i0);

        throw $r3;

     label1:
        return;
    }

    protected boolean handleIsCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 0;
    }

    protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker$CancelException r0;
        org.apache.commons.io.DirectoryWalker r1;
        java.util.Collection r3;
        java.io.File r2;

        r1 := @this: org.apache.commons.io.DirectoryWalker;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.util.Collection;

        r0 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;

        throw r0;
    }

    protected void handleStart(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.io.File r1;
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        return;
    }

    protected boolean handleDirectory(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 1;
    }

    protected void handleDirectoryStart(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected java.io.File[] filterDirectoryContents(java.io.File, int, java.io.File[]) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r1;
        int i0;
        java.io.File[] r0;
        java.io.File r2;

        r1 := @this: org.apache.commons.io.DirectoryWalker;

        r2 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r0 := @parameter2: java.io.File[];

        return r0;
    }

    protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleRestricted(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r2;
        int i0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleEnd(java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.util.Collection;

        return;
    }
}
