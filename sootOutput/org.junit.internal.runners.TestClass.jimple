public class org.junit.internal.runners.TestClass extends java.lang.Object
{
    private final java.lang.Class fClass;

    public void <init>(java.lang.Class)
    {
        org.junit.internal.runners.TestClass r0;
        java.lang.Class r1;

        r0 := @this: org.junit.internal.runners.TestClass;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.internal.runners.TestClass: java.lang.Class fClass> = r1;

        return;
    }

    public java.util.List getTestMethods()
    {
        org.junit.internal.runners.TestClass r0;
        java.util.List $r1;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r1 = virtualinvoke r0.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Test;");

        return $r1;
    }

    java.util.List getBefores()
    {
        org.junit.internal.runners.TestClass r0;
        java.util.List $r1;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r1 = virtualinvoke r0.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/BeforeClass;");

        return $r1;
    }

    java.util.List getAfters()
    {
        org.junit.internal.runners.TestClass r0;
        java.util.List $r1;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r1 = virtualinvoke r0.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/AfterClass;");

        return $r1;
    }

    public java.util.List getAnnotatedMethods(java.lang.Class)
    {
        org.junit.internal.runners.TestClass r1;
        java.lang.reflect.Method[] $r8;
        java.util.ArrayList $r0;
        int i0, i1;
        java.lang.reflect.Method r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r2, r5, r7;
        java.lang.Object $r6;

        r1 := @this: org.junit.internal.runners.TestClass;

        r5 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.junit.internal.runners.TestClass: java.lang.Class fClass>;

        $r3 = specialinvoke r1.<org.junit.internal.runners.TestClass: java.util.List getSuperClasses(java.lang.Class)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Class) $r6;

        $r8 = staticinvoke <org.junit.internal.MethodSorter: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>(r7);

        i0 = lengthof $r8;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r9 = $r8[i1];

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r5);

        if $r10 == null goto label3;

        $z2 = specialinvoke r1.<org.junit.internal.runners.TestClass: boolean isShadowed(java.lang.reflect.Method,java.util.List)>(r9, $r0);

        if $z2 != 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        $z1 = specialinvoke r1.<org.junit.internal.runners.TestClass: boolean runsTopToBottom(java.lang.Class)>(r5);

        if $z1 == 0 goto label6;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r0);

     label6:
        return $r0;
    }

    private boolean runsTopToBottom(java.lang.Class)
    {
        java.lang.Class r0;
        org.junit.internal.runners.TestClass r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.junit.internal.runners.TestClass;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/Before;");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/BeforeClass;");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isShadowed(java.lang.reflect.Method, java.util.List)
    {
        java.util.Iterator $r1;
        org.junit.internal.runners.TestClass r4;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.reflect.Method r3, r5;
        boolean $z0, $z1;

        r4 := @this: org.junit.internal.runners.TestClass;

        r5 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Method) $r2;

        $z1 = specialinvoke r4.<org.junit.internal.runners.TestClass: boolean isShadowed(java.lang.reflect.Method,java.lang.reflect.Method)>(r5, r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        org.junit.internal.runners.TestClass r11;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r3;
        java.lang.reflect.Method r0, r2;
        boolean $z0, $z1;
        java.lang.Class[] $r4, $r5, $r6, $r7, $r9;
        java.lang.Class $r8, $r10;

        r11 := @this: org.junit.internal.runners.TestClass;

        r2 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r6;

        if i3 >= $i2 goto label5;

        $r7 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r8 = $r7[i3];

        $r9 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r10 = $r9[i3];

        $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    private java.util.List getSuperClasses(java.lang.Class)
    {
        java.lang.Class r1, r3;
        org.junit.internal.runners.TestClass r2;
        java.util.ArrayList $r0;

        r2 := @this: org.junit.internal.runners.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = r1;

     label1:
        if r3 == null goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.reflect.Constructor getConstructor() throws java.lang.SecurityException, java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        org.junit.internal.runners.TestClass r0;
        java.lang.Class $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r2 = r0.<org.junit.internal.runners.TestClass: java.lang.Class fClass>;

        $r1 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        return $r3;
    }

    public java.lang.Class getJavaClass()
    {
        org.junit.internal.runners.TestClass r0;
        java.lang.Class $r1;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r1 = r0.<org.junit.internal.runners.TestClass: java.lang.Class fClass>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.junit.internal.runners.TestClass r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.junit.internal.runners.TestClass;

        $r1 = r0.<org.junit.internal.runners.TestClass: java.lang.Class fClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }
}
