public class org.apache.commons.codec.digest.Sha2Crypt extends java.lang.Object
{
    private static final int ROUNDS_DEFAULT;
    private static final int ROUNDS_MAX;
    private static final int ROUNDS_MIN;
    private static final java.lang.String ROUNDS_PREFIX;
    private static final int SHA256_BLOCKSIZE;
    static final java.lang.String SHA256_PREFIX;
    private static final int SHA512_BLOCKSIZE;
    static final java.lang.String SHA512_PREFIX;
    private static final java.util.regex.Pattern SALT_PATTERN;

    public void <init>()
    {
        org.apache.commons.codec.digest.Sha2Crypt r0;

        r0 := @this: org.apache.commons.codec.digest.Sha2Crypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String sha256Crypt(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha256Crypt(byte[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String sha256Crypt(byte[], java.lang.String)
    {
        byte[] r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r1, $r4, r6;

        r0 := @parameter0: byte[];

        r6 := @parameter1: java.lang.String;

        if r6 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$5$");

        $r4 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(r0, r6, "$5$", 32, "SHA-256");

        return $r1;
    }

    private static java.lang.String sha2Crypt(byte[], java.lang.String, java.lang.String, int, java.lang.String)
    {
        byte[] r0, $r12, $r16, $r17, $r19, r20, $r22, r30, r31;
        byte $b4, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b24, $b25, $b26, $b27, $b28, $b29, $b30, $b31, $b32, $b33, $b34, $b35, $b36, $b37, $b38, $b39, $b40, $b41, $b42, $b43, $b44, $b45, $b46, $b47, $b48, $b49, $b50, $b51, $b52, $b53, $b54, $b55, $b56, $b57, $b58, $b59, $b60, $b61, $b62, $b63, $b64, $b65, $b66, $b67, $b68, $b69, $b70, $b71, $b72, $b73, $b74, $b75, $b76, $b77, $b78, $b79, $b80, $b81, $b82, $b83, $b84, $b85, $b86, $b87, $b88, $b89, $b90, $b91, $b92, $b93, $b94, $b95, $b96, $b97, $b98, $b99, $b100, $b101, $b102, $b103, $b104, $b105;
        java.lang.StringBuilder $r6, $r7, $r33, $r35;
        short $s5, $s122;
        java.security.MessageDigest $r14, $r15, $r18, $r21, $r26, r29;
        java.nio.charset.Charset $r11;
        int i0, i1, $i2, $i3, $i6, $i7, $i8, $i9, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, i114, i115, i116, i117, i118, i119, i120, i121, $i123;
        java.util.regex.Matcher $r3;
        java.lang.String r1, $r8, $r9, $r10, r13, r24, $r25, $r27;
        boolean $z0, z1;
        java.util.regex.Pattern $r2;
        java.lang.IllegalArgumentException $r32, $r34;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        r24 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r13 := @parameter4: java.lang.String;

        i0 = lengthof r0;

        i114 = 5000;

        z1 = 0;

        if r1 != null goto label01;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Salt must not be null");

        throw $r32;

     label01:
        $r2 = <org.apache.commons.codec.digest.Sha2Crypt: java.util.regex.Pattern SALT_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        if $r3 == null goto label02;

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label03;

     label02:
        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid salt value: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r34;

     label03:
        $r9 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r9 == null goto label04;

        $r27 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i111 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27);

        $i112 = staticinvoke <java.lang.Math: int min(int,int)>(999999999, $i111);

        i114 = staticinvoke <java.lang.Math: int max(int,int)>(1000, $i112);

        z1 = 1;

     label04:
        $r10 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r11 = <org.apache.commons.codec.Charsets: java.nio.charset.Charset UTF_8>;

        $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        $i113 = lengthof $r12;

        $r14 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r13);

        r29 = $r14;

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>(r0);

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>($r12);

        $r15 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r13);

        virtualinvoke $r15.<java.security.MessageDigest: void update(byte[])>(r0);

        virtualinvoke $r15.<java.security.MessageDigest: void update(byte[])>($r12);

        virtualinvoke $r15.<java.security.MessageDigest: void update(byte[])>(r0);

        $r16 = virtualinvoke $r15.<java.security.MessageDigest: byte[] digest()>();

        i115 = lengthof r0;

     label05:
        if i115 <= i1 goto label06;

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[],int,int)>($r16, 0, i1);

        i115 = i115 - i1;

        goto label05;

     label06:
        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[],int,int)>($r16, 0, i115);

        i116 = lengthof r0;

     label07:
        if i116 <= 0 goto label10;

        $i110 = i116 & 1;

        if $i110 == 0 goto label08;

        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[],int,int)>($r16, 0, i1);

        goto label09;

     label08:
        virtualinvoke $r14.<java.security.MessageDigest: void update(byte[])>(r0);

     label09:
        i116 = i116 >> 1;

        goto label07;

     label10:
        $r17 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest()>();

        r30 = $r17;

        $r18 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r13);

        i117 = 1;

     label11:
        if i117 > i0 goto label12;

        virtualinvoke $r18.<java.security.MessageDigest: void update(byte[])>(r0);

        i117 = i117 + 1;

        goto label11;

     label12:
        $r19 = virtualinvoke $r18.<java.security.MessageDigest: byte[] digest()>();

        r20 = newarray (byte)[i0];

        i118 = 0;

     label13:
        $i2 = i0 - i1;

        if i118 >= $i2 goto label14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r20, i118, i1);

        i118 = i118 + i1;

        goto label13;

     label14:
        $i3 = i0 - i118;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r20, i118, $i3);

        $r21 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r13);

        i119 = 1;

     label15:
        $b4 = $r17[0];

        $s122 = (short) $b4;

        $s5 = $s122 & 255;

        $i123 = (int) $s5;

        $i6 = 16 + $i123;

        if i119 > $i6 goto label16;

        virtualinvoke $r21.<java.security.MessageDigest: void update(byte[])>($r12);

        i119 = i119 + 1;

        goto label15;

     label16:
        $r22 = virtualinvoke $r21.<java.security.MessageDigest: byte[] digest()>();

        r31 = newarray (byte)[$i113];

        i120 = 0;

     label17:
        $i7 = $i113 - i1;

        if i120 >= $i7 goto label18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r31, i120, i1);

        i120 = i120 + i1;

        goto label17;

     label18:
        $i8 = $i113 - i120;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r31, i120, $i8);

        i121 = 0;

     label19:
        $i9 = i114 - 1;

        if i121 > $i9 goto label26;

        $r26 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r13);

        r29 = $r26;

        $i106 = i121 & 1;

        if $i106 == 0 goto label20;

        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r20, 0, i0);

        goto label21;

     label20:
        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r30, 0, i1);

     label21:
        $i107 = i121 % 3;

        if $i107 == 0 goto label22;

        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r31, 0, $i113);

     label22:
        $i108 = i121 % 7;

        if $i108 == 0 goto label23;

        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r20, 0, i0);

     label23:
        $i109 = i121 & 1;

        if $i109 == 0 goto label24;

        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r30, 0, i1);

        goto label25;

     label24:
        virtualinvoke $r26.<java.security.MessageDigest: void update(byte[],int,int)>(r20, 0, i0);

     label25:
        r30 = virtualinvoke $r26.<java.security.MessageDigest: byte[] digest()>();

        i121 = i121 + 1;

        goto label19;

     label26:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>(r24);

        if z1 == 0 goto label27;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rounds=");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i114);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

     label27:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        if i1 != 32 goto label28;

        $b76 = r30[0];

        $b75 = r30[10];

        $b74 = r30[20];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b76, $b75, $b74, 4, $r35);

        $b79 = r30[21];

        $b78 = r30[1];

        $b77 = r30[11];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b79, $b78, $b77, 4, $r35);

        $b82 = r30[12];

        $b81 = r30[22];

        $b80 = r30[2];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b82, $b81, $b80, 4, $r35);

        $b85 = r30[3];

        $b84 = r30[13];

        $b83 = r30[23];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b85, $b84, $b83, 4, $r35);

        $b88 = r30[24];

        $b87 = r30[4];

        $b86 = r30[14];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b88, $b87, $b86, 4, $r35);

        $b91 = r30[15];

        $b90 = r30[25];

        $b89 = r30[5];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b91, $b90, $b89, 4, $r35);

        $b94 = r30[6];

        $b93 = r30[16];

        $b92 = r30[26];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b94, $b93, $b92, 4, $r35);

        $b97 = r30[27];

        $b96 = r30[7];

        $b95 = r30[17];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b97, $b96, $b95, 4, $r35);

        $b100 = r30[18];

        $b99 = r30[28];

        $b98 = r30[8];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b100, $b99, $b98, 4, $r35);

        $b103 = r30[9];

        $b102 = r30[19];

        $b101 = r30[29];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b103, $b102, $b101, 4, $r35);

        $b105 = r30[31];

        $b104 = r30[30];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, $b105, $b104, 3, $r35);

        goto label29;

     label28:
        $b12 = r30[0];

        $b11 = r30[21];

        $b10 = r30[42];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b12, $b11, $b10, 4, $r35);

        $b15 = r30[22];

        $b14 = r30[43];

        $b13 = r30[1];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b15, $b14, $b13, 4, $r35);

        $b18 = r30[44];

        $b17 = r30[2];

        $b16 = r30[23];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b18, $b17, $b16, 4, $r35);

        $b21 = r30[3];

        $b20 = r30[24];

        $b19 = r30[45];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b21, $b20, $b19, 4, $r35);

        $b24 = r30[25];

        $b23 = r30[46];

        $b22 = r30[4];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b24, $b23, $b22, 4, $r35);

        $b27 = r30[47];

        $b26 = r30[5];

        $b25 = r30[26];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b27, $b26, $b25, 4, $r35);

        $b30 = r30[6];

        $b29 = r30[27];

        $b28 = r30[48];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b30, $b29, $b28, 4, $r35);

        $b33 = r30[28];

        $b32 = r30[49];

        $b31 = r30[7];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b33, $b32, $b31, 4, $r35);

        $b36 = r30[50];

        $b35 = r30[8];

        $b34 = r30[29];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b36, $b35, $b34, 4, $r35);

        $b39 = r30[9];

        $b38 = r30[30];

        $b37 = r30[51];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b39, $b38, $b37, 4, $r35);

        $b42 = r30[31];

        $b41 = r30[52];

        $b40 = r30[10];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b42, $b41, $b40, 4, $r35);

        $b45 = r30[53];

        $b44 = r30[11];

        $b43 = r30[32];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b45, $b44, $b43, 4, $r35);

        $b48 = r30[12];

        $b47 = r30[33];

        $b46 = r30[54];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b48, $b47, $b46, 4, $r35);

        $b51 = r30[34];

        $b50 = r30[55];

        $b49 = r30[13];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b51, $b50, $b49, 4, $r35);

        $b54 = r30[56];

        $b53 = r30[14];

        $b52 = r30[35];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b54, $b53, $b52, 4, $r35);

        $b57 = r30[15];

        $b56 = r30[36];

        $b55 = r30[57];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b57, $b56, $b55, 4, $r35);

        $b60 = r30[37];

        $b59 = r30[58];

        $b58 = r30[16];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b60, $b59, $b58, 4, $r35);

        $b63 = r30[59];

        $b62 = r30[17];

        $b61 = r30[38];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b63, $b62, $b61, 4, $r35);

        $b66 = r30[18];

        $b65 = r30[39];

        $b64 = r30[60];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b66, $b65, $b64, 4, $r35);

        $b69 = r30[40];

        $b68 = r30[61];

        $b67 = r30[19];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b69, $b68, $b67, 4, $r35);

        $b72 = r30[62];

        $b71 = r30[20];

        $b70 = r30[41];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>($b72, $b71, $b70, 4, $r35);

        $b73 = r30[63];

        staticinvoke <org.apache.commons.codec.digest.B64: void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder)>(0, 0, $b73, 2, $r35);

     label29:
        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r22, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r20, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r31, 0);

        virtualinvoke r29.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r21.<java.security.MessageDigest: void reset()>();

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r0, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r12, 0);

        $r25 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;
    }

    public static java.lang.String sha512Crypt(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha512Crypt(byte[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String sha512Crypt(byte[], java.lang.String)
    {
        byte[] r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r1, $r4, r6;

        r0 := @parameter0: byte[];

        r6 := @parameter1: java.lang.String;

        if r6 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$6$");

        $r4 = staticinvoke <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>(8);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String)>(r0, r6, "$6$", 64, "SHA-512");

        return $r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String SHA512_PREFIX> = "$6$";

        <org.apache.commons.codec.digest.Sha2Crypt: int SHA512_BLOCKSIZE> = 64;

        <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String SHA256_PREFIX> = "$5$";

        <org.apache.commons.codec.digest.Sha2Crypt: int SHA256_BLOCKSIZE> = 32;

        <org.apache.commons.codec.digest.Sha2Crypt: java.lang.String ROUNDS_PREFIX> = "rounds=";

        <org.apache.commons.codec.digest.Sha2Crypt: int ROUNDS_MIN> = 1000;

        <org.apache.commons.codec.digest.Sha2Crypt: int ROUNDS_MAX> = 999999999;

        <org.apache.commons.codec.digest.Sha2Crypt: int ROUNDS_DEFAULT> = 5000;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\$([56])\\$(rounds=(\\d+)\\$)?([\\.\\/a-zA-Z0-9]{1,16}).*");

        <org.apache.commons.codec.digest.Sha2Crypt: java.util.regex.Pattern SALT_PATTERN> = $r0;

        return;
    }
}
