public class com.jhlabs.image.NoiseFilter extends com.jhlabs.image.PointFilter
{
    public static final int GAUSSIAN;
    public static final int UNIFORM;
    private int amount;
    private int distribution;
    private boolean monochrome;
    private float density;
    private java.util.Random randomNumbers;

    public void <init>()
    {
        com.jhlabs.image.NoiseFilter r0;
        java.util.Random $r1;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.NoiseFilter: int amount> = 25;

        r0.<com.jhlabs.image.NoiseFilter: int distribution> = 1;

        r0.<com.jhlabs.image.NoiseFilter: boolean monochrome> = 0;

        r0.<com.jhlabs.image.NoiseFilter: float density> = 1.0F;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers> = $r1;

        return;
    }

    public void setAmount(int)
    {
        int i0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.NoiseFilter: int amount> = i0;

        return;
    }

    public int getAmount()
    {
        int $i0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        $i0 = r0.<com.jhlabs.image.NoiseFilter: int amount>;

        return $i0;
    }

    public void setDistribution(int)
    {
        int i0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.NoiseFilter: int distribution> = i0;

        return;
    }

    public int getDistribution()
    {
        int $i0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        $i0 = r0.<com.jhlabs.image.NoiseFilter: int distribution>;

        return $i0;
    }

    public void setMonochrome(boolean)
    {
        com.jhlabs.image.NoiseFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.NoiseFilter: boolean monochrome> = z0;

        return;
    }

    public boolean getMonochrome()
    {
        com.jhlabs.image.NoiseFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        $z0 = r0.<com.jhlabs.image.NoiseFilter: boolean monochrome>;

        return $z0;
    }

    public void setDensity(float)
    {
        float f0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.NoiseFilter: float density> = f0;

        return;
    }

    public float getDensity()
    {
        float $f0;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        $f0 = r0.<com.jhlabs.image.NoiseFilter: float density>;

        return $f0;
    }

    private int random(int)
    {
        java.util.Random $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        float $f0, $f1, $f2;
        com.jhlabs.image.NoiseFilter r0;
        double $d0, $d1, $d2;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        i4 := @parameter0: int;

        $i0 = r0.<com.jhlabs.image.NoiseFilter: int distribution>;

        if $i0 != 0 goto label1;

        $r2 = r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers>;

        $d2 = virtualinvoke $r2.<java.util.Random: double nextGaussian()>();

        goto label2;

     label1:
        $r1 = r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = 2.0F * $f0;

        $f2 = $f1 - 1.0F;

        $d2 = (double) $f2;

     label2:
        $i1 = r0.<com.jhlabs.image.NoiseFilter: int amount>;

        $d0 = (double) $i1;

        $d1 = $d2 * $d0;

        $i2 = (int) $d1;

        $i3 = i4 + $i2;

        i5 = $i3;

        if $i3 >= 0 goto label3;

        i5 = 0;

        goto label4;

     label3:
        if $i3 <= 255 goto label4;

        i5 = 255;

     label4:
        return i5;
    }

    public int filterRGB(int, int, int)
    {
        java.util.Random $r1, $r2, $r3;
        byte $b0;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, $i24;
        double $d0, $d1, $d2;
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        i16 := @parameter0: int;

        i17 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = r0.<com.jhlabs.image.NoiseFilter: float density>;

        $b0 = $f0 cmpg $f1;

        $i24 = (int) $b0;

        if $i24 > 0 goto label5;

        i2 = i1 & -16777216;

        $i3 = i1 >> 16;

        i18 = $i3 & 255;

        $i4 = i1 >> 8;

        i19 = $i4 & 255;

        i20 = i1 & 255;

        $z0 = r0.<com.jhlabs.image.NoiseFilter: boolean monochrome>;

        if $z0 == 0 goto label3;

        $i10 = r0.<com.jhlabs.image.NoiseFilter: int distribution>;

        if $i10 != 0 goto label1;

        $r3 = r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers>;

        $d2 = virtualinvoke $r3.<java.util.Random: double nextGaussian()>();

        goto label2;

     label1:
        $r2 = r0.<com.jhlabs.image.NoiseFilter: java.util.Random randomNumbers>;

        $f2 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        $f3 = 2.0F * $f2;

        $f4 = $f3 - 1.0F;

        $d2 = (double) $f4;

     label2:
        $i11 = r0.<com.jhlabs.image.NoiseFilter: int amount>;

        $d0 = (double) $i11;

        $d1 = $d2 * $d0;

        $i15 = (int) $d1;

        $i12 = i18 + $i15;

        i21 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i12);

        $i13 = i19 + $i15;

        i22 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i13);

        $i14 = i20 + $i15;

        i23 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i14);

        goto label4;

     label3:
        i21 = specialinvoke r0.<com.jhlabs.image.NoiseFilter: int random(int)>(i18);

        i22 = specialinvoke r0.<com.jhlabs.image.NoiseFilter: int random(int)>(i19);

        i23 = specialinvoke r0.<com.jhlabs.image.NoiseFilter: int random(int)>(i20);

     label4:
        $i5 = i21 << 16;

        $i7 = i2 | $i5;

        $i6 = i22 << 8;

        $i8 = $i7 | $i6;

        $i9 = $i8 | i23;

        return $i9;

     label5:
        return i1;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.NoiseFilter r0;

        r0 := @this: com.jhlabs.image.NoiseFilter;

        return "Stylize/Add Noise...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.NoiseFilter: int UNIFORM> = 1;

        <com.jhlabs.image.NoiseFilter: int GAUSSIAN> = 0;

        return;
    }
}
