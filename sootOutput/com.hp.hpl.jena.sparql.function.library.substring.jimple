public class com.hp.hpl.jena.sparql.function.library.substring extends com.hp.hpl.jena.sparql.function.FunctionBase
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.function.library.substring r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.library.substring;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase: void <init>()>();

        return;
    }

    public void checkBuild(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.query.QueryBuildException $r1;
        com.hp.hpl.jena.sparql.function.library.substring r4;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.String $r5, $r8, r9;

        r4 := @this: com.hp.hpl.jena.sparql.function.library.substring;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 == 2 goto label1;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i1 == 3 goto label1;

        $r1 = new com.hp.hpl.jena.query.QueryBuildException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function \'");

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' takes two or three arguments");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2, r4, $r5, $r7, r15;
        com.hp.hpl.jena.sparql.function.library.substring r14;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r8;
        int $i0, $i1, $i2;
        java.lang.String $r13;
        java.util.List r0;
        java.lang.Object $r1, $r3, $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r14 := @this: com.hp.hpl.jena.sparql.function.library.substring;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 3 goto label1;

        $r8 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("substring: Wrong number of arguments: ");

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : [wanted 2 or 3]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r1;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r4 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r3;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 3 goto label2;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        r15 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r6;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue javaSubstring(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r2, r4, r15);

        return $r7;

     label2:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue javaSubstring(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r2, r4);

        return $r5;
    }
}
