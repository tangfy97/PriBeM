class org.waveprotocol.wave.client.editor.harness.EditorHarness$23 extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    final org.waveprotocol.wave.client.editor.harness.EditorHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.EditorHarness)
    {
        org.waveprotocol.wave.client.editor.harness.EditorHarness r1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$23 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$23;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.EditorHarness;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        java.lang.Throwable $r11, $r13;
        com.google.gwt.core.client.GWT$UncaughtExceptionHandler $r14;
        org.waveprotocol.wave.model.document.operation.DocOp r0;
        org.waveprotocol.wave.client.editor.harness.EditorHarness $r2, $r3, $r6, $r8, $r10, $r12, $r15, $r16;
        java.util.ArrayList $r9;
        com.google.gwt.user.client.ui.CheckBox $r4;
        java.lang.Boolean $r5;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$23 r1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle $r7;

        r1 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$23;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        if r0 == null goto label3;

        $r2 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $z0 = $r2.<org.waveprotocol.wave.client.editor.harness.EditorHarness: boolean sendOps>;

        if $z0 == 0 goto label3;

        $r3 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: com.google.gwt.user.client.ui.CheckBox access$700(org.waveprotocol.wave.client.editor.harness.EditorHarness)>($r3);

        $r5 = virtualinvoke $r4.<com.google.gwt.user.client.ui.CheckBox: java.lang.Boolean getValue()>();

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label2;

        $r8 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r9 = $r8.<org.waveprotocol.wave.client.editor.harness.EditorHarness: java.util.ArrayList queue>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $r10 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$1900(org.waveprotocol.wave.client.editor.harness.EditorHarness)>($r10);

        goto label3;

     label2:
        $r6 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r7 = $r6.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle editorBundle2>;

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: void execute(org.waveprotocol.wave.model.document.operation.DocOp)>(r0);

     label3:
        $r16 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r16, r0);

        goto label8;

     label4:
        $r13 := @caughtexception;

        $r14 = staticinvoke <com.google.gwt.core.client.GWT: com.google.gwt.core.client.GWT$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r14.<com.google.gwt.core.client.GWT$UncaughtExceptionHandler: void onUncaughtException(java.lang.Throwable)>($r13);

     label5:
        $r15 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r15, r0);

        goto label8;

     label6:
        $r11 := @caughtexception;

     label7:
        $r12 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r12, r0);

        throw $r11;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$23 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$23;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.document.operation.DocOp) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$23: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        return;
    }
}
