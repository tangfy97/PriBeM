public class org.jdesktop.swingx.calendar.DatePickerFormatter extends javax.swing.JFormattedTextField$AbstractFormatter
{
    private static final java.util.logging.Logger LOG;
    private java.text.DateFormat[] _formats;

    public void <init>()
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r0;

        r0 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        specialinvoke r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: void <init>(java.text.DateFormat[],java.util.Locale)>(null, null);

        return;
    }

    public void <init>(java.text.DateFormat[])
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r0;
        java.text.DateFormat[] r1;

        r0 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r1 := @parameter0: java.text.DateFormat[];

        specialinvoke r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: void <init>(java.text.DateFormat[],java.util.Locale)>(r1, null);

        return;
    }

    public void <init>(java.util.Locale)
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r0;
        java.util.Locale r1;

        r0 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: void <init>(java.text.DateFormat[],java.util.Locale)>(null, r1);

        return;
    }

    public void <init>(java.text.DateFormat[], java.util.Locale)
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r0;
        java.text.DateFormat[] r1;
        java.util.Locale r2;

        r0 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r1 := @parameter0: java.text.DateFormat[];

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<javax.swing.JFormattedTextField$AbstractFormatter: void <init>()>();

        r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats> = null;

        if r2 != null goto label1;

        r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        if r1 != null goto label2;

        r1 = virtualinvoke r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] createDefaultFormats(java.util.Locale)>(r2);

     label2:
        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r1, "The array of DateFormats must not contain null formats");

        r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats> = r1;

        return;
    }

    public java.text.DateFormat[] getFormats()
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r0;
        int $i0, $i1;
        java.text.DateFormat[] $r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        $r1 = r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats>;

        $i0 = lengthof $r1;

        r2 = newarray (java.text.DateFormat)[$i0];

        $r3 = r0.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        return r2;
    }

    public java.lang.Object stringToValue(java.lang.String) throws java.text.ParseException
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r2;
        java.util.Date r6;
        java.text.DateFormat[] r3;
        int $i0, i1, i2;
        java.lang.String r0, $r1;
        java.text.ParseException $r5, r7;
        java.text.DateFormat r4;

        r2 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r0 := @parameter0: java.lang.String;

        r6 = null;

        r7 = null;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        r3 = r2.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats>;

        i1 = lengthof r3;

        i2 = 0;

     label3:
        if i2 >= i1 goto label7;

        r4 = r3[i2];

     label4:
        r6 = virtualinvoke r4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r0);

        r7 = null;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r7 = $r5;

        i2 = i2 + 1;

        goto label3;

     label7:
        if r7 == null goto label8;

        throw r7;

     label8:
        return r6;

        catch java.text.ParseException from label4 to label5 with label6;
    }

    public java.lang.String valueToString(java.lang.Object) throws java.text.ParseException
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r1;
        int $i0;
        java.text.DateFormat[] $r2, $r3;
        java.lang.Object r0;
        java.lang.String $r5;
        java.text.DateFormat $r4;

        r1 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r3 = r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] _formats>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.lang.String format(java.lang.Object)>(r0);

        return $r5;

     label1:
        return null;
    }

    protected java.text.DateFormat[] createDefaultFormats(java.util.Locale)
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r1;
        java.lang.Object[] $r4;
        java.text.DateFormat[] $r3, $r5;
        java.util.ArrayList $r0;
        java.util.Locale r2;
        int $i0, $i1;

        r1 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r2 := @parameter0: java.util.Locale;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        specialinvoke r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: void addFormat(java.util.List,java.lang.String,java.util.Locale)>($r0, "JXDatePicker.longFormat", r2);

        specialinvoke r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: void addFormat(java.util.List,java.lang.String,java.util.Locale)>($r0, "JXDatePicker.mediumFormat", r2);

        specialinvoke r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: void addFormat(java.util.List,java.lang.String,java.util.Locale)>($r0, "JXDatePicker.shortFormat", r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r1.<org.jdesktop.swingx.calendar.DatePickerFormatter: void addSystemDefaultFormat(java.util.List,java.util.Locale)>($r0, r2);

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r3 = newarray (java.text.DateFormat)[$i1];

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.text.DateFormat[]) $r4;

        return $r5;
    }

    private void addSystemDefaultFormat(java.util.List, java.util.Locale)
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r3;
        java.util.List r0;
        java.util.Locale r1;
        java.text.DateFormat $r2;

        r3 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(3, r1);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void addFormat(java.util.List, java.lang.String, java.util.Locale)
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter r13;
        java.text.SimpleDateFormat $r3;
        java.lang.RuntimeException $r5;
        java.util.logging.Logger $r7;
        java.util.List r4;
        java.util.Locale r1;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;
        java.lang.String r0, $r2, $r12;

        r13 := @this: org.jdesktop.swingx.calendar.DatePickerFormatter;

        r4 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.Locale;

        $r2 = staticinvoke <org.jdesktop.swingx.plaf.UIManagerExt: java.lang.String getString(java.lang.Object,java.util.Locale)>(r0, r1);

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r2, r1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.jdesktop.swingx.calendar.DatePickerFormatter: java.util.logging.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("creating date format failed for key/pattern: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void finer(java.lang.String)>($r12);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/calendar/DatePickerFormatter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.calendar.DatePickerFormatter: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
