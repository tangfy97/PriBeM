public class thredds.wcs.v1_1_0.GetCoverage extends java.lang.Object
{
    private static org.slf4j.Logger log;
    protected static final org.jdom.Namespace owcsNS;
    protected static final org.jdom.Namespace owsNS;
    protected static final org.jdom.Namespace xlinkNS;
    private java.net.URI serverURI;
    private java.lang.String identifier;
    private java.lang.String version;
    private java.lang.String datasetPath;
    private ucar.nc2.dt.GridDataset dataset;
    private org.jdom.Document getCoverageDoc;
    private boolean dataOnlyRequest;
    private static ucar.nc2.util.DiskCache2 diskCache;

    public void <init>(java.net.URI, java.lang.String, java.lang.String, ucar.nc2.dt.GridDataset)
    {
        thredds.wcs.v1_1_0.GetCoverage r0;
        java.lang.IllegalArgumentException $r9, $r10, $r11, $r12;
        ucar.nc2.dt.GridDataset r4, $r8;
        java.net.URI r1, $r5;
        java.lang.String r2, r3, $r6, $r7;

        r0 := @this: thredds.wcs.v1_1_0.GetCoverage;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: ucar.nc2.dt.GridDataset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String version> = "1.1.0";

        r0.<thredds.wcs.v1_1_0.GetCoverage: boolean dataOnlyRequest> = 1;

        r0.<thredds.wcs.v1_1_0.GetCoverage: java.net.URI serverURI> = r1;

        r0.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier> = r2;

        r0.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String datasetPath> = r3;

        r0.<thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.dt.GridDataset dataset> = r4;

        $r5 = r0.<thredds.wcs.v1_1_0.GetCoverage: java.net.URI serverURI>;

        if $r5 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null server URI required.");

        throw $r12;

     label1:
        $r6 = r0.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        if $r6 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null coverage identifier required.");

        throw $r11;

     label2:
        $r7 = r0.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String datasetPath>;

        if $r7 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null dataset path required.");

        throw $r10;

     label3:
        $r8 = r0.<thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.dt.GridDataset dataset>;

        if $r8 != null goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null dataset required.");

        throw $r9;

     label4:
        return;
    }

    public boolean isDataOnlyRequest()
    {
        thredds.wcs.v1_1_0.GetCoverage r0;
        boolean $z0;

        r0 := @this: thredds.wcs.v1_1_0.GetCoverage;

        $z0 = r0.<thredds.wcs.v1_1_0.GetCoverage: boolean dataOnlyRequest>;

        return $z0;
    }

    public static void setDiskCache(ucar.nc2.util.DiskCache2)
    {
        ucar.nc2.util.DiskCache2 r0;

        r0 := @parameter0: ucar.nc2.util.DiskCache2;

        <thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.util.DiskCache2 diskCache> = r0;

        return;
    }

    private static ucar.nc2.util.DiskCache2 getDiskCache()
    {
        java.lang.IllegalStateException $r3;
        org.slf4j.Logger $r2;
        ucar.nc2.util.DiskCache2 $r0, $r1;

        $r0 = <thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.util.DiskCache2 diskCache>;

        if $r0 != null goto label1;

        $r2 = <thredds.wcs.v1_1_0.GetCoverage: org.slf4j.Logger log>;

        interfaceinvoke $r2.<org.slf4j.Logger: void error(java.lang.String)>("getDiskCache(): Disk cache has not been set.");

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Disk cache must be set before calling GetCoverage.getDiskCache().");

        throw $r3;

     label1:
        $r1 = <thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.util.DiskCache2 diskCache>;

        return $r1;
    }

    public java.io.File writeCoverageDataToFile() throws thredds.wcs.v1_1_0.WcsException
    {
        thredds.wcs.v1_1_0.WcsException $r20, $r38;
        thredds.wcs.v1_1_0.WcsException$Code $r22, $r40;
        ucar.nc2.dt.grid.NetcdfCFWriter $r4;
        thredds.wcs.v1_1_0.GetCoverage r6;
        java.util.List $r9;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r18, $r21, $r23, $r25, $r26, $r29, $r31, $r33, $r34, $r36, $r39, $r41, $r43, $r44;
        ucar.nc2.util.DiskCache2 $r1;
        java.lang.String $r2, $r5, $r7, $r14, $r17, $r19, $r24, $r27, $r32, $r35, $r37, $r42, $r45;
        org.slf4j.Logger $r12, $r30;
        java.io.IOException $r10;
        java.io.File $r0, $r3;
        ucar.nc2.dt.GridDataset $r8;
        ucar.ma2.InvalidRangeException $r28;

        r6 := @this: thredds.wcs.v1_1_0.GetCoverage;

     label1:
        $r0 = new java.io.File;

        $r1 = staticinvoke <thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.util.DiskCache2 getDiskCache()>();

        $r2 = virtualinvoke $r1.<ucar.nc2.util.DiskCache2: java.lang.String getRootDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("WCS", ".nc", $r0);

        $r4 = new ucar.nc2.dt.grid.NetcdfCFWriter;

        specialinvoke $r4.<ucar.nc2.dt.grid.NetcdfCFWriter: void <init>()>();

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        $r8 = r6.<thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.dt.GridDataset dataset>;

        $r7 = r6.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7);

        virtualinvoke $r4.<ucar.nc2.dt.grid.NetcdfCFWriter: void makeFile(java.lang.String,ucar.nc2.dt.GridDataset,java.util.List,ucar.unidata.geoloc.LatLonRect,ucar.nc2.units.DateRange,boolean,int,int,int)>($r5, $r8, $r9, null, null, 1, 1, 1, 1);

     label2:
        return $r3;

     label3:
        $r28 := @caughtexception;

        $r30 = <thredds.wcs.v1_1_0.GetCoverage: org.slf4j.Logger log>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writeCoverageDataToFile(): Failed to subset coverage <");

        $r32 = r6.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r35 = virtualinvoke $r28.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String)>($r37);

        $r38 = new thredds.wcs.v1_1_0.WcsException;

        $r40 = <thredds.wcs.v1_1_0.WcsException$Code: thredds.wcs.v1_1_0.WcsException$Code UnsupportedCombination>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to subset coverage <");

        $r42 = r6.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<thredds.wcs.v1_1_0.WcsException: void <init>(thredds.wcs.v1_1_0.WcsException$Code,java.lang.String,java.lang.String)>($r40, "", $r45);

        throw $r38;

     label4:
        $r10 := @caughtexception;

        $r12 = <thredds.wcs.v1_1_0.GetCoverage: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writeCoverageDataToFile(): Failed to write file for requested coverage <");

        $r14 = r6.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r17 = virtualinvoke $r10.<java.io.IOException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String)>($r19);

        $r20 = new thredds.wcs.v1_1_0.WcsException;

        $r22 = <thredds.wcs.v1_1_0.WcsException$Code: thredds.wcs.v1_1_0.WcsException$Code NoApplicableCode>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem creating coverage <");

        $r24 = r6.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<thredds.wcs.v1_1_0.WcsException: void <init>(thredds.wcs.v1_1_0.WcsException$Code,java.lang.String,java.lang.String)>($r22, "", $r27);

        throw $r20;

        catch ucar.ma2.InvalidRangeException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public org.jdom.Document getGetCoverageDoc()
    {
        org.jdom.Document $r1, $r2, $r3;
        thredds.wcs.v1_1_0.GetCoverage r0;

        r0 := @this: thredds.wcs.v1_1_0.GetCoverage;

        $r1 = r0.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Document getCoverageDoc>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Document generateGetCoverageDoc()>();

        r0.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Document getCoverageDoc> = $r3;

     label1:
        $r2 = r0.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Document getCoverageDoc>;

        return $r2;
    }

    public void writeGetCoverageDoc(java.io.PrintWriter) throws java.io.IOException
    {
        java.io.PrintWriter r4;
        org.jdom.Document $r3;
        org.jdom.output.Format $r1;
        thredds.wcs.v1_1_0.GetCoverage r2;
        org.jdom.output.XMLOutputter $r0;

        r2 := @this: thredds.wcs.v1_1_0.GetCoverage;

        r4 := @parameter0: java.io.PrintWriter;

        $r0 = new org.jdom.output.XMLOutputter;

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>();

        specialinvoke $r0.<org.jdom.output.XMLOutputter: void <init>(org.jdom.output.Format)>($r1);

        $r3 = virtualinvoke r2.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Document getGetCoverageDoc()>();

        virtualinvoke $r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.Writer)>($r3, r4);

        return;
    }

    public org.jdom.Document generateGetCoverageDoc()
    {
        thredds.wcs.v1_1_0.GetCoverage r4;
        org.jdom.Document $r7;
        org.jdom.Namespace $r1, $r2, $r3;
        java.lang.String $r5;
        org.jdom.Element $r0, $r6;

        r4 := @this: thredds.wcs.v1_1_0.GetCoverage;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace owcsNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Coverages", $r1);

        $r2 = <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace owsNS>;

        virtualinvoke $r0.<org.jdom.Element: void addNamespaceDeclaration(org.jdom.Namespace)>($r2);

        $r3 = <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: void addNamespaceDeclaration(org.jdom.Namespace)>($r3);

        $r5 = r4.<thredds.wcs.v1_1_0.GetCoverage: java.lang.String identifier>;

        $r6 = virtualinvoke r4.<thredds.wcs.v1_1_0.GetCoverage: org.jdom.Element genCoverage(java.lang.String)>($r5);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r6);

        $r7 = new org.jdom.Document;

        specialinvoke $r7.<org.jdom.Document: void <init>(org.jdom.Element)>($r0);

        return $r7;
    }

    public org.jdom.Element genCoverage(java.lang.String)
    {
        org.jdom.Namespace $r1;
        thredds.wcs.v1_1_0.GetCoverage r2;
        java.lang.String r3;
        org.jdom.Element $r0;

        r2 := @this: thredds.wcs.v1_1_0.GetCoverage;

        r3 := @parameter0: java.lang.String;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace owcsNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("Coverage", $r1);

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        org.jdom.Namespace $r1, $r2, $r3;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/wcs/v1_1_0/GetCoverage;");

        <thredds.wcs.v1_1_0.GetCoverage: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String)>("http://www.opengis.net/wcs/1.1/ows");

        <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace owcsNS> = $r1;

        $r2 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("ows", "http://www.opengis.net/ows");

        <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace owsNS> = $r2;

        $r3 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("xlink", "http://www.w3.org/1999/xlink");

        <thredds.wcs.v1_1_0.GetCoverage: org.jdom.Namespace xlinkNS> = $r3;

        <thredds.wcs.v1_1_0.GetCoverage: ucar.nc2.util.DiskCache2 diskCache> = null;

        return;
    }
}
