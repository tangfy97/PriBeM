final class org.apache.lucene.util.packed.Direct64 extends org.apache.lucene.util.packed.PackedInts$MutableImpl
{
    final long[] values;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        int i0;
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$MutableImpl: void <init>(int,int)>(i0, 64);

        $r1 = newarray (long)[i0];

        r0.<org.apache.lucene.util.packed.Direct64: long[] values> = $r1;

        return;
    }

    void <init>(int, org.apache.lucene.store.DataInput, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r1;
        long[] $r2;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0, i2, i3;
        long $l1;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i2 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.store.DataInput;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.util.packed.Direct64: void <init>(int)>(i0);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r2 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        $l1 = virtualinvoke r1.<org.apache.lucene.store.DataInput: long readLong()>();

        $r2[i3] = $l1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public long get(int)
    {
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0;
        long $l1;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        $l1 = $r1[i0];

        return $l1;
    }

    public void set(int, long)
    {
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0;
        long l1;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        $r1[i0] = l1;

        return;
    }

    public long ramBytesUsed()
    {
        long $l4, $l5, $l6, $l7;
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        $i0 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_HEADER>;

        $i2 = $i0 + 8;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = $i2 + $i1;

        $l4 = (long) $i3;

        $l5 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long alignObjectSize(long)>($l4);

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        $l6 = staticinvoke <org.apache.lucene.util.RamUsageEstimator: long sizeOf(long[])>($r1);

        $l7 = $l5 + $l6;

        return $l7;
    }

    public void clear()
    {
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        return;
    }

    public java.lang.Object getArray()
    {
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        return $r1;
    }

    public boolean hasArray()
    {
        org.apache.lucene.util.packed.Direct64 r0;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        return 1;
    }

    public int get(int, long[], int, int)
    {
        java.lang.AssertionError $r3, $r4, $r5;
        long[] r1, $r2;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        java.lang.String $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label1:
        $z1 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i8 = r0.<org.apache.lucene.util.packed.Direct64: int valueCount>;

        if i0 < $i8 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $z2 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i7 = i5 + i2;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Direct64: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        $r2 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, r1, i5, $i4);

        return $i4;
    }

    public int set(int, long[], int, int)
    {
        java.lang.AssertionError $r3, $r4, $r5;
        long[] r1, $r2;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8;
        java.lang.String $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i5 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i2 > 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len must be > 0 (got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r5;

     label1:
        $z1 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if i0 < 0 goto label2;

        $i8 = r0.<org.apache.lucene.util.packed.Direct64: int valueCount>;

        if i0 < $i8 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $z2 = <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i7 = i5 + i2;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.Direct64: int valueCount>;

        $i3 = $i1 - i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        $r2 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i5, $r2, i0, $i4);

        return $i4;
    }

    public void fill(int, int, long)
    {
        long[] $r1;
        org.apache.lucene.util.packed.Direct64 r0;
        int i0, i1;
        long l2;

        r0 := @this: org.apache.lucene.util.packed.Direct64;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $r1 = r0.<org.apache.lucene.util.packed.Direct64: long[] values>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r1, i0, i1, l2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/Direct64;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.Direct64: boolean $assertionsDisabled> = $z1;

        return;
    }
}
