class com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap extends com.mycila.inject.internal.guava.collect.ForwardingMap
{
    private final java.util.Map delegate;
    final com.mycila.inject.internal.guava.collect.MapConstraint constraint;
    private transient java.util.Set entrySet;

    void <init>(java.util.Map, com.mycila.inject.internal.guava.collect.MapConstraint)
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map r1, $r3;
        java.lang.Object $r2, $r5;
        com.mycila.inject.internal.guava.collect.MapConstraint r4, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        r1 := @parameter0: java.util.Map;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.MapConstraint;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingMap: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Map) $r2;

        r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate> = $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.mycila.inject.internal.guava.collect.MapConstraint) $r5;

        r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint> = $r6;

        return;
    }

    protected java.util.Map delegate()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate>;

        return $r1;
    }

    public java.util.Set entrySet()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map $r1;
        java.util.Set $r2, $r4, r5;
        com.mycila.inject.internal.guava.collect.MapConstraint $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        r5 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Set entrySet>;

        if r5 != null goto label1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Set access$000(java.util.Set,com.mycila.inject.internal.guava.collect.MapConstraint)>($r2, $r3);

        r5 = $r4;

        r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Set entrySet> = $r4;

     label1:
        return r5;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map $r4;
        java.lang.Object r1, r2, $r5;
        com.mycila.inject.internal.guava.collect.MapConstraint $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint>;

        interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.MapConstraint: void checkKeyValue(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r5;
    }

    public void putAll(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map r1, $r3, $r4;
        com.mycila.inject.internal.guava.collect.MapConstraint $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        r1 := @parameter0: java.util.Map;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: com.mycila.inject.internal.guava.collect.MapConstraint constraint>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.MapConstraints: java.util.Map access$100(java.util.Map,com.mycila.inject.internal.guava.collect.MapConstraint)>(r1, $r2);

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r4);

        return;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MapConstraints$ConstrainedMap: java.util.Map delegate()>();

        return $r1;
    }
}
