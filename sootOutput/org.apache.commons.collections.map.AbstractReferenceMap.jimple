public abstract class org.apache.commons.collections.map.AbstractReferenceMap extends org.apache.commons.collections.map.AbstractHashedMap
{
    public static final int HARD;
    public static final int SOFT;
    public static final int WEAK;
    protected int keyType;
    protected int valueType;
    protected boolean purgeValues;
    private transient java.lang.ref.ReferenceQueue queue;

    protected void <init>()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>()>();

        return;
    }

    protected void <init>(int, int, int, float, boolean)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        int i0, i1, i2;
        float f0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int,float)>(i0, f0);

        staticinvoke <org.apache.commons.collections.map.AbstractReferenceMap: void verify(java.lang.String,int)>("keyType", i1);

        staticinvoke <org.apache.commons.collections.map.AbstractReferenceMap: void verify(java.lang.String,int)>("valueType", i2);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType> = i1;

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType> = i2;

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: boolean purgeValues> = z0;

        return;
    }

    protected void init()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue> = $r1;

        return;
    }

    private static void verify(java.lang.String, int)
    {
        java.lang.StringBuffer $r1, $r3, $r4;
        int i0;
        java.lang.String r2, $r5;
        java.lang.IllegalArgumentException $r0;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be HARD, SOFT, WEAK.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public int size()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        int $i0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $i0 = specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $z0 = specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeRead()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.Object r1, $r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeRead()>();

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r2;
        java.lang.Object r0, r1, $r3;
        java.lang.NullPointerException $r4, $r5;

        r2 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null keys not allowed");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("null values not allowed");

        throw $r4;

     label2:
        virtualinvoke r2.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeWrite()>();

        $r3 = specialinvoke r2.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        java.lang.Object r0, $r2;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        virtualinvoke r1.<org.apache.commons.collections.map.AbstractReferenceMap: void purgeBeforeWrite()>();

        $r2 = specialinvoke r1.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object remove(java.lang.Object)>(r0);

        return $r2;
    }

    public void clear()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.ref.Reference $r2;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void clear()>();

     label1:
        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceMapIterator $r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceMapIterator;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceMapIterator: void <init>(org.apache.commons.collections.map.AbstractReferenceMap)>(r1);

        return $r0;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySet $r3;
        org.apache.commons.collections.map.AbstractHashedMap$EntrySet $r1, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySet;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySet: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet>;

        return $r2;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$KeySet $r1, $r2;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySet $r3;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySet;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySet: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet>;

        return $r2;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValues $r3;
        org.apache.commons.collections.map.AbstractHashedMap$Values $r1, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$Values values>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValues;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValues: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$Values values> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$Values values>;

        return $r2;
    }

    protected void purgeBeforeRead()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purge()>();

        return;
    }

    protected void purgeBeforeWrite()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purge()>();

        return;
    }

    protected void purge()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.ref.Reference r3;
        java.lang.ref.ReferenceQueue $r1, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

     label1:
        if r3 == null goto label2;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void purge(java.lang.ref.Reference)>(r3);

        $r2 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        goto label1;

     label2:
        return;
    }

    protected void purge(java.lang.ref.Reference)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r5, $r6, r8, r9;
        boolean $z0;
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry $r4;
        java.lang.ref.Reference r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.lang.ref.Reference;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r2 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r2;

        $i2 = virtualinvoke r1.<org.apache.commons.collections.map.AbstractReferenceMap: int hashIndex(int,int)>($i0, $i1);

        r8 = null;

        $r3 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r9 = $r3[$i2];

     label1:
        if r9 == null goto label5;

        $r4 = (org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry) r9;

        $z0 = virtualinvoke $r4.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: boolean purge(java.lang.ref.Reference)>(r0);

        if $z0 == 0 goto label4;

        if r8 != null goto label2;

        $r7 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r6 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        $r7[$i2] = $r6;

        goto label3;

     label2:
        $r5 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next> = $r5;

     label3:
        $i3 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: int size>;

        $i4 = $i3 - 1;

        r1.<org.apache.commons.collections.map.AbstractReferenceMap: int size> = $i4;

        return;

     label4:
        r8 = r9;

        r9 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label5:
        return;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        java.lang.Object r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r1.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r0);

        return $r2;
    }

    protected int hashEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r2;
        int $i0, $i1, $i2;
        java.lang.Object r0, r1;

        r2 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        if r1 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label4:
        $i2 = $i0 ^ $i1;

        return $i2;
    }

    protected boolean isEqualKey(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.ref.Reference $r2;
        int $i0;
        java.lang.Object r1, r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $i0 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        if $i0 <= 0 goto label1;

        $r2 = (java.lang.ref.Reference) r3;

        $r4 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        goto label2;

     label1:
        $r4 = r3;

     label2:
        if r1 == $r4 goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        int i0;
        java.lang.Object r3, r4;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r2;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry $r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r2 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry: void <init>(org.apache.commons.collections.map.AbstractReferenceMap,org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r1, r2, i0, r3, r4);

        return $r0;
    }

    protected java.util.Iterator createEntrySetIterator()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySetIterator $r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySetIterator;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySetIterator: void <init>(org.apache.commons.collections.map.AbstractReferenceMap)>(r1);

        return $r0;
    }

    protected java.util.Iterator createKeySetIterator()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySetIterator $r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySetIterator;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceKeySetIterator: void <init>(org.apache.commons.collections.map.AbstractReferenceMap)>(r1);

        return $r0;
    }

    protected java.util.Iterator createValuesIterator()
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValuesIterator $r0;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        $r0 = new org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValuesIterator;

        specialinvoke $r0.<org.apache.commons.collections.map.AbstractReferenceMap$ReferenceValuesIterator: void <init>(org.apache.commons.collections.map.AbstractReferenceMap)>(r1);

        return $r0;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections.map.AbstractReferenceMap r1;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2;
        int $i0, $i1, $i2;
        float $f0;
        org.apache.commons.collections.MapIterator $r3;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        $i0 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i1 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $z0 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: boolean purgeValues>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z0);

        $f0 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: float loadFactor>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeFloat(float)>($f0);

        $r2 = r1.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r2;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        $r3 = virtualinvoke r1.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r5 = interfaceinvoke $r3.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        goto label1;

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.io.ObjectInputStream r1;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.AbstractReferenceMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: int keyType> = $i0;

        $i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: int valueType> = $i1;

        $z0 = virtualinvoke r1.<java.io.ObjectInputStream: boolean readBoolean()>();

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: boolean purgeValues> = $z0;

        $f0 = virtualinvoke r1.<java.io.ObjectInputStream: float readFloat()>();

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: float loadFactor> = $f0;

        $i2 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: void init()>();

        $r2 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[$i2];

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r2;

     label1:
        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if $r3 != null goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        goto label1;

     label3:
        $r5 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i3 = lengthof $r5;

        $f1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: float loadFactor>;

        $i4 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractReferenceMap: int calculateThreshold(int,float)>($i3, $f1);

        r0.<org.apache.commons.collections.map.AbstractReferenceMap: int threshold> = $i4;

        return;
    }

    static java.lang.ref.ReferenceQueue access$000(org.apache.commons.collections.map.AbstractReferenceMap)
    {
        org.apache.commons.collections.map.AbstractReferenceMap r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractReferenceMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractReferenceMap: java.lang.ref.ReferenceQueue queue>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.map.AbstractReferenceMap: int WEAK> = 2;

        <org.apache.commons.collections.map.AbstractReferenceMap: int SOFT> = 1;

        <org.apache.commons.collections.map.AbstractReferenceMap: int HARD> = 0;

        return;
    }
}
