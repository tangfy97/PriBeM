public abstract class org.springframework.util.StringUtils extends java.lang.Object
{
    private static final java.lang.String FOLDER_SEPARATOR;
    private static final java.lang.String WINDOWS_FOLDER_SEPARATOR;
    private static final java.lang.String TOP_PATH;
    private static final java.lang.String CURRENT_PATH;
    private static final char EXTENSION_SEPARATOR;

    public void <init>()
    {
        org.springframework.util.StringUtils r0;

        r0 := @this: org.springframework.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean hasLength(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean hasLength(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.CharSequence)>(r0);

        return $z0;
    }

    public static boolean hasText(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2;
        char $c1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

        goto label4;

     label2:
        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < $i0 goto label2;

        return 0;
    }

    public static boolean hasText(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.CharSequence)>(r0);

        return $z0;
    }

    public static boolean containsWhitespace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2;
        char $c1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

        goto label4;

     label2:
        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < $i0 goto label2;

        return 0;
    }

    public static boolean containsWhitespace(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean containsWhitespace(java.lang.CharSequence)>(r0);

        return $z0;
    }

    public static java.lang.String trimWhitespace(java.lang.String)
    {
        char $c3, $c6;
        int $i0, $i1, $i2, $i4, $i5, $i7;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

     label3:
        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label5;

        $c6 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>(0);

        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c6);

        if $z2 != 0 goto label2;

        goto label5;

     label4:
        $i4 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 - 1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i5);

     label5:
        $i7 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i7 <= 0 goto label6;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>($i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z1 != 0 goto label4;

     label6:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String trimAllWhitespace(java.lang.String)
    {
        char $c0;
        int i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        i1 = 0;

        goto label4;

     label2:
        $c0 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>(i1);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z1 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(i1);

        goto label4;

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i2 > i1 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String trimLeadingWhitespace(java.lang.String)
    {
        int $i0;
        java.lang.StringBuilder $r1;
        char $c1;
        java.lang.String r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

     label3:
        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        $c1 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label2;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String trimTrailingWhitespace(java.lang.String)
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        goto label3;

     label2:
        $i4 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 - 1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i5);

     label3:
        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r1.<java.lang.StringBuilder: char charAt(int)>($i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z1 != 0 goto label2;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String trimLeadingCharacter(java.lang.String, char)
    {
        char $c1, c2;
        int $i0, $i3, $i4;
        java.lang.StringBuilder $r3;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c2 := @parameter1: char;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

     label3:
        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        $c1 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(0);

        $i3 = (int) $c1;

        $i4 = (int) c2;

        if $i3 == $i4 goto label2;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String trimTrailingCharacter(java.lang.String, char)
    {
        char $c3, c4;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r3;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c4 := @parameter1: char;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        goto label3;

     label2:
        $i5 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i6 = $i5 - 1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i6);

     label3:
        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>($i2);

        $i7 = (int) $c3;

        $i8 = (int) c4;

        if $i7 == $i8 goto label2;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r0, r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        return 0;

     label4:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r0, r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        return 0;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public static boolean substringMatch(java.lang.CharSequence, int, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        char $c4, $c5;
        int $i0, i1, i2, $i3, i6, $i7, $i8;

        r1 := @parameter0: java.lang.CharSequence;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.CharSequence;

        i6 = 0;

        goto label4;

     label1:
        i2 = i1 + i6;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 >= $i3 goto label2;

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i6);

        $i7 = (int) $c4;

        $i8 = (int) $c5;

        if $i7 == $i8 goto label3;

     label2:
        return 0;

     label3:
        i6 = i6 + 1;

     label4:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i6 < $i0 goto label1;

        return 1;
    }

    public static int countOccurrencesOf(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        i4 = 0;

        i5 = 0;

        goto label4;

     label3:
        i4 = i4 + 1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        i5 = $i2 + $i3;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i5);

        $i7 = (int) -1;

        if $i2 != $i7 goto label3;

        return i4;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.String r0, r1, r2, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        if r2 != null goto label2;

     label1:
        return r0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        i1 = i2 + $i0;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i1);

     label4:
        if i2 >= 0 goto label3;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String delete(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "");

        return $r2;
    }

    public static java.lang.String deleteAny(java.lang.String, java.lang.String)
    {
        char $c0;
        int $i1, i2, $i3, $i4, $i6;
        java.lang.StringBuilder $r4;
        java.lang.String r0, r1, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

        goto label5;

     label3:
        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c0;

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($i4);

        $i6 = (int) -1;

        if $i1 != $i6 goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

     label4:
        i2 = i2 + 1;

     label5:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 < $i3 goto label3;

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public static java.lang.Object quoteIfString(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) r0;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String quote(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String unqualify(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String unqualify(java.lang.String,char)>(r0, 46);

        return $r1;
    }

    public static java.lang.String unqualify(java.lang.String, char)
    {
        int $i1, $i2, $i3;
        char c0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $i3 = (int) c0;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>($i3);

        $i2 = $i1 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r1;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String changeFirstCharacterCase(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    public static java.lang.String uncapitalize(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String changeFirstCharacterCase(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    private static java.lang.String changeFirstCharacterCase(java.lang.String, boolean)
    {
        char $c2, $c3, $c4, $c5;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2, $r3;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r1 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        if z0 == 0 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        goto label4;

     label3:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label4:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getFilename(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label3;

     label2:
        $r1 = r0;

     label3:
        return $r1;
    }

    public static java.lang.String getFilenameExtension(java.lang.String)
    {
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        return null;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if $i1 <= $i0 goto label3;

        return null;

     label3:
        $i2 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r1;
    }

    public static java.lang.String stripFilenameExtension(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        return r0;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if $i1 <= $i0 goto label3;

        return r0;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public static java.lang.String applyRelativePath(java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        java.lang.StringBuilder $r5, $r9, $r11, $r12;
        java.lang.String r0, r1, $r2, $r4, $r6, $r8, r10;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r10 = $r2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r12 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label2:
        return r1;
    }

    public static java.lang.String cleanPath(java.lang.String)
    {
        java.lang.String[] $r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8, $i10, $i12;
        java.lang.String r0, $r1, r4, $r5, $r6, $r8, $r9, $r11, $r13, r15, r16;
        java.util.LinkedList $r18;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r10, $r14, $r17, $r19;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r0, "\\", "/");

        r15 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        r16 = "";

        $i8 = (int) -1;

        if $i0 == $i8 goto label02;

        $i2 = $i0 + 1;

        r16 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = $i0 + 1;

        r15 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i3);

     label02:
        $z0 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label03;

        $r17 = new java.lang.StringBuilder;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r16);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = virtualinvoke r15.<java.lang.String: java.lang.String substring(int)>(1);

     label03:
        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>(r15, "/");

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        i4 = 0;

        $i1 = lengthof $r2;

        i5 = $i1 - 1;

        goto label08;

     label04:
        r4 = $r2[i5];

        $r5 = ".";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label07;

        $r6 = "..";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label05;

        i4 = i4 + 1;

        goto label07;

     label05:
        if i4 <= 0 goto label06;

        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label07;

     label06:
        interfaceinvoke $r18.<java.util.List: void add(int,java.lang.Object)>(0, r4);

     label07:
        $i12 = (int) -1;

        i5 = i5 + $i12;

     label08:
        if i5 >= 0 goto label04;

        i6 = 0;

        goto label10;

     label09:
        interfaceinvoke $r18.<java.util.List: void add(int,java.lang.Object)>(0, "..");

        i6 = i6 + 1;

     label10:
        if i6 < i4 goto label09;

        $r19 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r16);

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String)>($r18, "/");

        $r10 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static boolean pathEquals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r0);

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r2);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static java.util.Locale parseLocaleString(java.lang.String)
    {
        java.lang.String[] $r6;
        java.util.Locale $r14, $r17;
        int $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r5, r7, $r8, $r9, $r10, r11, $r12, r13;
        boolean $z0, $z1;
        char $c0;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r3, $r4, $r15;

        r0 := @parameter0: java.lang.String;

        i7 = 0;

        goto label03;

     label01:
        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c0;

        if $i10 == 95 goto label02;

        $i11 = (int) $c0;

        if $i11 == 32 goto label02;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z0 != 0 goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Locale value \"");

        $r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" contains invalid characters");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label02:
        i7 = i7 + 1;

     label03:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 < $i8 goto label01;

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String,boolean,boolean)>(r0, "_ ", 0, 0);

        $i1 = lengthof $r6;

        if $i1 <= 0 goto label04;

        $r10 = $r6[0];

        goto label05;

     label04:
        $r10 = "";

     label05:
        r11 = $r10;

        $i2 = lengthof $r6;

        if $i2 <= 1 goto label06;

        $r12 = $r6[1];

        goto label07;

     label06:
        $r12 = "";

     label07:
        r7 = $r12;

        r13 = "";

        $i3 = lengthof $r6;

        if $i3 < 2 goto label08;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r12);

        $i5 = virtualinvoke $r12.<java.lang.String: int length()>();

        i6 = $i4 + $i5;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i6);

        $r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimLeadingWhitespace(java.lang.String)>($r8);

        r13 = $r9;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z1 == 0 goto label08;

        r13 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimLeadingCharacter(java.lang.String,char)>($r9, 95);

     label08:
        $i9 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i9 <= 0 goto label09;

        $r17 = new java.util.Locale;

        $r14 = $r17;

        specialinvoke $r17.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r11, r7, r13);

        goto label10;

     label09:
        $r14 = null;

     label10:
        return $r14;
    }

    public static java.lang.String toLanguageTag(java.util.Locale)
    {
        java.util.Locale r1;
        java.lang.StringBuilder $r0, $r5, $r7, $r9;
        java.lang.String $r2, $r3, $r4, $r6, $r8, $r10;
        boolean $z0;

        r1 := @parameter0: java.util.Locale;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("-");

        $r8 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r10 = "";

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String[] addStringToArray(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0, r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r2;

        return $r3;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        r1 = newarray (java.lang.String)[$i1];

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        $i3 = lengthof r0;

        r1[$i3] = r2;

        return r1;
    }

    public static java.lang.String[] concatenateStringArrays(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        r2 = newarray (java.lang.String)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    public static java.lang.String[] mergeStringArrays(java.lang.String[], java.lang.String[])
    {
        java.util.Collection $r4;
        java.lang.String[] r0, r1, $r6;
        java.util.ArrayList $r2;
        java.util.List $r3;
        int i0, i1;
        java.lang.String r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r4 = (java.util.Collection) $r3;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        i0 = lengthof r1;

        i1 = 0;

        goto label5;

     label3:
        r5 = r1[i1];

        $z2 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z2 != 0 goto label4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r5);

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label3;

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r2);

        return $r6;
    }

    public static java.lang.String[] sortStringArray(java.lang.String[])
    {
        java.lang.String[] r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.String)[0];

        return $r1;

     label1:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r0);

        return r0;
    }

    public static java.lang.String[] toStringArray(java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection r0;
        int $i0;
        java.lang.String[] $r1, $r3;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.lang.String)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public static java.lang.String[] toStringArray(java.util.Enumeration)
    {
        java.util.List r2;
        java.lang.Object[] $r4;
        java.util.Enumeration r0;
        int $i0;
        java.lang.String[] $r3, $r5;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Enumeration;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>(r0);

        r2 = (java.util.List) $r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public static java.lang.String[] trimArrayElements(java.lang.String[])
    {
        java.lang.String[] r0, r1, $r3;
        int $i0, $i1, i2, $i3;
        java.lang.String r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.String)[0];

        return $r3;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label5;

     label2:
        r2 = r0[i2];

        $i1 = i2;

        if r2 == null goto label3;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        goto label4;

     label3:
        $r4 = null;

     label4:
        r1[$i1] = $r4;

        i2 = i2 + 1;

     label5:
        $i3 = lengthof r0;

        if i2 < $i3 goto label2;

        return r1;
    }

    public static java.lang.String[] removeDuplicateStrings(java.lang.String[])
    {
        int i0, i1;
        java.lang.String[] r0, $r3;
        java.lang.String r2;
        java.util.TreeSet $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

        goto label3;

     label2:
        r2 = r0[i1];

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r2);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r1);

        return $r3;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r4;
        int $i0, $i1, $i2;
        java.lang.String r0, r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if $i0 >= 0 goto label3;

        return null;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = $r2;

        $r4[1] = $r3;

        return $r4;
    }

    public static java.util.Properties splitArrayElementsIntoProperties(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1;
        java.util.Properties $r2;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.util.Properties splitArrayElementsIntoProperties(java.lang.String[],java.lang.String,java.lang.String)>(r0, r1, null);

        return $r2;
    }

    public static java.util.Properties splitArrayElementsIntoProperties(java.lang.String[], java.lang.String, java.lang.String)
    {
        java.util.Properties $r1;
        java.lang.String[] r0, $r4;
        int i0, i1;
        java.lang.String r2, r3, $r5, $r6, $r7, $r8, r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

        goto label6;

     label2:
        r9 = r0[i1];

        if r2 == null goto label3;

        r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String deleteAny(java.lang.String,java.lang.String)>(r9, r2);

     label3:
        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r9, r3);

        if $r4 != null goto label4;

        goto label5;

     label4:
        $r5 = $r4[0];

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r7 = $r4[1];

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r6, $r8);

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label2;

        return $r1;
    }

    public static java.lang.String[] tokenizeToStringArray(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String,boolean,boolean)>(r0, r1, 1, 1);

        return $r2;
    }

    public static java.lang.String[] tokenizeToStringArray(java.lang.String, java.lang.String, boolean, boolean)
    {
        java.lang.String[] $r5;
        java.util.ArrayList $r3;
        java.util.StringTokenizer $r1;
        int $i0;
        java.lang.String r0, r2, $r4, r6;
        boolean z0, z1, $z2;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        goto label5;

     label2:
        $r4 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r6 = $r4;

        if z0 == 0 goto label3;

        r6 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

     label3:
        if z1 == 0 goto label4;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

     label4:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

     label5:
        $z2 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 != 0 goto label2;

        $r5 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r3);

        return $r5;
    }

    public static java.lang.String[] delimitedListToStringArray(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.String[] delimitedListToStringArray(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r11, $r12, $r13;
        java.util.ArrayList $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        java.lang.String r0, r1, $r3, $r4, r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r12 = newarray (java.lang.String)[0];

        return $r12;

     label1:
        if r1 != null goto label2;

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = r0;

        return $r11;

     label2:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

        i6 = 0;

        goto label4;

     label3:
        $i5 = i6 + 1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, $i5);

        $r10 = staticinvoke <org.springframework.util.StringUtils: java.lang.String deleteAny(java.lang.String,java.lang.String)>($r9, r5);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r10);

        i6 = i6 + 1;

     label4:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 < $i4 goto label3;

        goto label8;

     label5:
        i7 = 0;

        goto label7;

     label6:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i7, $i0);

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String deleteAny(java.lang.String,java.lang.String)>($r4, r5);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i7 = $i0 + $i1;

     label7:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i7);

        $i9 = (int) -1;

        if $i0 != $i9 goto label6;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 <= 0 goto label8;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 > $i3 goto label8;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i7);

        $r8 = staticinvoke <org.springframework.util.StringUtils: java.lang.String deleteAny(java.lang.String,java.lang.String)>($r7, r5);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r8);

     label8:
        $r13 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r14);

        return $r13;
    }

    public static java.lang.String[] commaDelimitedListToStringArray(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] delimitedListToStringArray(java.lang.String,java.lang.String)>(r0, ",");

        return $r1;
    }

    public static java.util.Set commaDelimitedListToSet(java.lang.String)
    {
        int i0, i1;
        java.lang.String[] $r2;
        java.lang.String r1, r3;
        java.util.TreeSet $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>(r1);

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return $r0;
    }

    public static java.lang.String collectionToDelimitedString(java.util.Collection, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.StringBuilder $r1, $r4, $r6;
        java.lang.Object $r5;
        java.lang.String r3, r7, r8, $r9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        r8 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

     label3:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String collectionToDelimitedString(java.util.Collection, java.lang.String)
    {
        java.lang.String r1, $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "", "");

        return $r2;
    }

    public static java.lang.String collectionToCommaDelimitedString(java.util.Collection)
    {
        java.lang.String $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String collectionToDelimitedString(java.util.Collection,java.lang.String)>(r0, ",");

        return $r1;
    }

    public static java.lang.String arrayToDelimitedString(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        int $i0, i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.Object $r2, $r5;
        java.lang.String r3, $r4, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r3 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $i0 = lengthof r0;

        if $i0 != 1 goto label2;

        $r5 = r0[0];

        $r6 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.String nullSafeToString(java.lang.Object)>($r5);

        return $r6;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        goto label5;

     label3:
        if i1 <= 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label4:
        $r2 = r0[i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        i1 = i1 + 1;

     label5:
        $i2 = lengthof r0;

        if i1 < $i2 goto label3;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String arrayToCommaDelimitedString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToDelimitedString(java.lang.Object[],java.lang.String)>(r0, ",");

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.util.StringUtils: char EXTENSION_SEPARATOR> = 46;

        <org.springframework.util.StringUtils: java.lang.String CURRENT_PATH> = ".";

        <org.springframework.util.StringUtils: java.lang.String TOP_PATH> = "..";

        <org.springframework.util.StringUtils: java.lang.String WINDOWS_FOLDER_SEPARATOR> = "\\";

        <org.springframework.util.StringUtils: java.lang.String FOLDER_SEPARATOR> = "/";

        return;
    }
}
