public abstract class org.apache.batik.dom.svg.AbstractSVGTransformList extends org.apache.batik.dom.svg.AbstractSVGList implements org.w3c.dom.svg.SVGTransformList
{
    public static final java.lang.String SVG_TRANSFORMATION_LIST_SEPARATOR;

    public void <init>()
    {
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void <init>()>();

        return;
    }

    protected java.lang.String getItemSeparator()
    {
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        return "";
    }

    protected abstract org.w3c.dom.svg.SVGException createSVGException(short, java.lang.String, java.lang.Object[]);

    public org.w3c.dom.svg.SVGTransform initialize(org.w3c.dom.svg.SVGTransform) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        org.w3c.dom.svg.SVGTransform r1, $r3;
        org.apache.batik.dom.svg.SVGItem $r2;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransform;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem initializeImpl(java.lang.Object)>(r1);

        $r3 = (org.w3c.dom.svg.SVGTransform) $r2;

        return $r3;
    }

    public org.w3c.dom.svg.SVGTransform getItem(int) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.svg.SVGTransform $r2;
        org.apache.batik.dom.svg.SVGItem $r1;
        int i0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem getItemImpl(int)>(i0);

        $r2 = (org.w3c.dom.svg.SVGTransform) $r1;

        return $r2;
    }

    public org.w3c.dom.svg.SVGTransform insertItemBefore(org.w3c.dom.svg.SVGTransform, int) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        org.w3c.dom.svg.SVGTransform r1, $r3;
        org.apache.batik.dom.svg.SVGItem $r2;
        int i0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransform;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem insertItemBeforeImpl(java.lang.Object,int)>(r1, i0);

        $r3 = (org.w3c.dom.svg.SVGTransform) $r2;

        return $r3;
    }

    public org.w3c.dom.svg.SVGTransform replaceItem(org.w3c.dom.svg.SVGTransform, int) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        org.w3c.dom.svg.SVGTransform r1, $r3;
        org.apache.batik.dom.svg.SVGItem $r2;
        int i0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransform;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem replaceItemImpl(java.lang.Object,int)>(r1, i0);

        $r3 = (org.w3c.dom.svg.SVGTransform) $r2;

        return $r3;
    }

    public org.w3c.dom.svg.SVGTransform removeItem(int) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.svg.SVGTransform $r2;
        org.apache.batik.dom.svg.SVGItem $r1;
        int i0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem removeItemImpl(int)>(i0);

        $r2 = (org.w3c.dom.svg.SVGTransform) $r1;

        return $r2;
    }

    public org.w3c.dom.svg.SVGTransform appendItem(org.w3c.dom.svg.SVGTransform) throws org.w3c.dom.DOMException, org.w3c.dom.svg.SVGException
    {
        org.w3c.dom.svg.SVGTransform r1, $r3;
        org.apache.batik.dom.svg.SVGItem $r2;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransform;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem appendItemImpl(java.lang.Object)>(r1);

        $r3 = (org.w3c.dom.svg.SVGTransform) $r2;

        return $r3;
    }

    public org.w3c.dom.svg.SVGTransform createSVGTransformFromMatrix(org.w3c.dom.svg.SVGMatrix)
    {
        org.apache.batik.dom.svg.SVGOMTransform $r0;
        org.w3c.dom.svg.SVGMatrix r1;
        org.apache.batik.dom.svg.AbstractSVGTransformList r2;

        r2 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r1 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        $r0 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setMatrix(org.w3c.dom.svg.SVGMatrix)>(r1);

        return $r0;
    }

    public org.w3c.dom.svg.SVGTransform consolidate()
    {
        org.w3c.dom.svg.SVGTransform $r9, $r10, $r11;
        org.apache.batik.dom.svg.SVGOMMatrix $r8;
        int $i0, i1;
        org.apache.batik.dom.svg.SVGItem $r2, $r6;
        java.awt.geom.AffineTransform $r3, r5, $r7;
        org.apache.batik.dom.svg.AbstractSVGTransformList r0;
        java.util.List $r1;
        java.lang.Object $r4;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r12, r13;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: void revalidate()>();

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGList: java.util.List itemList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        if $i0 != 1 goto label2;

        $r11 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList: org.w3c.dom.svg.SVGTransform getItem(int)>(0);

        return $r11;

     label2:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem getItemImpl(int)>(0);

        r12 = (org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem) $r2;

        $r3 = r12.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        $r4 = virtualinvoke $r3.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r5 = (java.awt.geom.AffineTransform) $r4;

        i1 = 1;

        goto label4;

     label3:
        $r6 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGList: org.apache.batik.dom.svg.SVGItem getItemImpl(int)>(i1);

        r13 = (org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem) $r6;

        $r7 = r13.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke r5.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label3;

        $r8 = new org.apache.batik.dom.svg.SVGOMMatrix;

        specialinvoke $r8.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>(r5);

        $r9 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList: org.w3c.dom.svg.SVGTransform createSVGTransformFromMatrix(org.w3c.dom.svg.SVGMatrix)>($r8);

        $r10 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList: org.w3c.dom.svg.SVGTransform initialize(org.w3c.dom.svg.SVGTransform)>($r9);

        return $r10;
    }

    public java.awt.geom.AffineTransform getAffineTransform()
    {
        org.w3c.dom.svg.SVGTransform $r2;
        int $i0, i1;
        java.awt.geom.AffineTransform $r0, $r4;
        org.apache.batik.dom.svg.AbstractSVGTransformList r1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r3;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        i1 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGTransformList: org.w3c.dom.svg.SVGTransform getItem(int)>(i1);

        r3 = (org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem) $r2;

        $r4 = r3.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        i1 = i1 + 1;

     label2:
        $i0 = virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGList: int getNumberOfItems()>();

        if i1 < $i0 goto label1;

        return $r0;
    }

    protected org.apache.batik.dom.svg.SVGItem createSVGItem(java.lang.Object)
    {
        org.w3c.dom.svg.SVGTransform $r3;
        java.lang.Object r2;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem $r0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r1;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r3 = (org.w3c.dom.svg.SVGTransform) r2;

        specialinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void <init>(org.apache.batik.dom.svg.AbstractSVGTransformList,org.w3c.dom.svg.SVGTransform)>(r1, $r3);

        return $r0;
    }

    protected void doParse(java.lang.String, org.apache.batik.dom.svg.ListHandler) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.TransformListParser $r0;
        org.apache.batik.dom.svg.ListHandler r3;
        org.apache.batik.dom.svg.AbstractSVGTransformList$TransformListBuilder $r1;
        java.lang.String r4;
        org.apache.batik.dom.svg.AbstractSVGTransformList r2;

        r2 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.batik.dom.svg.ListHandler;

        $r0 = new org.apache.batik.parser.TransformListParser;

        specialinvoke $r0.<org.apache.batik.parser.TransformListParser: void <init>()>();

        $r1 = new org.apache.batik.dom.svg.AbstractSVGTransformList$TransformListBuilder;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGTransformList$TransformListBuilder: void <init>(org.apache.batik.dom.svg.AbstractSVGTransformList,org.apache.batik.dom.svg.ListHandler)>(r2, r3);

        virtualinvoke $r0.<org.apache.batik.parser.TransformListParser: void setTransformListHandler(org.apache.batik.parser.TransformListHandler)>($r1);

        virtualinvoke $r0.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>(r4);

        return;
    }

    protected void checkItemType(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r1;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.w3c.dom.svg.SVGTransform;

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.apache.batik.dom.svg.AbstractSVGTransformList: org.w3c.dom.svg.SVGException createSVGException(short,java.lang.String,java.lang.Object[])>(0, "expected.transform", null);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.batik.dom.svg.AbstractSVGTransformList: java.lang.String SVG_TRANSFORMATION_LIST_SEPARATOR> = "";

        return;
    }
}
