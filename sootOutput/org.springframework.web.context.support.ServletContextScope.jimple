public class org.springframework.web.context.support.ServletContextScope extends java.lang.Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.DisposableBean
{
    private final javax.servlet.ServletContext servletContext;
    private final java.util.Map destructionCallbacks;

    public void <init>(javax.servlet.ServletContext)
    {
        java.util.LinkedHashMap $r1;
        javax.servlet.ServletContext r2;
        org.springframework.web.context.support.ServletContextScope r0;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        r2 := @parameter0: javax.servlet.ServletContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.springframework.web.context.support.ServletContextScope: java.util.Map destructionCallbacks> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "ServletContext must not be null");

        r0.<org.springframework.web.context.support.ServletContextScope: javax.servlet.ServletContext servletContext> = r2;

        return;
    }

    public java.lang.Object get(java.lang.String, org.springframework.beans.factory.ObjectFactory)
    {
        org.springframework.beans.factory.ObjectFactory r4;
        org.springframework.web.context.support.ServletContextScope r0;
        javax.servlet.ServletContext $r2, $r6;
        java.lang.Object $r3, $r5, r7;
        java.lang.String r1;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.springframework.beans.factory.ObjectFactory;

        $r2 = r0.<org.springframework.web.context.support.ServletContextScope: javax.servlet.ServletContext servletContext>;

        $r3 = interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>(r1);

        r7 = $r3;

        if $r3 != null goto label1;

        $r5 = interfaceinvoke r4.<org.springframework.beans.factory.ObjectFactory: java.lang.Object getObject()>();

        r7 = $r5;

        $r6 = r0.<org.springframework.web.context.support.ServletContextScope: javax.servlet.ServletContext servletContext>;

        interfaceinvoke $r6.<javax.servlet.ServletContext: void setAttribute(java.lang.String,java.lang.Object)>(r1, $r5);

     label1:
        return r7;
    }

    public java.lang.Object remove(java.lang.String)
    {
        org.springframework.web.context.support.ServletContextScope r0;
        java.util.Map $r5;
        javax.servlet.ServletContext $r2, $r4;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.web.context.support.ServletContextScope: javax.servlet.ServletContext servletContext>;

        $r3 = interfaceinvoke $r2.<javax.servlet.ServletContext: java.lang.Object getAttribute(java.lang.String)>(r1);

        if $r3 == null goto label1;

        $r4 = r0.<org.springframework.web.context.support.ServletContextScope: javax.servlet.ServletContext servletContext>;

        interfaceinvoke $r4.<javax.servlet.ServletContext: void removeAttribute(java.lang.String)>(r1);

        $r5 = r0.<org.springframework.web.context.support.ServletContextScope: java.util.Map destructionCallbacks>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;

     label1:
        return null;
    }

    public void registerDestructionCallback(java.lang.String, java.lang.Runnable)
    {
        org.springframework.web.context.support.ServletContextScope r0;
        java.util.Map $r3;
        java.lang.String r1;
        java.lang.Runnable r2;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Runnable;

        $r3 = r0.<org.springframework.web.context.support.ServletContextScope: java.util.Map destructionCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Object resolveContextualObject(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.web.context.support.ServletContextScope r0;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getConversationId()
    {
        org.springframework.web.context.support.ServletContextScope r0;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        return null;
    }

    public void destroy()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.Runnable r5;
        org.springframework.web.context.support.ServletContextScope r0;
        java.util.Map $r1, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.springframework.web.context.support.ServletContextScope;

        $r1 = r0.<org.springframework.web.context.support.ServletContextScope: java.util.Map destructionCallbacks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Runnable) $r4;

        interfaceinvoke r5.<java.lang.Runnable: void run()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.springframework.web.context.support.ServletContextScope: java.util.Map destructionCallbacks>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        return;
    }
}
