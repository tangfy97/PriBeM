public class org.junit.rules.ExpectedException extends java.lang.Object implements org.junit.rules.TestRule
{
    private final org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder;
    private boolean handleAssumptionViolatedExceptions;
    private boolean handleAssertionErrors;

    public static org.junit.rules.ExpectedException none()
    {
        org.junit.rules.ExpectedException $r0;

        $r0 = new org.junit.rules.ExpectedException;

        specialinvoke $r0.<org.junit.rules.ExpectedException: void <init>()>();

        return $r0;
    }

    private void <init>()
    {
        org.junit.rules.ExpectedException r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1;

        r0 := @this: org.junit.rules.ExpectedException;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.ExpectedExceptionMatcherBuilder;

        specialinvoke $r1.<org.junit.rules.ExpectedExceptionMatcherBuilder: void <init>()>();

        r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder> = $r1;

        r0.<org.junit.rules.ExpectedException: boolean handleAssumptionViolatedExceptions> = 0;

        r0.<org.junit.rules.ExpectedException: boolean handleAssertionErrors> = 0;

        return;
    }

    public org.junit.rules.ExpectedException handleAssertionErrors()
    {
        org.junit.rules.ExpectedException r0;

        r0 := @this: org.junit.rules.ExpectedException;

        r0.<org.junit.rules.ExpectedException: boolean handleAssertionErrors> = 1;

        return r0;
    }

    public org.junit.rules.ExpectedException handleAssumptionViolatedExceptions()
    {
        org.junit.rules.ExpectedException r0;

        r0 := @this: org.junit.rules.ExpectedException;

        r0.<org.junit.rules.ExpectedException: boolean handleAssumptionViolatedExceptions> = 1;

        return r0;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.runners.model.Statement r2;
        org.junit.runner.Description r3;
        org.junit.rules.ExpectedException$ExpectedExceptionStatement $r0;
        org.junit.rules.ExpectedException r1;

        r1 := @this: org.junit.rules.ExpectedException;

        r2 := @parameter0: org.junit.runners.model.Statement;

        r3 := @parameter1: org.junit.runner.Description;

        $r0 = new org.junit.rules.ExpectedException$ExpectedExceptionStatement;

        specialinvoke $r0.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: void <init>(org.junit.rules.ExpectedException,org.junit.runners.model.Statement)>(r1, r2);

        return $r0;
    }

    public void expect(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r2;
        org.hamcrest.Matcher r1;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder>;

        virtualinvoke $r2.<org.junit.rules.ExpectedExceptionMatcherBuilder: void add(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void expect(java.lang.Class)
    {
        java.lang.Class r1;
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectMessage(java.lang.String)
    {
        java.lang.String r1;
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expectMessage(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectMessage(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectCause(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = staticinvoke <org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher hasCause(org.hamcrest.Matcher)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    private void failDueToMissingException() throws java.lang.AssertionError
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1;
        org.hamcrest.Matcher $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r3, $r7;
        org.junit.rules.ExpectedException r0;

        r0 := @this: org.junit.rules.ExpectedException;

        $r1 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder>;

        $r2 = virtualinvoke $r1.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher build()>();

        $r3 = staticinvoke <org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected test to throw ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r7);

        return;
    }

    private void optionallyHandleException(java.lang.Throwable, boolean) throws java.lang.Throwable
    {
        java.lang.Throwable r0;
        org.junit.rules.ExpectedException r1;
        boolean z0;

        r1 := @this: org.junit.rules.ExpectedException;

        r0 := @parameter0: java.lang.Throwable;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        specialinvoke r1.<org.junit.rules.ExpectedException: void handleException(java.lang.Throwable)>(r0);

        goto label2;

     label1:
        throw r0;

     label2:
        return;
    }

    private void handleException(java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r2;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1, $r3;
        org.hamcrest.Matcher $r4;
        org.junit.rules.ExpectedException r0;
        boolean $z0;

        r0 := @this: org.junit.rules.ExpectedException;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder>;

        $z0 = virtualinvoke $r1.<org.junit.rules.ExpectedExceptionMatcherBuilder: boolean expectsThrowable()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder>;

        $r4 = virtualinvoke $r3.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher build()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r4);

        goto label2;

     label1:
        throw r2;

     label2:
        return;
    }

    static org.junit.rules.ExpectedExceptionMatcherBuilder access$000(org.junit.rules.ExpectedException)
    {
        org.junit.rules.ExpectedException r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        $r1 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder fMatcherBuilder>;

        return $r1;
    }

    static void access$100(org.junit.rules.ExpectedException) throws java.lang.AssertionError
    {
        org.junit.rules.ExpectedException r0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        specialinvoke r0.<org.junit.rules.ExpectedException: void failDueToMissingException()>();

        return;
    }

    static boolean access$200(org.junit.rules.ExpectedException)
    {
        org.junit.rules.ExpectedException r0;
        boolean $z0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        $z0 = r0.<org.junit.rules.ExpectedException: boolean handleAssumptionViolatedExceptions>;

        return $z0;
    }

    static void access$300(org.junit.rules.ExpectedException, java.lang.Throwable, boolean) throws java.lang.Throwable
    {
        java.lang.Throwable r1;
        org.junit.rules.ExpectedException r0;
        boolean z0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        r1 := @parameter1: java.lang.Throwable;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.junit.rules.ExpectedException: void optionallyHandleException(java.lang.Throwable,boolean)>(r1, z0);

        return;
    }

    static boolean access$400(org.junit.rules.ExpectedException)
    {
        org.junit.rules.ExpectedException r0;
        boolean $z0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        $z0 = r0.<org.junit.rules.ExpectedException: boolean handleAssertionErrors>;

        return $z0;
    }

    static void access$500(org.junit.rules.ExpectedException, java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r1;
        org.junit.rules.ExpectedException r0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        r1 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.junit.rules.ExpectedException: void handleException(java.lang.Throwable)>(r1);

        return;
    }
}
