final class com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator extends java.lang.Object implements java.util.ListIterator
{
    com.mycila.inject.internal.asm.tree.AbstractInsnNode next;
    com.mycila.inject.internal.asm.tree.AbstractInsnNode prev;
    private final com.mycila.inject.internal.asm.tree.InsnList this$0;

    void <init>(com.mycila.inject.internal.asm.tree.InsnList, int)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r2, $r3, $r4, $r5;
        com.mycila.inject.internal.asm.tree.InsnList r1;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        int i0, $i1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.InsnList;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0> = r1;

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: int size()>();

        if i0 != $i1 goto label1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = null;

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode getLast()>();

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r5;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode get(int)>(i0);

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r2;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $r4 = $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r4;

     label2:
        return;
    }

    public boolean hasNext()
    {
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, r2, $r3;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        java.util.NoSuchElementException $r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        if $r1 != null goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label1:
        r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = r2;

        $r3 = r2.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = $r3;

        return r2;
    }

    public void remove()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, $r3, $r4;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.InsnList $r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void remove(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        $r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        $r4 = $r3.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r4;

        return;
    }

    public boolean hasPrevious()
    {
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object previous()
    {
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1, $r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next> = r1;

        $r2 = r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r2;

        return r1;
    }

    public int nextIndex()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, $r4;
        com.mycila.inject.internal.asm.tree.InsnList $r2, $r5, $r6, $r8;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] $r3, $r7;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        int $i0, $i1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        if $r1 != null goto label1;

        $r8 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $i1 = virtualinvoke $r8.<com.mycila.inject.internal.asm.tree.InsnList: int size()>();

        return $i1;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r3 = $r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        if $r3 != null goto label2;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] toArray()>();

        $r6.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = $r7;

     label2:
        $r4 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $i0 = $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        return $i0;
    }

    public int previousIndex()
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, $r4;
        com.mycila.inject.internal.asm.tree.InsnList $r2, $r5, $r6;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode[] $r3, $r7;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        int $i0, $i2;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        if $r1 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r3 = $r2.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache>;

        if $r3 != null goto label2;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] toArray()>();

        $r6.<com.mycila.inject.internal.asm.tree.InsnList: com.mycila.inject.internal.asm.tree.AbstractInsnNode[] cache> = $r7;

     label2:
        $r4 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        $i0 = $r4.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int index>;

        return $i0;
    }

    public void add(java.lang.Object)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r2, $r3, $r5;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.InsnList $r4;
        java.lang.Object r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $r2 = (com.mycila.inject.internal.asm.tree.AbstractInsnNode) r1;

        virtualinvoke $r4.<com.mycila.inject.internal.asm.tree.InsnList: void insertBefore(com.mycila.inject.internal.asm.tree.AbstractInsnNode,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r3, $r2);

        $r5 = (com.mycila.inject.internal.asm.tree.AbstractInsnNode) r1;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r5;

        return;
    }

    public void set(java.lang.Object)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode $r1, $r3, $r4, $r6;
        com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator r0;
        com.mycila.inject.internal.asm.tree.InsnList $r5;
        java.lang.Object r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator;

        r2 := @parameter0: java.lang.Object;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.InsnList this$0>;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode next>;

        $r4 = $r1.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev>;

        $r3 = (com.mycila.inject.internal.asm.tree.AbstractInsnNode) r2;

        virtualinvoke $r5.<com.mycila.inject.internal.asm.tree.InsnList: void set(com.mycila.inject.internal.asm.tree.AbstractInsnNode,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r4, $r3);

        $r6 = (com.mycila.inject.internal.asm.tree.AbstractInsnNode) r2;

        r0.<com.mycila.inject.internal.asm.tree.InsnList$InsnListIterator: com.mycila.inject.internal.asm.tree.AbstractInsnNode prev> = $r6;

        return;
    }
}
