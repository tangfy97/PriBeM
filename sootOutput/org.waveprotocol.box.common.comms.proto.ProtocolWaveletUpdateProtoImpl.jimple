public final class org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl extends java.lang.Object implements org.waveprotocol.box.common.comms.ProtocolWaveletUpdate, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto;
    private org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = null;

        $r1 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate r2;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r2 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = null;

        $r1 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate r2;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r2 := @parameter0: org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = null;

        $r1 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void copyFrom(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)>(r2);

        return;
    }

    public org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = r1;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)
    {
        org.waveprotocol.box.common.comms.WaveletSnapshot $r7;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r8, $r10;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String $r2, $r5;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator $r4;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r13;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r14;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r6;
        java.util.List $r3;
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate r1;
        java.lang.Object $r12;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.lang.String getWaveletName()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setWaveletName(java.lang.String)>($r2);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearAppliedDelta()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.util.List getAppliedDelta()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.federation.ProtocolWaveletDelta) $r12;

        $r14 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        specialinvoke $r14.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r13);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r14);

        goto label01;

     label02:
        $z1 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasCommitNotice()>();

        if $z1 == 0 goto label03;

        $r10 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r11 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitNotice()>();

        specialinvoke $r10.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r11);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setCommitNotice(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r10);

        goto label04;

     label03:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearCommitNotice()>();

     label04:
        $z2 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasResultingVersion()>();

        if $z2 == 0 goto label05;

        $r8 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r9 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        specialinvoke $r8.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r9);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r8);

        goto label06;

     label05:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearResultingVersion()>();

     label06:
        $z3 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasSnapshot()>();

        if $z3 == 0 goto label07;

        $r6 = new org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl;

        $r7 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveletSnapshot getSnapshot()>();

        specialinvoke $r6.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: void <init>(org.waveprotocol.box.common.comms.WaveletSnapshot)>($r7);

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setSnapshot(org.waveprotocol.box.common.comms.WaveletSnapshot)>($r6);

        goto label08;

     label07:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearSnapshot()>();

     label08:
        $z4 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasMarker()>();

        if $z4 == 0 goto label09;

        $z6 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean getMarker()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setMarker(boolean)>($z6);

        goto label10;

     label09:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearMarker()>();

     label10:
        $z5 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: boolean hasChannelId()>();

        if $z5 == 0 goto label11;

        $r5 = interfaceinvoke r1.<org.waveprotocol.box.common.comms.ProtocolWaveletUpdate: java.lang.String getChannelId()>();

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setChannelId(java.lang.String)>($r5);

        goto label12;

     label11:
        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void clearChannelId()>();

     label12:
        return;
    }

    public java.lang.String getWaveletName()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: java.lang.String getWaveletName()>();

        return $r2;
    }

    public void setWaveletName(java.lang.String)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r2;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setWaveletName(java.lang.String)>(r1);

        return;
    }

    public java.util.List getAppliedDelta()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r4;
        int $i0, i1;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: int getAppliedDeltaSize()>();

        if i1 >= $i0 goto label2;

        $r2 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        $r3 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getAppliedDelta(int)>(i1);

        specialinvoke $r2.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public void addAllAppliedDelta(java.util.List)
    {
        java.util.List r0;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r4;
        java.util.Iterator $r1;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r3;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.federation.ProtocolWaveletDelta) $r2;

        virtualinvoke r4.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getAppliedDelta(int)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r3;
        int i0;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getAppliedDelta(int)>(i0);

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r3);

        return $r1;
    }

    public void setAppliedDelta(int, org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r4;
        int i0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r2;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r3;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getOrCreateProtocolWaveletDeltaProtoImpl(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r1);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getPB()>();

        virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setAppliedDelta(int,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>(i0, $r4);

        return;
    }

    public int getAppliedDeltaSize()
    {
        int $i0;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: int getAppliedDeltaCount()>();

        return $i0;
    }

    public void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r4;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r2;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r3;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getOrCreateProtocolWaveletDeltaProtoImpl(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r1);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta getPB()>();

        virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder addAppliedDelta(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r4);

        return;
    }

    public void clearAppliedDelta()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearAppliedDelta()>();

        return;
    }

    public boolean hasCommitNotice()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean hasCommitNotice()>();

        return $z0;
    }

    public void clearCommitNotice()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearCommitNotice()>();

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitNotice()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getCommitNotice()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r3);

        return $r1;
    }

    public void setCommitNotice(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1, $r3;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r5;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearCommitNotice()>();

        $r3 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getPB()>();

        virtualinvoke $r3.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setCommitNotice(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r5);

        return;
    }

    public boolean hasResultingVersion()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean hasResultingVersion()>();

        return $z0;
    }

    public void clearResultingVersion()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearResultingVersion()>();

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getResultingVersion()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getResultingVersion()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r3);

        return $r1;
    }

    public void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1, $r3;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r5;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearResultingVersion()>();

        $r3 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getPB()>();

        virtualinvoke $r3.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setResultingVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r5);

        return;
    }

    public boolean hasSnapshot()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean hasSnapshot()>();

        return $z0;
    }

    public void clearSnapshot()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearSnapshot()>();

        return;
    }

    public org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl getSnapshot()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r1;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot $r3;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot getSnapshot()>();

        specialinvoke $r1.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: void <init>(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot)>($r3);

        return $r1;
    }

    public void setSnapshot(org.waveprotocol.box.common.comms.WaveletSnapshot)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveletSnapshot r2;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1, $r3;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r4;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot $r5;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r2 := @parameter0: org.waveprotocol.box.common.comms.WaveletSnapshot;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearSnapshot()>();

        $r3 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl getOrCreateWaveletSnapshotProtoImpl(org.waveprotocol.box.common.comms.WaveletSnapshot)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot getPB()>();

        virtualinvoke $r3.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setSnapshot(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot)>($r5);

        return;
    }

    public boolean hasMarker()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean hasMarker()>();

        return $z0;
    }

    public void clearMarker()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearMarker()>();

        return;
    }

    public boolean getMarker()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean getMarker()>();

        return $z0;
    }

    public void setMarker(boolean)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        boolean z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setMarker(boolean)>(z0);

        return;
    }

    public boolean hasChannelId()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean hasChannelId()>();

        return $z0;
    }

    public void clearChannelId()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder clearChannelId()>();

        return;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: java.lang.String getChannelId()>();

        return $r2;
    }

    public void setChannelId(java.lang.String)
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r2;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder setChannelId(java.lang.String)>(r1);

        return;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getOrCreateProtocolWaveletDeltaProtoImpl(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r3;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r0;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1, $r2;
        boolean $z0;

        r3 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r3;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1, $r2;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r0);

        return $r1;
    }

    private org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl getOrCreateWaveletSnapshotProtoImpl(org.waveprotocol.box.common.comms.WaveletSnapshot)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r3;
        org.waveprotocol.box.common.comms.WaveletSnapshot r0;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r1, $r2;
        boolean $z0;

        r3 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0 := @parameter0: org.waveprotocol.box.common.comms.WaveletSnapshot;

        $z0 = r0 instanceof org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl;

        specialinvoke $r1.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: void copyFrom(org.waveprotocol.box.common.comms.WaveletSnapshot)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1, $r3;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r2;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate build()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = $r3;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2, $r3;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1, $r4;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto>;

        $r4 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder(org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate)>($r3);

     label2:
        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate proto> = null;

        $r1 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder newBuilder()>();

        r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r13, $r15;
        com.google.gson.JsonElement $r12, $r14, $r16, $r18;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r2;
        com.google.gson.Gson r11;
        int $i0, i1;
        java.lang.Boolean $r8;
        com.google.gson.JsonPrimitive $r1, $r5, $r7;
        java.lang.String $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r17;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r9;
        org.waveprotocol.wave.communication.json.RawStringData r10;
        com.google.gson.JsonArray $r4;

        r2 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r10 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r11 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r1 = new com.google.gson.JsonPrimitive;

        $r3 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: java.lang.String getWaveletName()>();

        specialinvoke $r1.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r3);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r1);

        $r4 = new com.google.gson.JsonArray;

        specialinvoke $r4.<com.google.gson.JsonArray: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: int getAppliedDeltaSize()>();

        if i1 >= $i0 goto label2;

        $r17 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getAppliedDelta(int)>(i1);

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r10, r11);

        virtualinvoke $r4.<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>($r18);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r4);

        $z0 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean hasCommitNotice()>();

        if $z0 == 0 goto label3;

        $r15 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitNotice()>();

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r10, r11);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("3", $r16);

     label3:
        $z1 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean hasResultingVersion()>();

        if $z1 == 0 goto label4;

        $r13 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getResultingVersion()>();

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r10, r11);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("4", $r14);

     label4:
        $z2 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean hasSnapshot()>();

        if $z2 == 0 goto label5;

        $r9 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl getSnapshot()>();

        $r12 = interfaceinvoke $r9.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r10, r11);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("5", $r12);

     label5:
        $z3 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean hasMarker()>();

        if $z3 == 0 goto label6;

        $r7 = new com.google.gson.JsonPrimitive;

        $z5 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean getMarker()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        specialinvoke $r7.<com.google.gson.JsonPrimitive: void <init>(java.lang.Boolean)>($r8);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("6", $r7);

     label6:
        $z4 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean hasChannelId()>();

        if $z4 == 0 goto label7;

        $r5 = new com.google.gson.JsonPrimitive;

        $r6 = virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: java.lang.String getChannelId()>();

        specialinvoke $r5.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r6);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("7", $r5);

     label7:
        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r2;
        com.google.gson.Gson r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.google.gson.JsonArray $r15;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r11, $r13;
        com.google.gson.JsonElement r0, $r3, $r5, $r6, $r10, $r12, $r14, $r17, $r18;
        int $i0, i1;
        java.lang.String $r4, $r19;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r16;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r7;
        org.waveprotocol.wave.communication.json.RawStringData r9;

        r2 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r8 := @parameter1: com.google.gson.Gson;

        r9 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r19 = virtualinvoke $r18.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setWaveletName(java.lang.String)>($r19);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label3;

        $r14 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $r15 = virtualinvoke $r14.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>();

        i1 = 0;

     label2:
        $i0 = virtualinvoke $r15.<com.google.gson.JsonArray: int size()>();

        if i1 >= $i0 goto label3;

        $r16 = new org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl;

        specialinvoke $r16.<org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl: void <init>()>();

        $r17 = virtualinvoke $r15.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(i1);

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r16, $r17, r8, r9);

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void addAppliedDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r16);

        i1 = i1 + 1;

        goto label2;

     label3:
        $z2 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("3");

        if $z2 == 0 goto label4;

        $r12 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("3");

        $z8 = virtualinvoke $r12.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z8 != 0 goto label4;

        $r13 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r13.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r13, $r12, r8, r9);

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setCommitNotice(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r13);

     label4:
        $z9 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("4");

        if $z9 == 0 goto label5;

        $r10 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("4");

        $z7 = virtualinvoke $r10.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z7 != 0 goto label5;

        $r11 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r11.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r11, $r10, r8, r9);

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r11);

     label5:
        $z10 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("5");

        if $z10 == 0 goto label6;

        $r6 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("5");

        $z6 = virtualinvoke $r6.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z6 != 0 goto label6;

        $r7 = new org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl;

        specialinvoke $r7.<org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r7, $r6, r8, r9);

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setSnapshot(org.waveprotocol.box.common.comms.WaveletSnapshot)>($r7);

     label6:
        $z11 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("6");

        if $z11 == 0 goto label7;

        $r5 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("6");

        $z4 = virtualinvoke $r5.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z4 != 0 goto label7;

        $z5 = virtualinvoke $r5.<com.google.gson.JsonElement: boolean getAsBoolean()>();

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setMarker(boolean)>($z5);

     label7:
        $z12 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("7");

        if $z12 == 0 goto label8;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("7");

        $z3 = virtualinvoke $r3.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z3 != 0 goto label8;

        $r4 = virtualinvoke $r3.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setChannelId(java.lang.String)>($r4);

     label8:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0, $r3;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()>();

        $r3 = (org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.ProtocolWaveletUpdate $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.box.common.comms.ProtocolWaveletUpdate;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.box.common.comms.ProtocolWaveletUpdate) r1;

        $z2 = staticinvoke <org.waveprotocol.box.common.comms.ProtocolWaveletUpdateUtil: boolean isEqual(org.waveprotocol.box.common.comms.ProtocolWaveletUpdate,org.waveprotocol.box.common.comms.ProtocolWaveletUpdate)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.box.common.comms.WaveletSnapshot getSnapshot()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.proto.WaveletSnapshotProtoImpl getSnapshot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getResultingVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getCommitNotice()
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getCommitNotice()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletDelta getAppliedDelta(int)
    {
        int i0;
        org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl $r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolWaveletDeltaProtoImpl getAppliedDelta(int)>(i0);

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r1;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl r0;
        org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate $r2;

        r0 := @this: org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate) r1;

        virtualinvoke r0.<org.waveprotocol.box.common.comms.proto.ProtocolWaveletUpdateProtoImpl: void setPB(org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveletUpdate)>($r2);

        return;
    }
}
