public class org.waveprotocol.box.server.waveserver.CertificateManagerImpl extends java.lang.Object implements org.waveprotocol.box.server.waveserver.CertificateManager
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.waveserver.SignatureHandler waveSigner;
    private final com.google.common.collect.ImmutableSet localDomains;
    private final org.waveprotocol.wave.crypto.WaveSignatureVerifier verifier;
    private final org.waveprotocol.wave.crypto.CertPathStore certPathStore;
    private final boolean disableVerfication;
    private final java.util.Map signerInfoRequests;

    public void <init>(boolean, org.waveprotocol.box.server.waveserver.SignatureHandler, org.waveprotocol.wave.crypto.WaveSignatureVerifier, org.waveprotocol.wave.crypto.CertPathStore)
    {
        com.google.common.collect.ImmutableSet $r3;
        java.util.HashMap $r6;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier r4;
        org.waveprotocol.box.server.waveserver.SignatureHandler r1;
        org.waveprotocol.wave.crypto.CertPathStore r5;
        org.waveprotocol.wave.util.logging.Log $r7;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.SignatureHandler;

        r4 := @parameter2: org.waveprotocol.wave.crypto.WaveSignatureVerifier;

        r5 := @parameter3: org.waveprotocol.wave.crypto.CertPathStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: boolean disableVerfication> = z0;

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.box.server.waveserver.SignatureHandler waveSigner> = r1;

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.server.waveserver.SignatureHandler: java.lang.String getDomain()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>($r2);

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: com.google.common.collect.ImmutableSet localDomains> = $r3;

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.WaveSignatureVerifier verifier> = r4;

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.CertPathStore certPathStore> = r5;

        $r6 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests> = $r6;

        if z0 == 0 goto label1;

        $r7 = <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r7.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("** SIGNATURE VERIFICATION DISABLED ** see flag \"waveserver_disable_verification\"");

     label1:
        return;
    }

    public com.google.common.collect.ImmutableSet getLocalDomains()
    {
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: com.google.common.collect.ImmutableSet localDomains>;

        return $r1;
    }

    public org.waveprotocol.box.server.waveserver.SignatureHandler getLocalSigner()
    {
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.box.server.waveserver.SignatureHandler $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.box.server.waveserver.SignatureHandler waveSigner>;

        return $r1;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta signDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r8;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r2;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;
        java.lang.Iterable $r7;
        com.google.protobuf.ByteString $r4;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r5;
        org.waveprotocol.box.server.waveserver.SignatureHandler $r6;
        com.google.protobuf.Message $r1;
        int $i0;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder $r3;
        boolean $z0;

        r5 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r2 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta) $r1;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getAddressPathCount()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $r3 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder newBuilder()>();

        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.ByteString getByteString()>();

        virtualinvoke $r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder setDelta(com.google.protobuf.ByteString)>($r4);

        $r6 = r5.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.box.server.waveserver.SignatureHandler waveSigner>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.box.server.waveserver.SignatureHandler: java.lang.Iterable sign(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r0);

        virtualinvoke $r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder addAllSignature(java.lang.Iterable)>($r7);

        $r8 = virtualinvoke $r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta build()>();

        return $r8;
    }

    public org.waveprotocol.box.server.waveserver.ByteStringMessage verifyDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta) throws org.waveprotocol.wave.crypto.SignatureException, org.waveprotocol.wave.crypto.UnknownSignerException
    {
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r8, $r18;
        boolean $z0;
        com.google.protobuf.InvalidProtocolBufferException $r19;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r5;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature $r9;
        java.lang.IllegalArgumentException $r20;
        com.google.protobuf.ByteString $r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r3;
        java.util.List $r6;
        org.waveprotocol.wave.crypto.SignatureException $r10;
        com.google.protobuf.Message $r4;
        java.lang.Object $r7;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r3 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolWaveletDelta(com.google.protobuf.ByteString)>($r1);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("signed delta does not contain valid delta", $r19);

        throw $r20;

     label4:
        $z0 = r3.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: boolean disableVerfication>;

        if $z0 == 0 goto label5;

        return $r2;

     label5:
        $r4 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r5 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta) $r4;

        $r6 = specialinvoke r3.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.List getParticipantDomains(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>($r5);

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: int getSignatureCount()>();

        if $i0 == $i1 goto label6;

        $r10 = new org.waveprotocol.wave.crypto.SignatureException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found ");

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" domains in ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extended address path, but ");

        $i4 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: int getSignatureCount()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label6:
        i5 = 0;

     label7:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i5 >= $i2 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i5);

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignature getSignature(int)>(i5);

        specialinvoke r3.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: void verifySingleSignature(org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.federation.Proto$ProtocolSignature,java.lang.String)>($r2, $r9, r8);

        i5 = i5 + 1;

        goto label7;

     label8:
        return $r2;

        catch com.google.protobuf.InvalidProtocolBufferException from label1 to label2 with label3;
    }

    private void verifySingleSignature(org.waveprotocol.box.server.waveserver.ByteStringMessage, org.waveprotocol.wave.federation.Proto$ProtocolSignature, java.lang.String) throws org.waveprotocol.wave.crypto.SignatureException, org.waveprotocol.wave.crypto.UnknownSignerException
    {
        com.google.protobuf.ByteString $r3;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier $r2;
        byte[] $r4;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r1;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature r5;
        java.lang.String r6;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        r5 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignature;

        r6 := @parameter2: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.WaveSignatureVerifier verifier>;

        $r3 = virtualinvoke r1.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.ByteString getByteString()>();

        $r4 = virtualinvoke $r3.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        virtualinvoke $r2.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: void verify(byte[],org.waveprotocol.wave.federation.Proto$ProtocolSignature,java.lang.String)>($r4, r5, r6);

        return;
    }

    private java.util.List getParticipantDomains(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)
    {
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        java.util.List $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.lang.Iterable getExtendedAddressPath(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>(r1);

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.List getDeDupedDomains(java.lang.Iterable)>($r2);

        return $r3;
    }

    private java.util.List getDeDupedDomains(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r5;
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r7;
        java.lang.Object $r3;
        java.lang.String r4, $r6;
        boolean $z0, $z1;

        r7 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getDomain()>();

        $z1 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private java.lang.Iterable getExtendedAddressPath(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)
    {
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r5;
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r0;
        java.lang.String $r2;
        java.lang.Iterable $r4;

        r5 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.util.List getAddressPathList()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r2);

        $r4 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r1, $r3);

        return $r4;
    }

    public synchronized void storeSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.crypto.WaveSignatureVerifier $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r2;
        org.waveprotocol.wave.crypto.CertPathStore $r4;
        org.waveprotocol.wave.crypto.SignerInfo $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.WaveSignatureVerifier verifier>;

        $r1 = new org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke $r1.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r2);

        virtualinvoke $r3.<org.waveprotocol.wave.crypto.WaveSignatureVerifier: void verifySignerInfo(org.waveprotocol.wave.crypto.SignerInfo)>($r1);

        $r4 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        interfaceinvoke $r4.<org.waveprotocol.wave.crypto.CertPathStore: void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r2);

        return;
    }

    public synchronized org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)
    {
        byte[] $r3, $r10;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r14;
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.crypto.SignatureException $r5;
        org.waveprotocol.wave.crypto.CertPathStore $r2;
        char[] $r11;
        org.waveprotocol.wave.crypto.SignerInfo $r4;
        java.lang.StringBuilder $r6, $r8, $r12;
        org.waveprotocol.wave.util.logging.Log $r7;
        java.lang.String $r9, $r13;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: com.google.protobuf.ByteString;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.crypto.CertPathStore certPathStore>;

        $r3 = virtualinvoke r1.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.crypto.CertPathStore: org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])>($r3);

        if $r4 != null goto label2;

        $r14 = null;

        goto label3;

     label2:
        $r14 = virtualinvoke $r4.<org.waveprotocol.wave.crypto.SignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo toProtoBuf()>();

     label3:
        return $r14;

     label4:
        $r5 := @caughtexception;

        $r7 = <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retreive signer info for ");

        $r9 = new java.lang.String;

        $r10 = virtualinvoke r1.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r11 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r10);

        specialinvoke $r9.<java.lang.String: void <init>(char[])>($r11);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r13, $r5);

        return null;

        catch org.waveprotocol.wave.crypto.SignatureException from label1 to label3 with label4;
    }

    public synchronized void prefetchDeltaSignerInfo(org.waveprotocol.wave.federation.WaveletFederationProvider, com.google.protobuf.ByteString, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener)
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.model.id.WaveletName r4;
        org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener r6;
        org.waveprotocol.wave.federation.WaveletFederationProvider r3;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r2;
        org.waveprotocol.wave.model.version.HashedVersion r5;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r3 := @parameter0: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r1 := @parameter1: com.google.protobuf.ByteString;

        r4 := @parameter2: org.waveprotocol.wave.model.id.WaveletName;

        r5 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        r6 := @parameter4: org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke r6.<org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener: void onSuccess(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r2);

        goto label2;

     label1:
        specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: void enqueueSignerInfoRequest(org.waveprotocol.wave.federation.WaveletFederationProvider,com.google.protobuf.ByteString,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener)>(r3, r1, r4, r5, r6);

     label2:
        return;
    }

    private synchronized void enqueueSignerInfoRequest(org.waveprotocol.wave.federation.WaveletFederationProvider, com.google.protobuf.ByteString, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener)
    {
        com.google.common.collect.ArrayListMultimap $r12;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        com.google.common.collect.Multimap r14;
        java.util.Map $r5, $r13;
        int $i0;
        org.waveprotocol.wave.model.version.HashedVersion r10;
        java.lang.String $r2;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl$1 $r11;
        org.waveprotocol.wave.model.id.WaveletName r0;
        org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener r7;
        org.waveprotocol.wave.federation.WaveletFederationProvider r9;
        java.util.Collection $r8;
        com.google.protobuf.ByteString r4;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r3;
        java.lang.Object $r6;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r15;

        r3 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r9 := @parameter0: org.waveprotocol.wave.federation.WaveletFederationProvider;

        r4 := @parameter1: com.google.protobuf.ByteString;

        r0 := @parameter2: org.waveprotocol.wave.model.id.WaveletName;

        r10 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        r7 := @parameter4: org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener;

        $r1 = r0.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r5 = r3.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r14 = (com.google.common.collect.Multimap) $r6;

        if r14 != null goto label1;

        $r12 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();

        r14 = $r12;

        $r13 = r3.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r12);

     label1:
        interfaceinvoke r14.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r2, r7);

        $r8 = interfaceinvoke r14.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>($r2);

        $i0 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        if $i0 != 1 goto label4;

        if r10 != null goto label2;

        $r15 = null;

        goto label3;

     label2:
        $r15 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r10);

     label3:
        $r11 = new org.waveprotocol.box.server.waveserver.CertificateManagerImpl$1;

        specialinvoke $r11.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl$1: void <init>(org.waveprotocol.box.server.waveserver.CertificateManagerImpl,com.google.protobuf.ByteString,java.lang.String)>(r3, r4, $r2);

        interfaceinvoke r9.<org.waveprotocol.wave.federation.WaveletFederationProvider: void getDeltaSignerInfo(com.google.protobuf.ByteString,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)>(r4, r0, $r15, $r11);

     label4:
        return;
    }

    private synchronized void dequeueSignerInfoRequest(com.google.protobuf.ByteString, org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        java.util.Iterator $r7;
        java.util.Set $r5;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r10;
        com.google.common.collect.Multimap $r4;
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        com.google.common.collect.ImmutableList $r6;
        java.util.Map $r2;
        java.lang.Object $r3, $r8;
        java.lang.String r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r10 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.google.common.collect.Multimap) $r3;

        $r5 = interfaceinvoke $r4.<com.google.common.collect.Multimap: java.util.Set keySet()>();

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: void dequeueSignerInfoRequestForDomain(com.google.protobuf.ByteString,org.waveprotocol.wave.federation.FederationErrorProto$FederationError,java.lang.String)>(r1, r10, r9);

        goto label1;

     label2:
        return;
    }

    private synchronized void dequeueSignerInfoRequestForDomain(com.google.protobuf.ByteString, org.waveprotocol.wave.federation.FederationErrorProto$FederationError, java.lang.String)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r19;
        com.google.common.collect.Multimap r4;
        java.util.Map $r2, $r15;
        int $i0;
        org.waveprotocol.wave.util.logging.Log $r6, $r21;
        java.lang.String r10, $r12, $r26;
        boolean $z0, $z1;
        org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener r17;
        java.util.Iterator $r14;
        java.util.Collection $r13;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r18;
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        java.lang.Object $r3, $r16;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11, $r20, $r22, $r23, $r24, $r25;

        r0 := @this: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r18 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        r10 := @parameter2: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.google.common.collect.Multimap) $r3;

        if r4 != null goto label1;

        $r21 = <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There are no domain listeners for signer ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" domain ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r26);

        return;

     label1:
        $r6 = <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dequeuing ");

        $i0 = interfaceinvoke r4.<com.google.common.collect.Multimap: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" listeners for domain ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r12);

        $r13 = interfaceinvoke r4.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r10);

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener) $r16;

        if r18 != null goto label3;

        $r19 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo retrieveSignerInfo(com.google.protobuf.ByteString)>(r1);

        interfaceinvoke r17.<org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener: void onSuccess(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r19);

        goto label4;

     label3:
        interfaceinvoke r17.<org.waveprotocol.box.server.waveserver.CertificateManager$SignerInfoPrefetchResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r18);

     label4:
        goto label2;

     label5:
        interfaceinvoke r4.<com.google.common.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>(r10);

        $z1 = interfaceinvoke r4.<com.google.common.collect.Multimap: boolean isEmpty()>();

        if $z1 == 0 goto label6;

        $r15 = r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: java.util.Map signerInfoRequests>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label6:
        return;
    }

    static org.waveprotocol.wave.util.logging.Log access$000()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void access$100(org.waveprotocol.box.server.waveserver.CertificateManagerImpl, com.google.protobuf.ByteString, org.waveprotocol.wave.federation.FederationErrorProto$FederationError, java.lang.String)
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r2;
        java.lang.String r3;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter1: com.google.protobuf.ByteString;

        r2 := @parameter2: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: void dequeueSignerInfoRequestForDomain(com.google.protobuf.ByteString,org.waveprotocol.wave.federation.FederationErrorProto$FederationError,java.lang.String)>(r1, r2, r3);

        return;
    }

    static void access$200(org.waveprotocol.box.server.waveserver.CertificateManagerImpl, com.google.protobuf.ByteString, org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.box.server.waveserver.CertificateManagerImpl r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r2;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.CertificateManagerImpl;

        r1 := @parameter1: com.google.protobuf.ByteString;

        r2 := @parameter2: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.CertificateManagerImpl: void dequeueSignerInfoRequest(com.google.protobuf.ByteString,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/CertificateManagerImpl;");

        <org.waveprotocol.box.server.waveserver.CertificateManagerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
