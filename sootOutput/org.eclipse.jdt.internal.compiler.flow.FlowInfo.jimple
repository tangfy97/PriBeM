public abstract class org.eclipse.jdt.internal.compiler.flow.FlowInfo extends java.lang.Object
{
    public int tagBits;
    public static final int REACHABLE;
    public static final int UNREACHABLE;
    public static final int NULL_FLAG_MASK;
    public static final int UNKNOWN;
    public static final int NULL;
    public static final int NON_NULL;
    public static final org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END;

    static void <clinit>()
    {
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r0, $r1;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int NON_NULL> = -1;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int NULL> = 1;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int UNKNOWN> = 0;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int NULL_FLAG_MASK> = 2;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int UNREACHABLE> = 1;

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: int REACHABLE> = 0;

        $r0 = new org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: void <init>()>();

        <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END> = $r0;

        $r1 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        $r1.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int tagBits> = 1;

        return;
    }

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo);

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo);

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo asNegatedCondition()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return r0;
    }

    public static org.eclipse.jdt.internal.compiler.flow.FlowInfo conditional(org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r1, r2;
        org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo $r0;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r0 = new org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo: void <init>(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2);

        return $r0;
    }

    public boolean cannotBeDefinitelyNullOrNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isPotentiallyUnknown(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isPotentiallyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isPotentiallyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean cannotBeNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isProtectedNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean canOnlyBeNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isDefinitelyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: boolean isProtectedNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo copy();

    public static org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo initial(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r0;

        i0 := @parameter0: int;

        $r0 = new org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: void <init>()>();

        $r0.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: int maxFieldCount> = i0;

        return $r0;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenFalse();

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue();

    public abstract boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.FieldBinding);

    public abstract boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isDefinitelyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isDefinitelyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isDefinitelyUnknown(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isPotentiallyAssigned(org.eclipse.jdt.internal.compiler.lookup.FieldBinding);

    public abstract boolean isPotentiallyAssigned(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isPotentiallyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isPotentiallyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isPotentiallyUnknown(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isProtectedNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract boolean isProtectedNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsComparedEqualToNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsComparedEqualToNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.FieldBinding);

    public abstract void markAsDefinitelyNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsDefinitelyNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public abstract void markAsDefinitelyUnknown(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding);

    public static org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedOptimizedBranches(org.eclipse.jdt.internal.compiler.flow.FlowInfo, boolean, org.eclipse.jdt.internal.compiler.flow.FlowInfo, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0, r1, $r5, $r6, $r9, $r10;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r2, $r3, $r4, $r7, $r8, r11;
        boolean z0, z1, z2;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        if z0 == 0 goto label2;

        $r7 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        if r0 != $r7 goto label1;

        if z2 == 0 goto label1;

        $r10 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>(1);

        r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        goto label5;

     label1:
        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo nullInfoLessUnconditionalCopy()>();

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r8);

        r11 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        goto label5;

     label2:
        if z1 == 0 goto label4;

        $r3 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        if r1 != $r3 goto label3;

        if z2 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>(1);

        r11 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        goto label5;

     label3:
        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo nullInfoLessUnconditionalCopy()>();

        $r5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addPotentialInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r4);

        r11 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        goto label5;

     label4:
        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        r11 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r2);

     label5:
        return r11;
    }

    public int reachMode()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int tagBits>;

        $i1 = $i0 & 1;

        return $i1;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo safeInitsWhenTrue();

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int);

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo);

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo nullInfoLessUnconditionalCopy();

    public java.lang.String toString()
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r1;
        java.lang.String $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        if r0 != $r1 goto label1;

        return "FlowInfo.DEAD_END";

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy();

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalFieldLessCopy();

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits();

    public abstract org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInitsWithoutSideEffect();
}
