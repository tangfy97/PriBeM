public class org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.DisplacementMapRable
{
    private double scale;
    private org.apache.batik.ext.awt.image.ARGBChannel xChannelSelector;
    private org.apache.batik.ext.awt.image.ARGBChannel yChannelSelector;

    public void <init>(java.util.List, double, org.apache.batik.ext.awt.image.ARGBChannel, org.apache.batik.ext.awt.image.ARGBChannel)
    {
        java.util.List r1;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        org.apache.batik.ext.awt.image.ARGBChannel r2, r3;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        r1 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        r2 := @parameter2: org.apache.batik.ext.awt.image.ARGBChannel;

        r3 := @parameter3: org.apache.batik.ext.awt.image.ARGBChannel;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: void setSources(java.util.List)>(r1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: void setScale(double)>(d0);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: void setXChannelSelector(org.apache.batik.ext.awt.image.ARGBChannel)>(r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: void setYChannelSelector(org.apache.batik.ext.awt.image.ARGBChannel)>(r3);

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.util.Vector $r1;
        java.awt.geom.Rectangle2D $r4;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r4;
    }

    public void setScale(double)
    {
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        d0 := @parameter0: double;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale> = d0;

        return;
    }

    public double getScale()
    {
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        $d0 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        return $d0;
    }

    public void setSources(java.util.List)
    {
        java.util.List r0;
        int $i0;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(java.util.List,java.util.Map)>(r0, null);

        return;
    }

    public void setXChannelSelector(org.apache.batik.ext.awt.image.ARGBChannel)
    {
        org.apache.batik.ext.awt.image.ARGBChannel r0;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        r0 := @parameter0: org.apache.batik.ext.awt.image.ARGBChannel;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r1.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel xChannelSelector> = r0;

        return;
    }

    public org.apache.batik.ext.awt.image.ARGBChannel getXChannelSelector()
    {
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        org.apache.batik.ext.awt.image.ARGBChannel $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel xChannelSelector>;

        return $r1;
    }

    public void setYChannelSelector(org.apache.batik.ext.awt.image.ARGBChannel)
    {
        org.apache.batik.ext.awt.image.ARGBChannel r0;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        r0 := @parameter0: org.apache.batik.ext.awt.image.ARGBChannel;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r1.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel yChannelSelector> = r0;

        return;
    }

    public org.apache.batik.ext.awt.image.ARGBChannel getYChannelSelector()
    {
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        org.apache.batik.ext.awt.image.ARGBChannel $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel yChannelSelector>;

        return $r1;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r12, $r16, $r17;
        java.util.Vector $r1, $r4;
        byte $b0, $b1;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r27;
        org.apache.batik.ext.awt.image.rendered.DisplacementMapRed $r21;
        java.awt.geom.AffineTransform $r9, $r10, $r26;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r20, $r22, $r23;
        org.apache.batik.ext.awt.image.ARGBChannel $r24, $r25;
        java.awt.RenderingHints $r8, $r29, r30;
        java.awt.geom.Rectangle2D$Double $r15;
        boolean $z0, $z1;
        java.awt.Shape $r11, r31;
        java.awt.image.RenderedImage $r14, $r19, $r28;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r3, r6;
        java.awt.image.renderable.RenderContext r7, $r13, $r18;
        float $f0, $f1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r32;
        java.lang.Object $r2, $r5;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        r7 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>(1);

        r6 = (org.apache.batik.ext.awt.image.renderable.Filter) $r5;

        $r8 = virtualinvoke r7.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r30 = $r8;

        if $r8 != null goto label1;

        $r29 = new java.awt.RenderingHints;

        specialinvoke $r29.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r30 = $r29;

     label1:
        $r9 = virtualinvoke r7.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d11 = $d1 * $d1;

        $d10 = $d2 * $d2;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        $d14 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d15 = $d14 * $d9;

        $f0 = (float) $d15;

        $d16 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d17 = $d16 * $d13;

        $f1 = (float) $d17;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $b1 = $f1 cmpl 0.0F;

        if $b1 != 0 goto label2;

        $r28 = interfaceinvoke r3.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r7);

        return $r28;

     label2:
        $r10 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d9, $d13);

        $r11 = virtualinvoke r7.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r31 = $r11;

        if $r11 != null goto label3;

        r31 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label3:
        $r12 = interfaceinvoke r31.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r13 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r13.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r10, $r12, r30);

        $r14 = interfaceinvoke r6.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r13);

        if $r14 != null goto label4;

        return null;

     label4:
        $r15 = new java.awt.geom.Rectangle2D$Double;

        $d18 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getX()>();

        $d19 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d20 = $d19 / 2.0;

        $d21 = $d18 - $d20;

        $d22 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getY()>();

        $d23 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d24 = $d23 / 2.0;

        $d25 = $d22 - $d24;

        $d26 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getWidth()>();

        $d27 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d28 = $d26 + $d27;

        $d29 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getHeight()>();

        $d30 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: double scale>;

        $d31 = $d29 + $d30;

        specialinvoke $r15.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d21, $d25, $d28, $d31);

        $r16 = interfaceinvoke r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r15.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r16);

        if $z0 != 0 goto label5;

        return null;

     label5:
        $r17 = virtualinvoke $r15.<java.awt.geom.Rectangle2D: java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D)>($r16);

        $r18 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r18.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r10, $r17, r30);

        $r19 = interfaceinvoke r3.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r18);

        if $r19 != null goto label6;

        return null;

     label6:
        $r20 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r14);

        $r21 = new org.apache.batik.ext.awt.image.rendered.DisplacementMapRed;

        $r22 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r19);

        $r23 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r20);

        $r25 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel xChannelSelector>;

        $r24 = r0.<org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit: org.apache.batik.ext.awt.image.ARGBChannel yChannelSelector>;

        specialinvoke $r21.<org.apache.batik.ext.awt.image.rendered.DisplacementMapRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.ARGBChannel,org.apache.batik.ext.awt.image.ARGBChannel,float,float,java.awt.RenderingHints)>($r22, $r23, $r25, $r24, $f0, $f1, r30);

        r32 = $r21;

        $r26 = new java.awt.geom.AffineTransform;

        $d35 = $d0 / $d9;

        $d34 = $d3 / $d9;

        $d33 = $d2 / $d13;

        $d32 = $d1 / $d13;

        specialinvoke $r26.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d35, $d34, $d33, $d32, $d4, $d5);

        $z1 = virtualinvoke $r26.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z1 != 0 goto label7;

        $r27 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r27.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r21, $r26, r30);

        r32 = $r27;

     label7:
        return r32;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        int i0;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.Rectangle2D;

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.Shape getDependencyRegion(int,java.awt.geom.Rectangle2D)>(i0, r1);

        return $r2;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r2;
        java.awt.geom.Rectangle2D r1;
        int i0;
        org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DisplacementMapRable8Bit;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.Rectangle2D;

        $r2 = specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.awt.Shape getDirtyRegion(int,java.awt.geom.Rectangle2D)>(i0, r1);

        return $r2;
    }
}
