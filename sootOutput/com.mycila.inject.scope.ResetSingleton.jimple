public final class com.mycila.inject.scope.ResetSingleton extends com.mycila.inject.scope.MycilaScope implements com.mycila.inject.scope.ResetScope
{
    private static final java.lang.Object NULL;
    private final java.util.Map singletons;
    private final java.util.concurrent.locks.ReentrantReadWriteLock lock;
    private final java.util.concurrent.locks.Lock r;
    private final java.util.concurrent.locks.Lock w;

    public void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r4;
        com.mycila.inject.scope.ResetSingleton r0;
        java.util.HashMap $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2, $r3, $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r6;

        r0 := @this: com.mycila.inject.scope.ResetSingleton;

        specialinvoke r0.<com.mycila.inject.scope.MycilaScope: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.scope.ResetSingleton: java.util.Map singletons> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.ReentrantReadWriteLock lock> = $r2;

        $r3 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.ReentrantReadWriteLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock r> = $r4;

        $r5 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.ReentrantReadWriteLock lock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock w> = $r6;

        return;
    }

    public void reset()
    {
        java.lang.Throwable $r11;
        java.util.Map$Entry r8;
        java.util.Iterator $r6;
        com.mycila.inject.scope.ResetSingleton r1;
        java.util.Set $r5;
        java.util.HashMap $r0;
        java.util.concurrent.locks.Lock $r2, $r4, $r12;
        java.util.Map $r3, $r10;
        java.lang.Object $r7, $r9;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.scope.ResetSingleton;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

     label1:
        $r2 = r1.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $z0 = r1.<com.mycila.inject.scope.ResetSingleton: boolean hasJSR250Module>;

        if $z0 == 0 goto label2;

        $r10 = r1.<com.mycila.inject.scope.ResetSingleton: java.util.Map singletons>;

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r10);

     label2:
        $r3 = r1.<com.mycila.inject.scope.ResetSingleton: java.util.Map singletons>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

     label3:
        $r4 = r1.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r11 := @caughtexception;

     label5:
        $r12 = r1.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r12.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r11;

     label6:
        $r5 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.mycila.inject.jsr250.Jsr250: void preDestroy(java.lang.Object)>($r9);

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void shutdown()
    {
        com.mycila.inject.scope.ResetSingleton r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.scope.ResetSingleton;

        $r1 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.Map singletons>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public com.google.inject.Provider scope(com.google.inject.Key, com.google.inject.Provider)
    {
        com.mycila.inject.scope.ResetSingleton$1 $r0;
        com.google.inject.Provider r3;
        com.google.inject.Key r2;
        com.mycila.inject.scope.ResetSingleton r1;

        r1 := @this: com.mycila.inject.scope.ResetSingleton;

        r2 := @parameter0: com.google.inject.Key;

        r3 := @parameter1: com.google.inject.Provider;

        $r0 = new com.mycila.inject.scope.ResetSingleton$1;

        specialinvoke $r0.<com.mycila.inject.scope.ResetSingleton$1: void <init>(com.mycila.inject.scope.ResetSingleton,com.google.inject.Key,com.google.inject.Provider)>(r1, r2, r3);

        return $r0;
    }

    static java.util.concurrent.locks.Lock access$000(com.mycila.inject.scope.ResetSingleton)
    {
        com.mycila.inject.scope.ResetSingleton r0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @parameter0: com.mycila.inject.scope.ResetSingleton;

        $r1 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock r>;

        return $r1;
    }

    static java.util.Map access$100(com.mycila.inject.scope.ResetSingleton)
    {
        com.mycila.inject.scope.ResetSingleton r0;
        java.util.Map $r1;

        r0 := @parameter0: com.mycila.inject.scope.ResetSingleton;

        $r1 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.Map singletons>;

        return $r1;
    }

    static java.util.concurrent.locks.Lock access$200(com.mycila.inject.scope.ResetSingleton)
    {
        com.mycila.inject.scope.ResetSingleton r0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @parameter0: com.mycila.inject.scope.ResetSingleton;

        $r1 = r0.<com.mycila.inject.scope.ResetSingleton: java.util.concurrent.locks.Lock w>;

        return $r1;
    }

    static java.lang.Object access$300()
    {
        java.lang.Object $r0;

        $r0 = <com.mycila.inject.scope.ResetSingleton: java.lang.Object NULL>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.mycila.inject.scope.ResetSingleton: java.lang.Object NULL> = $r0;

        return;
    }
}
