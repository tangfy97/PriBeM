class org.junit.rules.TestWatchman$1 extends org.junit.runners.model.Statement
{
    final org.junit.runners.model.FrameworkMethod val$method;
    final org.junit.runners.model.Statement val$base;
    final org.junit.rules.TestWatchman this$0;

    void <init>(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)
    {
        org.junit.runners.model.Statement r3;
        org.junit.rules.TestWatchman$1 r0;
        org.junit.rules.TestWatchman r1;
        org.junit.runners.model.FrameworkMethod r2;

        r0 := @this: org.junit.rules.TestWatchman$1;

        r1 := @parameter0: org.junit.rules.TestWatchman;

        r2 := @parameter1: org.junit.runners.model.FrameworkMethod;

        r3 := @parameter2: org.junit.runners.model.Statement;

        r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0> = r1;

        r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method> = r2;

        r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.Statement val$base> = r3;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        java.lang.Throwable $r8, $r11;
        org.junit.runners.model.Statement $r3;
        org.junit.runners.model.FrameworkMethod $r1, $r4, $r6, $r9, $r12;
        org.junit.internal.AssumptionViolatedException $r14;
        org.junit.rules.TestWatchman$1 r0;
        org.junit.rules.TestWatchman $r2, $r5, $r7, $r10, $r13;

        r0 := @this: org.junit.rules.TestWatchman$1;

        $r2 = r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0>;

        $r1 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method>;

        virtualinvoke $r2.<org.junit.rules.TestWatchman: void starting(org.junit.runners.model.FrameworkMethod)>($r1);

     label1:
        $r3 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.Statement val$base>;

        virtualinvoke $r3.<org.junit.runners.model.Statement: void evaluate()>();

        $r5 = r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0>;

        $r4 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method>;

        virtualinvoke $r5.<org.junit.rules.TestWatchman: void succeeded(org.junit.runners.model.FrameworkMethod)>($r4);

     label2:
        $r7 = r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0>;

        $r6 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method>;

        virtualinvoke $r7.<org.junit.rules.TestWatchman: void finished(org.junit.runners.model.FrameworkMethod)>($r6);

        goto label7;

     label3:
        $r14 := @caughtexception;

        throw $r14;

     label4:
        $r11 := @caughtexception;

        $r13 = r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0>;

        $r12 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method>;

        virtualinvoke $r13.<org.junit.rules.TestWatchman: void failed(java.lang.Throwable,org.junit.runners.model.FrameworkMethod)>($r11, $r12);

        throw $r11;

     label5:
        $r8 := @caughtexception;

     label6:
        $r10 = r0.<org.junit.rules.TestWatchman$1: org.junit.rules.TestWatchman this$0>;

        $r9 = r0.<org.junit.rules.TestWatchman$1: org.junit.runners.model.FrameworkMethod val$method>;

        virtualinvoke $r10.<org.junit.rules.TestWatchman: void finished(org.junit.runners.model.FrameworkMethod)>($r9);

        throw $r8;

     label7:
        return;

        catch org.junit.internal.AssumptionViolatedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label6 with label5;
    }
}
