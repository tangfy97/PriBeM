public final class com.google.common.collect.Iterators extends java.lang.Object
{
    static final com.google.common.collect.UnmodifiableIterator EMPTY_ITERATOR;
    private static final java.util.Iterator EMPTY_MODIFIABLE_ITERATOR;

    private void <init>()
    {
        com.google.common.collect.Iterators r0;

        r0 := @this: com.google.common.collect.Iterators;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.UnmodifiableIterator emptyIterator()
    {
        com.google.common.collect.UnmodifiableIterator $r0;

        $r0 = <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator EMPTY_ITERATOR>;

        return $r0;
    }

    static java.util.Iterator emptyModifiableIterator()
    {
        java.util.Iterator $r0;

        $r0 = <com.google.common.collect.Iterators: java.util.Iterator EMPTY_MODIFIABLE_ITERATOR>;

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.common.collect.Iterators$3 $r1;

        r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$3;

        specialinvoke $r1.<com.google.common.collect.Iterators$3: void <init>(java.util.Iterator)>(r0);

        return $r1;
    }

    public static int size(java.util.Iterator)
    {
        int i0;
        java.util.Iterator r0;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public static boolean contains(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r1;
        java.lang.Object r0, $r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label1;

        return 1;

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public static boolean removeAll(java.util.Iterator, java.util.Collection)
    {
        java.util.Iterator r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, z1, $z2;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z1 = 0;

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public static boolean removeIf(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator r1;
        com.google.common.base.Predicate r0;
        java.lang.Object $r2;
        boolean $z0, z1, $z2;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z1 = 0;

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public static boolean retainAll(java.util.Iterator, java.util.Collection)
    {
        java.util.Iterator r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, z1, $z2;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: java.util.Collection;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z1 = 0;

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public static boolean elementsEqual(java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator r0, r1;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        return 0;

     label2:
        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z3 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    public static java.lang.String toString(java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r6;
        java.lang.Object $r3, $r7;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return "[]";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

     label2:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.Object getOnlyElement(java.util.Iterator)
    {
        int i0;
        java.lang.String $r6, $r8, $r13;
        boolean $z0, $z1, $z2;
        java.util.Iterator r0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Object $r1, $r11;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r12;

        r0 := @parameter0: java.util.Iterator;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected one element but was: <");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i0 = 0;

     label2:
        if i0 >= 4 goto label3;

        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        i0 = i0 + 1;

        goto label2;

     label3:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...");

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public static java.lang.Object getOnlyElement(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)>(r0);

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static java.lang.Object[] toArray(java.util.Iterator, java.lang.Class)
    {
        java.lang.Object[] $r3;
        java.util.Iterator r0;
        java.lang.Class r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>(r0);

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)>($r1, r2);

        return $r3;
    }

    public static boolean addAll(java.util.Collection, java.util.Iterator)
    {
        java.util.Iterator r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z2 = 0;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public static int frequency(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r1;
        int i0;
        java.lang.Object r0, $r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: java.lang.Object;

        i0 = 0;

        if r0 != null goto label2;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label2;

     label3:
        return i0;
    }

    public static java.util.Iterator cycle(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.collect.Iterators$4 $r1;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$4;

        specialinvoke $r1.<com.google.common.collect.Iterators$4: void <init>(java.lang.Iterable)>(r0);

        return $r1;
    }

    public static transient java.util.Iterator cycle(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Iterator $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator cycle(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator)
    {
        java.util.List $r3;
        java.util.Iterator r0, r1, $r4, $r5;
        java.util.Iterator[] $r2;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = newarray (java.util.Iterator)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r5 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r4);

        return $r5;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator, java.util.Iterator)
    {
        java.util.List $r4;
        java.util.Iterator r0, r1, r2, $r5, $r6;
        java.util.Iterator[] $r3;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.util.Iterator;

        r2 := @parameter2: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r3 = newarray (java.util.Iterator)[3];

        $r3[0] = r0;

        $r3[1] = r1;

        $r3[2] = r2;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r6 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r5);

        return $r6;
    }

    public static java.util.Iterator concat(java.util.Iterator, java.util.Iterator, java.util.Iterator, java.util.Iterator)
    {
        java.util.Iterator r0, r1, r2, r3, $r6, $r7;
        java.util.List $r5;
        java.util.Iterator[] $r4;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.util.Iterator;

        r2 := @parameter2: java.util.Iterator;

        r3 := @parameter3: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r4 = newarray (java.util.Iterator)[4];

        $r4[0] = r0;

        $r4[1] = r1;

        $r4[2] = r2;

        $r4[3] = r3;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $r7 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r6);

        return $r7;
    }

    public static transient java.util.Iterator concat(java.util.Iterator[])
    {
        com.google.common.collect.ImmutableList $r1;
        java.util.Iterator $r3;
        java.util.Iterator[] r0;
        com.google.common.collect.UnmodifiableIterator $r2;

        r0 := @parameter0: java.util.Iterator[];

        $r1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>(r0);

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r3 = staticinvoke <com.google.common.collect.Iterators: java.util.Iterator concat(java.util.Iterator)>($r2);

        return $r3;
    }

    public static java.util.Iterator concat(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.common.collect.Iterators$5 $r1;

        r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$5;

        specialinvoke $r1.<com.google.common.collect.Iterators$5: void <init>(java.util.Iterator)>(r0);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator, int)
    {
        int i0;
        com.google.common.collect.UnmodifiableIterator $r1;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean)>(r0, i0, 0);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator, int)
    {
        int i0;
        com.google.common.collect.UnmodifiableIterator $r1;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean)>(r0, i0, 1);

        return $r1;
    }

    private static com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator, int, boolean)
    {
        com.google.common.collect.Iterators$6 $r1;
        java.util.Iterator r0;
        int i0;
        boolean z0, $z1;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r1 = new com.google.common.collect.Iterators$6;

        specialinvoke $r1.<com.google.common.collect.Iterators$6: void <init>(java.util.Iterator,int,boolean)>(r0, i0, z0);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator, com.google.common.base.Predicate)
    {
        com.google.common.collect.Iterators$7 $r2;
        java.util.Iterator r0;
        com.google.common.base.Predicate r1;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.collect.Iterators$7;

        specialinvoke $r2.<com.google.common.collect.Iterators$7: void <init>(java.util.Iterator,com.google.common.base.Predicate)>(r0, r1);

        return $r2;
    }

    public static com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator, java.lang.Class)
    {
        java.util.Iterator r0;
        com.google.common.base.Predicate $r2;
        java.lang.Class r1;
        com.google.common.collect.UnmodifiableIterator $r3;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate instanceOf(java.lang.Class)>(r1);

        $r3 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>(r0, $r2);

        return $r3;
    }

    public static boolean any(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator r1;
        com.google.common.base.Predicate r0;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static boolean all(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator r1;
        com.google.common.base.Predicate r0;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public static java.lang.Object find(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator r0;
        com.google.common.base.Predicate r1;
        java.lang.Object $r3;
        com.google.common.collect.UnmodifiableIterator $r2;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.google.common.base.Predicate;

        $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>(r0, r1);

        $r3 = virtualinvoke $r2.<com.google.common.collect.UnmodifiableIterator: java.lang.Object next()>();

        return $r3;
    }

    public static java.lang.Object find(java.util.Iterator, com.google.common.base.Predicate, java.lang.Object)
    {
        java.util.Iterator r0;
        com.google.common.base.Predicate r1;
        java.lang.Object r3, $r4;
        com.google.common.collect.UnmodifiableIterator $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.google.common.base.Predicate;

        r3 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate)>(r0, r1);

        $z0 = virtualinvoke $r2.<com.google.common.collect.UnmodifiableIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r2.<com.google.common.collect.UnmodifiableIterator: java.lang.Object next()>();

        goto label2;

     label1:
        $r4 = r3;

     label2:
        return $r4;
    }

    public static int indexOf(java.util.Iterator, com.google.common.base.Predicate)
    {
        java.util.Iterator r1;
        com.google.common.base.Predicate r0;
        int i0, $i2;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Iterator;

        r0 := @parameter1: com.google.common.base.Predicate;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "predicate");

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i2 = (int) -1;

        return $i2;
    }

    public static java.util.Iterator transform(java.util.Iterator, com.google.common.base.Function)
    {
        com.google.common.collect.Iterators$8 $r2;
        com.google.common.base.Function r1;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.collect.Iterators$8;

        specialinvoke $r2.<com.google.common.collect.Iterators$8: void <init>(java.util.Iterator,com.google.common.base.Function)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object get(java.util.Iterator, int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        java.util.Iterator r0;
        int i0, $i1, i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.Object $r9;
        java.lang.String $r8;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        staticinvoke <com.google.common.collect.Iterators: void checkNonnegative(int)>(i0);

        i2 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $i1 = i2;

        i2 = i2 + 1;

        if $i1 != i0 goto label2;

        return $r9;

     label2:
        goto label1;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be less than the number of elements that remained (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    private static void checkNonnegative(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must not be negative");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        return;
    }

    public static java.lang.Object get(java.util.Iterator, int, java.lang.Object)
    {
        java.lang.IndexOutOfBoundsException $r2;
        java.util.Iterator r0;
        int i0;
        java.lang.Object $r1, r3;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.Object;

        staticinvoke <com.google.common.collect.Iterators: void checkNonnegative(int)>(i0);

     label1:
        $r1 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object get(java.util.Iterator,int)>(r0, i0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return r3;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public static java.lang.Object getNext(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static java.lang.Object getLast(java.util.Iterator)
    {
        java.lang.Object $r1;
        java.util.Iterator r0;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        goto label1;
    }

    public static java.lang.Object getLast(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.collect.Iterators: java.lang.Object getLast(java.util.Iterator)>(r0);

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static int skip(java.util.Iterator, int)
    {
        java.util.Iterator r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "number to skip cannot be negative");

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        i1 = i1 + 1;

        goto label3;

     label4:
        return i1;
    }

    public static java.util.Iterator limit(java.util.Iterator, int)
    {
        com.google.common.collect.Iterators$9 $r1;
        java.util.Iterator r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "limit is negative");

        $r1 = new com.google.common.collect.Iterators$9;

        specialinvoke $r1.<com.google.common.collect.Iterators$9: void <init>(int,java.util.Iterator)>(i0, r0);

        return $r1;
    }

    public static java.util.Iterator consumingIterator(java.util.Iterator)
    {
        com.google.common.collect.Iterators$10 $r1;
        java.util.Iterator r0;

        r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$10;

        specialinvoke $r1.<com.google.common.collect.Iterators$10: void <init>(java.util.Iterator)>(r0);

        return $r1;
    }

    public static transient com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] r0;
        com.google.common.collect.Iterators$11 $r1;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$11;

        $i0 = lengthof r0;

        specialinvoke $r1.<com.google.common.collect.Iterators$11: void <init>(int,java.lang.Object[])>($i0, r0);

        return $r1;
    }

    static com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[], int, int)
    {
        com.google.common.collect.Iterators$12 $r1;
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i3 = i1 + i0;

        $i2 = lengthof r0;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i1, $i3, $i2);

        $r1 = new com.google.common.collect.Iterators$12;

        specialinvoke $r1.<com.google.common.collect.Iterators$12: void <init>(int,java.lang.Object[],int)>(i0, r0, i1);

        return $r1;
    }

    public static com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.collect.Iterators$13 $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = new com.google.common.collect.Iterators$13;

        specialinvoke $r0.<com.google.common.collect.Iterators$13: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    public static com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration)
    {
        com.google.common.collect.Iterators$14 $r1;
        java.util.Enumeration r0;

        r0 := @parameter0: java.util.Enumeration;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$14;

        specialinvoke $r1.<com.google.common.collect.Iterators$14: void <init>(java.util.Enumeration)>(r0);

        return $r1;
    }

    public static java.util.Enumeration asEnumeration(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.common.collect.Iterators$15 $r1;

        r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.collect.Iterators$15;

        specialinvoke $r1.<com.google.common.collect.Iterators$15: void <init>(java.util.Iterator)>(r0);

        return $r1;
    }

    public static com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.common.collect.Iterators$PeekingImpl $r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        $z0 = r0 instanceof com.google.common.collect.Iterators$PeekingImpl;

        if $z0 == 0 goto label1;

        r2 = (com.google.common.collect.Iterators$PeekingImpl) r0;

        return r2;

     label1:
        $r1 = new com.google.common.collect.Iterators$PeekingImpl;

        specialinvoke $r1.<com.google.common.collect.Iterators$PeekingImpl: void <init>(java.util.Iterator)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        com.google.common.collect.Iterators$1 $r0;
        com.google.common.collect.Iterators$2 $r1;

        $r0 = new com.google.common.collect.Iterators$1;

        specialinvoke $r0.<com.google.common.collect.Iterators$1: void <init>()>();

        <com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator EMPTY_ITERATOR> = $r0;

        $r1 = new com.google.common.collect.Iterators$2;

        specialinvoke $r1.<com.google.common.collect.Iterators$2: void <init>()>();

        <com.google.common.collect.Iterators: java.util.Iterator EMPTY_MODIFIABLE_ITERATOR> = $r1;

        return;
    }
}
