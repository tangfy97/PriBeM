public class org.apache.http.impl.conn.InMemoryDnsResolver extends java.lang.Object implements org.apache.http.conn.DnsResolver
{
    private final org.apache.commons.logging.Log log;
    private java.util.Map dnsMap;

    public void <init>()
    {
        org.apache.http.impl.conn.InMemoryDnsResolver r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.apache.http.impl.conn.InMemoryDnsResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/http/impl/conn/InMemoryDnsResolver;");

        r0.<org.apache.http.impl.conn.InMemoryDnsResolver: org.apache.commons.logging.Log log> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.http.impl.conn.InMemoryDnsResolver: java.util.Map dnsMap> = $r2;

        return;
    }

    public transient void add(java.lang.String, java.net.InetAddress[])
    {
        org.apache.http.impl.conn.InMemoryDnsResolver r2;
        java.net.InetAddress[] r1;
        java.util.Map $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r4, $r5;

        r2 := @this: org.apache.http.impl.conn.InMemoryDnsResolver;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.net.InetAddress[];

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host name may not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of IP addresses may not be null");

        throw $r4;

     label2:
        $r3 = r2.<org.apache.http.impl.conn.InMemoryDnsResolver: java.util.Map dnsMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public java.net.InetAddress[] resolve(java.lang.String) throws java.net.UnknownHostException
    {
        java.net.InetAddress[] r4;
        java.util.Map $r2;
        java.lang.String r1, $r10, $r16, $r18;
        boolean $z0;
        org.apache.http.impl.conn.InMemoryDnsResolver r0;
        java.net.UnknownHostException $r6;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r5, $r12;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r13, $r14, $r15, $r17;

        r0 := @this: org.apache.http.impl.conn.InMemoryDnsResolver;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.impl.conn.InMemoryDnsResolver: java.util.Map dnsMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.net.InetAddress[]) $r3;

        $r5 = r0.<org.apache.http.impl.conn.InMemoryDnsResolver: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.http.impl.conn.InMemoryDnsResolver: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolving ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r16 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>(r4);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r18);

     label1:
        if r4 != null goto label2;

        $r6 = new java.net.UnknownHostException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.net.UnknownHostException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        return r4;
    }
}
