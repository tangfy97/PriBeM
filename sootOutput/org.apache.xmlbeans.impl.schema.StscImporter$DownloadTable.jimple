public class org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable extends java.lang.Object
{
    private java.util.Map schemaByNsLocPair;
    private java.util.Map schemaByDigestKey;
    private java.util.LinkedList scanNeeded;
    private java.util.Set emptyNamespaceSchemas;
    private java.util.Map scannedAlready;
    private java.util.Set failedDownloads;

    private org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema downloadSchema(org.apache.xmlbeans.XmlObject, java.lang.String, java.lang.String)
    {
        java.util.Map $r41, $r44, $r47;
        org.apache.xmlbeans.XmlDocumentProperties $r22;
        java.lang.StringBuffer $r15, $r16, $r17, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r38, $r50, $r51, $r53, $r58, $r59, $r60, $r61, $r64, $r65, $r67;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair $r19, $r40, $r43, $r46;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument r14;
        java.lang.String r0, $r3, r6, $r11, $r18, $r20, $r21, $r23, $r24, $r28, $r34, $r39, $r52, $r54, $r56, $r62, $r66, $r68, $r69, r70;
        org.apache.xmlbeans.SchemaTypeLoader $r8;
        java.io.IOException $r55;
        org.apache.xmlbeans.XmlException $r49;
        java.net.URISyntaxException $r63;
        org.apache.xmlbeans.impl.schema.StscState $r1;
        java.net.URI $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r10, r71, r72, r73, r74;
        java.util.Collection $r13;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r7;
        org.apache.xmlbeans.XmlObject r2, $r9;
        java.net.MalformedURLException $r57;
        org.apache.xmlbeans.XmlOptions $r12;
        java.lang.Object $r42, $r45, $r48;

        r7 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r2 := @parameter0: org.apache.xmlbeans.XmlObject;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter: java.lang.String access$000(org.apache.xmlbeans.XmlObject)>(r2);

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter: java.net.URI access$100(java.lang.String)>($r3);

     label02:
        if $r4 != null goto label03;

        $r69 = r0;

        goto label04;

     label03:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter: java.net.URI resolve(java.net.URI,java.lang.String)>($r4, r0);

        $r69 = virtualinvoke $r5.<java.net.URI: java.lang.String toString()>();

     label04:
        r70 = $r69;

     label05:
        goto label07;

     label06:
        $r63 := @caughtexception;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find resource - invalid location URL: ");

        $r66 = virtualinvoke $r63.<java.net.URISyntaxException: java.lang.String getMessage()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r68, 56, r2);

        return null;

     label07:
        $z0 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: boolean isFileProcessed(java.lang.String)>($r69);

        if $z0 == 0 goto label08;

        return null;

     label08:
        if $r69 == null goto label09;

        if r6 == null goto label09;

        $r47 = r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        $r46 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        specialinvoke $r46.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>(r6, $r69);

        $r48 = interfaceinvoke $r47.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46);

        r71 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r48;

        if r71 == null goto label09;

        return r71;

     label09:
        if r6 == null goto label11;

        $z5 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 != 0 goto label11;

        $z6 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: boolean shouldDownloadURI(java.lang.String)>(r70);

        if $z6 != 0 goto label10;

        $r44 = r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        $r43 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        specialinvoke $r43.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>(r6, null);

        $r45 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>($r43);

        r72 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r45;

        if r72 == null goto label10;

        return r72;

     label10:
        $z7 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: boolean linkerDefinesNamespace(java.lang.String)>(r6);

        if $z7 == 0 goto label11;

        return null;

     label11:
        if r70 == null goto label12;

        $r41 = r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        $r40 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        specialinvoke $r40.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>(null, r70);

        $r42 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        r73 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r42;

        if r73 == null goto label12;

        return r73;

     label12:
        if r70 != null goto label13;

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Could not find resource - no valid location URL.", 56, r2);

        return null;

     label13:
        $z1 = specialinvoke r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: boolean previouslyFailedToDownload(java.lang.String)>(r70);

        if $z1 == 0 goto label14;

        return null;

     label14:
        $z2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: boolean shouldDownloadURI(java.lang.String)>(r70);

        if $z2 != 0 goto label15;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load resource \"");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r70);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" (network downloads disabled).");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r39, 56, r2);

        specialinvoke r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void addFailedDownload(java.lang.String)>(r70);

        return null;

     label15:
        $r8 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaTypeLoader getS4SLoader()>();

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.XmlObject downloadDocument(org.apache.xmlbeans.SchemaTypeLoader,java.lang.String,java.lang.String)>($r8, r6, r70);

        $r10 = specialinvoke r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema findMatchByDigest(org.apache.xmlbeans.XmlObject)>($r9);

        r74 = $r10;

        $r11 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String relativize(java.lang.String)>(r70);

        if $r10 == null goto label18;

        $r22 = interfaceinvoke $r10.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.XmlDocumentProperties documentProperties()>();

        $r23 = virtualinvoke $r22.<org.apache.xmlbeans.XmlDocumentProperties: java.lang.String getSourceName()>();

        $r24 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String relativize(java.lang.String)>($r23);

        if $r24 == null goto label16;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is the same as ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (ignoring the duplicate file)");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void info(java.lang.String)>($r34);

        goto label17;

     label16:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is the same as another schema");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void info(java.lang.String)>($r28);

     label17:
        goto label22;

     label18:
        $r12 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r12.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r13 = virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: java.util.Collection getErrorListener()>();

        virtualinvoke $r12.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setErrorListener(java.util.Collection)>($r13);

        $z3 = $r9 instanceof org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument;

        if $z3 == 0 goto label19;

        $z4 = interfaceinvoke $r9.<org.apache.xmlbeans.XmlObject: boolean validate(org.apache.xmlbeans.XmlOptions)>($r12);

        if $z4 != 0 goto label21;

     label19:
        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Referenced document is not a valid schema", 56, r2);

     label20:
        goto label27;

     label21:
        r14 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument) $r9;

        r74 = interfaceinvoke r14.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading referenced file ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void info(java.lang.String)>($r18);

     label22:
        $r19 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        $r20 = interfaceinvoke r74.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r21 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r20);

        specialinvoke $r19.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>($r21, r70);

        specialinvoke r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void addSuccessfulDownload(org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair,org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)>($r19, r74);

     label23:
        return r74;

     label24:
        $r57 := @caughtexception;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("URL \"");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r70);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not well-formed");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r62, 56, r2);

        goto label27;

     label25:
        $r55 := @caughtexception;

        $r56 = virtualinvoke $r55.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r56, 56, r2);

        goto label27;

     label26:
        $r49 := @caughtexception;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Problem parsing referenced XML resource - ");

        $r52 = virtualinvoke $r49.<org.apache.xmlbeans.XmlException: java.lang.String getMessage()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r54, 56, r2);

     label27:
        specialinvoke r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void addFailedDownload(java.lang.String)>(r70);

        return null;

        catch java.net.URISyntaxException from label02 to label05 with label06;
        catch java.net.MalformedURLException from label15 to label20 with label24;
        catch java.net.MalformedURLException from label21 to label23 with label24;
        catch java.io.IOException from label15 to label20 with label25;
        catch java.io.IOException from label21 to label23 with label25;
        catch org.apache.xmlbeans.XmlException from label15 to label20 with label26;
        catch org.apache.xmlbeans.XmlException from label21 to label23 with label26;
    }

    static org.apache.xmlbeans.XmlObject downloadDocument(org.apache.xmlbeans.SchemaTypeLoader, java.lang.String, java.lang.String) throws java.net.MalformedURLException, java.io.IOException, org.apache.xmlbeans.XmlException
    {
        java.net.URL $r4, $r13;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.xml.sax.EntityResolver $r1;
        java.io.Reader $r9, $r27;
        org.xml.sax.SAXException $r30;
        java.lang.StringBuffer $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.String r2, r7, $r11, $r22, $r24;
        org.apache.xmlbeans.XmlObject $r6, $r14, $r26, $r29;
        org.xml.sax.InputSource $r8;
        org.apache.xmlbeans.SchemaTypeLoader r5;
        java.io.IOException $r15;
        org.apache.xmlbeans.XmlException $r31;
        org.apache.xmlbeans.XmlOptions $r3, $r12, $r25, $r28;
        java.io.InputStream $r10, $r23;

        r5 := @parameter0: org.apache.xmlbeans.SchemaTypeLoader;

        r7 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.xml.sax.EntityResolver getEntityResolver()>();

        if $r1 == null goto label9;

     label1:
        $r8 = interfaceinvoke $r1.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(r7, r2);

     label2:
        goto label4;

     label3:
        $r30 := @caughtexception;

        $r31 = new org.apache.xmlbeans.XmlException;

        specialinvoke $r31.<org.apache.xmlbeans.XmlException: void <init>(java.lang.Throwable)>($r30);

        throw $r31;

     label4:
        if $r8 == null goto label9;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void addSourceUri(java.lang.String,java.lang.String)>(r2, null);

        $r9 = virtualinvoke $r8.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        if $r9 == null goto label5;

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.io.Reader copySchemaSource(java.lang.String,java.io.Reader,org.apache.xmlbeans.impl.schema.StscState)>(r2, $r9, $r0);

        $r28 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r28.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r28.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        virtualinvoke $r28.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setDocumentSourceName(java.lang.String)>(r2);

        $r29 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.XmlObject parse(java.io.Reader,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r27, null, $r28);

        return $r29;

     label5:
        $r10 = virtualinvoke $r8.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        if $r10 == null goto label7;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.io.InputStream copySchemaSource(java.lang.String,java.io.InputStream,org.apache.xmlbeans.impl.schema.StscState)>(r2, $r10, $r0);

        $r24 = virtualinvoke $r8.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        $r25 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r25.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r25.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        virtualinvoke $r25.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadMessageDigest()>();

        virtualinvoke $r25.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setDocumentSourceName(java.lang.String)>(r2);

        if $r24 == null goto label6;

        virtualinvoke $r25.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCharacterEncoding(java.lang.String)>($r24);

     label6:
        $r26 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.XmlObject parse(java.io.InputStream,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r23, null, $r25);

        return $r26;

     label7:
        $r11 = virtualinvoke $r8.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        if $r11 != null goto label8;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EntityResolver unable to resolve ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (for namespace ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label8:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void copySchemaSource(java.lang.String,org.apache.xmlbeans.impl.schema.StscState,boolean)>(r2, $r0, 0);

        $r12 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r12.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r12.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        virtualinvoke $r12.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadMessageDigest()>();

        virtualinvoke $r12.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setDocumentSourceName(java.lang.String)>(r2);

        $r13 = new java.net.URL;

        specialinvoke $r13.<java.net.URL: void <init>(java.lang.String)>($r11);

        $r14 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.XmlObject parse(java.net.URL,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r13, null, $r12);

        return $r14;

     label9:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void addSourceUri(java.lang.String,java.lang.String)>(r2, null);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void copySchemaSource(java.lang.String,org.apache.xmlbeans.impl.schema.StscState,boolean)>(r2, $r0, 0);

        $r3 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r3.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r3.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        virtualinvoke $r3.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadMessageDigest()>();

        $r4 = new java.net.URL;

        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r2);

        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaTypeLoader: org.apache.xmlbeans.XmlObject parse(java.net.URL,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlOptions)>($r4, null, $r3);

        return $r6;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    private void addSuccessfulDownload(org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair, org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)
    {
        byte[] $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey $r3, $r12;
        org.apache.xmlbeans.impl.schema.StscState $r14, $r15;
        java.util.Map $r5, $r9, $r10, $r11, $r13, $r16, $r19;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair r6, $r7, $r17;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r4;
        java.lang.String $r8, $r18;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema r0;
        org.apache.xmlbeans.XmlDocumentProperties $r1;

        r4 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r6 := @parameter0: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        r0 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.XmlDocumentProperties documentProperties()>();

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.XmlDocumentProperties: byte[] getMessageDigest()>();

        if $r2 != null goto label1;

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r15.<org.apache.xmlbeans.impl.schema.StscState: void addSchemaDigest(byte[])>(null);

        goto label2;

     label1:
        $r3 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey;

        specialinvoke $r3.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey: void <init>(byte[])>($r2);

        $r5 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByDigestKey>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r13 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByDigestKey>;

        $r12 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey;

        specialinvoke $r12.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey: void <init>(byte[])>($r2);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r0);

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r14.<org.apache.xmlbeans.impl.schema.StscState: void addSchemaDigest(byte[])>($r2);

     label2:
        $r16 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r0);

        $r17 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        $r18 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: java.lang.String getNamespaceURI()>();

        specialinvoke $r17.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>($r18, null);

        $r19 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>($r17);

        if $z2 != 0 goto label3;

        $r11 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r0);

     label3:
        $r7 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        $r8 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: java.lang.String getLocationURL()>();

        specialinvoke $r7.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>(null, $r8);

        $r9 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

        $r10 = r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r0);

     label4:
        return;
    }

    private org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema findMatchByDigest(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r7;
        byte[] $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey $r4;
        org.apache.xmlbeans.XmlDocumentProperties $r1;
        java.util.Map $r5;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r3;
        java.lang.Object $r6;
        org.apache.xmlbeans.XmlObject r0;

        r3 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlDocumentProperties documentProperties()>();

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.XmlDocumentProperties: byte[] getMessageDigest()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r5 = r3.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByDigestKey>;

        $r4 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey;

        specialinvoke $r4.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$DigestKey: void <init>(byte[])>($r2);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r6;

        return $r7;
    }

    private void addFailedDownload(java.lang.String)
    {
        java.util.Set $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set failedDownloads>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private boolean previouslyFailedToDownload(java.lang.String)
    {
        java.util.Set $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set failedDownloads>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private static boolean nullableStringsMatch(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private static java.lang.String emptyStringIfNull(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        return r0;
    }

    private org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)
    {
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess r1, $r5;
        java.util.Map $r2, $r3, $r6;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.Object $r4;
        java.util.LinkedList $r7;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map scannedAlready>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map scannedAlready>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        $r7 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.LinkedList scanNeeded>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        return r1;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map scannedAlready>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess) $r4;

        return $r5;
    }

    private void addEmptyNamespaceSchema(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema r1;
        java.util.Set $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r1 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void usedEmptyNamespaceSchema(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema r1;
        java.util.Set $r2;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r1 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema;

        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private boolean fetchRemainingEmptyNamespaceSchemas()
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema r6;
        java.util.Iterator $r3;
        java.util.Set $r1, $r2, $r4;
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess $r7;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r5;

        $r7 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r7.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>(r6, null);

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r7);

        goto label2;

     label3:
        $r4 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

        return 1;
    }

    private boolean hasNextToScan()
    {
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.LinkedList scanNeeded>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess nextToScan()
    {
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.Object $r2;
        java.util.LinkedList $r1;
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.LinkedList scanNeeded>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r3 = (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess) $r2;

        return r3;
    }

    public void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema[])
    {
        java.util.HashMap $r1, $r2, $r5;
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess $r15;
        java.util.HashSet $r4, $r6;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema[] r7;
        int $i0, i1;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair $r10;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r0;
        java.lang.String $r9, $r12;
        java.util.LinkedList $r3;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r8, $r11, $r13, $r14, $r16;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        r7 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByNsLocPair> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map schemaByDigestKey> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.LinkedList scanNeeded> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set emptyNamespaceSchemas> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Map scannedAlready> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.util.Set failedDownloads> = $r6;

        i1 = 0;

     label1:
        $i0 = lengthof r7;

        if i1 >= $i0 goto label4;

        $r8 = r7[i1];

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r10 = new org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair;

        $r11 = r7[i1];

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter: java.lang.String access$000(org.apache.xmlbeans.XmlObject)>($r11);

        specialinvoke $r10.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair: void <init>(java.lang.String,java.lang.String)>($r9, $r12);

        $r13 = r7[i1];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void addSuccessfulDownload(org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable$NsLocPair,org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)>($r10, $r13);

        if $r9 == null goto label2;

        $r15 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        $r16 = r7[i1];

        specialinvoke $r15.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r16, null);

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r15);

        goto label3;

     label2:
        $r14 = r7[i1];

        specialinvoke r0.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void addEmptyNamespaceSchema(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)>($r14);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess[] resolveImportsAndIncludes(boolean)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import $r66, $r67, $r70, $r74, $r83, $r88;
        java.lang.Object[] $r4;
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess $r8, $r25, $r26, $r38, $r39, $r50, $r51, $r62, $r63, $r76, r91;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r29, $r30, $r32, $r33, $r34, $r35, $r53, $r54, $r56, $r57, $r58, $r59, $r78, $r79, $r81, $r82, $r85, $r86;
        java.lang.String $r9, $r14, $r17, $r20, $r22, $r23, $r24, $r31, $r36, $r42, $r45, $r47, $r48, $r49, $r55, $r60, $r65, $r68, $r69, $r71, $r73, $r75, $r80, $r84, $r87, r89, r90;
        org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine $r18, $r19, $r27, $r37, $r40;
        org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include[] $r13;
        org.apache.xmlbeans.impl.schema.StscState $r0, $r28, $r52, $r77;
        org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include $r43, $r44, $r61;
        boolean $z0, z1, $z2, $z3, $z4, z5, $z6;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r10, $r12, $r15, $r21, $r41, $r46, $r64, $r72;
        org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import[] $r11;
        org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine[] $r16;
        int $i0, $i1, $i2, i3, i4, $i5, i6, $i7, i8;
        org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable r2;
        org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess[] $r3, $r5, $r6;
        java.lang.Object $r7;

        r2 := @this: org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable;

        z1 := @parameter0: boolean;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        z5 = 0;

     label01:
        $z6 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: boolean hasNextToScan()>();

        if $z6 == 0 goto label21;

        $r8 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess nextToScan()>();

        $r9 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: java.lang.String getSourceName()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void addSourceUri(java.lang.String,java.lang.String)>($r9, null);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void copySchemaSource(java.lang.String,org.apache.xmlbeans.impl.schema.StscState,boolean)>($r9, $r0, z1);

        $r10 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r11 = interfaceinvoke $r10.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import[] getImportArray()>();

        i3 = 0;

     label02:
        $i2 = lengthof $r11;

        if i3 >= $i2 goto label06;

        $r67 = $r11[i3];

        $r66 = $r11[i3];

        $r68 = interfaceinvoke $r66.<org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import: java.lang.String getNamespace()>();

        $r69 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r68);

        $r70 = $r11[i3];

        $r71 = interfaceinvoke $r70.<org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import: java.lang.String getSchemaLocation()>();

        $r72 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema downloadSchema(org.apache.xmlbeans.XmlObject,java.lang.String,java.lang.String)>($r67, $r69, $r71);

        if $r72 != null goto label03;

        goto label05;

     label03:
        $r73 = interfaceinvoke $r72.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r74 = $r11[i3];

        $r75 = interfaceinvoke $r74.<org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import: java.lang.String getNamespace()>();

        $z4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: boolean nullableStringsMatch(java.lang.String,java.lang.String)>($r73, $r75);

        if $z4 != 0 goto label04;

        $r77 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Imported schema has a target namespace \"");

        $r80 = interfaceinvoke $r72.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" that does not match the specified \"");

        $r83 = $r11[i3];

        $r84 = interfaceinvoke $r83.<org.apache.xmlbeans.impl.xb.xsdschema.ImportDocument$Import: java.lang.String getNamespace()>();

        $r85 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r84);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>();

        $r88 = $r11[i3];

        virtualinvoke $r77.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r87, 4, $r88);

        goto label05;

     label04:
        $r76 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r76.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r72, null);

        specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r76);

     label05:
        i3 = i3 + 1;

        goto label02;

     label06:
        $r12 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r13 = interfaceinvoke $r12.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include[] getIncludeArray()>();

        $r14 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: java.lang.String getChameleonNamespace()>();

        r89 = $r14;

        if $r14 != null goto label07;

        $r64 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r65 = interfaceinvoke $r64.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        r89 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r65);

     label07:
        i4 = 0;

     label08:
        $i5 = lengthof $r13;

        if i4 >= $i5 goto label13;

        $r44 = $r13[i4];

        $r43 = $r13[i4];

        $r45 = interfaceinvoke $r43.<org.apache.xmlbeans.impl.xb.xsdschema.IncludeDocument$Include: java.lang.String getSchemaLocation()>();

        $r46 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema downloadSchema(org.apache.xmlbeans.XmlObject,java.lang.String,java.lang.String)>($r44, null, $r45);

        if $r46 != null goto label09;

        goto label12;

     label09:
        $r47 = interfaceinvoke $r46.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r48 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r47);

        $z3 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r89);

        if $z3 == 0 goto label10;

        $r62 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r62.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r46, null);

        $r63 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r62);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void access$200(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r8, $r63);

        goto label12;

     label10:
        $r49 = interfaceinvoke $r46.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        if $r49 == null goto label11;

        $r52 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Included schema has a target namespace \"");

        $r55 = interfaceinvoke $r46.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" that does not match the source namespace \"");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r89);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        $r61 = $r13[i4];

        virtualinvoke $r52.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r60, 4, $r61);

        goto label12;

     label11:
        $r50 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r50.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r46, r89);

        $r51 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r50);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void access$200(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r8, $r51);

        specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void usedEmptyNamespaceSchema(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)>($r46);

     label12:
        i4 = i4 + 1;

        goto label08;

     label13:
        $r15 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r16 = interfaceinvoke $r15.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine[] getRedefineArray()>();

        $r17 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: java.lang.String getChameleonNamespace()>();

        r90 = $r17;

        if $r17 != null goto label14;

        $r41 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema()>();

        $r42 = interfaceinvoke $r41.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        r90 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r42);

     label14:
        i6 = 0;

     label15:
        $i7 = lengthof $r16;

        if i6 >= $i7 goto label20;

        $r19 = $r16[i6];

        $r18 = $r16[i6];

        $r20 = interfaceinvoke $r18.<org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine: java.lang.String getSchemaLocation()>();

        $r21 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema downloadSchema(org.apache.xmlbeans.XmlObject,java.lang.String,java.lang.String)>($r19, null, $r20);

        if $r21 != null goto label16;

        goto label19;

     label16:
        $r22 = interfaceinvoke $r21.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.lang.String emptyStringIfNull(java.lang.String)>($r22);

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r90);

        if $z2 == 0 goto label17;

        $r38 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r38.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r21, null);

        $r39 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r38);

        $r40 = $r16[i6];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void access$300(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine)>($r8, $r39, $r40);

        z5 = 1;

        goto label19;

     label17:
        $r24 = interfaceinvoke $r21.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        if $r24 == null goto label18;

        $r28 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefined schema has a target namespace \"");

        $r31 = interfaceinvoke $r21.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.String getTargetNamespace()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" that does not match the source namespace \"");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r90);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        $r37 = $r16[i6];

        virtualinvoke $r28.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r36, 4, $r37);

        goto label19;

     label18:
        $r25 = new org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess;

        specialinvoke $r25.<org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void <init>(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema,java.lang.String)>($r21, r90);

        $r26 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess addScanNeeded(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>($r25);

        $r27 = $r16[i6];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void access$300(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess,org.apache.xmlbeans.impl.xb.xsdschema.RedefineDocument$Redefine)>($r8, $r26, $r27);

        specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: void usedEmptyNamespaceSchema(org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema)>($r21);

        z5 = 1;

     label19:
        i6 = i6 + 1;

        goto label15;

     label20:
        goto label01;

     label21:
        $z0 = specialinvoke r2.<org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: boolean fetchRemainingEmptyNamespaceSchemas()>();

        if $z0 != 0 goto label01;

        goto label22;

     label22:
        if z5 == 0 goto label24;

        i8 = 0;

     label23:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i8 >= $i1 goto label24;

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i8);

        r91 = (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess) $r7;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess: void access$400(org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)>(r91);

        i8 = i8 + 1;

        goto label23;

     label24:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess[]) $r4;

        $r6 = (org.apache.xmlbeans.impl.schema.StscImporter$SchemaToProcess[]) $r5;

        return $r6;
    }

    private static java.io.Reader copySchemaSource(java.lang.String, java.io.Reader, org.apache.xmlbeans.impl.schema.StscState)
    {
        java.io.CharArrayReader $r9;
        org.apache.xmlbeans.impl.common.XmlEncodingSniffer $r10;
        org.apache.xmlbeans.impl.schema.StscState r0;
        java.lang.StringBuffer $r15, $r17, $r18;
        java.io.OutputStreamWriter $r11;
        java.lang.String r2, $r3, $r7, $r13, $r19;
        boolean $z0;
        java.io.PrintStream $r16;
        java.io.FileOutputStream $r12;
        java.io.IOException $r14;
        java.io.Reader r8;
        java.io.File $r1, $r4, $r5, $r6;

        r2 := @parameter0: java.lang.String;

        r8 := @parameter1: java.io.Reader;

        r0 := @parameter2: org.apache.xmlbeans.impl.schema.StscState;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        if $r1 != null goto label1;

        return r8;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String sourceNameForUri(java.lang.String)>(r2);

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r3);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        return r8;

     label2:
        $r6 = new java.io.File;

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: java.io.File createDir(java.io.File,java.lang.String)>($r6, null);

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.io.CharArrayReader copy(java.io.Reader)>(r8);

        $r10 = new org.apache.xmlbeans.impl.common.XmlEncodingSniffer;

        specialinvoke $r10.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: void <init>(java.io.Reader,java.lang.String)>($r9, null);

        $r11 = new java.io.OutputStreamWriter;

        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        $r13 = virtualinvoke $r10.<org.apache.xmlbeans.impl.common.XmlEncodingSniffer: java.lang.String getXmlEncoding()>();

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r12, $r13);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.Reader,java.io.Writer)>($r9, $r11);

        virtualinvoke $r9.<java.io.CharArrayReader: void reset()>();

     label3:
        return $r9;

     label4:
        $r14 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IO Error ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19);

        return r8;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private static java.io.InputStream copySchemaSource(java.lang.String, java.io.InputStream, org.apache.xmlbeans.impl.schema.StscState)
    {
        org.apache.xmlbeans.impl.schema.StscState r0;
        java.io.ByteArrayInputStream $r9;
        java.lang.StringBuffer $r12, $r14, $r15;
        java.lang.String r2, $r3, $r7, $r16;
        boolean $z0;
        java.io.PrintStream $r13;
        java.io.FileOutputStream $r10;
        java.io.IOException $r11;
        java.io.File $r1, $r4, $r5, $r6;
        java.io.InputStream r8;

        r2 := @parameter0: java.lang.String;

        r8 := @parameter1: java.io.InputStream;

        r0 := @parameter2: org.apache.xmlbeans.impl.schema.StscState;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        if $r1 != null goto label1;

        return r8;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String sourceNameForUri(java.lang.String)>(r2);

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r3);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        return r8;

     label2:
        $r6 = new java.io.File;

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: java.io.File createDir(java.io.File,java.lang.String)>($r6, null);

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscImporter$DownloadTable: java.io.ByteArrayInputStream copy(java.io.InputStream)>(r8);

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>($r9, $r10);

        virtualinvoke $r9.<java.io.ByteArrayInputStream: void reset()>();

     label3:
        return $r9;

     label4:
        $r11 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IO Error ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        return r8;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private static void copySchemaSource(java.lang.String, org.apache.xmlbeans.impl.schema.StscState, boolean)
    {
        java.net.URL $r8;
        org.apache.xmlbeans.impl.schema.StscState r0;
        java.lang.StringBuffer $r11, $r13, $r14;
        java.lang.String r2, $r3, $r7, $r15;
        boolean z0, $z1, $z2;
        java.io.PrintStream $r12;
        java.io.FileOutputStream $r9;
        java.io.IOException $r10;
        java.io.File $r1, $r4, $r5, $r6;
        java.io.FileNotFoundException $r16;
        java.io.InputStream r17;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.xmlbeans.impl.schema.StscState;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        if $r1 == null goto label9;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.lang.String sourceNameForUri(java.lang.String)>(r2);

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.StscState: java.io.File getSchemasDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r3);

        if z0 != 0 goto label1;

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label9;

     label1:
        $r6 = new java.io.File;

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: java.io.File createDir(java.io.File,java.lang.String)>($r6, null);

        r17 = null;

        $r8 = new java.net.URL;

        specialinvoke $r8.<java.net.URL: void <init>(java.lang.String)>(r2);

     label2:
        r17 = virtualinvoke $r8.<java.net.URL: java.io.InputStream openStream()>();

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        if z0 == 0 goto label5;

        $z2 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label5;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        goto label6;

     label5:
        throw $r16;

     label6:
        if r17 == null goto label7;

        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>(r17, $r9);

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IO Error ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label9:
        return;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
        catch java.io.IOException from label1 to label7 with label8;
    }

    private static java.io.ByteArrayInputStream copy(java.io.InputStream) throws java.io.IOException
    {
        byte[] r0, $r4;
        java.io.ByteArrayOutputStream $r1;
        java.io.ByteArrayInputStream $r3;
        int $i0;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 = newarray (byte)[1024];

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r0, 0, 1024);

        if $i0 <= 0 goto label2;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label2:
        $r3 = new java.io.ByteArrayInputStream;

        $r4 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        return $r3;
    }

    private static java.io.CharArrayReader copy(java.io.Reader) throws java.io.IOException
    {
        java.io.CharArrayReader $r3;
        int $i0;
        char[] r0, $r4;
        java.io.CharArrayWriter $r1;
        java.io.Reader r2;

        r2 := @parameter0: java.io.Reader;

        r0 = newarray (char)[1024];

        $r1 = new java.io.CharArrayWriter;

        specialinvoke $r1.<java.io.CharArrayWriter: void <init>()>();

     label1:
        $i0 = virtualinvoke r2.<java.io.Reader: int read(char[],int,int)>(r0, 0, 1024);

        if $i0 <= 0 goto label2;

        virtualinvoke $r1.<java.io.CharArrayWriter: void write(char[],int,int)>(r0, 0, $i0);

        goto label1;

     label2:
        $r3 = new java.io.CharArrayReader;

        $r4 = virtualinvoke $r1.<java.io.CharArrayWriter: char[] toCharArray()>();

        specialinvoke $r3.<java.io.CharArrayReader: void <init>(char[])>($r4);

        return $r3;
    }
}
