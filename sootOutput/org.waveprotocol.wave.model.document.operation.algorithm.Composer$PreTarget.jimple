abstract class org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget extends org.waveprotocol.wave.model.document.operation.algorithm.Composer$Target
{
    final org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0;

    private void <init>(org.waveprotocol.wave.model.document.operation.algorithm.Composer)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.Composer;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$Target: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.Composer$1)>(null);

        return;
    }

    public final void deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue $r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4;
        java.lang.String r5;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue access$100(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue: void flush()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$200(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteCharacters(java.lang.String)>(r5);

        return;
    }

    public final void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue $r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4;
        java.lang.String r5;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.Attributes r6;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue access$100(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue: void flush()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$200(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r5, r6);

        return;
    }

    public final void deleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue $r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue access$100(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue: void flush()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$200(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementEnd()>();

        return;
    }

    public final void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue $r2;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r3;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: org.waveprotocol.wave.model.document.operation.algorithm.Composer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue access$100(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$AnnotationQueue: void queue(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r3);

        return;
    }

    final boolean isPostTarget()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        return 0;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.Composer, org.waveprotocol.wave.model.document.operation.algorithm.Composer$1)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$1 r2;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget r0;
        org.waveprotocol.wave.model.document.operation.algorithm.Composer r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.Composer;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.algorithm.Composer$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.Composer$PreTarget: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.Composer)>(r1);

        return;
    }
}
