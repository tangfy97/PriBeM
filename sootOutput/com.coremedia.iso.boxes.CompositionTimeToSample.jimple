public class com.coremedia.iso.boxes.CompositionTimeToSample extends com.googlecode.mp4parser.AbstractFullBox
{
    public static final java.lang.String TYPE;
    java.util.List entries;
    static final boolean $assertionsDisabled;
    private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0;
    private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.coremedia.iso.boxes.CompositionTimeToSample: java.lang.String TYPE> = "ctts";

        staticinvoke <com.coremedia.iso.boxes.CompositionTimeToSample: void ajc$preClinit()>();

        $r0 = class "Lcom/coremedia/iso/boxes/CompositionTimeToSample;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.coremedia.iso.boxes.CompositionTimeToSample: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>()
    {
        java.util.List $r1;
        com.coremedia.iso.boxes.CompositionTimeToSample r0;

        r0 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        specialinvoke r0.<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>("ctts");

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries> = $r1;

        return;
    }

    protected long getContentSize()
    {
        java.util.List $r1;
        com.coremedia.iso.boxes.CompositionTimeToSample r0;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        $r1 = r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 8 * $i0;

        $i2 = 8 + $i1;

        $l3 = (long) $i2;

        return $l3;
    }

    public java.util.List getEntries()
    {
        java.util.List $r4;
        com.coremedia.iso.boxes.CompositionTimeToSample r0;
        com.googlecode.mp4parser.RequiresParseDetailAspect $r3;
        org.aspectj.lang.JoinPoint$StaticPart $r1;
        org.aspectj.lang.JoinPoint $r2;

        r0 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        $r1 = <com.coremedia.iso.boxes.CompositionTimeToSample: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0>;

        $r2 = staticinvoke <org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>($r1, r0, r0);

        $r3 = staticinvoke <com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>();

        virtualinvoke $r3.<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>($r2);

        $r4 = r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries>;

        return $r4;
    }

    public void setEntries(java.util.List)
    {
        java.util.List r0;
        com.coremedia.iso.boxes.CompositionTimeToSample r1;
        com.googlecode.mp4parser.RequiresParseDetailAspect $r4;
        org.aspectj.lang.JoinPoint$StaticPart $r2;
        org.aspectj.lang.JoinPoint $r3;

        r1 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        r0 := @parameter0: java.util.List;

        $r2 = <com.coremedia.iso.boxes.CompositionTimeToSample: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1>;

        $r3 = staticinvoke <org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, r1, r1, r0);

        $r4 = staticinvoke <com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>();

        virtualinvoke $r4.<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>($r3);

        r1.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries> = r0;

        return;
    }

    public void _parseDetails(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.CompositionTimeToSample$Entry $r3;
        long $l0, $l2;
        java.nio.ByteBuffer r1;
        java.util.ArrayList $r2;
        java.util.List $r4;
        com.coremedia.iso.boxes.CompositionTimeToSample r0;
        int $i1, $i3, $i4, i5;

        r0 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.CompositionTimeToSample: long parseVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $l0 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        $i1 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries> = $r2;

        i5 = 0;

        goto label2;

     label1:
        $r3 = new com.coremedia.iso.boxes.CompositionTimeToSample$Entry;

        $l2 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        $i3 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l2);

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        specialinvoke $r3.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>($i3, $i4);

        $r4 = r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        i5 = i5 + 1;

     label2:
        if i5 < $i1 goto label1;

        return;
    }

    protected void getContent(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.CompositionTimeToSample$Entry r6;
        java.util.Iterator $r4;
        long $l1, $l3;
        java.nio.ByteBuffer r1;
        java.util.List $r2, $r3;
        com.coremedia.iso.boxes.CompositionTimeToSample r0;
        int $i0, $i2, $i4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.coremedia.iso.boxes.CompositionTimeToSample;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.CompositionTimeToSample: void writeVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $r2 = r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l1);

        $r3 = r0.<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List entries>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.coremedia.iso.boxes.CompositionTimeToSample$Entry) $r5;

        $i2 = virtualinvoke r6.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()>();

        $l3 = (long) $i2;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l3);

        $i4 = virtualinvoke r6.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public static int[] blowupCompositionTimes(java.util.List)
    {
        long $l1, l7;
        java.lang.AssertionError $r9;
        byte $b6;
        int[] $r6;
        int $i0, $i2, $i3, $i4, $i5, i8, i9, $i10;
        boolean $z0, $z1, $z2;
        com.coremedia.iso.boxes.CompositionTimeToSample$Entry r5, r8;
        java.util.Iterator $r1, $r3;
        java.util.List r0;
        java.lang.Object $r2, $r4;

        r0 := @parameter0: java.util.List;

        l7 = 0L;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.coremedia.iso.boxes.CompositionTimeToSample$Entry) $r2;

        $i0 = virtualinvoke r8.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()>();

        $l1 = (long) $i0;

        l7 = l7 + $l1;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = <com.coremedia.iso.boxes.CompositionTimeToSample: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $b6 = l7 cmp 2147483647L;

        $i10 = (int) $b6;

        if $i10 <= 0 goto label3;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        $i2 = (int) l7;

        $r6 = newarray (int)[$i2];

        i8 = 0;

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label7;

     label4:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.coremedia.iso.boxes.CompositionTimeToSample$Entry) $r4;

        i9 = 0;

        goto label6;

     label5:
        $i4 = i8;

        i8 = i8 + 1;

        $i5 = virtualinvoke r5.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()>();

        $r6[$i4] = $i5;

        i9 = i9 + 1;

     label6:
        $i3 = virtualinvoke r5.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()>();

        if i9 < $i3 goto label5;

     label7:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

        return $r6;
    }

    private static void ajc$preClinit()
    {
        org.aspectj.runtime.reflect.Factory $r0;
        org.aspectj.lang.JoinPoint$StaticPart $r2, $r4;
        org.aspectj.lang.reflect.MethodSignature $r1, $r3;

        $r0 = new org.aspectj.runtime.reflect.Factory;

        specialinvoke $r0.<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>("CompositionTimeToSample.java", class "Lcom/coremedia/iso/boxes/CompositionTimeToSample;");

        $r1 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("1", "getEntries", "com.coremedia.iso.boxes.CompositionTimeToSample", "", "", "", "java.util.List");

        $r2 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>("method-execution", $r1, 57);

        <com.coremedia.iso.boxes.CompositionTimeToSample: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0> = $r2;

        $r3 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("1", "setEntries", "com.coremedia.iso.boxes.CompositionTimeToSample", "java.util.List", "entries", "", "void");

        $r4 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>("method-execution", $r3, 61);

        <com.coremedia.iso.boxes.CompositionTimeToSample: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1> = $r4;

        return;
    }
}
