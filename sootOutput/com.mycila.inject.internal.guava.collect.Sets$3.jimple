final class com.mycila.inject.internal.guava.collect.Sets$3 extends com.mycila.inject.internal.guava.collect.Sets$SetView
{
    final java.util.Set val$set1;
    final com.mycila.inject.internal.guava.base.Predicate val$notInSet2;
    final java.util.Set val$set2;

    void <init>(java.util.Set, com.mycila.inject.internal.guava.base.Predicate, java.util.Set)
    {
        com.mycila.inject.internal.guava.base.Predicate r2;
        java.util.Set r1, r3;
        com.mycila.inject.internal.guava.collect.Sets$3 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$3;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        r3 := @parameter2: java.util.Set;

        r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set1> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Sets$3: com.mycila.inject.internal.guava.base.Predicate val$notInSet2> = r2;

        r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set2> = r3;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Sets$SetView: void <init>(com.mycila.inject.internal.guava.collect.Sets$1)>(null);

        return;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.base.Predicate $r3;
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r4;
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.Sets$3 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$3;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set1>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: com.mycila.inject.internal.guava.base.Predicate val$notInSet2>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator filter(java.util.Iterator,com.mycila.inject.internal.guava.base.Predicate)>($r2, $r3);

        return $r4;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Sets$3 r0;
        java.util.Iterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$3;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Iterator iterator()>();

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: int size(java.util.Iterator)>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.Set $r1, $r2;
        com.mycila.inject.internal.guava.collect.Sets$3 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$3;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set2>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set1>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r1);

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Set $r2, $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Sets$3 r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set1>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Sets$3: java.util.Set val$set2>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
