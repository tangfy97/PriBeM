public abstract class org.apache.cxf.jaxrs.provider.AbstractJAXBProvider extends org.apache.cxf.jaxrs.provider.AbstractConfigurableProvider implements javax.ws.rs.ext.MessageBodyReader, javax.ws.rs.ext.MessageBodyWriter
{
    protected static final java.util.ResourceBundle BUNDLE;
    protected static final java.util.logging.Logger LOG;
    protected static final java.lang.String NS_MAPPER_PROPERTY_RI;
    protected static final java.lang.String NS_MAPPER_PROPERTY_RI_INT;
    private static final java.lang.String JAXB_DEFAULT_NAMESPACE;
    private static final java.lang.String JAXB_DEFAULT_NAME;
    protected java.util.Set collectionContextClasses;
    protected java.util.Map jaxbElementClassMap;
    protected boolean unmarshalAsJaxbElement;
    protected boolean marshalAsJaxbElement;
    protected boolean xmlTypeAsJaxbElementOnly;
    protected java.util.Map outElementsMap;
    protected java.util.Map outAppendMap;
    protected java.util.List outDropElements;
    protected java.util.List inDropElements;
    protected java.util.Map inElementsMap;
    protected java.util.Map inAppendMap;
    protected java.util.Map packageContexts;
    protected java.util.Map classContexts;
    private boolean attributesToElements;
    private org.apache.cxf.jaxrs.ext.MessageContext mc;
    private javax.xml.validation.Schema schema;
    private java.lang.String catalogLocation;
    private java.util.Map schemaHandlers;
    private java.lang.String collectionWrapperName;
    private java.util.Map collectionWrapperMap;
    private java.util.List jaxbElementClassNames;
    private java.util.Map cProperties;
    private java.util.Map uProperties;
    private boolean skipJaxbChecks;
    private boolean singleJaxbContext;
    private boolean useSingleContextForPackages;
    private java.lang.Class[] extraClass;
    private boolean validateOutput;
    private boolean validateBeforeWrite;
    private javax.xml.bind.ValidationEventHandler eventHandler;
    private javax.xml.bind.Unmarshaller$Listener unmarshallerListener;
    private javax.xml.bind.Marshaller$Listener marshallerListener;
    private org.apache.cxf.staxutils.DocumentDepthProperties depthProperties;
    private java.lang.String namespaceMapperPropertyName;

    public void <init>()
    {
        java.util.HashSet $r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map $r2;
        java.util.HashMap $r3, $r4;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractConfigurableProvider: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map jaxbElementClassMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts> = $r4;

        return;
    }

    protected void setNamespaceMapper(javax.xml.bind.Marshaller, java.util.Map) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r3;
        java.util.Map r0;
        javax.xml.bind.Marshaller r1;
        java.lang.Object $r2;
        java.lang.String $r4, $r5;

        r3 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: javax.xml.bind.Marshaller;

        r0 := @parameter1: java.util.Map;

        $r2 = staticinvoke <org.apache.cxf.common.jaxb.JAXBUtils: java.lang.Object setNamespaceMapper(java.util.Map,javax.xml.bind.Marshaller)>(r0, r1);

        $r4 = r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String namespaceMapperPropertyName>;

        if $r4 == null goto label1;

        $r5 = r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String namespaceMapperPropertyName>;

        staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setMarshallerProp(javax.xml.bind.Marshaller,java.lang.Object,java.lang.String,java.lang.String)>(r1, $r2, $r5, null);

     label1:
        return;
    }

    protected static void setMarshallerProp(javax.xml.bind.Marshaller, java.lang.Object, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        javax.xml.bind.Marshaller r0;
        java.lang.Object r2;
        javax.xml.bind.PropertyException $r3;
        java.lang.String r1, r4;

        r0 := @parameter0: javax.xml.bind.Marshaller;

        r2 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        interfaceinvoke r0.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        if r4 == null goto label4;

        interfaceinvoke r0.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>(r4, r2);

        goto label5;

     label4:
        throw $r3;

     label5:
        return;

        catch javax.xml.bind.PropertyException from label1 to label2 with label3;
    }

    public void setValidationHandler(javax.xml.bind.ValidationEventHandler)
    {
        javax.xml.bind.ValidationEventHandler r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: javax.xml.bind.ValidationEventHandler;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.ValidationEventHandler eventHandler> = r1;

        return;
    }

    public void setSingleJaxbContext(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean singleJaxbContext> = z0;

        return;
    }

    public void setUseSingleContextForPackages(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean useSingleContextForPackages> = z0;

        return;
    }

    public void setExtraClass(java.lang.Class[])
    {
        java.lang.Class[] r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class[];

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass> = r1;

        return;
    }

    public void init(java.util.List)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.HashSet $r9, $r13, r20;
        org.apache.cxf.jaxrs.model.ResourceTypes $r14;
        java.util.Map $r6, $r7, $r12, $r15, $r17;
        java.lang.String $r8;
        javax.xml.bind.JAXBContext r19;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        java.lang.Class[] $r2, $r10, $r18;
        java.util.Set $r16;
        java.util.List r1, $r11;
        java.lang.Object $r4;
        java.lang.Class r5;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean singleJaxbContext>;

        if $z0 == 0 goto label6;

        r19 = null;

        r20 = null;

        if r1 == null goto label1;

        $r13 = new java.util.HashSet;

        $r14 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.model.ResourceTypes getAllRequestResponseTypes(java.util.List,boolean)>(r1, 1);

        $r15 = virtualinvoke $r14.<org.apache.cxf.jaxrs.model.ResourceTypes: java.util.Map getAllTypes()>();

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>($r16);

        r20 = $r13;

        $r18 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        $r17 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties>;

        r19 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: javax.xml.bind.JAXBContext createJaxbContext(java.util.Set,java.lang.Class[],java.util.Map)>($r13, $r18, $r17);

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        if $r2 == null goto label2;

        $r9 = new java.util.HashSet;

        $r10 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r11);

        r20 = $r9;

        $r12 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties>;

        r19 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: javax.xml.bind.JAXBContext createJaxbContext(java.util.Set,java.lang.Class[],java.util.Map)>($r9, null, $r12);

     label2:
        if r19 == null goto label6;

        $r3 = interfaceinvoke r20.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $z2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean useSingleContextForPackages>;

        if $z2 == 0 goto label4;

        $r7 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts>;

        $r8 = staticinvoke <org.apache.cxf.common.util.PackageUtils: java.lang.String getPackageName(java.lang.Class)>(r5);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r19);

        goto label5;

     label4:
        $r6 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r19);

     label5:
        goto label3;

     label6:
        return;
    }

    public void setContextProperties(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties> = r1;

        return;
    }

    public void setUnmarshallerProperties(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map uProperties> = r1;

        return;
    }

    public void setUnmarshallAsJaxbElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean unmarshalAsJaxbElement> = z0;

        return;
    }

    public void setMarshallAsJaxbElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean marshalAsJaxbElement> = z0;

        return;
    }

    public void setXmlTypeAsJaxbElementOnly(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean xmlTypeAsJaxbElementOnly> = z0;

        return;
    }

    public void setJaxbElementClassNames(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List jaxbElementClassNames> = r1;

        return;
    }

    public void setJaxbElementClassMap(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map jaxbElementClassMap> = r1;

        return;
    }

    protected void reportEmptyContentLength()
    {
        java.lang.Object[] $r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r6;
        java.util.ResourceBundle $r2;
        javax.ws.rs.BadRequestException $r5;
        java.lang.String $r3;
        org.apache.cxf.common.i18n.Message $r0;
        java.util.logging.Logger $r4;

        r6 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $r0 = new org.apache.cxf.common.i18n.Message;

        $r2 = <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.ResourceBundle BUNDLE>;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("EMPTY_BODY", $r2, $r1);

        $r3 = virtualinvoke $r0.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        $r4 = <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.logging.Logger LOG>;

        virtualinvoke $r4.<java.util.logging.Logger: void warning(java.lang.String)>($r3);

        $r5 = new javax.ws.rs.BadRequestException;

        specialinvoke $r5.<javax.ws.rs.BadRequestException: void <init>()>();

        throw $r5;
    }

    protected java.lang.Object getStreamHandlerFromCurrentMessage(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r4;
        org.apache.cxf.message.Message $r0;
        java.lang.Class r1;
        java.lang.Object $r2, $r3;

        r4 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message getCurrentMessage()>();

        if $r0 == null goto label1;

        $r2 = interfaceinvoke $r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(r1);

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2);

        return $r3;

     label1:
        return null;
    }

    protected boolean isXmlRoot(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlRootElement;");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isXmlType(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class r0;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlType;");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.lang.Object convertToJaxbElementIfNeeded(java.lang.Object, java.lang.Class, java.lang.reflect.Type) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map $r3;
        java.lang.String $r4, $r8;
        boolean z0, $z1, $z2, $z4, $z5;
        javax.xml.bind.JAXBElement $r13;
        java.util.List $r1;
        java.lang.reflect.Type r6;
        java.lang.Class r2, $r9, r10;
        java.lang.Object $r5, r7, $r12;
        javax.xml.namespace.QName r11;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r7 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r6 := @parameter2: java.lang.reflect.Type;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List jaxbElementClassNames>;

        if $r1 != null goto label01;

        $r9 = null;

        goto label02;

     label01:
        $r9 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class getJaxbElementClass(java.lang.Class)>(r2);

     label02:
        r10 = $r9;

        if $r9 == null goto label03;

        $z5 = 1;

        $z4 = 1;

        goto label04;

     label03:
        $z5 = 0;

        $z4 = 0;

     label04:
        z0 = $z4;

        if $z5 != 0 goto label05;

        $z2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isXmlRoot(java.lang.Class)>(r2);

        if $z2 == 0 goto label05;

        return r7;

     label05:
        if r10 != null goto label06;

        r10 = r2;

     label06:
        r11 = null;

        $r3 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map jaxbElementClassMap>;

        $r4 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r8 = (java.lang.String) $r5;

        if $r8 == null goto label07;

        r11 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: javax.xml.namespace.QName convertStringToQName(java.lang.String)>($r8);

        goto label09;

     label07:
        $z1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean marshalAsJaxbElement>;

        if $z1 != 0 goto label08;

        if z0 == 0 goto label09;

     label08:
        r11 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.namespace.QName getJaxbQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>(r10, r6, r7, 0);

     label09:
        if r11 == null goto label10;

        $r13 = new javax.xml.bind.JAXBElement;

        $r12 = $r13;

        specialinvoke $r13.<javax.xml.bind.JAXBElement: void <init>(javax.xml.namespace.QName,java.lang.Class,java.lang.Class,java.lang.Object)>(r11, r10, null, r7);

        goto label11;

     label10:
        $r12 = r7;

     label11:
        return $r12;
    }

    protected java.lang.Class getJaxbElementClass(java.lang.Class)
    {
        java.util.List $r2;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r1;
        java.lang.Class r0, $r4, $r5;
        java.lang.String $r3;
        boolean $z0;

        r1 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljava/lang/Object;" goto label1;

        return null;

     label1:
        $r2 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List jaxbElementClassNames>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r5 = virtualinvoke r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class getJaxbElementClass(java.lang.Class)>($r4);

        return $r5;
    }

    public void setCollectionWrapperName(java.lang.String)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String collectionWrapperName> = r1;

        return;
    }

    public void setCollectionWrapperMap(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map collectionWrapperMap> = r1;

        return;
    }

    protected void setContext(org.apache.cxf.jaxrs.ext.MessageContext)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        org.apache.cxf.jaxrs.ext.MessageContext r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.MessageContext;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext mc> = r1;

        return;
    }

    public boolean isWriteable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.'annotation'.Annotation[] r2;
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r1;
        java.lang.Class $r3, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r5 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r5);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r1);

        r5 = $r3;

        if $r3 != null goto label1;

        return 0;

     label1:
        $z1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean marshalAsJaxbElement>;

        if $z1 == 0 goto label2;

        $z3 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean xmlTypeAsJaxbElementOnly>;

        if $z3 == 0 goto label3;

        $z4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isXmlType(java.lang.Class)>(r5);

        if $z4 != 0 goto label3;

     label2:
        $z2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isSupported(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(r5, r1, r2);

        if $z2 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;
    }

    public void writeTo(java.lang.Object, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException, javax.ws.rs.WebApplicationException
    {
        java.io.OutputStream r7;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.lang.'annotation'.Annotation[] r4;
        javax.ws.rs.core.MultivaluedMap r6;
        javax.ws.rs.core.MediaType r5;
        java.lang.reflect.Type r3;
        java.lang.Object r0;
        java.lang.Class $r1;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.reflect.Type;

        r4 := @parameter2: java.lang.'annotation'.Annotation[];

        r5 := @parameter3: javax.ws.rs.core.MediaType;

        r6 := @parameter4: javax.ws.rs.core.MultivaluedMap;

        r7 := @parameter5: java.io.OutputStream;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void writeTo(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)>(r0, $r1, r3, r4, r5, r6, r7);

        return;
    }

    protected javax.xml.bind.JAXBContext getCollectionContext(java.lang.Class) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r13;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.Object[] $r7;
        java.util.Map $r8;
        int $i0;
        javax.xml.bind.JAXBContext $r10;
        boolean $z0;
        java.util.Set $r1, $r3, $r4, $r5, $r11, $r12;
        java.lang.Class[] $r6, $r9;
        java.lang.Class r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r11 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/apache/cxf/jaxrs/provider/AbstractJAXBProvider$CollectionWrapper;");

        $r12 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label2:
        $r5 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        $r4 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Set collectionContextClasses>;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.Class)[$i0];

        $r7 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r9 = (java.lang.Class[]) $r7;

        $r8 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties>;

        $r10 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map)>($r9, $r8);

        exitmonitor $r1;

     label3:
        return $r10;

     label4:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r13;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected javax.xml.namespace.QName getCollectionWrapperQName(java.lang.Class, java.lang.reflect.Type, java.lang.Object, boolean) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.reflect.Type r4;
        java.lang.Class r1;
        java.lang.Object r5;
        java.lang.String $r2;
        javax.xml.namespace.QName $r3, $r6;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.reflect.Type;

        r5 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r2 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getCollectionWrapperName(java.lang.Class)>(r1);

        if $r2 != null goto label1;

        $r6 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.namespace.QName getJaxbQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>(r1, r4, r5, z0);

        return $r6;

     label1:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: javax.xml.namespace.QName convertStringToQName(java.lang.String)>($r2);

        return $r3;
    }

    private java.lang.String getCollectionWrapperName(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map $r2, $r4;
        java.lang.Class r3;
        java.lang.Object $r6;
        java.lang.String $r1, $r5, $r7, $r8;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r3 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String collectionWrapperName>;

        if $r1 == null goto label1;

        $r8 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String collectionWrapperName>;

        return $r8;

     label1:
        $r2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map collectionWrapperMap>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map collectionWrapperMap>;

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.String) $r6;

        return $r7;

     label2:
        return null;
    }

    protected javax.xml.namespace.QName getJaxbQName(java.lang.Class, java.lang.reflect.Type, java.lang.Object, boolean) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r3;
        javax.xml.bind.'annotation'.XmlType r8;
        java.lang.String $r5, $r6, $r9, $r10, $r12, $r13;
        boolean $z0, z1;
        javax.xml.bind.JAXBElement $r16;
        javax.xml.bind.'annotation'.XmlRootElement r2;
        java.lang.reflect.Type r17;
        java.lang.'annotation'.Annotation $r1, $r7;
        java.lang.Class r0;
        java.lang.Object r15;
        javax.xml.namespace.QName $r4, $r11, $r14, $r18;

        r3 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        r17 := @parameter1: java.lang.reflect.Type;

        r15 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        if r0 != class "Ljavax/xml/bind/JAXBElement;" goto label3;

        if r15 == null goto label1;

        $r16 = (javax.xml.bind.JAXBElement) r15;

        $r18 = virtualinvoke $r16.<javax.xml.bind.JAXBElement: javax.xml.namespace.QName getName()>();

        goto label2;

     label1:
        $r18 = null;

     label2:
        return $r18;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlRootElement;");

        r2 = (javax.xml.bind.'annotation'.XmlRootElement) $r1;

        if r2 == null goto label4;

        $r12 = interfaceinvoke r2.<javax.xml.bind.'annotation'.XmlRootElement: java.lang.String namespace()>();

        $r13 = interfaceinvoke r2.<javax.xml.bind.'annotation'.XmlRootElement: java.lang.String name()>();

        $r14 = specialinvoke r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.namespace.QName getQNameFromNamespaceAndName(java.lang.String,java.lang.String,java.lang.Class,boolean)>($r12, $r13, r0, z1);

        return $r14;

     label4:
        $z0 = virtualinvoke r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isXmlType(java.lang.Class)>(r0);

        if $z0 == 0 goto label5;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlType;");

        r8 = (javax.xml.bind.'annotation'.XmlType) $r7;

        $r9 = interfaceinvoke r8.<javax.xml.bind.'annotation'.XmlType: java.lang.String namespace()>();

        $r10 = interfaceinvoke r8.<javax.xml.bind.'annotation'.XmlType: java.lang.String name()>();

        $r11 = specialinvoke r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.namespace.QName getQNameFromNamespaceAndName(java.lang.String,java.lang.String,java.lang.Class,boolean)>($r9, $r10, r0, z1);

        return $r11;

     label5:
        $r4 = new javax.xml.namespace.QName;

        $r5 = specialinvoke r3.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getPackageNamespace(java.lang.Class)>(r0);

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        return $r4;
    }

    private javax.xml.namespace.QName getQNameFromNamespaceAndName(java.lang.String, java.lang.String, java.lang.Class, boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.Class r2;
        java.lang.String r1, $r3, $r4, r5, $r6, $r7, r9;
        javax.xml.namespace.QName $r8;
        boolean z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        z0 := @parameter3: boolean;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getLocalName(java.lang.String,java.lang.String,boolean)>(r1, $r3, z0);

        $r6 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getNamespace(java.lang.String)>(r5);

        r9 = $r6;

        $r7 = "";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label1;

        r9 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getPackageNamespace(java.lang.Class)>(r2);

     label1:
        $r8 = new javax.xml.namespace.QName;

        specialinvoke $r8.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r9, $r4);

        return $r8;
    }

    private java.lang.String getLocalName(java.lang.String, java.lang.String, boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r11;
        int $i0;
        java.lang.String $r0, r4, $r6, $r7, $r9, r12;
        boolean $z0, z1;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r8, $r10;

        r11 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r12 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r0 = "##default";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r12 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>();

     label2:
        if z1 == 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(115);

        r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r12;
    }

    private java.lang.String getPackageNamespace(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.lang.Class r0;
        java.lang.String $r1, $r3;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.cxf.common.jaxb.JAXBUtils: java.lang.String getPackageNamespace(java.lang.Class)>(r0);

        if $r1 == null goto label1;

        $r3 = specialinvoke r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getNamespace(java.lang.String)>($r1);

        goto label2;

     label1:
        $r3 = "";

     label2:
        return $r3;
    }

    private java.lang.String getNamespace(java.lang.String)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.String;

        $r1 = "##default";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return "";

     label1:
        return r0;
    }

    public boolean isReadable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.'annotation'.Annotation[] r2;
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r1;
        java.lang.Class $r3, r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r5 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r5);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r1);

        r5 = $r3;

        if $r3 != null goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean canBeReadAsJaxbElement(java.lang.Class)>(r5);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isSupported(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(r5, r1, r2);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    protected boolean canBeReadAsJaxbElement(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean unmarshalAsJaxbElement>;

        if $z0 == 0 goto label1;

        if r1 == class "Ljavax/ws/rs/core/Response;" goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setSchemas(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setSchemaLocations(java.util.List)>(r1);

        return;
    }

    public void setSchemaLocations(java.util.List)
    {
        org.apache.cxf.Bus $r3;
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.String $r2;
        javax.xml.validation.Schema $r4;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String catalogLocation>;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.Bus getBus()>();

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.schemas.SchemaHandler: javax.xml.validation.Schema createSchema(java.util.List,java.lang.String,org.apache.cxf.Bus)>(r1, $r2, $r3);

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema schema> = $r4;

        return;
    }

    public void setCatalogLocation(java.lang.String)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String catalogLocation> = r1;

        return;
    }

    public void setSchemaHandler(org.apache.cxf.jaxrs.utils.schemas.SchemaHandler)
    {
        org.apache.cxf.jaxrs.utils.schemas.SchemaHandler r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.validation.Schema $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: org.apache.cxf.jaxrs.utils.schemas.SchemaHandler;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.utils.schemas.SchemaHandler: javax.xml.validation.Schema getSchema()>();

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setSchema(javax.xml.validation.Schema)>($r2);

        return;
    }

    public void setSchemaHandlers(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map schemaHandlers> = r1;

        return;
    }

    protected void setSchema(javax.xml.validation.Schema)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.validation.Schema r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: javax.xml.validation.Schema;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema schema> = r1;

        return;
    }

    public long getSize(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r5;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.reflect.Type r3;
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.'annotation'.Annotation[] r4;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.Type;

        r4 := @parameter3: java.lang.'annotation'.Annotation[];

        r5 := @parameter4: javax.ws.rs.core.MediaType;

        return -1L;
    }

    protected org.apache.cxf.jaxrs.ext.MessageContext getContext()
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        org.apache.cxf.jaxrs.ext.MessageContext $r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext mc>;

        return $r1;
    }

    public javax.xml.bind.JAXBContext getJAXBContext(java.lang.Class, java.lang.reflect.Type) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r8;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.ws.rs.ext.ContextResolver r9;
        org.apache.cxf.jaxrs.ext.MessageContext $r1, $r5;
        java.util.Map $r11, $r12;
        javax.xml.bind.JAXBContext $r4, r10, $r14, $r15;
        java.lang.reflect.Type r3;
        java.lang.Class r2;
        java.lang.Object $r6, $r7, $r13;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext mc>;

        if $r1 == null goto label01;

        $r5 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext mc>;

        $r6 = interfaceinvoke $r5.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object getResolver(java.lang.Class,java.lang.Class)>(class "Ljavax/ws/rs/ext/ContextResolver;", class "Ljavax/xml/bind/JAXBContext;");

        r9 = (javax.ws.rs.ext.ContextResolver) $r6;

        if r9 == null goto label01;

        $r7 = interfaceinvoke r9.<javax.ws.rs.ext.ContextResolver: java.lang.Object getContext(java.lang.Class)>(r2);

        r10 = (javax.xml.bind.JAXBContext) $r7;

        if r10 == null goto label01;

        return r10;

     label01:
        $r11 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        entermonitor $r11;

     label02:
        $r12 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r14 = (javax.xml.bind.JAXBContext) $r13;

        if $r14 == null goto label04;

        exitmonitor $r11;

     label03:
        return $r14;

     label04:
        exitmonitor $r11;

     label05:
        goto label08;

     label06:
        $r8 := @caughtexception;

        exitmonitor $r11;

     label07:
        throw $r8;

     label08:
        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getPackageContext(java.lang.Class,java.lang.reflect.Type)>(r2, r3);

        if $r4 == null goto label09;

        $r15 = $r4;

        goto label10;

     label09:
        $r15 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getClassContext(java.lang.Class,java.lang.reflect.Type)>(r2, r3);

     label10:
        return $r15;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public javax.xml.bind.JAXBContext getClassContext(java.lang.Class) throws javax.xml.bind.JAXBException
    {
        java.lang.Class r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.bind.JAXBContext $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getClassContext(java.lang.Class,java.lang.reflect.Type)>(r1, r1);

        return $r2;
    }

    protected javax.xml.bind.JAXBContext getClassContext(java.lang.Class, java.lang.reflect.Type) throws javax.xml.bind.JAXBException
    {
        java.lang.Throwable $r13;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map $r1, $r3, $r7, $r9;
        int $i0, $i1, $i2;
        javax.xml.bind.JAXBContext $r8, r15;
        java.lang.Class[] $r5, $r6, $r10, $r11, $r12, r16;
        java.lang.reflect.Type r14;
        java.lang.Class r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r2 := @parameter0: java.lang.Class;

        r14 := @parameter1: java.lang.reflect.Type;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r15 = (javax.xml.bind.JAXBContext) $r4;

        if r15 != null goto label4;

        $r5 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        if $r5 == null goto label2;

        $r10 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        $i0 = lengthof $r10;

        $i1 = $i0 + 1;

        r16 = newarray (java.lang.Class)[$i1];

        r16[0] = r2;

        $r12 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        $r11 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r16, 1, $i2);

        goto label3;

     label2:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = r2;

        r16 = $r6;

     label3:
        $r7 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties>;

        $r8 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[],java.util.Map)>(r16, $r7);

        r15 = $r8;

        $r9 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

     label4:
        exitmonitor $r1;

     label5:
        return r15;

     label6:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r13;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public javax.xml.bind.JAXBContext getPackageContext(java.lang.Class)
    {
        java.lang.Class r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.bind.JAXBContext $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getPackageContext(java.lang.Class,java.lang.reflect.Type)>(r1, r1);

        return $r2;
    }

    protected javax.xml.bind.JAXBContext getPackageContext(java.lang.Class, java.lang.reflect.Type)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r1;
        java.util.Map $r2, $r4, $r9, $r11;
        boolean $z0, $z1;
        java.util.logging.Logger $r20;
        javax.xml.bind.JAXBException $r18;
        java.lang.reflect.Type r25;
        java.lang.StringBuilder $r12, $r16, $r19, $r21, $r23;
        java.lang.ClassLoader $r6, $r8;
        java.lang.Throwable $r17;
        int i0, i1;
        java.lang.String $r3, $r15, $r22, $r24, r27;
        javax.xml.bind.JAXBContext $r10, r26;
        java.lang.Class[] $r7, r13;
        java.lang.Class r0, r14;
        java.lang.Object $r5;

        r1 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        r25 := @parameter1: java.lang.reflect.Type;

        if r0 == null goto label01;

        if r0 != class "Ljavax/xml/bind/JAXBElement;" goto label02;

     label01:
        return null;

     label02:
        $r2 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts>;

        entermonitor $r2;

     label03:
        $r3 = staticinvoke <org.apache.cxf.common.util.PackageUtils: java.lang.String getPackageName(java.lang.Class)>(r0);

        $r4 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r26 = (javax.xml.bind.JAXBContext) $r5;

        if r26 != null goto label12;

     label04:
        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r6 == null goto label09;

        $z0 = virtualinvoke r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean objectFactoryOrIndexAvailable(java.lang.Class)>(r0);

        if $z0 == 0 goto label09;

        r27 = $r3;

        $r7 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        if $r7 == null goto label08;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r13 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.Class[] extraClass>;

        i0 = lengthof r13;

        i1 = 0;

     label05:
        if i1 >= i0 goto label07;

        r14 = r13[i1];

        $r15 = staticinvoke <org.apache.cxf.common.util.PackageUtils: java.lang.String getPackageName(java.lang.Class)>(r14);

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label06;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        r27 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r9 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map cProperties>;

        $r10 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.String,java.lang.ClassLoader,java.util.Map)>(r27, $r8, $r9);

        r26 = $r10;

        $r11 = r1.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r10);

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        $r20 = <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.logging.Logger LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating a JAXBContext using ObjectFactory : ");

        $r22 = virtualinvoke $r18.<javax.xml.bind.JAXBException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void fine(java.lang.String)>($r24);

        exitmonitor $r2;

     label11:
        return null;

     label12:
        exitmonitor $r2;

     label13:
        return r26;

     label14:
        $r17 := @caughtexception;

        exitmonitor $r2;

     label15:
        throw $r17;

        catch javax.xml.bind.JAXBException from label04 to label09 with label10;
        catch java.lang.Throwable from label03 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected boolean isSupported(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.'annotation'.Annotation[] r5;
        java.util.Map $r1, $r7;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r6;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.reflect.Type r4;
        java.lang.Class r2, $r3;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r2 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.reflect.Type;

        r5 := @parameter2: java.lang.'annotation'.Annotation[];

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map jaxbElementClassMap>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map jaxbElementClassMap>;

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $z5 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z5 != 0 goto label2;

     label1:
        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isSkipJaxbChecks()>();

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isXmlRoot(java.lang.Class)>(r2);

        if $z1 != 0 goto label5;

        $r3 = class "Ljavax/xml/bind/JAXBElement;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 != 0 goto label5;

        $z3 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean objectFactoryOrIndexAvailable(java.lang.Class)>(r2);

        if $z3 != 0 goto label5;

        if r2 == r4 goto label4;

        $z4 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean objectFactoryForType(java.lang.reflect.Type)>(r4);

        if $z4 != 0 goto label5;

     label4:
        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getAdapter(java.lang.Class,java.lang.'annotation'.Annotation[])>(r2, r5);

        if $r6 == null goto label6;

     label5:
        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        return $z6;
    }

    protected boolean objectFactoryOrIndexAvailable(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r3;
        java.net.URL $r1, $r2;
        java.lang.Class r0;
        boolean $z0;

        r3 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.net.URL getResource(java.lang.String)>("ObjectFactory.class");

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.net.URL getResource(java.lang.String)>("jaxb.index");

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean objectFactoryForType(java.lang.reflect.Type)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.reflect.Type r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.reflect.Type;

        $r2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r1);

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean objectFactoryOrIndexAvailable(java.lang.Class)>($r2);

        return $z0;
    }

    protected javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class, java.lang.reflect.Type) throws javax.xml.bind.JAXBException
    {
        javax.xml.bind.Unmarshaller $r3;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.reflect.Type r2;
        java.lang.Class r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class,java.lang.reflect.Type,boolean)>(r1, r2, 0);

        return $r3;
    }

    protected javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class, java.lang.reflect.Type, boolean) throws javax.xml.bind.JAXBException
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.validation.Schema $r4;
        java.util.Map $r7, $r8;
        javax.xml.bind.ValidationEventHandler $r5, $r17;
        java.lang.String $r14;
        javax.xml.bind.JAXBContext $r18;
        boolean z0, $z1;
        javax.xml.bind.Unmarshaller $r3;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        javax.xml.bind.Unmarshaller$Listener $r6, $r16;
        java.util.Set $r9;
        java.lang.reflect.Type r2;
        java.lang.Class r1;
        java.lang.Object $r11, $r13, $r15;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r18 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getCollectionContext(java.lang.Class)>(r1);

        goto label2;

     label1:
        $r18 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getJAXBContext(java.lang.Class,java.lang.reflect.Type)>(r1, r2);

     label2:
        $r3 = virtualinvoke $r18.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema getSchema(java.lang.Class)>(r1);

        if $r4 == null goto label3;

        interfaceinvoke $r3.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>($r4);

     label3:
        $r5 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.ValidationEventHandler eventHandler>;

        if $r5 == null goto label4;

        $r17 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.ValidationEventHandler eventHandler>;

        interfaceinvoke $r3.<javax.xml.bind.Unmarshaller: void setEventHandler(javax.xml.bind.ValidationEventHandler)>($r17);

     label4:
        $r6 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Unmarshaller$Listener unmarshallerListener>;

        if $r6 == null goto label5;

        $r16 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Unmarshaller$Listener unmarshallerListener>;

        interfaceinvoke $r3.<javax.xml.bind.Unmarshaller: void setListener(javax.xml.bind.Unmarshaller$Listener)>($r16);

     label5:
        $r7 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map uProperties>;

        if $r7 == null goto label7;

        $r8 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map uProperties>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r3.<javax.xml.bind.Unmarshaller: void setProperty(java.lang.String,java.lang.Object)>($r14, $r15);

        goto label6;

     label7:
        return $r3;
    }

    protected javax.xml.bind.Marshaller createMarshaller(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.String) throws javax.xml.bind.JAXBException
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        javax.xml.bind.Marshaller $r5;
        javax.xml.bind.JAXBElement $r10;
        javax.xml.bind.Marshaller$Listener $r7, $r9;
        java.lang.reflect.Type r3;
        java.lang.Class r0, $r1, $r11;
        java.lang.Object r8;
        java.lang.String r6;
        javax.xml.bind.JAXBContext $r4;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r8 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.reflect.Type;

        r6 := @parameter3: java.lang.String;

        $r1 = class "Ljavax/xml/bind/JAXBElement;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r10 = (javax.xml.bind.JAXBElement) r8;

        $r11 = virtualinvoke $r10.<javax.xml.bind.JAXBElement: java.lang.Class getDeclaredType()>();

        goto label2;

     label1:
        $r11 = r0;

     label2:
        $r4 = virtualinvoke r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.JAXBContext getJAXBContext(java.lang.Class,java.lang.reflect.Type)>($r11, r3);

        $r5 = virtualinvoke $r4.<javax.xml.bind.JAXBContext: javax.xml.bind.Marshaller createMarshaller()>();

        if r6 == null goto label3;

        interfaceinvoke $r5.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("jaxb.encoding", r6);

     label3:
        $r7 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Marshaller$Listener marshallerListener>;

        if $r7 == null goto label4;

        $r9 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Marshaller$Listener marshallerListener>;

        interfaceinvoke $r5.<javax.xml.bind.Marshaller: void setListener(javax.xml.bind.Marshaller$Listener)>($r9);

     label4:
        virtualinvoke r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void validateObjectIfNeeded(javax.xml.bind.Marshaller,java.lang.Class,java.lang.Object)>($r5, r0, r8);

        return $r5;
    }

    protected void validateObjectIfNeeded(javax.xml.bind.Marshaller, java.lang.Class, java.lang.Object) throws javax.xml.bind.JAXBException
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.bind.Marshaller r3;
        javax.xml.validation.Schema $r2;
        org.xml.sax.helpers.DefaultHandler $r6;
        javax.xml.bind.ValidationEventHandler $r4;
        java.lang.Class r1;
        java.lang.Object r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r3 := @parameter0: javax.xml.bind.Marshaller;

        r1 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.Object;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean validateOutput>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema getSchema(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.ValidationEventHandler eventHandler>;

        interfaceinvoke r3.<javax.xml.bind.Marshaller: void setEventHandler(javax.xml.bind.ValidationEventHandler)>($r4);

        interfaceinvoke r3.<javax.xml.bind.Marshaller: void setSchema(javax.xml.validation.Schema)>($r2);

        $z1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean validateBeforeWrite>;

        if $z1 == 0 goto label1;

        $r6 = new org.xml.sax.helpers.DefaultHandler;

        specialinvoke $r6.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        interfaceinvoke r3.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,org.xml.sax.ContentHandler)>(r5, $r6);

        interfaceinvoke r3.<javax.xml.bind.Marshaller: void setSchema(javax.xml.validation.Schema)>(null);

     label1:
        return;
    }

    protected java.lang.Class getActualType(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r6;
        java.lang.'annotation'.Annotation[] r2;
        java.lang.reflect.Type r5;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r3;
        java.lang.Class r0, $r1, $r4, r7;
        boolean $z0;

        r6 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: java.lang.'annotation'.Annotation[];

        $r1 = class "Ljavax/xml/bind/JAXBElement;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        r7 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r5);

        goto label2;

     label1:
        r7 = r0;

     label2:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getAdapter(java.lang.Class,java.lang.'annotation'.Annotation[])>(r7, r2);

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Class getTypeFromAdapter(javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,java.lang.Class,boolean)>($r3, r7, 0);

        return $r4;
    }

    protected static java.lang.Object checkAdapter(java.lang.Object, java.lang.Class, java.lang.'annotation'.Annotation[], boolean)
    {
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r2;
        java.lang.Class r0;
        java.lang.Object r3, $r4;
        java.lang.'annotation'.Annotation[] r1;
        boolean z0;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.'annotation'.Annotation[];

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getAdapter(java.lang.Class,java.lang.'annotation'.Annotation[])>(r0, r1);

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Object useAdapter(java.lang.Object,javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,boolean)>(r3, $r2, z0);

        return $r4;
    }

    protected javax.xml.validation.Schema getSchema()
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.validation.Schema $r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema getSchema(java.lang.Class)>(null);

        return $r1;
    }

    protected javax.xml.validation.Schema getSchema(java.lang.Class)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        org.apache.cxf.jaxrs.utils.schemas.SchemaHandler r7;
        javax.xml.validation.Schema $r1, $r2, $r8, $r10;
        java.util.Map $r4, $r9;
        java.lang.Class r3;
        java.lang.Object $r6;
        java.lang.String $r5;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r3 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema schema>;

        if $r1 != null goto label1;

        $r9 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map schemaHandlers>;

        if $r9 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema schema>;

        if $r2 == null goto label2;

        $r8 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.validation.Schema schema>;

        return $r8;

     label2:
        $r4 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map schemaHandlers>;

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (org.apache.cxf.jaxrs.utils.schemas.SchemaHandler) $r6;

        if r7 == null goto label3;

        $r10 = virtualinvoke r7.<org.apache.cxf.jaxrs.utils.schemas.SchemaHandler: javax.xml.validation.Schema getSchema()>();

        goto label4;

     label3:
        $r10 = null;

     label4:
        return $r10;
    }

    public void clearContexts()
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map classContexts>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map packageContexts>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    protected static java.lang.String getStackTrace(java.lang.Exception)
    {
        java.io.PrintWriter $r2;
        java.io.StringWriter $r0;
        java.lang.String $r3;
        java.lang.Exception r1;

        r1 := @parameter0: java.lang.Exception;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r1.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>($r2);

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    protected static java.lang.StringBuilder handleExceptionStart(java.lang.Exception)
    {
        java.lang.Throwable $r5, $r6, $r8;
        java.util.logging.Logger $r1;
        java.lang.Exception r0;
        java.lang.StringBuilder $r3, $r10, $r12;
        java.lang.String $r2, $r4, $r7, $r9, $r11;

        r0 := @parameter0: java.lang.Exception;

        $r1 = <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.logging.Logger LOG>;

        $r2 = staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String getStackTrace(java.lang.Exception)>(r0);

        virtualinvoke $r1.<java.util.logging.Logger: void warning(java.lang.String)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Exception: java.lang.String getMessage()>();

        if $r4 == null goto label1;

        $r11 = virtualinvoke r0.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

     label1:
        $r5 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r7 == null goto label2;

        $r8 = virtualinvoke r0.<java.lang.Exception: java.lang.Throwable getCause()>();

        $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

     label2:
        return $r3;
    }

    protected static void handleExceptionEnd(java.lang.Throwable, java.lang.String, boolean)
    {
        java.lang.Throwable r5;
        javax.ws.rs.InternalServerErrorException $r9;
        javax.ws.rs.core.Response $r4;
        javax.ws.rs.core.Response$ResponseBuilder $r0, $r1, $r3;
        javax.ws.rs.core.Response$Status $r6;
        javax.ws.rs.WebApplicationException $r7;
        javax.ws.rs.BadRequestException $r8;
        java.lang.String r2;
        boolean z0;

        r5 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r6 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status BAD_REQUEST>;

        goto label2;

     label1:
        $r6 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status INTERNAL_SERVER_ERROR>;

     label2:
        $r0 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r6);

        $r1 = virtualinvoke $r0.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder type(java.lang.String)>("text/plain");

        $r3 = virtualinvoke $r1.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r3.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        if z0 == 0 goto label3;

        $r8 = new javax.ws.rs.BadRequestException;

        $r7 = $r8;

        specialinvoke $r8.<javax.ws.rs.BadRequestException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r4, r5);

        goto label4;

     label3:
        $r9 = new javax.ws.rs.InternalServerErrorException;

        $r7 = $r9;

        specialinvoke $r9.<javax.ws.rs.InternalServerErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r4, r5);

     label4:
        throw $r7;
    }

    protected void handleJAXBException(javax.xml.bind.JAXBException, boolean)
    {
        java.lang.Throwable $r2, $r3, $r4, $r6, $r10, $r11;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r9;
        java.lang.Object[] $r14;
        org.apache.cxf.common.i18n.Message $r12;
        java.util.ResourceBundle $r13;
        java.lang.String $r5, $r7, $r15, $r16;
        boolean z0;
        javax.xml.bind.JAXBException r0;
        java.lang.StringBuilder $r1, $r8;

        r9 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: javax.xml.bind.JAXBException;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.StringBuilder handleExceptionStart(java.lang.Exception)>(r0);

        $r2 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getLinkedException()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getLinkedException()>();

        $r5 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getLinkedException()>();

        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

     label1:
        $r10 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getLinkedException()>();

        if $r10 == null goto label2;

        $r11 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getLinkedException()>();

        goto label4;

     label2:
        $r3 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getCause()>();

        if $r3 == null goto label3;

        $r11 = virtualinvoke r0.<javax.xml.bind.JAXBException: java.lang.Throwable getCause()>();

        goto label4;

     label3:
        $r11 = r0;

     label4:
        $r12 = new org.apache.cxf.common.i18n.Message;

        $r13 = <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.ResourceBundle BUNDLE>;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14[0] = $r15;

        specialinvoke $r12.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("JAXB_EXCEPTION", $r13, $r14);

        $r16 = virtualinvoke $r12.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void handleExceptionEnd(java.lang.Throwable,java.lang.String,boolean)>($r11, $r16, z0);

        return;
    }

    protected void handleXMLStreamException(javax.xml.stream.XMLStreamException, boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r3;
        javax.xml.stream.XMLStreamException r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean z0;

        r3 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: javax.xml.stream.XMLStreamException;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.StringBuilder handleExceptionStart(java.lang.Exception)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void handleExceptionEnd(java.lang.Throwable,java.lang.String,boolean)>(r0, $r2, z0);

        return;
    }

    public void setOutTransformElements(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map outElementsMap> = r1;

        return;
    }

    public void setInAppendElements(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map inAppendMap> = r1;

        return;
    }

    public void setInTransformElements(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map inElementsMap> = r1;

        return;
    }

    public void setOutAppendElements(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map outAppendMap> = r1;

        return;
    }

    public void setOutDropElements(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List outDropElements> = r1;

        return;
    }

    public void setInDropElements(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List inDropElements> = r1;

        return;
    }

    public void setAttributesToElements(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean attributesToElements> = z0;

        return;
    }

    public void setSkipJaxbChecks(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean skipJaxbChecks> = z0;

        return;
    }

    public boolean isSkipJaxbChecks()
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean skipJaxbChecks>;

        return $z0;
    }

    protected javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter, java.io.OutputStream, boolean)
    {
        java.io.OutputStream r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        java.util.List $r6;
        java.util.Map $r3, $r4;
        javax.xml.stream.XMLStreamWriter r0, $r5;
        boolean z0, $z1;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r1 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        $r4 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map outElementsMap>;

        if z0 == 0 goto label1;

        $r6 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List outDropElements>;

        goto label2;

     label1:
        $r6 = null;

     label2:
        $r3 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map outAppendMap>;

        $z1 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean attributesToElements>;

        $r5 = staticinvoke <org.apache.cxf.staxutils.transform.TransformUtils: javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter,java.io.OutputStream,java.util.Map,java.util.List,java.util.Map,boolean,java.lang.String)>(r0, r1, $r4, $r6, $r3, $z1, null);

        return $r5;
    }

    protected javax.xml.stream.XMLStreamReader createTransformReaderIfNeeded(javax.xml.stream.XMLStreamReader, java.io.InputStream)
    {
        java.util.List $r5;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r2;
        javax.xml.stream.XMLStreamReader r0, $r6;
        java.util.Map $r3, $r4;
        java.io.InputStream r1;

        r2 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        r1 := @parameter1: java.io.InputStream;

        $r5 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.List inDropElements>;

        $r4 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map inElementsMap>;

        $r3 = r2.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.Map inAppendMap>;

        $r6 = staticinvoke <org.apache.cxf.staxutils.transform.TransformUtils: javax.xml.stream.XMLStreamReader createTransformReaderIfNeeded(javax.xml.stream.XMLStreamReader,java.io.InputStream,java.util.List,java.util.Map,java.util.Map,boolean)>(r0, r1, $r5, $r4, $r3, 1);

        return $r6;
    }

    protected javax.xml.stream.XMLStreamReader createDepthReaderIfNeeded(javax.xml.stream.XMLStreamReader, java.io.InputStream)
    {
        org.apache.cxf.staxutils.DocumentDepthProperties $r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.stream.XMLStreamReader $r3, r5;
        org.apache.cxf.staxutils.DepthRestrictingStreamReader $r4;
        boolean $z0;
        java.io.InputStream r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r5 := @parameter0: javax.xml.stream.XMLStreamReader;

        r2 := @parameter1: java.io.InputStream;

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.staxutils.DocumentDepthProperties getDepthProperties()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.apache.cxf.staxutils.DocumentDepthProperties: boolean isEffective()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.staxutils.transform.TransformUtils: javax.xml.stream.XMLStreamReader createNewReaderIfNeeded(javax.xml.stream.XMLStreamReader,java.io.InputStream)>(r5, r2);

        $r4 = new org.apache.cxf.staxutils.DepthRestrictingStreamReader;

        specialinvoke $r4.<org.apache.cxf.staxutils.DepthRestrictingStreamReader: void <init>(javax.xml.stream.XMLStreamReader,org.apache.cxf.staxutils.DocumentDepthProperties)>($r3, $r1);

        return $r4;

     label1:
        return r5;
    }

    protected org.apache.cxf.staxutils.DocumentDepthProperties getDepthProperties()
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.Integer $r13, $r14, $r15;
        org.apache.cxf.jaxrs.ext.MessageContext $r2, $r3, $r6, $r9;
        int i0, $i1, i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String r5, r8, r11;
        javax.ws.rs.InternalServerErrorException $r20;
        java.lang.Exception $r17;
        org.apache.cxf.staxutils.DocumentDepthProperties $r1, $r16, $r19;
        java.lang.Object $r4, $r7, $r10;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.staxutils.DocumentDepthProperties depthProperties>;

        if $r1 == null goto label01;

        $r16 = r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.staxutils.DocumentDepthProperties depthProperties>;

        return $r16;

     label01:
        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        if $r2 == null goto label11;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        $r4 = interfaceinvoke $r3.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object getContextualProperty(java.lang.Object)>("depthTotalElementCountThreshold");

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        $r7 = interfaceinvoke $r6.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object getContextualProperty(java.lang.Object)>("depthInnerElementCountThreshold");

        r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        $r10 = interfaceinvoke $r9.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object getContextualProperty(java.lang.Object)>("depthInnerElementLevelThreshold");

        r11 = (java.lang.String) $r10;

        if r5 != null goto label02;

        if r8 != null goto label02;

        if r11 == null goto label11;

     label02:
        if r5 == null goto label03;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r5);

        $i1 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        goto label04;

     label03:
        $i6 = (int) -1;

        $i1 = $i6;

     label04:
        i2 = $i1;

        if r11 == null goto label05;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r11);

        $i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        goto label06;

     label05:
        $i8 = (int) -1;

        $i3 = $i8;

     label06:
        i0 = $i3;

        if r8 == null goto label07;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r8);

        $i4 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        goto label08;

     label07:
        $i10 = (int) -1;

        $i4 = $i10;

     label08:
        $r19 = new org.apache.cxf.staxutils.DocumentDepthProperties;

        specialinvoke $r19.<org.apache.cxf.staxutils.DocumentDepthProperties: void <init>(int,int,int)>(i2, i0, $i4);

     label09:
        return $r19;

     label10:
        $r17 := @caughtexception;

        $r20 = new javax.ws.rs.InternalServerErrorException;

        specialinvoke $r20.<javax.ws.rs.InternalServerErrorException: void <init>(java.lang.Throwable)>($r17);

        throw $r20;

     label11:
        return null;

        catch java.lang.Exception from label02 to label09 with label10;
    }

    public void setValidateBeforeWrite(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean validateBeforeWrite> = z0;

        return;
    }

    public void setValidateOutput(boolean)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean validateOutput> = z0;

        return;
    }

    public void setDepthProperties(org.apache.cxf.staxutils.DocumentDepthProperties)
    {
        org.apache.cxf.staxutils.DocumentDepthProperties r1;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: org.apache.cxf.staxutils.DocumentDepthProperties;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: org.apache.cxf.staxutils.DocumentDepthProperties depthProperties> = r1;

        return;
    }

    public void setUnmarshallerListener(javax.xml.bind.Unmarshaller$Listener)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.bind.Unmarshaller$Listener r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: javax.xml.bind.Unmarshaller$Listener;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Unmarshaller$Listener unmarshallerListener> = r1;

        return;
    }

    public void setMarshallerListener(javax.xml.bind.Marshaller$Listener)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        javax.xml.bind.Marshaller$Listener r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: javax.xml.bind.Marshaller$Listener;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: javax.xml.bind.Marshaller$Listener marshallerListener> = r1;

        return;
    }

    public void setNamespaceMapperPropertyName(java.lang.String)
    {
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.AbstractJAXBProvider;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String namespaceMapperPropertyName> = r1;

        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;
        java.util.logging.Logger $r1;

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String JAXB_DEFAULT_NAME> = "##default";

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String JAXB_DEFAULT_NAMESPACE> = "##default";

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String NS_MAPPER_PROPERTY_RI_INT> = "com.sun.xml.internal.bind.namespacePrefixMapper";

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.lang.String NS_MAPPER_PROPERTY_RI> = "com.sun.xml.bind.namespacePrefixMapper";

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/provider/AbstractJAXBProvider;");

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.ResourceBundle BUNDLE> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/provider/AbstractJAXBProvider;");

        <org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: java.util.logging.Logger LOG> = $r1;

        return;
    }
}
