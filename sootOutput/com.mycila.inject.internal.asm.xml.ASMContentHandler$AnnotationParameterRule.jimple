final class com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule extends com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule
{
    private final com.mycila.inject.internal.asm.xml.ASMContentHandler this$0;

    void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule;

        r1 := @parameter0: com.mycila.inject.internal.asm.xml.ASMContentHandler;

        specialinvoke r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$Rule: void <init>(com.mycila.inject.internal.asm.xml.ASMContentHandler)>(r1);

        r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0> = r1;

        return;
    }

    public void begin(java.lang.String, org.xml.sax.Attributes)
    {
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r6, $r7;
        com.mycila.inject.internal.asm.MethodVisitor $r9;
        org.xml.sax.Attributes r0;
        int $i0;
        com.mycila.inject.internal.asm.AnnotationVisitor $r10;
        java.lang.Boolean $r4;
        java.lang.Object $r8;
        java.lang.String $r1, $r2, $r3, r11;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule r5;
        boolean $z0;

        r5 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: org.xml.sax.Attributes;

        $r1 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("parameter");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $r2 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("desc");

        $r3 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("visible");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        $r7 = r5.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r6 = r5.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r8 = virtualinvoke $r6.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object peek()>();

        $r9 = (com.mycila.inject.internal.asm.MethodVisitor) $r8;

        $r10 = interfaceinvoke $r9.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>($i0, $r2, $z0);

        virtualinvoke $r7.<com.mycila.inject.internal.asm.xml.ASMContentHandler: void push(java.lang.Object)>($r10);

        return;
    }

    public void end(java.lang.String)
    {
        com.mycila.inject.internal.asm.AnnotationVisitor r3;
        java.lang.Object $r2;
        java.lang.String r4;
        com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule r0;
        com.mycila.inject.internal.asm.xml.ASMContentHandler $r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.mycila.inject.internal.asm.xml.ASMContentHandler$AnnotationParameterRule: com.mycila.inject.internal.asm.xml.ASMContentHandler this$0>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.xml.ASMContentHandler: java.lang.Object pop()>();

        r3 = (com.mycila.inject.internal.asm.AnnotationVisitor) $r2;

        if r3 == null goto label1;

        interfaceinvoke r3.<com.mycila.inject.internal.asm.AnnotationVisitor: void visitEnd()>();

     label1:
        return;
    }
}
