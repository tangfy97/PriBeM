public class groovy.mock.interceptor.MockFor extends java.lang.Object implements groovy.lang.GroovyObject
{
    private groovy.mock.interceptor.MockProxyMetaClass proxy;
    private groovy.mock.interceptor.Demand demand;
    private java.lang.Object expect;
    private java.util.Map instanceExpectations;
    private java.lang.Class clazz;
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119696506;
    static java.lang.Class class$java$lang$Class;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$util$Map;
    static java.lang.Class class$0;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$groovy$mock$interceptor$Demand;
    static java.lang.Class class$groovy$mock$interceptor$MockInterceptor;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$groovy$mock$interceptor$StrictExpectation;
    static java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass;
    static java.lang.Class class$java$util$ArrayList;
    static java.lang.Class class$groovy$util$ProxyGenerator;
    static java.lang.Class class$java$lang$reflect$Modifier;

    public void <init>(java.lang.Class)
    {
        groovy.mock.interceptor.MockProxyMetaClass $r26, $r29, $r45;
        java.util.Map $r6, $r9, $r43;
        java.lang.Object[] $r5, $r11, $r22, $r36, $r40, $r41;
        groovy.mock.interceptor.Demand $r34, $r37;
        groovy.mock.interceptor.MockFor r0;
        groovy.lang.MetaClass $r14, $r16;
        java.lang.Class $r1, r2, $r3, r4, $r7, $r10, r17, $r18, $r20, $r21, $r24, $r27, $r30, $r32, $r35, $r39, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57;
        java.lang.Object $r8, $r12, $r13, $r15, $r19, $r23, $r25, $r28, $r31, $r33, $r38, $r42, $r44;

        r0 := @this: groovy.mock.interceptor.MockFor;

        r17 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r1 != null goto label01;

        $r46 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r46;

        goto label02;

     label01:
        $r46 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label02:
        r2 = $r46;

        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label03;

        $r47 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r47;

        goto label04;

     label03:
        $r47 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        r4 = $r47;

        $r5 = newarray (java.lang.Object)[0];

        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r5);

        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

        if $r7 != null goto label05;

        $r48 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map> = $r48;

        goto label06;

     label05:
        $r48 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

     label06:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, $r48);

        $r9 = (java.util.Map) $r8;

        r0.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations> = $r9;

        $r10 = <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r10 != null goto label07;

        $r49 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r49;

        goto label08;

     label07:
        $r49 = <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label08:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r0;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r49, "initMetaClass", $r11);

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r12, r4);

        $r14 = (groovy.lang.MetaClass) $r13;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r14, r4);

        $r16 = (groovy.lang.MetaClass) $r15;

        r0.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass metaClass> = $r16;

        $r18 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

        if $r18 != null goto label09;

        $r50 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class> = $r50;

        goto label10;

     label09:
        $r50 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

     label10:
        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r17, $r50);

        $r20 = (java.lang.Class) $r19;

        r0.<groovy.mock.interceptor.MockFor: java.lang.Class clazz> = $r20;

        $r21 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r21 != null goto label11;

        $r51 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r51;

        goto label12;

     label11:
        $r51 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label12:
        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r17;

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r2, $r51, "make", $r22);

        $r24 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r24 != null goto label13;

        $r52 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r52;

        goto label14;

     label13:
        $r52 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label14:
        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r23, $r52);

        $r26 = (groovy.mock.interceptor.MockProxyMetaClass) $r25;

        $r27 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r27 != null goto label15;

        $r53 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r53;

        goto label16;

     label15:
        $r53 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label16:
        $r28 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r26, $r53);

        $r29 = (groovy.mock.interceptor.MockProxyMetaClass) $r28;

        r0.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy> = $r29;

        $r30 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r30 != null goto label17;

        $r54 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r54;

        goto label18;

     label17:
        $r54 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label18:
        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNew0(java.lang.Class,java.lang.Class)>(r2, $r54);

        $r32 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r32 != null goto label19;

        $r55 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r55;

        goto label20;

     label19:
        $r55 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label20:
        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r31, $r55);

        $r34 = (groovy.mock.interceptor.Demand) $r33;

        r0.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand> = $r34;

        $r35 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

        if $r35 != null goto label21;

        $r56 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation> = $r56;

        goto label22;

     label21:
        $r56 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

     label22:
        $r36 = newarray (java.lang.Object)[1];

        $r37 = r0.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand>;

        $r36[0] = $r37;

        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r2, $r56, $r36);

        r0.<groovy.mock.interceptor.MockFor: java.lang.Object expect> = $r38;

        $r39 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

        if $r39 != null goto label23;

        $r57 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockInterceptor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor> = $r57;

        goto label24;

     label23:
        $r57 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

     label24:
        $r40 = newarray (java.lang.Object)[1];

        $r41 = newarray (java.lang.Object)[2];

        $r41[0] = "expectation";

        $r42 = r0.<groovy.mock.interceptor.MockFor: java.lang.Object expect>;

        $r41[1] = $r42;

        $r43 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r41);

        $r40[0] = $r43;

        $r44 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r2, $r57, $r40);

        $r45 = r0.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy>;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r44, r2, $r45, "interceptor");

        return;
    }

    public void use(groovy.lang.Closure)
    {
        java.lang.Object[] $r4;
        groovy.lang.Closure r5;
        groovy.mock.interceptor.MockProxyMetaClass $r6;
        java.lang.Class $r0, r1, $r2, $r8, $r9;
        java.lang.Object $r7;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r5 := @parameter0: groovy.lang.Closure;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r8;

        goto label2;

     label1:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r8;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r9;

        goto label4;

     label3:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r6 = r3.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r6, "use", $r4);

        $r7 = r3.<groovy.mock.interceptor.MockFor: java.lang.Object expect>;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r7, "verify");

        return;
    }

    public void use(groovy.lang.GroovyObject, groovy.lang.Closure)
    {
        java.lang.Object[] $r4;
        groovy.lang.Closure r6;
        groovy.mock.interceptor.MockProxyMetaClass $r7;
        groovy.lang.GroovyObject r5;
        java.lang.Class $r0, r1, $r2, $r9, $r10;
        java.lang.Object $r8;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r5 := @parameter0: groovy.lang.GroovyObject;

        r6 := @parameter1: groovy.lang.Closure;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r9;

        goto label2;

     label1:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r9;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r10 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r10;

        goto label4;

     label3:
        $r10 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r7 = r3.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r4[1] = r6;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r7, "use", $r4);

        $r8 = r3.<groovy.mock.interceptor.MockFor: java.lang.Object expect>;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r8, "verify");

        return;
    }

    public void verify(groovy.lang.GroovyObject)
    {
        java.lang.Object[] $r4;
        groovy.lang.GroovyObject r5;
        java.util.Map $r6;
        java.lang.Class $r0, r1, $r2, $r8, $r9;
        java.lang.Object $r7;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r5 := @parameter0: groovy.lang.GroovyObject;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r8;

        goto label2;

     label1:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r8;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r9;

        goto label4;

     label3:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r6 = r3.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r6, "getAt", $r4);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r7, "verify");

        return;
    }

    public java.lang.Object proxyInstance()
    {
        java.lang.Object[] $r4;
        java.lang.Class $r0, r1, $r2, $r6, $r9, $r10, $r11;
        java.lang.Object $r5, $r7, $r8;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r9;

        goto label2;

     label1:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r9;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r10 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r10;

        goto label4;

     label3:
        $r10 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = null;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r3, "proxyInstance", $r4);

        $r6 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

        if $r6 != null goto label5;

        $r11 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object> = $r11;

        goto label6;

     label5:
        $r11 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

     label6:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r5, $r11);

        $r8 = (java.lang.Object) $r7;

        return $r8;
    }

    public java.lang.Object proxyInstance(java.lang.Object)
    {
        java.util.Map $r19, $r22, $r39;
        java.lang.Object[] $r4, $r9, $r14, $r17, $r18, $r21, $r31, $r32, $r35;
        groovy.mock.interceptor.Demand $r36;
        groovy.mock.interceptor.MockFor r3;
        java.lang.Class $r0, r1, $r2, $r5, $r8, $r10, $r12, $r13, $r16, $r23, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r41, $r42, $r43, $r44;
        java.lang.Object r6, $r7, $r11, $r15, $r20, $r24, $r25, $r37, $r38, $r40;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r6 := @parameter0: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r27 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r27;

        goto label02;

     label01:
        $r27 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label02:
        r1 = $r27;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r28 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r28;

        goto label04;

     label03:
        $r28 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[2];

        $r5 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r4[0] = $r5;

        $r4[1] = r6;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r3, "getInstance", $r4);

        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r8 != null goto label05;

        $r29 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r29;

        goto label06;

     label05:
        $r29 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label06:
        $r9 = newarray (java.lang.Object)[1];

        $r10 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r9[0] = $r10;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r29, "make", $r9);

        $r12 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r12 != null goto label07;

        $r26 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        $r30 = $r26;

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r26;

        goto label08;

     label07:
        $r30 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label08:
        $r31 = newarray (java.lang.Object)[1];

        $r32 = newarray (java.lang.Object)[2];

        $r32[0] = "recorded";

        $r13 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList>;

        if $r13 != null goto label09;

        $r33 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.util.ArrayList");

        $r34 = $r33;

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList> = $r33;

        goto label10;

     label09:
        $r34 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList>;

     label10:
        $r35 = newarray (java.lang.Object)[1];

        $r36 = r3.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand>;

        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r36, "recorded");

        $r35[0] = $r37;

        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r34, $r35);

        $r32[1] = $r38;

        $r39 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r32);

        $r31[0] = $r39;

        $r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r30, $r31);

        $r41 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

        if $r41 != null goto label11;

        $r42 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation> = $r42;

        goto label12;

     label11:
        $r42 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

     label12:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r40;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r42, $r14);

        $r16 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

        if $r16 != null goto label13;

        $r43 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockInterceptor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor> = $r43;

        goto label14;

     label13:
        $r43 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

     label14:
        $r17 = newarray (java.lang.Object)[1];

        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = "expectation";

        $r18[1] = $r15;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r18);

        $r17[0] = $r19;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r43, $r17);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r20, r1, $r11, "interceptor");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r11, r1, $r7, "metaClass");

        $r22 = r3.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations>;

        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = $r7;

        $r21[1] = $r15;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r22, "putAt", $r21);

        $r23 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

        if $r23 != null goto label15;

        $r44 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object> = $r44;

        goto label16;

     label15:
        $r44 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

     label16:
        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, $r44);

        $r25 = (java.lang.Object) $r24;

        return $r25;
    }

    public java.lang.Object proxyDelegateInstance()
    {
        java.lang.Object[] $r4;
        java.lang.Class $r0, r1, $r2, $r6, $r9, $r10, $r11;
        java.lang.Object $r5, $r7, $r8;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r9;

        goto label2;

     label1:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r9;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r10 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r10;

        goto label4;

     label3:
        $r10 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = null;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r3, "proxyDelegateInstance", $r4);

        $r6 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

        if $r6 != null goto label5;

        $r11 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object> = $r11;

        goto label6;

     label5:
        $r11 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

     label6:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r5, $r11);

        $r8 = (java.lang.Object) $r7;

        return $r8;
    }

    public java.lang.Object proxyDelegateInstance(java.lang.Object)
    {
        java.util.Map $r19, $r48, $r56;
        boolean $z0;
        java.util.List $r34;
        java.lang.Object[] $r4, $r9, $r14, $r17, $r18, $r25, $r31, $r32, $r40, $r41, $r44, $r57;
        groovy.mock.interceptor.Demand $r45;
        groovy.mock.interceptor.MockFor r3;
        java.lang.Class $r0, r1, $r2, $r5, $r8, $r10, $r12, $r13, $r16, $r21, $r23, $r29, $r33, $r35, $r36, $r37, $r38, $r39, $r42, $r43, $r50, $r51, $r52, $r53, $r55, $r58, $r59;
        java.lang.Object r6, $r7, $r11, $r15, $r20, $r22, $r24, $r26, $r27, $r28, $r30, $r46, $r47, $r49, r54;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r6 := @parameter0: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r36 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r36;

        goto label02;

     label01:
        $r36 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label02:
        r1 = $r36;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r37 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r37;

        goto label04;

     label03:
        $r37 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[2];

        $r5 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r4[0] = $r5;

        $r4[1] = r6;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r3, "getInstance", $r4);

        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r8 != null goto label05;

        $r38 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r38;

        goto label06;

     label05:
        $r38 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label06:
        $r9 = newarray (java.lang.Object)[1];

        $r10 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r9[0] = $r10;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r38, "make", $r9);

        $r12 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r12 != null goto label07;

        $r35 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        $r39 = $r35;

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r35;

        goto label08;

     label07:
        $r39 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label08:
        $r40 = newarray (java.lang.Object)[1];

        $r41 = newarray (java.lang.Object)[2];

        $r41[0] = "recorded";

        $r13 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList>;

        if $r13 != null goto label09;

        $r42 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.util.ArrayList");

        $r43 = $r42;

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList> = $r42;

        goto label10;

     label09:
        $r43 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$ArrayList>;

     label10:
        $r44 = newarray (java.lang.Object)[1];

        $r45 = r3.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand>;

        $r46 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r45, "recorded");

        $r44[0] = $r46;

        $r47 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r43, $r44);

        $r41[1] = $r47;

        $r48 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r41);

        $r40[0] = $r48;

        $r49 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r39, $r40);

        $r50 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

        if $r50 != null goto label11;

        $r51 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.StrictExpectation");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation> = $r51;

        goto label12;

     label11:
        $r51 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$StrictExpectation>;

     label12:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r49;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r51, $r14);

        $r16 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

        if $r16 != null goto label13;

        $r52 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockInterceptor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor> = $r52;

        goto label14;

     label13:
        $r52 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockInterceptor>;

     label14:
        $r17 = newarray (java.lang.Object)[1];

        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = "expectation";

        $r18[1] = $r15;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r18);

        $r17[0] = $r19;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r52, $r17);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r20, r1, $r11, "interceptor");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r11, r1, $r7, "metaClass");

        $r21 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r21, "isInterface");

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r22);

        if $z0 == 0 goto label17;

        $r29 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r29 != null goto label15;

        $r53 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r53;

        goto label16;

     label15:
        $r53 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label16:
        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r53, "INSTANCE");

        $r31 = newarray (java.lang.Object)[2];

        $r32 = newarray (java.lang.Object)[1];

        $r33 = r3.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r32[0] = $r33;

        $r34 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r32);

        $r31[0] = $r34;

        $r31[1] = $r7;

        r54 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r30, "instantiateDelegate", $r31);

        goto label20;

     label17:
        $r23 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r23 != null goto label18;

        $r55 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r55;

        goto label19;

     label18:
        $r55 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label19:
        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r55, "INSTANCE");

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = $r7;

        r54 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r24, "instantiateDelegate", $r25);

     label20:
        $r56 = r3.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations>;

        $r57 = newarray (java.lang.Object)[2];

        $r57[0] = r54;

        $r57[1] = $r15;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r56, "putAt", $r57);

        $r28 = r54;

        $r58 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

        if $r58 != null goto label21;

        $r59 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object> = $r59;

        goto label22;

     label21:
        $r59 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Object>;

     label22:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r28, $r59);

        $r27 = (java.lang.Object) $r26;

        return $r27;
    }

    private java.lang.Object getInstance(java.lang.Class, java.lang.Object)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object[] $r6, $r12, $r16, $r17, $r19, $r22, $r25;
        groovy.mock.interceptor.MockFor r26;
        java.lang.Class $r0, r1, $r2, r3, $r5, $r10, $r14, $r20, $r23, $r27, $r28, $r29, $r31, $r32, $r33, $r34;
        java.lang.Object $r4, $r7, $r8, r9, $r11, $r13, $r15, $r18, $r21, $r24, r30;

        r26 := @this: groovy.mock.interceptor.MockFor;

        r3 := @parameter0: java.lang.Class;

        r9 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r27 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r27;

        goto label02;

     label01:
        $r27 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label02:
        r1 = $r27;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r28 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r28;

        goto label04;

     label03:
        $r28 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "isInterface");

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r4);

        if $z0 == 0 goto label07;

        $r23 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r23 != null goto label05;

        $r29 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r29;

        goto label06;

     label05:
        $r29 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label06:
        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r29, "INSTANCE");

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = r3;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r24, "instantiateAggregateFromInterface", $r25);

        goto label21;

     label07:
        $r5 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$reflect$Modifier>;

        if $r5 != null goto label08;

        $r31 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.reflect.Modifier");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$reflect$Modifier> = $r31;

        goto label09;

     label08:
        $r31 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$reflect$Modifier>;

     label09:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "modifiers");

        $r6[0] = $r7;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r31, "isAbstract", $r6);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r8);

        if $z1 == 0 goto label12;

        $r20 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r20 != null goto label10;

        $r32 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r32;

        goto label11;

     label10:
        $r32 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label11:
        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r32, "INSTANCE");

        $r22 = newarray (java.lang.Object)[2];

        $r22[0] = r3;

        $r22[1] = r9;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r21, "instantiateAggregateFromBaseClass", $r22);

        goto label21;

     label12:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>(r9, null);

        if $z2 == 0 goto label17;

        $z4 = r3 instanceof groovy.lang.GroovyObject;

        if $z4 == 0 goto label13;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r9;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "newInstance", $r19);

        goto label16;

     label13:
        $r14 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r14 != null goto label14;

        $r33 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r33;

        goto label15;

     label14:
        $r33 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label15:
        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r33, "INSTANCE");

        $r16 = newarray (java.lang.Object)[1];

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r9;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "newInstance", $r17);

        $r16[0] = $r18;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r15, "instantiateDelegate", $r16);

     label16:
        goto label21;

     label17:
        $z3 = r3 instanceof groovy.lang.GroovyObject;

        if $z3 == 0 goto label18;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "newInstance");

        goto label21;

     label18:
        $r10 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

        if $r10 != null goto label19;

        $r34 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.util.ProxyGenerator");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator> = $r34;

        goto label20;

     label19:
        $r34 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$util$ProxyGenerator>;

     label20:
        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r34, "INSTANCE");

        $r12 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "newInstance");

        $r12[0] = $r13;

        r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "instantiateDelegate", $r12);

     label21:
        return r30;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        groovy.mock.interceptor.MockFor r4;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.mock.interceptor.MockFor: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        java.lang.Class $r0, $r1, $r4, $r5;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        java.lang.String r4;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.MockFor: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119696506L);

        $r3 = (java.lang.Long) $r2;

        <groovy.mock.interceptor.MockFor: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.mock.interceptor.MockFor: java.lang.Long __timeStamp__239_neverHappen1239119696506> = $r5;

        return;
    }

    public groovy.mock.interceptor.MockProxyMetaClass getProxy()
    {
        groovy.mock.interceptor.MockProxyMetaClass $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy>;

        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (groovy.mock.interceptor.MockProxyMetaClass) $r5;

        return $r6;
    }

    public void setProxy(groovy.mock.interceptor.MockProxyMetaClass)
    {
        groovy.mock.interceptor.MockProxyMetaClass r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.MockFor r5;

        r5 := @this: groovy.mock.interceptor.MockFor;

        r2 := @parameter0: groovy.mock.interceptor.MockProxyMetaClass;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockProxyMetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$MockProxyMetaClass>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (groovy.mock.interceptor.MockProxyMetaClass) $r4;

        r5.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.MockProxyMetaClass proxy> = $r6;

        return;
    }

    public groovy.mock.interceptor.Demand getDemand()
    {
        groovy.mock.interceptor.Demand $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand>;

        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r5;

        return $r6;
    }

    public void setDemand(groovy.mock.interceptor.Demand)
    {
        groovy.mock.interceptor.Demand r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.MockFor r5;

        r5 := @this: groovy.mock.interceptor.MockFor;

        r2 := @parameter0: groovy.mock.interceptor.Demand;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$mock$interceptor$Demand>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (groovy.mock.interceptor.Demand) $r4;

        r5.<groovy.mock.interceptor.MockFor: groovy.mock.interceptor.Demand demand> = $r6;

        return;
    }

    public java.lang.Object getExpect()
    {
        java.lang.Class $r0, $r1, $r4, $r5;
        java.lang.Object $r3;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = r2.<groovy.mock.interceptor.MockFor: java.lang.Object expect>;

        return $r3;
    }

    public void setExpect(java.lang.Object)
    {
        java.lang.Class $r0, $r1, $r4, $r5;
        java.lang.Object r2;
        groovy.mock.interceptor.MockFor r3;

        r3 := @this: groovy.mock.interceptor.MockFor;

        r2 := @parameter0: java.lang.Object;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3.<groovy.mock.interceptor.MockFor: java.lang.Object expect> = r2;

        return;
    }

    public java.util.Map getInstanceExpectations()
    {
        java.util.Map $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations>;

        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (java.util.Map) $r5;

        return $r6;
    }

    public void setInstanceExpectations(java.util.Map)
    {
        java.util.Map r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.MockFor r5;

        r5 := @this: groovy.mock.interceptor.MockFor;

        r2 := @parameter0: java.util.Map;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$util$Map>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (java.util.Map) $r4;

        r5.<groovy.mock.interceptor.MockFor: java.util.Map instanceExpectations> = $r6;

        return;
    }

    public java.lang.Class getClazz()
    {
        java.lang.Class $r0, $r1, $r3, $r4, $r6, $r7, $r8, $r9;
        java.lang.Object $r5;
        groovy.mock.interceptor.MockFor r2;

        r2 := @this: groovy.mock.interceptor.MockFor;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.MockFor: java.lang.Class clazz>;

        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (java.lang.Class) $r5;

        return $r6;
    }

    public void setClazz(java.lang.Class)
    {
        java.lang.Class $r0, $r1, r2, $r3, $r6, $r7, $r8, $r9;
        java.lang.Object $r4;
        groovy.mock.interceptor.MockFor r5;

        r5 := @this: groovy.mock.interceptor.MockFor;

        r2 := @parameter0: java.lang.Class;

        $r0 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.MockFor");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.MockFor: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.MockFor: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.MockFor: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.MockFor: java.lang.Class class$java$lang$Class>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (java.lang.Class) $r4;

        r5.<groovy.mock.interceptor.MockFor: java.lang.Class clazz> = $r6;

        return;
    }

    java.lang.Object this$2$getInstance(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r1;
        java.lang.Object r2, $r3;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.mock.interceptor.MockFor: java.lang.Object getInstance(java.lang.Class,java.lang.Object)>(r1, r2);

        return $r3;
    }

    void super$1$wait()
    {
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.mock.interceptor.MockFor r0;
        boolean $z0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void super$1$finalize()
    {
        groovy.mock.interceptor.MockFor r0;

        r0 := @this: groovy.mock.interceptor.MockFor;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
