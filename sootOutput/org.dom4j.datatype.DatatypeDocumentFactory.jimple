public class org.dom4j.datatype.DatatypeDocumentFactory extends org.dom4j.DocumentFactory
{
    private static final boolean DO_INTERN_QNAME;
    protected static transient org.dom4j.datatype.DatatypeDocumentFactory singleton;
    private static final org.dom4j.Namespace XSI_NAMESPACE;
    private static final org.dom4j.QName XSI_SCHEMA_LOCATION;
    private static final org.dom4j.QName XSI_NO_SCHEMA_LOCATION;
    private org.dom4j.datatype.SchemaParser schemaBuilder;
    private org.dom4j.io.SAXReader xmlSchemaReader;
    private boolean autoLoadSchema;

    public void <init>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.io.SAXReader $r1;
        org.dom4j.datatype.SchemaParser $r2;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke r0.<org.dom4j.DocumentFactory: void <init>()>();

        $r1 = new org.dom4j.io.SAXReader;

        specialinvoke $r1.<org.dom4j.io.SAXReader: void <init>()>();

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader> = $r1;

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema> = 1;

        $r2 = new org.dom4j.datatype.SchemaParser;

        specialinvoke $r2.<org.dom4j.datatype.SchemaParser: void <init>(org.dom4j.datatype.DatatypeDocumentFactory)>(r0);

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder> = $r2;

        return;
    }

    public static org.dom4j.DocumentFactory getInstance()
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r0;

        $r0 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton>;

        return $r0;
    }

    public void loadSchema(org.dom4j.Document)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.Document r1;
        org.dom4j.datatype.SchemaParser $r2;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r1 := @parameter0: org.dom4j.Document;

        $r2 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder>;

        virtualinvoke $r2.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document)>(r1);

        return;
    }

    public void loadSchema(org.dom4j.Document, org.dom4j.Namespace)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.Document r1;
        org.dom4j.Namespace r2;
        org.dom4j.datatype.SchemaParser $r3;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r1 := @parameter0: org.dom4j.Document;

        r2 := @parameter1: org.dom4j.Namespace;

        $r3 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder>;

        virtualinvoke $r3.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document,org.dom4j.Namespace)>(r1, r2);

        return;
    }

    public org.dom4j.datatype.DatatypeElementFactory getElementFactory(org.dom4j.QName)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r2;
        org.dom4j.datatype.DatatypeElementFactory r3;
        org.dom4j.QName r0;
        org.dom4j.DocumentFactory $r1;
        boolean $z0;

        r2 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r0 := @parameter0: org.dom4j.QName;

        r3 = null;

        $r1 = virtualinvoke r0.<org.dom4j.QName: org.dom4j.DocumentFactory getDocumentFactory()>();

        $z0 = $r1 instanceof org.dom4j.datatype.DatatypeElementFactory;

        if $z0 == 0 goto label1;

        r3 = (org.dom4j.datatype.DatatypeElementFactory) $r1;

     label1:
        return r3;
    }

    public org.dom4j.Attribute createAttribute(org.dom4j.Element, org.dom4j.QName, java.lang.String)
    {
        org.dom4j.Document $r9, $r10;
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        int $i0, $i1, $i2;
        java.lang.String r3, $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.dom4j.Namespace $r6;
        org.dom4j.Element r1;
        org.dom4j.QName r2, $r4, $r8;
        org.dom4j.Attribute $r11;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: org.dom4j.QName;

        r3 := @parameter2: java.lang.String;

        $z0 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema>;

        if $z0 == 0 goto label3;

        $r8 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_NO_SCHEMA_LOCATION>;

        $z3 = virtualinvoke r2.<org.dom4j.QName: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label3;

        if r1 == null goto label1;

        $r9 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Document getDocument()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,java.lang.String)>($r9, r3);

        goto label6;

     label3:
        $z1 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema>;

        if $z1 == 0 goto label6;

        $r4 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_SCHEMA_LOCATION>;

        $z2 = virtualinvoke r2.<org.dom4j.QName: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label6;

        if r1 == null goto label4;

        $r10 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Document getDocument()>();

        goto label5;

     label4:
        $r10 = null;

     label5:
        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(32);

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r6 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Namespace getNamespaceForURI(java.lang.String)>($r5);

        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(32);

        $i2 = $i1 + 1;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,java.lang.String,org.dom4j.Namespace)>($r10, $r7, $r6);

     label6:
        $r11 = specialinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r1, r2, r3);

        return $r11;
    }

    protected void loadSchema(org.dom4j.Document, java.lang.String)
    {
        org.dom4j.io.SAXReader $r5;
        org.xml.sax.EntityResolver $r1;
        java.lang.Exception $r17;
        org.dom4j.Document r0, $r6;
        org.dom4j.datatype.DatatypeDocumentFactory r4;
        java.lang.StringBuffer $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r20, $r21, $r23, $r25, $r26, $r29, $r30, $r31;
        java.lang.String r2, $r11, $r16, $r22, $r27, $r32;
        org.dom4j.datatype.InvalidSchemaException $r7, $r12, $r28;
        java.io.PrintStream $r19, $r24;
        org.xml.sax.InputSource $r3;

        r4 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r0 := @parameter0: org.dom4j.Document;

        r2 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

        if $r1 != null goto label2;

        $r12 = new org.dom4j.datatype.InvalidSchemaException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No EntityResolver available for resolving URI: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        $r3 = interfaceinvoke $r1.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, r2);

        if $r1 != null goto label3;

        $r7 = new org.dom4j.datatype.InvalidSchemaException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the URI: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label3:
        $r5 = r4.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader>;

        $r6 = virtualinvoke $r5.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r3);

        virtualinvoke r4.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document)>($r6);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r27);

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

        $r28 = new org.dom4j.datatype.InvalidSchemaException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected void loadSchema(org.dom4j.Document, java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.io.SAXReader $r5;
        org.xml.sax.EntityResolver $r1;
        org.dom4j.Namespace r7;
        java.lang.Exception $r18;
        org.dom4j.Document r0, $r6;
        org.dom4j.datatype.DatatypeDocumentFactory r4;
        java.lang.StringBuffer $r9, $r10, $r11, $r14, $r15, $r16, $r19, $r21, $r22, $r24, $r26, $r27, $r30, $r31, $r32;
        java.lang.String r2, $r12, $r17, $r23, $r28, $r33;
        org.dom4j.datatype.InvalidSchemaException $r8, $r13, $r29;
        java.io.PrintStream $r20, $r25;
        org.xml.sax.InputSource $r3;

        r4 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        r0 := @parameter0: org.dom4j.Document;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: org.dom4j.Namespace;

     label1:
        $r1 = interfaceinvoke r0.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

        if $r1 != null goto label2;

        $r13 = new org.dom4j.datatype.InvalidSchemaException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No EntityResolver available for resolving URI: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label2:
        $r3 = interfaceinvoke $r1.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, r2);

        if $r1 != null goto label3;

        $r8 = new org.dom4j.datatype.InvalidSchemaException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the URI: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r5 = r4.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader>;

        $r6 = virtualinvoke $r5.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r3);

        virtualinvoke r4.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,org.dom4j.Namespace)>($r6, r7);

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

        $r29 = new org.dom4j.datatype.InvalidSchemaException;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r0;
        org.dom4j.Namespace $r1, $r2, $r4;
        org.dom4j.QName $r3, $r5;

        <org.dom4j.datatype.DatatypeDocumentFactory: boolean DO_INTERN_QNAME> = 0;

        $r0 = new org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke $r0.<org.dom4j.datatype.DatatypeDocumentFactory: void <init>()>();

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton> = $r0;

        $r1 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("xsi", "http://www.w3.org/2001/XMLSchema-instance");

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE> = $r1;

        $r2 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE>;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("schemaLocation", $r2);

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_SCHEMA_LOCATION> = $r3;

        $r4 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE>;

        $r5 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("noNamespaceSchemaLocation", $r4);

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_NO_SCHEMA_LOCATION> = $r5;

        return;
    }
}
