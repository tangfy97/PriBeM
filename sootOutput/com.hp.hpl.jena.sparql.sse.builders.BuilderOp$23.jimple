class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23 r0;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        java.util.ArrayList $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup $r8;
        com.hp.hpl.jena.sparql.expr.Expr $r16;
        com.hp.hpl.jena.sparql.expr.ExprAggregator $r21;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3, $r11;
        java.lang.String $r20;
        com.hp.hpl.jena.sparql.algebra.Op $r7;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp $r6;
        com.hp.hpl.jena.sparql.sse.ItemList r0, $r2, $r10;
        java.util.Iterator $r13;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r9;
        com.hp.hpl.jena.sparql.core.Var r15;
        java.util.List $r12;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23 r5;
        java.lang.Object $r14;
        java.lang.StringBuilder $r17, $r18, $r19;

        r5 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(3, 4, r0, "Group");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderExpr: com.hp.hpl.jena.sparql.core.VarExprList buildNamedExprList(com.hp.hpl.jena.sparql.sse.ItemList)>($r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if $i0 != 4 goto label3;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(2);

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderExpr: com.hp.hpl.jena.sparql.core.VarExprList buildNamedExprList(com.hp.hpl.jena.sparql.sse.ItemList)>($r10);

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.hp.hpl.jena.sparql.core.Var) $r14;

        $r16 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r15);

        $z1 = $r16 instanceof com.hp.hpl.jena.sparql.expr.ExprAggregator;

        if $z1 != 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a aggregate expression: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void broken(com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(r0, $r20);

     label2:
        $r21 = (com.hp.hpl.jena.sparql.expr.ExprAggregator) $r16;

        virtualinvoke $r21.<com.hp.hpl.jena.sparql.expr.ExprAggregator: void setVar(com.hp.hpl.jena.sparql.core.Var)>(r15);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label1;

     label3:
        $r6 = r5.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$23: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        $i2 = $i1 - 1;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.ItemList,int)>(r0, $i2);

        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List)>($r7, $r3, $r4);

        return $r8;
    }
}
