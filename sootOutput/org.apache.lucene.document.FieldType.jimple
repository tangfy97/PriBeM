public class org.apache.lucene.document.FieldType extends java.lang.Object implements org.apache.lucene.index.IndexableFieldType
{
    private boolean indexed;
    private boolean stored;
    private boolean tokenized;
    private boolean storeTermVectors;
    private boolean storeTermVectorOffsets;
    private boolean storeTermVectorPositions;
    private boolean storeTermVectorPayloads;
    private boolean omitNorms;
    private org.apache.lucene.index.FieldInfo$IndexOptions indexOptions;
    private org.apache.lucene.document.FieldType$NumericType numericType;
    private boolean frozen;
    private int numericPrecisionStep;
    private org.apache.lucene.index.FieldInfo$DocValuesType docValueType;

    public void <init>(org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.FieldType$NumericType $r5;
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r3;
        org.apache.lucene.document.FieldType r0, r2;
        org.apache.lucene.index.FieldInfo$DocValuesType $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.lucene.document.FieldType;

        r2 := @parameter0: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.FieldType: boolean tokenized> = 1;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r1;

        r0.<org.apache.lucene.document.FieldType: int numericPrecisionStep> = 4;

        $z0 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean indexed()>();

        r0.<org.apache.lucene.document.FieldType: boolean indexed> = $z0;

        $z1 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean stored()>();

        r0.<org.apache.lucene.document.FieldType: boolean stored> = $z1;

        $z2 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        r0.<org.apache.lucene.document.FieldType: boolean tokenized> = $z2;

        $z3 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean storeTermVectors()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectors> = $z3;

        $z4 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean storeTermVectorOffsets()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorOffsets> = $z4;

        $z5 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean storeTermVectorPositions()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPositions> = $z5;

        $z6 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean storeTermVectorPayloads()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPayloads> = $z6;

        $z7 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean omitNorms()>();

        r0.<org.apache.lucene.document.FieldType: boolean omitNorms> = $z7;

        $r3 = virtualinvoke r2.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r3;

        $r4 = virtualinvoke r2.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType> = $r4;

        $r5 = virtualinvoke r2.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType> = $r5;

        return;
    }

    public void <init>()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.FieldType: boolean tokenized> = 1;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = $r1;

        r0.<org.apache.lucene.document.FieldType: int numericPrecisionStep> = 4;

        return;
    }

    private void checkIfFrozen()
    {
        java.lang.IllegalStateException $r1;
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean frozen>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this FieldType is already frozen and cannot be changed");

        throw $r1;

     label1:
        return;
    }

    public void freeze()
    {
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        r0.<org.apache.lucene.document.FieldType: boolean frozen> = 1;

        return;
    }

    public boolean indexed()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean indexed>;

        return $z0;
    }

    public void setIndexed(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean indexed> = z0;

        return;
    }

    public boolean stored()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean stored>;

        return $z0;
    }

    public void setStored(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean stored> = z0;

        return;
    }

    public boolean tokenized()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean tokenized>;

        return $z0;
    }

    public void setTokenized(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean tokenized> = z0;

        return;
    }

    public boolean storeTermVectors()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean storeTermVectors>;

        return $z0;
    }

    public void setStoreTermVectors(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectors> = z0;

        return;
    }

    public boolean storeTermVectorOffsets()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorOffsets>;

        return $z0;
    }

    public void setStoreTermVectorOffsets(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorOffsets> = z0;

        return;
    }

    public boolean storeTermVectorPositions()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPositions>;

        return $z0;
    }

    public void setStoreTermVectorPositions(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPositions> = z0;

        return;
    }

    public boolean storeTermVectorPayloads()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPayloads>;

        return $z0;
    }

    public void setStoreTermVectorPayloads(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean storeTermVectorPayloads> = z0;

        return;
    }

    public boolean omitNorms()
    {
        org.apache.lucene.document.FieldType r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $z0 = r0.<org.apache.lucene.document.FieldType: boolean omitNorms>;

        return $z0;
    }

    public void setOmitNorms(boolean)
    {
        org.apache.lucene.document.FieldType r0;
        boolean z0;

        r0 := @this: org.apache.lucene.document.FieldType;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: boolean omitNorms> = z0;

        return;
    }

    public org.apache.lucene.index.FieldInfo$IndexOptions indexOptions()
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $r1 = r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        return $r1;
    }

    public void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)
    {
        org.apache.lucene.index.FieldInfo$IndexOptions r1;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo$IndexOptions;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions> = r1;

        return;
    }

    public void setNumericType(org.apache.lucene.document.FieldType$NumericType)
    {
        org.apache.lucene.document.FieldType$NumericType r1;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        r1 := @parameter0: org.apache.lucene.document.FieldType$NumericType;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType> = r1;

        return;
    }

    public org.apache.lucene.document.FieldType$NumericType numericType()
    {
        org.apache.lucene.document.FieldType$NumericType $r1;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $r1 = r0.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType>;

        return $r1;
    }

    public void setNumericPrecisionStep(int)
    {
        org.apache.lucene.document.FieldType r0;
        java.lang.IllegalArgumentException $r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.lucene.document.FieldType;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("precisionStep must be >= 1 (got ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        r0.<org.apache.lucene.document.FieldType: int numericPrecisionStep> = i0;

        return;
    }

    public int numericPrecisionStep()
    {
        int $i0;
        org.apache.lucene.document.FieldType r0;

        r0 := @this: org.apache.lucene.document.FieldType;

        $i0 = r0.<org.apache.lucene.document.FieldType: int numericPrecisionStep>;

        return $i0;
    }

    public final java.lang.String toString()
    {
        org.apache.lucene.document.FieldType r1;
        int $i0, $i1, $i2;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.lucene.document.FieldType$NumericType $r5, $r6;
        org.apache.lucene.index.FieldInfo$IndexOptions $r3, $r4, $r7;
        org.apache.lucene.index.FieldInfo$DocValuesType $r2, $r8;
        java.lang.StringBuilder $r0;

        r1 := @this: org.apache.lucene.document.FieldType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean stored()>();

        if $z0 == 0 goto label01;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stored");

     label01:
        $z1 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z1 == 0 goto label09;

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label02:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("indexed");

        $z2 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        if $z2 == 0 goto label03;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",tokenized");

     label03:
        $z3 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean storeTermVectors()>();

        if $z3 == 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",termVector");

     label04:
        $z4 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean storeTermVectorOffsets()>();

        if $z4 == 0 goto label05;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",termVectorOffsets");

     label05:
        $z5 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean storeTermVectorPositions()>();

        if $z5 == 0 goto label06;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",termVectorPosition");

        $z6 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean storeTermVectorPayloads()>();

        if $z6 == 0 goto label06;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",termVectorPayloads");

     label06:
        $z7 = virtualinvoke r1.<org.apache.lucene.document.FieldType: boolean omitNorms()>();

        if $z7 == 0 goto label07;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",omitNorms");

     label07:
        $r4 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r3 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        if $r4 == $r3 goto label08;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",indexOptions=");

        $r7 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label08:
        $r5 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType>;

        if $r5 == null goto label09;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",numericType=");

        $r6 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",numericPrecisionStep=");

        $i2 = r1.<org.apache.lucene.document.FieldType: int numericPrecisionStep>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label09:
        $r8 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        if $r8 == null goto label11;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label10:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("docValueType=");

        $r2 = r1.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

     label11:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public org.apache.lucene.index.FieldInfo$DocValuesType docValueType()
    {
        org.apache.lucene.document.FieldType r0;
        org.apache.lucene.index.FieldInfo$DocValuesType $r1;

        r0 := @this: org.apache.lucene.document.FieldType;

        $r1 = r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType>;

        return $r1;
    }

    public void setDocValueType(org.apache.lucene.index.FieldInfo$DocValuesType)
    {
        org.apache.lucene.document.FieldType r0;
        org.apache.lucene.index.FieldInfo$DocValuesType r1;

        r0 := @this: org.apache.lucene.document.FieldType;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo$DocValuesType;

        specialinvoke r0.<org.apache.lucene.document.FieldType: void checkIfFrozen()>();

        r0.<org.apache.lucene.document.FieldType: org.apache.lucene.index.FieldInfo$DocValuesType docValueType> = r1;

        return;
    }
}
