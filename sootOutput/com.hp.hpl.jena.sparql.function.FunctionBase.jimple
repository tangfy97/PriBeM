public abstract class com.hp.hpl.jena.sparql.function.FunctionBase extends java.lang.Object implements com.hp.hpl.jena.sparql.function.Function
{
    java.lang.String uri;
    protected com.hp.hpl.jena.sparql.expr.ExprList arguments;
    private com.hp.hpl.jena.sparql.function.FunctionEnv env;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.function.FunctionBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.FunctionBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: java.lang.String uri> = null;

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.expr.ExprList arguments> = null;

        return;
    }

    public final void build(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.function.FunctionBase r0;
        com.hp.hpl.jena.sparql.expr.ExprList r2;

        r0 := @this: com.hp.hpl.jena.sparql.function.FunctionBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: java.lang.String uri> = r1;

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.expr.ExprList arguments> = r2;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase: void checkBuild(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.expr.ExprList, java.lang.String, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r5, $r9;
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.function.FunctionBase r0;
        java.util.ArrayList $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r10;
        com.hp.hpl.jena.sparql.expr.Expr r7;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        java.lang.Object $r6;
        java.lang.String r11;
        com.hp.hpl.jena.sparql.function.FunctionEnv r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.function.FunctionBase;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r11 := @parameter2: java.lang.String;

        r1 := @parameter3: com.hp.hpl.jena.sparql.function.FunctionEnv;

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.function.FunctionEnv env> = r1;

        if r2 != null goto label1;

        $r10 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("FunctionBase: Null args list");

        throw $r10;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.expr.Expr) $r6;

        $r9 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r8, r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.expr.NodeValue exec(java.util.List)>($r3);

        r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.expr.ExprList arguments> = null;

        return $r5;
    }

    public com.hp.hpl.jena.sparql.util.Context getContext()
    {
        com.hp.hpl.jena.sparql.function.FunctionBase r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv $r1;
        com.hp.hpl.jena.sparql.util.Context $r2;

        r0 := @this: com.hp.hpl.jena.sparql.function.FunctionBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.function.FunctionBase: com.hp.hpl.jena.sparql.function.FunctionEnv env>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.function.FunctionEnv: com.hp.hpl.jena.sparql.util.Context getContext()>();

        return $r2;
    }

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue exec(java.util.List);

    public abstract void checkBuild(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList);
}
