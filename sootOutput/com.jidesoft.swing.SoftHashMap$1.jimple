class com.jidesoft.swing.SoftHashMap$1 extends java.lang.Object implements java.util.Map$Entry
{
    final java.util.Map$Entry val$entry;
    final java.lang.Object val$value;
    final com.jidesoft.swing.SoftHashMap this$0;

    void <init>(com.jidesoft.swing.SoftHashMap, java.util.Map$Entry, java.lang.Object)
    {
        java.util.Map$Entry r2;
        java.lang.Object r3;
        com.jidesoft.swing.SoftHashMap$1 r0;
        com.jidesoft.swing.SoftHashMap r1;

        r0 := @this: com.jidesoft.swing.SoftHashMap$1;

        r1 := @parameter0: com.jidesoft.swing.SoftHashMap;

        r2 := @parameter1: java.util.Map$Entry;

        r3 := @parameter2: java.lang.Object;

        r0.<com.jidesoft.swing.SoftHashMap$1: com.jidesoft.swing.SoftHashMap this$0> = r1;

        r0.<com.jidesoft.swing.SoftHashMap$1: java.util.Map$Entry val$entry> = r2;

        r0.<com.jidesoft.swing.SoftHashMap$1: java.lang.Object val$value> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object getKey()
    {
        java.util.Map$Entry $r1;
        java.lang.Object $r2;
        com.jidesoft.swing.SoftHashMap$1 r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap$1;

        $r1 = r0.<com.jidesoft.swing.SoftHashMap$1: java.util.Map$Entry val$entry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r1;
        com.jidesoft.swing.SoftHashMap$1 r0;

        r0 := @this: com.jidesoft.swing.SoftHashMap$1;

        $r1 = r0.<com.jidesoft.swing.SoftHashMap$1: java.lang.Object val$value>;

        return $r1;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        java.util.Map$Entry $r4;
        java.lang.Object r2, $r6;
        java.lang.ref.SoftReference $r1;
        com.jidesoft.swing.SoftHashMap$1 r0;
        java.lang.ref.ReferenceQueue $r5;
        com.jidesoft.swing.SoftHashMap $r3;

        r0 := @this: com.jidesoft.swing.SoftHashMap$1;

        r2 := @parameter0: java.lang.Object;

        $r4 = r0.<com.jidesoft.swing.SoftHashMap$1: java.util.Map$Entry val$entry>;

        $r1 = new java.lang.ref.SoftReference;

        $r3 = r0.<com.jidesoft.swing.SoftHashMap$1: com.jidesoft.swing.SoftHashMap this$0>;

        $r5 = staticinvoke <com.jidesoft.swing.SoftHashMap: java.lang.ref.ReferenceQueue access$000(com.jidesoft.swing.SoftHashMap)>($r3);

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r2, $r5);

        interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r1);

        $r6 = r0.<com.jidesoft.swing.SoftHashMap$1: java.lang.Object val$value>;

        return $r6;
    }
}
