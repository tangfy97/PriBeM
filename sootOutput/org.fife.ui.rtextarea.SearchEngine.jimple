public class org.fife.ui.rtextarea.SearchEngine extends java.lang.Object
{

    private void <init>()
    {
        org.fife.ui.rtextarea.SearchEngine r0;

        r0 := @this: org.fife.ui.rtextarea.SearchEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean find(javax.swing.JTextArea, org.fife.ui.rtextarea.SearchContext)
    {
        org.fife.ui.rtextarea.SearchContext r0;
        java.awt.Point $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.swing.text.Caret $r3;
        javax.swing.JTextArea r2;

        r2 := @parameter0: javax.swing.JTextArea;

        r0 := @parameter1: org.fife.ui.rtextarea.SearchContext;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getSearchFor()>();

        if $r1 == null goto label01;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r3 = virtualinvoke r2.<javax.swing.JTextArea: javax.swing.text.Caret getCaret()>();

        $z0 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getSearchForward()>();

        if $z0 == 0 goto label03;

        $i9 = interfaceinvoke $r3.<javax.swing.text.Caret: int getDot()>();

        $i10 = interfaceinvoke $r3.<javax.swing.text.Caret: int getMark()>();

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i10);

        goto label04;

     label03:
        $i1 = interfaceinvoke $r3.<javax.swing.text.Caret: int getDot()>();

        $i2 = interfaceinvoke $r3.<javax.swing.text.Caret: int getMark()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

     label04:
        $r4 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.String getFindInText(javax.swing.JTextArea,int,boolean)>(r2, $i11, $z0);

        if $r4 == null goto label05;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 != 0 goto label06;

     label05:
        return 0;

     label06:
        $z1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean isRegularExpression()>();

        if $z1 != 0 goto label10;

        $z4 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getMatchCase()>();

        $z5 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getWholeWord()>();

        $i6 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: int getNextMatchPos(java.lang.String,java.lang.String,boolean,boolean,boolean)>($r1, $r4, $z0, $z4, $z5);

        $i14 = (int) -1;

        if $i6 == $i14 goto label09;

        interfaceinvoke $r3.<javax.swing.text.Caret: void setSelectionVisible(boolean)>(1);

        if $z0 == 0 goto label07;

        $i12 = $i11 + $i6;

        goto label08;

     label07:
        $i12 = $i6;

     label08:
        $i7 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i8 = $i12 + $i7;

        staticinvoke <org.fife.ui.rtextarea.SearchEngine: void selectAndPossiblyCenter(javax.swing.JTextArea,int,int)>(r2, $i12, $i8);

        return 1;

     label09:
        goto label12;

     label10:
        $z2 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getMatchCase()>();

        $z3 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getWholeWord()>();

        $r5 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.awt.Point getNextMatchPosRegEx(java.lang.String,java.lang.CharSequence,boolean,boolean,boolean)>($r1, $r4, $z0, $z2, $z3);

        if $r5 == null goto label12;

        interfaceinvoke $r3.<javax.swing.text.Caret: void setSelectionVisible(boolean)>(1);

        if $z0 == 0 goto label11;

        virtualinvoke $r5.<java.awt.Point: void translate(int,int)>($i11, $i11);

     label11:
        $i5 = $r5.<java.awt.Point: int x>;

        $i4 = $r5.<java.awt.Point: int y>;

        staticinvoke <org.fife.ui.rtextarea.SearchEngine: void selectAndPossiblyCenter(javax.swing.JTextArea,int,int)>(r2, $i5, $i4);

        return 1;

     label12:
        return 0;
    }

    private static java.lang.CharSequence getFindInCharSequence(org.fife.ui.rtextarea.RTextArea, int, boolean)
    {
        org.fife.ui.rtextarea.RTextArea r0;
        org.fife.ui.rtextarea.RDocumentCharSequence $r3;
        int i0, i1, i2;
        javax.swing.text.Document $r1;
        org.fife.ui.rtextarea.RDocument r2;
        boolean z0;

        r0 := @parameter0: org.fife.ui.rtextarea.RTextArea;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.RTextArea: javax.swing.text.Document getDocument()>();

        r2 = (org.fife.ui.rtextarea.RDocument) $r1;

        if z0 == 0 goto label1;

        i1 = i0;

        i2 = virtualinvoke r2.<org.fife.ui.rtextarea.RDocument: int getLength()>();

        goto label2;

     label1:
        i1 = 0;

        i2 = i0;

     label2:
        $r3 = new org.fife.ui.rtextarea.RDocumentCharSequence;

        specialinvoke $r3.<org.fife.ui.rtextarea.RDocumentCharSequence: void <init>(org.fife.ui.rtextarea.RDocument,int,int)>(r2, i1, i2);

        return $r3;
    }

    private static java.lang.String getFindInText(javax.swing.JTextArea, int, boolean)
    {
        javax.swing.text.BadLocationException $r2;
        int i0, $i1, $i2;
        javax.swing.JTextArea r0;
        javax.swing.text.Document $r1;
        java.lang.String r3;
        boolean z0;

        r0 := @parameter0: javax.swing.JTextArea;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r3 = null;

     label1:
        if z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<javax.swing.JTextArea: javax.swing.text.Document getDocument()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        $i2 = $i1 - i0;

        r3 = virtualinvoke r0.<javax.swing.JTextArea: java.lang.String getText(int,int)>(i0, $i2);

        goto label3;

     label2:
        r3 = virtualinvoke r0.<javax.swing.JTextArea: java.lang.String getText(int,int)>(0, i0);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        virtualinvoke $r2.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label5:
        return r3;

        catch javax.swing.text.BadLocationException from label1 to label3 with label4;
    }

    private static java.util.List getMatches(java.util.regex.Matcher, java.lang.String)
    {
        java.awt.Point $r2;
        java.util.ArrayList $r0;
        java.util.regex.Matcher r1;
        int $i0, $i1, $i2, $i3;
        org.fife.ui.rtextarea.RegExReplaceInfo $r4;
        java.lang.String r3, $r5, $r6;
        boolean $z0;

        r1 := @parameter0: java.util.regex.Matcher;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $r2 = new java.awt.Point;

        $i0 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        $i1 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        if r3 != null goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label3;

     label2:
        $r4 = new org.fife.ui.rtextarea.RegExReplaceInfo;

        $r5 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $i2 = $r2.<java.awt.Point: int x>;

        $i3 = $r2.<java.awt.Point: int y>;

        $r6 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.String getReplacementText(java.util.regex.Matcher,java.lang.CharSequence)>(r1, r3);

        specialinvoke $r4.<org.fife.ui.rtextarea.RegExReplaceInfo: void <init>(java.lang.String,int,int,java.lang.String)>($r5, $i2, $i3, $r6);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static final int getNextMatchPos(java.lang.String, java.lang.String, boolean, boolean, boolean)
    {
        int $i0, $i1;
        java.lang.String r0, r1, $r2, $r3;
        boolean z0, z1, z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        if z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $i1 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: int getNextMatchPosImpl(java.lang.String,java.lang.String,boolean,boolean,boolean)>($r2, $r3, z1, z0, z2);

        return $i1;

     label1:
        $i0 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: int getNextMatchPosImpl(java.lang.String,java.lang.String,boolean,boolean,boolean)>(r0, r1, z1, z0, z2);

        return $i0;
    }

    private static final int getNextMatchPosImpl(java.lang.String, java.lang.String, boolean, boolean, boolean)
    {
        byte b1, $b4;
        int $i0, $i2, i3, i5, $i6, $i8;
        java.lang.String r0, r1;
        boolean z0, z1, $z2, z3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        if z0 == 0 goto label10;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if z1 == 0 goto label01;

        $i2 = 0;

        goto label02;

     label01:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label02:
        i3 = $i2;

        if z1 == 0 goto label03;

        $b4 = 1;

        goto label04;

     label03:
        $b4 = -1;

     label04:
        b1 = $b4;

     label05:
        if z1 == 0 goto label06;

        i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i3);

        goto label07;

     label06:
        i5 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(r1, i3);

     label07:
        $i8 = (int) -1;

        if i5 == $i8 goto label09;

        $z2 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: boolean isWholeWord(java.lang.CharSequence,int,int)>(r0, i5, $i0);

        if $z2 == 0 goto label08;

        return i5;

     label08:
        i3 = i5 + b1;

        goto label05;

     label09:
        return i5;

     label10:
        if z1 == 0 goto label11;

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        goto label12;

     label11:
        $i6 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

     label12:
        return $i6;
    }

    private static java.awt.Point getNextMatchPosRegEx(java.lang.String, java.lang.CharSequence, boolean, boolean, boolean)
    {
        java.lang.CharSequence r1;
        java.lang.Object $r2;
        java.awt.Point $r3;
        java.lang.String r0;
        boolean z0, z1, z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r2 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.Object getNextMatchPosRegExImpl(java.lang.String,java.lang.CharSequence,boolean,boolean,boolean,java.lang.String)>(r0, r1, z0, z1, z2, null);

        $r3 = (java.awt.Point) $r2;

        return $r3;
    }

    private static java.lang.Object getNextMatchPosRegExImpl(java.lang.String, java.lang.CharSequence, boolean, boolean, boolean, java.lang.String)
    {
        java.awt.Point $r9;
        java.util.regex.Matcher $r2;
        byte $b6, $b7;
        java.lang.StringBuffer $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r3, $r7, $r8, r14;
        boolean z0, z1, z2, $z3, $z4;
        java.lang.CharSequence r1;
        java.util.List $r4;
        org.fife.ui.rtextarea.RegExReplaceInfo $r6;
        java.lang.Object $r5;
        java.util.regex.Pattern $r0;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        z2 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        r3 := @parameter5: java.lang.String;

        if z0 == 0 goto label1;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        if z1 == 0 goto label2;

        $b7 = 0;

        goto label3;

     label2:
        $b7 = 66;

     label3:
        $b6 = 8 | $b7;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(r14, $b6);

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        if z2 == 0 goto label5;

        $z4 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z4 == 0 goto label6;

        if r3 != null goto label4;

        $r9 = new java.awt.Point;

        $i4 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $i5 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        specialinvoke $r9.<java.awt.Point: void <init>(int,int)>($i4, $i5);

        return $r9;

     label4:
        $r6 = new org.fife.ui.rtextarea.RegExReplaceInfo;

        $r7 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $i2 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $i3 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        $r8 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.String getReplacementText(java.util.regex.Matcher,java.lang.CharSequence)>($r2, r3);

        specialinvoke $r6.<org.fife.ui.rtextarea.RegExReplaceInfo: void <init>(java.lang.String,int,int,java.lang.String)>($r7, $i2, $i3, $r8);

        return $r6;

     label5:
        $r4 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.util.List getMatches(java.util.regex.Matcher,java.lang.String)>($r2, r3);

        $z3 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        return $r5;

     label6:
        return null;
    }

    private static org.fife.ui.rtextarea.RegExReplaceInfo getRegExReplaceInfo(java.lang.CharSequence, org.fife.ui.rtextarea.SearchContext)
    {
        org.fife.ui.rtextarea.SearchContext r0;
        java.lang.CharSequence r3;
        org.fife.ui.rtextarea.RegExReplaceInfo $r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r2, r6;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: org.fife.ui.rtextarea.SearchContext;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getReplaceWith()>();

        r6 = $r1;

        if $r1 != null goto label1;

        r6 = "";

     label1:
        $r2 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getSearchFor()>();

        $z0 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getSearchForward()>();

        $z1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getMatchCase()>();

        $z2 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getWholeWord()>();

        $r4 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.Object getNextMatchPosRegExImpl(java.lang.String,java.lang.CharSequence,boolean,boolean,boolean,java.lang.String)>($r2, r3, $z0, $z1, $z2, r6);

        $r5 = (org.fife.ui.rtextarea.RegExReplaceInfo) $r4;

        return $r5;
    }

    public static java.lang.String getReplacementText(java.util.regex.Matcher, java.lang.CharSequence)
    {
        java.lang.IndexOutOfBoundsException $r13;
        java.util.regex.Matcher r8;
        boolean z0;
        java.lang.CharSequence r1;
        java.lang.StringBuffer $r5, $r6, $r11, $r12;
        int $i0, $i4, i6, $i7, i8, $i9, i11, i12, i14, i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r2, $r7, $r9, $r10;
        char $c1, $c2, $c3, $c5, $c10, c13;

        r8 := @parameter0: java.util.regex.Matcher;

        r1 := @parameter1: java.lang.CharSequence;

        i11 = 0;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

     label01:
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i11 >= $i0 goto label17;

        $c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i11);

        $i16 = (int) $c1;

        if $i16 != 92 goto label05;

        i12 = i11 + 1;

        $c10 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i12);

        c13 = $c10;

        $i17 = (int) $c10;

        lookupswitch($i17)
        {
            case 110: goto label02;
            case 116: goto label03;
            default: goto label04;
        };

     label02:
        c13 = 10;

        goto label04;

     label03:
        c13 = 9;

     label04:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c13);

        i11 = i12 + 1;

        goto label16;

     label05:
        $i18 = (int) $c1;

        if $i18 != 36 goto label15;

        i14 = i11 + 1;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i14);

        $i19 = (int) $c2;

        i15 = $i19 - 48;

        if i15 < 0 goto label06;

        if i15 <= 9 goto label07;

     label06:
        $r13 = new java.lang.IndexOutOfBoundsException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No group ");

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i14);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r13;

     label07:
        i11 = i14 + 1;

        z0 = 0;

     label08:
        if z0 != 0 goto label13;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i11 < $i4 goto label09;

        goto label13;

     label09:
        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i11);

        $i20 = (int) $c5;

        i6 = $i20 - 48;

        if i6 < 0 goto label13;

        if i6 <= 9 goto label10;

        goto label13;

     label10:
        $i7 = i15 * 10;

        i8 = $i7 + i6;

        $i9 = virtualinvoke r8.<java.util.regex.Matcher: int groupCount()>();

        if $i9 >= i8 goto label11;

        z0 = 1;

        goto label12;

     label11:
        i15 = i8;

        i11 = i11 + 1;

     label12:
        goto label08;

     label13:
        $r10 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(i15);

        if $r10 == null goto label14;

        $r9 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(i15);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label14:
        goto label16;

     label15:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i11 = i11 + 1;

     label16:
        goto label01;

     label17:
        $r2 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static final boolean isWholeWord(java.lang.CharSequence, int, int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r2;
        int i0, $i1, i3, $i4;
        boolean $z0, $z1, $z2, z3, $z4, z5, $z6;
        java.lang.CharSequence r0;
        char $c2, $c5;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

     label01:
        $i1 = i0 - 1;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c2);

        if $z0 != 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z3 = $z2;

     label04:
        goto label06;

     label05:
        $r2 := @caughtexception;

        z3 = 1;

     label06:
        $i4 = i0 + i3;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c5);

        if $z1 != 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z5 = $z4;

     label09:
        goto label11;

     label10:
        $r1 := @caughtexception;

        z5 = 1;

     label11:
        if z3 == 0 goto label12;

        if z5 == 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        return $z6;

        catch java.lang.IndexOutOfBoundsException from label01 to label04 with label05;
        catch java.lang.IndexOutOfBoundsException from label06 to label09 with label10;
    }

    private static int makeMarkAndDotEqual(javax.swing.JTextArea, boolean)
    {
        javax.swing.text.Caret $r1;
        int $i0, $i1, $i2, $i3, $i4;
        javax.swing.JTextArea r0;
        boolean z0;

        r0 := @parameter0: javax.swing.JTextArea;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<javax.swing.JTextArea: javax.swing.text.Caret getCaret()>();

        if z0 == 0 goto label1;

        $i2 = interfaceinvoke $r1.<javax.swing.text.Caret: int getDot()>();

        $i3 = interfaceinvoke $r1.<javax.swing.text.Caret: int getMark()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        goto label2;

     label1:
        $i0 = interfaceinvoke $r1.<javax.swing.text.Caret: int getDot()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Caret: int getMark()>();

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        interfaceinvoke $r1.<javax.swing.text.Caret: void setDot(int)>($i4);

        return $i4;
    }

    private static boolean regexReplace(org.fife.ui.rtextarea.RTextArea, org.fife.ui.rtextarea.SearchContext) throws java.util.regex.PatternSyntaxException
    {
        org.fife.ui.rtextarea.SearchContext r2;
        java.lang.CharSequence $r3;
        org.fife.ui.rtextarea.RTextArea r0;
        javax.swing.text.Caret $r1;
        int $i0, $i1, $i2, i3, i4;
        org.fife.ui.rtextarea.RegExReplaceInfo $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: org.fife.ui.rtextarea.RTextArea;

        r2 := @parameter1: org.fife.ui.rtextarea.SearchContext;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.RTextArea: javax.swing.text.Caret getCaret()>();

        $z0 = virtualinvoke r2.<org.fife.ui.rtextarea.SearchContext: boolean getSearchForward()>();

        $i0 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: int makeMarkAndDotEqual(javax.swing.JTextArea,boolean)>(r0, $z0);

        $r3 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: java.lang.CharSequence getFindInCharSequence(org.fife.ui.rtextarea.RTextArea,int,boolean)>(r0, $i0, $z0);

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: org.fife.ui.rtextarea.RegExReplaceInfo getRegExReplaceInfo(java.lang.CharSequence,org.fife.ui.rtextarea.SearchContext)>($r3, r2);

        if $r4 == null goto label3;

        interfaceinvoke $r1.<javax.swing.text.Caret: void setSelectionVisible(boolean)>(1);

        $i1 = virtualinvoke $r4.<org.fife.ui.rtextarea.RegExReplaceInfo: int getStartIndex()>();

        i3 = $i1;

        $i2 = virtualinvoke $r4.<org.fife.ui.rtextarea.RegExReplaceInfo: int getEndIndex()>();

        i4 = $i2;

        if $z0 == 0 goto label2;

        i3 = $i1 + $i0;

        i4 = $i2 + $i0;

     label2:
        staticinvoke <org.fife.ui.rtextarea.SearchEngine: void selectAndPossiblyCenter(javax.swing.JTextArea,int,int)>(r0, i3, i4);

        $r5 = virtualinvoke $r4.<org.fife.ui.rtextarea.RegExReplaceInfo: java.lang.String getReplacement()>();

        virtualinvoke r0.<org.fife.ui.rtextarea.RTextArea: void replaceSelection(java.lang.String)>($r5);

        return 1;

     label3:
        return 0;
    }

    public static boolean replace(org.fife.ui.rtextarea.RTextArea, org.fife.ui.rtextarea.SearchContext) throws java.util.regex.PatternSyntaxException
    {
        java.lang.Throwable $r4;
        org.fife.ui.rtextarea.SearchContext r0;
        org.fife.ui.rtextarea.RTextArea r2;
        int $i0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1, $z2, $z3;

        r2 := @parameter0: org.fife.ui.rtextarea.RTextArea;

        r0 := @parameter1: org.fife.ui.rtextarea.SearchContext;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getSearchFor()>();

        if $r1 == null goto label01;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 0;

     label02:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void beginAtomicEdit()>();

     label03:
        $z0 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean isRegularExpression()>();

        if $z0 == 0 goto label05;

        $z3 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: boolean regexReplace(org.fife.ui.rtextarea.RTextArea,org.fife.ui.rtextarea.SearchContext)>(r2, r0);

     label04:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        return $z3;

     label05:
        $z1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: boolean getSearchForward()>();

        staticinvoke <org.fife.ui.rtextarea.SearchEngine: int makeMarkAndDotEqual(javax.swing.JTextArea,boolean)>(r2, $z1);

        $z2 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: boolean find(javax.swing.JTextArea,org.fife.ui.rtextarea.SearchContext)>(r2, r0);

        if $z2 == 0 goto label07;

        $r3 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getReplaceWith()>();

        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void replaceSelection(java.lang.String)>($r3);

     label06:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        return 1;

     label07:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        goto label10;

     label08:
        $r4 := @caughtexception;

     label09:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        throw $r4;

     label10:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static int replaceAll(org.fife.ui.rtextarea.RTextArea, org.fife.ui.rtextarea.SearchContext) throws java.util.regex.PatternSyntaxException
    {
        java.lang.Throwable $r3;
        org.fife.ui.rtextarea.SearchContext r0;
        org.fife.ui.rtextarea.RTextArea r2;
        int $i0, $i1, i2;
        java.lang.String $r1;
        boolean $z0;

        r2 := @parameter0: org.fife.ui.rtextarea.RTextArea;

        r0 := @parameter1: org.fife.ui.rtextarea.SearchContext;

        virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: void setSearchForward(boolean)>(1);

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.SearchContext: java.lang.String getSearchFor()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        i2 = 0;

        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void beginAtomicEdit()>();

     label3:
        $i1 = virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: int getCaretPosition()>();

        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void setCaretPosition(int)>(0);

     label4:
        $z0 = staticinvoke <org.fife.ui.rtextarea.SearchEngine: boolean replace(org.fife.ui.rtextarea.RTextArea,org.fife.ui.rtextarea.SearchContext)>(r2, r0);

        if $z0 == 0 goto label5;

        i2 = i2 + 1;

        goto label4;

     label5:
        if i2 != 0 goto label6;

        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void setCaretPosition(int)>($i1);

     label6:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        goto label9;

     label7:
        $r3 := @caughtexception;

     label8:
        virtualinvoke r2.<org.fife.ui.rtextarea.RTextArea: void endAtomicEdit()>();

        throw $r3;

     label9:
        return i2;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static void selectAndPossiblyCenter(javax.swing.JTextArea, int, int)
    {
        javax.swing.text.BadLocationException $r6;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r5;
        javax.swing.JTextArea r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r7;
        java.awt.Rectangle $r1, $r2, $r4, $r8, r9;
        java.awt.Insets $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53;

        r0 := @parameter0: javax.swing.JTextArea;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z5 = 0;

        $z0 = r0 instanceof org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        if $z0 == 0 goto label01;

        r7 = (org.fife.ui.rsyntaxtextarea.RSyntaxTextArea) r0;

        $r5 = virtualinvoke r7.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()>();

        $z2 = virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isCodeFoldingSupportedAndEnabled()>();

        if $z2 == 0 goto label01;

        $z3 = virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean ensureOffsetNotInClosedFold(int)>(i0);

        $z4 = virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean ensureOffsetNotInClosedFold(int)>(i1);

        z5 = $z3 | $z4;

     label01:
        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionStart(int)>(i0);

        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionEnd(int)>(i1);

     label02:
        $r8 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Rectangle modelToView(int)>(i0);

        r9 = $r8;

        if $r8 != null goto label04;

     label03:
        return;

     label04:
        if i1 == i0 goto label05;

        $r4 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Rectangle modelToView(int)>(i1);

        r9 = virtualinvoke $r8.<java.awt.Rectangle: java.awt.Rectangle union(java.awt.Rectangle)>($r4);

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

        virtualinvoke $r6.<javax.swing.text.BadLocationException: void printStackTrace()>();

        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionStart(int)>(i0);

        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionEnd(int)>(i1);

        return;

     label07:
        $r1 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Rectangle getVisibleRect()>();

        if z5 != 0 goto label08;

        $z1 = virtualinvoke $r1.<java.awt.Rectangle: boolean contains(java.awt.Rectangle)>(r9);

        if $z1 == 0 goto label08;

        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionStart(int)>(i0);

        virtualinvoke r0.<javax.swing.JTextArea: void setSelectionEnd(int)>(i1);

        return;

     label08:
        $i6 = r9.<java.awt.Rectangle: int x>;

        $i3 = $r1.<java.awt.Rectangle: int width>;

        $i2 = r9.<java.awt.Rectangle: int width>;

        $i4 = $i3 - $i2;

        $i5 = $i4 / 2;

        $i7 = $i6 - $i5;

        $r1.<java.awt.Rectangle: int x> = $i7;

        $i12 = r9.<java.awt.Rectangle: int y>;

        $i9 = $r1.<java.awt.Rectangle: int height>;

        $i8 = r9.<java.awt.Rectangle: int height>;

        $i10 = $i9 - $i8;

        $i11 = $i10 / 2;

        $i13 = $i12 - $i11;

        $r1.<java.awt.Rectangle: int y> = $i13;

        $r2 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke r0.<javax.swing.JTextArea: java.awt.Insets getInsets()>();

        $i14 = $r3.<java.awt.Insets: int left>;

        $r2.<java.awt.Rectangle: int x> = $i14;

        $i15 = $r3.<java.awt.Insets: int top>;

        $r2.<java.awt.Rectangle: int y> = $i15;

        $i19 = $r2.<java.awt.Rectangle: int width>;

        $i17 = $r3.<java.awt.Insets: int left>;

        $i16 = $r3.<java.awt.Insets: int right>;

        $i18 = $i17 + $i16;

        $i20 = $i19 - $i18;

        $r2.<java.awt.Rectangle: int width> = $i20;

        $i24 = $r2.<java.awt.Rectangle: int height>;

        $i22 = $r3.<java.awt.Insets: int top>;

        $i21 = $r3.<java.awt.Insets: int bottom>;

        $i23 = $i22 + $i21;

        $i25 = $i24 - $i23;

        $r2.<java.awt.Rectangle: int height> = $i25;

        $i27 = $r1.<java.awt.Rectangle: int x>;

        $i26 = $r2.<java.awt.Rectangle: int x>;

        if $i27 >= $i26 goto label09;

        $i53 = $r2.<java.awt.Rectangle: int x>;

        $r1.<java.awt.Rectangle: int x> = $i53;

     label09:
        $i29 = $r1.<java.awt.Rectangle: int x>;

        $i28 = $r1.<java.awt.Rectangle: int width>;

        $i33 = $i29 + $i28;

        $i31 = $r2.<java.awt.Rectangle: int x>;

        $i30 = $r2.<java.awt.Rectangle: int width>;

        $i32 = $i31 + $i30;

        if $i33 <= $i32 goto label10;

        $i49 = $r2.<java.awt.Rectangle: int x>;

        $i48 = $r2.<java.awt.Rectangle: int width>;

        $i51 = $i49 + $i48;

        $i50 = $r1.<java.awt.Rectangle: int width>;

        $i52 = $i51 - $i50;

        $r1.<java.awt.Rectangle: int x> = $i52;

     label10:
        $i35 = $r1.<java.awt.Rectangle: int y>;

        $i34 = $r2.<java.awt.Rectangle: int y>;

        if $i35 >= $i34 goto label11;

        $i47 = $r2.<java.awt.Rectangle: int y>;

        $r1.<java.awt.Rectangle: int y> = $i47;

     label11:
        $i37 = $r1.<java.awt.Rectangle: int y>;

        $i36 = $r1.<java.awt.Rectangle: int height>;

        $i41 = $i37 + $i36;

        $i39 = $r2.<java.awt.Rectangle: int y>;

        $i38 = $r2.<java.awt.Rectangle: int height>;

        $i40 = $i39 + $i38;

        if $i41 <= $i40 goto label12;

        $i43 = $r2.<java.awt.Rectangle: int y>;

        $i42 = $r2.<java.awt.Rectangle: int height>;

        $i45 = $i43 + $i42;

        $i44 = $r1.<java.awt.Rectangle: int height>;

        $i46 = $i45 - $i44;

        $r1.<java.awt.Rectangle: int y> = $i46;

     label12:
        virtualinvoke r0.<javax.swing.JTextArea: void scrollRectToVisible(java.awt.Rectangle)>($r1);

        return;

        catch javax.swing.text.BadLocationException from label02 to label03 with label06;
        catch javax.swing.text.BadLocationException from label04 to label05 with label06;
    }
}
