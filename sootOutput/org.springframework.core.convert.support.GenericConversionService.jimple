public class org.springframework.core.convert.support.GenericConversionService extends java.lang.Object implements org.springframework.core.convert.ConversionService, org.springframework.core.convert.converter.ConverterRegistry
{
    private static final org.springframework.core.convert.converter.GenericConverter NO_OP_CONVERTER;
    private static final org.springframework.core.convert.converter.GenericConverter NO_MATCH;
    private final java.util.Map converters;
    private final java.util.Map converterCache;

    static void <clinit>()
    {
        org.springframework.core.convert.support.GenericConversionService$2 $r1;
        org.springframework.core.convert.support.GenericConversionService$1 $r0;

        $r0 = new org.springframework.core.convert.support.GenericConversionService$1;

        specialinvoke $r0.<org.springframework.core.convert.support.GenericConversionService$1: void <init>()>();

        <org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter NO_OP_CONVERTER> = $r0;

        $r1 = new org.springframework.core.convert.support.GenericConversionService$2;

        specialinvoke $r1.<org.springframework.core.convert.support.GenericConversionService$2: void <init>()>();

        <org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter NO_MATCH> = $r1;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.util.HashMap $r1;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(36);

        r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converters> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache> = $r2;

        return;
    }

    public void addConverter(org.springframework.core.convert.converter.Converter)
    {
        org.springframework.core.convert.converter.Converter r1;
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r2;
        org.springframework.core.convert.support.GenericConversionService$ConverterAdapter $r3;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: org.springframework.core.convert.converter.Converter;

        $r2 = specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter$ConvertiblePair getRequiredTypeInfo(java.lang.Object,java.lang.Class)>(r1, class "Lorg/springframework/core/convert/converter/Converter;");

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to the determine sourceType <S> and targetType <T> which your Converter<S, T> converts between; declare these generic types.");

        throw $r4;

     label1:
        $r3 = new org.springframework.core.convert.support.GenericConversionService$ConverterAdapter;

        specialinvoke $r3.<org.springframework.core.convert.support.GenericConversionService$ConverterAdapter: void <init>(org.springframework.core.convert.support.GenericConversionService,org.springframework.core.convert.converter.GenericConverter$ConvertiblePair,org.springframework.core.convert.converter.Converter)>(r0, $r2, r1);

        virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r3);

        return;
    }

    public void addConverterFactory(org.springframework.core.convert.converter.ConverterFactory)
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r2;
        org.springframework.core.convert.converter.ConverterFactory r1;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.IllegalArgumentException $r4;
        org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter $r3;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: org.springframework.core.convert.converter.ConverterFactory;

        $r2 = specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter$ConvertiblePair getRequiredTypeInfo(java.lang.Object,java.lang.Class)>(r1, class "Lorg/springframework/core/convert/converter/ConverterFactory;");

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to the determine sourceType <S> and targetRangeType R which your ConverterFactory<S, R> converts between; declare these generic types.");

        throw $r4;

     label1:
        $r3 = new org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter;

        specialinvoke $r3.<org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter: void <init>(org.springframework.core.convert.support.GenericConversionService,org.springframework.core.convert.converter.GenericConverter$ConvertiblePair,org.springframework.core.convert.converter.ConverterFactory)>(r0, $r2, r1);

        virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r3);

        return;
    }

    public void addConverter(org.springframework.core.convert.converter.GenericConverter)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.springframework.core.convert.support.GenericConversionService r5;
        org.springframework.core.convert.support.GenericConversionService$MatchableConverters $r8;
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair r4;
        org.springframework.core.convert.converter.GenericConverter r0;
        java.lang.Object $r3;
        java.lang.Class $r6, $r7;
        boolean $z0;

        r5 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: org.springframework.core.convert.converter.GenericConverter;

        $r1 = interfaceinvoke r0.<org.springframework.core.convert.converter.GenericConverter: java.util.Set getConvertibleTypes()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.core.convert.converter.GenericConverter$ConvertiblePair) $r3;

        $r6 = virtualinvoke r4.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.Class getSourceType()>();

        $r7 = virtualinvoke r4.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: java.lang.Class getTargetType()>();

        $r8 = specialinvoke r5.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.support.GenericConversionService$MatchableConverters getMatchableConverters(java.lang.Class,java.lang.Class)>($r6, $r7);

        virtualinvoke $r8.<org.springframework.core.convert.support.GenericConversionService$MatchableConverters: void add(org.springframework.core.convert.converter.GenericConverter)>(r0);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        specialinvoke r5.<org.springframework.core.convert.support.GenericConversionService: void invalidateCache()>();

        return;
    }

    public void removeConvertible(java.lang.Class, java.lang.Class)
    {
        java.util.Map $r2;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Class r1, r3;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r2 = specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map getSourceConverterMap(java.lang.Class)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void invalidateCache()>();

        return;
    }

    public boolean canConvert(java.lang.Class, java.lang.Class)
    {
        org.springframework.core.convert.TypeDescriptor $r2, $r4;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Class r1, r3;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r1);

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r3);

        $z0 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: boolean canConvert(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r4);

        return $z0;
    }

    public java.lang.Object convert(java.lang.Object, java.lang.Class)
    {
        org.springframework.core.convert.TypeDescriptor $r2, $r4;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Object r1, $r5;
        java.lang.Class r3;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r3);

        $r5 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, $r2, $r4);

        return $r5;
    }

    public boolean canConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r1, r2, $r3, $r4;
        org.springframework.core.convert.support.GenericConversionService r0;
        org.springframework.core.convert.converter.GenericConverter $r5;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void assertNotNull(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        $r3 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r1 == $r3 goto label1;

        $r4 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r2 != $r4 goto label2;

     label1:
        return 1;

     label2:
        $r5 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getConverter(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        if $r5 == null goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.ConverterNotFoundException $r8;
        org.springframework.core.convert.TypeDescriptor r1, r2, $r3, $r4;
        org.springframework.core.convert.converter.GenericConverter $r11;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Object r5, $r6, $r10;
        java.lang.Class $r7, $r9;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r5 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void assertNotNull(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        $r3 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r1 != $r3 goto label3;

        if r5 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z2, "The value must be null if sourceType == TypeDescriptor.NULL");

        $r10 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: java.lang.Object convertNullSource(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        return $r10;

     label3:
        $r4 = <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor NULL>;

        if r2 != $r4 goto label4;

        return null;

     label4:
        if r5 == null goto label5;

        $r9 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z1 = virtualinvoke $r9.<java.lang.Class: boolean isInstance(java.lang.Object)>(r5);

        if $z1 != 0 goto label5;

        $z3 = 0;

        goto label6;

     label5:
        $z3 = 1;

     label6:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean)>($z3);

        $r11 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getConverter(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        if $r11 != null goto label9;

        if r5 == null goto label7;

        $r7 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isInstance(java.lang.Object)>(r5);

        if $z0 == 0 goto label8;

     label7:
        return r5;

     label8:
        $r8 = new org.springframework.core.convert.ConverterNotFoundException;

        specialinvoke $r8.<org.springframework.core.convert.ConverterNotFoundException: void <init>(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        throw $r8;

     label9:
        $r6 = staticinvoke <org.springframework.core.convert.support.ConversionUtils: java.lang.Object invokeConverter(org.springframework.core.convert.converter.GenericConverter,java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r11, r5, r1, r2);

        return $r6;
    }

    public java.lang.String toString()
    {
        java.util.ArrayList $r0;
        java.util.Map $r2, r15;
        java.lang.String $r9, $r14, r17;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4, $r7, $r12;
        java.util.Collection $r3, $r6;
        org.springframework.core.convert.support.GenericConversionService r1;
        org.springframework.core.convert.support.GenericConversionService$MatchableConverters r16;
        java.lang.Object $r5, $r8, $r13;
        java.lang.StringBuilder $r10, $r11;

        r1 := @this: org.springframework.core.convert.support.GenericConversionService;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map) $r5;

        $r6 = interfaceinvoke r15.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.springframework.core.convert.support.GenericConversionService$MatchableConverters) $r8;

        $r9 = virtualinvoke r16.<org.springframework.core.convert.support.GenericConversionService$MatchableConverters: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r0);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConversionService converters = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r12 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r13;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label6:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label5;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    protected java.lang.Object convertNullSource(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.ConversionFailedException $r1;
        org.springframework.core.convert.TypeDescriptor r0, r2;
        org.springframework.core.convert.support.GenericConversionService r4;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r4 := @this: org.springframework.core.convert.support.GenericConversionService;

        r2 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r0 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = new org.springframework.core.convert.ConversionFailedException;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A null value cannot be assigned to a primitive type");

        specialinvoke $r1.<org.springframework.core.convert.ConversionFailedException: void <init>(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.lang.Object,java.lang.Throwable)>(r2, r0, null, $r3);

        throw $r1;

     label1:
        return null;
    }

    protected org.springframework.core.convert.converter.GenericConverter getConverter(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey $r0;
        org.springframework.core.convert.support.GenericConversionService r3;
        org.springframework.core.convert.TypeDescriptor r1, r2;
        java.util.Map $r4, $r9, $r10, $r11;
        java.lang.Object $r5;
        org.springframework.core.convert.converter.GenericConverter $r6, $r7, $r8, $r12, r13, $r14;

        r3 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r0 = new org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey;

        specialinvoke $r0.<org.springframework.core.convert.support.GenericConversionService$ConverterCacheKey: void <init>(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        $r4 = r3.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r13 = (org.springframework.core.convert.converter.GenericConverter) $r5;

        if r13 == null goto label3;

        $r12 = <org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter NO_MATCH>;

        if r13 == $r12 goto label1;

        $r14 = r13;

        goto label2;

     label1:
        $r14 = null;

     label2:
        return $r14;

     label3:
        $r6 = specialinvoke r3.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter findConverterForClassPair(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        if $r6 == null goto label4;

        $r11 = r3.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r6);

        return $r6;

     label4:
        $r7 = virtualinvoke r3.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getDefaultConverter(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        if $r7 == null goto label5;

        $r10 = r3.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r7);

        return $r7;

     label5:
        $r9 = r3.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache>;

        $r8 = <org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter NO_MATCH>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r8);

        return null;
    }

    protected org.springframework.core.convert.converter.GenericConverter getDefaultConverter(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r0, r1;
        org.springframework.core.convert.support.GenericConversionService r2;
        org.springframework.core.convert.converter.GenericConverter $r3;
        boolean $z0;

        r2 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $z0 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>(r1);

        if $z0 == 0 goto label1;

        $r3 = <org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter NO_OP_CONVERTER>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private org.springframework.core.convert.converter.GenericConverter$ConvertiblePair getRequiredTypeInfo(java.lang.Object, java.lang.Class)
    {
        java.lang.Class[] $r3;
        org.springframework.core.convert.support.GenericConversionService r6;
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r7;
        java.lang.Object r0;
        java.lang.Class $r1, r2, $r4, $r5;

        r6 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class[] resolveTypeArguments(java.lang.Class,java.lang.Class)>($r1, r2);

        if $r3 == null goto label1;

        $r7 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        $r5 = $r3[0];

        $r4 = $r3[1];

        specialinvoke $r7.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>($r5, $r4);

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;
    }

    private org.springframework.core.convert.support.GenericConversionService$MatchableConverters getMatchableConverters(java.lang.Class, java.lang.Class)
    {
        java.util.Map $r2;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Class r1, r3;
        java.lang.Object $r4;
        org.springframework.core.convert.support.GenericConversionService$MatchableConverters $r5, r6;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r2 = specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map getSourceConverterMap(java.lang.Class)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (org.springframework.core.convert.support.GenericConversionService$MatchableConverters) $r4;

        if r6 != null goto label1;

        $r5 = new org.springframework.core.convert.support.GenericConversionService$MatchableConverters;

        specialinvoke $r5.<org.springframework.core.convert.support.GenericConversionService$MatchableConverters: void <init>(org.springframework.core.convert.support.GenericConversionService$MatchableConverters)>(null);

        r6 = $r5;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

     label1:
        return r6;
    }

    private void invalidateCache()
    {
        org.springframework.core.convert.support.GenericConversionService r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        $r1 = r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converterCache>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    private java.util.Map getSourceConverterMap(java.lang.Class)
    {
        java.util.Map $r2, $r5, r6;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Class r1;
        java.lang.Object $r3;
        java.util.HashMap $r4;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.Map) $r3;

        if r6 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r6 = $r4;

        $r5 = r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converters>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    private void assertNotNull(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.GenericConversionService r2;
        org.springframework.core.convert.TypeDescriptor r0, r1;

        r2 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "The sourceType to convert to is required");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "The targetType to convert to is required");

        return;
    }

    private org.springframework.core.convert.converter.GenericConverter findConverterForClassPair(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        java.util.Map $r5, $r19, $r22;
        org.springframework.core.convert.converter.GenericConverter $r7, $r20, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.core.convert.TypeDescriptor r0, r6;
        int i0, i1, i2, i3;
        java.util.LinkedList $r2, $r17;
        java.lang.Class[] $r8, $r21;
        org.springframework.core.convert.support.GenericConversionService r4;
        java.lang.Class $r1, $r9, $r10, $r11, $r12, $r13, $r14, $r16, r24, r25, r26, r27;
        java.lang.Object $r3, $r15, $r18;

        r4 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r6 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label06;

        $r17 = new java.util.LinkedList;

        specialinvoke $r17.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r17.<java.util.LinkedList: void addFirst(java.lang.Object)>($r1);

        goto label05;

     label01:
        $r18 = virtualinvoke $r17.<java.util.LinkedList: java.lang.Object removeLast()>();

        r24 = (java.lang.Class) $r18;

        $r19 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: java.util.Map getTargetConvertersForSource(java.lang.Class)>(r24);

        $r20 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getMatchingConverterForTarget(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.util.Map)>(r0, r6, $r19);

        if $r20 == null goto label02;

        return $r20;

     label02:
        $r21 = virtualinvoke r24.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r21;

        i1 = 0;

        goto label04;

     label03:
        r25 = $r21[i1];

        virtualinvoke $r17.<java.util.LinkedList: void addFirst(java.lang.Object)>(r25);

        i1 = i1 + 1;

     label04:
        if i1 < i0 goto label03;

     label05:
        $z3 = virtualinvoke $r17.<java.util.LinkedList: boolean isEmpty()>();

        if $z3 == 0 goto label01;

        $r22 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: java.util.Map getTargetConvertersForSource(java.lang.Class)>(class "Ljava/lang/Object;");

        $r23 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getMatchingConverterForTarget(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.util.Map)>(r0, r6, $r22);

        return $r23;

     label06:
        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r1);

        goto label13;

     label07:
        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object removeLast()>();

        r26 = (java.lang.Class) $r3;

        $r5 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: java.util.Map getTargetConvertersForSource(java.lang.Class)>(r26);

        $r7 = specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter getMatchingConverterForTarget(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,java.util.Map)>(r0, r6, $r5);

        if $r7 == null goto label08;

        return $r7;

     label08:
        $z1 = virtualinvoke r26.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label10;

        $r11 = virtualinvoke r26.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolvePrimitiveIfNecessary(java.lang.Class)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r13 == null goto label09;

        $r14 = virtualinvoke $r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r14, 0);

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r16);

        goto label13;

     label09:
        $z2 = virtualinvoke $r12.<java.lang.Class: boolean isInterface()>();

        if $z2 == 0 goto label13;

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>(class "[Ljava/lang/Object;");

        goto label13;

     label10:
        $r8 = virtualinvoke r26.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = lengthof $r8;

        i3 = 0;

        goto label12;

     label11:
        r27 = $r8[i3];

        specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: void addInterfaceHierarchy(java.lang.Class,java.util.LinkedList)>(r27, $r2);

        i3 = i3 + 1;

     label12:
        if i3 < i2 goto label11;

        $r9 = virtualinvoke r26.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r9 == null goto label13;

        $r10 = virtualinvoke r26.<java.lang.Class: java.lang.Class getSuperclass()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r10);

     label13:
        $z4 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        return null;
    }

    private java.util.Map getTargetConvertersForSource(java.lang.Class)
    {
        java.util.Map $r2, r4;
        org.springframework.core.convert.support.GenericConversionService r0;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.core.convert.support.GenericConversionService: java.util.Map converters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r3;

        if r4 != null goto label1;

        r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label1:
        return r4;
    }

    private org.springframework.core.convert.converter.GenericConverter getMatchingConverterForTarget(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor, java.util.Map)
    {
        java.util.Map r4;
        org.springframework.core.convert.converter.GenericConverter $r8, $r21, $r25;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.core.convert.support.GenericConversionService$MatchableConverters $r24, r27, r30;
        org.springframework.core.convert.TypeDescriptor r0, r7;
        int i0, i1, i2, i3;
        java.util.LinkedList $r2, $r18;
        java.lang.Class[] $r9, $r22;
        org.springframework.core.convert.support.GenericConversionService r6;
        java.lang.Class $r1, $r10, $r11, $r12, $r13, $r14, $r15, $r17, r26, r28, r29, r31;
        java.lang.Object $r3, $r5, $r16, $r19, $r20, $r23;

        r6 := @this: org.springframework.core.convert.support.GenericConversionService;

        r7 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r0 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r4 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label06;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r18.<java.util.LinkedList: void addFirst(java.lang.Object)>($r1);

        goto label05;

     label01:
        $r19 = virtualinvoke $r18.<java.util.LinkedList: java.lang.Object removeLast()>();

        r26 = (java.lang.Class) $r19;

        $r20 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        r27 = (org.springframework.core.convert.support.GenericConversionService$MatchableConverters) $r20;

        $r21 = specialinvoke r6.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter matchConverter(org.springframework.core.convert.support.GenericConversionService$MatchableConverters,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r27, r7, r0);

        if $r21 == null goto label02;

        return $r21;

     label02:
        $r22 = virtualinvoke r26.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r22;

        i1 = 0;

        goto label04;

     label03:
        r28 = $r22[i1];

        virtualinvoke $r18.<java.util.LinkedList: void addFirst(java.lang.Object)>(r28);

        i1 = i1 + 1;

     label04:
        if i1 < i0 goto label03;

     label05:
        $z3 = virtualinvoke $r18.<java.util.LinkedList: boolean isEmpty()>();

        if $z3 == 0 goto label01;

        $r23 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Ljava/lang/Object;");

        $r24 = (org.springframework.core.convert.support.GenericConversionService$MatchableConverters) $r23;

        $r25 = specialinvoke r6.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter matchConverter(org.springframework.core.convert.support.GenericConversionService$MatchableConverters,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r24, r7, r0);

        return $r25;

     label06:
        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r1);

        goto label13;

     label07:
        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object removeLast()>();

        r29 = (java.lang.Class) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r29);

        r30 = (org.springframework.core.convert.support.GenericConversionService$MatchableConverters) $r5;

        $r8 = specialinvoke r6.<org.springframework.core.convert.support.GenericConversionService: org.springframework.core.convert.converter.GenericConverter matchConverter(org.springframework.core.convert.support.GenericConversionService$MatchableConverters,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r30, r7, r0);

        if $r8 == null goto label08;

        return $r8;

     label08:
        $z1 = virtualinvoke r29.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label10;

        $r12 = virtualinvoke r29.<java.lang.Class: java.lang.Class getComponentType()>();

        $r13 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolvePrimitiveIfNecessary(java.lang.Class)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r14 == null goto label09;

        $r15 = virtualinvoke $r13.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r16 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r15, 0);

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r17);

        goto label13;

     label09:
        $z2 = virtualinvoke $r13.<java.lang.Class: boolean isInterface()>();

        if $z2 == 0 goto label13;

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>(class "[Ljava/lang/Object;");

        goto label13;

     label10:
        $r9 = virtualinvoke r29.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = lengthof $r9;

        i3 = 0;

        goto label12;

     label11:
        r31 = $r9[i3];

        specialinvoke r6.<org.springframework.core.convert.support.GenericConversionService: void addInterfaceHierarchy(java.lang.Class,java.util.LinkedList)>(r31, $r2);

        i3 = i3 + 1;

     label12:
        if i3 < i2 goto label11;

        $r10 = virtualinvoke r29.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r10 == null goto label13;

        $r11 = virtualinvoke r29.<java.lang.Class: java.lang.Class getSuperclass()>();

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>($r11);

     label13:
        $z4 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        return null;
    }

    private void addInterfaceHierarchy(java.lang.Class, java.util.LinkedList)
    {
        int i0, i1;
        java.lang.Class[] $r2;
        java.lang.Class r1, r3;
        org.springframework.core.convert.support.GenericConversionService r4;
        java.util.LinkedList r0;

        r4 := @this: org.springframework.core.convert.support.GenericConversionService;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.LinkedList;

        virtualinvoke r0.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        specialinvoke r4.<org.springframework.core.convert.support.GenericConversionService: void addInterfaceHierarchy(java.lang.Class,java.util.LinkedList)>(r3, r0);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    private org.springframework.core.convert.converter.GenericConverter matchConverter(org.springframework.core.convert.support.GenericConversionService$MatchableConverters, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r1, r2;
        org.springframework.core.convert.converter.GenericConverter $r3;
        org.springframework.core.convert.support.GenericConversionService r4;
        org.springframework.core.convert.support.GenericConversionService$MatchableConverters r0;

        r4 := @this: org.springframework.core.convert.support.GenericConversionService;

        r0 := @parameter0: org.springframework.core.convert.support.GenericConversionService$MatchableConverters;

        r1 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<org.springframework.core.convert.support.GenericConversionService$MatchableConverters: org.springframework.core.convert.converter.GenericConverter matchConverter(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        return $r3;
    }
}
