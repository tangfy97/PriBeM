class org.jivesoftware.whack.ExternalComponent$1 extends java.lang.Object implements java.lang.Runnable
{
    final org.xmpp.packet.Packet val$packet;
    final org.jivesoftware.whack.ExternalComponent this$0;

    void <init>(org.jivesoftware.whack.ExternalComponent, org.xmpp.packet.Packet)
    {
        org.jivesoftware.whack.ExternalComponent$1 r0;
        org.jivesoftware.whack.ExternalComponent r1;
        org.xmpp.packet.Packet r2;

        r0 := @this: org.jivesoftware.whack.ExternalComponent$1;

        r1 := @parameter0: org.jivesoftware.whack.ExternalComponent;

        r2 := @parameter1: org.xmpp.packet.Packet;

        r0.<org.jivesoftware.whack.ExternalComponent$1: org.jivesoftware.whack.ExternalComponent this$0> = r1;

        r0.<org.jivesoftware.whack.ExternalComponent$1: org.xmpp.packet.Packet val$packet> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.jivesoftware.whack.ExternalComponentManager $r17;
        org.jivesoftware.whack.ExternalComponent$1 r0;
        org.xmpp.component.Log $r18;
        java.util.Map $r7, $r11;
        org.xmpp.packet.IQ$Type $r4, $r5, $r13;
        java.lang.String $r8, $r12;
        boolean $z0;
        org.jivesoftware.whack.ExternalComponent $r6, $r10, $r16, $r19;
        java.lang.Exception $r15;
        org.jivesoftware.whack.IQResultListener $r14;
        org.xmpp.component.Component $r20;
        org.xmpp.packet.Packet $r1, $r2, $r21;
        java.lang.Object $r9;
        org.xmpp.packet.IQ r3;

        r0 := @this: org.jivesoftware.whack.ExternalComponent$1;

        $r1 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.xmpp.packet.Packet val$packet>;

        $z0 = $r1 instanceof org.xmpp.packet.IQ;

        if $z0 == 0 goto label6;

        $r2 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.xmpp.packet.Packet val$packet>;

        r3 = (org.xmpp.packet.IQ) $r2;

        $r4 = virtualinvoke r3.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r5 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type result>;

        if $r5 == $r4 goto label1;

        $r13 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type error>;

        if $r13 != $r4 goto label6;

     label1:
        $r6 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.jivesoftware.whack.ExternalComponent this$0>;

        $r7 = staticinvoke <org.jivesoftware.whack.ExternalComponent: java.util.Map access$200(org.jivesoftware.whack.ExternalComponent)>($r6);

        $r8 = virtualinvoke r3.<org.xmpp.packet.IQ: java.lang.String getID()>();

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        $r14 = (org.jivesoftware.whack.IQResultListener) $r9;

        $r10 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.jivesoftware.whack.ExternalComponent this$0>;

        $r11 = staticinvoke <org.jivesoftware.whack.ExternalComponent: java.util.Map access$300(org.jivesoftware.whack.ExternalComponent)>($r10);

        $r12 = virtualinvoke r3.<org.xmpp.packet.IQ: java.lang.String getID()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r12);

        if $r14 == null goto label6;

     label2:
        interfaceinvoke $r14.<org.jivesoftware.whack.IQResultListener: void receivedAnswer(org.xmpp.packet.IQ)>(r3);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.jivesoftware.whack.ExternalComponent this$0>;

        $r17 = staticinvoke <org.jivesoftware.whack.ExternalComponent: org.jivesoftware.whack.ExternalComponentManager access$400(org.jivesoftware.whack.ExternalComponent)>($r16);

        $r18 = virtualinvoke $r17.<org.jivesoftware.whack.ExternalComponentManager: org.xmpp.component.Log getLog()>();

        interfaceinvoke $r18.<org.xmpp.component.Log: void error(java.lang.String,java.lang.Throwable)>("Error processing answer of remote entity", $r15);

     label5:
        return;

     label6:
        $r19 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.jivesoftware.whack.ExternalComponent this$0>;

        $r20 = staticinvoke <org.jivesoftware.whack.ExternalComponent: org.xmpp.component.Component access$500(org.jivesoftware.whack.ExternalComponent)>($r19);

        $r21 = r0.<org.jivesoftware.whack.ExternalComponent$1: org.xmpp.packet.Packet val$packet>;

        interfaceinvoke $r20.<org.xmpp.component.Component: void processPacket(org.xmpp.packet.Packet)>($r21);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
