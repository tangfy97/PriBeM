class bsh.BSHType extends bsh.SimpleNode implements bsh.BshClassManager$Listener
{
    private java.lang.Class baseType;
    private int arrayDims;
    private java.lang.Class type;
    java.lang.String descriptor;

    void <init>(int)
    {
        int i0;
        bsh.BSHType r0;

        r0 := @this: bsh.BSHType;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public void addArrayDimension()
    {
        int $i0, $i1;
        bsh.BSHType r0;

        r0 := @this: bsh.BSHType;

        $i0 = r0.<bsh.BSHType: int arrayDims>;

        $i1 = $i0 + 1;

        r0.<bsh.BSHType: int arrayDims> = $i1;

        return;
    }

    bsh.SimpleNode getTypeNode()
    {
        bsh.SimpleNode $r2;
        bsh.BSHType r0;
        bsh.Node $r1;

        r0 := @this: bsh.BSHType;

        $r1 = virtualinvoke r0.<bsh.BSHType: bsh.Node jjtGetChild(int)>(0);

        $r2 = (bsh.SimpleNode) $r1;

        return $r2;
    }

    public java.lang.String getTypeDescriptor(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.SimpleNode $r2;
        bsh.BshClassManager $r5;
        boolean $z0, $z1;
        bsh.Interpreter r4;
        bsh.CallStack r23;
        bsh.BSHType r0;
        bsh.BSHAmbiguousName $r3, $r24;
        java.lang.StringBuffer $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22;
        int $i0, i1;
        java.lang.String $r1, $r6, r7, $r10, $r18, $r27, r29, r30;
        bsh.EvalError $r28;
        bsh.BSHPrimitiveType $r25;
        java.lang.Class $r26, r31;

        r0 := @this: bsh.BSHType;

        r23 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        r7 := @parameter2: java.lang.String;

        $r1 = r0.<bsh.BSHType: java.lang.String descriptor>;

        if $r1 == null goto label01;

        $r27 = r0.<bsh.BSHType: java.lang.String descriptor>;

        return $r27;

     label01:
        $r2 = virtualinvoke r0.<bsh.BSHType: bsh.SimpleNode getTypeNode()>();

        $z0 = $r2 instanceof bsh.BSHPrimitiveType;

        if $z0 == 0 goto label02;

        $r25 = (bsh.BSHPrimitiveType) $r2;

        $r26 = $r25.<bsh.BSHPrimitiveType: java.lang.Class type>;

        r29 = staticinvoke <bsh.BSHType: java.lang.String getTypeDescriptor(java.lang.Class)>($r26);

        goto label11;

     label02:
        $r3 = (bsh.BSHAmbiguousName) $r2;

        r30 = $r3.<bsh.BSHAmbiguousName: java.lang.String text>;

        $r5 = virtualinvoke r4.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

        $r6 = virtualinvoke $r5.<bsh.BshClassManager: java.lang.String getClassBeingDefined(java.lang.String)>(r30);

        r31 = null;

        if $r6 != null goto label06;

     label03:
        $r24 = (bsh.BSHAmbiguousName) $r2;

        r31 = virtualinvoke $r24.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r23, r4);

     label04:
        goto label07;

     label05:
        $r28 := @caughtexception;

        goto label07;

     label06:
        r30 = $r6;

     label07:
        if r31 == null goto label08;

        r29 = staticinvoke <bsh.BSHType: java.lang.String getTypeDescriptor(java.lang.Class)>(r31);

        goto label11;

     label08:
        if r7 == null goto label09;

        $z1 = staticinvoke <bsh.Name: boolean isCompound(java.lang.String)>(r30);

        if $z1 == 0 goto label10;

     label09:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r10 = virtualinvoke r30.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r29 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label10:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r18 = virtualinvoke r7.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r29 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

     label11:
        i1 = 0;

        goto label13;

     label12:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        r29 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

     label13:
        $i0 = r0.<bsh.BSHType: int arrayDims>;

        if i1 < $i0 goto label12;

        r0.<bsh.BSHType: java.lang.String descriptor> = r29;

        return r29;

        catch bsh.EvalError from label03 to label04 with label05;
    }

    public java.lang.Class getType(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.SimpleNode $r2;
        bsh.CallStack r3;
        bsh.BshClassManager $r8;
        bsh.BSHType r0;
        int[] r18;
        bsh.BSHAmbiguousName $r5;
        int $i0, $i1;
        boolean $z0;
        bsh.EvalError $r17;
        bsh.Interpreter r4;
        bsh.BSHPrimitiveType $r13;
        java.lang.Exception $r16;
        java.lang.Class $r1, $r6, $r7, $r9, $r10, $r12, $r14, $r15;
        java.lang.Object $r11;

        r0 := @this: bsh.BSHType;

        r3 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        $r1 = r0.<bsh.BSHType: java.lang.Class type>;

        if $r1 == null goto label1;

        $r15 = r0.<bsh.BSHType: java.lang.Class type>;

        return $r15;

     label1:
        $r2 = virtualinvoke r0.<bsh.BSHType: bsh.SimpleNode getTypeNode()>();

        $z0 = $r2 instanceof bsh.BSHPrimitiveType;

        if $z0 == 0 goto label2;

        $r13 = (bsh.BSHPrimitiveType) $r2;

        $r14 = virtualinvoke $r13.<bsh.BSHPrimitiveType: java.lang.Class getType()>();

        r0.<bsh.BSHType: java.lang.Class baseType> = $r14;

        goto label3;

     label2:
        $r5 = (bsh.BSHAmbiguousName) $r2;

        $r6 = virtualinvoke $r5.<bsh.BSHAmbiguousName: java.lang.Class toClass(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        r0.<bsh.BSHType: java.lang.Class baseType> = $r6;

     label3:
        $i0 = r0.<bsh.BSHType: int arrayDims>;

        if $i0 <= 0 goto label7;

     label4:
        $i1 = r0.<bsh.BSHType: int arrayDims>;

        r18 = newarray (int)[$i1];

        $r10 = r0.<bsh.BSHType: java.lang.Class baseType>;

        $r11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r10, r18);

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        r0.<bsh.BSHType: java.lang.Class type> = $r12;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        $r17 = new bsh.EvalError;

        specialinvoke $r17.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Couldn\'t construct array type", r0, r3);

        throw $r17;

     label7:
        $r7 = r0.<bsh.BSHType: java.lang.Class baseType>;

        r0.<bsh.BSHType: java.lang.Class type> = $r7;

     label8:
        $r8 = virtualinvoke r4.<bsh.Interpreter: bsh.BshClassManager getClassManager()>();

        virtualinvoke $r8.<bsh.BshClassManager: void addListener(bsh.BshClassManager$Listener)>(r0);

        $r9 = r0.<bsh.BSHType: java.lang.Class type>;

        return $r9;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public java.lang.Class getBaseType()
    {
        java.lang.Class $r1;
        bsh.BSHType r0;

        r0 := @this: bsh.BSHType;

        $r1 = r0.<bsh.BSHType: java.lang.Class baseType>;

        return $r1;
    }

    public int getArrayDims()
    {
        int $i0;
        bsh.BSHType r0;

        r0 := @this: bsh.BSHType;

        $i0 = r0.<bsh.BSHType: int arrayDims>;

        return $i0;
    }

    public void classLoaderChanged()
    {
        bsh.BSHType r0;

        r0 := @this: bsh.BSHType;

        r0.<bsh.BSHType: java.lang.Class type> = null;

        r0.<bsh.BSHType: java.lang.Class baseType> = null;

        return;
    }

    public static java.lang.String getTypeDescriptor(java.lang.Class)
    {
        java.lang.StringBuffer $r12, $r13, $r15, $r16;
        java.lang.String $r10, $r11, $r14, $r17;
        boolean $z0, $z1;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r1 goto label01;

        return "Z";

     label01:
        $r2 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r2 goto label02;

        return "C";

     label02:
        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r3 goto label03;

        return "B";

     label03:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r4 goto label04;

        return "S";

     label04:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r5 goto label05;

        return "I";

     label05:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r6 goto label06;

        return "J";

     label06:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r7 goto label07;

        return "F";

     label07:
        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r8 goto label08;

        return "D";

     label08:
        $r9 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r9 goto label09;

        return "V";

     label09:
        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 != 0 goto label10;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z1 == 0 goto label11;

     label10:
        return $r11;

     label11:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r14 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;
    }
}
