public class org.apache.batik.parser.DefaultPathHandler extends java.lang.Object implements org.apache.batik.parser.PathHandler
{
    public static final org.apache.batik.parser.PathHandler INSTANCE;

    protected void <init>()
    {
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void startPath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        return;
    }

    public void endPath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        return;
    }

    public void movetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void movetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void closePath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        return;
    }

    public void linetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void linetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void linetoHorizontalRel(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        return;
    }

    public void linetoHorizontalAbs(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        return;
    }

    public void linetoVerticalRel(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        return;
    }

    public void linetoVerticalAbs(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        return;
    }

    public void curvetoCubicRel(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        return;
    }

    public void curvetoCubicAbs(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        return;
    }

    public void curvetoCubicSmoothRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        return;
    }

    public void curvetoCubicSmoothAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        return;
    }

    public void curvetoQuadraticRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        return;
    }

    public void curvetoQuadraticAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        return;
    }

    public void curvetoQuadraticSmoothRel(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void curvetoQuadraticSmoothAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        float f0, f1;
        org.apache.batik.parser.DefaultPathHandler r0;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void arcRel(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3, f4;
        boolean z0, z1;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        return;
    }

    public void arcAbs(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.DefaultPathHandler r0;
        float f0, f1, f2, f3, f4;
        boolean z0, z1;

        r0 := @this: org.apache.batik.parser.DefaultPathHandler;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        return;
    }

    static void <clinit>()
    {
        org.apache.batik.parser.DefaultPathHandler $r0;

        $r0 = new org.apache.batik.parser.DefaultPathHandler;

        specialinvoke $r0.<org.apache.batik.parser.DefaultPathHandler: void <init>()>();

        <org.apache.batik.parser.DefaultPathHandler: org.apache.batik.parser.PathHandler INSTANCE> = $r0;

        return;
    }
}
