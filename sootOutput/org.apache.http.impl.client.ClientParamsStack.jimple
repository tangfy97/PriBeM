public class org.apache.http.impl.client.ClientParamsStack extends org.apache.http.params.AbstractHttpParams
{
    protected final org.apache.http.params.HttpParams applicationParams;
    protected final org.apache.http.params.HttpParams clientParams;
    protected final org.apache.http.params.HttpParams requestParams;
    protected final org.apache.http.params.HttpParams overrideParams;

    public void <init>(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams r1, r2, r3, r4;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        r4 := @parameter3: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.params.AbstractHttpParams: void <init>()>();

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams> = r1;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams> = r2;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams> = r3;

        r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams> = r4;

        return;
    }

    public void <init>(org.apache.http.impl.client.ClientParamsStack)
    {
        org.apache.http.impl.client.ClientParamsStack r0, r1;
        org.apache.http.params.HttpParams $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter0: org.apache.http.impl.client.ClientParamsStack;

        $r2 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>();

        $r3 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>();

        $r4 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>();

        $r5 = virtualinvoke r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>();

        specialinvoke r0.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r2, $r3, $r4, $r5);

        return;
    }

    public void <init>(org.apache.http.impl.client.ClientParamsStack, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.ClientParamsStack r0, r2;
        org.apache.http.params.HttpParams r1, r3, r4, r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        r2 := @parameter0: org.apache.http.impl.client.ClientParamsStack;

        r1 := @parameter1: org.apache.http.params.HttpParams;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        r4 := @parameter3: org.apache.http.params.HttpParams;

        r5 := @parameter4: org.apache.http.params.HttpParams;

        if r1 == null goto label1;

        $r6 = r1;

        goto label2;

     label1:
        $r6 = virtualinvoke r2.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>();

     label2:
        if r3 == null goto label3;

        $r7 = r3;

        goto label4;

     label3:
        $r7 = virtualinvoke r2.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>();

     label4:
        if r4 == null goto label5;

        $r8 = r4;

        goto label6;

     label5:
        $r8 = virtualinvoke r2.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>();

     label6:
        if r5 == null goto label7;

        $r9 = r5;

        goto label8;

     label7:
        $r9 = virtualinvoke r2.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>();

     label8:
        specialinvoke r0.<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7, $r8, $r9);

        return;
    }

    public final org.apache.http.params.HttpParams getApplicationParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        return $r1;
    }

    public final org.apache.http.params.HttpParams getClientParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        return $r1;
    }

    public final org.apache.http.params.HttpParams getRequestParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        return $r1;
    }

    public final org.apache.http.params.HttpParams getOverrideParams()
    {
        org.apache.http.impl.client.ClientParamsStack r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        $r1 = r0.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        return $r1;
    }

    public java.lang.Object getParameter(java.lang.String)
    {
        java.lang.IllegalArgumentException $r10;
        org.apache.http.impl.client.ClientParamsStack r1;
        org.apache.http.params.HttpParams $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r11;
        java.lang.String r0;

        r1 := @this: org.apache.http.impl.client.ClientParamsStack;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name must not be null.");

        throw $r10;

     label1:
        r11 = null;

        $r2 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        if $r2 == null goto label2;

        $r9 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams overrideParams>;

        r11 = interfaceinvoke $r9.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r0);

     label2:
        if r11 != null goto label3;

        $r7 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        if $r7 == null goto label3;

        $r8 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams requestParams>;

        r11 = interfaceinvoke $r8.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r0);

     label3:
        if r11 != null goto label4;

        $r5 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        if $r5 == null goto label4;

        $r6 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams clientParams>;

        r11 = interfaceinvoke $r6.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r0);

     label4:
        if r11 != null goto label5;

        $r3 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        if $r3 == null goto label5;

        $r4 = r1.<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams applicationParams>;

        r11 = interfaceinvoke $r4.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>(r0);

     label5:
        return r11;
    }

    public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object) throws java.lang.UnsupportedOperationException
    {
        org.apache.http.impl.client.ClientParamsStack r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r3;
        java.lang.String r2;

        r1 := @this: org.apache.http.impl.client.ClientParamsStack;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting parameters in a stack is not supported.");

        throw $r0;
    }

    public boolean removeParameter(java.lang.String)
    {
        org.apache.http.impl.client.ClientParamsStack r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;

        r1 := @this: org.apache.http.impl.client.ClientParamsStack;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing parameters in a stack is not supported.");

        throw $r0;
    }

    public org.apache.http.params.HttpParams copy()
    {
        org.apache.http.impl.client.ClientParamsStack r0;

        r0 := @this: org.apache.http.impl.client.ClientParamsStack;

        return r0;
    }
}
