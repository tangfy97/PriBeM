public class org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory extends java.lang.Object
{
    private org.apache.lucene.index.IndexReader reader;
    private java.lang.String fieldName;
    private java.util.HashMap weightBySpanQuery;
    private org.apache.lucene.queryparser.surround.query.BasicQueryFactory qf;

    public void <init>(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r4;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        java.util.HashMap $r3;
        java.lang.String r2;
        org.apache.lucene.index.IndexReader r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.index.IndexReader reader> = r1;

        r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.lang.String fieldName> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery> = $r3;

        r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.queryparser.surround.query.BasicQueryFactory qf> = r4;

        return;
    }

    public org.apache.lucene.index.IndexReader getIndexReader()
    {
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        org.apache.lucene.index.IndexReader $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.index.IndexReader reader>;

        return $r1;
    }

    public java.lang.String getFieldName()
    {
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.lang.String fieldName>;

        return $r1;
    }

    public org.apache.lucene.queryparser.surround.query.BasicQueryFactory getBasicQueryFactory()
    {
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory $r1;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.queryparser.surround.query.BasicQueryFactory qf>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public void clear()
    {
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    protected void addSpanQueryWeighted(org.apache.lucene.search.spans.SpanQuery, float)
    {
        java.lang.Float r5, r6;
        java.util.HashMap $r2, $r4;
        float f0, $f1, $f2;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        java.lang.Object $r3;
        org.apache.lucene.search.spans.SpanQuery r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanQuery;

        f0 := @parameter1: float;

        $r2 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.Float) $r3;

        if r5 == null goto label1;

        $f1 = virtualinvoke r5.<java.lang.Float: float floatValue()>();

        $f2 = $f1 + f0;

        r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        goto label2;

     label1:
        r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

     label2:
        $r4 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return;
    }

    public void addTermWeighted(org.apache.lucene.index.Term, float) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanTermQuery $r3;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory $r2;
        float f0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        r1 := @parameter0: org.apache.lucene.index.Term;

        f0 := @parameter1: float;

        $r2 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.queryparser.surround.query.BasicQueryFactory qf>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.queryparser.surround.query.BasicQueryFactory: org.apache.lucene.search.spans.SpanTermQuery newSpanTermQuery(org.apache.lucene.index.Term)>(r1);

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: void addSpanQueryWeighted(org.apache.lucene.search.spans.SpanQuery,float)>($r3, f0);

        return;
    }

    public void addSpanQuery(org.apache.lucene.search.Query)
    {
        org.apache.lucene.search.Query r0, $r1;
        java.lang.AssertionError $r4;
        float $f0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r2;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.String $r7, $r8, $r10;
        org.apache.lucene.search.spans.SpanQuery $r3;
        boolean $z0;

        r2 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        r0 := @parameter0: org.apache.lucene.search.Query;

        $r1 = <org.apache.lucene.queryparser.surround.query.SrndQuery: org.apache.lucene.search.Query theEmptyLcnQuery>;

        if r0 != $r1 goto label1;

        return;

     label1:
        $z0 = r0 instanceof org.apache.lucene.search.spans.SpanQuery;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected SpanQuery: ");

        $r7 = virtualinvoke r2.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.lang.String getFieldName()>();

        $r8 = virtualinvoke r0.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label2:
        $r3 = (org.apache.lucene.search.spans.SpanQuery) r0;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.Query: float getBoost()>();

        virtualinvoke r2.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: void addSpanQueryWeighted(org.apache.lucene.search.spans.SpanQuery,float)>($r3, $f0);

        return;
    }

    public org.apache.lucene.search.spans.SpanQuery makeSpanClause()
    {
        java.lang.Float $r11;
        org.apache.lucene.search.spans.SpanQuery[] r1;
        java.util.HashMap $r2, $r9;
        int $i0, $i1, $i2, i3;
        org.apache.lucene.search.spans.SpanQuery $r6, r8;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.Set $r3;
        float $f0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r0;
        org.apache.lucene.search.spans.SpanOrQuery $r5;
        java.lang.Object $r7, $r10;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $i0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: int size()>();

        r1 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        $r2 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        i3 = 0;

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.search.spans.SpanQuery) $r7;

        $r9 = r0.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.util.HashMap weightBySpanQuery>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        $r11 = (java.lang.Float) $r10;

        $f0 = virtualinvoke $r11.<java.lang.Float: float floatValue()>();

        virtualinvoke r8.<org.apache.lucene.search.spans.SpanQuery: void setBoost(float)>($f0);

        $i2 = i3;

        i3 = i3 + 1;

        r1[$i2] = r8;

        goto label1;

     label2:
        $i1 = lengthof r1;

        if $i1 != 1 goto label3;

        $r6 = r1[0];

        return $r6;

     label3:
        $r5 = new org.apache.lucene.search.spans.SpanOrQuery;

        specialinvoke $r5.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>(r1);

        return $r5;
    }
}
