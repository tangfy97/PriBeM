public abstract class com.mycila.inject.internal.cglib.reflect.MulticastDelegate extends java.lang.Object implements java.lang.Cloneable
{
    protected java.lang.Object[] targets;
    static java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate;

    protected void <init>()
    {
        java.lang.Object[] $r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[0];

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets> = $r1;

        return;
    }

    public java.util.List getTargets()
    {
        java.util.List $r3;
        java.lang.Object[] $r2;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate r1;
        java.util.ArrayList $r0;

        r1 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public abstract com.mycila.inject.internal.cglib.reflect.MulticastDelegate add(java.lang.Object);

    protected com.mycila.inject.internal.cglib.reflect.MulticastDelegate addHelper(java.lang.Object)
    {
        java.lang.Object[] $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r8;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate r0, $r1;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate;

        r8 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: com.mycila.inject.internal.cglib.reflect.MulticastDelegate newInstance()>();

        $r2 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        $r3 = newarray (java.lang.Object)[$i1];

        $r1.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets> = $r3;

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r5 = $r1.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r4 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i2);

        $r9 = $r1.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r7 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i3 = lengthof $r7;

        $r9[$i3] = r8;

        return $r1;
    }

    public com.mycila.inject.internal.cglib.reflect.MulticastDelegate remove(java.lang.Object)
    {
        java.lang.Object[] $r1, $r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate r0, $r5;
        boolean $z0;
        java.lang.Object r3, $r4;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i0 = lengthof $r1;

        i7 = $i0 - 1;

     label1:
        if i7 < 0 goto label3;

        $r2 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r4 = $r2[i7];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: com.mycila.inject.internal.cglib.reflect.MulticastDelegate newInstance()>();

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i1 = lengthof $r6;

        $i2 = $i1 - 1;

        $r7 = newarray (java.lang.Object)[$i2];

        $r5.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets> = $r7;

        $r9 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r8 = $r5.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i7);

        $r12 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i6 = i7 + 1;

        $r11 = $r5.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $r10 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Object[] targets>;

        $i3 = lengthof $r10;

        $i4 = $i3 - i7;

        $i5 = $i4 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i6, $r11, i7, $i5);

        return $r5;

     label2:
        $i9 = (int) -1;

        i7 = i7 + $i9;

        goto label1;

     label3:
        return r0;
    }

    public abstract com.mycila.inject.internal.cglib.reflect.MulticastDelegate newInstance();

    public static com.mycila.inject.internal.cglib.reflect.MulticastDelegate create(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator $r0;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = new com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: void setInterface(java.lang.Class)>(r1);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.reflect.MulticastDelegate create()>();

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
