public class ucar.nc2.iosp.netcdf3.N3channelWriter extends ucar.nc2.iosp.netcdf3.N3streamWriter
{
    private static int buffer_size;
    private static boolean debugWrite;
    private java.nio.ByteBuffer padddingBB;
    static final boolean $assertionsDisabled;

    public void <init>(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.iosp.netcdf3.N3channelWriter r0;
        ucar.nc2.NetcdfFile r1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3channelWriter;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3streamWriter: void <init>(ucar.nc2.NetcdfFile)>(r1);

        return;
    }

    public void writeDataAll(java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo r40;
        byte $b8, $b9, $b34;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r25, $r26, $r30, $r31, $r32, $r33, $r34, $r36, $r44, $r45, $r49;
        ucar.ma2.Section $r8, $r22, $r46;
        long $l0, l2, $l7, $l10, $l11, $l12, $l13, $l14, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l26, $l27, $l28, $l32, $l33, l35, l36;
        java.lang.AssertionError $r43, $r48;
        ucar.nc2.Structure r42;
        java.lang.String $r17, $r27, $r35, $r37;
        ucar.ma2.InvalidRangeException $r39;
        java.nio.channels.WritableByteChannel r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.ma2.Range $r47;
        java.util.List $r1;
        ucar.nc2.NetcdfFile $r3, $r4, $r5, $r9, $r10;
        ucar.nc2.iosp.netcdf3.N3channelWriter r0;
        int $i1, $i3, $i4, $i5, $i6, i15, $i16, $i17, $i25, $i29, $i30, $i31, i37, $i38;
        ucar.nc2.Variable $r6, r41;
        java.io.PrintStream $r12, $r24, $r29;
        java.util.Iterator $r2;
        java.lang.Object $r21;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3channelWriter;

        r20 := @parameter0: java.nio.channels.WritableByteChannel;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.util.List vinfoList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r21 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r40 = (ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo) $r21;

        $z4 = r40.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: boolean isRecord>;

        if $z4 != 0 goto label04;

        r41 = r40.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: ucar.nc2.Variable v>;

        $z5 = <ucar.nc2.iosp.netcdf3.N3channelWriter: boolean $assertionsDisabled>;

        if $z5 != 0 goto label02;

        $l33 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos>;

        $i31 = r40.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $l32 = (long) $i31;

        $b34 = $l33 cmp $l32;

        if $b34 == 0 goto label02;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();

        throw $r43;

     label02:
        $z6 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: boolean debugPos>;

        if $z6 == 0 goto label03;

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" writing at ");

        $l28 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l28);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        $i29 = r40.<ucar.nc2.iosp.netcdf3.N3streamWriter$Vinfo: int offset>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r35 = virtualinvoke r41.<ucar.nc2.Variable: java.lang.String getName()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label03:
        $r22 = virtualinvoke r41.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $l20 = virtualinvoke r41.<ucar.nc2.Variable: long readToByteChannel(ucar.ma2.Section,java.nio.channels.WritableByteChannel)>($r22, r20);

        $i30 = (int) $l20;

        $l22 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos>;

        $l21 = (long) $i30;

        $l23 = $l22 + $l21;

        r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos> = $l23;

        $l24 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos>;

        $i25 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: int pad(java.nio.channels.WritableByteChannel,int)>(r20, $i30);

        $l26 = (long) $i25;

        $l27 = $l24 + $l26;

        r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: long filePos> = $l27;

        $z7 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: boolean debugPos>;

        if $z7 == 0 goto label04;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vinfo=");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label04:
        goto label01;

     label05:
        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: ucar.nc2.NetcdfFile ncfile>;

        $z1 = virtualinvoke $r3.<ucar.nc2.NetcdfFile: boolean hasUnlimitedDimension()>();

        if $z1 == 0 goto label14;

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r4.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r5 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: ucar.nc2.NetcdfFile ncfile>;

        $r6 = virtualinvoke $r5.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        r42 = (ucar.nc2.Structure) $r6;

        $r46 = new ucar.ma2.Section;

        specialinvoke $r46.<ucar.ma2.Section: void <init>()>();

        $r8 = virtualinvoke $r46.<ucar.ma2.Section: ucar.ma2.Section appendRange(ucar.ma2.Range)>(null);

        l35 = 0L;

        l36 = 0L;

        $l0 = virtualinvoke r42.<ucar.nc2.Structure: long getSize()>();

        $i1 = (int) $l0;

        l2 = (long) $i1;

        $i3 = virtualinvoke r42.<ucar.nc2.Structure: int getElementSize()>();

        $i4 = <ucar.nc2.iosp.netcdf3.N3channelWriter: int buffer_size>;

        $i5 = $i4 / $i3;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(10, $i5);

        i37 = 0;

     label06:
        $l7 = (long) i37;

        $b8 = $l7 cmp l2;

        $i38 = (int) $b8;

        if $i38 >= 0 goto label11;

        $l11 = (long) $i6;

        $l12 = l36 + $l11;

        $l13 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l12);

        $l14 = $l13 - l36;

        i15 = (int) $l14;

        $r47 = new ucar.ma2.Range;

        $i16 = i37 + i15;

        $i17 = $i16 - 1;

        specialinvoke $r47.<ucar.ma2.Range: void <init>(int,int)>(i37, $i17);

        virtualinvoke $r8.<ucar.ma2.Section: ucar.ma2.Section setRange(int,ucar.ma2.Range)>(0, $r47);

     label07:
        $l18 = virtualinvoke r42.<ucar.nc2.Structure: long readToByteChannel(ucar.ma2.Section,java.nio.channels.WritableByteChannel)>($r8, r20);

        l35 = l35 + $l18;

        $l19 = (long) i15;

        l36 = l36 + $l19;

     label08:
        goto label10;

     label09:
        $r39 := @caughtexception;

        virtualinvoke $r39.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        goto label11;

     label10:
        i37 = i37 + $i6;

        goto label06;

     label11:
        $z2 = <ucar.nc2.iosp.netcdf3.N3channelWriter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label12;

        $b9 = l36 cmp l2;

        if $b9 == 0 goto label12;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label12:
        $l10 = l35 / 1000000L;

        $z3 = <ucar.nc2.iosp.netcdf3.N3channelWriter: boolean debugWrite>;

        if $z3 == 0 goto label13;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write record var; total = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Mbytes # recs=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l36);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label13:
        $r9 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r9.<ucar.nc2.NetcdfFile: java.lang.Object sendIospMessage(java.lang.Object)>("RemoveRecordStructure");

        $r10 = r0.<ucar.nc2.iosp.netcdf3.N3channelWriter: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r10.<ucar.nc2.NetcdfFile: void finish()>();

     label14:
        return;

        catch ucar.ma2.InvalidRangeException from label07 to label08 with label09;
    }

    private int pad(java.nio.channels.WritableByteChannel, int) throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3channelWriter r1;
        java.nio.ByteBuffer $r2, $r3, $r4, $r5, $r6;
        int i0, $i1;
        java.nio.channels.WritableByteChannel r0;

        r1 := @this: ucar.nc2.iosp.netcdf3.N3channelWriter;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;

        i0 := @parameter1: int;

        $i1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3header: int padding(int)>(i0);

        if null == r0 goto label2;

        if $i1 <= 0 goto label2;

        $r2 = r1.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.nio.ByteBuffer padddingBB>;

        if $r2 != null goto label1;

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        r1.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.nio.ByteBuffer padddingBB> = $r6;

     label1:
        $r3 = r1.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.nio.ByteBuffer padddingBB>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r4 = r1.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.nio.ByteBuffer padddingBB>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i1);

        $r5 = r1.<ucar.nc2.iosp.netcdf3.N3channelWriter: java.nio.ByteBuffer padddingBB>;

        interfaceinvoke r0.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r5);

     label2:
        return $i1;
    }

    public static void writeFromFile(ucar.nc2.NetcdfFile, java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.io.OutputStream $r4;
        java.io.FileOutputStream $r0;
        ucar.nc2.iosp.netcdf3.N3channelWriter $r5;
        java.io.DataOutputStream $r3;
        int $i0;
        ucar.nc2.Dimension $r7, $r8;
        java.lang.String r1;
        ucar.nc2.NetcdfFile r6;
        java.nio.channels.FileChannel $r2;

        r6 := @parameter0: ucar.nc2.NetcdfFile;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r3 = new java.io.DataOutputStream;

        $r4 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>($r2);

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r5 = new ucar.nc2.iosp.netcdf3.N3channelWriter;

        specialinvoke $r5.<ucar.nc2.iosp.netcdf3.N3channelWriter: void <init>(ucar.nc2.NetcdfFile)>(r6);

        $r7 = virtualinvoke r6.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        if $r7 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r8 = virtualinvoke r6.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        $i0 = virtualinvoke $r8.<ucar.nc2.Dimension: int getLength()>();

     label2:
        virtualinvoke $r5.<ucar.nc2.iosp.netcdf3.N3channelWriter: void writeHeader(java.io.DataOutputStream,int)>($r3, $i0);

        virtualinvoke $r3.<java.io.DataOutputStream: void flush()>();

        virtualinvoke $r5.<ucar.nc2.iosp.netcdf3.N3channelWriter: void writeDataAll(java.nio.channels.WritableByteChannel)>($r2);

        interfaceinvoke $r2.<java.nio.channels.WritableByteChannel: void close()>();

        return;
    }

    public static void writeToChannel(ucar.nc2.NetcdfFile, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.io.OutputStream $r3;
        ucar.nc2.iosp.netcdf3.N3channelWriter $r4;
        java.io.BufferedOutputStream $r1;
        java.io.DataOutputStream $r0;
        int $i0;
        java.nio.channels.WritableByteChannel r2;
        ucar.nc2.Dimension $r6, $r7;
        ucar.nc2.NetcdfFile r5;

        r5 := @parameter0: ucar.nc2.NetcdfFile;

        r2 := @parameter1: java.nio.channels.WritableByteChannel;

        $r0 = new java.io.DataOutputStream;

        $r1 = new java.io.BufferedOutputStream;

        $r3 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>(r2);

        specialinvoke $r1.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r3, 8000);

        specialinvoke $r0.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r4 = new ucar.nc2.iosp.netcdf3.N3channelWriter;

        specialinvoke $r4.<ucar.nc2.iosp.netcdf3.N3channelWriter: void <init>(ucar.nc2.NetcdfFile)>(r5);

        $r6 = virtualinvoke r5.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        if $r6 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r7 = virtualinvoke r5.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        $i0 = virtualinvoke $r7.<ucar.nc2.Dimension: int getLength()>();

     label2:
        virtualinvoke $r4.<ucar.nc2.iosp.netcdf3.N3channelWriter: void writeHeader(java.io.DataOutputStream,int)>($r0, $i0);

        virtualinvoke $r0.<java.io.DataOutputStream: void flush()>();

        virtualinvoke $r4.<ucar.nc2.iosp.netcdf3.N3channelWriter: void writeDataAll(java.nio.channels.WritableByteChannel)>(r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/netcdf3/N3channelWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.netcdf3.N3channelWriter: boolean $assertionsDisabled> = $z1;

        <ucar.nc2.iosp.netcdf3.N3channelWriter: int buffer_size> = 1000000;

        <ucar.nc2.iosp.netcdf3.N3channelWriter: boolean debugWrite> = 0;

        return;
    }
}
