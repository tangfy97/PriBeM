public class com.hp.hpl.jena.sparql.algebra.TransformCopy extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.Transform
{
    public static final boolean COPY_ALWAYS;
    public static final boolean COPY_ONLY_ON_CHANGE;
    private boolean alwaysCopy;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy> = 0;

        r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy> = z0;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuad)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProcedure, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpService, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpService r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDiff, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDiff r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDiff;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpUnion, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpConditional, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r1;
        java.util.List r2;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.OpN,java.util.List)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction, java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.OpN,java.util.List)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.OpExt)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpNull)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r2;
        com.hp.hpl.jena.sparql.algebra.op.OpNull r0;
        com.hp.hpl.jena.sparql.algebra.op.Op0 $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpNull: com.hp.hpl.jena.sparql.algebra.op.Op0 copy()>();

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLabel, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpLabel r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLabel;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpList r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpList;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpOrder, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTopN, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProject, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDistinct, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpReduced, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGroup, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    private com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op0)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.Op0 r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op0;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op0: com.hp.hpl.jena.sparql.algebra.op.Op0 copy()>();

        return $r2;
    }

    private com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op1, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.Op1 r1, $r3;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op1;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        if $r4 != r2 goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        return $r3;
    }

    private com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.Op2, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.Op2 r1, $r6;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        if $r4 != r2 goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        if $r5 != r3 goto label1;

        return r1;

     label1:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.op.Op2 copy(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r3);

        return $r6;
    }

    private com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.OpN, java.util.List)
    {
        java.util.List r2, $r4;
        com.hp.hpl.jena.sparql.algebra.TransformCopy r0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r1, $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpN;

        r2 := @parameter1: java.util.List;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean alwaysCopy>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List getElements()>();

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean equals1(java.util.List,java.util.List)>(r2, $r4);

        if $z1 == 0 goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpN: com.hp.hpl.jena.sparql.algebra.op.OpN copy(java.util.List)>(r2);

        return $r3;
    }

    private com.hp.hpl.jena.sparql.algebra.Op xform(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r1;
        com.hp.hpl.jena.sparql.algebra.op.OpExt r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        java.lang.Exception $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExt: com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean equals1(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.TransformCopy r4;
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r3;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.TransformCopy;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean COPY_ONLY_ON_CHANGE> = 0;

        <com.hp.hpl.jena.sparql.algebra.TransformCopy: boolean COPY_ALWAYS> = 1;

        return;
    }
}
