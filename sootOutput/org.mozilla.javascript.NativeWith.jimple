public class org.mozilla.javascript.NativeWith extends java.lang.Object implements org.mozilla.javascript.Scriptable, org.mozilla.javascript.IdFunctionCall, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.lang.Object FTAG;
    private static final int Id_constructor;
    protected org.mozilla.javascript.Scriptable prototype;
    protected org.mozilla.javascript.Scriptable parent;

    static void init(org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.Scriptable r1, $r2;
        org.mozilla.javascript.IdFunctionObject $r3;
        org.mozilla.javascript.NativeWith $r0;
        java.lang.Object $r4;
        boolean z0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        z0 := @parameter1: boolean;

        $r0 = new org.mozilla.javascript.NativeWith;

        specialinvoke $r0.<org.mozilla.javascript.NativeWith: void <init>()>();

        virtualinvoke $r0.<org.mozilla.javascript.NativeWith: void setParentScope(org.mozilla.javascript.Scriptable)>(r1);

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r1);

        virtualinvoke $r0.<org.mozilla.javascript.NativeWith: void setPrototype(org.mozilla.javascript.Scriptable)>($r2);

        $r3 = new org.mozilla.javascript.IdFunctionObject;

        $r4 = <org.mozilla.javascript.NativeWith: java.lang.Object FTAG>;

        specialinvoke $r3.<org.mozilla.javascript.IdFunctionObject: void <init>(org.mozilla.javascript.IdFunctionCall,java.lang.Object,int,java.lang.String,int,org.mozilla.javascript.Scriptable)>($r0, $r4, 1, "With", 0, r1);

        virtualinvoke $r3.<org.mozilla.javascript.IdFunctionObject: void markAsConstructor(org.mozilla.javascript.Scriptable)>($r0);

        if z0 == 0 goto label1;

        virtualinvoke $r3.<org.mozilla.javascript.IdFunctionObject: void sealObject()>();

     label1:
        virtualinvoke $r3.<org.mozilla.javascript.IdFunctionObject: void exportAsScopeProperty()>();

        return;
    }

    private void <init>()
    {
        org.mozilla.javascript.NativeWith r0;

        r0 := @this: org.mozilla.javascript.NativeWith;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable r1, r2;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable parent> = r1;

        r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype> = r2;

        return;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.NativeWith r0;

        r0 := @this: org.mozilla.javascript.NativeWith;

        return "With";
    }

    public boolean has(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r2, $r3, r4;
        org.mozilla.javascript.NativeWith r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        $r3 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $z0 = interfaceinvoke $r3.<org.mozilla.javascript.Scriptable: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, $r2);

        return $z0;
    }

    public boolean has(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r1, $r2, r3;
        int i0;
        org.mozilla.javascript.NativeWith r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.NativeWith;

        i0 := @parameter0: int;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $z0 = interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: boolean has(int,org.mozilla.javascript.Scriptable)>(i0, $r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r2, r4;
        org.mozilla.javascript.NativeWith r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        if r4 != r0 goto label1;

        r4 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

     label1:
        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r3 = interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r4);

        return $r3;
    }

    public java.lang.Object get(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r1, r3;
        int i0;
        org.mozilla.javascript.NativeWith r0;
        java.lang.Object $r2;

        r0 := @this: org.mozilla.javascript.NativeWith;

        i0 := @parameter0: int;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        if r3 != r0 goto label1;

        r3 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

     label1:
        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r2 = interfaceinvoke $r1.<org.mozilla.javascript.Scriptable: java.lang.Object get(int,org.mozilla.javascript.Scriptable)>(i0, r3);

        return $r2;
    }

    public void put(java.lang.String, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable $r3, r4;
        org.mozilla.javascript.NativeWith r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object;

        if r4 != r0 goto label1;

        r4 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

     label1:
        $r3 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        interfaceinvoke $r3.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r4, r2);

        return;
    }

    public void put(int, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable $r2, r3;
        int i0;
        org.mozilla.javascript.NativeWith r0;
        java.lang.Object r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        i0 := @parameter0: int;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: java.lang.Object;

        if r3 != r0 goto label1;

        r3 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

     label1:
        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, r3, r1);

        return;
    }

    public void delete(java.lang.String)
    {
        org.mozilla.javascript.NativeWith r0;
        java.lang.String r1;
        org.mozilla.javascript.Scriptable $r2;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: void delete(java.lang.String)>(r1);

        return;
    }

    public void delete(int)
    {
        int i0;
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable $r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        interfaceinvoke $r1.<org.mozilla.javascript.Scriptable: void delete(int)>(i0);

        return;
    }

    public org.mozilla.javascript.Scriptable getPrototype()
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable $r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        return $r1;
    }

    public void setPrototype(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype> = r1;

        return;
    }

    public org.mozilla.javascript.Scriptable getParentScope()
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable $r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable parent>;

        return $r1;
    }

    public void setParentScope(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable r1;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable parent> = r1;

        return;
    }

    public java.lang.Object[] getIds()
    {
        org.mozilla.javascript.NativeWith r0;
        org.mozilla.javascript.Scriptable $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.mozilla.javascript.NativeWith;

        $r1 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r2 = interfaceinvoke $r1.<org.mozilla.javascript.Scriptable: java.lang.Object[] getIds()>();

        return $r2;
    }

    public java.lang.Object getDefaultValue(java.lang.Class)
    {
        org.mozilla.javascript.Scriptable $r2;
        org.mozilla.javascript.NativeWith r0;
        java.lang.Class r1;
        java.lang.Object $r3;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $r3 = interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: java.lang.Object getDefaultValue(java.lang.Class)>(r1);

        return $r3;
    }

    public boolean hasInstance(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1, $r2;
        org.mozilla.javascript.NativeWith r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.NativeWith;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        $r2 = r0.<org.mozilla.javascript.NativeWith: org.mozilla.javascript.Scriptable prototype>;

        $z0 = interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: boolean hasInstance(org.mozilla.javascript.Scriptable)>(r1);

        return $z0;
    }

    protected java.lang.Object updateDotQuery(boolean)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.NativeWith r1;
        boolean z0;

        r1 := @this: org.mozilla.javascript.NativeWith;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r8;
        org.mozilla.javascript.Context r5;
        org.mozilla.javascript.EvaluatorException $r3;
        org.mozilla.javascript.NativeWith r4;
        java.lang.RuntimeException $r2;
        org.mozilla.javascript.IdFunctionObject r0;
        org.mozilla.javascript.Scriptable r6, r7;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;

        r4 := @this: org.mozilla.javascript.NativeWith;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r5 := @parameter1: org.mozilla.javascript.Context;

        r6 := @parameter2: org.mozilla.javascript.Scriptable;

        r7 := @parameter3: org.mozilla.javascript.Scriptable;

        r8 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.NativeWith: java.lang.Object FTAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i0 != 1 goto label1;

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.cant.call.indirect", "With");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: java.lang.RuntimeException 'unknown'()>();

        throw $r2;
    }

    static boolean isWithFunction(java.lang.Object)
    {
        org.mozilla.javascript.IdFunctionObject r1;
        int $i0;
        java.lang.Object r0, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.mozilla.javascript.IdFunctionObject;

        if $z0 == 0 goto label3;

        r1 = (org.mozilla.javascript.IdFunctionObject) r0;

        $r2 = <org.mozilla.javascript.NativeWith: java.lang.Object FTAG>;

        $z1 = virtualinvoke r1.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r1.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i0 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    static java.lang.Object newWithSpecial(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.NativeWith $r2;
        org.mozilla.javascript.Scriptable $r1, r5, $r6;
        int $i0;
        java.lang.Object $r4;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void checkDeprecated(org.mozilla.javascript.Context,java.lang.String)>(r0, "With");

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r5);

        $r2 = new org.mozilla.javascript.NativeWith;

        specialinvoke $r2.<org.mozilla.javascript.NativeWith: void <init>()>();

        $i0 = lengthof r3;

        if $i0 != 0 goto label1;

        $r6 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>($r1, "Object");

        goto label2;

     label1:
        $r4 = r3[0];

        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object)>(r0, $r1, $r4);

     label2:
        virtualinvoke $r2.<org.mozilla.javascript.NativeWith: void setPrototype(org.mozilla.javascript.Scriptable)>($r6);

        virtualinvoke $r2.<org.mozilla.javascript.NativeWith: void setParentScope(org.mozilla.javascript.Scriptable)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.NativeWith: int Id_constructor> = 1;

        <org.mozilla.javascript.NativeWith: long serialVersionUID> = 1L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.NativeWith: java.lang.Object FTAG> = $r0;

        return;
    }
}
