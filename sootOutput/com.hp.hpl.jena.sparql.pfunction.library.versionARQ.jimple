public class com.hp.hpl.jena.sparql.pfunction.library.versionARQ extends com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval
{
    static java.lang.String versionStr;
    static com.hp.hpl.jena.graph.Node version;
    static com.hp.hpl.jena.graph.Node arq;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArgType $r1, $r2;
        com.hp.hpl.jena.sparql.pfunction.library.versionARQ r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.versionARQ;

        $r2 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_SINGLE>;

        $r1 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_SINGLE>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval: void <init>(com.hp.hpl.jena.sparql.pfunction.PropFuncArgType,com.hp.hpl.jena.sparql.pfunction.PropFuncArgType)>($r2, $r1);

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node $r3, $r5, $r7, $r8, $r12, $r14, r15;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r2, r6;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r9;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.core.Var $r11, $r13;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r10;
        com.hp.hpl.jena.sparql.pfunction.library.versionARQ r4;

        r4 := @this: com.hp.hpl.jena.sparql.pfunction.library.versionARQ;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r15 := @parameter2: com.hp.hpl.jena.graph.Node;

        r6 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r9 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r5 = <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node arq>;

        $z0 = specialinvoke r4.<com.hp.hpl.jena.sparql.pfunction.library.versionARQ: boolean isSameOrVar(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r5);

        if $z0 != 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r9);

     label1:
        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r3);

        $r14 = <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node arq>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r13, $r14);

     label2:
        $r7 = virtualinvoke r6.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r8 = <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node version>;

        $z2 = specialinvoke r4.<com.hp.hpl.jena.sparql.pfunction.library.versionARQ: boolean isSameOrVar(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, $r8);

        if $z2 != 0 goto label3;

        staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r9);

     label3:
        $z3 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r7);

        $r12 = <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node version>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r11, $r12);

     label4:
        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1, r9);

        return $r10;
    }

    private boolean isSameOrVar(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.pfunction.library.versionARQ r2;

        r2 := @this: com.hp.hpl.jena.sparql.pfunction.library.versionARQ;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        java.lang.String $r0, $r1;
        com.hp.hpl.jena.graph.Node $r3, $r4;

        $r0 = <com.hp.hpl.jena.query.ARQ: java.lang.String VERSION>;

        <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: java.lang.String versionStr> = $r0;

        $r1 = <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: java.lang.String versionStr>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node version> = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>("http://jena.hpl.hp.com/#arq");

        <com.hp.hpl.jena.sparql.pfunction.library.versionARQ: com.hp.hpl.jena.graph.Node arq> = $r4;

        return;
    }
}
