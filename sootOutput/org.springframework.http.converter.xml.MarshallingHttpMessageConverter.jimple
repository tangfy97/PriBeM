public class org.springframework.http.converter.xml.MarshallingHttpMessageConverter extends org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter
{
    private org.springframework.oxm.Marshaller marshaller;
    private org.springframework.oxm.Unmarshaller unmarshaller;

    public void <init>()
    {
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void <init>()>();

        return;
    }

    public void <init>(org.springframework.oxm.Marshaller)
    {
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Unmarshaller $r2;
        org.springframework.oxm.Marshaller r1;
        boolean $z0;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r1 := @parameter0: org.springframework.oxm.Marshaller;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Marshaller must not be null");

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Marshaller marshaller> = r1;

        $z0 = r1 instanceof org.springframework.oxm.Unmarshaller;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.oxm.Unmarshaller) r1;

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller> = $r2;

     label1:
        return;
    }

    public void <init>(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)
    {
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Unmarshaller r2;
        org.springframework.oxm.Marshaller r1;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r1 := @parameter0: org.springframework.oxm.Marshaller;

        r2 := @parameter1: org.springframework.oxm.Unmarshaller;

        specialinvoke r0.<org.springframework.http.converter.xml.AbstractXmlHttpMessageConverter: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Marshaller must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "Unmarshaller must not be null");

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Marshaller marshaller> = r1;

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller> = r2;

        return;
    }

    public void setMarshaller(org.springframework.oxm.Marshaller)
    {
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Marshaller r1;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r1 := @parameter0: org.springframework.oxm.Marshaller;

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Marshaller marshaller> = r1;

        return;
    }

    public void setUnmarshaller(org.springframework.oxm.Unmarshaller)
    {
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Unmarshaller r1;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r1 := @parameter0: org.springframework.oxm.Unmarshaller;

        r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller> = r1;

        return;
    }

    public boolean supports(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Unmarshaller $r2;
        boolean $z0;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller>;

        $z0 = interfaceinvoke $r2.<org.springframework.oxm.Unmarshaller: boolean supports(java.lang.Class)>(r1);

        return $z0;
    }

    protected java.lang.Object readFromSource(java.lang.Class, org.springframework.http.HttpHeaders, javax.xml.transform.Source) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        org.springframework.http.HttpHeaders r13;
        javax.xml.transform.Source r2;
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.oxm.Unmarshaller $r1, $r3;
        org.springframework.beans.TypeMismatchException $r6;
        org.springframework.http.converter.HttpMessageNotReadableException $r8;
        java.lang.Object $r4;
        java.lang.Class r5;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r5 := @parameter0: java.lang.Class;

        r13 := @parameter1: org.springframework.http.HttpHeaders;

        r2 := @parameter2: javax.xml.transform.Source;

        $r1 = r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "Property \'unmarshaller\' is required");

     label1:
        $r3 = r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Unmarshaller unmarshaller>;

        $r4 = interfaceinvoke $r3.<org.springframework.oxm.Unmarshaller: java.lang.Object unmarshal(javax.xml.transform.Source)>(r2);

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r6 = new org.springframework.beans.TypeMismatchException;

        specialinvoke $r6.<org.springframework.beans.TypeMismatchException: void <init>(java.lang.Object,java.lang.Class)>($r4, r5);

        throw $r6;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not read [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r8;

        catch org.springframework.oxm.UnmarshallingFailureException from label1 to label2 with label3;
    }

    protected void writeToResult(java.lang.Object, org.springframework.http.HttpHeaders, javax.xml.transform.Result) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.springframework.http.HttpHeaders r11;
        javax.xml.transform.Result r3;
        org.springframework.http.converter.xml.MarshallingHttpMessageConverter r0;
        org.springframework.http.converter.HttpMessageNotWritableException $r6;
        org.springframework.oxm.Marshaller $r1, $r4;
        java.lang.Object r2;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.springframework.http.converter.xml.MarshallingHttpMessageConverter;

        r2 := @parameter0: java.lang.Object;

        r11 := @parameter1: org.springframework.http.HttpHeaders;

        r3 := @parameter2: javax.xml.transform.Result;

        $r1 = r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Marshaller marshaller>;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "Property \'marshaller\' is required");

     label1:
        $r4 = r0.<org.springframework.http.converter.xml.MarshallingHttpMessageConverter: org.springframework.oxm.Marshaller marshaller>;

        interfaceinvoke $r4.<org.springframework.oxm.Marshaller: void marshal(java.lang.Object,javax.xml.transform.Result)>(r2, r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not write [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

     label4:
        return;

        catch org.springframework.oxm.MarshallingFailureException from label1 to label2 with label3;
    }
}
