public class com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase extends com.hp.hpl.jena.sparql.lang.ParserBase
{
    private com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.ParserBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler> = null;

        return;
    }

    public void setHandler(com.hp.hpl.jena.sparql.sse.lang.ParseHandler)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.lang.ParseHandler;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler> = r1;

        return;
    }

    protected void parseStart()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void parseStart()>();

        return;
    }

    protected void parseFinish()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void parseFinish()>();

        return;
    }

    protected void listStart(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void listStart(int,int)>(i0, i1);

        return;
    }

    protected void listFinish(int, int)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void listFinish(int,int)>(i0, i1);

        return;
    }

    protected void emitBNode(int, int, java.lang.String)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitBNode(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    protected void emitIRI(int, int, java.lang.String)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitIRI(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    protected void emitPName(int, int, java.lang.String)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitPName(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    protected void emitSymbol(int, int, java.lang.String)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitSymbol(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    protected void emitVar(int, int, java.lang.String)
    {
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r2;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitVar(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    protected void emitLiteral(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandler $r5;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r2;
        int i0, i1;
        java.lang.String r0, r1, r3, r4;

        r2 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        if r0 == null goto label2;

        if r1 != null goto label1;

        if r4 == null goto label3;

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: void throwParseException(java.lang.String,int,int)>("Internal error (lang and datatype)", i0, i1);

        goto label3;

     label2:
        if r1 == null goto label3;

        if r4 == null goto label3;

        staticinvoke <com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: void throwParseException(java.lang.String,int,int)>("Internal error (datatype from IRI and pname)", i0, i1);

     label3:
        $r5 = r2.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: com.hp.hpl.jena.sparql.sse.lang.ParseHandler handler>;

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.sse.lang.ParseHandler: void emitLiteral(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r3, r0, r1, r4);

        return;
    }

    protected void emitLiteralInteger(int, int, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        int i0, i1;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: void emitLiteral(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, null, $r3, null);

        return;
    }

    protected void emitLiteralDecimal(int, int, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        int i0, i1;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: void emitLiteral(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, null, $r3, null);

        return;
    }

    protected void emitLiteralDouble(int, int, java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        int i0, i1;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParserSSEBase: void emitLiteral(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(i0, i1, r1, null, $r3, null);

        return;
    }

    public static void throwParseException(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.sse.SSEParseException $r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        java.lang.String r7, $r9;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.SSEParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.SSEParseException: void <init>(java.lang.String,int,int)>($r9, i0, i1);

        throw $r0;
    }
}
