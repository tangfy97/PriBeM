public class com.jidesoft.range.AggregatedRange extends java.lang.Object implements com.jidesoft.range.Range
{
    private java.lang.Double positiveSum;
    private int positiveCount;
    private java.lang.Double negativeSum;
    private int negativeCount;
    private java.util.List positions;

    public void <init>()
    {
        com.jidesoft.range.AggregatedRange r0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        specialinvoke r0.<com.jidesoft.range.AggregatedRange: void <init>(java.util.Collection)>(null);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.List $r2;
        java.util.Collection r1;
        com.jidesoft.range.AggregatedRange r0;
        java.util.ArrayList $r3;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label2:
        r0.<com.jidesoft.range.AggregatedRange: java.util.List positions> = $r3;

        $r2 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        return;
    }

    public java.lang.Double lower()
    {
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: double minimum()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public java.lang.Double upper()
    {
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: double maximum()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public int getCount()
    {
        int $i0;
        com.jidesoft.range.AggregatedRange r0;
        java.util.List $r1;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public double getPositiveSum()
    {
        java.lang.Double $r1, $r2;
        com.jidesoft.range.AggregatedRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double positiveSum>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.jidesoft.range.AggregatedRange: void updatePositives()>();

     label1:
        $r2 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double positiveSum>;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public int getPositiveCount()
    {
        int $i0;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double positiveSum>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.jidesoft.range.AggregatedRange: void updatePositives()>();

     label1:
        $i0 = r0.<com.jidesoft.range.AggregatedRange: int positiveCount>;

        return $i0;
    }

    private void updatePositives()
    {
        java.util.Iterator $r4;
        java.lang.Double $r2;
        java.util.List $r1, $r3;
        byte $b0;
        com.jidesoft.range.Positionable r6;
        int $i1, $i2, $i3;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object $r5;
        boolean $z0;
        double $d0, $d1, d2;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        d2 = 0.0;

        r0.<com.jidesoft.range.AggregatedRange: int positiveCount> = 0;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        if $r1 == null goto label3;

        $r3 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jidesoft.range.Positionable) $r5;

        $d0 = interfaceinvoke r6.<com.jidesoft.range.Positionable: double position()>();

        $b0 = $d0 cmpl 0.0;

        $i3 = (int) $b0;

        if $i3 < 0 goto label2;

        $d1 = interfaceinvoke r6.<com.jidesoft.range.Positionable: double position()>();

        d2 = d2 + $d1;

        $i1 = r0.<com.jidesoft.range.AggregatedRange: int positiveCount>;

        $i2 = $i1 + 1;

        r0.<com.jidesoft.range.AggregatedRange: int positiveCount> = $i2;

     label2:
        goto label1;

     label3:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        r0.<com.jidesoft.range.AggregatedRange: java.lang.Double positiveSum> = $r2;

        return;
    }

    public double getNegativeSum()
    {
        java.lang.Double $r1, $r2;
        com.jidesoft.range.AggregatedRange r0;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double negativeSum>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.jidesoft.range.AggregatedRange: void updateNegatives()>();

     label1:
        $r2 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double negativeSum>;

        $d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public int getNegativeCount()
    {
        int $i0;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.lang.Double negativeSum>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.jidesoft.range.AggregatedRange: void updateNegatives()>();

     label1:
        $i0 = r0.<com.jidesoft.range.AggregatedRange: int negativeCount>;

        return $i0;
    }

    private void updateNegatives()
    {
        java.util.Iterator $r4;
        java.lang.Double $r2;
        java.util.List $r1, $r3;
        byte $b0;
        com.jidesoft.range.Positionable r6;
        int $i1, $i2, $i3;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object $r5;
        boolean $z0;
        double $d0, $d1, d2;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        d2 = 0.0;

        r0.<com.jidesoft.range.AggregatedRange: int negativeCount> = 0;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        if $r1 == null goto label3;

        $r3 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jidesoft.range.Positionable) $r5;

        $d0 = interfaceinvoke r6.<com.jidesoft.range.Positionable: double position()>();

        $b0 = $d0 cmpg 0.0;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label2;

        $d1 = interfaceinvoke r6.<com.jidesoft.range.Positionable: double position()>();

        d2 = d2 + $d1;

        $i1 = r0.<com.jidesoft.range.AggregatedRange: int negativeCount>;

        $i2 = $i1 + 1;

        r0.<com.jidesoft.range.AggregatedRange: int negativeCount> = $i2;

     label2:
        goto label1;

     label3:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        r0.<com.jidesoft.range.AggregatedRange: java.lang.Double negativeSum> = $r2;

        return;
    }

    public double minimum()
    {
        java.util.List $r1, $r2, $r3;
        com.jidesoft.range.Positionable r5;
        int $i0;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object $r4;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return #-Infinity;

     label2:
        $r3 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (com.jidesoft.range.Positionable) $r4;

        $d0 = interfaceinvoke r5.<com.jidesoft.range.Positionable: double position()>();

        return $d0;
    }

    public double maximum()
    {
        java.util.List $r1, $r2, $r3, $r4;
        com.jidesoft.range.Positionable r6;
        int $i0, $i1, $i2;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object $r5;
        double $d0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        if $r1 == null goto label1;

        $r2 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return #Infinity;

     label2:
        $r4 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $r3 = r0.<com.jidesoft.range.AggregatedRange: java.util.List positions>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        r6 = (com.jidesoft.range.Positionable) $r5;

        $d0 = interfaceinvoke r6.<com.jidesoft.range.Positionable: double position()>();

        return $d0;
    }

    public double size()
    {
        com.jidesoft.range.AggregatedRange r0;
        double $d0, $d1, $d2;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $d0 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: double maximum()>();

        $d1 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: double minimum()>();

        $d2 = $d0 - $d1;

        return $d2;
    }

    public boolean contains(java.lang.Double)
    {
        java.lang.Double r0;
        byte $b0, $b1;
        int $i2, $i3;
        com.jidesoft.range.AggregatedRange r1;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r1 := @this: com.jidesoft.range.AggregatedRange;

        r0 := @parameter0: java.lang.Double;

        if r0 == null goto label1;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r1.<com.jidesoft.range.AggregatedRange: double minimum()>();

        $b0 = $d0 cmpl $d1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $d2 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d3 = virtualinvoke r1.<com.jidesoft.range.AggregatedRange: double maximum()>();

        $b1 = $d2 cmpg $d3;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void adjust(java.lang.Double, java.lang.Double)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Double r2, r3;
        com.jidesoft.range.AggregatedRange r1;

        r1 := @this: com.jidesoft.range.AggregatedRange;

        r2 := @parameter0: java.lang.Double;

        r3 := @parameter1: java.lang.Double;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("An aggregated range is immutable");

        throw $r0;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.lang.UnsupportedOperationException $r0;
        com.jidesoft.range.AggregatedRange r1;
        java.beans.PropertyChangeListener r2;

        r1 := @this: com.jidesoft.range.AggregatedRange;

        r2 := @parameter0: java.beans.PropertyChangeListener;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("An aggregated range is immutable");

        throw $r0;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.lang.UnsupportedOperationException $r0;
        com.jidesoft.range.AggregatedRange r1;
        java.beans.PropertyChangeListener r2;

        r1 := @this: com.jidesoft.range.AggregatedRange;

        r2 := @parameter0: java.beans.PropertyChangeListener;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("An aggregated range is immutable");

        throw $r0;
    }

    public volatile boolean contains(java.lang.Object)
    {
        java.lang.Double $r2;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $z0 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: boolean contains(java.lang.Double)>($r2);

        return $z0;
    }

    public volatile void adjust(java.lang.Object, java.lang.Object)
    {
        java.lang.Double $r3, $r4;
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Object r1, r2;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (java.lang.Double) r2;

        virtualinvoke r0.<com.jidesoft.range.AggregatedRange: void adjust(java.lang.Double,java.lang.Double)>($r4, $r3);

        return;
    }

    public volatile java.lang.Object upper()
    {
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: java.lang.Double upper()>();

        return $r1;
    }

    public volatile java.lang.Object lower()
    {
        com.jidesoft.range.AggregatedRange r0;
        java.lang.Double $r1;

        r0 := @this: com.jidesoft.range.AggregatedRange;

        $r1 = virtualinvoke r0.<com.jidesoft.range.AggregatedRange: java.lang.Double lower()>();

        return $r1;
    }
}
