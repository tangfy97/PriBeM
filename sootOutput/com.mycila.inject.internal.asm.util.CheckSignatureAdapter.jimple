public class com.mycila.inject.internal.asm.util.CheckSignatureAdapter extends java.lang.Object implements com.mycila.inject.internal.asm.signature.SignatureVisitor
{
    public static final int CLASS_SIGNATURE;
    public static final int METHOD_SIGNATURE;
    public static final int TYPE_SIGNATURE;
    private final int type;
    private int state;
    private boolean canBeVoid;
    private final com.mycila.inject.internal.asm.signature.SignatureVisitor sv;

    public void <init>(int, com.mycila.inject.internal.asm.signature.SignatureVisitor)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        int i0;
        com.mycila.inject.internal.asm.signature.SignatureVisitor r1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.signature.SignatureVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type> = i0;

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 1;

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv> = r1;

        return;
    }

    public void visitFormalTypeParameter(java.lang.String)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r1;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        r2 := @parameter0: java.lang.String;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 == 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 1 goto label2;

        $i2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i2 == 2 goto label2;

        $i3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i3 == 4 goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label2:
        staticinvoke <com.mycila.inject.internal.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,java.lang.String)>(r2, "formal type parameter");

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 2;

        $r4 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r4 == null goto label3;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitFormalTypeParameter(java.lang.String)>(r2);

     label3:
        return;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitClassBound()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r3;
        java.lang.IllegalStateException $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2, $r5;
        int $i0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 4;

        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitClassBound()>();

     label3:
        $r3 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r3.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r3;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitInterfaceBound()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r3;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2, $r5;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 4 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitInterfaceBound()>();

     label3:
        $r3 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r3.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r3;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitSuperclass()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3, $r5;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 0 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        $i2 = $i1 & 7;

        if $i2 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 8;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitSuperclass()>();

     label4:
        $r4 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r4.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r4;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitInterface()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r3;
        java.lang.IllegalStateException $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2, $r5;
        int $i0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 8 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitInterface()>();

     label3:
        $r3 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r3.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r3;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitParameterType()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3, $r5;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 1 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        $i2 = $i1 & 23;

        if $i2 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 16;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitParameterType()>();

     label4:
        $r4 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r4.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r4;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitReturnType()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3, $r5;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 1 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        $i2 = $i1 & 23;

        if $i2 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 32;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitReturnType()>();

     label4:
        $r4 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r4.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        $r4.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: boolean canBeVoid> = 1;

        return $r4;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitExceptionType()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r3;
        java.lang.IllegalStateException $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2, $r5;
        int $i0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 32 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitExceptionType()>();

     label3:
        $r3 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r3.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r3;
    }

    public void visitBaseType(char)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r7;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r3, $r4;
        char c2;
        java.lang.IllegalArgumentException $r8, $r9;
        int $i0, $i1, $i3, $i4, $i5, $i7;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        c2 := @parameter0: char;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 1 goto label2;

     label1:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label2:
        $i4 = (int) c2;

        if $i4 != 86 goto label3;

        $z0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: boolean canBeVoid>;

        if $z0 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label3:
        $r2 = "ZCBSIFJD";

        $i5 = (int) c2;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i5);

        $i7 = (int) -1;

        if $i3 != $i7 goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label4:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 64;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r3 == null goto label5;

        $r4 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitBaseType(char)>(c2);

     label5:
        return;
    }

    public void visitTypeVariable(java.lang.String)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r1;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r3, $r4;
        int $i0, $i1;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        r2 := @parameter0: java.lang.String;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label2:
        staticinvoke <com.mycila.inject.internal.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,java.lang.String)>(r2, "type variable");

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 64;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r3 == null goto label3;

        $r4 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitTypeVariable(java.lang.String)>(r2);

     label3:
        return;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitArrayType()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r4;
        java.lang.IllegalStateException $r1;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3, $r5;
        int $i0, $i1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label2:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 64;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitArrayType()>();

     label4:
        $r4 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r4.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r5);

        return $r4;
    }

    public void visitClassType(java.lang.String)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r1;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r3, $r4;
        int $i0, $i1;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        r2 := @parameter0: java.lang.String;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int type>;

        if $i0 != 2 goto label1;

        $i1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i1 == 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label2:
        staticinvoke <com.mycila.inject.internal.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r2, "class name");

        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 128;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r3 == null goto label3;

        $r4 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitClassType(java.lang.String)>(r2);

     label3:
        return;
    }

    public void visitInnerClassType(java.lang.String)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r4;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3;
        int $i0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 128 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        staticinvoke <com.mycila.inject.internal.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,java.lang.String)>(r1, "inner class name");

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 == null goto label2;

        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitInnerClassType(java.lang.String)>(r1);

     label2:
        return;
    }

    public void visitTypeArgument()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r3;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2;
        int $i0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 128 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 == null goto label2;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitTypeArgument()>();

     label2:
        return;
    }

    public com.mycila.inject.internal.asm.signature.SignatureVisitor visitTypeArgument(char)
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0, $r10;
        java.lang.IllegalStateException $r8;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r2, $r3, $r7;
        char c1;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i2, $i3, $i5;
        java.lang.String $r1;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        c1 := @parameter0: char;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 128 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        $r1 = "+-=";

        $i3 = (int) c1;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i3);

        $i5 = (int) -1;

        if $i2 != $i5 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r2 != null goto label3;

        $r7 = null;

        goto label4;

     label3:
        $r3 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        $r7 = interfaceinvoke $r3.<com.mycila.inject.internal.asm.signature.SignatureVisitor: com.mycila.inject.internal.asm.signature.SignatureVisitor visitTypeArgument(char)>(c1);

     label4:
        $r10 = new com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        specialinvoke $r10.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: void <init>(int,com.mycila.inject.internal.asm.signature.SignatureVisitor)>(2, $r7);

        return $r10;
    }

    public void visitEnd()
    {
        com.mycila.inject.internal.asm.util.CheckSignatureAdapter r0;
        java.lang.IllegalStateException $r3;
        com.mycila.inject.internal.asm.signature.SignatureVisitor $r1, $r2;
        int $i0;

        r0 := @this: com.mycila.inject.internal.asm.util.CheckSignatureAdapter;

        $i0 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state>;

        if $i0 == 128 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int state> = 256;

        $r1 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        if $r1 == null goto label2;

        $r2 = r0.<com.mycila.inject.internal.asm.util.CheckSignatureAdapter: com.mycila.inject.internal.asm.signature.SignatureVisitor sv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.signature.SignatureVisitor: void visitEnd()>();

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int TYPE_SIGNATURE> = 2;

        <com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int METHOD_SIGNATURE> = 1;

        <com.mycila.inject.internal.asm.util.CheckSignatureAdapter: int CLASS_SIGNATURE> = 0;

        return;
    }
}
