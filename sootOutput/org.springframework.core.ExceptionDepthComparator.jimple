public class org.springframework.core.ExceptionDepthComparator extends java.lang.Object implements java.util.Comparator
{
    private final java.lang.Class targetException;

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.Class $r2;
        org.springframework.core.ExceptionDepthComparator r0;

        r0 := @this: org.springframework.core.ExceptionDepthComparator;

        r1 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target exception must not be null");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.springframework.core.ExceptionDepthComparator: java.lang.Class targetException> = $r2;

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.core.ExceptionDepthComparator r0;

        r0 := @this: org.springframework.core.ExceptionDepthComparator;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Target exception type must not be null");

        r0.<org.springframework.core.ExceptionDepthComparator: java.lang.Class targetException> = r1;

        return;
    }

    public int compare(java.lang.Class, java.lang.Class)
    {
        org.springframework.core.ExceptionDepthComparator r0;
        int $i0, $i1, $i2;
        java.lang.Class r1, $r2, r3, $r4;

        r0 := @this: org.springframework.core.ExceptionDepthComparator;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r2 = r0.<org.springframework.core.ExceptionDepthComparator: java.lang.Class targetException>;

        $i0 = specialinvoke r0.<org.springframework.core.ExceptionDepthComparator: int getDepth(java.lang.Class,java.lang.Class,int)>(r1, $r2, 0);

        $r4 = r0.<org.springframework.core.ExceptionDepthComparator: java.lang.Class targetException>;

        $i1 = specialinvoke r0.<org.springframework.core.ExceptionDepthComparator: int getDepth(java.lang.Class,java.lang.Class,int)>(r3, $r4, 0);

        $i2 = $i0 - $i1;

        return $i2;
    }

    private int getDepth(java.lang.Class, java.lang.Class, int)
    {
        org.springframework.core.ExceptionDepthComparator r3;
        int i0, $i1, $i2;
        java.lang.Class r0, r1, $r2, $r4;
        boolean $z0, $z1;

        r3 := @this: org.springframework.core.ExceptionDepthComparator;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return i0;

     label1:
        $r2 = class "Ljava/lang/Throwable;";

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 2147483647;

     label2:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $i1 = i0 + 1;

        $i2 = specialinvoke r3.<org.springframework.core.ExceptionDepthComparator: int getDepth(java.lang.Class,java.lang.Class,int)>(r0, $r4, $i1);

        return $i2;
    }

    public static java.lang.Class findClosestMatch(java.util.Collection, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.springframework.core.ExceptionDepthComparator $r2;
        java.util.Iterator $r6;
        java.util.Collection r0;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.Object $r4, $r7;
        java.lang.Class $r5, $r8;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.lang.Throwable;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r0, "Exception types must not be empty");

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 1 goto label1;

        $r6 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Class) $r7;

        return $r8;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r2 = new org.springframework.core.ExceptionDepthComparator;

        specialinvoke $r2.<org.springframework.core.ExceptionDepthComparator: void <init>(java.lang.Throwable)>(r3);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r2);

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.Class) $r4;

        return $r5;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.springframework.core.ExceptionDepthComparator r0;
        int $i0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.springframework.core.ExceptionDepthComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Class) r1;

        $r3 = (java.lang.Class) r2;

        $i0 = virtualinvoke r0.<org.springframework.core.ExceptionDepthComparator: int compare(java.lang.Class,java.lang.Class)>($r4, $r3);

        return $i0;
    }
}
