public abstract class org.apache.commons.fileupload.util.LimitedInputStream extends java.io.FilterInputStream implements org.apache.commons.fileupload.util.Closeable
{
    private long sizeMax;
    private long count;
    private boolean closed;

    public void <init>(java.io.InputStream, long)
    {
        long l0;
        org.apache.commons.fileupload.util.LimitedInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.fileupload.util.LimitedInputStream: long sizeMax> = l0;

        return;
    }

    protected abstract void raiseError(long, long) throws java.io.IOException;

    private void checkLimit() throws java.io.IOException
    {
        byte $b2;
        int $i5;
        long $l0, $l1, $l3, $l4;
        org.apache.commons.fileupload.util.LimitedInputStream r0;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        $l1 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count>;

        $l0 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long sizeMax>;

        $b2 = $l1 cmp $l0;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label1;

        $l4 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long sizeMax>;

        $l3 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count>;

        virtualinvoke r0.<org.apache.commons.fileupload.util.LimitedInputStream: void raiseError(long,long)>($l4, $l3);

     label1:
        return;
    }

    public int read() throws java.io.IOException
    {
        int $i0, $i4;
        long $l1, $l2;
        org.apache.commons.fileupload.util.LimitedInputStream r0;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $l1 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count>;

        $l2 = $l1 + 1L;

        r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count> = $l2;

        specialinvoke r0.<org.apache.commons.fileupload.util.LimitedInputStream: void checkLimit()>();

     label1:
        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        long $l3, $l4, $l5;
        org.apache.commons.fileupload.util.LimitedInputStream r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i0, i1);

        if $i2 <= 0 goto label1;

        $l4 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.commons.fileupload.util.LimitedInputStream: long count> = $l5;

        specialinvoke r0.<org.apache.commons.fileupload.util.LimitedInputStream: void checkLimit()>();

     label1:
        return $i2;
    }

    public boolean isClosed() throws java.io.IOException
    {
        org.apache.commons.fileupload.util.LimitedInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        $z0 = r0.<org.apache.commons.fileupload.util.LimitedInputStream: boolean closed>;

        return $z0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.fileupload.util.LimitedInputStream r0;

        r0 := @this: org.apache.commons.fileupload.util.LimitedInputStream;

        r0.<org.apache.commons.fileupload.util.LimitedInputStream: boolean closed> = 1;

        specialinvoke r0.<java.io.FilterInputStream: void close()>();

        return;
    }
}
