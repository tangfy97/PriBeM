public class org.waveprotocol.wave.federation.FederationSettings extends java.lang.Object
{
    public static final java.lang.String XMPP_SERVER_HOSTNAME;
    public static final java.lang.String XMPP_SERVER_SECRET;
    public static final java.lang.String XMPP_COMPONENT_NAME;
    public static final java.lang.String XMPP_SERVER_PORT;
    public static final java.lang.String XMPP_SERVER_IP;
    public static final java.lang.String XMPP_SERVER_DESCRIPTION;
    public static final java.lang.String XMPP_DISCO_FAILED_EXPIRY_SECS;
    public static final java.lang.String XMPP_DISCO_SUCCESSFUL_EXPIRY_SECS;
    public static final java.lang.String XMPP_JID;
    public static final java.lang.String CERTIFICATE_PRIVATE_KEY;
    public static final java.lang.String CERTIFICATE_FILES;
    public static final java.lang.String CERTIFICATE_DOMAIN;
    private static java.lang.String xmppServerHostname;
    private static java.lang.String xmppServerSecret;
    private static java.lang.String xmppComponentName;
    private static int xmppServerPort;
    private static java.lang.String xmppServerIp;
    private static java.lang.String xmppServerDescription;
    private static int xmppDiscoFailedExpirySecs;
    private static int xmppDiscoSuccessfulExpirySecs;
    private static java.lang.String xmppJid;
    private static java.lang.String certificatePrivKey;
    private static java.util.List certificateFiles;
    private static java.lang.String certificateDomain;

    public void <init>()
    {
        org.waveprotocol.wave.federation.FederationSettings r0;

        r0 := @this: org.waveprotocol.wave.federation.FederationSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String CERTIFICATE_DOMAIN> = "certificate_domain";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String CERTIFICATE_FILES> = "certificate_files";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String CERTIFICATE_PRIVATE_KEY> = "certificate_private_key";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_JID> = "xmpp_jid";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_DISCO_SUCCESSFUL_EXPIRY_SECS> = "xmpp_disco_successful_expiry_secs";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_DISCO_FAILED_EXPIRY_SECS> = "xmpp_disco_failed_expiry_secs";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_SERVER_DESCRIPTION> = "xmpp_server_description";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_SERVER_IP> = "xmpp_server_ip";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_SERVER_PORT> = "xmpp_server_port";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_COMPONENT_NAME> = "xmpp_component_name";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_SERVER_SECRET> = "xmpp_server_secret";

        <org.waveprotocol.wave.federation.FederationSettings: java.lang.String XMPP_SERVER_HOSTNAME> = "xmpp_server_hostname";

        return;
    }
}
