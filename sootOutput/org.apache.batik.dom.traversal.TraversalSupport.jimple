public class org.apache.batik.dom.traversal.TraversalSupport extends java.lang.Object
{
    protected java.util.List iterators;

    public void <init>()
    {
        org.apache.batik.dom.traversal.TraversalSupport r0;

        r0 := @this: org.apache.batik.dom.traversal.TraversalSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.w3c.dom.traversal.TreeWalker createTreeWalker(org.apache.batik.dom.AbstractDocument, org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean)
    {
        org.apache.batik.dom.traversal.DOMTreeWalker $r1;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r4;
        int i0;
        org.apache.batik.dom.AbstractDocument r3;
        org.w3c.dom.traversal.NodeFilter r2;
        boolean z0;

        r3 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter1: org.w3c.dom.Node;

        i0 := @parameter2: int;

        r2 := @parameter3: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r4 = virtualinvoke r3.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "null.root", null);

        throw $r4;

     label1:
        $r1 = new org.apache.batik.dom.traversal.DOMTreeWalker;

        specialinvoke $r1.<org.apache.batik.dom.traversal.DOMTreeWalker: void <init>(org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)>(r0, i0, r2, z0);

        return $r1;
    }

    public org.w3c.dom.traversal.NodeIterator createNodeIterator(org.apache.batik.dom.AbstractDocument, org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.traversal.TraversalSupport r4;
        org.apache.batik.dom.traversal.DOMNodeIterator $r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.util.List $r5, $r6;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r8;
        int i0;
        org.w3c.dom.traversal.NodeFilter r3;
        java.util.LinkedList $r7;
        boolean z0;

        r4 := @this: org.apache.batik.dom.traversal.TraversalSupport;

        r2 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter1: org.w3c.dom.Node;

        i0 := @parameter2: int;

        r3 := @parameter3: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r8 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "null.root", null);

        throw $r8;

     label1:
        $r1 = new org.apache.batik.dom.traversal.DOMNodeIterator;

        specialinvoke $r1.<org.apache.batik.dom.traversal.DOMNodeIterator: void <init>(org.apache.batik.dom.AbstractDocument,org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)>(r2, r0, i0, r3, z0);

        $r5 = r4.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators>;

        if $r5 != null goto label2;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r4.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators> = $r7;

     label2:
        $r6 = r4.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        return $r1;
    }

    public void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.TraversalSupport r0;
        java.util.Iterator $r3;
        org.apache.batik.dom.traversal.DOMNodeIterator $r6;
        java.util.List $r1, $r2;
        org.w3c.dom.Node r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.traversal.TraversalSupport;

        r5 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators>;

        if $r1 == null goto label3;

        $r2 = r0.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.batik.dom.traversal.DOMNodeIterator) $r4;

        virtualinvoke $r6.<org.apache.batik.dom.traversal.DOMNodeIterator: void nodeToBeRemoved(org.w3c.dom.Node)>(r5);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    public void detachNodeIterator(org.w3c.dom.traversal.NodeIterator)
    {
        org.apache.batik.dom.traversal.TraversalSupport r0;
        java.util.List $r2;
        org.w3c.dom.traversal.NodeIterator r1;

        r0 := @this: org.apache.batik.dom.traversal.TraversalSupport;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        $r2 = r0.<org.apache.batik.dom.traversal.TraversalSupport: java.util.List iterators>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }
}
