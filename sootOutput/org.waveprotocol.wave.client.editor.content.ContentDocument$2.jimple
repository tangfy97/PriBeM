class org.waveprotocol.wave.client.editor.content.ContentDocument$2 extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns
{
    final org.waveprotocol.wave.client.editor.content.ContentDocument this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.NodeManager access$500(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getRenderedView()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml getFilteredHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml getFilteredHtmlView()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.impl.HtmlView getFullHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.impl.HtmlView getRawHtmlView()>();

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.extract.Repairer $r2;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.extract.Repairer access$600(org.waveprotocol.wave.client.editor.content.ContentDocument)>($r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$2 r0;
        org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$2: org.waveprotocol.wave.client.editor.content.ContentDocument$FilteredHtml getFilteredHtmlView()>();

        return $r1;
    }
}
