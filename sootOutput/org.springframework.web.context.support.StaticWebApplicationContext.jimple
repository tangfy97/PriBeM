public class org.springframework.web.context.support.StaticWebApplicationContext extends org.springframework.context.support.StaticApplicationContext implements org.springframework.web.context.ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource
{
    private javax.servlet.ServletContext servletContext;
    private javax.servlet.ServletConfig servletConfig;
    private java.lang.String namespace;
    private org.springframework.ui.context.ThemeSource themeSource;

    public void <init>()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        specialinvoke r0.<org.springframework.context.support.StaticApplicationContext: void <init>()>();

        virtualinvoke r0.<org.springframework.web.context.support.StaticWebApplicationContext: void setDisplayName(java.lang.String)>("Root WebApplicationContext");

        return;
    }

    public void setServletContext(javax.servlet.ServletContext)
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        javax.servlet.ServletContext r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r1 := @parameter0: javax.servlet.ServletContext;

        r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext> = r1;

        return;
    }

    public javax.servlet.ServletContext getServletContext()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        javax.servlet.ServletContext $r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        $r1 = r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        return $r1;
    }

    public void setServletConfig(javax.servlet.ServletConfig)
    {
        javax.servlet.ServletConfig r1;
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        javax.servlet.ServletContext $r2, $r3;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r1 := @parameter0: javax.servlet.ServletConfig;

        r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletConfig servletConfig> = r1;

        if r1 == null goto label1;

        $r2 = r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        if $r2 != null goto label1;

        $r3 = interfaceinvoke r1.<javax.servlet.ServletConfig: javax.servlet.ServletContext getServletContext()>();

        r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext> = $r3;

     label1:
        return;
    }

    public javax.servlet.ServletConfig getServletConfig()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        javax.servlet.ServletConfig $r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        $r1 = r0.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletConfig servletConfig>;

        return $r1;
    }

    public void setNamespace(java.lang.String)
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r1, $r5;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.web.context.support.StaticWebApplicationContext: java.lang.String namespace> = r1;

        if r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("WebApplicationContext for namespace \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.springframework.web.context.support.StaticWebApplicationContext: void setDisplayName(java.lang.String)>($r5);

     label1:
        return;
    }

    public java.lang.String getNamespace()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        $r1 = r0.<org.springframework.web.context.support.StaticWebApplicationContext: java.lang.String namespace>;

        return $r1;
    }

    public void setConfigLocation(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r1;
        org.springframework.web.context.support.StaticWebApplicationContext r2;
        java.lang.String r0;

        r2 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("StaticWebApplicationContext does not support config locations");

        throw $r1;

     label1:
        return;
    }

    public void setConfigLocations(java.lang.String[])
    {
        java.lang.UnsupportedOperationException $r1;
        org.springframework.web.context.support.StaticWebApplicationContext r2;
        java.lang.String[] r0;

        r2 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("StaticWebApplicationContext does not support config locations");

        throw $r1;

     label1:
        return;
    }

    public java.lang.String[] getConfigLocations()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        return null;
    }

    protected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        org.springframework.web.context.support.ServletContextAwareProcessor $r1;
        javax.servlet.ServletConfig $r3, $r6;
        org.springframework.web.context.support.StaticWebApplicationContext r2;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        javax.servlet.ServletContext $r4, $r5, $r7;

        r2 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r1 = new org.springframework.web.context.support.ServletContextAwareProcessor;

        $r4 = r2.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        $r3 = r2.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletConfig servletConfig>;

        specialinvoke $r1.<org.springframework.web.context.support.ServletContextAwareProcessor: void <init>(javax.servlet.ServletContext,javax.servlet.ServletConfig)>($r4, $r3);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void addBeanPostProcessor(org.springframework.beans.factory.config.BeanPostProcessor)>($r1);

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/web/context/ServletContextAware;");

        interfaceinvoke r0.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/web/context/ServletConfigAware;");

        $r5 = r2.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: void registerWebApplicationScopes(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext)>(r0, $r5);

        $r7 = r2.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        $r6 = r2.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletConfig servletConfig>;

        staticinvoke <org.springframework.web.context.support.WebApplicationContextUtils: void registerEnvironmentBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,javax.servlet.ServletContext,javax.servlet.ServletConfig)>(r0, $r7, $r6);

        return;
    }

    protected org.springframework.core.io.Resource getResourceByPath(java.lang.String)
    {
        org.springframework.web.context.support.ServletContextResource $r0;
        org.springframework.web.context.support.StaticWebApplicationContext r1;
        javax.servlet.ServletContext $r3;
        java.lang.String r2;

        r1 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.springframework.web.context.support.ServletContextResource;

        $r3 = r1.<org.springframework.web.context.support.StaticWebApplicationContext: javax.servlet.ServletContext servletContext>;

        specialinvoke $r0.<org.springframework.web.context.support.ServletContextResource: void <init>(javax.servlet.ServletContext,java.lang.String)>($r3, r2);

        return $r0;
    }

    protected org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r1;
        org.springframework.web.context.support.ServletContextResourcePatternResolver $r0;

        r1 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        $r0 = new org.springframework.web.context.support.ServletContextResourcePatternResolver;

        specialinvoke $r0.<org.springframework.web.context.support.ServletContextResourcePatternResolver: void <init>(org.springframework.core.io.ResourceLoader)>(r1);

        return $r0;
    }

    protected void onRefresh()
    {
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        org.springframework.ui.context.ThemeSource $r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        $r1 = staticinvoke <org.springframework.ui.context.support.UiApplicationContextUtils: org.springframework.ui.context.ThemeSource initThemeSource(org.springframework.context.ApplicationContext)>(r0);

        r0.<org.springframework.web.context.support.StaticWebApplicationContext: org.springframework.ui.context.ThemeSource themeSource> = $r1;

        return;
    }

    public org.springframework.ui.context.Theme getTheme(java.lang.String)
    {
        org.springframework.ui.context.ThemeSource $r2;
        org.springframework.web.context.support.StaticWebApplicationContext r0;
        org.springframework.ui.context.Theme $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.web.context.support.StaticWebApplicationContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.web.context.support.StaticWebApplicationContext: org.springframework.ui.context.ThemeSource themeSource>;

        $r3 = interfaceinvoke $r2.<org.springframework.ui.context.ThemeSource: org.springframework.ui.context.Theme getTheme(java.lang.String)>(r1);

        return $r3;
    }
}
