class org.apache.xmlbeans.impl.jam.xml.JamXmlReader extends java.lang.Object implements org.apache.xmlbeans.impl.jam.xml.JamXmlElements
{
    private javax.xml.stream.XMLStreamReader mIn;
    private org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder mCache;
    private org.apache.xmlbeans.impl.jam.internal.elements.ElementContext mContext;

    public void <init>(org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder, java.io.InputStream, org.apache.xmlbeans.impl.jam.internal.elements.ElementContext) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r4;
        javax.xml.stream.XMLInputFactory $r2;
        org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder r1;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r5;
        java.io.InputStream r3;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder;

        r3 := @parameter1: java.io.InputStream;

        r5 := @parameter2: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        $r2 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r3);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void <init>(org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder,javax.xml.stream.XMLStreamReader,org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r1, $r4, r5);

        return;
    }

    public void <init>(org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder, java.io.Reader, org.apache.xmlbeans.impl.jam.internal.elements.ElementContext) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r4;
        javax.xml.stream.XMLInputFactory $r2;
        org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder r1;
        java.io.Reader r3;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r5;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder;

        r3 := @parameter1: java.io.Reader;

        r5 := @parameter2: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        $r2 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r3);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void <init>(org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder,javax.xml.stream.XMLStreamReader,org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r1, $r4, r5);

        return;
    }

    public void <init>(org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder, javax.xml.stream.XMLStreamReader, org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader r2;
        org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder r1;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r3;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder;

        r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        r3 := @parameter2: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null cache");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null cache");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null ctx");

        throw $r4;

     label3:
        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn> = r2;

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder mCache> = r1;

        r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext mContext> = r3;

        return;
    }

    public void read() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("jam-service");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

     label1:
        $r1 = "class";

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readClass()>();

        goto label1;

     label2:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("jam-service");

        return;
    }

    private void readClass() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r12, r13, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl $r11;
        org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder $r2;
        org.apache.xmlbeans.impl.jam.mutable.MClass $r3;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("class");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r1 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        r12 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        r13 = "";

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        r13 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i2 = $i0 + 1;

        r12 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i2);

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder mCache>;

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.jam.internal.CachedClassBuilder: org.apache.xmlbeans.impl.jam.mutable.MClass createClassToBuild(java.lang.String,java.lang.String,java.lang.String[])>(r13, r12, null);

        $z0 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: boolean assertCurrentBoolean(java.lang.String)>("is-interface");

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setIsInterface(boolean)>($z0);

        $i1 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: int assertCurrentInt(java.lang.String)>("modifiers");

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setModifiers(int)>($i1);

        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String checkCurrentString(java.lang.String)>("superclass");

        if $r4 == null goto label2;

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setSuperclass(java.lang.String)>($r4);

     label2:
        $r14 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String checkCurrentString(java.lang.String)>("interface");

        if $r14 == null goto label3;

        interfaceinvoke $r3.<org.apache.xmlbeans.impl.jam.mutable.MClass: void addInterface(java.lang.String)>($r14);

        goto label2;

     label3:
        $r5 = "field";

        $r6 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label4;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readField(org.apache.xmlbeans.impl.jam.mutable.MClass)>($r3);

        goto label3;

     label4:
        $r7 = "constructor";

        $r8 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label5;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readConstructor(org.apache.xmlbeans.impl.jam.mutable.MClass)>($r3);

        goto label4;

     label5:
        $r9 = "method";

        $r10 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label6;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readMethod(org.apache.xmlbeans.impl.jam.mutable.MClass)>($r3);

        goto label5;

     label6:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readAnnotatedElement(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement)>($r3);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("class");

        $r11 = (org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl) $r3;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.jam.internal.elements.ClassImpl: void setState(int)>(6);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return;
    }

    private void readField(org.apache.xmlbeans.impl.jam.mutable.MClass) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        org.apache.xmlbeans.impl.jam.mutable.MField $r2;
        int $i0;
        java.lang.String $r3, $r4;
        org.apache.xmlbeans.impl.jam.mutable.MClass r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MClass;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("field");

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MField addNewField()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MField: void setSimpleName(java.lang.String)>($r3);

        $i0 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: int assertCurrentInt(java.lang.String)>("modifiers");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MField: void setModifiers(int)>($i0);

        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("type");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MField: void setType(java.lang.String)>($r4);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readAnnotatedElement(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement)>($r2);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("field");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return;
    }

    private void readConstructor(org.apache.xmlbeans.impl.jam.mutable.MClass) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        org.apache.xmlbeans.impl.jam.mutable.MConstructor $r2;
        org.apache.xmlbeans.impl.jam.mutable.MClass r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MClass;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("constructor");

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MConstructor addNewConstructor()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readInvokableContents(org.apache.xmlbeans.impl.jam.mutable.MInvokable)>($r2);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("constructor");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return;
    }

    private void readMethod(org.apache.xmlbeans.impl.jam.mutable.MClass) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        org.apache.xmlbeans.impl.jam.mutable.MMethod $r2;
        java.lang.String $r3, $r4;
        org.apache.xmlbeans.impl.jam.mutable.MClass r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MClass;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("method");

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MMethod addNewMethod()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r3 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MMethod: void setSimpleName(java.lang.String)>($r3);

        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("return-type");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MMethod: void setReturnType(java.lang.String)>($r4);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readInvokableContents(org.apache.xmlbeans.impl.jam.mutable.MInvokable)>($r2);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("method");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return;
    }

    private void readSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.mutable.MSourcePosition $r2;
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        java.net.URISyntaxException $r11;
        javax.xml.stream.XMLStreamException $r12;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        java.net.URI $r9;
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>("source-position");

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement: org.apache.xmlbeans.impl.jam.mutable.MSourcePosition createSourcePosition()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r3 = "line";

        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: int assertCurrentInt(java.lang.String)>("line");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setLine(int)>($i1);

     label1:
        $r5 = "column";

        $r6 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $i0 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: int assertCurrentInt(java.lang.String)>("column");

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setColumn(int)>($i0);

     label2:
        $r7 = "source-uri";

        $r8 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label6;

     label3:
        $r9 = new java.net.URI;

        $r10 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("source-uri");

        specialinvoke $r9.<java.net.URI: void <init>(java.lang.String)>($r10);

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setSourceURI(java.net.URI)>($r9);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r12.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label6:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("source-position");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return;

        catch java.net.URISyntaxException from label3 to label4 with label5;
    }

    private void readInvokableContents(org.apache.xmlbeans.impl.jam.mutable.MInvokable) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r1;
        org.apache.xmlbeans.impl.jam.mutable.MParameter $r4;
        int $i0;
        org.apache.xmlbeans.impl.jam.mutable.MInvokable r0;
        java.lang.String $r2, $r3, $r5, $r6;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MInvokable;

        $i0 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: int assertCurrentInt(java.lang.String)>("modifiers");

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: void setModifiers(int)>($i0);

     label1:
        $r2 = "parameter";

        $r3 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: org.apache.xmlbeans.impl.jam.mutable.MParameter addNewParameter()>();

        $r5 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.mutable.MParameter: void setSimpleName(java.lang.String)>($r5);

        $r6 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("type");

        interfaceinvoke $r4.<org.apache.xmlbeans.impl.jam.mutable.MParameter: void setType(java.lang.String)>($r6);

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readAnnotatedElement(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement)>($r4);

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("parameter");

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        goto label1;

     label2:
        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readAnnotatedElement(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement)>(r0);

        return;
    }

    private void readAnnotatedElement(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.mutable.MComment $r8;
        javax.xml.stream.XMLStreamReader $r9;
        org.apache.xmlbeans.impl.jam.JamClassLoader $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.impl.jam.mutable.MAnnotation $r12;
        org.apache.xmlbeans.impl.jam.JClass $r19;
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        java.lang.String[] r25;
        java.util.ArrayList $r21;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r13, $r14, $r15, $r16, $r20, $r22, $r23, $r24;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext $r17;
        org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement r7;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r7 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement;

     label01:
        $r1 = "annotation";

        $r2 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label08;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r11 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        $r12 = interfaceinvoke r7.<org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement: org.apache.xmlbeans.impl.jam.mutable.MAnnotation addLiteralAnnotation(java.lang.String)>($r11);

     label02:
        $r13 = "annotation-value";

        $r14 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label07;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r15 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("name");

        $r16 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("type");

        $r17 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext mContext>;

        $r18 = interfaceinvoke $r17.<org.apache.xmlbeans.impl.jam.internal.elements.ElementContext: org.apache.xmlbeans.impl.jam.JamClassLoader getClassLoader()>();

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.impl.jam.JamClassLoader: org.apache.xmlbeans.impl.jam.JClass loadClass(java.lang.String)>($r16);

        $z4 = interfaceinvoke $r19.<org.apache.xmlbeans.impl.jam.JClass: boolean isArrayType()>();

        if $z4 == 0 goto label05;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

     label03:
        $r22 = "value";

        $r23 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z5 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z5 == 0 goto label04;

        $r24 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("value");

        interfaceinvoke $r21.<java.util.Collection: boolean add(java.lang.Object)>($r24);

        goto label03;

     label04:
        $i0 = interfaceinvoke $r21.<java.util.Collection: int size()>();

        r25 = newarray (java.lang.String)[$i0];

        interfaceinvoke $r21.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r25);

        interfaceinvoke $r12.<org.apache.xmlbeans.impl.jam.mutable.MAnnotation: void setSimpleValue(java.lang.String,java.lang.Object,org.apache.xmlbeans.impl.jam.JClass)>($r15, r25, $r19);

        goto label06;

     label05:
        $r20 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String assertCurrentString(java.lang.String)>("value");

        interfaceinvoke $r12.<org.apache.xmlbeans.impl.jam.mutable.MAnnotation: void setSimpleValue(java.lang.String,java.lang.Object,org.apache.xmlbeans.impl.jam.JClass)>($r15, $r20, $r19);

     label06:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("annotation-value");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        goto label02;

     label07:
        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("annotation");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        goto label01;

     label08:
        $r3 = "comment";

        $r4 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label09;

        $r8 = interfaceinvoke r7.<org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement: org.apache.xmlbeans.impl.jam.mutable.MComment createComment()>();

        $r9 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r10 = interfaceinvoke $r9.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        interfaceinvoke $r8.<org.apache.xmlbeans.impl.jam.mutable.MComment: void setText(java.lang.String)>($r10);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>("comment");

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

     label09:
        $r5 = "source-position";

        $r6 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label10;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void readSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement)>(r7);

     label10:
        return;
    }

    private void assertStart(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        java.lang.String r4, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r8 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected to get a <");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void error(java.lang.String)>($r7);

     label2:
        return;
    }

    private void assertEnd(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6;
        java.lang.String r4, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: boolean isEndElement()>();

        if $z0 == 0 goto label1;

        $r8 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected to get a </");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void error(java.lang.String)>($r7);

     label2:
        return;
    }

    private java.lang.String checkCurrentString(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r1;
        javax.xml.stream.XMLStreamReader $r3;
        java.lang.String r0, $r2, $r4;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r0 := @parameter0: java.lang.String;

        $r2 = specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: java.lang.String getElementName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>(r0);

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return $r4;

     label1:
        return null;
    }

    private java.lang.String assertCurrentString(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>(r1);

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        return $r3;
    }

    private int assertCurrentInt(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r2;
        int $i0;
        java.lang.String r1, $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>(r1);

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private boolean assertCurrentBoolean(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r2;
        java.lang.Boolean $r4;
        java.lang.String r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertStart(java.lang.String)>(r1);

        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void assertEnd(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: void nextElement()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private void error(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r1;
        javax.xml.stream.XMLStreamReader $r2, $r6, $r12;
        java.lang.StringBuffer $r4, $r5, $r8, $r10, $r11, $r14, $r17, $r19, $r20, $r22;
        javax.xml.stream.XMLStreamException $r16;
        int $i0, $i1;
        java.lang.String $r3, $r9, $r15, r18, $r21, $r23;
        java.io.StringWriter $r0;
        javax.xml.stream.Location $r7, $r13;

        r1 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        r18 := @parameter0: java.lang.String;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("<");

        $r2 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r3);

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("> line:");

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r6 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r7 = interfaceinvoke $r6.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $i0 = interfaceinvoke $r7.<javax.xml.stream.Location: int getLineNumber()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r9);

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>(" col:");

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r12 = r1.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r13 = interfaceinvoke $r12.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $i1 = interfaceinvoke $r13.<javax.xml.stream.Location: int getColumnNumber()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>($r15);

        virtualinvoke $r0.<java.io.StringWriter: void write(java.lang.String)>("]");

        $r16 = new javax.xml.stream.XMLStreamException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":\n ");

        $r21 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r23);

        throw $r16;
    }

    private void nextElement() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        javax.xml.stream.XMLStreamReader $r1, $r2, $r3;
        javax.xml.stream.XMLStreamException $r5;
        int $i0, $i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int next()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        $r5 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r5.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Unexpected end of file");

        throw $r5;

     label2:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $z0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: boolean isEndElement()>();

        if $z0 != 0 goto label3;

        $r3 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $z1 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z1 == 0 goto label1;

     label3:
        return;
    }

    private java.lang.String getElementName()
    {
        org.apache.xmlbeans.impl.jam.xml.JamXmlReader r0;
        java.lang.String $r2;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xmlbeans.impl.jam.xml.JamXmlReader;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.xml.JamXmlReader: javax.xml.stream.XMLStreamReader mIn>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        return $r2;
    }
}
