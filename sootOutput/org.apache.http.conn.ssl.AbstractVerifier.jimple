public abstract class org.apache.http.conn.ssl.AbstractVerifier extends java.lang.Object implements org.apache.http.conn.ssl.X509HostnameVerifier
{
    private static final java.lang.String[] BAD_COUNTRY_2LDS;

    public void <init>()
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void verify(java.lang.String, javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        java.security.cert.X509Certificate $r10;
        javax.net.ssl.SSLSocket r1;
        java.lang.NullPointerException $r6;
        org.apache.http.conn.ssl.AbstractVerifier r3;
        javax.net.ssl.SSLSession $r2, $r5, r7;
        java.security.cert.Certificate $r9;
        java.security.cert.Certificate[] $r8;
        java.lang.String r0;
        java.io.InputStream $r4;

        r3 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.net.ssl.SSLSocket;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("host to verify is null");

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r7 = $r2;

        if $r2 != null goto label2;

        $r4 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.io.InputStream getInputStream()>();

        virtualinvoke $r4.<java.io.InputStream: int available()>();

        $r5 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r7 = $r5;

        if $r5 != null goto label2;

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r7 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

     label2:
        $r8 = interfaceinvoke r7.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r9 = $r8[0];

        $r10 = (java.security.cert.X509Certificate) $r9;

        virtualinvoke r3.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>(r0, $r10);

        return;
    }

    public final boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        java.security.cert.X509Certificate r3;
        org.apache.http.conn.ssl.AbstractVerifier r4;
        javax.net.ssl.SSLException $r6;
        javax.net.ssl.SSLSession r0;
        java.security.cert.Certificate $r2;
        java.security.cert.Certificate[] $r1;
        java.lang.String r5;

        r4 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        $r1 = interfaceinvoke r0.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r2 = $r1[0];

        r3 = (java.security.cert.X509Certificate) $r2;

        virtualinvoke r4.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>(r5, r3);

     label2:
        return 1;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
    }

    public final void verify(java.lang.String, java.security.cert.X509Certificate) throws javax.net.ssl.SSLException
    {
        java.security.cert.X509Certificate r0;
        org.apache.http.conn.ssl.AbstractVerifier r4;
        java.lang.String[] $r1, $r3;
        java.lang.String r2;

        r4 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.security.cert.X509Certificate;

        $r1 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>(r0);

        $r3 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>(r0, r2);

        virtualinvoke r4.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>(r2, $r1, $r3);

        return;
    }

    public final void verify(java.lang.String, java.lang.String[], java.lang.String[], boolean) throws javax.net.ssl.SSLException
    {
        java.util.Locale $r6, $r17;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, $z11, $z12;
        javax.net.ssl.SSLException $r9, $r31;
        java.lang.StringBuilder $r3, $r10, $r11, $r12, $r13, $r14, $r26, $r27, $r28, $r29;
        java.lang.String[] r1, r2, $r19;
        org.apache.http.conn.ssl.AbstractVerifier r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String r4, $r5, $r7, $r15, $r18, r20, $r21, $r22, $r23, $r24, $r25, $r30, $r32, $r33, r35, r36;
        java.util.LinkedList $r0;
        java.util.Iterator $r8;
        java.lang.Object $r16;

        r34 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        z3 := @parameter3: boolean;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        if r1 == null goto label01;

        $i8 = lengthof r1;

        if $i8 <= 0 goto label01;

        $r32 = r1[0];

        if $r32 == null goto label01;

        $r33 = r1[0];

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r33);

     label01:
        if r2 == null goto label04;

        i9 = lengthof r2;

        i10 = 0;

     label02:
        if i10 >= i9 goto label04;

        r35 = r2[i10];

        if r35 == null goto label03;

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r35);

     label03:
        i10 = i10 + 1;

        goto label02;

     label04:
        $z0 = virtualinvoke $r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate for <");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> doesn\'t contain CN or DNS subjectAlt");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new javax.net.ssl.SSLException;

        specialinvoke $r31.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r30);

        throw $r31;

     label05:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        z9 = 0;

        $r8 = virtualinvoke $r0.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r16 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.lang.String) $r16;

        $r17 = <java.util.Locale: java.util.Locale US>;

        $r18 = virtualinvoke r36.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r17);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OR");

     label07:
        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof $r19;

        if $i0 < 3 goto label08;

        $r25 = $r19[0];

        $z6 = virtualinvoke $r25.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z6 == 0 goto label08;

        $z7 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>($r18);

        if $z7 == 0 goto label08;

        $z8 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: boolean isIPAddress(java.lang.String)>(r4);

        if $z8 != 0 goto label08;

        $z10 = 1;

        goto label09;

     label08:
        $z10 = 0;

     label09:
        if $z10 == 0 goto label17;

        r20 = $r19[0];

        $i1 = virtualinvoke r20.<java.lang.String: int length()>();

        if $i1 <= 1 goto label12;

        $i4 = virtualinvoke r20.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r22 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $i6 = virtualinvoke r20.<java.lang.String: int length()>();

        $r23 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>($i6);

        $i7 = virtualinvoke $r22.<java.lang.String: int length()>();

        $r24 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i7);

        $z4 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r22);

        if $z4 == 0 goto label10;

        $z5 = virtualinvoke $r24.<java.lang.String: boolean endsWith(java.lang.String)>($r23);

        if $z5 == 0 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        z9 = $z11;

        goto label13;

     label12:
        $r21 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>(1);

        z9 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>($r21);

     label13:
        if z9 == 0 goto label16;

        if z3 == 0 goto label16;

        $i2 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>($r7);

        $i3 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>($r18);

        if $i2 != $i3 goto label14;

        $z12 = 1;

        goto label15;

     label14:
        $z12 = 0;

     label15:
        z9 = $z12;

     label16:
        goto label18;

     label17:
        z9 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r18);

     label18:
        if z9 == 0 goto label19;

        goto label20;

     label19:
        goto label06;

     label20:
        if z9 != 0 goto label21;

        $r9 = new javax.net.ssl.SSLException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hostname in certificate didn\'t match: <");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> !=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label21:
        return;
    }

    public static boolean acceptableCountryWildcard(java.lang.String)
    {
        java.lang.String[] $r1, $r4;
        int $i0, $i1, $i2;
        java.lang.String r0, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof $r1;

        if $i0 != 3 goto label1;

        $r2 = $r1[2];

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 2 goto label2;

     label1:
        return 1;

     label2:
        $r4 = <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS>;

        $r3 = $r1[1];

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r4, $r3);

        if $i2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static java.lang.String[] getCNs(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r1;
        javax.security.auth.x500.X500Principal $r2;
        java.lang.String[] r9;
        java.util.StringTokenizer $r4;
        int $i0, $i1;
        java.lang.String $r3, $r5, $r6, $r7, $r8;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r3 = virtualinvoke $r2.<javax.security.auth.x500.X500Principal: java.lang.String toString()>();

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r3, ",");

     label1:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 <= 3 goto label2;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CN=");

        if $z2 == 0 goto label2;

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(3);

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        $z1 = virtualinvoke $r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $i0 = virtualinvoke $r0.<java.util.LinkedList: int size()>();

        r9 = newarray (java.lang.String)[$i0];

        virtualinvoke $r0.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        return r9;

     label4:
        return null;
    }

    private static java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate, java.lang.String)
    {
        java.security.cert.X509Certificate r2;
        java.security.cert.CertificateParsingException $r10;
        java.lang.String[] r12;
        java.lang.Integer $r7;
        byte b2;
        int $i0, $i1;
        java.lang.String r0, r9;
        java.util.LinkedList $r1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        java.util.Collection r11;
        java.util.List r5;
        java.lang.Object $r4, $r6, $r8;

        r2 := @parameter0: java.security.cert.X509Certificate;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: boolean isIPAddress(java.lang.String)>(r0);

        if $z0 == 0 goto label01;

        b2 = 7;

        goto label02;

     label01:
        b2 = 2;

     label02:
        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r11 = null;

     label03:
        r11 = virtualinvoke r2.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

     label04:
        goto label06;

     label05:
        $r10 := @caughtexception;

     label06:
        if r11 == null goto label09;

        $r3 = interfaceinvoke r11.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.List) $r4;

        $r6 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i1 != b2 goto label08;

        $r8 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(1);

        r9 = (java.lang.String) $r8;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>(r9);

     label08:
        goto label07;

     label09:
        $z1 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        r12 = newarray (java.lang.String)[$i0];

        virtualinvoke $r1.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>(r12);

        return r12;

     label10:
        return null;

        catch java.security.cert.CertificateParsingException from label03 to label04 with label05;
    }

    public static java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>(r0, null);

        return $r1;
    }

    public static int countDots(java.lang.String)
    {
        int $i0, i2, i3, $i4;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 != 46 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private static boolean isIPAddress(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $z0 = staticinvoke <org.apache.http.conn.util.InetAddressUtils: boolean isIPv4Address(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.http.conn.util.InetAddressUtils: boolean isIPv6Address(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        $r0 = newarray (java.lang.String)[14];

        $r0[0] = "ac";

        $r0[1] = "co";

        $r0[2] = "com";

        $r0[3] = "ed";

        $r0[4] = "edu";

        $r0[5] = "go";

        $r0[6] = "gouv";

        $r0[7] = "gov";

        $r0[8] = "info";

        $r0[9] = "lg";

        $r0[10] = "ne";

        $r0[11] = "net";

        $r0[12] = "or";

        $r0[13] = "org";

        <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS> = $r0;

        $r1 = <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r1);

        return;
    }
}
