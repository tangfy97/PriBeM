public final class org.codehaus.jackson.Base64Variant extends java.lang.Object
{
    static final char PADDING_CHAR_NONE;
    public static final int BASE64_VALUE_INVALID;
    public static final int BASE64_VALUE_PADDING;
    private final int[] _asciiToBase64;
    private final char[] _base64ToAsciiC;
    private final byte[] _base64ToAsciiB;
    final java.lang.String _name;
    final boolean _usesPadding;
    final char _paddingChar;
    final int _maxLineLength;

    public void <init>(java.lang.String, java.lang.String, boolean, char, int)
    {
        byte[] $r3, $r10;
        byte $b4;
        int[] $r1, $r7, $r8, $r11;
        org.codehaus.jackson.Base64Variant r0;
        int i1, $i2, i5, $i7, $i8, $i9, $i11;
        java.lang.String r4, r5, $r17;
        boolean z0;
        char c0, c3;
        java.lang.IllegalArgumentException $r19;
        char[] $r2, $r6, $r9;
        java.lang.StringBuilder $r14, $r15, $r16, $r18;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        c0 := @parameter3: char;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[128];

        r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64> = $r1;

        $r2 = newarray (char)[64];

        r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC> = $r2;

        $r3 = newarray (byte)[64];

        r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB> = $r3;

        r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name> = r4;

        r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding> = z0;

        r0.<org.codehaus.jackson.Base64Variant: char _paddingChar> = c0;

        r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength> = i1;

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 == 64 goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base64Alphabet length must be exactly 64 (was ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r19;

     label1:
        $r6 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        virtualinvoke r5.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r6, 0);

        $r7 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i7 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r7, $i7);

        i5 = 0;

     label2:
        if i5 >= $i2 goto label3;

        $r9 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        c3 = $r9[i5];

        $r10 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $b4 = (byte) c3;

        $r10[i5] = $b4;

        $r11 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i8 = (int) c3;

        $r11[$i8] = i5;

        i5 = i5 + 1;

        goto label2;

     label3:
        if z0 == 0 goto label4;

        $r8 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i9 = (int) c0;

        $i11 = (int) -2;

        $r8[$i9] = $i11;

     label4:
        return;
    }

    public void <init>(org.codehaus.jackson.Base64Variant, java.lang.String, int)
    {
        org.codehaus.jackson.Base64Variant r0, r1;
        int i0;
        char $c1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r1.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        $c1 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        specialinvoke r0.<org.codehaus.jackson.Base64Variant: void <init>(org.codehaus.jackson.Base64Variant,java.lang.String,boolean,char,int)>(r1, r2, $z0, $c1, i0);

        return;
    }

    public void <init>(org.codehaus.jackson.Base64Variant, java.lang.String, boolean, char, int)
    {
        byte[] $r3, r6, $r7;
        int[] $r1, r10, $r11;
        org.codehaus.jackson.Base64Variant r0, r5;
        int $i0, $i1, $i2, i4;
        java.lang.String r4;
        boolean z0;
        char c3;
        char[] $r2, r8, $r9;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        r5 := @parameter0: org.codehaus.jackson.Base64Variant;

        r4 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        c3 := @parameter3: char;

        i4 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[128];

        r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64> = $r1;

        $r2 = newarray (char)[64];

        r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC> = $r2;

        $r3 = newarray (byte)[64];

        r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB> = $r3;

        r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name> = r4;

        r6 = r5.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $r7 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i0 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r7, 0, $i0);

        r8 = r5.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $r9 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, $r9, 0, $i1);

        r10 = r5.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $r11 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i2 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r11, 0, $i2);

        r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding> = z0;

        r0.<org.codehaus.jackson.Base64Variant: char _paddingChar> = c3;

        r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength> = i4;

        return;
    }

    public java.lang.String getName()
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name>;

        return $r1;
    }

    public boolean usesPadding()
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $z0 = r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        return $z0;
    }

    public boolean usesPaddingChar(char)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i2, $i3;
        char c0, $c1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        c0 := @parameter0: char;

        $c1 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        $i2 = (int) c0;

        $i3 = (int) $c1;

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean usesPaddingChar(int)
    {
        int i0, $i2;
        org.codehaus.jackson.Base64Variant r0;
        char $c1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        $c1 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        $i2 = (int) $c1;

        if i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public char getPaddingChar()
    {
        org.codehaus.jackson.Base64Variant r0;
        char $c0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $c0 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        return $c0;
    }

    public byte getPaddingByte()
    {
        org.codehaus.jackson.Base64Variant r0;
        char $c0;
        byte $b1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $c0 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        $b1 = (byte) $c0;

        return $b1;
    }

    public int getMaxLineLength()
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 = r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength>;

        return $i0;
    }

    public int decodeBase64Char(char)
    {
        int[] $r1;
        org.codehaus.jackson.Base64Variant r0;
        int $i1, $i2, $i3, $i5;
        char c0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        c0 := @parameter0: char;

        $i2 = (int) c0;

        if $i2 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i3 = (int) c0;

        $i1 = $r1[$i3];

        goto label2;

     label1:
        $i5 = (int) -1;

        $i1 = $i5;

     label2:
        return $i1;
    }

    public int decodeBase64Char(int)
    {
        int[] $r1;
        int i0, $i1, $i3;
        org.codehaus.jackson.Base64Variant r0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        if i0 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i1 = $r1[i0];

        goto label2;

     label1:
        $i3 = (int) -1;

        $i1 = $i3;

     label2:
        return $i1;
    }

    public int decodeBase64Byte(byte)
    {
        byte b0;
        int[] $r1;
        org.codehaus.jackson.Base64Variant r0;
        int $i1, $i2, $i3, $i5;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        b0 := @parameter0: byte;

        $i2 = (int) b0;

        if $i2 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i3 = (int) b0;

        $i1 = $r1[$i3];

        goto label2;

     label1:
        $i5 = (int) -1;

        $i1 = $i5;

     label2:
        return $i1;
    }

    public char encodeBase64BitsAsChar(int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $c1 = $r1[i0];

        return $c1;
    }

    public int encodeBase64Chunk(int, char[], int)
    {
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, i12, i13, i14, i15, i16;
        char $c3, $c6, $c9, $c11;
        char[] r0, $r2, $r3, $r4, $r5;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i12 := @parameter2: int;

        i13 = i12 + 1;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        r0[i12] = $c3;

        i14 = i13 + 1;

        $r3 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r3[$i5];

        r0[i13] = $c6;

        i15 = i14 + 1;

        $r4 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $c9 = $r4[$i8];

        r0[i14] = $c9;

        i16 = i15 + 1;

        $r5 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i10 = i0 & 63;

        $c11 = $r5[$i10];

        r0[i15] = $c11;

        return i16;
    }

    public void encodeBase64Chunk(java.lang.StringBuilder, int)
    {
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        char $c3, $c6, $c9, $c11;
        char[] $r2, $r3, $r4, $r5;
        java.lang.StringBuilder r0;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r3 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r3[$i5];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r4 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $c9 = $r4[$i8];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r5 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i10 = i0 & 63;

        $c11 = $r5[$i10];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        return;
    }

    public int encodeBase64Partial(int, int, char[], int)
    {
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, i7, $i8, $i9, $i10, $i12, $i14, $i15, i16, i17, i18, i19;
        boolean $z0;
        char $c3, $c6, $c11, $c13, $c20;
        char[] r0, $r2, $r3, $r4, $r5;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        r0 := @parameter2: char[];

        i16 := @parameter3: int;

        i17 = i16 + 1;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        r0[i16] = $c3;

        i18 = i17 + 1;

        $r3 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r3[$i5];

        r0[i17] = $c6;

        $z0 = r1.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        $i12 = i18;

        i19 = i18 + 1;

        if i7 != 2 goto label1;

        $r5 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i14 = i0 >> 6;

        $i15 = $i14 & 63;

        $c20 = $r5[$i15];

        goto label2;

     label1:
        $c20 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

     label2:
        r0[$i12] = $c20;

        i18 = i19 + 1;

        $c13 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        r0[i19] = $c13;

        goto label4;

     label3:
        if i7 != 2 goto label4;

        $i8 = i18;

        i18 = i18 + 1;

        $r4 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i9 = i0 >> 6;

        $i10 = $i9 & 63;

        $c11 = $r4[$i10];

        r0[$i8] = $c11;

     label4:
        return i18;
    }

    public void encodeBase64Partial(java.lang.StringBuilder, int, int)
    {
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, i7, $i8, $i9, $i12, $i13;
        boolean $z0;
        char $c3, $c6, $c10, $c11, $c14;
        char[] $r2, $r3, $r4, $r5;
        java.lang.StringBuilder r0;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i7 := @parameter2: int;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r3 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r3[$i5];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $z0 = r1.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        if i7 != 2 goto label1;

        $r5 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i12 = i0 >> 6;

        $i13 = $i12 & 63;

        $c14 = $r5[$i13];

        goto label2;

     label1:
        $c14 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        $c11 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        goto label4;

     label3:
        if i7 != 2 goto label4;

        $r4 = r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i8 = i0 >> 6;

        $i9 = $i8 & 63;

        $c10 = $r4[$i9];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);

     label4:
        return;
    }

    public byte encodeBase64BitsAsByte(int)
    {
        byte[] $r1;
        byte $b1;
        org.codehaus.jackson.Base64Variant r0;
        int i0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int encodeBase64Chunk(int, byte[], int)
    {
        byte[] r0, $r2, $r3, $r4, $r5;
        byte $b3, $b6, $b9, $b11;
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, i12, i13, i14, i15, i16;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i12 := @parameter2: int;

        i13 = i12 + 1;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $b3 = $r2[$i2];

        r0[i12] = $b3;

        i14 = i13 + 1;

        $r3 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $b6 = $r3[$i5];

        r0[i13] = $b6;

        i15 = i14 + 1;

        $r4 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $b9 = $r4[$i8];

        r0[i14] = $b9;

        i16 = i15 + 1;

        $r5 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i10 = i0 & 63;

        $b11 = $r5[$i10];

        r0[i15] = $b11;

        return i16;
    }

    public int encodeBase64Partial(int, int, byte[], int)
    {
        byte[] r0, $r2, $r3, $r4, $r5;
        byte $b3, $b6, $b11, b13, $b21;
        org.codehaus.jackson.Base64Variant r1;
        int i0, $i1, $i2, $i4, $i5, i7, $i8, $i9, $i10, $i14, $i15, $i16, i17, i18, i19, i20;
        boolean $z0;
        char $c12;

        r1 := @this: org.codehaus.jackson.Base64Variant;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        r0 := @parameter2: byte[];

        i17 := @parameter3: int;

        i18 = i17 + 1;

        $r2 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $b3 = $r2[$i2];

        r0[i17] = $b3;

        i19 = i18 + 1;

        $r3 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $b6 = $r3[$i5];

        r0[i18] = $b6;

        $z0 = r1.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        $c12 = r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        b13 = (byte) $c12;

        $i14 = i19;

        i20 = i19 + 1;

        if i7 != 2 goto label1;

        $r5 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i15 = i0 >> 6;

        $i16 = $i15 & 63;

        $b21 = $r5[$i16];

        goto label2;

     label1:
        $b21 = b13;

     label2:
        r0[$i14] = $b21;

        i19 = i20 + 1;

        r0[i20] = b13;

        goto label4;

     label3:
        if i7 != 2 goto label4;

        $i8 = i19;

        i19 = i19 + 1;

        $r4 = r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i9 = i0 >> 6;

        $i10 = $i9 & 63;

        $b11 = $r4[$i10];

        r0[$i8] = $b11;

     label4:
        return i19;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.Base64Variant: int BASE64_VALUE_PADDING> = -2;

        <org.codehaus.jackson.Base64Variant: int BASE64_VALUE_INVALID> = -1;

        <org.codehaus.jackson.Base64Variant: char PADDING_CHAR_NONE> = 0;

        return;
    }
}
