public class org.codehaus.jackson.map.deser.std.JsonNodeDeserializer extends org.codehaus.jackson.map.deser.std.BaseNodeDeserializer
{
    private static final org.codehaus.jackson.map.deser.std.JsonNodeDeserializer instance;

    protected void <init>()
    {
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/JsonNode;");

        return;
    }

    public static org.codehaus.jackson.map.JsonDeserializer getDeserializer(java.lang.Class)
    {
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ArrayDeserializer $r2;
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ObjectDeserializer $r3;
        java.lang.Class r0;
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer $r1;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Lorg/codehaus/jackson/node/ObjectNode;" goto label1;

        $r3 = staticinvoke <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ObjectDeserializer: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ObjectDeserializer getInstance()>();

        return $r3;

     label1:
        if r0 != class "Lorg/codehaus/jackson/node/ArrayNode;" goto label2;

        $r2 = staticinvoke <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ArrayDeserializer: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$ArrayDeserializer getInstance()>();

        return $r2;

     label2:
        $r1 = <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer instance>;

        return $r1;
    }

    public org.codehaus.jackson.JsonNode deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2;
        org.codehaus.jackson.JsonNode $r10;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.node.ArrayNode $r6;
        int[] $r1;
        org.codehaus.jackson.node.JsonNodeFactory $r5, $r7, $r9;
        int $i0, $i1;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer r3;
        org.codehaus.jackson.node.ObjectNode $r8;

        r3 := @this: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r8 = virtualinvoke r3.<org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.node.ObjectNode deserializeObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r4, $r7);

        return $r8;

     label2:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.node.ArrayNode deserializeArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r4, $r5);

        return $r6;

     label3:
        $r9 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        $r10 = virtualinvoke r3.<org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.JsonNode deserializeAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.node.JsonNodeFactory)>(r0, r4, $r9);

        return $r10;
    }

    public volatile java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.TypeDeserializer r3;
        java.lang.Object $r4;
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = specialinvoke r0.<org.codehaus.jackson.map.deser.std.BaseNodeDeserializer: java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.TypeDeserializer)>(r1, r2, r3);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonNode $r3;
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer r0;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.JsonNode deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.deser.std.JsonNodeDeserializer $r0;

        $r0 = new org.codehaus.jackson.map.deser.std.JsonNodeDeserializer;

        specialinvoke $r0.<org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: void <init>()>();

        <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.map.deser.std.JsonNodeDeserializer instance> = $r0;

        return;
    }
}
