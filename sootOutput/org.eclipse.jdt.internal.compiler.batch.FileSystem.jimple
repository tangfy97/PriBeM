public class org.eclipse.jdt.internal.compiler.batch.FileSystem extends java.lang.Object implements org.eclipse.jdt.internal.compiler.env.INameEnvironment, org.eclipse.jdt.internal.compiler.util.SuffixConstants
{
    org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths;
    java.util.Set knownFileNames;

    public void <init>(java.lang.String[], java.lang.String[], java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r2, $r6, $r8, $r9;
        java.lang.String[] r1, r7;
        java.io.IOException $r10;
        int i0, $i1, i2, i3;
        java.lang.String r3, $r4;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r5;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r1 := @parameter0: java.lang.String[];

        r7 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof r1;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath)[i0];

        r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths> = $r2;

        i2 = 0;

        i3 = 0;

        goto label6;

     label1:
        $r4 = r1[i3];

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r4, r3, null);

     label2:
        interfaceinvoke $r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: void initialize()>();

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $i1 = i2;

        i2 = i2 + 1;

        $r6[$i1] = $r5;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label1;

        if i2 == i0 goto label7;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r8 = newarray (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath)[i2];

        r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths> = $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, i2);

     label7:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: void initializeKnownFileNames(java.lang.String[])>(r7);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    void <init>(org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[], java.lang.String[])
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] r1, $r2, $r4, $r6, $r7;
        java.lang.String[] r5;
        java.io.IOException $r8;
        int i0, $i1, i2, i3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath r3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[];

        r5 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

        $r2 = newarray (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath)[i0];

        r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths> = $r2;

        i3 = 0;

        goto label6;

     label1:
        r3 = r1[i3];

     label2:
        interfaceinvoke r3.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: void initialize()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $i1 = i2;

        i2 = i2 + 1;

        $r4[$i1] = r3;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label1;

        if i2 == i0 goto label7;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r6 = newarray (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath)[i2];

        r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths> = $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, i2);

     label7:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: void initializeKnownFileNames(java.lang.String[])>(r5);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String, java.lang.String, org.eclipse.jdt.internal.compiler.env.AccessRuleSet)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r2;
        java.lang.String r0, r1;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>(r0, r1, 0, r2, null);

        return $r3;
    }

    public static org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String, java.lang.String, boolean, org.eclipse.jdt.internal.compiler.env.AccessRuleSet, java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r5;
        org.eclipse.jdt.internal.compiler.batch.ClasspathJar $r4;
        byte $b0;
        org.eclipse.jdt.internal.compiler.batch.ClasspathLocation r8;
        org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory $r9;
        java.lang.String r1, $r2, r3, r7, $r10, $r11;
        org.eclipse.jdt.internal.compiler.batch.ClasspathSourceJar $r6;
        boolean $z0, $z1, z2, $z3;
        java.io.File $r0;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        z2 := @parameter2: boolean;

        r5 := @parameter3: org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        r3 := @parameter4: java.lang.String;

        r8 = null;

        $r0 = new java.io.File;

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: java.lang.String convertPathSeparators(java.lang.String)>(r1);

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label06;

        $z3 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label11;

        $r9 = new org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        if z2 == 0 goto label01;

        $b0 = 1;

        goto label02;

     label01:
        $b0 = 3;

     label02:
        if r3 == null goto label03;

        if r3 != "none" goto label04;

     label03:
        $r10 = r3;

        goto label05;

     label04:
        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: java.lang.String convertPathSeparators(java.lang.String)>(r3);

     label05:
        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory: void <init>(java.io.File,java.lang.String,int,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>($r0, r7, $b0, r5, $r10);

        r8 = $r9;

        goto label11;

     label06:
        $z1 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isPotentialZipArchive(java.lang.String)>(r1);

        if $z1 == 0 goto label11;

        if z2 == 0 goto label10;

        $r6 = new org.eclipse.jdt.internal.compiler.batch.ClasspathSourceJar;

        if r3 == null goto label07;

        if r3 != "none" goto label08;

     label07:
        $r11 = r3;

        goto label09;

     label08:
        $r11 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: java.lang.String convertPathSeparators(java.lang.String)>(r3);

     label09:
        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.batch.ClasspathSourceJar: void <init>(java.io.File,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String,java.lang.String)>($r0, 1, r5, r7, $r11);

        r8 = $r6;

        goto label11;

     label10:
        if r3 != null goto label11;

        $r4 = new org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.ClasspathJar: void <init>(java.io.File,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>($r0, 1, r5, null);

        r8 = $r4;

     label11:
        return r8;
    }

    private void initializeKnownFileNames(java.lang.String[])
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem r1;
        boolean $z0, $z1;
        java.util.Set $r11, $r14;
        java.lang.String[] r0;
        java.util.HashSet $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i11, $i13;
        java.lang.String $r3, $r21, $r22;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r6, $r9;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r5, $r8, $r18;
        char[] $r4, $r7, $r12, r16, r17;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>(int)>(0);

        r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: java.util.Set knownFileNames> = $r19;

        return;

     label1:
        $r20 = new java.util.HashSet;

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        specialinvoke $r20.<java.util.HashSet: void <init>(int)>($i1);

        r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: java.util.Set knownFileNames> = $r20;

        i7 = lengthof r0;

        goto label9;

     label2:
        $r3 = r0[i7];

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        r16 = $r4;

        r17 = (char[]) null;

        $i2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>(46, $r4);

        $i11 = (int) -1;

        if $i2 == $i11 goto label3;

        r16 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] subarray(char[],int,int)>($r4, 0, $i2);

     label3:
        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>(r16, 92, 47);

        i8 = 0;

        goto label7;

     label4:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r6 = $r5[i8];

        $r7 = interfaceinvoke $r6.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: char[] normalizedPath()>();

        $r8 = r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r9 = $r8[i8];

        $z0 = $r9 instanceof org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory;

        if $z0 == 0 goto label6;

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean prefixEquals(char[],char[])>($r7, r16);

        if $z1 == 0 goto label6;

        if r17 == null goto label5;

        $i4 = lengthof $r7;

        $i3 = lengthof r17;

        if $i4 >= $i3 goto label6;

     label5:
        r17 = $r7;

     label6:
        i8 = i8 + 1;

     label7:
        $r18 = r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $i9 = lengthof $r18;

        if i8 < $i9 goto label4;

        if r17 != null goto label8;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: java.util.Set knownFileNames>;

        $r21 = new java.lang.String;

        specialinvoke $r21.<java.lang.String: void <init>(char[])>(r16);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r21);

        goto label9;

     label8:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: java.util.Set knownFileNames>;

        $r22 = new java.lang.String;

        $i6 = lengthof r17;

        $i5 = lengthof r16;

        $r12 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] subarray(char[],int,int)>(r16, $i6, $i5);

        specialinvoke $r22.<java.lang.String: void <init>(char[])>($r12);

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r22);

     label9:
        $i13 = (int) -1;

        i7 = i7 + $i13;

        if i7 >= 0 goto label2;

        return;
    }

    public void cleanup()
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r1, $r2;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        i1 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i0 = lengthof $r1;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r3 = $r2[i1];

        interfaceinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: void reset()>();

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    private static java.lang.String convertPathSeparators(java.lang.String)
    {
        int $i1;
        char $c0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = (int) $c0;

        if $i1 != 47 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 92);

     label2:
        return $r1;
    }

    private org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(java.lang.String, char[], boolean)
    {
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r17, r20, $r21;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r0;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r2;
        java.lang.StringBuffer $r5, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, i9, i10, i11, i12, $i13;
        java.lang.String r1, $r4, $r6, r8, r9, $r10, $r18, $r19;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath r13, $r16;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r11, $r12, $r14, $r15;
        char $c6, $c7, $c8;
        char[] r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: char[];

        z2 := @parameter2: boolean;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: java.util.Set knownFileNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r22 = new java.lang.StringBuffer;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r22.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = lengthof r7;

        if $i0 != $i1 goto label02;

        $r18 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        goto label03;

     label02:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = lengthof r7;

        $i4 = $i2 - $i3;

        $i5 = $i4 - 1;

        $r18 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label03:
        r8 = $r18;

        $c6 = <java.io.File: char separatorChar>;

        $i13 = (int) $c6;

        if $i13 != 47 goto label04;

        $r19 = $r18;

        goto label05;

     label04:
        $c7 = <java.io.File: char separatorChar>;

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String replace(char,char)>(47, $c7);

     label05:
        r9 = $r19;

        r20 = null;

        if r8 != $r19 goto label10;

        i9 = 0;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i10 = lengthof $r14;

        goto label09;

     label06:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r16 = $r15[i9];

        $r17 = interfaceinvoke $r16.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[],java.lang.String,java.lang.String,boolean)>(r7, r8, $r6, z2);

        if $r17 == null goto label08;

        $z6 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean ignoreIfBetter()>();

        if $z6 != 0 goto label07;

        $z8 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean isBetter(org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer)>(r20);

        if $z8 == 0 goto label08;

        return $r17;

     label07:
        $z7 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean isBetter(org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer)>(r20);

        if $z7 == 0 goto label08;

        r20 = $r17;

     label08:
        i9 = i9 + 1;

     label09:
        if i9 < i10 goto label06;

        goto label17;

     label10:
        $c8 = <java.io.File: char separatorChar>;

        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(char,char)>(47, $c8);

        i11 = 0;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i12 = lengthof $r11;

        goto label16;

     label11:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        r13 = $r12[i11];

        $z1 = r13 instanceof org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        if $z1 == 0 goto label12;

        $r21 = interfaceinvoke r13.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[],java.lang.String,java.lang.String,boolean)>(r7, r8, $r6, z2);

        goto label13;

     label12:
        $r21 = interfaceinvoke r13.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(char[],java.lang.String,java.lang.String,boolean)>(r7, r9, $r10, z2);

     label13:
        if $r21 == null goto label15;

        $z3 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean ignoreIfBetter()>();

        if $z3 != 0 goto label14;

        $z5 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean isBetter(org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer)>(r20);

        if $z5 == 0 goto label15;

        return $r21;

     label14:
        $z4 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer: boolean isBetter(org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer)>(r20);

        if $z4 == 0 goto label15;

        r20 = $r21;

     label15:
        i11 = i11 + 1;

     label16:
        if i11 < i12 goto label11;

     label17:
        if r20 == null goto label18;

        return r20;

     label18:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findType(char[][])
    {
        char[][] r0;
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r5;
        int $i0, $i1;
        char[] $r3, $r4;
        java.lang.String $r2;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r0 := @parameter0: char[][];

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>(r0, 47);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $r4 = r0[$i1];

        $r5 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(java.lang.String,char[],boolean)>($r2, $r4, 0);

        return $r5;

     label1:
        return null;
    }

    public char[][][] findTypeNames(char[][])
    {
        char[][] r0;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r4;
        boolean $z0;
        char[][][] $r7, $r8, $r12, $r13, $r14, r15, $r18;
        int i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, $i12;
        java.lang.String r3, $r16, $r19;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r11, r17;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r5, $r6, $r9, $r10;
        char $c0, $c1;
        char[] $r2;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r0 := @parameter0: char[][];

        r15 = (char[][][]) null;

        if r0 == null goto label14;

        $r19 = new java.lang.String;

        $r2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>(r0, 47);

        specialinvoke $r19.<java.lang.String: void <init>(char[])>($r2);

        $c0 = <java.io.File: char separatorChar>;

        $i12 = (int) $c0;

        if $i12 != 47 goto label01;

        $r16 = $r19;

        goto label02;

     label01:
        $c1 = <java.io.File: char separatorChar>;

        $r16 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(char,char)>(47, $c1);

     label02:
        r3 = $r16;

        if $r19 != $r16 goto label07;

        i5 = 0;

        $r9 = r4.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i6 = lengthof $r9;

        goto label06;

     label03:
        $r10 = r4.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r11 = $r10[i5];

        $r12 = interfaceinvoke $r11.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: char[][][] findTypeNames(java.lang.String)>($r19);

        if $r12 == null goto label05;

        if r15 != null goto label04;

        r15 = $r12;

        goto label05;

     label04:
        i7 = lengthof r15;

        i8 = lengthof $r12;

        $r14 = r15;

        $i4 = i8 + i7;

        $r13 = newarray (char[][])[$i4];

        r15 = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i7);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r13, i7, i8);

     label05:
        i5 = i5 + 1;

     label06:
        if i5 < i6 goto label03;

        goto label14;

     label07:
        i9 = 0;

        $r5 = r4.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i10 = lengthof $r5;

        goto label13;

     label08:
        $r6 = r4.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        r17 = $r6[i9];

        $z0 = r17 instanceof org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        if $z0 == 0 goto label09;

        $r18 = interfaceinvoke r17.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: char[][][] findTypeNames(java.lang.String)>($r19);

        goto label10;

     label09:
        $r18 = interfaceinvoke r17.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: char[][][] findTypeNames(java.lang.String)>(r3);

     label10:
        if $r18 == null goto label12;

        if r15 != null goto label11;

        r15 = $r18;

        goto label12;

     label11:
        i11 = lengthof r15;

        i2 = lengthof $r18;

        $r8 = r15;

        $i3 = i2 + i11;

        $r7 = newarray (char[][])[$i3];

        r15 = $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, i11);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r7, i11, i2);

     label12:
        i9 = i9 + 1;

     label13:
        if i9 < i10 goto label08;

     label14:
        return r15;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findType(char[][], boolean)
    {
        char[][] r0;
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r5;
        int $i0, $i1;
        char[] $r3, $r4;
        java.lang.String $r2;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r1;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r0 := @parameter0: char[][];

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>(r0, 47);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $r4 = r0[$i1];

        $r5 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(java.lang.String,char[],boolean)>($r2, $r4, z0);

        return $r5;

     label1:
        return null;
    }

    public org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findType(char[], char[][])
    {
        org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer $r5;
        char[] r0, $r4;
        java.lang.String $r2;
        char[][] r3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r0 := @parameter0: char[];

        r3 := @parameter1: char[][];

        if r0 == null goto label1;

        $r2 = new java.lang.String;

        $r4 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char[],char)>(r3, r0, 47);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r4);

        $r5 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer findClass(java.lang.String,char[],boolean)>($r2, r0, 0);

        return $r5;

     label1:
        return null;
    }

    public boolean isPackage(char[][], char[])
    {
        char[][] r1;
        int i2, i3, i4, i5, $i6;
        java.lang.String r4, $r12, $r13;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath r8, $r11;
        org.eclipse.jdt.internal.compiler.batch.FileSystem r5;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r6, $r7, $r9, $r10;
        char $c0, $c1;
        char[] r2, $r3;

        r5 := @this: org.eclipse.jdt.internal.compiler.batch.FileSystem;

        r1 := @parameter0: char[][];

        r2 := @parameter1: char[];

        $r13 = new java.lang.String;

        $r3 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char[],char)>(r1, r2, 47);

        specialinvoke $r13.<java.lang.String: void <init>(char[])>($r3);

        $c0 = <java.io.File: char separatorChar>;

        $i6 = (int) $c0;

        if $i6 != 47 goto label01;

        $r12 = $r13;

        goto label02;

     label01:
        $c1 = <java.io.File: char separatorChar>;

        $r12 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(char,char)>(47, $c1);

     label02:
        r4 = $r12;

        if $r13 != $r12 goto label06;

        i2 = 0;

        $r9 = r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i3 = lengthof $r9;

        goto label05;

     label03:
        $r10 = r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        $r11 = $r10[i2];

        $z3 = interfaceinvoke $r11.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: boolean isPackage(java.lang.String)>($r13);

        if $z3 == 0 goto label04;

        return 1;

     label04:
        i2 = i2 + 1;

     label05:
        if i2 < i3 goto label03;

        goto label12;

     label06:
        i4 = 0;

        $r6 = r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        i5 = lengthof $r6;

        goto label11;

     label07:
        $r7 = r5.<org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] classpaths>;

        r8 = $r7[i4];

        $z0 = r8 instanceof org.eclipse.jdt.internal.compiler.batch.ClasspathJar;

        if $z0 == 0 goto label08;

        $z2 = interfaceinvoke r8.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: boolean isPackage(java.lang.String)>($r13);

        if $z2 == 0 goto label10;

        goto label09;

     label08:
        $z1 = interfaceinvoke r8.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: boolean isPackage(java.lang.String)>(r4);

        if $z1 == 0 goto label10;

     label09:
        return 1;

     label10:
        i4 = i4 + 1;

     label11:
        if i4 < i5 goto label07;

     label12:
        return 0;
    }
}
