public class com.jidesoft.utils.ThreadCheckingRepaintManager extends javax.swing.RepaintManager
{
    private boolean completeCheck;
    private boolean checkIsShowing;

    public void <init>()
    {
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        specialinvoke r0.<javax.swing.RepaintManager: void <init>()>();

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean completeCheck> = 1;

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean checkIsShowing> = 0;

        return;
    }

    public void <init>(boolean)
    {
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        boolean z0;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.swing.RepaintManager: void <init>()>();

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean completeCheck> = 1;

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean checkIsShowing> = 0;

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean checkIsShowing> = z0;

        return;
    }

    public boolean isCompleteCheck()
    {
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        $z0 = r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean completeCheck>;

        return $z0;
    }

    public void setCompleteCheck(boolean)
    {
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        boolean z0;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean completeCheck> = z0;

        return;
    }

    public synchronized void addInvalidComponent(javax.swing.JComponent)
    {
        javax.swing.JComponent r1;
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        r1 := @parameter0: javax.swing.JComponent;

        specialinvoke r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: void checkThreadViolations(javax.swing.JComponent)>(r1);

        specialinvoke r0.<javax.swing.RepaintManager: void addInvalidComponent(javax.swing.JComponent)>(r1);

        return;
    }

    public synchronized void addDirtyRegion(javax.swing.JComponent, int, int, int, int)
    {
        javax.swing.JComponent r1;
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        int i0, i1, i2, i3;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        r1 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: void checkThreadViolations(javax.swing.JComponent)>(r1);

        specialinvoke r0.<javax.swing.RepaintManager: void addDirtyRegion(javax.swing.JComponent,int,int,int,int)>(r1, i0, i1, i2, i3);

        return;
    }

    private void checkThreadViolations(javax.swing.JComponent)
    {
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        int $i0, i1;
        java.lang.StackTraceElement r7;
        java.lang.String $r5, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, z4, z5, $z6, z7, z8;
        java.io.PrintStream $r3, $r4, $r6;
        javax.swing.JComponent r9;
        java.lang.Exception $r1;
        java.lang.StackTraceElement[] $r2;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        r9 := @parameter0: javax.swing.JComponent;

        $z0 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z0 != 0 goto label7;

        $z1 = r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean completeCheck>;

        if $z1 != 0 goto label1;

        $z3 = specialinvoke r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean checkIsShowing(javax.swing.JComponent)>(r9);

        if $z3 == 0 goto label7;

     label1:
        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>()>();

        z4 = 0;

        z8 = 0;

        z7 = 0;

        z5 = 0;

        $r2 = virtualinvoke $r1.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        r7 = $r2[i1];

        if z7 == 0 goto label3;

        $r8 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("javax.swing.");

        if $z2 == 0 goto label3;

        z5 = 1;

     label3:
        $r10 = "repaint";

        $r11 = virtualinvoke r7.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label4;

        z4 = 1;

        z8 = 1;

        z7 = 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        if z8 == 0 goto label6;

        if z5 != 0 goto label6;

        return;

     label6:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("----------Wrong Thread START");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = specialinvoke r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: java.lang.String getStrackTraceAsString(java.lang.Exception)>($r1);

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("----------Wrong Thread END");

     label7:
        return;
    }

    private boolean checkIsShowing(javax.swing.JComponent)
    {
        javax.swing.JComponent r1;
        com.jidesoft.utils.ThreadCheckingRepaintManager r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        r1 := @parameter0: javax.swing.JComponent;

        $z0 = r0.<com.jidesoft.utils.ThreadCheckingRepaintManager: boolean checkIsShowing>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<javax.swing.JComponent: boolean isShowing()>();

        return $z1;

     label1:
        return 1;
    }

    private java.lang.String getStrackTraceAsString(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.io.ByteArrayOutputStream $r0;
        com.jidesoft.utils.ThreadCheckingRepaintManager r4;
        java.lang.String $r3;
        java.lang.Exception r2;

        r4 := @this: com.jidesoft.utils.ThreadCheckingRepaintManager;

        r2 := @parameter0: java.lang.Exception;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.PrintStream;

        specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke r2.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r1);

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        return $r3;
    }
}
