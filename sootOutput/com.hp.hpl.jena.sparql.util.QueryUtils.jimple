public class com.hp.hpl.jena.sparql.util.QueryUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.QueryUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.QueryUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkQuery(com.hp.hpl.jena.query.Query, boolean)
    {
        com.hp.hpl.jena.query.Query r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        z0 := @parameter1: boolean;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryUtils: void checkParse(com.hp.hpl.jena.query.Query)>(r0);

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryUtils: void checkOp(com.hp.hpl.jena.query.Query,boolean)>(r0, z0);

        return;
    }

    public static void checkOp(com.hp.hpl.jena.query.Query, boolean)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.sse.SSEParseException $r9;
        com.hp.hpl.jena.sparql.sse.builders.BuildException $r7;
        int $i0, $i1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4, r11;
        boolean z0, $z1;
        java.io.PrintStream $r8, $r10;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.sparql.core.QueryCheckException $r5, $r6;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op compile(com.hp.hpl.jena.query.Query)>(r1);

        r11 = $r2;

        if z0 == 0 goto label1;

        r11 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.algebra.Op optimize(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

     label1:
        staticinvoke <com.hp.hpl.jena.sparql.sse.WriterSSE: void out(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.Prologue)>($r0, r11, r1);

        $r3 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

     label2:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.algebra.Op parseOp(java.lang.String)>($r3);

        $i0 = virtualinvoke r11.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label3;

        virtualinvoke r11.<java.lang.Object: int hashCode()>();

        virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryUtils: void dump(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r11, $r4);

        $r6 = new com.hp.hpl.jena.sparql.core.QueryCheckException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.QueryCheckException: void <init>(java.lang.String)>("reparsed algebra expression hashCode does not equal algebra from query");

        throw $r6;

     label3:
        $z1 = virtualinvoke r11.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryUtils: void dump(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r11, $r4);

        $r5 = new com.hp.hpl.jena.sparql.core.QueryCheckException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.QueryCheckException: void <init>(java.lang.String)>("reparsed algebra expression does not equal query algebra");

        throw $r5;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r3);

        throw $r9;

     label6:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r3);

        throw $r7;

     label7:
        return;

        catch com.hp.hpl.jena.sparql.sse.SSEParseException from label2 to label4 with label5;
        catch com.hp.hpl.jena.sparql.sse.builders.BuildException from label2 to label4 with label6;
    }

    private static void dump(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.io.PrintStream $r0, $r2, $r4, $r5;
        com.hp.hpl.jena.sparql.algebra.Op r1, r3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("***********");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1);

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>(r3);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("***********");

        return;
    }

    public static void checkParse(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Syntax $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        com.hp.hpl.jena.query.Query r1, $r7;
        com.hp.hpl.jena.query.QueryException $r20;
        com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r19, r24;
        java.io.PrintStream $r21;
        java.lang.UnsupportedOperationException $r23;
        org.apache.jena.atlas.io.IndentedLineBuffer $r3;
        com.hp.hpl.jena.sparql.core.QueryCheckException $r8, $r9, $r22;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry get()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.lang.SPARQLParserRegistry: boolean containsFactory(com.hp.hpl.jena.query.Syntax)>($r2);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r3 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r3.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void serialize(org.apache.jena.atlas.io.IndentedLineBuffer,com.hp.hpl.jena.query.Syntax)>($r3, $r4);

        $r5 = virtualinvoke $r3.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

     label02:
        r24 = null;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean explicitlySetBaseURI()>();

        if $z1 != 0 goto label03;

        r24 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: java.lang.String getBaseURI()>();

     label03:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r7 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,java.lang.String,com.hp.hpl.jena.query.Syntax)>($r5, r24, $r6);

        if $r7 != null goto label05;

     label04:
        return;

     label05:
        goto label08;

     label06:
        $r23 := @caughtexception;

        return;

     label07:
        $r20 := @caughtexception;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r22 = new com.hp.hpl.jena.sparql.core.QueryCheckException;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.core.QueryCheckException: void <init>(java.lang.String,java.lang.Throwable)>("could not parse output query", $r20);

        throw $r22;

     label08:
        $i0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: int hashCode()>();

        $i1 = virtualinvoke $r7.<com.hp.hpl.jena.query.Query: int hashCode()>();

        if $i0 == $i1 goto label09;

        $r9 = new com.hp.hpl.jena.sparql.core.QueryCheckException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reparsed query hashCode does not equal parsed input query \nQuery (hashCode: ");

        $i2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: int hashCode()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\nQuery2 (hashCode: ");

        $i3 = virtualinvoke $r7.<com.hp.hpl.jena.query.Query: int hashCode()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.core.QueryCheckException: void <init>(java.lang.String)>($r19);

        throw $r9;

     label09:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean equals(java.lang.Object)>($r7);

        if $z2 != 0 goto label10;

        $r8 = new com.hp.hpl.jena.sparql.core.QueryCheckException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.QueryCheckException: void <init>(java.lang.String)>("reparsed output does not equal parsed input");

        throw $r8;

     label10:
        return;

        catch java.lang.UnsupportedOperationException from label02 to label04 with label06;
        catch com.hp.hpl.jena.query.QueryException from label02 to label04 with label07;
    }
}
