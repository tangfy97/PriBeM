public class com.hp.hpl.jena.sparql.util.Loader extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.Loader r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.Loader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class loadClass(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Loader: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r0, null);

        return $r1;
    }

    public static java.lang.Class loadClass(java.lang.String, java.lang.Class)
    {
        int $i0;
        java.lang.String r0, $r7, $r9, $r10, $r16, r17;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r11;
        java.lang.Class $r1, r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r13, $r14, $r15;
        java.lang.ClassNotFoundException $r12;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r11 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Null classNameorIRI");

        throw $r11;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 == 0 goto label2;

        return null;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("urn:");

        if $z1 == 0 goto label3;

        return null;

     label3:
        r17 = r0;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("java:");

        if $z2 == 0 goto label4;

        $r10 = "java:";

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label4:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r17);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/Loader;", $r16);

        return null;

     label7:
        if r2 == null goto label8;

        $z3 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z3 != 0 goto label8;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found but not a ");

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String classShortName(java.lang.Class)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/Loader;", $r9);

        return null;

     label8:
        return $r1;

        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    public static java.lang.Object loadAndInstantiate(java.lang.String, java.lang.Class)
    {
        java.lang.Exception $r4;
        int $i0;
        java.lang.Class r1, $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String r0, $r5, $r6, $r11, $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.Loader: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r0, r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = "java:";

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception during instantiation \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r11 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/util/Loader;", $r13);

        return null;

     label4:
        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
