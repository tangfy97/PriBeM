class com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet extends java.util.AbstractSet
{
    final com.mycila.inject.internal.guava.collect.ArrayTable this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet r0;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet: com.mycila.inject.internal.guava.collect.ArrayTable this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet$1 $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet;

        $r0 = new com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet$1;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet: int size()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet$1: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet,int)>(r1, $i0);

        return $r0;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet r0;
        com.mycila.inject.internal.guava.collect.ArrayTable $r1;
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet: com.mycila.inject.internal.guava.collect.ArrayTable this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ArrayTable: com.mycila.inject.internal.guava.collect.ImmutableList access$100(com.mycila.inject.internal.guava.collect.ArrayTable)>($r1);

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        return $i0;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ArrayTable, com.mycila.inject.internal.guava.collect.ArrayTable$1)
    {
        com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet r0;
        com.mycila.inject.internal.guava.collect.ArrayTable r1;
        com.mycila.inject.internal.guava.collect.ArrayTable$1 r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ArrayTable;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.ArrayTable$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ArrayTable$ColumnMapEntrySet: void <init>(com.mycila.inject.internal.guava.collect.ArrayTable)>(r1);

        return;
    }
}
