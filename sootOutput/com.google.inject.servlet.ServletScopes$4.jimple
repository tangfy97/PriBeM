final class com.google.inject.servlet.ServletScopes$4 extends java.lang.Object implements java.util.concurrent.Callable
{
    final java.util.Map val$scopeMap;
    final java.util.concurrent.Callable val$callable;

    void <init>(java.util.Map, java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r2;
        com.google.inject.servlet.ServletScopes$4 r0;
        java.util.Map r1;

        r0 := @this: com.google.inject.servlet.ServletScopes$4;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.concurrent.Callable;

        r0.<com.google.inject.servlet.ServletScopes$4: java.util.Map val$scopeMap> = r1;

        r0.<com.google.inject.servlet.ServletScopes$4: java.util.concurrent.Callable val$callable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        java.lang.Throwable $r10;
        java.lang.ThreadLocal $r0, $r2, $r4, $r9, $r11;
        java.util.concurrent.Callable $r7;
        java.util.Map $r6;
        java.lang.Object $r1, $r3, $r8;
        com.google.inject.servlet.ServletScopes$4 r5;
        boolean $z0, $z1;

        r5 := @this: com.google.inject.servlet.ServletScopes$4;

        $r0 = <com.google.inject.servlet.GuiceFilter: java.lang.ThreadLocal localContext>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if null != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "An HTTP request is already in progress, cannot scope a new request in this thread.");

        $r2 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal access$000()>();

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        if null != $r3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z1, "A request scope is already in progress, cannot scope a new request in this thread.");

        $r4 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal access$000()>();

        $r6 = r5.<com.google.inject.servlet.ServletScopes$4: java.util.Map val$scopeMap>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r6);

     label5:
        $r7 = r5.<com.google.inject.servlet.ServletScopes$4: java.util.concurrent.Callable val$callable>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.Callable: java.lang.Object call()>();

     label6:
        $r9 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal access$000()>();

        virtualinvoke $r9.<java.lang.ThreadLocal: void remove()>();

        return $r8;

     label7:
        $r10 := @caughtexception;

     label8:
        $r11 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal access$000()>();

        virtualinvoke $r11.<java.lang.ThreadLocal: void remove()>();

        throw $r10;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
