public enum class kodkod.ast.operator.IntOperator extends java.lang.Enum
{
    public static final enum kodkod.ast.operator.IntOperator PLUS;
    public static final enum kodkod.ast.operator.IntOperator MULTIPLY;
    public static final enum kodkod.ast.operator.IntOperator MINUS;
    public static final enum kodkod.ast.operator.IntOperator DIVIDE;
    public static final enum kodkod.ast.operator.IntOperator MODULO;
    public static final enum kodkod.ast.operator.IntOperator AND;
    public static final enum kodkod.ast.operator.IntOperator OR;
    public static final enum kodkod.ast.operator.IntOperator XOR;
    public static final enum kodkod.ast.operator.IntOperator SHL;
    public static final enum kodkod.ast.operator.IntOperator SHR;
    public static final enum kodkod.ast.operator.IntOperator SHA;
    public static final enum kodkod.ast.operator.IntOperator NEG;
    public static final enum kodkod.ast.operator.IntOperator NOT;
    public static final enum kodkod.ast.operator.IntOperator ABS;
    public static final enum kodkod.ast.operator.IntOperator SGN;
    static final int unary;
    static final int binary;
    static final int nary;
    private static final kodkod.ast.operator.IntOperator[] ENUM$VALUES;

    static void <clinit>()
    {
        kodkod.ast.operator.IntOperator $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38;
        kodkod.ast.operator.IntOperator$15 $r53;
        kodkod.ast.operator.IntOperator$14 $r52;
        kodkod.ast.operator.IntOperator$13 $r51;
        kodkod.ast.operator.IntOperator$12 $r50;
        kodkod.ast.operator.IntOperator$11 $r49;
        kodkod.ast.operator.IntOperator$10 $r48;
        kodkod.ast.operator.IntOperator[] $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17;
        kodkod.ast.operator.IntOperator$9 $r47;
        kodkod.ast.operator.IntOperator$5 $r43;
        kodkod.ast.operator.IntOperator$6 $r44;
        kodkod.ast.operator.IntOperator$7 $r45;
        kodkod.ast.operator.IntOperator$8 $r46;
        kodkod.ast.operator.IntOperator$1 $r39;
        kodkod.ast.operator.IntOperator$2 $r40;
        kodkod.ast.operator.IntOperator$3 $r41;
        kodkod.ast.operator.IntOperator$4 $r42;

        $r39 = new kodkod.ast.operator.IntOperator$1;

        specialinvoke $r39.<kodkod.ast.operator.IntOperator$1: void <init>(java.lang.String,int)>("PLUS", 0);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS> = $r39;

        $r40 = new kodkod.ast.operator.IntOperator$2;

        specialinvoke $r40.<kodkod.ast.operator.IntOperator$2: void <init>(java.lang.String,int)>("MULTIPLY", 1);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY> = $r40;

        $r41 = new kodkod.ast.operator.IntOperator$3;

        specialinvoke $r41.<kodkod.ast.operator.IntOperator$3: void <init>(java.lang.String,int)>("MINUS", 2);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MINUS> = $r41;

        $r42 = new kodkod.ast.operator.IntOperator$4;

        specialinvoke $r42.<kodkod.ast.operator.IntOperator$4: void <init>(java.lang.String,int)>("DIVIDE", 3);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator DIVIDE> = $r42;

        $r43 = new kodkod.ast.operator.IntOperator$5;

        specialinvoke $r43.<kodkod.ast.operator.IntOperator$5: void <init>(java.lang.String,int)>("MODULO", 4);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MODULO> = $r43;

        $r44 = new kodkod.ast.operator.IntOperator$6;

        specialinvoke $r44.<kodkod.ast.operator.IntOperator$6: void <init>(java.lang.String,int)>("AND", 5);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND> = $r44;

        $r45 = new kodkod.ast.operator.IntOperator$7;

        specialinvoke $r45.<kodkod.ast.operator.IntOperator$7: void <init>(java.lang.String,int)>("OR", 6);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR> = $r45;

        $r46 = new kodkod.ast.operator.IntOperator$8;

        specialinvoke $r46.<kodkod.ast.operator.IntOperator$8: void <init>(java.lang.String,int)>("XOR", 7);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator XOR> = $r46;

        $r47 = new kodkod.ast.operator.IntOperator$9;

        specialinvoke $r47.<kodkod.ast.operator.IntOperator$9: void <init>(java.lang.String,int)>("SHL", 8);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHL> = $r47;

        $r48 = new kodkod.ast.operator.IntOperator$10;

        specialinvoke $r48.<kodkod.ast.operator.IntOperator$10: void <init>(java.lang.String,int)>("SHR", 9);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHR> = $r48;

        $r49 = new kodkod.ast.operator.IntOperator$11;

        specialinvoke $r49.<kodkod.ast.operator.IntOperator$11: void <init>(java.lang.String,int)>("SHA", 10);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHA> = $r49;

        $r50 = new kodkod.ast.operator.IntOperator$12;

        specialinvoke $r50.<kodkod.ast.operator.IntOperator$12: void <init>(java.lang.String,int)>("NEG", 11);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG> = $r50;

        $r51 = new kodkod.ast.operator.IntOperator$13;

        specialinvoke $r51.<kodkod.ast.operator.IntOperator$13: void <init>(java.lang.String,int)>("NOT", 12);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT> = $r51;

        $r52 = new kodkod.ast.operator.IntOperator$14;

        specialinvoke $r52.<kodkod.ast.operator.IntOperator$14: void <init>(java.lang.String,int)>("ABS", 13);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS> = $r52;

        $r53 = new kodkod.ast.operator.IntOperator$15;

        specialinvoke $r53.<kodkod.ast.operator.IntOperator$15: void <init>(java.lang.String,int)>("SGN", 14);

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN> = $r53;

        $r15 = newarray (kodkod.ast.operator.IntOperator)[15];

        $r16 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $r15[0] = $r16;

        $r17 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $r15[1] = $r17;

        $r18 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MINUS>;

        $r15[2] = $r18;

        $r19 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator DIVIDE>;

        $r15[3] = $r19;

        $r20 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MODULO>;

        $r15[4] = $r20;

        $r21 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $r15[5] = $r21;

        $r22 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $r15[6] = $r22;

        $r23 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator XOR>;

        $r15[7] = $r23;

        $r24 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHL>;

        $r15[8] = $r24;

        $r25 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHR>;

        $r15[9] = $r25;

        $r26 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHA>;

        $r15[10] = $r26;

        $r27 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        $r15[11] = $r27;

        $r28 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        $r15[12] = $r28;

        $r29 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        $r15[13] = $r29;

        $r30 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        $r15[14] = $r30;

        <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator[] ENUM$VALUES> = $r15;

        $r31 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        $i0 = specialinvoke $r31.<kodkod.ast.operator.IntOperator: int index()>();

        $r32 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        $i1 = specialinvoke $r32.<kodkod.ast.operator.IntOperator: int index()>();

        $i2 = $i0 | $i1;

        $r33 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        $i3 = specialinvoke $r33.<kodkod.ast.operator.IntOperator: int index()>();

        $i4 = $i2 | $i3;

        $r34 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        $i5 = specialinvoke $r34.<kodkod.ast.operator.IntOperator: int index()>();

        $i6 = $i4 | $i5;

        <kodkod.ast.operator.IntOperator: int unary> = $i6;

        $i7 = <kodkod.ast.operator.IntOperator: int unary>;

        $i17 = (int) -1;

        $i8 = $i7 ^ $i17;

        <kodkod.ast.operator.IntOperator: int binary> = $i8;

        $r35 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $i9 = specialinvoke $r35.<kodkod.ast.operator.IntOperator: int index()>();

        $r36 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $i10 = specialinvoke $r36.<kodkod.ast.operator.IntOperator: int index()>();

        $i11 = $i9 | $i10;

        $r37 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $i12 = specialinvoke $r37.<kodkod.ast.operator.IntOperator: int index()>();

        $i13 = $i11 | $i12;

        $r38 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $i14 = specialinvoke $r38.<kodkod.ast.operator.IntOperator: int index()>();

        $i15 = $i13 | $i14;

        <kodkod.ast.operator.IntOperator: int nary> = $i15;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        kodkod.ast.operator.IntOperator r0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.IntOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private final int index()
    {
        int $i0, $i1;
        kodkod.ast.operator.IntOperator r0;

        r0 := @this: kodkod.ast.operator.IntOperator;

        $i0 = virtualinvoke r0.<kodkod.ast.operator.IntOperator: int ordinal()>();

        $i1 = 1 << $i0;

        return $i1;
    }

    public final boolean unary()
    {
        kodkod.ast.operator.IntOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.IntOperator;

        $i0 = <kodkod.ast.operator.IntOperator: int unary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.IntOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean binary()
    {
        kodkod.ast.operator.IntOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.IntOperator;

        $i0 = <kodkod.ast.operator.IntOperator: int binary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.IntOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean nary()
    {
        kodkod.ast.operator.IntOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.IntOperator;

        $i0 = <kodkod.ast.operator.IntOperator: int nary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.IntOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static kodkod.ast.operator.IntOperator[] values()
    {
        int $i0;
        kodkod.ast.operator.IntOperator[] $r0, $r1;

        $r0 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (kodkod.ast.operator.IntOperator)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static kodkod.ast.operator.IntOperator valueOf(java.lang.String)
    {
        kodkod.ast.operator.IntOperator $r2;
        kodkod.ast.operator.IntOperator[] $r0;
        java.lang.IllegalArgumentException $r5;
        int i0, $i2;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator[] ENUM$VALUES>;

        i0 = lengthof $r0;

        goto label2;

     label1:
        $r2 = $r0[i0];

        $r3 = virtualinvoke $r2.<kodkod.ast.operator.IntOperator: java.lang.String name()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    void <init>(java.lang.String, int, kodkod.ast.operator.IntOperator)
    {
        kodkod.ast.operator.IntOperator r0, r2;
        int i0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.IntOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: kodkod.ast.operator.IntOperator;

        specialinvoke r0.<kodkod.ast.operator.IntOperator: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }
}
