public class com.jhlabs.image.BrushedMetalFilter extends java.lang.Object implements java.awt.image.BufferedImageOp
{
    private int radius;
    private float amount;
    private int color;
    private float shine;
    private boolean monochrome;
    private java.util.Random randomNumbers;

    public void <init>()
    {
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.image.BrushedMetalFilter: int radius> = 10;

        r0.<com.jhlabs.image.BrushedMetalFilter: float amount> = 0.1F;

        r0.<com.jhlabs.image.BrushedMetalFilter: int color> = -7829368;

        r0.<com.jhlabs.image.BrushedMetalFilter: float shine> = 0.1F;

        r0.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome> = 1;

        return;
    }

    public void <init>(int, int, float, boolean, float)
    {
        int i0, i1;
        float f0, f1;
        com.jhlabs.image.BrushedMetalFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        z0 := @parameter3: boolean;

        f1 := @parameter4: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.image.BrushedMetalFilter: int radius> = 10;

        r0.<com.jhlabs.image.BrushedMetalFilter: float amount> = 0.1F;

        r0.<com.jhlabs.image.BrushedMetalFilter: int color> = -7829368;

        r0.<com.jhlabs.image.BrushedMetalFilter: float shine> = 0.1F;

        r0.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome> = 1;

        r0.<com.jhlabs.image.BrushedMetalFilter: int color> = i0;

        r0.<com.jhlabs.image.BrushedMetalFilter: int radius> = i1;

        r0.<com.jhlabs.image.BrushedMetalFilter: float amount> = f0;

        r0.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome> = z0;

        r0.<com.jhlabs.image.BrushedMetalFilter: float shine> = f1;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b10;
        java.util.Random $r2, $r3;
        int[] $r4, $r5;
        boolean $z0;
        java.awt.image.BufferedImage r0, r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        com.jhlabs.image.BrushedMetalFilter r1;

        r1 := @this: com.jhlabs.image.BrushedMetalFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label01;

        r6 = virtualinvoke r1.<com.jhlabs.image.BrushedMetalFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label01:
        $r4 = newarray (int)[$i0];

        $r5 = newarray (int)[$i0];

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(0L);

        r1.<com.jhlabs.image.BrushedMetalFilter: java.util.Random randomNumbers> = $r2;

        $i2 = r1.<com.jhlabs.image.BrushedMetalFilter: int color>;

        $i30 = $i2 & -16777216;

        $i3 = r1.<com.jhlabs.image.BrushedMetalFilter: int color>;

        $i4 = $i3 >> 16;

        $i31 = $i4 & 255;

        $i5 = r1.<com.jhlabs.image.BrushedMetalFilter: int color>;

        $i6 = $i5 >> 8;

        $i32 = $i6 & 255;

        $i7 = r1.<com.jhlabs.image.BrushedMetalFilter: int color>;

        $i33 = $i7 & 255;

        i34 = 0;

     label02:
        if i34 >= $i1 goto label10;

        i35 = 0;

     label03:
        if i35 >= $i0 goto label07;

        i36 = $i31;

        i37 = $i32;

        i38 = $i33;

        $f0 = r1.<com.jhlabs.image.BrushedMetalFilter: float shine>;

        $b10 = $f0 cmpl 0.0F;

        if $b10 == 0 goto label04;

        $f7 = r1.<com.jhlabs.image.BrushedMetalFilter: float shine>;

        $f8 = 255.0F * $f7;

        $d4 = (double) $f8;

        $d1 = (double) i35;

        $d0 = (double) $i0;

        $d2 = $d1 / $d0;

        $d3 = $d2 * 3.141592653589793;

        $d5 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d6 = $d4 * $d5;

        i39 = (int) $d6;

        i36 = $i31 + i39;

        i37 = $i32 + i39;

        i38 = $i33 + i39;

     label04:
        $z0 = r1.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome>;

        if $z0 == 0 goto label05;

        $r3 = r1.<com.jhlabs.image.BrushedMetalFilter: java.util.Random randomNumbers>;

        $f1 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f2 = 2.0F * $f1;

        $f3 = $f2 - 1.0F;

        $f5 = 255.0F * $f3;

        $f4 = r1.<com.jhlabs.image.BrushedMetalFilter: float amount>;

        $f6 = $f5 * $f4;

        i40 = (int) $f6;

        $i19 = i36 + i40;

        $i20 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int clamp(int)>($i19);

        $i21 = $i20 << 16;

        $i23 = $i30 | $i21;

        $i22 = i37 + i40;

        $i24 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int clamp(int)>($i22);

        $i25 = $i24 << 8;

        $i27 = $i23 | $i25;

        $i26 = i38 + i40;

        $i28 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int clamp(int)>($i26);

        $i29 = $i27 | $i28;

        $r4[i35] = $i29;

        goto label06;

     label05:
        $i11 = specialinvoke r1.<com.jhlabs.image.BrushedMetalFilter: int random(int)>(i36);

        $i12 = $i11 << 16;

        $i13 = $i30 | $i12;

        $i14 = specialinvoke r1.<com.jhlabs.image.BrushedMetalFilter: int random(int)>(i37);

        $i15 = $i14 << 8;

        $i16 = $i13 | $i15;

        $i17 = specialinvoke r1.<com.jhlabs.image.BrushedMetalFilter: int random(int)>(i38);

        $i18 = $i16 | $i17;

        $r4[i35] = $i18;

     label06:
        i35 = i35 + 1;

        goto label03;

     label07:
        $i8 = r1.<com.jhlabs.image.BrushedMetalFilter: int radius>;

        if $i8 == 0 goto label08;

        $i9 = r1.<com.jhlabs.image.BrushedMetalFilter: int radius>;

        virtualinvoke r1.<com.jhlabs.image.BrushedMetalFilter: void blur(int[],int[],int,int)>($r4, $r5, $i0, $i9);

        virtualinvoke r1.<com.jhlabs.image.BrushedMetalFilter: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r6, 0, i34, $i0, 1, $r5);

        goto label09;

     label08:
        virtualinvoke r1.<com.jhlabs.image.BrushedMetalFilter: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r6, 0, i34, $i0, 1, $r4);

     label09:
        i34 = i34 + 1;

        goto label02;

     label10:
        return r6;
    }

    private int random(int)
    {
        java.util.Random $r1;
        int $i0, i1, i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        i1 := @parameter0: int;

        $r1 = r0.<com.jhlabs.image.BrushedMetalFilter: java.util.Random randomNumbers>;

        $f0 = virtualinvoke $r1.<java.util.Random: float nextFloat()>();

        $f1 = 2.0F * $f0;

        $f2 = $f1 - 1.0F;

        $f4 = 255.0F * $f2;

        $f3 = r0.<com.jhlabs.image.BrushedMetalFilter: float amount>;

        $f5 = $f4 * $f3;

        $i0 = (int) $f5;

        i2 = i1 + $i0;

        if i2 >= 0 goto label1;

        i2 = 0;

        goto label2;

     label1:
        if i2 <= 255 goto label2;

        i2 = 255;

     label2:
        return i2;
    }

    private static int clamp(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0;

     label1:
        if i0 <= 255 goto label2;

        return 255;

     label2:
        return i0;
    }

    private static int mod(int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = i4 / i0;

        $i2 = i1 * i0;

        i5 = i4 - $i2;

        if i5 >= 0 goto label1;

        $i3 = i5 + i0;

        return $i3;

     label1:
        return i5;
    }

    public void blur(int[], int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40, i41, $i43, $i45;
        com.jhlabs.image.BrushedMetalFilter r2;

        r2 := @this: com.jhlabs.image.BrushedMetalFilter;

        r1 := @parameter0: int[];

        r0 := @parameter1: int[];

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        i1 = i0 - 1;

        $i3 = 2 * i2;

        i4 = $i3 + 1;

        i34 = 0;

        i35 = 0;

        i36 = 0;

        i37 = neg i2;

     label1:
        if i37 > i2 goto label2;

        $i28 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int mod(int,int)>(i37, i0);

        i38 = r1[$i28];

        $i29 = i38 >> 16;

        $i30 = $i29 & 255;

        i34 = i34 + $i30;

        $i31 = i38 >> 8;

        $i32 = $i31 & 255;

        i35 = i35 + $i32;

        $i33 = i38 & 255;

        i36 = i36 + $i33;

        i37 = i37 + 1;

        goto label1;

     label2:
        i39 = 0;

     label3:
        if i39 >= i0 goto label6;

        $i5 = i34 / i4;

        $i6 = $i5 << 16;

        $i9 = -16777216 | $i6;

        $i7 = i35 / i4;

        $i8 = $i7 << 8;

        $i11 = $i9 | $i8;

        $i10 = i36 / i4;

        $i12 = $i11 | $i10;

        r0[i39] = $i12;

        $i13 = i39 + i2;

        i40 = $i13 + 1;

        if i40 <= i1 goto label4;

        i40 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int mod(int,int)>(i40, i0);

     label4:
        $i27 = i39 - i2;

        i41 = $i27;

        if $i27 >= 0 goto label5;

        i41 = staticinvoke <com.jhlabs.image.BrushedMetalFilter: int mod(int,int)>($i27, i0);

     label5:
        $i25 = r1[i40];

        $i26 = r1[i41];

        $i15 = $i25 & 16711680;

        $i14 = $i26 & 16711680;

        $i16 = $i15 - $i14;

        $i17 = $i16 >> 16;

        i34 = i34 + $i17;

        $i43 = (int) 65280;

        $i19 = $i25 & $i43;

        $i45 = (int) 65280;

        $i18 = $i26 & $i45;

        $i20 = $i19 - $i18;

        $i21 = $i20 >> 8;

        i35 = i35 + $i21;

        $i23 = $i25 & 255;

        $i22 = $i26 & 255;

        $i24 = $i23 - $i22;

        i36 = i36 + $i24;

        i39 = i39 + 1;

        goto label3;

     label6:
        return;
    }

    public void setRadius(int)
    {
        int i0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BrushedMetalFilter: int radius> = i0;

        return;
    }

    public int getRadius()
    {
        int $i0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        $i0 = r0.<com.jhlabs.image.BrushedMetalFilter: int radius>;

        return $i0;
    }

    public void setAmount(float)
    {
        float f0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.BrushedMetalFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        float $f0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        $f0 = r0.<com.jhlabs.image.BrushedMetalFilter: float amount>;

        return $f0;
    }

    public void setColor(int)
    {
        int i0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BrushedMetalFilter: int color> = i0;

        return;
    }

    public int getColor()
    {
        int $i0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        $i0 = r0.<com.jhlabs.image.BrushedMetalFilter: int color>;

        return $i0;
    }

    public void setMonochrome(boolean)
    {
        com.jhlabs.image.BrushedMetalFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome> = z0;

        return;
    }

    public boolean getMonochrome()
    {
        com.jhlabs.image.BrushedMetalFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        $z0 = r0.<com.jhlabs.image.BrushedMetalFilter: boolean monochrome>;

        return $z0;
    }

    public void setShine(float)
    {
        float f0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.BrushedMetalFilter: float shine> = f0;

        return;
    }

    public float getShine()
    {
        float $f0;
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        $f0 = r0.<com.jhlabs.image.BrushedMetalFilter: float shine>;

        return $f0;
    }

    public java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
    {
        java.awt.image.BufferedImage $r0, r1;
        java.awt.image.ColorModel r4;
        int $i0, $i1;
        java.awt.image.WritableRaster $r2;
        com.jhlabs.image.BrushedMetalFilter r3;
        boolean $z0;

        r3 := @this: com.jhlabs.image.BrushedMetalFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r4 := @parameter1: java.awt.image.ColorModel;

        if r4 != null goto label1;

        r4 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

     label1:
        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $r2 = virtualinvoke r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i0, $i1);

        $z0 = virtualinvoke r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r4, $r2, $z0, null);

        return $r0;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r0;
        java.awt.image.BufferedImage r1;
        int $i0, $i1;
        com.jhlabs.image.BrushedMetalFilter r2;

        r2 := @this: com.jhlabs.image.BrushedMetalFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r0;
    }

    public java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Point2D r0, r3;
        com.jhlabs.image.BrushedMetalFilter r2;
        double $d0, $d1;

        r2 := @this: com.jhlabs.image.BrushedMetalFilter;

        r0 := @parameter0: java.awt.geom.Point2D;

        r3 := @parameter1: java.awt.geom.Point2D;

        if r3 != null goto label1;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>()>();

        r3 = $r1;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r3.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        return r3;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        return null;
    }

    public void setRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        java.awt.image.BufferedImage r0;
        int[] r2;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;
        com.jhlabs.image.BrushedMetalFilter r3;

        r3 := @this: com.jhlabs.image.BrushedMetalFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r1.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        goto label3;

     label2:
        virtualinvoke r0.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.BrushedMetalFilter r0;

        r0 := @this: com.jhlabs.image.BrushedMetalFilter;

        return "Texture/Brushed Metal...";
    }
}
