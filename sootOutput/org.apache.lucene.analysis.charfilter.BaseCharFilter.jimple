public abstract class org.apache.lucene.analysis.charfilter.BaseCharFilter extends org.apache.lucene.analysis.CharFilter
{
    private int[] offsets;
    private int[] diffs;
    private int size;
    static final boolean $assertionsDisabled;

    public void <init>(java.io.Reader)
    {
        java.io.Reader r1;
        org.apache.lucene.analysis.charfilter.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.BaseCharFilter;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.CharFilter: void <init>(java.io.Reader)>(r1);

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size> = 0;

        return;
    }

    protected int correct(int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i19, $i21;
        org.apache.lucene.analysis.charfilter.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.BaseCharFilter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        if $r1 == null goto label01;

        $r2 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i1 = $r2[0];

        if i0 >= $i1 goto label02;

     label01:
        return i0;

     label02:
        $i2 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        i16 = $i2 - 1;

        $r3 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i3 = $r3[i16];

        if i0 < $i3 goto label03;

        $r10 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i14 = $r10[i16];

        $i15 = i0 + $i14;

        return $i15;

     label03:
        i17 = 0;

        $i21 = (int) -1;

        i18 = $i21;

     label04:
        if i16 < i17 goto label07;

        $i9 = i17 + i16;

        i18 = $i9 >>> 1;

        $r7 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i10 = $r7[i18];

        if i0 >= $i10 goto label05;

        i16 = i18 - 1;

        goto label04;

     label05:
        $r8 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i11 = $r8[i18];

        if i0 <= $i11 goto label06;

        i17 = i18 + 1;

        goto label04;

     label06:
        $r9 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i12 = $r9[i18];

        $i13 = i0 + $i12;

        return $i13;

     label07:
        $r4 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i4 = $r4[i18];

        if i0 >= $i4 goto label10;

        if i18 != 0 goto label08;

        $i19 = i0;

        goto label09;

     label08:
        $r6 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i7 = i18 - 1;

        $i8 = $r6[$i7];

        $i19 = i0 + $i8;

     label09:
        return $i19;

     label10:
        $r5 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i5 = $r5[i18];

        $i6 = i0 + $i5;

        return $i6;
    }

    protected int getLastCumulativeDiff()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.charfilter.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.BaseCharFilter;

        $r1 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        if $r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i0 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

     label2:
        return $i2;
    }

    protected void addOffCorrectMap(int, int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r15, $r18, $r22, $r26, $r27, $r28, $r29, $r30, $r31;
        boolean $z0;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r20, $r21, $r24;
        java.lang.AssertionError $r8;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r19, $r23, $r25;
        org.apache.lucene.analysis.charfilter.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.charfilter.BaseCharFilter;

        i2 := @parameter0: int;

        i6 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        if $r1 != null goto label1;

        $r30 = newarray (int)[64];

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets> = $r30;

        $r31 = newarray (int)[64];

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs> = $r31;

        goto label2;

     label1:
        $i1 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $r2 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label2;

        $r26 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $r27 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r26);

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets> = $r27;

        $r28 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $r29 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r28);

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs> = $r29;

     label2:
        $z0 = <org.apache.lucene.analysis.charfilter.BaseCharFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i12 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        if $i12 == 0 goto label3;

        $r7 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i13 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i14 = $i13 - 1;

        $i15 = $r7[$i14];

        if i2 >= $i15 goto label3;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Offset #");

        $i16 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than the last recorded offset ");

        $r15 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i17 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i18 = $i17 - 1;

        $i19 = $r15[$i18];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r18 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $r19 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r22 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $r23 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r8;

     label3:
        $i20 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        if $i20 == 0 goto label4;

        $r5 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i7 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i8 = $i7 - 1;

        $i9 = $r5[$i8];

        if i2 == $i9 goto label5;

     label4:
        $r3 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] offsets>;

        $i3 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $r3[$i3] = i2;

        $r4 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i4 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size> = $i5;

        $r4[$i4] = i6;

        goto label6;

     label5:
        $r6 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int[] diffs>;

        $i10 = r0.<org.apache.lucene.analysis.charfilter.BaseCharFilter: int size>;

        $i11 = $i10 - 1;

        $r6[$i11] = i6;

     label6:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/analysis/charfilter/BaseCharFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.charfilter.BaseCharFilter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
