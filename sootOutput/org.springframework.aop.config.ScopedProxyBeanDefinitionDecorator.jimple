class org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator extends java.lang.Object implements org.springframework.beans.factory.xml.BeanDefinitionDecorator
{
    private static final java.lang.String PROXY_TARGET_CLASS;

    void <init>()
    {
        org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator r0;

        r0 := @this: org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.springframework.beans.factory.config.BeanDefinitionHolder decorate(org.w3c.dom.Node, org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r11;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r7;
        org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator r5;
        org.springframework.beans.factory.config.BeanDefinitionHolder r1, $r8;
        org.w3c.dom.Node r0;
        org.springframework.beans.factory.xml.ParserContext r2;
        java.lang.Boolean $r4;
        org.springframework.beans.factory.parsing.BeanComponentDefinition $r12;
        org.springframework.beans.factory.config.BeanDefinition $r13;
        java.lang.String $r3, $r9, $r10;
        boolean $z0, $z1, z2;
        org.w3c.dom.Element r6;

        r5 := @this: org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.springframework.beans.factory.config.BeanDefinitionHolder;

        r2 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        z2 = 1;

        $z0 = r0 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label1;

        r6 = (org.w3c.dom.Element) r0;

        $z1 = interfaceinvoke r6.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("proxy-target-class");

        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("proxy-target-class");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        $r7 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $r8 = staticinvoke <org.springframework.aop.scope.ScopedProxyUtils: org.springframework.beans.factory.config.BeanDefinitionHolder createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>(r1, $r7, z2);

        $r9 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        $r10 = staticinvoke <org.springframework.aop.scope.ScopedProxyUtils: java.lang.String getTargetBeanName(java.lang.String)>($r9);

        $r11 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r12 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        $r13 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        specialinvoke $r12.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String)>($r13, $r10);

        virtualinvoke $r11.<org.springframework.beans.factory.xml.XmlReaderContext: void fireComponentRegistered(org.springframework.beans.factory.parsing.ComponentDefinition)>($r12);

        return $r8;
    }

    public static void <clinit>()
    {
        <org.springframework.aop.config.ScopedProxyBeanDefinitionDecorator: java.lang.String PROXY_TARGET_CLASS> = "proxy-target-class";

        return;
    }
}
