public class org.apache.xmlbeans.impl.common.ReaderInputStream extends org.apache.xmlbeans.impl.common.PushedInputStream
{
    private java.io.Reader reader;
    private java.io.Writer writer;
    private char[] buf;
    public static int defaultBufferSize;

    public void <init>(java.io.Reader, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        int $i0;
        org.apache.xmlbeans.impl.common.ReaderInputStream r0;
        java.io.Reader r1;
        java.lang.String r2;

        r0 := @this: org.apache.xmlbeans.impl.common.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.String;

        $i0 = <org.apache.xmlbeans.impl.common.ReaderInputStream: int defaultBufferSize>;

        specialinvoke r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: void <init>(java.io.Reader,java.lang.String,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(java.io.Reader, java.lang.String, int) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r3;
        java.io.Reader r1;
        java.lang.IllegalArgumentException $r6;
        int i0;
        java.io.OutputStreamWriter $r2;
        char[] $r5;
        org.apache.xmlbeans.impl.common.ReaderInputStream r0;
        java.lang.String r4;

        r0 := @this: org.apache.xmlbeans.impl.common.ReaderInputStream;

        r1 := @parameter0: java.io.Reader;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.common.PushedInputStream: void <init>()>();

        if i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size <= 0");

        throw $r6;

     label1:
        r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.Reader reader> = r1;

        $r2 = new java.io.OutputStreamWriter;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.OutputStream getOutputStream()>();

        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r3, r4);

        r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.Writer writer> = $r2;

        $r5 = newarray (char)[i0];

        r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: char[] buf> = $r5;

        return;
    }

    public void fill(int) throws java.io.IOException
    {
        java.io.Reader $r2;
        int $i0, $i1, i2;
        java.io.Writer $r4, $r5;
        char[] $r1, $r3;
        org.apache.xmlbeans.impl.common.ReaderInputStream r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ReaderInputStream;

        i2 := @parameter0: int;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.Reader reader>;

        $r1 = r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: char[] buf>;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[])>($r1);

        if $i0 >= 0 goto label2;

        return;

     label2:
        $r4 = r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.Writer writer>;

        $r3 = r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: char[] buf>;

        virtualinvoke $r4.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0);

        $r5 = r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void flush()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ReaderInputStream: int available()>();

        if $i1 <= 0 goto label1;

        return;
    }

    static void <clinit>()
    {
        <org.apache.xmlbeans.impl.common.ReaderInputStream: int defaultBufferSize> = 2048;

        return;
    }
}
