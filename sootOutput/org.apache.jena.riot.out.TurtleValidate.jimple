public class org.apache.jena.riot.out.TurtleValidate extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.riot.out.TurtleValidate r0;

        r0 := @this: org.apache.jena.riot.out.TurtleValidate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static boolean checkValidPrefixedName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkValidPrefixPart(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkValidNamePart(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected static boolean checkValidPrefixPart(java.lang.String)
    {
        java.text.StringCharacterIterator $r2;
        int $i0, $i2;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r2 = new java.text.StringCharacterIterator;

        specialinvoke $r2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r0);

        $c1 = interfaceinvoke $r2.<java.text.CharacterIterator: char first()>();

        $z0 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkNameStartChar(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = (int) $c1;

        if $i2 != 95 goto label3;

        return 0;

     label3:
        $z1 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkNameTail(java.text.CharacterIterator)>($r2);

        return $z1;
    }

    private static boolean checkValidPrefixName(java.lang.String)
    {
        org.apache.jena.riot.RiotException $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r0, $r1, $r2, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label1;

        $r3 = new org.apache.jena.riot.RiotException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken short form -- ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.jena.riot.RiotException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkValidPrefixedName(java.lang.String,java.lang.String)>($r1, $r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected static boolean checkValidNamePart(java.lang.String)
    {
        java.text.StringCharacterIterator $r1;
        int $i0;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r1 = new java.text.StringCharacterIterator;

        specialinvoke $r1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r0);

        $c1 = interfaceinvoke $r1.<java.text.CharacterIterator: char first()>();

        $z0 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkNameStartChar(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkNameTail(java.text.CharacterIterator)>($r1);

        return $z1;
    }

    private static boolean checkNameTail(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        int $i1, $i3;
        char c0;
        boolean $z0;

        r0 := @parameter0: java.text.CharacterIterator;

        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

     label1:
        $i1 = (int) c0;

        $i3 = (int) 65535;

        if $i1 == $i3 goto label3;

        $z0 = staticinvoke <org.apache.jena.riot.out.TurtleValidate: boolean checkNameChar(char)>(c0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        return 1;
    }

    protected static boolean checkNameStartChar(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        if $i1 != 95 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected static boolean checkNameChar(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        if $i1 != 95 goto label2;

        return 1;

     label2:
        $i2 = (int) c0;

        if $i2 != 45 goto label3;

        return 1;

     label3:
        return 0;
    }
}
