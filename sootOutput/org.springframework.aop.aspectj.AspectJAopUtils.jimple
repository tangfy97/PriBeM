public abstract class org.springframework.aop.aspectj.AspectJAopUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.aop.aspectj.AspectJAopUtils r0;

        r0 := @this: org.springframework.aop.aspectj.AspectJAopUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isBeforeAdvice(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.AspectJPrecedenceInformation $r1;
        org.aopalliance.aop.Advice $r2;
        org.springframework.aop.Advisor r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $r1 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)>(r0);

        if $r1 == null goto label1;

        $z1 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectJPrecedenceInformation: boolean isBeforeAdvice()>();

        return $z1;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.aop.Advisor: org.aopalliance.aop.Advice getAdvice()>();

        $z0 = $r2 instanceof org.springframework.aop.BeforeAdvice;

        return $z0;
    }

    public static boolean isAfterAdvice(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.AspectJPrecedenceInformation $r1;
        org.aopalliance.aop.Advice $r2;
        org.springframework.aop.Advisor r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $r1 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)>(r0);

        if $r1 == null goto label1;

        $z1 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectJPrecedenceInformation: boolean isAfterAdvice()>();

        return $z1;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.aop.Advisor: org.aopalliance.aop.Advice getAdvice()>();

        $z0 = $r2 instanceof org.springframework.aop.AfterAdvice;

        return $z0;
    }

    public static org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.AspectJPrecedenceInformation $r2, $r3;
        org.aopalliance.aop.Advice $r1;
        org.springframework.aop.Advisor r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $z0 = r0 instanceof org.springframework.aop.aspectj.AspectJPrecedenceInformation;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.aop.aspectj.AspectJPrecedenceInformation) r0;

        return $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.springframework.aop.Advisor: org.aopalliance.aop.Advice getAdvice()>();

        $z1 = $r1 instanceof org.springframework.aop.aspectj.AspectJPrecedenceInformation;

        if $z1 == 0 goto label2;

        $r2 = (org.springframework.aop.aspectj.AspectJPrecedenceInformation) $r1;

        return $r2;

     label2:
        return null;
    }
}
