public class com.hp.hpl.jena.reasoner.FGraph extends java.lang.Object implements com.hp.hpl.jena.reasoner.Finder
{
    protected com.hp.hpl.jena.graph.Graph graph;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.FGraph r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.reasoner.FGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph> = r1;

        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.FGraph r0;
        com.hp.hpl.jena.util.iterator.NullIterator $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern r2;
        com.hp.hpl.jena.graph.Graph $r1, $r3;
        com.hp.hpl.jena.graph.TripleMatch $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.FGraph;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        if $r1 != null goto label1;

        $r6 = new com.hp.hpl.jena.util.iterator.NullIterator;

        specialinvoke $r6.<com.hp.hpl.jena.util.iterator.NullIterator: void <init>()>();

        return $r6;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.TripleMatch asTripleMatch()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r4);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r12;
        com.hp.hpl.jena.reasoner.FGraph r0;
        com.hp.hpl.jena.reasoner.Finder r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r7, $r8, $r11;
        com.hp.hpl.jena.reasoner.TriplePattern r3;
        com.hp.hpl.jena.graph.Graph $r1, $r4, $r9;
        com.hp.hpl.jena.graph.TripleMatch $r5, $r10;

        r0 := @this: com.hp.hpl.jena.reasoner.FGraph;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r1 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        if $r1 != null goto label1;

        $r12 = new com.hp.hpl.jena.util.iterator.NullIterator;

        specialinvoke $r12.<com.hp.hpl.jena.util.iterator.NullIterator: void <init>()>();

        return $r12;

     label1:
        if r2 != null goto label2;

        $r9 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r10 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.TripleMatch asTripleMatch()>();

        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r10);

        return $r11;

     label2:
        $r4 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.TripleMatch asTripleMatch()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r5);

        $r7 = interfaceinvoke r2.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r3);

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r7);

        return $r8;
    }

    public com.hp.hpl.jena.graph.Graph getGraph()
    {
        com.hp.hpl.jena.reasoner.FGraph r0;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.FGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        return $r1;
    }

    public boolean contains(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.FGraph r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.FGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = r0.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4, $r5);

        return $z0;
    }
}
