public class org.apache.poi.ss.format.CellNumberFormatter extends org.apache.poi.ss.format.CellFormatter
{
    private final java.lang.String desc;
    private java.lang.String printfFmt;
    private double scale;
    private org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint;
    private org.apache.poi.ss.format.CellNumberFormatter$Special slash;
    private org.apache.poi.ss.format.CellNumberFormatter$Special exponent;
    private org.apache.poi.ss.format.CellNumberFormatter$Special numerator;
    private org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger;
    private org.apache.poi.ss.format.CellNumberFormatter$Special afterFractional;
    private boolean integerCommas;
    private final java.util.List specials;
    private java.util.List integerSpecials;
    private java.util.List fractionalSpecials;
    private java.util.List numeratorSpecials;
    private java.util.List denominatorSpecials;
    private java.util.List exponentSpecials;
    private java.util.List exponentDigitSpecials;
    private int maxDenominator;
    private java.lang.String numeratorFmt;
    private java.lang.String denominatorFmt;
    private boolean improperFraction;
    private java.text.DecimalFormat decimalFmt;
    static final org.apache.poi.ss.format.CellFormatter SIMPLE_NUMBER;
    private static final org.apache.poi.ss.format.CellFormatter SIMPLE_INT;
    private static final org.apache.poi.ss.format.CellFormatter SIMPLE_FLOAT;

    public void <init>(java.lang.String)
    {
        org.apache.poi.ss.format.CellFormatType $r4;
        java.lang.StringBuffer $r5, $r31, $r45, $r46, $r47, $r48;
        java.lang.String r1, $r28, $r30, $r39, $r40, $r49;
        org.apache.poi.ss.format.CellNumberFormatter$NumPartHandler $r3;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r6, $r7, $r8, $r12, $r13, $r17, $r18, $r19, $r22, $r56, $r58, $r59, $r62, r64, r65, $r66;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r9, $r10, $r11, $r14, $r15, $r16, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r29, $r32, $r34, $r35, $r36, $r37, $r41, $r50, $r51, $r52, $r53, $r54, $r55, $r57, $r60, $r61, r63;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i16, i17;
        java.util.LinkedList $r2;
        java.util.Iterator $r33, $r42;
        java.text.DecimalFormat $r38;
        char $c18;
        java.lang.Object $r43, $r44;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.poi.ss.format.CellFormatter: void <init>(java.lang.String)>(r1);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale> = 1.0;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials> = $r2;

        $r3 = new org.apache.poi.ss.format.CellNumberFormatter$NumPartHandler;

        specialinvoke $r3.<org.apache.poi.ss.format.CellNumberFormatter$NumPartHandler: void <init>(org.apache.poi.ss.format.CellNumberFormatter,org.apache.poi.ss.format.CellNumberFormatter$1)>(r0, null);

        $r4 = <org.apache.poi.ss.format.CellFormatType: org.apache.poi.ss.format.CellFormatType NUMBER>;

        $r5 = staticinvoke <org.apache.poi.ss.format.CellFormatPart: java.lang.StringBuffer parseFormat(java.lang.String,org.apache.poi.ss.format.CellFormatType,org.apache.poi.ss.format.CellFormatPart$PartHandler)>(r1, $r4, $r3);

        $r6 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        if $r6 != null goto label01;

        $r58 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r58 == null goto label02;

     label01:
        $r7 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash>;

        if $r7 == null goto label02;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash> = null;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator> = null;

     label02:
        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: void interpretCommas(java.lang.StringBuffer)>($r5);

        i14 = 0;

        $r59 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        if $r59 != null goto label03;

        i15 = 0;

        goto label04;

     label03:
        $i0 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int interpretPrecision()>();

        i15 = $i0;

        i14 = 1 + $i0;

        if $i0 != 0 goto label04;

        $r57 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r56 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        interfaceinvoke $r57.<java.util.List: boolean remove(java.lang.Object)>($r56);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint> = null;

     label04:
        if i15 != 0 goto label05;

        $r55 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials> = $r55;

        goto label06;

     label05:
        $r10 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r9 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r8 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        $i1 = interfaceinvoke $r9.<java.util.List: int indexOf(java.lang.Object)>($r8);

        $i2 = $i1 + 1;

        $i3 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int fractionalEnd()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.List subList(int,int)>($i2, $i3);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials> = $r11;

     label06:
        $r12 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r12 != null goto label07;

        $r54 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentSpecials> = $r54;

        goto label08;

     label07:
        $r14 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r13 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        $i4 = interfaceinvoke $r14.<java.util.List: int indexOf(java.lang.Object)>($r13);

        $r15 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specialsFor(int,int)>($i4, 2);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentSpecials> = $r15;

        $i5 = $i4 + 2;

        $r16 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specialsFor(int)>($i5);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentDigitSpecials> = $r16;

     label08:
        $r17 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash>;

        if $r17 != null goto label09;

        $r52 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials> = $r52;

        $r53 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials> = $r53;

        goto label13;

     label09:
        $r18 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        if $r18 != null goto label10;

        $r51 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials> = $r51;

        goto label11;

     label10:
        $r20 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r19 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        $i6 = interfaceinvoke $r20.<java.util.List: int indexOf(java.lang.Object)>($r19);

        $r21 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specialsFor(int)>($i6);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials> = $r21;

     label11:
        $r23 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r22 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash>;

        $i7 = interfaceinvoke $r23.<java.util.List: int indexOf(java.lang.Object)>($r22);

        $i8 = $i7 + 1;

        $r24 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specialsFor(int)>($i8);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials> = $r24;

        $r25 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $z0 = interfaceinvoke $r25.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        $r50 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials> = $r50;

        goto label13;

     label12:
        $r26 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $i9 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: int maxValue(java.util.List)>($r26);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: int maxDenominator> = $i9;

        $r27 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r28 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: java.lang.String singleNumberFormat(java.util.List)>($r27);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String numeratorFmt> = $r28;

        $r29 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $r30 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: java.lang.String singleNumberFormat(java.util.List)>($r29);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String denominatorFmt> = $r30;

     label13:
        $r60 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i16 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int integerEnd()>();

        $r61 = interfaceinvoke $r60.<java.util.List: java.util.List subList(int,int)>(0, $i16);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials> = $r61;

        $r62 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r62 != null goto label14;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>(java.lang.String)>("%");

        $i13 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int calculateIntegerPartWidth()>();

        i17 = $i13 + i14;

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i17);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i15);

        virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("f");

        $r49 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String printfFmt> = $r49;

        goto label25;

     label14:
        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        z5 = 1;

        z7 = 1;

        z6 = 1;

        r63 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r32 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $i10 = interfaceinvoke $r32.<java.util.List: int size()>();

        if $i10 != 1 goto label15;

        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        z5 = 0;

        z7 = 0;

        goto label20;

     label15:
        $r33 = interfaceinvoke r63.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke $r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r44 = interfaceinvoke $r33.<java.util.Iterator: java.lang.Object next()>();

        r64 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r44;

        $z4 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r64);

        if $z4 == 0 goto label19;

        if z6 == 0 goto label17;

        $c18 = 35;

        goto label18;

     label17:
        $c18 = 48;

     label18:
        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c18);

        z5 = 0;

        z7 = 0;

        z6 = 0;

     label19:
        goto label16;

     label20:
        $r34 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials>;

        $i11 = interfaceinvoke $r34.<java.util.List: int size()>();

        if $i11 <= 0 goto label24;

        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r41 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials>;

        $r42 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z2 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label24;

        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r65 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r43;

        $z3 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r65);

        if $z3 == 0 goto label23;

        if z7 != 0 goto label22;

        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label22:
        z5 = 0;

        z7 = 0;

     label23:
        goto label21;

     label24:
        virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(69);

        $r36 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentSpecials>;

        $r35 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentSpecials>;

        $i12 = interfaceinvoke $r35.<java.util.List: int size()>();

        $r37 = interfaceinvoke $r36.<java.util.List: java.util.List subList(int,int)>(2, $i12);

        staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: void placeZeros(java.lang.StringBuffer,java.util.List)>($r31, $r37);

        $r38 = new java.text.DecimalFormat;

        $r39 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r38.<java.text.DecimalFormat: void <init>(java.lang.String)>($r39);

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.text.DecimalFormat decimalFmt> = $r38;

     label25:
        $r66 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r66 == null goto label26;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale> = 1.0;

     label26:
        $r40 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String desc> = $r40;

        return;
    }

    private static void placeZeros(java.lang.StringBuffer, java.util.List)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r3;
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.StringBuffer r4;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r4 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r2;

        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r3);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label2:
        goto label1;

     label3:
        return;
    }

    private static org.apache.poi.ss.format.CellNumberFormatter$Special firstDigit(java.util.List)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r3;
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r2;

        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r3);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$StringMod insertMod(org.apache.poi.ss.format.CellNumberFormatter$Special, java.lang.CharSequence, int)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r0;
        java.lang.CharSequence r2;
        int i0;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r0 = new org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        specialinvoke $r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special,java.lang.CharSequence,int,org.apache.poi.ss.format.CellNumberFormatter$1)>(r1, r2, i0, null);

        return $r0;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$StringMod deleteMod(org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, org.apache.poi.ss.format.CellNumberFormatter$Special, boolean)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1, r2;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r0;
        boolean z0, z1;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z1 := @parameter3: boolean;

        $r0 = new org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        specialinvoke $r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean)>(r1, z0, r2, z1);

        return $r0;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$StringMod replaceMod(org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, org.apache.poi.ss.format.CellNumberFormatter$Special, boolean, char)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1, r2;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r0;
        char c0;
        boolean z0, z1;

        r1 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.poi.ss.format.CellNumberFormatter$Special;

        z1 := @parameter3: boolean;

        c0 := @parameter4: char;

        $r0 = new org.apache.poi.ss.format.CellNumberFormatter$StringMod;

        specialinvoke $r0.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: void <init>(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,char)>(r1, z0, r2, z1, c0);

        return $r0;
    }

    private static java.lang.String singleNumberFormat(java.util.List)
    {
        java.util.List r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r5;

        r2 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%0");

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static int maxValue(java.util.List)
    {
        java.util.List r0;
        int $i0, $i2;
        long $l1;
        double $d0, $d1, $d2;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        $d2 = $d1 - 1.0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d2);

        $i2 = (int) $l1;

        return $i2;
    }

    private java.util.List specialsFor(int, int)
    {
        java.util.ListIterator $r3;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7, $i8;
        boolean $z0, $z1;
        org.apache.poi.ss.format.CellNumberFormatter$Special r6, r8;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1, $r2, $r7, $r9, $r10;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        $r2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i3 = i0 + i2;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i3);

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r8 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r4;

        i7 = i0 + i2;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object next()>();

        r6 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r5;

        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r6);

        if $z1 == 0 goto label4;

        $i5 = r6.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $i4 = r8.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $i6 = $i5 - $i4;

        if $i6 <= 1 goto label3;

        goto label4;

     label3:
        i7 = i7 + 1;

        r8 = r6;

        goto label2;

     label4:
        $r9 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i8 = i7 + 1;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.List subList(int,int)>(i0, $i8);

        return $r10;
    }

    private java.util.List specialsFor(int)
    {
        int i0;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specialsFor(int,int)>(i0, 0);

        return $r1;
    }

    private static boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r0;
        char $c0, $c1, $c2;
        int $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter$Special;

        $c0 = r0.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i3 = (int) $c0;

        if $i3 == 48 goto label1;

        $c1 = r0.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i4 = (int) $c1;

        if $i4 == 63 goto label1;

        $c2 = r0.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i5 = (int) $c2;

        if $i5 != 35 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private org.apache.poi.ss.format.CellNumberFormatter$Special previousNumber()
    {
        java.util.ListIterator $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.ss.format.CellNumberFormatter$Special r6, r7, r8, r9;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1, $r2;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        $r2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        r6 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r4;

        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r6);

        if $z1 == 0 goto label5;

        r7 = r6;

        r8 = r6;

     label2:
        $z2 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        r9 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r5;

        $i2 = r8.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $i1 = r9.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $i3 = $i2 - $i1;

        if $i3 <= 1 goto label3;

        goto label4;

     label3:
        $z3 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r9);

        if $z3 == 0 goto label4;

        r7 = r9;

        r8 = r9;

        goto label2;

     label4:
        return r7;

     label5:
        goto label1;

     label6:
        return null;
    }

    private int calculateIntegerPartWidth()
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r4, $r5;
        java.util.ListIterator $r2;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1;
        int i0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        i0 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r3;

        $r5 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger>;

        if r4 != $r5 goto label2;

        goto label4;

     label2:
        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r4);

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        goto label1;

     label4:
        return i0;
    }

    private int interpretPrecision()
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1, $r2, r7;
        java.util.ListIterator $r5;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r3, $r4;
        int $i0, i1, $i3;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        if $r1 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        i1 = 0;

        $r4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        $i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>($r2);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        $z0 = interfaceinvoke $r5.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object next()>();

     label2:
        $z2 = interfaceinvoke $r5.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r6;

        $z1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean isDigitFmt(org.apache.poi.ss.format.CellNumberFormatter$Special)>(r7);

        if $z1 == 0 goto label3;

        i1 = i1 + 1;

        goto label2;

     label3:
        return i1;
    }

    private void interpretCommas(java.lang.StringBuffer)
    {
        java.util.ListIterator $r2, $r8, $r14;
        boolean $z0, $z1, z2, $z3;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r3, r5, r11, r12;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1, $r7, $r13;
        java.lang.StringBuffer r6;
        int $i0, $i1, $i2, $i4, $i5, i8, $i9, $i10, $i11;
        double $d0, $d1, $d2, $d3;
        char $c3, $c6, $c7;
        java.lang.Object $r4, $r9, $r10;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r6 := @parameter0: java.lang.StringBuffer;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i0 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int integerEnd()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

        z2 = 1;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean integerCommas> = 0;

     label01:
        $z0 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label05;

        $r10 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        r11 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r10;

        $c7 = r11.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i9 = (int) $c7;

        if $i9 == 44 goto label02;

        z2 = 0;

        goto label04;

     label02:
        if z2 == 0 goto label03;

        $d2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale>;

        $d3 = $d2 / 1000.0;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale> = $d3;

        goto label04;

     label03:
        r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean integerCommas> = 1;

     label04:
        goto label01;

     label05:
        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        if $r3 == null goto label08;

        $r7 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i5 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: int fractionalEnd()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator(int)>($i5);

     label06:
        $z1 = interfaceinvoke $r8.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label08;

        $r9 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object previous()>();

        r12 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r9;

        $c6 = r12.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i10 = (int) $c6;

        if $i10 == 44 goto label07;

        goto label08;

     label07:
        $d0 = r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale>;

        $d1 = $d0 / 1000.0;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale> = $d1;

        goto label06;

     label08:
        $r13 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.ListIterator listIterator()>();

        i8 = 0;

     label09:
        $z3 = interfaceinvoke $r14.<java.util.ListIterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r4 = interfaceinvoke $r14.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r4;

        $i1 = r5.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $i2 = $i1 - i8;

        r5.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos> = $i2;

        $c3 = r5.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i11 = (int) $c3;

        if $i11 != 44 goto label10;

        i8 = i8 + 1;

        interfaceinvoke $r14.<java.util.ListIterator: void remove()>();

        $i4 = r5.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i4);

     label10:
        goto label09;

     label11:
        return;
    }

    private int integerEnd()
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r5, $r6;
        int $i0;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        if $r1 == null goto label1;

        $r9 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger> = $r9;

        goto label4;

     label1:
        $r2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r2 == null goto label2;

        $r8 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger> = $r8;

        goto label4;

     label2:
        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        if $r3 == null goto label3;

        $r7 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger> = $r7;

        goto label4;

     label3:
        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger> = null;

     label4:
        $r10 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger>;

        if $r10 != null goto label5;

        $r6 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        goto label6;

     label5:
        $r5 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger>;

        $i0 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>($r4);

     label6:
        return $i0;
    }

    private int fractionalEnd()
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1, $r2, $r3, $r6, $r7, $r8;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r4, $r5;
        int $i0;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterFractional> = $r7;

        goto label3;

     label1:
        $r2 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        if $r2 == null goto label2;

        $r6 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterInteger> = $r6;

        goto label3;

     label2:
        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterFractional> = null;

     label3:
        $r8 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterFractional>;

        if $r8 != null goto label4;

        $r5 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        goto label5;

     label4:
        $r4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special afterFractional>;

        $i0 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r3);

     label5:
        return $i0;
    }

    public void formatValue(java.lang.StringBuffer, java.lang.Object)
    {
        byte $b0;
        java.lang.CharSequence $r18, $r20, $r21, $r38;
        java.lang.StringBuilder $r24, $r25, $r44;
        java.lang.Object[] $r6;
        java.lang.Double $r9;
        long $l13;
        java.util.TreeSet $r39;
        java.lang.StringBuffer r12, $r40, $r41;
        java.lang.String $r8, $r19, $r26, $r31;
        java.lang.Number $r1;
        java.lang.IllegalStateException $r45;
        java.util.ListIterator $r34;
        java.util.Formatter $r42;
        java.util.Locale $r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, z13, $z14, $z15, $z16, $z17;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r3, $r10, r14, $r15, $r16, $r32;
        org.apache.poi.ss.format.CellNumberFormatter r2;
        java.util.List $r28, $r33;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r36, r37;
        int $i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12, i14, i15, $i16, i17, i18, i19, $i20, $i21, $i22, $i23, $i25;
        double $d0, $d1, d2, d3;
        java.util.Iterator $r35;
        char $c7, $c11;
        java.lang.Object r0, $r13, $r17, $r27;
        java.util.BitSet $r43;

        r2 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r12 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Object;

        $r1 = (java.lang.Number) r0;

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        $d1 = r2.<org.apache.poi.ss.format.CellNumberFormatter: double scale>;

        d2 = $d0 * $d1;

        $b0 = d2 cmpg 0.0;

        $i22 = (int) $b0;

        if $i22 >= 0 goto label01;

        $z17 = 1;

        $z16 = 1;

        goto label02;

     label01:
        $z17 = 0;

        $z16 = 0;

     label02:
        z0 = $z17;

        if $z16 == 0 goto label03;

        d2 = neg d2;

     label03:
        d3 = 0.0;

        $r3 = r2.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash>;

        if $r3 == null goto label05;

        $z9 = r2.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction>;

        if $z9 == 0 goto label04;

        d3 = d2;

        d2 = 0.0;

        goto label05;

     label04:
        d3 = d2 % 1.0;

        $l13 = (long) d2;

        d2 = (double) $l13;

     label05:
        $r39 = new java.util.TreeSet;

        specialinvoke $r39.<java.util.TreeSet: void <init>()>();

        $r40 = new java.lang.StringBuffer;

        $r31 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String desc>;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>(java.lang.String)>($r31);

        $r32 = r2.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r32 == null goto label06;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeScientific(double,java.lang.StringBuffer,java.util.Set)>(d2, $r40, $r39);

        goto label09;

     label06:
        $z1 = r2.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction>;

        if $z1 == 0 goto label07;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeFraction(double,java.lang.StringBuffer,double,java.lang.StringBuffer,java.util.Set)>(d2, null, d3, $r40, $r39);

        goto label09;

     label07:
        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = new java.util.Formatter;

        specialinvoke $r42.<java.util.Formatter: void <init>(java.lang.Appendable)>($r41);

        $r7 = <org.apache.poi.ss.format.CellNumberFormatter: java.util.Locale LOCALE>;

        $r8 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String printfFmt>;

        $r6 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r6[0] = $r9;

        virtualinvoke $r42.<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, $r8, $r6);

        $r10 = r2.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        if $r10 != null goto label08;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeFractional(java.lang.StringBuffer,java.lang.StringBuffer)>($r41, $r40);

        $r28 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $z8 = r2.<org.apache.poi.ss.format.CellNumberFormatter: boolean integerCommas>;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>($r41, $r40, $r28, $r39, $z8);

        goto label09;

     label08:
        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeFraction(double,java.lang.StringBuffer,double,java.lang.StringBuffer,java.util.Set)>(d2, $r41, d3, $r40, $r39);

     label09:
        $r33 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        $r34 = interfaceinvoke $r33.<java.util.List: java.util.ListIterator listIterator()>();

        $r35 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();

        $z11 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label10;

        $r27 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        $r36 = (org.apache.poi.ss.format.CellNumberFormatter$StringMod) $r27;

        goto label11;

     label10:
        $r36 = null;

     label11:
        r37 = $r36;

        i14 = 0;

        $r43 = new java.util.BitSet;

        specialinvoke $r43.<java.util.BitSet: void <init>()>();

     label12:
        $z12 = interfaceinvoke $r34.<java.util.ListIterator: boolean hasNext()>();

        if $z12 == 0 goto label29;

        $r13 = interfaceinvoke $r34.<java.util.ListIterator: java.lang.Object next()>();

        r14 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r13;

        $i1 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        i2 = $i1 + i14;

        $i3 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $z2 = virtualinvoke $r43.<java.util.BitSet: boolean get(int)>($i3);

        if $z2 != 0 goto label13;

        $c11 = virtualinvoke $r40.<java.lang.StringBuffer: char charAt(int)>(i2);

        $i23 = (int) $c11;

        if $i23 != 35 goto label13;

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i2);

        $i25 = (int) -1;

        i14 = i14 + $i25;

        $i12 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        virtualinvoke $r43.<java.util.BitSet: void set(int)>($i12);

     label13:
        if r37 == null goto label28;

        $r15 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special special>;

        if r14 != $r15 goto label28;

        $i4 = virtualinvoke $r40.<java.lang.StringBuffer: int length()>();

        $i5 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        i15 = $i5 + i14;

        z13 = 0;

        $i6 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op>;

        tableswitch($i6)
        {
            case 1: goto label16;
            case 2: goto label14;
            case 3: goto label17;
            default: goto label24;
        };

     label14:
        $r21 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd>;

        $z6 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>(",");

        if $z6 == 0 goto label15;

        $i9 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $z7 = virtualinvoke $r43.<java.util.BitSet: boolean get(int)>($i9);

        if $z7 == 0 goto label15;

        goto label25;

     label15:
        z13 = 1;

     label16:
        $i16 = i15 + z13;

        $r38 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd>;

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>($i16, $r38);

        goto label25;

     label17:
        i17 = r14.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $z3 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: boolean startInclusive>;

        if $z3 != 0 goto label18;

        i17 = i17 + 1;

        i15 = i15 + 1;

     label18:
        $z14 = virtualinvoke $r43.<java.util.BitSet: boolean get(int)>(i17);

        if $z14 == 0 goto label19;

        i17 = i17 + 1;

        i15 = i15 + 1;

        goto label18;

     label19:
        $r16 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: org.apache.poi.ss.format.CellNumberFormatter$Special end>;

        i18 = $r16.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        $z4 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: boolean endInclusive>;

        if $z4 == 0 goto label20;

        i18 = i18 + 1;

     label20:
        $i8 = i18 + i14;

        if i15 >= $i8 goto label25;

        $r19 = "";

        $r18 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd>;

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z5 == 0 goto label21;

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(i15, $i8);

        goto label23;

     label21:
        $r20 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: java.lang.CharSequence toAdd>;

        $c7 = interfaceinvoke $r20.<java.lang.CharSequence: char charAt(int)>(0);

        i19 = i15;

     label22:
        if i19 >= $i8 goto label23;

        virtualinvoke $r40.<java.lang.StringBuffer: void setCharAt(int,char)>(i19, $c7);

        i19 = i19 + 1;

        goto label22;

     label23:
        virtualinvoke $r43.<java.util.BitSet: void set(int,int)>(i17, i18);

        goto label25;

     label24:
        $r45 = new java.lang.IllegalStateException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown op: ");

        $i10 = r37.<org.apache.poi.ss.format.CellNumberFormatter$StringMod: int op>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r45;

     label25:
        $i20 = virtualinvoke $r40.<java.lang.StringBuffer: int length()>();

        $i21 = $i20 - $i4;

        i14 = i14 + $i21;

        $z15 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label26;

        $r17 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.apache.poi.ss.format.CellNumberFormatter$StringMod) $r17;

        goto label27;

     label26:
        r37 = null;

     label27:
        goto label13;

     label28:
        goto label12;

     label29:
        if z0 == 0 goto label30;

        virtualinvoke r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

     label30:
        virtualinvoke r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r40);

        return;
    }

    private void writeScientific(double, java.lang.StringBuffer, java.util.Set)
    {
        java.util.ListIterator $r8;
        java.text.FieldPosition $r17;
        java.lang.StringBuffer r4, $r16, $r18;
        int $i0, i1, $i3, $i6, $i7;
        java.lang.String $r12;
        double d0;
        boolean $z0;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r15;
        java.text.DecimalFormat $r3;
        java.util.Set r5;
        char $c2, $c4, c5;
        org.apache.poi.ss.format.CellNumberFormatter r2;
        java.util.List $r6, $r7, $r13;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r10, $r14;
        java.lang.Object $r9;

        r2 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        d0 := @parameter0: double;

        r4 := @parameter1: java.lang.StringBuffer;

        r5 := @parameter2: java.util.Set;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = new java.text.FieldPosition;

        specialinvoke $r17.<java.text.FieldPosition: void <init>(int)>(1);

        $r3 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.text.DecimalFormat decimalFmt>;

        virtualinvoke $r3.<java.text.DecimalFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, $r16, $r17);

        $r6 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $z0 = r2.<org.apache.poi.ss.format.CellNumberFormatter: boolean integerCommas>;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>($r16, r4, $r6, r5, $z0);

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeFractional(java.lang.StringBuffer,java.lang.StringBuffer)>($r16, r4);

        $i0 = virtualinvoke $r17.<java.text.FieldPosition: int getEndIndex()>();

        i1 = $i0 + 1;

        $c2 = virtualinvoke $r16.<java.lang.StringBuffer: char charAt(int)>(i1);

        c5 = $c2;

        $i6 = (int) $c2;

        if $i6 == 45 goto label1;

        c5 = 43;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(i1, 43);

     label1:
        $r7 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentSpecials>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.ListIterator listIterator(int)>(1);

        $r9 = interfaceinvoke $r8.<java.util.ListIterator: java.lang.Object next()>();

        $r15 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r9;

        $c4 = $r15.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        if c5 == 45 goto label2;

        $i7 = (int) $c4;

        if $i7 != 43 goto label3;

     label2:
        $r10 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod replaceMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,char)>($r15, 1, $r15, 1, c5);

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label4;

     label3:
        $r14 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod deleteMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean)>($r15, 1, $r15, 1);

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label4:
        $r18 = new java.lang.StringBuffer;

        $i3 = i1 + 1;

        $r12 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String substring(int)>($i3);

        specialinvoke $r18.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);

        $r13 = r2.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List exponentDigitSpecials>;

        specialinvoke r2.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>($r18, r4, $r13, r5, 0);

        return;
    }

    private void writeFraction(double, java.lang.StringBuffer, double, java.lang.StringBuffer, java.util.Set)
    {
        byte $b5, $b6, $b7, $b10, $b11, $b16, $b17;
        java.util.Set r2;
        long $l0, $l1, $l2, $l3;
        java.lang.StringBuffer r1, r18;
        java.lang.String $r4, $r6;
        java.lang.RuntimeException $r44;
        java.util.List[] $r11, $r21, $r23, $r25, $r27, $r29, $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12, $z13, z14, $z15, $z16;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r14, $r16, $r20, r45, r46;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r3, $r5, $r8, $r9, $r12, $r13, $r19, $r22, $r24, $r26, $r28, $r30, $r31, $r32, $r33, $r35, $r36, $r39, $r40, $r41;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r15, $r17, $r42, $r43;
        int $i4, $i8, $i9, $i12, $i13, $i14, $i15, i18, i19;
        double d0, d1, $d2, $d3, $d4;
        org.apache.poi.ss.format.SimpleFraction $r7;
        java.lang.Object $r10, $r34, $r37;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        d1 := @parameter0: double;

        r18 := @parameter1: java.lang.StringBuffer;

        d0 := @parameter2: double;

        r1 := @parameter3: java.lang.StringBuffer;

        r2 := @parameter4: java.util.Set;

        $z0 = r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction>;

        if $z0 != 0 goto label18;

        $b6 = d0 cmpl 0.0;

        if $b6 != 0 goto label03;

        $r29 = newarray (java.util.List)[1];

        $r30 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r29[0] = $r30;

        $z7 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(48, $r29);

        if $z7 != 0 goto label03;

        $r31 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>(r18, r1, $r31, r2, 0);

        $r33 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r32 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $i12 = interfaceinvoke $r32.<java.util.List: int size()>();

        $i13 = $i12 - 1;

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>($i13);

        r45 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r34;

        $r36 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $r35 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $i14 = interfaceinvoke $r35.<java.util.List: int size()>();

        $i15 = $i14 - 1;

        $r37 = interfaceinvoke $r36.<java.util.List: java.lang.Object get(int)>($i15);

        r46 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r37;

        $r38 = newarray (java.util.List)[3];

        $r39 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r38[0] = $r39;

        $r40 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r38[1] = $r40;

        $r41 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        $r38[2] = $r41;

        $z8 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(63, $r38);

        if $z8 == 0 goto label01;

        $r43 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod replaceMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,char)>(r45, 0, r46, 1, 32);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r43);

        goto label02;

     label01:
        $r42 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod deleteMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean)>(r45, 0, r46, 1);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r42);

     label02:
        return;

     label03:
        $b7 = d1 cmpl 0.0;

        if $b7 != 0 goto label04;

        $b11 = d0 cmpl 0.0;

        if $b11 != 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        z10 = $z9;

        $b16 = d0 cmpl 0.0;

        if $b16 != 0 goto label06;

        $r27 = newarray (java.util.List)[1];

        $r28 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r27[0] = $r28;

        $z6 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(48, $r27);

        if $z6 == 0 goto label07;

     label06:
        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        z12 = $z11;

        if z10 == 0 goto label10;

        $r23 = newarray (java.util.List)[1];

        $r24 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r23[0] = $r24;

        $z4 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasOnly(char,java.util.List[])>(35, $r23);

        if $z4 != 0 goto label09;

        $r25 = newarray (java.util.List)[1];

        $r26 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r25[0] = $r26;

        $z5 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(48, $r25);

        if $z5 != 0 goto label10;

     label09:
        $z13 = 1;

        goto label11;

     label10:
        $z13 = 0;

     label11:
        z14 = $z13;

        if z10 != 0 goto label12;

        $b10 = d1 cmpl 0.0;

        if $b10 != 0 goto label12;

        if z12 == 0 goto label12;

        $r21 = newarray (java.util.List)[1];

        $r22 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r21[0] = $r22;

        $z3 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(48, $r21);

        if $z3 != 0 goto label12;

        $z15 = 1;

        goto label13;

     label12:
        $z15 = 0;

     label13:
        if z14 != 0 goto label14;

        if $z15 == 0 goto label17;

     label14:
        $r9 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r8 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $i8 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i9 = $i8 - 1;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i9);

        $r20 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r10;

        $r11 = newarray (java.util.List)[2];

        $r12 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        $r11[0] = $r12;

        $r13 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        $r11[1] = $r13;

        $z2 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: boolean hasChar(char,java.util.List[])>(63, $r11);

        if $z2 == 0 goto label15;

        $r16 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        $r17 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod replaceMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,char)>($r20, 1, $r16, 0, 32);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17);

        goto label16;

     label15:
        $r14 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        $r15 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod deleteMod(org.apache.poi.ss.format.CellNumberFormatter$Special,boolean,org.apache.poi.ss.format.CellNumberFormatter$Special,boolean)>($r20, 1, $r14, 0);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r15);

     label16:
        goto label18;

     label17:
        $r19 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>(r18, r1, $r19, r2, 0);

     label18:
        $b17 = d0 cmpl 0.0;

        if $b17 == 0 goto label19;

        $z1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction>;

        if $z1 == 0 goto label20;

        $d4 = d0 % 1.0;

        $b5 = $d4 cmpl 0.0;

        if $b5 != 0 goto label20;

     label19:
        $l0 = staticinvoke <java.lang.Math: long round(double)>(d0);

        i18 = (int) $l0;

        i19 = 1;

        goto label21;

     label20:
        $i4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: int maxDenominator>;

        $r7 = staticinvoke <org.apache.poi.ss.format.SimpleFraction: org.apache.poi.ss.format.SimpleFraction buildFractionMaxDenominator(double,int)>(d0, $i4);

        i18 = virtualinvoke $r7.<org.apache.poi.ss.format.SimpleFraction: int getNumerator()>();

        i19 = virtualinvoke $r7.<org.apache.poi.ss.format.SimpleFraction: int getDenominator()>();

     label21:
        $z16 = r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction>;

        if $z16 == 0 goto label22;

        $l1 = (long) i18;

        $d2 = (double) i19;

        $d3 = d1 * $d2;

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $l3 = $l1 + $l2;

        i18 = (int) $l3;

     label22:
        $r4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String numeratorFmt>;

        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List numeratorSpecials>;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: void writeSingleInteger(java.lang.String,int,java.lang.StringBuffer,java.util.List,java.util.Set)>($r4, i18, r1, $r3, r2);

        $r6 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.lang.String denominatorFmt>;

        $r5 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List denominatorSpecials>;

        specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: void writeSingleInteger(java.lang.String,int,java.lang.StringBuffer,java.util.List,java.util.Set)>($r6, i19, r1, $r5, r2);

     label23:
        goto label25;

     label24:
        $r44 := @caughtexception;

        virtualinvoke $r44.<java.lang.RuntimeException: void printStackTrace()>();

     label25:
        return;

        catch java.lang.RuntimeException from label18 to label23 with label24;
    }

    private static transient boolean hasChar(char, java.util.List[])
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r4;
        java.util.Iterator $r2;
        java.util.List[] r0;
        char c1, $c2;
        java.util.List r1;
        int i0, i3, $i4, $i5;
        java.lang.Object $r3;
        boolean $z0;

        c1 := @parameter0: char;

        r0 := @parameter1: java.util.List[];

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r1 = r0[i3];

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r3;

        $c2 = r4.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i4 = (int) $c2;

        $i5 = (int) c1;

        if $i4 != $i5 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return 0;
    }

    private static transient boolean hasOnly(char, java.util.List[])
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r4;
        java.util.Iterator $r2;
        java.util.List[] r0;
        char c1, $c2;
        java.util.List r1;
        int i0, i3, $i4, $i5;
        java.lang.Object $r3;
        boolean $z0;

        c1 := @parameter0: char;

        r0 := @parameter1: java.util.List[];

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r1 = r0[i3];

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r3;

        $c2 = r4.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i4 = (int) $c2;

        $i5 = (int) c1;

        if $i4 == $i5 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return 1;
    }

    private void writeSingleInteger(java.lang.String, int, java.lang.StringBuffer, java.util.List, java.util.Set)
    {
        java.lang.Object[] $r3;
        java.util.Set r9;
        java.lang.Integer $r5;
        java.util.Formatter $r1;
        org.apache.poi.ss.format.CellNumberFormatter r6;
        java.util.List r8;
        java.lang.StringBuffer $r0, r7;
        java.util.Locale $r4;
        int i0;
        java.lang.String r2;

        r6 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r7 := @parameter2: java.lang.StringBuffer;

        r8 := @parameter3: java.util.List;

        r9 := @parameter4: java.util.Set;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.util.Formatter;

        specialinvoke $r1.<java.util.Formatter: void <init>(java.lang.Appendable)>($r0);

        $r4 = <org.apache.poi.ss.format.CellNumberFormatter: java.util.Locale LOCALE>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        virtualinvoke $r1.<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, r2, $r3);

        specialinvoke r6.<org.apache.poi.ss.format.CellNumberFormatter: void writeInteger(java.lang.StringBuffer,java.lang.StringBuffer,java.util.List,java.util.Set,boolean)>($r0, r7, r8, r9, 0);

        return;
    }

    private void writeInteger(java.lang.StringBuffer, java.lang.StringBuffer, java.util.List, java.util.Set, boolean)
    {
        java.util.ListIterator $r2;
        boolean z0, $z1, $z2, z3, z4, $z6, $z7;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r11, $r13, r15;
        java.util.Set r6;
        java.util.List r1, $r14;
        org.apache.poi.ss.format.CellNumberFormatter$StringMod $r7, $r10;
        org.apache.poi.ss.format.CellNumberFormatter r12;
        java.lang.StringBuffer r0, r9, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i6, $i8, $i9, i10, i11, i12, i16, $i17, $i18, $i19, $i20, $i21, $i23, $i25;
        java.lang.String $r5, $r16;
        char $c4, $c5, $c7, c13, $c14, $c15;
        java.lang.Object $r8;

        r12 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r0 := @parameter0: java.lang.StringBuffer;

        r9 := @parameter1: java.lang.StringBuffer;

        r1 := @parameter2: java.util.List;

        r6 := @parameter3: java.util.Set;

        z0 := @parameter4: boolean;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int indexOf(java.lang.String)>(".");

        i10 = $i0 - 1;

        if i10 >= 0 goto label02;

        $r13 = r12.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r13 == null goto label01;

        $r14 = r12.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List integerSpecials>;

        if r1 != $r14 goto label01;

        $i9 = virtualinvoke r0.<java.lang.StringBuffer: int indexOf(java.lang.String)>("E");

        i10 = $i9 - 1;

        goto label02;

     label01:
        $i8 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        i10 = $i8 - 1;

     label02:
        i11 = 0;

     label03:
        if i11 >= i10 goto label05;

        $c7 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i11);

        $i17 = (int) $c7;

        if $i17 == 48 goto label04;

        $i18 = (int) $c7;

        if $i18 == 44 goto label04;

        goto label05;

     label04:
        i11 = i11 + 1;

        goto label03;

     label05:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator(int)>($i1);

        r15 = null;

        i12 = 0;

     label06:
        $z1 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasPrevious()>();

        if $z1 == 0 goto label20;

        if i10 < 0 goto label07;

        c13 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i10);

        goto label08;

     label07:
        c13 = 48;

     label08:
        $r8 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        $r11 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r8;

        if z0 == 0 goto label09;

        if i12 <= 0 goto label09;

        $i6 = i12 % 3;

        if $i6 != 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z3 = $z2;

        z4 = 0;

        if c13 != 48 goto label11;

        $c4 = $r11.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i19 = (int) $c4;

        if $i19 == 48 goto label11;

        $c5 = $r11.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i20 = (int) $c5;

        if $i20 == 63 goto label11;

        if i10 < i11 goto label16;

     label11:
        $c14 = $r11.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i21 = (int) $c14;

        if $i21 != 63 goto label12;

        if i10 >= i11 goto label12;

        $z7 = 1;

        $z6 = 1;

        goto label13;

     label12:
        $z7 = 0;

        $z6 = 0;

     label13:
        z4 = $z6;

        $i3 = $r11.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        if $z7 == 0 goto label14;

        $c15 = 32;

        goto label15;

     label14:
        $c15 = c13;

     label15:
        virtualinvoke r9.<java.lang.StringBuffer: void setCharAt(int,char)>($i3, $c15);

        r15 = $r11;

     label16:
        if z3 == 0 goto label19;

        if z4 == 0 goto label17;

        $r16 = " ";

        goto label18;

     label17:
        $r16 = ",";

     label18:
        $r10 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod insertMod(org.apache.poi.ss.format.CellNumberFormatter$Special,java.lang.CharSequence,int)>($r11, $r16, 2);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label19:
        i12 = i12 + 1;

        $i23 = (int) -1;

        i10 = i10 + $i23;

        goto label06;

     label20:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        if i10 < 0 goto label24;

        i16 = i10 + 1;

        $r18 = new java.lang.StringBuffer;

        $r5 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, i16);

        specialinvoke $r18.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        if z0 == 0 goto label23;

     label21:
        if i16 <= 0 goto label23;

        if i12 <= 0 goto label22;

        $i2 = i12 % 3;

        if $i2 != 0 goto label22;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(i16, 44);

     label22:
        i12 = i12 + 1;

        $i25 = (int) -1;

        i16 = i16 + $i25;

        goto label21;

     label23:
        $r7 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$StringMod insertMod(org.apache.poi.ss.format.CellNumberFormatter$Special,java.lang.CharSequence,int)>(r15, $r18, 1);

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label24:
        return;
    }

    private void writeFractional(java.lang.StringBuffer, java.lang.StringBuffer)
    {
        java.util.ListIterator $r5;
        java.lang.StringBuffer r2, r8;
        int $i0, $i1, $i2, $i6, $i8, i9, i10, $i11, $i12, $i14, $i15, $i16, $i17;
        boolean $z0;
        org.apache.poi.ss.format.CellNumberFormatter$Special $r3, r7;
        char $c3, $c4, $c5, $c7;
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1, $r4;
        java.lang.Object $r6;

        r0 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r2 := @parameter0: java.lang.StringBuffer;

        r8 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

        $i1 = virtualinvoke r2.<java.lang.StringBuffer: int indexOf(java.lang.String)>(".");

        i9 = $i1 + 1;

        $r3 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        if $r3 == null goto label1;

        $i8 = virtualinvoke r2.<java.lang.StringBuffer: int indexOf(java.lang.String)>("e");

        i10 = $i8 - 1;

        goto label2;

     label1:
        $i2 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        i10 = $i2 - 1;

     label2:
        if i10 <= i9 goto label3;

        $c7 = virtualinvoke r2.<java.lang.StringBuffer: char charAt(int)>(i10);

        $i12 = (int) $c7;

        if $i12 != 48 goto label3;

        $i14 = (int) -1;

        i10 = i10 + $i14;

        goto label2;

     label3:
        $r4 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List fractionalSpecials>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (org.apache.poi.ss.format.CellNumberFormatter$Special) $r6;

        $c3 = virtualinvoke r2.<java.lang.StringBuffer: char charAt(int)>(i9);

        $i15 = (int) $c3;

        if $i15 != 48 goto label5;

        $c4 = r7.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i16 = (int) $c4;

        if $i16 == 48 goto label5;

        if i9 >= i10 goto label6;

     label5:
        $i11 = r7.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        virtualinvoke r8.<java.lang.StringBuffer: void setCharAt(int,char)>($i11, $c3);

        goto label7;

     label6:
        $c5 = r7.<org.apache.poi.ss.format.CellNumberFormatter$Special: char ch>;

        $i17 = (int) $c5;

        if $i17 != 63 goto label7;

        $i6 = r7.<org.apache.poi.ss.format.CellNumberFormatter$Special: int pos>;

        virtualinvoke r8.<java.lang.StringBuffer: void setCharAt(int,char)>($i6, 32);

     label7:
        i9 = i9 + 1;

        goto label4;

     label8:
        return;
    }

    public void simpleValue(java.lang.StringBuffer, java.lang.Object)
    {
        org.apache.poi.ss.format.CellNumberFormatter r3;
        java.lang.StringBuffer r0;
        java.lang.Object r1;
        org.apache.poi.ss.format.CellFormatter $r2;

        r3 := @this: org.apache.poi.ss.format.CellNumberFormatter;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.lang.Object;

        $r2 = <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_NUMBER>;

        virtualinvoke $r2.<org.apache.poi.ss.format.CellFormatter: void formatValue(java.lang.StringBuffer,java.lang.Object)>(r0, r1);

        return;
    }

    static org.apache.poi.ss.format.CellFormatter access$000()
    {
        org.apache.poi.ss.format.CellFormatter $r0;

        $r0 = <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_INT>;

        return $r0;
    }

    static org.apache.poi.ss.format.CellFormatter access$100()
    {
        org.apache.poi.ss.format.CellFormatter $r0;

        $r0 = <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_FLOAT>;

        return $r0;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$200(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent>;

        return $r1;
    }

    static java.util.List access$300(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: java.util.List specials>;

        return $r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$202(org.apache.poi.ss.format.CellNumberFormatter, org.apache.poi.ss.format.CellNumberFormatter$Special)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        r1 := @parameter1: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special exponent> = r1;

        return r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$400(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint>;

        return $r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$402(org.apache.poi.ss.format.CellNumberFormatter, org.apache.poi.ss.format.CellNumberFormatter$Special)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        r1 := @parameter1: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special decimalPoint> = r1;

        return r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$500(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash>;

        return $r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$602(org.apache.poi.ss.format.CellNumberFormatter, org.apache.poi.ss.format.CellNumberFormatter$Special)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        r1 := @parameter1: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator> = r1;

        return r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$700(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = specialinvoke r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special previousNumber()>();

        return $r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$600(org.apache.poi.ss.format.CellNumberFormatter)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        $r1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special numerator>;

        return $r1;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$800(java.util.List)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special $r1;
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special firstDigit(java.util.List)>(r0);

        return $r1;
    }

    static boolean access$902(org.apache.poi.ss.format.CellNumberFormatter, boolean)
    {
        org.apache.poi.ss.format.CellNumberFormatter r0;
        boolean z0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        z0 := @parameter1: boolean;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: boolean improperFraction> = z0;

        return z0;
    }

    static org.apache.poi.ss.format.CellNumberFormatter$Special access$502(org.apache.poi.ss.format.CellNumberFormatter, org.apache.poi.ss.format.CellNumberFormatter$Special)
    {
        org.apache.poi.ss.format.CellNumberFormatter$Special r1;
        org.apache.poi.ss.format.CellNumberFormatter r0;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        r1 := @parameter1: org.apache.poi.ss.format.CellNumberFormatter$Special;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellNumberFormatter$Special slash> = r1;

        return r1;
    }

    static double access$1034(org.apache.poi.ss.format.CellNumberFormatter, double)
    {
        org.apache.poi.ss.format.CellNumberFormatter r0;
        double d0, $d1, $d2;

        r0 := @parameter0: org.apache.poi.ss.format.CellNumberFormatter;

        d0 := @parameter1: double;

        $d1 = r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale>;

        $d2 = $d1 * d0;

        r0.<org.apache.poi.ss.format.CellNumberFormatter: double scale> = $d2;

        return $d2;
    }

    static void <clinit>()
    {
        org.apache.poi.ss.format.CellNumberFormatter$1 $r0;
        org.apache.poi.ss.format.CellNumberFormatter $r1, $r2;

        $r0 = new org.apache.poi.ss.format.CellNumberFormatter$1;

        specialinvoke $r0.<org.apache.poi.ss.format.CellNumberFormatter$1: void <init>(java.lang.String)>("General");

        <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_NUMBER> = $r0;

        $r1 = new org.apache.poi.ss.format.CellNumberFormatter;

        specialinvoke $r1.<org.apache.poi.ss.format.CellNumberFormatter: void <init>(java.lang.String)>("#");

        <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_INT> = $r1;

        $r2 = new org.apache.poi.ss.format.CellNumberFormatter;

        specialinvoke $r2.<org.apache.poi.ss.format.CellNumberFormatter: void <init>(java.lang.String)>("#.#");

        <org.apache.poi.ss.format.CellNumberFormatter: org.apache.poi.ss.format.CellFormatter SIMPLE_FLOAT> = $r2;

        return;
    }
}
