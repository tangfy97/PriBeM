public class org.apache.neethi.builders.PrimitiveAssertion extends java.lang.Object implements org.apache.neethi.Assertion
{
    protected javax.xml.namespace.QName name;
    protected boolean optional;
    protected boolean ignorable;
    protected java.lang.String textValue;
    protected java.util.Map attributes;

    public void <init>()
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName)>(null);

        return;
    }

    public void <init>(javax.xml.namespace.QName)
    {
        javax.xml.namespace.QName r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean)>(r1, 0);

        return;
    }

    public void <init>(javax.xml.namespace.QName, boolean)
    {
        javax.xml.namespace.QName r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean)>(r1, z0, 0);

        return;
    }

    public void <init>(javax.xml.namespace.QName, boolean, boolean)
    {
        javax.xml.namespace.QName r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0, z1;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean,java.util.Map,java.lang.String)>(r1, z0, z1, null, null);

        return;
    }

    public void <init>(javax.xml.namespace.QName, boolean, boolean, java.util.Map)
    {
        java.util.Map r2;
        javax.xml.namespace.QName r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0, z1;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean,java.util.Map,java.lang.String)>(r1, z0, z1, r2, null);

        return;
    }

    public void <init>(javax.xml.namespace.QName, boolean, boolean, java.util.Map, java.lang.String)
    {
        java.util.Map r2;
        java.util.HashMap $r4;
        javax.xml.namespace.QName r1;
        java.lang.String r3;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0, z1;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.util.Map;

        r3 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name> = r1;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean optional> = z0;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean ignorable> = z1;

        if r2 == null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes> = $r4;

     label1:
        r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue> = r3;

        return;
    }

    public java.lang.String getAttribute(javax.xml.namespace.QName)
    {
        java.util.Map $r1, $r3;
        java.lang.Object $r4;
        javax.xml.namespace.QName r2;
        java.lang.String $r5;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return null;
    }

    public synchronized void addAttribute(javax.xml.namespace.QName, java.lang.String)
    {
        java.util.Map $r1, $r4;
        java.util.HashMap $r5;
        javax.xml.namespace.QName r2;
        java.lang.String r3;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r2 := @parameter0: javax.xml.namespace.QName;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r1 != null goto label1;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes> = $r5;

     label1:
        $r4 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public synchronized void addAttributes(java.util.Map)
    {
        java.util.Map $r1, r2, $r3;
        java.util.HashMap $r4;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r2 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r1 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes> = $r4;

        goto label2;

     label1:
        $r3 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r2);

     label2:
        return;
    }

    public java.lang.String getTextValue()
    {
        java.lang.String $r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        return $r1;
    }

    public void setTextValue(java.lang.String)
    {
        java.lang.String r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue> = r1;

        return;
    }

    public java.lang.String toString()
    {
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r2 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String toString()>();

        return $r2;
    }

    public boolean equal(org.apache.neethi.PolicyComponent)
    {
        org.apache.neethi.Assertion $r3;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        short $s0;
        org.apache.neethi.PolicyComponent r1;
        int $i1;
        javax.xml.namespace.QName $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: org.apache.neethi.PolicyComponent;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $s0 = interfaceinvoke r1.<org.apache.neethi.PolicyComponent: short getType()>();

        $i1 = (int) $s0;

        if $i1 == 5 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName getName()>();

        $r3 = (org.apache.neethi.Assertion) r1;

        $r4 = interfaceinvoke $r3.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke $r2.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public short getType()
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        return 5;
    }

    public javax.xml.namespace.QName getName()
    {
        javax.xml.namespace.QName $r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        return $r1;
    }

    public void setName(javax.xml.namespace.QName)
    {
        javax.xml.namespace.QName r1;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r1 := @parameter0: javax.xml.namespace.QName;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name> = r1;

        return;
    }

    public boolean isOptional()
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean $z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $z0 = r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean optional>;

        return $z0;
    }

    public void setOptional(boolean)
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        z0 := @parameter0: boolean;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean optional> = z0;

        return;
    }

    public boolean isIgnorable()
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean $z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $z0 = r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean ignorable>;

        return $z0;
    }

    public void setIgnorable(boolean)
    {
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        z0 := @parameter0: boolean;

        r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean ignorable> = z0;

        return;
    }

    public org.apache.neethi.PolicyComponent normalize()
    {
        org.apache.neethi.All $r4, $r6;
        org.apache.neethi.Assertion $r1, $r5;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        org.apache.neethi.Policy $r2;
        org.apache.neethi.ExactlyOne $r3;
        boolean $z0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $z0 = virtualinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: boolean isOptional()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.neethi.Policy;

        specialinvoke $r2.<org.apache.neethi.Policy: void <init>()>();

        $r3 = new org.apache.neethi.ExactlyOne;

        specialinvoke $r3.<org.apache.neethi.ExactlyOne: void <init>()>();

        $r4 = new org.apache.neethi.All;

        specialinvoke $r4.<org.apache.neethi.All: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: org.apache.neethi.Assertion clone(boolean)>(0);

        virtualinvoke $r4.<org.apache.neethi.All: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r5);

        virtualinvoke $r3.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r4);

        $r6 = new org.apache.neethi.All;

        specialinvoke $r6.<org.apache.neethi.All: void <init>()>();

        virtualinvoke $r3.<org.apache.neethi.ExactlyOne: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r6);

        virtualinvoke $r2.<org.apache.neethi.Policy: void addPolicyComponent(org.apache.neethi.PolicyComponent)>($r3);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: org.apache.neethi.Assertion clone(boolean)>(0);

        return $r1;
    }

    public void serialize(javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        java.util.Map $r9, $r13, $r14;
        javax.xml.stream.XMLStreamWriter r0;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, $z7, z8, z9;
        javax.xml.namespace.QName $r3, $r7, $r10, $r12, $r15, $r17, $r19, $r21, $r24, $r27, $r29;
        java.lang.String $r1, $r4, $r5, $r6, $r8, $r11, $r16, $r18, $r20, $r22, $r23, r25, $r26, $r28, $r30;
        org.apache.neethi.builders.PrimitiveAssertion r2;

        r2 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = staticinvoke <org.apache.neethi.Constants: java.lang.String findPolicyNamespace(javax.xml.stream.XMLStreamWriter)>(r0);

        $r3 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r5 = interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: java.lang.String getPrefix(java.lang.String)>($r4);

        r25 = $r5;

        z4 = 0;

        z9 = 0;

        z8 = 0;

        if $r5 != null goto label01;

        $r19 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r20 = virtualinvoke $r19.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        if $r20 == null goto label01;

        $r22 = "";

        $r21 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r23 = virtualinvoke $r21.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z3 != 0 goto label01;

        $r24 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        r25 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        z4 = 1;

        z9 = 1;

        z8 = 1;

     label01:
        $r26 = "";

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z5 != 0 goto label02;

        if r25 != null goto label03;

     label02:
        r25 = "";

        z4 = 1;

        z9 = 1;

        z8 = 1;

     label03:
        $z6 = virtualinvoke r2.<org.apache.neethi.builders.PrimitiveAssertion: boolean hasContents()>();

        if $z6 != 0 goto label04;

        $r14 = r2.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r14 != null goto label04;

        if z8 != 0 goto label04;

        $r15 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r16 = virtualinvoke $r15.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r17 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r18 = virtualinvoke $r17.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)>(r25, $r16, $r18);

        return;

     label04:
        $r27 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r28 = virtualinvoke $r27.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r29 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r30 = virtualinvoke $r29.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r25, $r28, $r30);

        if z9 == 0 goto label08;

        $r6 = "";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r25);

        if $z1 != 0 goto label05;

        if r25 != null goto label06;

     label05:
        $r7 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>($r8);

        goto label08;

     label06:
        $r9 = r2.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r9 == null goto label07;

        $r13 = r2.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        $r12 = new javax.xml.namespace.QName;

        specialinvoke $r12.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", r25);

        $z2 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z2 != 0 goto label08;

     label07:
        $r10 = r2.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $r11 = virtualinvoke $r10.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r25, $r11);

     label08:
        $z7 = r2.<org.apache.neethi.builders.PrimitiveAssertion: boolean optional>;

        if $z7 == 0 goto label09;

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r1, "Optional", "true");

     label09:
        $z0 = r2.<org.apache.neethi.builders.PrimitiveAssertion: boolean ignorable>;

        if $z0 == 0 goto label10;

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r1, "Ignorable", "true");

     label10:
        virtualinvoke r2.<org.apache.neethi.builders.PrimitiveAssertion: void writeAttributes(javax.xml.stream.XMLStreamWriter)>(r0);

        virtualinvoke r2.<org.apache.neethi.builders.PrimitiveAssertion: void writeContents(javax.xml.stream.XMLStreamWriter)>(r0);

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        return;
    }

    protected void writeContents(javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r2;
        java.lang.String $r1, $r3;
        org.apache.neethi.builders.PrimitiveAssertion r0;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r2 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r3);

     label1:
        return;
    }

    protected boolean hasContents()
    {
        java.lang.String $r1, $r2, $r3;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        if $r1 == null goto label1;

        $r3 = "";

        $r2 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void writeAttributes(javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        java.util.Map $r1, $r2;
        javax.xml.stream.XMLStreamWriter r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r3;
        javax.xml.namespace.QName $r8, $r10, $r13, $r16, $r20, $r26, $r30, $r33, $r38;
        java.lang.String $r11, $r14, $r17, $r21, $r23, $r24, $r27, $r28, $r31, $r34, $r36, $r39, $r41;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        org.apache.neethi.builders.PrimitiveAssertion r0;
        java.lang.Object $r5, $r7, $r9, $r12, $r15, $r19, $r22, $r25, $r29, $r32, $r35, $r37, $r40;

        r0 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r18 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        if $r1 == null goto label7;

        $r2 = r0.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (javax.xml.namespace.QName) $r7;

        $z0 = staticinvoke <org.apache.neethi.Constants: boolean isIgnorableAttribute(javax.xml.namespace.QName)>($r8);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (javax.xml.namespace.QName) $r9;

        $z1 = staticinvoke <org.apache.neethi.Constants: boolean isOptionalAttribute(javax.xml.namespace.QName)>($r10);

        if $z1 == 0 goto label3;

        goto label1;

     label3:
        $r11 = "http://www.w3.org/2000/xmlns/";

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (javax.xml.namespace.QName) $r12;

        $r14 = virtualinvoke $r13.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label4;

        $r37 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r38 = (javax.xml.namespace.QName) $r37;

        $r39 = virtualinvoke $r38.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r40 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r41 = (java.lang.String) $r40;

        interfaceinvoke r18.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r39, $r41);

        goto label1;

     label4:
        $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (javax.xml.namespace.QName) $r15;

        $r17 = virtualinvoke $r16.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        if $r17 == null goto label5;

        $r24 = "";

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z3 != 0 goto label5;

        $r25 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (javax.xml.namespace.QName) $r25;

        $r27 = virtualinvoke $r26.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r28 = virtualinvoke r0.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String getOrCreatePrefix(java.lang.String,javax.xml.stream.XMLStreamWriter)>($r27, r18);

        $r29 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = (javax.xml.namespace.QName) $r29;

        $r31 = virtualinvoke $r30.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r32 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = (javax.xml.namespace.QName) $r32;

        $r34 = virtualinvoke $r33.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r35 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (java.lang.String) $r35;

        interfaceinvoke r18.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r28, $r31, $r34, $r36);

        goto label6;

     label5:
        $r19 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (javax.xml.namespace.QName) $r19;

        $r21 = virtualinvoke $r20.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r22 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (java.lang.String) $r22;

        interfaceinvoke r18.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r21, $r23);

     label6:
        goto label1;

     label7:
        return;
    }

    protected java.lang.String getOrCreatePrefix(java.lang.String, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        int $i0, i1;
        javax.xml.stream.XMLStreamWriter r2;
        javax.xml.namespace.NamespaceContext $r7;
        java.lang.String r0, $r1, $r6, $r8, $r9, $r10, r12;
        boolean $z0, $z1, $z2;
        org.apache.neethi.builders.PrimitiveAssertion r11;
        java.lang.StringBuilder $r3, $r4, $r5;

        r11 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r1 = "http://www.w3.org/2000/xmlns/";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r12 = interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: java.lang.String getPrefix(java.lang.String)>(r0);

        i1 = 1;

     label2:
        if r12 == null goto label3;

        $r10 = "";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z2 == 0 goto label7;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        $i0 = i1;

        i1 = i1 + 1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r6;

        $r7 = interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r8 = interfaceinvoke $r7.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>($r6);

        if $r8 == null goto label4;

        $r9 = "";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label5;

     label4:
        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r6, r0);

        goto label6;

     label5:
        r12 = null;

     label6:
        goto label2;

     label7:
        return r12;
    }

    protected org.apache.neethi.Assertion clone(boolean)
    {
        java.util.Map $r3;
        java.lang.String $r2;
        javax.xml.namespace.QName $r4;
        org.apache.neethi.builders.PrimitiveAssertion $r0, r1;
        boolean z0, $z1;

        r1 := @this: org.apache.neethi.builders.PrimitiveAssertion;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.neethi.builders.PrimitiveAssertion;

        $r4 = r1.<org.apache.neethi.builders.PrimitiveAssertion: javax.xml.namespace.QName name>;

        $z1 = r1.<org.apache.neethi.builders.PrimitiveAssertion: boolean ignorable>;

        $r3 = r1.<org.apache.neethi.builders.PrimitiveAssertion: java.util.Map attributes>;

        $r2 = r1.<org.apache.neethi.builders.PrimitiveAssertion: java.lang.String textValue>;

        specialinvoke $r0.<org.apache.neethi.builders.PrimitiveAssertion: void <init>(javax.xml.namespace.QName,boolean,boolean,java.util.Map,java.lang.String)>($r4, z0, $z1, $r3, $r2);

        return $r0;
    }
}
