public class com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual extends com.hp.hpl.jena.sparql.expr.ExprFunction2
{
    private static final java.lang.String functionName;
    private static final java.lang.String symbol;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;
        com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction2: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,java.lang.String,java.lang.String)>(r1, r2, "ge", ">=");

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1, $r2;
        com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual r3;
        int $i0;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: int compare(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r1);

        if $i0 == 1 goto label1;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue booleanReturn(boolean)>($z0);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;
        com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual $r0, r3;

        r3 := @this: com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual: java.lang.String symbol> = ">=";

        <com.hp.hpl.jena.sparql.expr.E_GreaterThanOrEqual: java.lang.String functionName> = "ge";

        return;
    }
}
