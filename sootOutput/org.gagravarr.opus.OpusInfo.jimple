public class org.gagravarr.opus.OpusInfo extends org.gagravarr.ogg.HighLevelOggStreamPacket implements org.gagravarr.opus.OpusPacket
{
    private byte version;
    private int majorVersion;
    private int minorVersion;
    private int channels;
    private int preSkip;
    private long rate;
    private int outputGain;
    private byte channelMappingFamily;
    private byte streamCount;
    private byte twoChannelStreamCount;
    private byte[] channelMapping;

    public void <init>()
    {
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        specialinvoke r0.<org.gagravarr.ogg.HighLevelOggStreamPacket: void <init>()>();

        r0.<org.gagravarr.opus.OpusInfo: byte version> = 1;

        return;
    }

    public void <init>(org.gagravarr.ogg.OggPacket)
    {
        byte[] $r2, $r3, $r4, $r5;
        byte $b0, $b2, $b6, $b7, $b8, $b9, $b12;
        org.gagravarr.ogg.OggPacket r1;
        org.gagravarr.opus.OpusInfo r0;
        boolean $z0;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r16;
        long $l4;
        int $i1, $i3, $i5, $i10, $i11, $i13, $i14, $i15;
        java.lang.String $r13;
        java.lang.IllegalArgumentException $r15, $r17;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        r1 := @parameter0: org.gagravarr.ogg.OggPacket;

        specialinvoke r0.<org.gagravarr.ogg.HighLevelOggStreamPacket: void <init>(org.gagravarr.ogg.OggPacket)>(r1);

        $r2 = virtualinvoke r0.<org.gagravarr.opus.OpusInfo: byte[] getData()>();

        $r3 = <org.gagravarr.opus.OpusInfo: byte[] MAGIC_HEADER_BYTES>;

        $z0 = staticinvoke <org.gagravarr.ogg.IOUtils: boolean byteRangeMatches(byte[],byte[],int)>($r3, $r2, 0);

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type, not a Opus Header");

        throw $r15;

     label1:
        $b0 = $r2[8];

        r0.<org.gagravarr.opus.OpusInfo: byte version> = $b0;

        specialinvoke r0.<org.gagravarr.opus.OpusInfo: void parseVersion()>();

        $i1 = r0.<org.gagravarr.opus.OpusInfo: int majorVersion>;

        if $i1 == 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Opus version ");

        $b12 = r0.<org.gagravarr.opus.OpusInfo: byte version>;

        $i14 = (int) $b12;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at major version ");

        $i13 = r0.<org.gagravarr.opus.OpusInfo: int majorVersion>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" detected");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r17;

     label2:
        $b2 = $r2[9];

        $i15 = (int) $b2;

        r0.<org.gagravarr.opus.OpusInfo: int channels> = $i15;

        $i3 = staticinvoke <org.gagravarr.ogg.IOUtils: int getInt2(byte[],int)>($r2, 10);

        r0.<org.gagravarr.opus.OpusInfo: int preSkip> = $i3;

        $l4 = staticinvoke <org.gagravarr.ogg.IOUtils: long getInt4(byte[],int)>($r2, 12);

        r0.<org.gagravarr.opus.OpusInfo: long rate> = $l4;

        $i5 = staticinvoke <org.gagravarr.ogg.IOUtils: int getInt2(byte[],int)>($r2, 16);

        r0.<org.gagravarr.opus.OpusInfo: int outputGain> = $i5;

        $b6 = $r2[18];

        r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily> = $b6;

        $b7 = r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily>;

        if $b7 == 0 goto label3;

        $b8 = $r2[19];

        r0.<org.gagravarr.opus.OpusInfo: byte streamCount> = $b8;

        $b9 = $r2[20];

        r0.<org.gagravarr.opus.OpusInfo: byte twoChannelStreamCount> = $b9;

        $i10 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        $r4 = newarray (byte)[$i10];

        r0.<org.gagravarr.opus.OpusInfo: byte[] channelMapping> = $r4;

        $r5 = r0.<org.gagravarr.opus.OpusInfo: byte[] channelMapping>;

        $i11 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 21, $r5, 0, $i11);

     label3:
        return;
    }

    public org.gagravarr.ogg.OggPacket write()
    {
        byte[] $r1, $r3, $r4;
        long $l5;
        byte $b0, $b1, $b3, $b7, $b8, $b9, $b10;
        org.gagravarr.ogg.OggPacket $r2;
        org.gagravarr.opus.OpusInfo r0;
        int $i2, $i4, $i6, $i11, $i12, i13;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        i13 = 19;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily>;

        if $b0 == 0 goto label1;

        $i12 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        i13 = 21 + $i12;

     label1:
        $r4 = newarray (byte)[i13];

        $r1 = <org.gagravarr.opus.OpusInfo: byte[] MAGIC_HEADER_BYTES>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, 0, 8);

        $b1 = r0.<org.gagravarr.opus.OpusInfo: byte version>;

        $r4[8] = $b1;

        $i2 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        $b3 = (byte) $i2;

        $r4[9] = $b3;

        $i4 = r0.<org.gagravarr.opus.OpusInfo: int preSkip>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt2(byte[],int,int)>($r4, 10, $i4);

        $l5 = r0.<org.gagravarr.opus.OpusInfo: long rate>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt4(byte[],int,long)>($r4, 12, $l5);

        $i6 = r0.<org.gagravarr.opus.OpusInfo: int outputGain>;

        staticinvoke <org.gagravarr.ogg.IOUtils: void putInt2(byte[],int,int)>($r4, 16, $i6);

        $b7 = r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily>;

        $r4[18] = $b7;

        $b8 = r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily>;

        if $b8 == 0 goto label2;

        $b9 = r0.<org.gagravarr.opus.OpusInfo: byte streamCount>;

        $r4[19] = $b9;

        $b10 = r0.<org.gagravarr.opus.OpusInfo: byte twoChannelStreamCount>;

        $r4[20] = $b10;

        $r3 = r0.<org.gagravarr.opus.OpusInfo: byte[] channelMapping>;

        $i11 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 21, $i11);

     label2:
        virtualinvoke r0.<org.gagravarr.opus.OpusInfo: void setData(byte[])>($r4);

        $r2 = specialinvoke r0.<org.gagravarr.ogg.HighLevelOggStreamPacket: org.gagravarr.ogg.OggPacket write()>();

        return $r2;
    }

    private void parseVersion()
    {
        byte $b0, $b1, $b2;
        org.gagravarr.opus.OpusInfo r0;
        int $i3, $i4, $i5;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte version>;

        $b1 = $b0 & 15;

        $i4 = (int) $b1;

        r0.<org.gagravarr.opus.OpusInfo: int minorVersion> = $i4;

        $b2 = r0.<org.gagravarr.opus.OpusInfo: byte version>;

        $i5 = (int) $b2;

        $i3 = $i5 >> 4;

        r0.<org.gagravarr.opus.OpusInfo: int majorVersion> = $i3;

        return;
    }

    public byte getVersion()
    {
        byte $b0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte version>;

        return $b0;
    }

    public int getMajorVersion()
    {
        int $i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $i0 = r0.<org.gagravarr.opus.OpusInfo: int majorVersion>;

        return $i0;
    }

    public int getMinorVersion()
    {
        int $i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $i0 = r0.<org.gagravarr.opus.OpusInfo: int minorVersion>;

        return $i0;
    }

    public int getChannels()
    {
        int $i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $i0 = r0.<org.gagravarr.opus.OpusInfo: int channels>;

        return $i0;
    }

    public void setChannels(int)
    {
        int i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        i0 := @parameter0: int;

        r0.<org.gagravarr.opus.OpusInfo: int channels> = i0;

        return;
    }

    public int getPreSkip()
    {
        int $i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $i0 = r0.<org.gagravarr.opus.OpusInfo: int preSkip>;

        return $i0;
    }

    public void setPreSkip(int)
    {
        int i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        i0 := @parameter0: int;

        r0.<org.gagravarr.opus.OpusInfo: int preSkip> = i0;

        return;
    }

    public long getRate()
    {
        long $l0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $l0 = r0.<org.gagravarr.opus.OpusInfo: long rate>;

        return $l0;
    }

    public void setRate(long)
    {
        long l0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        l0 := @parameter0: long;

        r0.<org.gagravarr.opus.OpusInfo: long rate> = l0;

        return;
    }

    public int getOutputGain()
    {
        int $i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $i0 = r0.<org.gagravarr.opus.OpusInfo: int outputGain>;

        return $i0;
    }

    public void setOutputGain(int)
    {
        int i0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        i0 := @parameter0: int;

        r0.<org.gagravarr.opus.OpusInfo: int outputGain> = i0;

        return;
    }

    public byte getChannelMappingFamily()
    {
        byte $b0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte channelMappingFamily>;

        return $b0;
    }

    public byte getStreamCount()
    {
        byte $b0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte streamCount>;

        return $b0;
    }

    public byte getTwoChannelStreamCount()
    {
        byte $b0;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $b0 = r0.<org.gagravarr.opus.OpusInfo: byte twoChannelStreamCount>;

        return $b0;
    }

    public byte[] getChannelMapping()
    {
        byte[] $r1;
        org.gagravarr.opus.OpusInfo r0;

        r0 := @this: org.gagravarr.opus.OpusInfo;

        $r1 = r0.<org.gagravarr.opus.OpusInfo: byte[] channelMapping>;

        return $r1;
    }
}
