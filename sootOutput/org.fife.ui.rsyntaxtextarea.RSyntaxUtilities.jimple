public class org.fife.ui.rsyntaxtextarea.RSyntaxUtilities extends java.lang.Object implements javax.swing.SwingConstants
{
    public static final int OS_WINDOWS;
    public static final int OS_MAC_OSX;
    public static final int OS_LINUX;
    public static final int OS_OTHER;
    private static final int OS;
    private static final int LETTER_MASK;
    private static final int HEX_CHARACTER_MASK;
    private static final int LETTER_OR_DIGIT_MASK;
    private static final int BRACKET_MASK;
    private static final int JAVA_OPERATOR_MASK;
    private static final int[] dataTable;
    private static javax.swing.text.Segment charSegment;
    private static final char[] JS_KEYWORD_RETURN;

    public void <init>()
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxUtilities r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.RSyntaxUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String escapeForHtml(java.lang.String, java.lang.String, boolean)
    {
        char $c0;
        java.lang.StringBuffer $r4;
        int i1, $i2, $i3;
        java.lang.String r0, $r2, r3;
        boolean z0, z1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        if r3 != null goto label02;

        r3 = "";

     label02:
        z1 = 0;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label03:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 >= $i2 goto label15;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $i3 = (int) $c0;

        lookupswitch($i3)
        {
            case 9: goto label10;
            case 10: goto label08;
            case 32: goto label04;
            case 38: goto label09;
            case 60: goto label11;
            case 62: goto label12;
            default: goto label13;
        };

     label04:
        if z0 != 0 goto label05;

        if z1 != 0 goto label06;

     label05:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label07;

     label06:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&nbsp;");

     label07:
        z1 = 1;

        goto label14;

     label08:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        z1 = 0;

        goto label14;

     label09:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        z1 = 0;

        goto label14;

     label10:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        z1 = 0;

        goto label14;

     label11:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        z1 = 0;

        goto label14;

     label12:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        z1 = 0;

        goto label14;

     label13:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        z1 = 0;

     label14:
        i1 = i1 + 1;

        goto label03;

     label15:
        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.util.Map getDesktopAntiAliasHints()
    {
        java.lang.Object $r1;
        java.awt.Toolkit $r0;
        java.util.Map $r2;

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.lang.Object getDesktopProperty(java.lang.String)>("awt.font.desktophints");

        $r2 = (java.util.Map) $r1;

        return $r2;
    }

    public static java.awt.Color getFoldedLineBottomColor(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        java.awt.Color r2;
        org.fife.ui.rtextarea.Gutter $r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 = <java.awt.Color: java.awt.Color gray>;

        $r1 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rtextarea.Gutter getGutter(org.fife.ui.rtextarea.RTextArea)>(r0);

        if $r1 == null goto label1;

        r2 = virtualinvoke $r1.<org.fife.ui.rtextarea.Gutter: java.awt.Color getFoldIndicatorForeground()>();

     label1:
        return r2;
    }

    public static org.fife.ui.rtextarea.Gutter getGutter(org.fife.ui.rtextarea.RTextArea)
    {
        org.fife.ui.rtextarea.RTextScrollPane r3;
        org.fife.ui.rtextarea.RTextArea r0;
        java.awt.Container $r1, $r2;
        org.fife.ui.rtextarea.Gutter r4;
        boolean $z0, $z1;

        r0 := @parameter0: org.fife.ui.rtextarea.RTextArea;

        r4 = null;

        $r1 = virtualinvoke r0.<org.fife.ui.rtextarea.RTextArea: java.awt.Container getParent()>();

        $z0 = $r1 instanceof javax.swing.JViewport;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Container getParent()>();

        $z1 = $r2 instanceof org.fife.ui.rtextarea.RTextScrollPane;

        if $z1 == 0 goto label1;

        r3 = (org.fife.ui.rtextarea.RTextScrollPane) $r2;

        r4 = virtualinvoke r3.<org.fife.ui.rtextarea.RTextScrollPane: org.fife.ui.rtextarea.Gutter getGutter()>();

     label1:
        return r4;
    }

    public static java.lang.String getLeadingWhitespace(java.lang.String)
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        return $r1;
    }

    public static java.lang.String getLeadingWhitespace(javax.swing.text.Document, int) throws javax.swing.text.BadLocationException
    {
        int i0, $i1, $i2, $i3, i4, $i5;
        javax.swing.text.Document r0;
        java.lang.String $r3, $r4;
        javax.swing.text.Element $r1, $r2;

        r0 := @parameter0: javax.swing.text.Document;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i1);

        $i2 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        $i3 = interfaceinvoke $r2.<javax.swing.text.Element: int getEndOffset()>();

        i4 = $i3 - 1;

        $i5 = i4 - $i2;

        $r3 = interfaceinvoke r0.<javax.swing.text.Document: java.lang.String getText(int,int)>($i2, $i5);

        $r4 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: java.lang.String getLeadingWhitespace(java.lang.String)>($r3);

        return $r4;
    }

    private static final javax.swing.text.Element getLineElem(javax.swing.text.Document, int)
    {
        int i0, $i1, $i2, $i3;
        javax.swing.text.Document r0;
        javax.swing.text.Element $r1, $r2;

        r0 := @parameter0: javax.swing.text.Document;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<javax.swing.text.Document: javax.swing.text.Element getDefaultRootElement()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        $r2 = interfaceinvoke $r1.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i1);

        $i2 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        if i0 < $i2 goto label1;

        $i3 = interfaceinvoke $r2.<javax.swing.text.Element: int getEndOffset()>();

        if i0 >= $i3 goto label1;

        return $r2;

     label1:
        return null;
    }

    public static java.awt.Rectangle getLineWidthUpTo(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, javax.swing.text.Segment, int, int, javax.swing.text.TabExpander, java.awt.Rectangle, int) throws javax.swing.text.BadLocationException
    {
        java.awt.Rectangle $r6, r18;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r14;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.BadLocationException $r15, $r16;
        java.lang.IllegalArgumentException $r7;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r2;
        javax.swing.text.Document $r1;
        javax.swing.text.Segment r17;
        javax.swing.text.Element $r3;
        javax.swing.text.TabExpander r5;
        org.fife.ui.rsyntaxtextarea.Token $r4;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r17 := @parameter1: javax.swing.text.Segment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r5 := @parameter4: javax.swing.text.TabExpander;

        r18 := @parameter5: java.awt.Rectangle;

        i7 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        if i0 >= 0 goto label1;

        $r16 = new javax.swing.text.BadLocationException;

        specialinvoke $r16.<javax.swing.text.BadLocationException: void <init>(java.lang.String,int)>("Invalid document position", i0);

        throw $r16;

     label1:
        $i2 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: int getLength()>();

        if i1 <= $i2 goto label2;

        $r15 = new javax.swing.text.BadLocationException;

        specialinvoke $r15.<javax.swing.text.BadLocationException: void <init>(java.lang.String,int)>("Invalid document position", i1);

        throw $r15;

     label2:
        $r3 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        $i3 = interfaceinvoke $r3.<javax.swing.text.Element: int getElementIndex(int)>(i0);

        $i4 = interfaceinvoke $r3.<javax.swing.text.Element: int getElementIndex(int)>(i1);

        $i5 = $i3 - $i4;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i6 <= 1 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("p0 and p1 are not on the same line (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label3:
        $r4 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>($i3);

        staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: float makeTokenListStartAt(org.fife.ui.rsyntaxtextarea.Token,int,javax.swing.text.TabExpander,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,float)>($r4, i0, r5, r0, 0.0F);

        $r6 = virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.Token: java.awt.Rectangle listOffsetToView(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,int,int,java.awt.Rectangle)>(r0, r5, i1, i7, r18);

        return $r6;
    }

    public static int getMatchingBracketPosition(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        byte $b29, b30, $b31;
        javax.swing.text.BadLocationException $r27;
        org.fife.ui.rsyntaxtextarea.RSyntaxDocument r2;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r21;
        char[] $r12, $r19;
        org.fife.ui.rsyntaxtextarea.Token $r5, $r6, $r13, $r14, $r20, $r22, $r25, $r26, r29;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7, z8;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        javax.swing.text.Document $r1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i32, i33, i34, $i35, $i36, i38, i39, i40, $i43, $i44, $i46, $i47, $i48, $i50, $i51, $i52, $i54, $i55, $i56, $i57, $i59, $i61, $i63, $i64, $i65, $i66, $i68, $i70, $i72, $i74, $i76, $i78;
        char $c1, c37, c41;
        javax.swing.text.Segment $r7, $r8, $r9, $r11, $r15, $r16, $r18, $r30;
        javax.swing.text.Element $r3, $r4, $r10, $r17, $r23, $r24, r28;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

     label01:
        $i0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getCaretPosition()>();

        i25 = $i0 - 1;

        $i43 = (int) -1;

        if i25 <= $i43 goto label42;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxDocument) $r1;

        $c1 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: char charAt(int)>(i25);

        $i44 = (int) $c1;

        lookupswitch($i44)
        {
            case 40: goto label02;
            case 41: goto label08;
            case 91: goto label02;
            case 93: goto label08;
            case 123: goto label02;
            case 125: goto label08;
            default: goto label14;
        };

     label02:
        $r23 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        r28 = $r23;

        $i23 = interfaceinvoke $r23.<javax.swing.text.Element: int getElementIndex(int)>(i25);

        i26 = $i23;

        $r24 = interfaceinvoke $r23.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i23);

        i27 = interfaceinvoke $r24.<javax.swing.text.Element: int getStartOffset()>();

        i28 = interfaceinvoke $r24.<javax.swing.text.Element: int getEndOffset()>();

        $r25 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>($i23);

        $r26 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>($r25, i25);

        r29 = $r26;

        $i24 = $r26.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i24 == 22 goto label04;

     label03:
        $i46 = (int) -1;

        return $i46;

     label04:
        $i47 = (int) $c1;

        if $i47 != 123 goto label05;

        $b29 = 125;

        goto label07;

     label05:
        $i48 = (int) $c1;

        if $i48 != 40 goto label06;

        $b29 = 41;

        goto label07;

     label06:
        $b29 = 93;

     label07:
        b30 = $b29;

        z2 = 1;

        goto label15;

     label08:
        $r3 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: javax.swing.text.Element getDefaultRootElement()>();

        r28 = $r3;

        $i2 = interfaceinvoke $r3.<javax.swing.text.Element: int getElementIndex(int)>(i25);

        i26 = $i2;

        $r4 = interfaceinvoke $r3.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>($i2);

        i27 = interfaceinvoke $r4.<javax.swing.text.Element: int getStartOffset()>();

        i28 = interfaceinvoke $r4.<javax.swing.text.Element: int getEndOffset()>();

        $r5 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>($i2);

        $r6 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>($r5, i25);

        r29 = $r6;

        $i3 = $r6.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i3 == 22 goto label10;

     label09:
        $i50 = (int) -1;

        return $i50;

     label10:
        $i51 = (int) $c1;

        if $i51 != 125 goto label11;

        $b31 = 123;

        goto label13;

     label11:
        $i52 = (int) $c1;

        if $i52 != 41 goto label12;

        $b31 = 40;

        goto label13;

     label12:
        $b31 = 91;

     label13:
        b30 = $b31;

        z2 = 0;

        goto label15;

     label14:
        $i54 = (int) -1;

        return $i54;

     label15:
        if z2 == 0 goto label29;

        $i14 = interfaceinvoke r28.<javax.swing.text.Element: int getElementCount()>();

        i32 = i25 + 1;

        i33 = 0;

        z3 = 0;

        z8 = 0;

        z7 = 0;

     label16:
        $i15 = i28 - i32;

        $r15 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void getText(int,int,javax.swing.text.Segment)>(i32, $i15, $r15);

        $r16 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $i16 = $r16.<javax.swing.text.Segment: int offset>;

        i34 = $i16;

     label17:
        $r30 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $i35 = $r30.<javax.swing.text.Segment: int count>;

        $i36 = $i16 + $i35;

        if i34 >= $i36 goto label26;

        $r18 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $r19 = $r18.<javax.swing.text.Segment: char[] array>;

        c37 = $r19[i34];

        $i55 = (int) c37;

        $i56 = (int) $c1;

        if $i55 != $i56 goto label20;

        if z7 != 0 goto label18;

        r29 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i26);

        z3 = 1;

        z8 = 1;

        z7 = 1;

     label18:
        $i20 = i34 - $i16;

        $i22 = i32 + $i20;

        $r22 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>(r29, $i22);

        r29 = $r22;

        $i21 = $r22.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i21 != 22 goto label19;

        i33 = i33 + 1;

     label19:
        goto label25;

     label20:
        $i57 = (int) c37;

        if $i57 != b30 goto label25;

        if z8 != 0 goto label21;

        r29 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i26);

        z3 = 1;

        z8 = 1;

        z7 = 1;

     label21:
        $i17 = i34 - $i16;

        $i19 = i32 + $i17;

        $r20 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>(r29, $i19);

        r29 = $r20;

        $i18 = $r20.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i18 != 22 goto label25;

        if i33 != 0 goto label24;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isCodeFoldingEnabled()>();

        if $z0 == 0 goto label23;

        $r21 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()>();

        $z1 = virtualinvoke $r21.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isLineHidden(int)>(i26);

        if $z1 == 0 goto label23;

     label22:
        $i59 = (int) -1;

        return $i59;

     label23:
        return $i19;

     label24:
        $i61 = (int) -1;

        i33 = i33 + $i61;

     label25:
        i34 = i34 + 1;

        goto label17;

     label26:
        i26 = i26 + 1;

        if i26 != $i14 goto label28;

     label27:
        $i63 = (int) -1;

        return $i63;

     label28:
        z3 = 0;

        z8 = 0;

        z7 = 0;

        $r17 = interfaceinvoke r28.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i26);

        i32 = interfaceinvoke $r17.<javax.swing.text.Element: int getStartOffset()>();

        i28 = interfaceinvoke $r17.<javax.swing.text.Element: int getEndOffset()>();

        goto label16;

     label29:
        i38 = i25;

        i39 = 0;

        z4 = 0;

        z6 = 0;

        z5 = 0;

     label30:
        $i4 = i38 - i27;

        $r7 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: void getText(int,int,javax.swing.text.Segment)>(i27, $i4, $r7);

        $r8 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $i7 = $r8.<javax.swing.text.Segment: int offset>;

        $r9 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $i5 = $r9.<javax.swing.text.Segment: int count>;

        $i6 = $i7 + $i5;

        i40 = $i6 - 1;

     label31:
        if i40 < $i7 goto label39;

        $r11 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment>;

        $r12 = $r11.<javax.swing.text.Segment: char[] array>;

        c41 = $r12[i40];

        $i64 = (int) c41;

        $i65 = (int) $c1;

        if $i64 != $i65 goto label34;

        if z6 != 0 goto label32;

        r29 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i26);

        z4 = 1;

        z6 = 1;

        z5 = 1;

     label32:
        $i11 = i40 - $i7;

        $i13 = i27 + $i11;

        $r14 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>(r29, $i13);

        $i12 = $r14.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i12 != 22 goto label33;

        i39 = i39 + 1;

     label33:
        goto label38;

     label34:
        $i66 = (int) c41;

        if $i66 != b30 goto label38;

        if z5 != 0 goto label35;

        r29 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxDocument: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i26);

        z4 = 1;

        z6 = 1;

        z5 = 1;

     label35:
        $i8 = i40 - $i7;

        $i10 = i27 + $i8;

        $r13 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token,int)>(r29, $i10);

        $i9 = $r13.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i9 != 22 goto label38;

        if i39 != 0 goto label37;

     label36:
        return $i10;

     label37:
        $i68 = (int) -1;

        i39 = i39 + $i68;

     label38:
        $i70 = (int) -1;

        i40 = i40 + $i70;

        goto label31;

     label39:
        $i72 = (int) -1;

        i26 = i26 + $i72;

        $i74 = (int) -1;

        if i26 != $i74 goto label41;

     label40:
        $i76 = (int) -1;

        return $i76;

     label41:
        z4 = 0;

        z6 = 0;

        z5 = 0;

        $r10 = interfaceinvoke r28.<javax.swing.text.Element: javax.swing.text.Element getElement(int)>(i26);

        i27 = interfaceinvoke $r10.<javax.swing.text.Element: int getStartOffset()>();

        i38 = interfaceinvoke $r10.<javax.swing.text.Element: int getEndOffset()>();

        goto label30;

     label42:
        goto label44;

     label43:
        $r27 := @caughtexception;

        virtualinvoke $r27.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label44:
        $i78 = (int) -1;

        return $i78;

        catch javax.swing.text.BadLocationException from label01 to label03 with label43;
        catch javax.swing.text.BadLocationException from label04 to label09 with label43;
        catch javax.swing.text.BadLocationException from label10 to label14 with label43;
        catch javax.swing.text.BadLocationException from label15 to label22 with label43;
        catch javax.swing.text.BadLocationException from label24 to label27 with label43;
        catch javax.swing.text.BadLocationException from label28 to label36 with label43;
        catch javax.swing.text.BadLocationException from label37 to label40 with label43;
        catch javax.swing.text.BadLocationException from label41 to label42 with label43;
    }

    public static int getNextVisualPositionFrom(int, javax.swing.text.Position$Bias, java.awt.Shape, int, javax.swing.text.Position$Bias[], javax.swing.text.View) throws javax.swing.text.BadLocationException
    {
        java.awt.Point r19;
        javax.swing.text.Position$Bias $r4, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.awt.Shape r17;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r2;
        javax.swing.text.View r0;
        float $f0, $f1;
        javax.swing.text.Document $r6;
        java.awt.Rectangle $r10;
        java.lang.StringBuffer $r13, $r14, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, i21, $i22, i23, i24, i25, $i26, $i28, $i30, $i32, $i34;
        java.awt.Container $r1;
        java.lang.String $r15;
        javax.swing.text.Position$Bias[] r3;
        javax.swing.text.Caret $r18;
        java.lang.IllegalArgumentException $r21;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r5, $r7;
        javax.swing.text.TabExpander $r8, $r9;

        i19 := @parameter0: int;

        r16 := @parameter1: javax.swing.text.Position$Bias;

        r17 := @parameter2: java.awt.Shape;

        i0 := @parameter3: int;

        r3 := @parameter4: javax.swing.text.Position$Bias[];

        r0 := @parameter5: javax.swing.text.View;

        $r1 = virtualinvoke r0.<javax.swing.text.View: java.awt.Container getContainer()>();

        r2 = (org.fife.ui.rsyntaxtextarea.RSyntaxTextArea) $r1;

        $r4 = <javax.swing.text.Position$Bias: javax.swing.text.Position$Bias Forward>;

        r3[0] = $r4;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label26;
            case 3: goto label19;
            case 4: goto label26;
            case 5: goto label01;
            case 6: goto label26;
            case 7: goto label14;
            default: goto label26;
        };

     label01:
        $i28 = (int) -1;

        if i19 != $i28 goto label04;

        if i0 != 1 goto label02;

        $i17 = virtualinvoke r0.<javax.swing.text.View: int getEndOffset()>();

        $i18 = $i17 - 1;

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i18);

        goto label03;

     label02:
        $i20 = virtualinvoke r0.<javax.swing.text.View: int getStartOffset()>();

     label03:
        i21 = $i20;

        goto label27;

     label04:
        if r2 == null goto label05;

        $r18 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Caret getCaret()>();

        goto label06;

     label05:
        $r18 = null;

     label06:
        if $r18 == null goto label07;

        r19 = interfaceinvoke $r18.<javax.swing.text.Caret: java.awt.Point getMagicCaretPosition()>();

        goto label08;

     label07:
        r19 = null;

     label08:
        if r19 != null goto label11;

        $r10 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: java.awt.Rectangle modelToView(int)>(i19);

        if $r10 != null goto label09;

        $i22 = 0;

        goto label10;

     label09:
        $i22 = $r10.<java.awt.Rectangle: int x>;

     label10:
        i23 = $i22;

        goto label12;

     label11:
        i23 = r19.<java.awt.Point: int x>;

     label12:
        if i0 != 1 goto label13;

        $f1 = (float) i23;

        $r9 = (javax.swing.text.TabExpander) r0;

        i21 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int getPositionAbove(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,int,float,javax.swing.text.TabExpander)>(r2, i19, $f1, $r9);

        goto label27;

     label13:
        $f0 = (float) i23;

        $r8 = (javax.swing.text.TabExpander) r0;

        i21 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int getPositionBelow(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,int,float,javax.swing.text.TabExpander)>(r2, i19, $f0, $r8);

        goto label27;

     label14:
        $i30 = (int) -1;

        if i19 != $i30 goto label15;

        $i7 = virtualinvoke r0.<javax.swing.text.View: int getEndOffset()>();

        $i8 = $i7 - 1;

        i21 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i8);

        goto label27;

     label15:
        $i1 = i19 - 1;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        i21 = $i2;

        $z0 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isCodeFoldingEnabled()>();

        if $z0 == 0 goto label27;

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>($i3);

        $i5 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>($i2);

        i24 = $i5;

        if $i4 == $i5 goto label18;

        $r5 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()>();

        $z1 = virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isLineHidden(int)>($i5);

        if $z1 == 0 goto label18;

     label16:
        $i32 = (int) -1;

        i24 = i24 + $i32;

        if i24 <= 0 goto label17;

        $z2 = virtualinvoke $r5.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isLineHidden(int)>(i24);

        if $z2 == 0 goto label17;

        goto label16;

     label17:
        $i6 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineEndOffset(int)>(i24);

        i21 = $i6 - 1;

     label18:
        goto label27;

     label19:
        $i34 = (int) -1;

        if i19 != $i34 goto label20;

        i21 = virtualinvoke r0.<javax.swing.text.View: int getStartOffset()>();

        goto label27;

     label20:
        $i9 = i19 + 1;

        $r6 = virtualinvoke r0.<javax.swing.text.View: javax.swing.text.Document getDocument()>();

        $i10 = interfaceinvoke $r6.<javax.swing.text.Document: int getLength()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i10);

        i21 = $i11;

        $z3 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: boolean isCodeFoldingEnabled()>();

        if $z3 == 0 goto label27;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>($i12);

        $i14 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>($i11);

        i25 = $i14;

        if $i13 == $i14 goto label25;

        $r7 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()>();

        $z4 = virtualinvoke $r7.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isLineHidden(int)>($i14);

        if $z4 == 0 goto label25;

        $i15 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineCount()>();

     label21:
        i25 = i25 + 1;

        if i25 >= $i15 goto label22;

        $z5 = virtualinvoke $r7.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: boolean isLineHidden(int)>(i25);

        if $z5 == 0 goto label22;

        goto label21;

     label22:
        if i25 != $i15 goto label23;

        $i16 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineEndOffset(int)>($i13);

        $i26 = $i16 - 1;

        goto label24;

     label23:
        $i26 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineStartOffset(int)>(i25);

     label24:
        i21 = $i26;

     label25:
        goto label27;

     label26:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad direction: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r21;

     label27:
        return i21;
    }

    public static final int getPositionAbove(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int, float, javax.swing.text.TabExpander) throws javax.swing.text.BadLocationException
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r3;
        org.fife.ui.rsyntaxtextarea.TokenOrientedView r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;
        float f0;
        javax.swing.text.TabExpander r0;
        org.fife.ui.rsyntaxtextarea.Token $r2;

        r3 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        r0 := @parameter3: javax.swing.text.TabExpander;

        r1 = (org.fife.ui.rsyntaxtextarea.TokenOrientedView) r0;

        $r2 = interfaceinvoke r1.<org.fife.ui.rsyntaxtextarea.TokenOrientedView: org.fife.ui.rsyntaxtextarea.Token getTokenListForPhysicalLineAbove(int)>(i0);

        if $r2 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $i1 = $r2.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i1 != 0 goto label2;

        $i3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>(i0);

        $i4 = $i3 - 1;

        $i5 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineStartOffset(int)>($i4);

        return $i5;

     label2:
        $i2 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.Token: int getListOffset(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float,float)>(r3, r0, 0.0F, f0);

        return $i2;
    }

    public static final int getPositionBelow(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int, float, javax.swing.text.TabExpander) throws javax.swing.text.BadLocationException
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r3;
        org.fife.ui.rsyntaxtextarea.folding.FoldManager $r4;
        org.fife.ui.rsyntaxtextarea.TokenOrientedView r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;
        float f0;
        javax.swing.text.TabExpander r0;
        org.fife.ui.rsyntaxtextarea.Token $r2;

        r3 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        r0 := @parameter3: javax.swing.text.TabExpander;

        r1 = (org.fife.ui.rsyntaxtextarea.TokenOrientedView) r0;

        $r2 = interfaceinvoke r1.<org.fife.ui.rsyntaxtextarea.TokenOrientedView: org.fife.ui.rsyntaxtextarea.Token getTokenListForPhysicalLineBelow(int)>(i0);

        if $r2 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $i1 = $r2.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i1 != 0 goto label2;

        $i3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineOfOffset(int)>(i0);

        $r4 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.folding.FoldManager getFoldManager()>();

        $i4 = virtualinvoke $r4.<org.fife.ui.rsyntaxtextarea.folding.FoldManager: int getVisibleLineBelow(int)>($i3);

        $i5 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineStartOffset(int)>($i4);

        return $i5;

     label2:
        $i2 = virtualinvoke $r2.<org.fife.ui.rsyntaxtextarea.Token: int getListOffset(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float,float)>(r3, r0, 0.0F, f0);

        return $i2;
    }

    public static final org.fife.ui.rsyntaxtextarea.Token getTokenAtOffset(org.fife.ui.rsyntaxtextarea.Token, int)
    {
        int i0;
        org.fife.ui.rsyntaxtextarea.Token r0, r1;
        boolean $z0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        i0 := @parameter1: int;

        r1 = r0;

     label1:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i0);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        r1 = virtualinvoke r1.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label1;

     label3:
        return null;
    }

    public static int getWordEnd(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int) throws javax.swing.text.BadLocationException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, i12, i13, $i14;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        char $c7, $c9, $c11;
        javax.swing.text.Document $r1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i12 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $i0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineEndOffsetOfCurrentLine()>();

        $i1 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        if i12 != $i2 goto label1;

        return i12;

     label1:
        $i3 = $i2 - i12;

        $i4 = $i3 - 1;

        $r2 = interfaceinvoke $r1.<javax.swing.text.Document: java.lang.String getText(int,int)>(i12, $i4);

        if $r2 == null goto label7;

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i5 <= 0 goto label7;

        i13 = 0;

        $i6 = virtualinvoke $r2.<java.lang.String: int length()>();

        $c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c7);

        if $z0 == 0 goto label3;

     label2:
        if i13 >= $i6 goto label6;

        $i10 = i13;

        i13 = i13 + 1;

        $c11 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i10);

        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c11);

        if $z3 == 0 goto label6;

        goto label2;

     label3:
        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c7);

        if $z1 == 0 goto label5;

     label4:
        if i13 >= $i6 goto label6;

        $i8 = i13;

        i13 = i13 + 1;

        $c9 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i8);

        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c9);

        if $z2 == 0 goto label6;

        goto label4;

     label5:
        i13 = 2;

     label6:
        $i14 = i13 - 1;

        i12 = i12 + $i14;

     label7:
        return i12;
    }

    public static int getWordStart(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, int) throws javax.swing.text.BadLocationException
    {
        java.lang.StringBuffer $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, i12, i13, $i15, $i17;
        java.lang.String $r3, $r8;
        boolean $z0, $z1, $z2, $z3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        char $c7, $c9, $c11;
        javax.swing.text.BadLocationException $r10;
        javax.swing.text.Document $r1;
        javax.swing.text.Element $r2;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        i12 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: javax.swing.text.Document getDocument()>();

        $r2 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Element getLineElem(javax.swing.text.Document,int)>($r1, i12);

        if $r2 != null goto label1;

        $r10 = new javax.swing.text.BadLocationException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No word at ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<javax.swing.text.BadLocationException: void <init>(java.lang.String,int)>($r8, i12);

        throw $r10;

     label1:
        $i0 = interfaceinvoke $r2.<javax.swing.text.Element: int getStartOffset()>();

        if i12 != $i0 goto label2;

        return i12;

     label2:
        $i1 = i12 + 1;

        $i2 = interfaceinvoke $r1.<javax.swing.text.Document: int getLength()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $i4 = $i3 - $i0;

        $r3 = interfaceinvoke $r1.<javax.swing.text.Document: java.lang.String getText(int,int)>($i0, $i4);

        if $r3 == null goto label8;

        $i5 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i5 <= 0 goto label8;

        $i6 = virtualinvoke $r3.<java.lang.String: int length()>();

        i13 = $i6 - 1;

        $c7 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i13);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c7);

        if $z0 == 0 goto label5;

     label3:
        if i13 <= 0 goto label4;

        $i10 = i13 - 1;

        $c11 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i10);

        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c11);

        if $z3 == 0 goto label4;

        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label3;

     label4:
        i12 = $i0 + i13;

        goto label8;

     label5:
        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c7);

        if $z1 == 0 goto label8;

     label6:
        if i13 <= 0 goto label7;

        $i8 = i13 - 1;

        $c9 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i8);

        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c9);

        if $z2 == 0 goto label7;

        $i17 = (int) -1;

        i13 = i13 + $i17;

        goto label6;

     label7:
        i12 = $i0 + i13;

     label8:
        return i12;
    }

    public static final float getTokenListWidth(org.fife.ui.rsyntaxtextarea.Token, org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, javax.swing.text.TabExpander)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        float $f0;
        javax.swing.text.TabExpander r2;
        org.fife.ui.rsyntaxtextarea.Token r0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        r1 := @parameter1: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter2: javax.swing.text.TabExpander;

        $f0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: float getTokenListWidth(org.fife.ui.rsyntaxtextarea.Token,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>(r0, r1, r2, 0.0F);

        return $f0;
    }

    public static final float getTokenListWidth(org.fife.ui.rsyntaxtextarea.Token, org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, javax.swing.text.TabExpander, float)
    {
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        float f0, $f1, $f2, f3;
        javax.swing.text.TabExpander r2;
        org.fife.ui.rsyntaxtextarea.Token r0, r3;
        boolean $z0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        r1 := @parameter1: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter2: javax.swing.text.TabExpander;

        f0 := @parameter3: float;

        f3 = f0;

        r3 = r0;

     label1:
        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label2;

        $f2 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: float getWidth(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>(r1, r2, f3);

        f3 = f3 + $f2;

        r3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label1;

     label2:
        $f1 = f3 - f0;

        return $f1;
    }

    public static final float getTokenListWidthUpTo(org.fife.ui.rsyntaxtextarea.Token, org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, javax.swing.text.TabExpander, float, int)
    {
        int i0, $i1, $i2;
        boolean $z0, $z1;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r1;
        float f0, $f1, $f2, $f3, $f4, $f5, f6;
        javax.swing.text.TabExpander r2;
        org.fife.ui.rsyntaxtextarea.Token r0, r3;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        r1 := @parameter1: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        r2 := @parameter2: javax.swing.text.TabExpander;

        f0 := @parameter3: float;

        i0 := @parameter4: int;

        f6 = 0.0F;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i0);

        if $z1 == 0 goto label2;

        $i1 = r3.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        $i2 = i0 - $i1;

        $f3 = f0 + f6;

        $f4 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: float getWidthUpTo(int,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>($i2, r1, r2, $f3);

        $f5 = f6 + $f4;

        return $f5;

     label2:
        $f1 = f0 + f6;

        $f2 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: float getWidth(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>(r1, r2, $f1);

        f6 = f6 + $f2;

        r3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label1;

     label3:
        return f6;
    }

    public static final boolean isBracket(char)
    {
        int[] $r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 > 125 goto label1;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable>;

        $i4 = (int) c0;

        $i1 = $r0[$i4];

        $i2 = $i1 & 64;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isDigit(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isHexCharacter(char)
    {
        int[] $r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 > 102 goto label1;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable>;

        $i4 = (int) c0;

        $i1 = $r0[$i4];

        $i2 = $i1 & 16;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isJavaOperator(char)
    {
        int[] $r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 > 126 goto label1;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable>;

        $i4 = (int) c0;

        $i1 = $r0[$i4];

        $i2 = $i1 & 128;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isLetter(char)
    {
        int[] $r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 > 122 goto label1;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable>;

        $i4 = (int) c0;

        $i1 = $r0[$i4];

        $i2 = $i1 & 2;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isLetterOrDigit(char)
    {
        int[] $r0;
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 > 122 goto label1;

        $r0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable>;

        $i4 = (int) c0;

        $i1 = $r0[$i4];

        $i2 = $i1 & 32;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final boolean isWhitespace(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 != 9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static float makeTokenListStartAt(org.fife.ui.rsyntaxtextarea.Token, int, javax.swing.text.TabExpander, org.fife.ui.rsyntaxtextarea.RSyntaxTextArea, float)
    {
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r0;
        float $f0, $f1, f2;
        javax.swing.text.TabExpander r1;
        org.fife.ui.rsyntaxtextarea.Token r2, r3;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        i0 := @parameter1: int;

        r1 := @parameter2: javax.swing.text.TabExpander;

        r0 := @parameter3: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        f2 := @parameter4: float;

        r3 = r2;

     label1:
        if r3 == null goto label2;

        $z2 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean containsPosition(int)>(i0);

        if $z3 != 0 goto label2;

        $f1 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: float getWidth(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>(r0, r1, f2);

        f2 = f2 + $f1;

        r3 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label1;

     label2:
        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z1 == 0 goto label3;

        $i1 = r3.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        if $i1 == i0 goto label3;

        $i2 = r3.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        i3 = i0 - $i2;

        $i4 = r3.<org.fife.ui.rsyntaxtextarea.Token: int textCount>;

        $i5 = $i4 - i3;

        $i6 = $i5 + 1;

        $f0 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: float getWidthUpTo(int,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,javax.swing.text.TabExpander,float)>($i6, r0, r1, f2);

        f2 = f2 + $f0;

        virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: void makeStartAt(int)>(i0);

     label3:
        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label4;

        virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.Token: void copyFrom(org.fife.ui.rsyntaxtextarea.Token)>(r3);

        goto label4;

     label4:
        return f2;
    }

    public static boolean regexCanFollowInJavaScript(org.fife.ui.rsyntaxtextarea.Token)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0, $z1;
        char $c6, $c8;
        char[] $r1, $r2, $r3;
        org.fife.ui.rsyntaxtextarea.Token r0;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        if r0 == null goto label3;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.Token: int textCount>;

        if $i0 != 1 goto label1;

        $r3 = r0.<org.fife.ui.rsyntaxtextarea.Token: char[] text>;

        $i7 = r0.<org.fife.ui.rsyntaxtextarea.Token: int textOffset>;

        $c8 = $r3[$i7];

        $i9 = (int) $c8;

        if $i9 == 61 goto label3;

        $i10 = (int) $c8;

        if $i10 == 40 goto label3;

        $i11 = (int) $c8;

        if $i11 == 44 goto label3;

        $i12 = (int) $c8;

        if $i12 == 63 goto label3;

        $i13 = (int) $c8;

        if $i13 == 58 goto label3;

        $i14 = (int) $c8;

        if $i14 == 91 goto label3;

        $i15 = (int) $c8;

        if $i15 == 33 goto label3;

        $i16 = (int) $c8;

        if $i16 == 38 goto label3;

     label1:
        $i1 = r0.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i1 != 23 goto label2;

        $r2 = r0.<org.fife.ui.rsyntaxtextarea.Token: char[] text>;

        $i3 = r0.<org.fife.ui.rsyntaxtextarea.Token: int textOffset>;

        $i2 = r0.<org.fife.ui.rsyntaxtextarea.Token: int textCount>;

        $i4 = $i3 + $i2;

        $i5 = $i4 - 1;

        $c6 = $r2[$i5];

        $i17 = (int) $c6;

        if $i17 == 61 goto label3;

     label2:
        $r1 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: char[] JS_KEYWORD_RETURN>;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.Token: boolean is(int,char[])>(6, $r1);

        if $z0 == 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public static final char toLowerCase(char)
    {
        int $i3, $i4;
        char c0, $c1, $c2;

        c0 := @parameter0: char;

        $i3 = (int) c0;

        if $i3 < 65 goto label1;

        $i4 = (int) c0;

        if $i4 > 90 goto label1;

        $c1 = c0 | 32;

        $c2 = (char) $c1;

        return $c2;

     label1:
        return c0;
    }

    public static final int getOS()
    {
        int $i0;

        $i0 = <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS>;

        return $i0;
    }

    private static final int getOSImpl()
    {
        byte b3;
        int $i0, $i1, $i2, $i5, $i7, $i9;
        java.lang.String $r0, $r1;

        b3 = 8;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        if $r0 == null goto label4;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("windows");

        $i5 = (int) -1;

        if $i0 <= $i5 goto label1;

        b3 = 1;

        goto label4;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("mac os x");

        $i7 = (int) -1;

        if $i1 <= $i7 goto label2;

        b3 = 2;

        goto label4;

     label2:
        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("linux");

        $i9 = (int) -1;

        if $i2 <= $i9 goto label3;

        b3 = 4;

        goto label4;

     label3:
        b3 = 8;

     label4:
        return b3;
    }

    public static java.util.regex.Pattern wildcardToPattern(java.lang.String, boolean, boolean)
    {
        java.util.regex.PatternSyntaxException $r4;
        char $c0;
        byte b1;
        java.lang.StringBuffer $r3, $r6;
        int i2, $i3, $i4;
        java.lang.String r1, $r2;
        java.util.regex.Pattern r5;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        b1 = 0;

        if z0 != 0 goto label01;

        b1 = 66;

     label01:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label02:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i3 goto label11;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c0;

        lookupswitch($i4)
        {
            case 36: goto label08;
            case 40: goto label08;
            case 41: goto label08;
            case 42: goto label03;
            case 43: goto label08;
            case 45: goto label08;
            case 46: goto label08;
            case 63: goto label04;
            case 91: goto label08;
            case 92: goto label08;
            case 93: goto label08;
            case 94: goto label05;
            case 123: goto label08;
            case 124: goto label08;
            case 125: goto label08;
            default: goto label09;
        };

     label03:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".*");

        goto label10;

     label04:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        goto label10;

     label05:
        if i2 > 0 goto label06;

        if z1 == 0 goto label07;

     label06:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label07:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(94);

        goto label10;

     label08:
        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label10;

     label09:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label10:
        i2 = i2 + 1;

        goto label02;

     label11:
        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r2, b1);

     label12:
        goto label14;

     label13:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.util.regex.PatternSyntaxException: void printStackTrace()>();

        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".+");

     label14:
        return r5;

        catch java.util.regex.PatternSyntaxException from label11 to label12 with label13;
    }

    static void <clinit>()
    {
        int[] $r0;
        int $i0;
        char[] $r2;
        javax.swing.text.Segment $r1;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int JAVA_OPERATOR_MASK> = 128;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int BRACKET_MASK> = 64;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int LETTER_OR_DIGIT_MASK> = 32;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int HEX_CHARACTER_MASK> = 16;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int LETTER_MASK> = 2;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS_OTHER> = 8;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS_LINUX> = 4;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS_MAC_OSX> = 2;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS_WINDOWS> = 1;

        $i0 = staticinvoke <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int getOSImpl()>();

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int OS> = $i0;

        $r0 = newarray (int)[256];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 4;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 0;

        $r0[21] = 0;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = 0;

        $r0[26] = 0;

        $r0[27] = 0;

        $r0[28] = 0;

        $r0[29] = 0;

        $r0[30] = 0;

        $r0[31] = 0;

        $r0[32] = 4;

        $r0[33] = 128;

        $r0[34] = 0;

        $r0[35] = 0;

        $r0[36] = 0;

        $r0[37] = 128;

        $r0[38] = 128;

        $r0[39] = 0;

        $r0[40] = 64;

        $r0[41] = 64;

        $r0[42] = 128;

        $r0[43] = 128;

        $r0[44] = 0;

        $r0[45] = 128;

        $r0[46] = 0;

        $r0[47] = 128;

        $r0[48] = 49;

        $r0[49] = 49;

        $r0[50] = 49;

        $r0[51] = 49;

        $r0[52] = 49;

        $r0[53] = 49;

        $r0[54] = 49;

        $r0[55] = 49;

        $r0[56] = 49;

        $r0[57] = 49;

        $r0[58] = 128;

        $r0[59] = 0;

        $r0[60] = 128;

        $r0[61] = 128;

        $r0[62] = 128;

        $r0[63] = 128;

        $r0[64] = 0;

        $r0[65] = 58;

        $r0[66] = 58;

        $r0[67] = 58;

        $r0[68] = 58;

        $r0[69] = 58;

        $r0[70] = 58;

        $r0[71] = 42;

        $r0[72] = 42;

        $r0[73] = 42;

        $r0[74] = 42;

        $r0[75] = 42;

        $r0[76] = 42;

        $r0[77] = 42;

        $r0[78] = 42;

        $r0[79] = 42;

        $r0[80] = 42;

        $r0[81] = 42;

        $r0[82] = 42;

        $r0[83] = 42;

        $r0[84] = 42;

        $r0[85] = 42;

        $r0[86] = 42;

        $r0[87] = 42;

        $r0[88] = 42;

        $r0[89] = 42;

        $r0[90] = 42;

        $r0[91] = 64;

        $r0[92] = 0;

        $r0[93] = 64;

        $r0[94] = 128;

        $r0[95] = 0;

        $r0[96] = 0;

        $r0[97] = 50;

        $r0[98] = 50;

        $r0[99] = 50;

        $r0[100] = 50;

        $r0[101] = 50;

        $r0[102] = 50;

        $r0[103] = 34;

        $r0[104] = 34;

        $r0[105] = 34;

        $r0[106] = 34;

        $r0[107] = 34;

        $r0[108] = 34;

        $r0[109] = 34;

        $r0[110] = 34;

        $r0[111] = 34;

        $r0[112] = 34;

        $r0[113] = 34;

        $r0[114] = 34;

        $r0[115] = 34;

        $r0[116] = 34;

        $r0[117] = 34;

        $r0[118] = 34;

        $r0[119] = 34;

        $r0[120] = 34;

        $r0[121] = 34;

        $r0[122] = 34;

        $r0[123] = 64;

        $r0[124] = 128;

        $r0[125] = 64;

        $r0[126] = 128;

        $r0[127] = 0;

        $r0[128] = 0;

        $r0[129] = 0;

        $r0[130] = 0;

        $r0[131] = 0;

        $r0[132] = 0;

        $r0[133] = 0;

        $r0[134] = 0;

        $r0[135] = 0;

        $r0[136] = 0;

        $r0[137] = 0;

        $r0[138] = 0;

        $r0[139] = 0;

        $r0[140] = 0;

        $r0[141] = 0;

        $r0[142] = 0;

        $r0[143] = 0;

        $r0[144] = 0;

        $r0[145] = 0;

        $r0[146] = 0;

        $r0[147] = 0;

        $r0[148] = 0;

        $r0[149] = 0;

        $r0[150] = 0;

        $r0[151] = 0;

        $r0[152] = 0;

        $r0[153] = 0;

        $r0[154] = 0;

        $r0[155] = 0;

        $r0[156] = 0;

        $r0[157] = 0;

        $r0[158] = 0;

        $r0[159] = 0;

        $r0[160] = 0;

        $r0[161] = 0;

        $r0[162] = 0;

        $r0[163] = 0;

        $r0[164] = 0;

        $r0[165] = 0;

        $r0[166] = 0;

        $r0[167] = 0;

        $r0[168] = 0;

        $r0[169] = 0;

        $r0[170] = 0;

        $r0[171] = 0;

        $r0[172] = 0;

        $r0[173] = 0;

        $r0[174] = 0;

        $r0[175] = 0;

        $r0[176] = 0;

        $r0[177] = 0;

        $r0[178] = 0;

        $r0[179] = 0;

        $r0[180] = 0;

        $r0[181] = 0;

        $r0[182] = 0;

        $r0[183] = 0;

        $r0[184] = 0;

        $r0[185] = 0;

        $r0[186] = 0;

        $r0[187] = 0;

        $r0[188] = 0;

        $r0[189] = 0;

        $r0[190] = 0;

        $r0[191] = 0;

        $r0[192] = 0;

        $r0[193] = 0;

        $r0[194] = 0;

        $r0[195] = 0;

        $r0[196] = 0;

        $r0[197] = 0;

        $r0[198] = 0;

        $r0[199] = 0;

        $r0[200] = 0;

        $r0[201] = 0;

        $r0[202] = 0;

        $r0[203] = 0;

        $r0[204] = 0;

        $r0[205] = 0;

        $r0[206] = 0;

        $r0[207] = 0;

        $r0[208] = 0;

        $r0[209] = 0;

        $r0[210] = 0;

        $r0[211] = 0;

        $r0[212] = 0;

        $r0[213] = 0;

        $r0[214] = 0;

        $r0[215] = 0;

        $r0[216] = 0;

        $r0[217] = 0;

        $r0[218] = 0;

        $r0[219] = 0;

        $r0[220] = 0;

        $r0[221] = 0;

        $r0[222] = 0;

        $r0[223] = 0;

        $r0[224] = 0;

        $r0[225] = 0;

        $r0[226] = 0;

        $r0[227] = 0;

        $r0[228] = 0;

        $r0[229] = 0;

        $r0[230] = 0;

        $r0[231] = 0;

        $r0[232] = 0;

        $r0[233] = 0;

        $r0[234] = 0;

        $r0[235] = 0;

        $r0[236] = 0;

        $r0[237] = 0;

        $r0[238] = 0;

        $r0[239] = 0;

        $r0[240] = 0;

        $r0[241] = 0;

        $r0[242] = 0;

        $r0[243] = 0;

        $r0[244] = 0;

        $r0[245] = 0;

        $r0[246] = 0;

        $r0[247] = 0;

        $r0[248] = 0;

        $r0[249] = 0;

        $r0[250] = 0;

        $r0[251] = 0;

        $r0[252] = 0;

        $r0[253] = 0;

        $r0[254] = 0;

        $r0[255] = 0;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: int[] dataTable> = $r0;

        $r1 = new javax.swing.text.Segment;

        specialinvoke $r1.<javax.swing.text.Segment: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: javax.swing.text.Segment charSegment> = $r1;

        $r2 = newarray (char)[6];

        $r2[0] = 114;

        $r2[1] = 101;

        $r2[2] = 116;

        $r2[3] = 117;

        $r2[4] = 114;

        $r2[5] = 110;

        <org.fife.ui.rsyntaxtextarea.RSyntaxUtilities: char[] JS_KEYWORD_RETURN> = $r2;

        return;
    }
}
