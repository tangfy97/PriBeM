public abstract class org.bouncycastle.util.test.SimpleTest extends java.lang.Object implements org.bouncycastle.util.test.Test
{

    public void <init>()
    {
        org.bouncycastle.util.test.SimpleTest r0;

        r0 := @this: org.bouncycastle.util.test.SimpleTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.String getName();

    private org.bouncycastle.util.test.TestResult success()
    {
        org.bouncycastle.util.test.SimpleTest r0;
        org.bouncycastle.util.test.TestResult $r1;

        r0 := @this: org.bouncycastle.util.test.SimpleTest;

        $r1 = staticinvoke <org.bouncycastle.util.test.SimpleTestResult: org.bouncycastle.util.test.TestResult successful(org.bouncycastle.util.test.Test,java.lang.String)>(r0, "Okay");

        return $r1;
    }

    protected void fail(java.lang.String)
    {
        org.bouncycastle.util.test.SimpleTest r1;
        org.bouncycastle.util.test.TestFailedException $r0;
        org.bouncycastle.util.test.TestResult $r3;
        java.lang.String r2;

        r1 := @this: org.bouncycastle.util.test.SimpleTest;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.bouncycastle.util.test.TestFailedException;

        $r3 = staticinvoke <org.bouncycastle.util.test.SimpleTestResult: org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String)>(r1, r2);

        specialinvoke $r0.<org.bouncycastle.util.test.TestFailedException: void <init>(org.bouncycastle.util.test.TestResult)>($r3);

        throw $r0;
    }

    protected void fail(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        org.bouncycastle.util.test.SimpleTest r1;
        org.bouncycastle.util.test.TestFailedException $r0;
        org.bouncycastle.util.test.TestResult $r4;
        java.lang.String r2;

        r1 := @this: org.bouncycastle.util.test.SimpleTest;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Throwable;

        $r0 = new org.bouncycastle.util.test.TestFailedException;

        $r4 = staticinvoke <org.bouncycastle.util.test.SimpleTestResult: org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String,java.lang.Throwable)>(r1, r2, r3);

        specialinvoke $r0.<org.bouncycastle.util.test.TestFailedException: void <init>(org.bouncycastle.util.test.TestResult)>($r4);

        throw $r0;
    }

    protected void fail(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.bouncycastle.util.test.SimpleTest r1;
        org.bouncycastle.util.test.TestFailedException $r0;
        org.bouncycastle.util.test.TestResult $r5;
        java.lang.Object r3, r4;
        java.lang.String r2;

        r1 := @this: org.bouncycastle.util.test.SimpleTest;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r0 = new org.bouncycastle.util.test.TestFailedException;

        $r5 = staticinvoke <org.bouncycastle.util.test.SimpleTestResult: org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        specialinvoke $r0.<org.bouncycastle.util.test.TestFailedException: void <init>(org.bouncycastle.util.test.TestResult)>($r5);

        throw $r0;
    }

    protected boolean areEqual(byte[], byte[])
    {
        byte[] r0, r1;
        org.bouncycastle.util.test.SimpleTest r2;
        boolean $z0;

        r2 := @this: org.bouncycastle.util.test.SimpleTest;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $z0 = staticinvoke <org.bouncycastle.util.Arrays: boolean areEqual(byte[],byte[])>(r0, r1);

        return $z0;
    }

    public org.bouncycastle.util.test.TestResult perform()
    {
        org.bouncycastle.util.test.SimpleTest r0;
        org.bouncycastle.util.test.TestResult $r1, $r7, $r9;
        org.bouncycastle.util.test.TestFailedException $r8;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.bouncycastle.util.test.SimpleTest;

     label1:
        virtualinvoke r0.<org.bouncycastle.util.test.SimpleTest: void performTest()>();

        $r1 = specialinvoke r0.<org.bouncycastle.util.test.SimpleTest: org.bouncycastle.util.test.TestResult success()>();

     label2:
        return $r1;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<org.bouncycastle.util.test.TestFailedException: org.bouncycastle.util.test.TestResult getResult()>();

        return $r9;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.bouncycastle.util.test.SimpleTestResult: org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String,java.lang.Throwable)>(r0, $r6, $r2);

        return $r7;

        catch org.bouncycastle.util.test.TestFailedException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    protected static void runTest(org.bouncycastle.util.test.Test)
    {
        java.io.PrintStream $r1;
        org.bouncycastle.util.test.Test r0;

        r0 := @parameter0: org.bouncycastle.util.test.Test;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.bouncycastle.util.test.SimpleTest: void runTest(org.bouncycastle.util.test.Test,java.io.PrintStream)>(r0, $r1);

        return;
    }

    protected static void runTest(org.bouncycastle.util.test.Test, java.io.PrintStream)
    {
        java.io.PrintStream r2;
        java.lang.Throwable $r4, $r5;
        org.bouncycastle.util.test.TestResult $r1;
        java.lang.String $r3;
        org.bouncycastle.util.test.Test r0;

        r0 := @parameter0: org.bouncycastle.util.test.Test;

        r2 := @parameter1: java.io.PrintStream;

        $r1 = interfaceinvoke r0.<org.bouncycastle.util.test.Test: org.bouncycastle.util.test.TestResult perform()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r1.<org.bouncycastle.util.test.TestResult: java.lang.Throwable getException()>();

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r1.<org.bouncycastle.util.test.TestResult: java.lang.Throwable getException()>();

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(r2);

     label1:
        return;
    }

    public abstract void performTest() throws java.lang.Exception;
}
