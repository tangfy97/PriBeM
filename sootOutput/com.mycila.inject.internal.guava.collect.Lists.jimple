public final class com.mycila.inject.internal.guava.collect.Lists extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Lists r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.ArrayList newArrayList()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static transient java.util.ArrayList newArrayList(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, $i1;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: int computeArrayListCapacity(int)>($i0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i1);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        return $r1;
    }

    static int computeArrayListCapacity(int)
    {
        long $l1, $l3, $l4, $l5;
        int i0, $i2, $i6;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $l1 = (long) i0;

        $l4 = 5L + $l1;

        $i2 = i0 / 10;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        $i6 = staticinvoke <com.mycila.inject.internal.guava.primitives.Ints: int saturatedCast(long)>($l5);

        return $i6;
    }

    public static java.util.ArrayList newArrayList(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.util.Collection $r2;
        java.lang.Iterable r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r3 = new java.util.ArrayList;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>(r0);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

     label2:
        return $r3;
    }

    public static java.util.ArrayList newArrayList(java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r2;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.ArrayList newArrayListWithCapacity(int)
    {
        int i0;
        java.util.ArrayList $r0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.ArrayList newArrayListWithExpectedSize(int)
    {
        int i0, $i1;
        java.util.ArrayList $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: int computeArrayListCapacity(int)>(i0);

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i1);

        return $r0;
    }

    public static java.util.LinkedList newLinkedList()
    {
        java.util.LinkedList $r0;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedList newLinkedList(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.LinkedList $r0;
        java.lang.Iterable r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.LinkedList newLinkedList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List asList(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r1;
        java.lang.Object[] r2;
        com.mycila.inject.internal.guava.collect.Lists$OnePlusArrayList $r0;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r0 = new com.mycila.inject.internal.guava.collect.Lists$OnePlusArrayList;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$OnePlusArrayList: void <init>(java.lang.Object,java.lang.Object[])>(r1, r2);

        return $r0;
    }

    public static java.util.List asList(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.Lists$TwoPlusArrayList $r0;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object[];

        $r0 = new com.mycila.inject.internal.guava.collect.Lists$TwoPlusArrayList;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$TwoPlusArrayList: void <init>(java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3);

        return $r0;
    }

    public static java.util.List transform(java.util.List, com.mycila.inject.internal.guava.base.Function)
    {
        java.util.List r0;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList $r4;
        java.util.AbstractList $r2;
        com.mycila.inject.internal.guava.base.Function r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingRandomAccessList $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.Lists$TransformingRandomAccessList;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Lists$TransformingRandomAccessList: void <init>(java.util.List,com.mycila.inject.internal.guava.base.Function)>(r0, r1);

        goto label2;

     label1:
        $r4 = new com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList;

        $r2 = $r4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList: void <init>(java.util.List,com.mycila.inject.internal.guava.base.Function)>(r0, r1);

     label2:
        return $r2;
    }

    public static java.util.List partition(java.util.List, int)
    {
        com.mycila.inject.internal.guava.collect.Lists$Partition $r1, $r3;
        java.util.List r0;
        int i0;
        com.mycila.inject.internal.guava.collect.Lists$RandomAccessPartition $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z1);

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label3;

        $r2 = new com.mycila.inject.internal.guava.collect.Lists$RandomAccessPartition;

        $r1 = $r2;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.Lists$RandomAccessPartition: void <init>(java.util.List,int)>(r0, i0);

        goto label4;

     label3:
        $r3 = new com.mycila.inject.internal.guava.collect.Lists$Partition;

        $r1 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Lists$Partition: void <init>(java.util.List,int)>(r0, i0);

     label4:
        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList charactersOf(java.lang.String)
    {
        com.mycila.inject.internal.guava.collect.Lists$StringAsImmutableList $r0;
        java.lang.Object $r2;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.mycila.inject.internal.guava.collect.Lists$StringAsImmutableList;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$StringAsImmutableList: void <init>(java.lang.String)>($r3);

        return $r0;
    }

    public static java.util.List charactersOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r1, $r3;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.Lists$CharSequenceAsList $r0;

        r1 := @parameter0: java.lang.CharSequence;

        $r0 = new com.mycila.inject.internal.guava.collect.Lists$CharSequenceAsList;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.CharSequence) $r2;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$CharSequenceAsList: void <init>(java.lang.CharSequence)>($r3);

        return $r0;
    }

    public static java.util.List reverse(java.util.List)
    {
        java.util.List r0, $r4;
        com.mycila.inject.internal.guava.collect.Lists$RandomAccessReverseList $r2;
        com.mycila.inject.internal.guava.collect.Lists$ReverseList $r1, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Lists$ReverseList;

        if $z0 == 0 goto label1;

        $r3 = (com.mycila.inject.internal.guava.collect.Lists$ReverseList) r0;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.Lists$ReverseList: java.util.List getForwardList()>();

        return $r4;

     label1:
        $z1 = r0 instanceof java.util.RandomAccess;

        if $z1 == 0 goto label2;

        $r2 = new com.mycila.inject.internal.guava.collect.Lists$RandomAccessReverseList;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.Lists$RandomAccessReverseList: void <init>(java.util.List)>(r0);

        return $r2;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.Lists$ReverseList;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Lists$ReverseList: void <init>(java.util.List)>(r0);

        return $r1;
    }

    static int hashCodeImpl(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        int $i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i1 = 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = 31 * i1;

        if $r2 != null goto label2;

        $i2 = 0;

        goto label3;

     label2:
        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label3:
        i1 = $i0 + $i2;

        goto label1;

     label4:
        return i1;
    }

    static boolean equalsImpl(java.util.List, java.lang.Object)
    {
        java.util.Iterator $r4, $r5;
        java.util.List r1, r3;
        int $i0, $i1;
        java.lang.Object r0, $r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if r0 != $r2 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = (java.util.List) r0;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != $i1 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)>($r4, $r5);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    static boolean addAllImpl(java.util.List, int, java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.util.ListIterator $r1;
        java.lang.Iterable r2;
        java.util.List r0;
        int i0;
        java.lang.Object $r4;
        boolean $z0, z1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Iterable;

        z1 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>(i0);

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.ListIterator: void add(java.lang.Object)>($r4);

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    static int indexOfImpl(java.util.List, java.lang.Object)
    {
        java.util.ListIterator $r1;
        java.util.List r0;
        int $i0, $i2;
        java.lang.Object r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.ListIterator: java.lang.Object next()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $z1 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        return $i0;

     label2:
        $i2 = (int) -1;

        return $i2;
    }

    static int lastIndexOfImpl(java.util.List, java.lang.Object)
    {
        java.util.ListIterator $r1;
        java.util.List r0;
        int $i0, $i1, $i3;
        java.lang.Object r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.Object;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = interfaceinvoke r0.<java.util.List: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.ListIterator: java.lang.Object previous()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $z1 == 0 goto label1;

        $i1 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        return $i1;

     label2:
        $i3 = (int) -1;

        return $i3;
    }

    static java.util.ListIterator listIteratorImpl(java.util.List, int)
    {
        com.mycila.inject.internal.guava.collect.Lists$AbstractListWrapper $r0;
        java.util.List r1;
        java.util.ListIterator $r2;
        int i0;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r0 = new com.mycila.inject.internal.guava.collect.Lists$AbstractListWrapper;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$AbstractListWrapper: void <init>(java.util.List)>(r1);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.Lists$AbstractListWrapper: java.util.ListIterator listIterator(int)>(i0);

        return $r2;
    }

    static java.util.List subListImpl(java.util.List, int, int)
    {
        com.mycila.inject.internal.guava.collect.Lists$AbstractListWrapper r4;
        java.util.List r0, $r2;
        int i0, i1;
        com.mycila.inject.internal.guava.collect.Lists$2 $r1;
        com.mycila.inject.internal.guava.collect.Lists$1 $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.Lists$1;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Lists$1: void <init>(java.util.List)>(r0);

        r4 = $r3;

        goto label2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.collect.Lists$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Lists$2: void <init>(java.util.List)>(r0);

        r4 = $r1;

     label2:
        $r2 = interfaceinvoke r4.<java.util.List: java.util.List subList(int,int)>(i0, i1);

        return $r2;
    }
}
