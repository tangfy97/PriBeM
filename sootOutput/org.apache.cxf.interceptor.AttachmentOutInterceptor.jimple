public class org.apache.cxf.interceptor.AttachmentOutInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    public static final java.lang.String WRITE_ATTACHMENTS;
    private static final java.util.ResourceBundle BUNDLE;
    private org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor ending;

    public void <init>()
    {
        org.apache.cxf.interceptor.AttachmentOutInterceptor r0;
        org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor $r1;

        r0 := @this: org.apache.cxf.interceptor.AttachmentOutInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("pre-stream");

        $r1 = new org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor;

        specialinvoke $r1.<org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor: void <init>(org.apache.cxf.interceptor.AttachmentOutInterceptor)>(r0);

        r0.<org.apache.cxf.interceptor.AttachmentOutInterceptor: org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor ending> = $r1;

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        java.lang.Object[] $r14;
        org.apache.cxf.interceptor.InterceptorChain $r7;
        org.apache.cxf.interceptor.AttachmentOutInterceptor r4;
        org.apache.cxf.common.i18n.Message $r13;
        org.apache.cxf.interceptor.Fault $r12;
        java.util.ResourceBundle $r15;
        java.util.Map $r6;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.attachment.AttachmentSerializer $r3;
        java.util.Collection $r9, $r10;
        java.io.IOException $r11;
        org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor $r8;
        java.lang.Object $r1, $r2;

        r4 := @this: org.apache.cxf.interceptor.AttachmentOutInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $z0 = staticinvoke <org.apache.cxf.attachment.AttachmentUtil: boolean isMtomEnabled(org.apache.cxf.message.Message)>(r0);

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("write.attachments");

        $z1 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r9 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.util.Collection getAttachments()>();

        if $r9 == null goto label2;

        $r10 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.util.Collection getAttachments()>();

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z0 != 0 goto label4;

        if $z4 != 0 goto label4;

        return;

     label4:
        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/OutputStream;");

        if $r2 != null goto label5;

        return;

     label5:
        $r3 = new org.apache.cxf.attachment.AttachmentSerializer;

        $r5 = virtualinvoke r4.<org.apache.cxf.interceptor.AttachmentOutInterceptor: java.lang.String getMultipartType()>();

        $z2 = virtualinvoke r4.<org.apache.cxf.interceptor.AttachmentOutInterceptor: boolean writeOptionalTypeParameters()>();

        $r6 = virtualinvoke r4.<org.apache.cxf.interceptor.AttachmentOutInterceptor: java.util.Map getRootHeaders()>();

        specialinvoke $r3.<org.apache.cxf.attachment.AttachmentSerializer: void <init>(org.apache.cxf.message.Message,java.lang.String,boolean,java.util.Map)>(r0, $r5, $z2, $r6);

        virtualinvoke $r3.<org.apache.cxf.attachment.AttachmentSerializer: void setXop(boolean)>($z0);

     label6:
        virtualinvoke $r3.<org.apache.cxf.attachment.AttachmentSerializer: void writeProlog()>();

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        $r12 = new org.apache.cxf.interceptor.Fault;

        $r13 = new org.apache.cxf.common.i18n.Message;

        $r15 = <org.apache.cxf.interceptor.AttachmentOutInterceptor: java.util.ResourceBundle BUNDLE>;

        $r14 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("WRITE_ATTACHMENTS", $r15, $r14);

        specialinvoke $r12.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label9:
        interfaceinvoke r0.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/attachment/AttachmentSerializer;", $r3);

        $r7 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.interceptor.InterceptorChain getInterceptorChain()>();

        $r8 = r4.<org.apache.cxf.interceptor.AttachmentOutInterceptor: org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor ending>;

        interfaceinvoke $r7.<org.apache.cxf.interceptor.InterceptorChain: void add(org.apache.cxf.interceptor.Interceptor)>($r8);

        return;

        catch java.io.IOException from label6 to label7 with label8;
    }

    protected java.lang.String getMultipartType()
    {
        org.apache.cxf.interceptor.AttachmentOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AttachmentOutInterceptor;

        return "multipart/related";
    }

    protected boolean writeOptionalTypeParameters()
    {
        org.apache.cxf.interceptor.AttachmentOutInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AttachmentOutInterceptor;

        return 1;
    }

    protected java.util.Map getRootHeaders()
    {
        org.apache.cxf.interceptor.AttachmentOutInterceptor r1;
        java.util.Map $r0;

        r1 := @this: org.apache.cxf.interceptor.AttachmentOutInterceptor;

        $r0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r0;
    }

    static java.util.ResourceBundle access$000()
    {
        java.util.ResourceBundle $r0;

        $r0 = <org.apache.cxf.interceptor.AttachmentOutInterceptor: java.util.ResourceBundle BUNDLE>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;

        <org.apache.cxf.interceptor.AttachmentOutInterceptor: java.lang.String WRITE_ATTACHMENTS> = "write.attachments";

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/AttachmentOutInterceptor;");

        <org.apache.cxf.interceptor.AttachmentOutInterceptor: java.util.ResourceBundle BUNDLE> = $r0;

        return;
    }
}
