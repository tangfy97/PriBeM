abstract class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry extends java.lang.Object implements com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry
{

    void <init>()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference r2;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int getHash()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.lang.Object getKey()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public long getExpirationTime()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setExpirationTime(long)
    {
        java.lang.UnsupportedOperationException $r0;
        long l0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        l0 := @parameter0: long;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNextExpirable()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setNextExpirable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getPreviousExpirable()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setPreviousExpirable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNextEvictable()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setNextEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getPreviousEvictable()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void setPreviousEvictable(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$AbstractReferenceEntry;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
