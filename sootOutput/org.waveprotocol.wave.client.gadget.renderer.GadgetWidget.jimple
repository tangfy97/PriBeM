public class org.waveprotocol.wave.client.gadget.renderer.GadgetWidget extends org.waveprotocol.wave.model.supplement.ObservableSupplementedWave$ListenerImpl implements org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener, org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener, org.waveprotocol.wave.client.gadget.renderer.GadgetUiListener
{
    private static final java.lang.String GADGET_RELAY_PATH;
    private static final int DEFAULT_HEIGHT_PX;
    private static final int DEFAULT_WIDTH_PX;
    private static final java.lang.String PODIUM_STATE_NAME;
    static final java.lang.String GADGET_RPC_PATH;
    static final java.lang.String GADGET_NAME_PREFIX;
    static final java.lang.String GADGET_PRIMARY_VIEW;
    static final java.lang.String GADGET_DEFAULT_VIEW;
    private static final int GADGET_RPC_LOAD_WARNING_TIMEOUT_MS;
    private static final int GADGET_RPC_LOAD_TIMER_MS;
    private static final int EDITING_POLLING_TIMER_MS;
    private static final int BLIP_SUBMIT_TIMEOUT_MS;
    private static final int STATE_SEND_TIMEOUT_MS;
    private static final java.lang.String WAVE_API_VERSION;
    private static final java.lang.String PLAYBACK_MODE_KEY;
    private static final java.lang.String EDIT_MODE_KEY;
    private static final int FRAME_BORDER_REMOVE_DELAY_MS;
    private static final int REPEAT_PARTICIPANT_INFORMATION_SEND_DELAY_MS;
    private org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui;
    private org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild titleElement;
    private java.lang.String source;
    private static int nextClientInstanceId;
    private int clientInstanceId;
    private java.lang.String iframeUrl;
    private final java.lang.String rpcToken;
    private java.lang.String securityToken;
    private org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs;
    private final org.waveprotocol.wave.model.util.StringMap prefElements;
    private boolean active;
    private org.waveprotocol.wave.model.id.WaveletName waveletName;
    private org.waveprotocol.wave.model.conversation.ConversationBlip blip;
    private org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter;
    private org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter;
    private org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter;
    private org.waveprotocol.wave.client.editor.content.ContentElement element;
    private org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator;
    private org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants;
    private org.waveprotocol.wave.client.gadget.StateMap state;
    private java.lang.String loginName;
    private final org.waveprotocol.wave.model.util.StringMap stateElements;
    private boolean waveEnabled;
    private java.lang.String waveApiVersion;
    private org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement;
    private org.waveprotocol.wave.client.account.ProfileManager profileManager;
    private org.waveprotocol.wave.client.gadget.renderer.Locale locale;
    private static boolean initialized;
    private org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild;
    private boolean documentModified;
    private boolean toUpdateIframeUrl;
    private final java.lang.String clientInstanceLogLabel;
    private static final java.lang.String FRAGMENT_CLEANING_PATTERN;
    private static final java.lang.String URL_CLEANING_PATTERN;
    private static final java.lang.String FRAGMENT_PATTERN;
    private static final java.lang.String BEFORE_FRAGMENT_PATTERN;
    private static final java.lang.String FRAGMENT_VALIDATION_PATTERN;
    private static final java.lang.String IFRAME_HOST_PATTERN;
    private static final java.lang.String SNIPPET_SANITIZER_PATTERN;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task removeRedundantNodesTask;
    private final org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childAddedTask;
    private final org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childRemovedTask;
    private final org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask descendantsMutatedTask;
    private final org.waveprotocol.wave.client.scheduler.Scheduler$Task schedulableMutationTask;

    private void <init>()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$19 $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$17 $r1;
        long $l4, $l5, $l6, $l8, $l9, $l10, $l11;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$18 $r2;
        org.waveprotocol.wave.model.util.StringMap $r11, $r12;
        java.lang.Long $r15, $r16;
        int $i0, $i1, $i2, $i3, $i7;
        java.lang.String $r10, $r18;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$20 $r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$21 $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r13, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.ObservableSupplementedWave$ListenerImpl: void <init>()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean active> = 0;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled> = 0;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String waveApiVersion> = "";

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild> = null;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean documentModified> = 0;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean toUpdateIframeUrl> = 0;

        $r1 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$17;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$17: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.scheduler.Scheduler$Task removeRedundantNodesTask> = $r1;

        $r2 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$18;

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$18: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childAddedTask> = $r2;

        $r3 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$19;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$19: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childRemovedTask> = $r3;

        $r4 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$20;

        specialinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$20: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask descendantsMutatedTask> = $r4;

        $r5 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$21;

        specialinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$21: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.scheduler.Scheduler$Task schedulableMutationTask> = $r5;

        $i0 = <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int nextClientInstanceId>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int nextClientInstanceId> = $i1;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int clientInstanceId> = $i0;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int clientInstanceId>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String clientInstanceLogLabel> = $r10;

        $r11 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements> = $r11;

        $r12 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i3 = staticinvoke <com.google.gwt.user.client.Random: int nextInt()>();

        $l4 = (long) $i3;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $l5 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

        $l6 = $l5 << 32;

        $i7 = staticinvoke <com.google.gwt.user.client.Random: int nextInt()>();

        $l8 = (long) $i7;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $l9 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        $l10 = $l9 & 4294967295L;

        $l11 = $l6 | $l10;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String rpcToken> = $r18;

        return;
    }

    private static native boolean gadgetLibraryLoaded();

    private static void initializeGadgets()
    {
        boolean $z0, $z1, $z2, $z3;

        $z0 = <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean initialized>;

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean gadgetLibraryLoaded()>();

        if $z2 != 0 goto label1;

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void log(java.lang.String)>("Initializing Gadget RPC script tag.");

        staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void loadGadgetRpcScript()>();

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean initialized> = 1;

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void log(java.lang.String)>("Gadgets RPC script tag initialized.");

     label1:
        $z3 = <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean initialized>;

        if $z3 != 0 goto label2;

        $z1 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean gadgetLibraryLoaded()>();

        if $z1 != 0 goto label2;

        staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void excludeCssName()>();

     label2:
        return;
    }

    private static java.lang.String stateToAttribute(org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.StateMap r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.StateMap;

        if r0 != null goto label1;

        $r3 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String encodeComponent(java.lang.String)>("{}");

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r2 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String encodeComponent(java.lang.String)>($r1);

        return $r2;
    }

    private org.waveprotocol.wave.client.gadget.StateMap attributeToState(java.lang.String)
    {
        java.lang.Object[] $r3, $r6;
        org.waveprotocol.wave.client.gadget.StateMap $r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        java.lang.String r1, $r4, $r5, $r7;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "Unescaped attribute: ";

        $r4 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String decodeComponent(java.lang.String)>(r1);

        $r3[1] = $r4;

        specialinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

        $r5 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String decodeComponent(java.lang.String)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.StateMap: void fromJson(java.lang.String)>($r5);

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "State map: ";

        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r6[1] = $r7;

        specialinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r6);

     label1:
        return $r0;
    }

    private java.lang.String getGadgetName()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r4;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wgadget_iframe_");

        $i0 = r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int clientInstanceId>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void updatePrefsFromAttribute(java.lang.String)
    {
        java.lang.Object[] $r6;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r1, $r5, $r7;
        org.waveprotocol.wave.client.gadget.StateMap $r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r2, r3, $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1 $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String stateToAttribute(org.waveprotocol.wave.client.gadget.StateMap)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap attributeToState(java.lang.String)>(r3);

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: void parse(org.waveprotocol.wave.client.gadget.StateMap,boolean)>($r4, 1);

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "Updating user prefs: ";

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: java.lang.String toJson()>();

        $r6[1] = $r8;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r6);

        $r9 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1;

        specialinvoke $r9.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$1: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        virtualinvoke $r4.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r9);

     label1:
        return;
    }

    public void onAttributeModified(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r1, $r13, $r15, $r20;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r23;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r4;
        org.waveprotocol.wave.client.gadget.StateMap $r5, $r6, $r8, $r18, $r19, $r21;
        java.lang.String r2, r3, $r7, $r9, $r10, $r12, $r16, $r17, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r11, $r14;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = newarray (java.lang.Object)[5];

        $r1[0] = "Attribute \'";

        $r1[1] = r2;

        $r1[2] = "\' changed to \'";

        $r1[3] = r3;

        $r1[4] = "\'";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        if $r4 != null goto label01;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = "Attribute changed before the gadget is initialized.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r15);

        return;

     label01:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("url");

        if $z0 == 0 goto label04;

        if r3 != null goto label02;

        $r16 = "";

        goto label03;

     label02:
        $r16 = r3;

     label03:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source> = $r16;

        goto label11;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("title");

        if $z1 == 0 goto label08;

        if r3 != null goto label05;

        $r17 = "";

        goto label06;

     label05:
        $r17 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String decodeComponent(java.lang.String)>(r3);

     label06:
        $r11 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: java.lang.String getTitleLabelText()>();

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z6 != 0 goto label07;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = "Updating title: ";

        $r13[1] = $r17;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r13);

        $r14 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r14.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setTitleLabelText(java.lang.String)>($r17);

     label07:
        goto label11;

     label08:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("prefs");

        if $z2 == 0 goto label09;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void updatePrefsFromAttribute(java.lang.String)>(r3);

        goto label11;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("state");

        if $z3 == 0 goto label11;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap attributeToState(java.lang.String)>(r3);

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $z4 = virtualinvoke $r6.<org.waveprotocol.wave.client.gadget.StateMap: boolean compare(org.waveprotocol.wave.client.gadget.StateMap)>($r5);

        if $z4 != 0 goto label11;

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String get(java.lang.String)>("podiumState");

        if $r7 == null goto label10;

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String get(java.lang.String)>("podiumState");

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z5 != 0 goto label10;

        $r10 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendPodiumOnStateChangedRpc(java.lang.String,java.lang.String)>($r10, $r7);

     label10:
        $r18 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        virtualinvoke $r18.<org.waveprotocol.wave.client.gadget.StateMap: void clear()>();

        $r19 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        virtualinvoke $r19.<org.waveprotocol.wave.client.gadget.StateMap: void copyFrom(org.waveprotocol.wave.client.gadget.StateMap)>($r5);

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = "Updating gadget state: ";

        $r21 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r22 = virtualinvoke $r21.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r20[1] = $r22;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r20);

        $r23 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter>;

        virtualinvoke $r23.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label11:
        return;
    }

    private static void loadGadgetRpcScript()
    {
        com.google.gwt.dom.client.ScriptElement $r1;
        com.google.gwt.dom.client.Document $r0, $r2;
        com.google.gwt.dom.client.BodyElement $r3;
        com.google.gwt.dom.client.Node $r4;

        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.ScriptElement createScriptElement()>();

        virtualinvoke $r1.<com.google.gwt.dom.client.ScriptElement: void setType(java.lang.String)>("text/javascript");

        virtualinvoke $r1.<com.google.gwt.dom.client.ScriptElement: void setSrc(java.lang.String)>("/gadgets/js/core:rpc.js");

        $r2 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.BodyElement getBody()>();

        $r4 = (com.google.gwt.dom.client.Node) $r1;

        virtualinvoke $r3.<com.google.gwt.dom.client.BodyElement: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r4);

        return;
    }

    private java.lang.String updateGadgetUriFragment(java.lang.String)
    {
        int $i1;
        java.lang.String $r3, $r7, $r8, $r9, $r13, $r14, r16, $r17, r18;
        boolean $z0, $z1;
        char $c0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r11, $r12, $r15, $r19, $r20;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r16 := @parameter0: java.lang.String;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rpctoken=");

        $r3 = r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String rpcToken>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $z0 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $c0 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 38 goto label2;

     label1:
        $r17 = "";

        goto label3;

     label2:
        $r17 = "&";

     label3:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r18 = $r7;

        $r8 = r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String securityToken>;

        if $r8 == null goto label4;

        $r9 = r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String securityToken>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&st=");

        $r13 = r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String securityToken>;

        $r14 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String encodeComponent(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return r18;
    }

    static java.lang.String cleanUrl(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r6, $r7, $r8, r9, r10, $r11, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r12;

        r0 := @parameter0: java.lang.String;

        r9 = r0;

        r10 = "";

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("#");

        if $i0 < 0 goto label2;

        $i1 = $i0 + 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(^|&)(rpctoken=|st=|up_)[^&]*", "");

        r10 = $r8;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        if $z0 == 0 goto label1;

        r10 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        $r11 = virtualinvoke r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&(mid=|st=|lang=|country=|debug=)[^&]*", "");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r13 = "";

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    java.lang.String buildIframeUrl(int, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$2 $r40;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveletName $r30;
        org.waveprotocol.wave.model.id.WaveId $r31;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r14, $r16, $r17, $r20, $r23, $r24, $r26, $r28, $r29, $r35, $r42, $r43, $r44;
        java.lang.Object[] $r46;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r38, $r41;
        int $i0, i1, $i2;
        java.lang.String $r4, $r8, $r13, $r15, $r19, $r21, $r22, $r25, $r27, $r33, $r34, $r36, $r37, $r39, $r45, r47, r48, $r49;
        org.waveprotocol.wave.client.gadget.renderer.Locale $r12, $r18;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r11;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r32;

        r11 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        i1 := @parameter0: int;

        r47 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        r48 = "";

        $i0 = virtualinvoke r47.<java.lang.String: int indexOf(java.lang.String)>("#");

        if $i0 < 0 goto label1;

        $i2 = $i0 + 1;

        r48 = virtualinvoke r47.<java.lang.String: java.lang.String substring(int)>($i2);

        r47 = virtualinvoke r47.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&nocache=");

        if 0 == 0 goto label2;

        $r49 = "0";

        goto label3;

     label2:
        $r49 = "1";

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&mid=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lang=");

        $r12 = r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Locale locale>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.client.gadget.renderer.Locale: java.lang.String getLanguage()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&country=");

        $r18 = r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Locale locale>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.client.gadget.renderer.Locale: java.lang.String getCountry()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = specialinvoke r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getUrlPrefix()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&parent=");

        $r25 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String encode(java.lang.String)>($r22);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&wave=1");

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&waveId=");

        $r32 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r30 = r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $r31 = $r30.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r33 = virtualinvoke $r32.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>($r31);

        $r34 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String encodeQueryString(java.lang.String)>($r33);

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r37 = specialinvoke r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String updateGadgetUriFragment(java.lang.String)>(r48);

        $z0 = virtualinvoke $r37.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r46 = newarray (java.lang.Object)[2];

        $r46[0] = "Appended fragment: ";

        $r46[1] = $r37;

        specialinvoke r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r46);

     label4:
        $r38 = r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        if $r38 == null goto label5;

        $r41 = r11.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        $r40 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$2;

        specialinvoke $r40.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$2: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.StringBuilder)>(r11, $r0);

        virtualinvoke $r41.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r40);

     label5:
        $r39 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r39;
    }

    private boolean hasAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r3;
        java.lang.String r1, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean hasAttribute(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>(r1);

        $r5 = "";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void scheduleGadgetAttributeUpdate(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$3 $r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        java.lang.String r2, r3;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$3;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$3: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.String,java.lang.String)>(r1, r2, r3);

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r0);

        return;
    }

    private void updateGadgetIframe(java.lang.String, long, long)
    {
        java.lang.Object[] $r12;
        long l0, l2;
        byte $b1, $b3;
        int $i4;
        java.lang.String r1, $r3, $r8, $r10, $r11;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r2, $r5, $r9, $r13;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String iframeUrl> = r1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean hasAttribute(java.lang.String)>("width");

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setSavedIframeWidth()>();

        goto label3;

     label2:
        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label3;

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("px");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeWidth(java.lang.String)>($r8);

        $r9 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r9.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void makeInline()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("width", $r10);

     label3:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean hasAttribute(java.lang.String)>("height");

        if $z2 != 0 goto label4;

        $b3 = l2 cmp 0L;

        if $b3 == 0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeHeight(long)>(l2);

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("height", $r3);

     label4:
        $i4 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int getInstanceId()>();

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String buildIframeUrl(int,java.lang.String)>($i4, r1);

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "ifr: ";

        $r12[1] = $r11;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r12);

        $r13 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r13.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeSource(java.lang.String)>($r11);

        return;
    }

    private int parseSizeString(java.lang.String) throws java.lang.NumberFormatException
    {
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("px");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i3;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        return $i0;
    }

    private void setSavedIframeHeight()
    {
        java.lang.Object[] $r5;
        long $l1;
        java.lang.NumberFormatException $r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean hasAttribute(java.lang.String)>("height");

        if $z0 == 0 goto label4;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("height");

     label1:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int parseSizeString(java.lang.String)>($r2);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $l1 = (long) $i0;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeHeight(long)>($l1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "Invalid saved height attribute (ignored): ";

        $r5[1] = $r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r5);

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void setSavedIframeWidth()
    {
        java.lang.Object[] $r10;
        java.lang.NumberFormatException $r9;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r4, $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r2, $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean hasAttribute(java.lang.String)>("width");

        if $z0 == 0 goto label4;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("width");

     label1:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int parseSizeString(java.lang.String)>($r2);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("px");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeWidth(java.lang.String)>($r7);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void makeInline()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "Invalid saved width attribute (ignored): ";

        $r10[1] = $r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r10);

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static org.waveprotocol.wave.client.gadget.renderer.GadgetWidget createGadgetWidget(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.conversation.ConversationBlip, org.waveprotocol.wave.model.supplement.ObservableSupplementedWave, org.waveprotocol.wave.client.account.ProfileManager, org.waveprotocol.wave.client.gadget.renderer.Locale, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip r11;
        org.waveprotocol.wave.client.gadget.renderer.EditingIndicator $r9;
        org.waveprotocol.wave.client.gadget.StateMap $r10;
        org.waveprotocol.wave.client.editor.content.ContentElement r2, $r6;
        java.lang.String $r8, r17;
        org.waveprotocol.wave.model.id.WaveletName r13;
        org.waveprotocol.wave.client.editor.content.ContentView $r4;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave r14;
        org.waveprotocol.wave.client.gadget.renderer.Locale r16;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$BlipEditingIndicator $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r7, $r12;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        java.lang.Object $r0, $r5;
        org.waveprotocol.wave.client.account.ProfileManager r15;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r13 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r11 := @parameter2: org.waveprotocol.wave.model.conversation.ConversationBlip;

        r14 := @parameter3: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave;

        r15 := @parameter4: org.waveprotocol.wave.client.account.ProfileManager;

        r16 := @parameter5: org.waveprotocol.wave.client.gadget.renderer.Locale;

        r17 := @parameter6: java.lang.String;

        $r0 = staticinvoke <com.google.gwt.core.client.GWT: java.lang.Object create(java.lang.Class)>(class "Lorg/waveprotocol/wave/client/gadget/renderer/GadgetWidget;");

        r1 = (org.waveprotocol.wave.client.gadget.renderer.GadgetWidget) $r0;

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element> = r2;

        $r3 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$BlipEditingIndicator;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r5;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$BlipEditingIndicator: void <init>(org.waveprotocol.wave.client.editor.content.ContentElement)>($r6);

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator> = $r3;

        $r7 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi;

        $r8 = specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r9 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator>;

        specialinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void <init>(java.lang.String,org.waveprotocol.wave.client.gadget.renderer.EditingIndicator)>($r8, $r9);

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui> = $r7;

        $r10 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state> = $r10;

        staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void initializeGadgets()>();

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip> = r11;

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void initializeGadgetContainer()>();

        $r12 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r12.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setGadgetUiListener(org.waveprotocol.wave.client.gadget.renderer.GadgetUiListener)>(r1);

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName> = r13;

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement> = r14;

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.account.ProfileManager profileManager> = r15;

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Locale locale> = r16;

        r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String loginName> = r17;

        interfaceinvoke r14.<org.waveprotocol.wave.model.supplement.ObservableSupplementedWave: void addListener(java.lang.Object)>(r1);

        return r1;
    }

    public org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi getWidget()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        return $r1;
    }

    public void setTitle(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r3, $r13;
        org.waveprotocol.wave.client.editor.content.ContentNode $r15;
        java.lang.Object[] $r2;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r8, $r16;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r10;
        org.waveprotocol.wave.client.editor.content.ContentElement $r9, $r11;
        java.lang.String r1, $r6, $r17;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r4, $r5, $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r12;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object $r14;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r17 = "";

        goto label3;

     label2:
        $r17 = r1;

     label3:
        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = "Set title \'";

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>($r17);

        $r2[1] = $r3;

        $r2[2] = "\'";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild titleElement>;

        if $r4 != null goto label4;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r9 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r11 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r11);

        $r13 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructTitleXml(java.lang.String)>($r17);

        $r14 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r12, $r13);

        $r15 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r14;

        staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild create(org.waveprotocol.wave.client.editor.content.ContentNode)>($r15);

        $r16 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        virtualinvoke $r16.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

        goto label5;

     label4:
        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild titleElement>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label5;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild titleElement>;

        virtualinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: void setValue(java.lang.String)>($r17);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label5:
        return;
    }

    public void logMessage(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void developerLog(java.lang.String)>(r0);

        return;
    }

    private java.lang.String sanitizeSnippet(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        java.lang.String r0, $r1;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[<>\\\"\\\'\\&]", " ");

        return $r1;
    }

    public void setSnippet(java.lang.String)
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r1, $r2, $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String sanitizeSnippet(java.lang.String)>(r1);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Snippet changed: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r7;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("snippet", $r2);

        return;
    }

    private java.lang.String getAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r3;
        java.lang.String r1, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean hasAttribute(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>(r1);

        goto label2;

     label1:
        $r4 = "";

     label2:
        return $r4;
    }

    static java.lang.String getIframeHost(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^\\/\\/(https?:\\/\\/)?[^\\/]+\\/", "");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == $i1 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        return $r2;

     label1:
        return "";
    }

    private void controllerRegistration(java.lang.String, long, long)
    {
        java.lang.Object[] $r12;
        long l0, l1;
        org.waveprotocol.wave.client.gadget.renderer.Controller $r0;
        java.lang.String r1, $r2, $r6, $r8, $r9, $r10, $r11, $r13, $r14;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r7 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.Controller: org.waveprotocol.wave.client.gadget.renderer.Controller getInstance()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getIframeHost(java.lang.String)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gadgets/files/container/rpc_relay.html");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void setRelayUrl(java.lang.String,java.lang.String)>($r8, $r6);

        $r9 = specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void registerGadgetListener(java.lang.String,org.waveprotocol.wave.client.gadget.renderer.GadgetRpcListener)>($r9, r7);

        $r10 = specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r11 = r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String rpcToken>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.Controller: void setRpcToken(java.lang.String,java.lang.String)>($r10, $r11);

        specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void updateGadgetIframe(java.lang.String,long,long)>(r1, l0, l1);

        specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void removeFrameBorder()>();

        specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void delayedPodiumInitialization()>();

        $r12 = newarray (java.lang.Object)[6];

        $r12[0] = "Gadget ";

        $r13 = specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r12[1] = $r13;

        $r12[2] = " is registered, relayUrl=";

        $r12[3] = $r6;

        $r12[4] = ", RPC token=";

        $r14 = r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String rpcToken>;

        $r12[5] = $r14;

        specialinvoke r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r12);

        return;
    }

    private void registerWithController(java.lang.String, long, long)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        long l0, l1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean gadgetLibraryLoaded()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void controllerRegistration(java.lang.String,long,long)>(r1, l0, l1);

        goto label2;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleControllerRegistration(java.lang.String,long,long)>(r1, l0, l1);

     label2:
        return;
    }

    private void scheduleControllerRegistration(java.lang.String, long, long)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$4 $r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        long l0, l1;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$4;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$4: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.String,long,long)>(r1, r2, l0, l1);

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$4: void scheduleRepeating(int)>(250);

        return;
    }

    private void initializeGadgetContainer()
    {
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r2, $r4, $r6;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$5 $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$7 $r7;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$6 $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs create()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs> = $r1;

        $r2 = new org.waveprotocol.wave.client.gadget.renderer.Submitter;

        $r3 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$5;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$5: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        specialinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void <init>(int,org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask)>(30, $r3);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter> = $r2;

        $r4 = new org.waveprotocol.wave.client.gadget.renderer.Submitter;

        $r5 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$6;

        specialinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$6: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        specialinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void <init>(int,org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask)>(30, $r5);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter> = $r4;

        $r6 = new org.waveprotocol.wave.client.gadget.renderer.Submitter;

        $r7 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$7;

        specialinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$7: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        specialinvoke $r6.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void <init>(int,org.waveprotocol.wave.client.gadget.renderer.Submitter$SubmitTask)>(30, $r7);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter> = $r6;

        return;
    }

    private void initializePodium()
    {
        java.lang.Object[] $r5, $r13, $r23, $r25;
        org.waveprotocol.wave.model.wave.ParticipantId r7;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r1;
        org.waveprotocol.wave.model.conversation.Conversation $r2;
        org.waveprotocol.wave.client.gadget.StateMap $r20;
        java.lang.String $r9, $r10, $r11, $r12, $r19, $r21, $r22;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Exception $r24;
        org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.Conversation: java.util.Set getParticipantIds()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.wave.ParticipantId) $r6;

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation: java.lang.String getMyId()>();

        if $r9 == null goto label7;

        $r10 = virtualinvoke r7.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label7;

        $r11 = virtualinvoke r7.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

     label3:
        $r12 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendPodiumOnInitializedRpc(java.lang.String,java.lang.String,java.lang.String)>($r12, $r9, $r11);

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sent Podium initialization: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r19;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r13);

        $r20 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r21 = virtualinvoke $r20.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String get(java.lang.String)>("podiumState");

        if $r21 == null goto label4;

        $r22 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendPodiumOnStateChangedRpc(java.lang.String,java.lang.String)>($r22, $r21);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "Sent Podium state update.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r23);

     label4:
        goto label6;

     label5:
        $r24 := @caughtexception;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "Podium initialization failure";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r25);

     label6:
        return;

     label7:
        goto label2;

     label8:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "Podium is not initialized: less than two participants.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r5);

        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void delayedPodiumInitialization()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$8 $r0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$8;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$8: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$8: void schedule(int)>(3000);

        return;
    }

    private void removeFrameBorder()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$9 $r0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$9;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$9: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$9: void schedule(int)>(3000);

        return;
    }

    private void constructGadgetFromMetadata(org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r1, $r11;
        org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata r2;
        java.lang.String r3, $r4, $r5, $r6, $r7, r8, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r9, $r13;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata;

        r3 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Received metadata: ";

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: java.lang.String getIframeUrl(java.lang.String)>(r3);

        $r1[1] = $r4;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: java.lang.String getIframeUrl(java.lang.String)>(r3);

        $r6 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String cleanUrl(java.lang.String)>($r5);

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String iframeUrl>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        if r8 == null goto label1;

        $z4 = virtualinvoke r8.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label2;

     label1:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "Received metadata matches the cached information.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r11);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void constructGadgetSizeFromMetadata(org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata,java.lang.String,java.lang.String)>(r2, r3, $r6);

        return;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z1 == 0 goto label3;

        $z3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean documentModified>;

        if $z3 == 0 goto label3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("ifr", $r6);

        goto label4;

     label3:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean toUpdateIframeUrl> = 1;

     label4:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String securityToken> = r8;

        $r12 = "";

        $r13 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: java.lang.String getTitleLabelText()>();

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z5 == 0 goto label5;

        $z2 = virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: boolean hasTitle()>();

        if $z2 == 0 goto label5;

        $r9 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r10 = virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: java.lang.String getTitle()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setTitleLabelText(java.lang.String)>($r10);

     label5:
        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void constructGadgetSizeFromMetadata(org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata,java.lang.String,java.lang.String)>(r2, r3, $r6);

        return;
    }

    private void constructGadgetSizeFromMetadata(org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata r0;
        long $l0, $l1, $l4, $l5;
        int $i2, $i3;
        java.lang.String r1, r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: boolean hasHeight()>();

        if $z0 == 0 goto label1;

        $l4 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: long getHeight()>();

        goto label2;

     label1:
        $l4 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: long getPreferredHeight(java.lang.String)>(r1);

     label2:
        $i3 = (int) $l4;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: boolean hasWidth()>();

        if $z1 == 0 goto label3;

        $l5 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: long getWidth()>();

        goto label4;

     label3:
        $l5 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata: long getPreferredWidth(java.lang.String)>(r1);

     label4:
        $i2 = (int) $l5;

        $l1 = (long) $i2;

        $l0 = (long) $i3;

        specialinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void registerWithController(java.lang.String,long,long)>(r3, $l1, $l0);

        if $i3 <= 0 goto label5;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setIframeHeight(java.lang.String)>($r7);

        goto label6;

     label5:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(100);

        virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setIframeHeight(java.lang.String)>($r4);

     label6:
        if $i2 <= 0 goto label7;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setIframeWidth(java.lang.String)>($r6);

        goto label8;

     label7:
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(600);

        virtualinvoke r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setIframeWidth(java.lang.String)>($r5);

     label8:
        return;
    }

    private int getInstanceId()
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r2;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r5, $r7, $r9, $r11;
        java.lang.String $r3, $r6, $r8, $r10;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r2 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveletName(org.waveprotocol.wave.model.id.WaveletName)>($r1);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String loginName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int hashCode()>();

        if $i0 >= 0 goto label1;

        $i3 = (int) -1;

        $i1 = $i0 ^ $i3;

        goto label2;

     label1:
        $i1 = $i0;

     label2:
        return $i1;
    }

    private void showBrokenGadget(java.lang.String)
    {
        java.lang.Object[] $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void showBrokenGadget(java.lang.String)>(r1);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "Broken gadget: ";

        $r3[1] = r1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

        return;
    }

    private boolean validIframeUrl(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r2;
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getIframeHost(java.lang.String)>(r0);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void scheduleGadgetIdUpdate()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$10 $r0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$10;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$10: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r1);

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r0);

        return;
    }

    private void allowModificationOfNewlyCreatedGadget()
    {
        org.waveprotocol.wave.client.gadget.renderer.EditingIndicator $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean hasAttribute(java.lang.String)>("height");

        if $z0 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator>;

        $z1 = interfaceinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.EditingIndicator: boolean isEditing()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetIdUpdate()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

     label1:
        return;
    }

    public void createWidget()
    {
        java.lang.Object[] $r1, $r12, $r21;
        org.waveprotocol.wave.client.gadget.renderer.GadgetDataStore $r15;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r20;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$11 $r18;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r8, $r11;
        org.waveprotocol.wave.model.conversation.Conversation $r9;
        int $i0;
        java.lang.String $r2, $r4, $r5, $r7, $r13, $r14, $r16, $r19, $r22;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r17;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter $r10;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r3, $r6;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "Repeated attempt to create gadget widget.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r21);

        return;

     label1:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean active> = 1;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Creating Gadget Widget ";

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r1[1] = $r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void enableMenu()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void allowModificationOfNewlyCreatedGadget()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setSavedIframeHeight()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setSavedIframeWidth()>();

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAttribute(java.lang.String)>("url");

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source> = $r4;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAttribute(java.lang.String)>("title");

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        if $r5 != null goto label2;

        $r22 = "";

        goto label3;

     label2:
        $r22 = staticinvoke <com.google.gwt.http.client.URL: java.lang.String decodeComponent(java.lang.String)>($r5);

     label3:
        virtualinvoke $r6.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setTitleLabelText(java.lang.String)>($r22);

        $r7 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAttribute(java.lang.String)>("prefs");

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void updatePrefsFromAttribute(java.lang.String)>($r7);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void refreshParticipantInformation()>();

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r20 = (org.waveprotocol.wave.model.conversation.ObservableConversation) $r9;

        $r10 = new org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        $r11 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        specialinvoke $r10.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: void <init>(org.waveprotocol.wave.model.conversation.ConversationBlip,org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener)>($r11, r0);

        interfaceinvoke $r20.<org.waveprotocol.wave.model.conversation.ObservableConversation: void addListener(java.lang.Object)>($r10);

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "Requesting Gadget metadata: ";

        $r13 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source>;

        $r12[1] = $r13;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r12);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAttribute(java.lang.String)>("ifr");

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean validIframeUrl(java.lang.String)>($r14);

        if $z1 == 0 goto label4;

        $r19 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String cleanUrl(java.lang.String)>($r14);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void registerWithController(java.lang.String,long,long)>($r19, 0L, 0L);

     label4:
        $r15 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetDataStoreImpl: org.waveprotocol.wave.client.gadget.renderer.GadgetDataStore getInstance()>();

        $r16 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source>;

        $r17 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int getInstanceId()>();

        $r18 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$11;

        specialinvoke $r18.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$11: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        interfaceinvoke $r15.<org.waveprotocol.wave.client.gadget.renderer.GadgetDataStore: void getGadgetData(java.lang.String,org.waveprotocol.wave.model.id.WaveletName,int,org.waveprotocol.wave.client.gadget.renderer.GadgetDataStore$DataCallback)>($r16, $r17, $i0, $r18);

        return;
    }

    public native void sendGadgetPrefRpc(java.lang.String, java.lang.String, java.lang.String);

    public native void sendPodiumOnInitializedRpc(java.lang.String, java.lang.String, java.lang.String);

    public native void sendPodiumOnStateChangedRpc(java.lang.String, java.lang.String);

    public native void sendEmbeddedRpc(java.lang.String);

    public native void sendParticipantsRpc(java.lang.String, com.google.gwt.core.client.JavaScriptObject);

    public native void sendGadgetStateRpc(java.lang.String, com.google.gwt.core.client.JavaScriptObject);

    public native void sendPrivateGadgetStateRpc(java.lang.String, com.google.gwt.core.client.JavaScriptObject);

    public native void sendModeRpc(java.lang.String, com.google.gwt.core.client.JavaScriptObject);

    public void sendGadgetState()
    {
        java.lang.Object[] $r1;
        com.google.gwt.core.client.JavaScriptObject $r6;
        org.waveprotocol.wave.client.gadget.StateMap $r2, $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled>;

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Sending gadget state: ";

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r1[1] = $r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.StateMap: com.google.gwt.core.client.JavaScriptObject asJavaScriptObject()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendGadgetStateRpc(java.lang.String,com.google.gwt.core.client.JavaScriptObject)>($r4, $r6);

     label1:
        return;
    }

    public void sendPrivateGadgetState()
    {
        java.lang.Object[] $r3;
        com.google.gwt.core.client.JavaScriptObject $r6;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave $r7;
        org.waveprotocol.wave.client.gadget.StateMap $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1, $r4, $r5;
        org.waveprotocol.wave.model.util.ReadableStringMap $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled>;

        if $z0 == 0 goto label3;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetId()>();

        if $r1 == null goto label1;

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.supplement.ObservableSupplementedWave: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>($r1);

        goto label2;

     label1:
        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap emptyMap()>();

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap createFromStringMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r8);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "Sending private gadget state: ";

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r3[1] = $r4;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r6 = virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap: com.google.gwt.core.client.JavaScriptObject asJavaScriptObject()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendPrivateGadgetStateRpc(java.lang.String,com.google.gwt.core.client.JavaScriptObject)>($r5, $r6);

     label3:
        return;
    }

    public void sendMode()
    {
        java.lang.Object[] $r3;
        com.google.gwt.core.client.JavaScriptObject $r6;
        org.waveprotocol.wave.client.gadget.renderer.EditingIndicator $r2;
        org.waveprotocol.wave.client.gadget.StateMap $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r4, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled>;

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: void put(java.lang.String,java.lang.String)>("${playback}", "0");

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator>;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.EditingIndicator: boolean isEditing()>();

        if $z1 == 0 goto label1;

        $r7 = "1";

        goto label2;

     label1:
        $r7 = "0";

     label2:
        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: void put(java.lang.String,java.lang.String)>("${edit}", $r7);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "Sending gadget mode: ";

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r3[1] = $r4;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

        $r5 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r6 = virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: com.google.gwt.core.client.JavaScriptObject asJavaScriptObject()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendModeRpc(java.lang.String,com.google.gwt.core.client.JavaScriptObject)>($r5, $r6);

     label3:
        return;
    }

    private java.lang.String getAuthor()
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.String $r2, $r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("author");

        if $r2 == null goto label1;

        $r5 = $r2;

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.wave.ParticipantId getAuthorId()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

     label2:
        return $r5;
    }

    private org.waveprotocol.wave.model.util.StringMap getParticipantsForIds(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2, $r4;
        java.util.Collection r1, r3;
        org.waveprotocol.wave.model.util.StringMap $r0;
        org.waveprotocol.wave.model.wave.ParticipantId r10, r11;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r9;
        java.lang.Object $r5, $r7;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;

        r9 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.wave.ParticipantId) $r7;

        $r8 = virtualinvoke r10.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r8, r10);

        goto label1;

     label2:
        $r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.model.wave.ParticipantId) $r5;

        $r6 = virtualinvoke r11.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r6, r11);

        goto label3;

     label4:
        return $r0;
    }

    private void refreshParticipantInformation()
    {
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.model.wave.ParticipantId $r7, r27;
        org.waveprotocol.wave.model.conversation.Conversation $r2;
        boolean $z0;
        java.util.Set $r3, $r5;
        java.util.List $r10;
        java.lang.StringBuilder $r16, $r17, $r18, $r21, $r28, $r29, $r30;
        org.waveprotocol.wave.client.account.ProfileManager $r14;
        java.lang.Object[] $r24;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r1, $r4;
        java.lang.String $r8, $r9, $r11, $r12, $r13, $r20, $r22, $r25, $r31;
        java.util.Iterator $r23;
        org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation $r15, $r19;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object $r26;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.Conversation getConversation()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.Conversation: java.util.Set getParticipantIds()>();

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.util.Set getContributorIds()>();

        $r6 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap getParticipantsForIds(java.util.Collection,java.util.Collection)>($r3, $r5);

        $r7 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String loginName>;

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r9, $r7);

        $r10 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.List newJavaList(org.waveprotocol.wave.model.util.ReadableStringMap)>($r6);

        $r11 = virtualinvoke $r7.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r12 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAuthor()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getUrlPrefix()>();

        $r14 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.account.ProfileManager profileManager>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation create(java.lang.String,java.lang.String,java.util.List,java.lang.String,org.waveprotocol.wave.client.account.ProfileManager)>($r11, $r12, $r10, $r13, $r14);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants> = $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Participants: ");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I am ");

        $r19 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants>;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation: java.lang.String getMyId()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r23 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r26 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.waveprotocol.wave.model.wave.ParticipantId) $r26;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        goto label1;

     label2:
        $r24 = newarray (java.lang.Object)[1];

        $r25 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[0] = $r25;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r24);

        return;
    }

    private void sendCurrentParticipantInformation()
    {
        org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation $r2, $r4;
        java.lang.Object[] $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void refreshParticipantInformation()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants>;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendParticipantsRpc(java.lang.String,com.google.gwt.core.client.JavaScriptObject)>($r1, $r2);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "Sent participants: ";

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.ParticipantInformation participants>;

        $r3[1] = $r4;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

     label1:
        return;
    }

    public void setGadgetPref(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$12 $r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        java.lang.String r2, r3;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$12;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$12: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.String,java.lang.String)>(r1, r2, r3);

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r0);

        return;
    }

    public void setInactive()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave $r2;
        java.lang.Object[] $r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Gadget node removed.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.ObservableSupplementedWave: void removeListener(java.lang.Object)>(r0);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean active> = 0;

        return;
    }

    public void setIframeHeight(java.lang.String)
    {
        java.lang.Object[] $r1, $r6;
        long $l1, $l2;
        java.lang.NumberFormatException $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0;
        java.lang.String r2, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Set IFrame height ";

        $r1[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int parseSizeString(java.lang.String)>(r2);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $l1 = (long) $i0;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeHeight(long)>($l1);

        $l2 = (long) $i0;

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("height", $r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "Invalid height (ignored): ";

        $r6[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r6);

     label5:
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public void setIframeWidth(java.lang.String)
    {
        java.lang.Object[] $r1, $r11;
        long $l1;
        java.lang.NumberFormatException $r10;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r4, $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String r2, $r7, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Set IFrame width ";

        $r1[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        $i0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int parseSizeString(java.lang.String)>(r2);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("px");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeWidth(java.lang.String)>($r7);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void makeInline()>();

        $l1 = (long) $i0;

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("width", $r9);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "Invalid width (ignored): ";

        $r11[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r11);

     label5:
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public void requestNavigateTo(java.lang.String)
    {
        java.lang.Object[] $r1, $r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.StringBuilder $r5, $r8, $r9, $r10;
        java.lang.String r2, $r3, $r6, $r7, $r11;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Requested navigate to: ";

        $r1[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("[^#]*#", "");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean matches(java.lang.String)>("([\\w~!&@\\$\\-\\.\\\'\\(\\)\\*\\+\\,\\;\\=\\?\\:]|%[0-9a-fA-F]{2})+");

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = staticinvoke <com.google.gwt.user.client.Window$Location: java.lang.String getHref()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("#.*", "");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.gwt.user.client.Window$Location: void replace(java.lang.String)>($r11);

        goto label2;

     label1:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "Navigate request denied.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r4);

     label2:
        return;
    }

    public void updatePodiumState(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void modifyState(java.lang.String,java.lang.String)>("podiumState", r1);

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label1:
        return;
    }

    private void setPref(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r10;
        java.lang.Object[] $r5, $r16;
        org.waveprotocol.wave.model.util.StringMap $r4, $r12, $r17;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r7;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r11, $r20;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6, $r8;
        java.lang.String r1, r2, $r15;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r14, $r19;
        org.waveprotocol.wave.model.document.util.Point$El $r9;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object $r13, $r18;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs: void put(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements>;

        $z1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

        $r12 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r14 = (org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild) $r13;

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label4;

        $r16 = newarray (java.lang.Object)[5];

        $r16[0] = "Updating preference \'";

        $r16[1] = r1;

        $r16[2] = "\'=\'";

        $r16[3] = r2;

        $r16[4] = "\'";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r16);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r17 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r19 = (org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild) $r18;

        virtualinvoke $r19.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: void setValue(java.lang.String)>(r2);

        $r20 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        virtualinvoke $r20.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

        goto label4;

     label3:
        $r5 = newarray (java.lang.Object)[5];

        $r5[0] = "New preference \'";

        $r5[1] = r1;

        $r5[2] = "\'=\'";

        $r5[3] = r2;

        $r5[4] = "\'";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r5);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r8);

        $r10 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructPrefXml(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r9, $r10);

        $r11 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        virtualinvoke $r11.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label4:
        return;
    }

    public transient void setPrefs(java.lang.String[])
    {
        java.lang.String[] r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String[];

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i3 = 0;

     label2:
        $i0 = lengthof r1;

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label3;

        $r3 = r1[i3];

        $i2 = i3 + 1;

        $r2 = r1[$i2];

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setPref(java.lang.String,java.lang.String)>($r3, $r2);

        i3 = i3 + 2;

        goto label2;

     label3:
        return;
    }

    private void setupModePolling()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$13 $r0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$13;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$13: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r1);

        virtualinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$13: void scheduleRepeating(int)>(200);

        return;
    }

    private void substituteIframeId()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        int $i0, $i1;
        java.lang.String $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $i0 = <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int nextClientInstanceId>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int nextClientInstanceId> = $i1;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int clientInstanceId> = $i0;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setIframeId(java.lang.String)>($r2);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String iframeUrl>;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void controllerRegistration(java.lang.String,long,long)>($r3, 0L, 0L);

        return;
    }

    public void waveEnable(java.lang.String)
    {
        java.lang.Object[] $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void substituteIframeId()>();

     label2:
        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean waveEnabled> = 1;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String waveApiVersion> = r1;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Wave-enabled gadget registered with API version ";

        $r2[1] = r1;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendWaveGadgetInitialization()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void setupModePolling()>();

        return;
    }

    public void waveGadgetStateUpdate(com.google.gwt.core.client.JavaScriptObject)
    {
        org.waveprotocol.wave.client.gadget.StateMap $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$14 $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        com.google.gwt.core.client.JavaScriptObject r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: com.google.gwt.core.client.JavaScriptObject;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: void fromJsonObject(com.google.gwt.core.client.JavaScriptObject)>(r2);

        $r3 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$14;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$14: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,org.waveprotocol.wave.client.gadget.StateMap,com.google.gwt.core.client.JavaScriptObject)>(r0, $r1, r2);

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r3);

        return;
    }

    private java.lang.String generateGadgetId()
    {
        java.util.Date $r12;
        long $l2;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r14;
        int $i0, $i1;
        java.lang.String $r3, $r6, $r8, $r10, $r11, $r13, $r15, $r20;
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r16, $r17, $r18, $r19;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r2 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveletName(org.waveprotocol.wave.model.id.WaveletName)>($r1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getAuthor()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String source>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int hashCode()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r12 = new java.util.Date;

        specialinvoke $r12.<java.util.Date: void <init>()>();

        $i1 = virtualinvoke $r12.<java.util.Date: int hashCode()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r14 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.conversation.ConversationBlip blip>;

        $l2 = interfaceinvoke $r14.<org.waveprotocol.wave.model.conversation.ConversationBlip: long getLastModifiedVersion()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;
    }

    private java.lang.String generateAndSetGadgetId()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r4;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String generateGadgetId()>();

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void setElementAttribute(java.lang.Object,java.lang.String,java.lang.String)>($r4, "id", $r1);

        return $r1;
    }

    private java.lang.String getGadgetId()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("id");

        return $r2;
    }

    private java.lang.String getOrGenerateGadgetId()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetId()>();

        r2 = $r1;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        r2 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String generateAndSetGadgetId()>();

     label2:
        return r2;
    }

    public void wavePrivateGadgetStateUpdate(com.google.gwt.core.client.JavaScriptObject)
    {
        java.lang.Object[] $r4, $r7;
        com.google.gwt.core.client.JavaScriptObject r2;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r9;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$15 $r6;
        org.waveprotocol.wave.client.gadget.StateMap $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r3, $r5, $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: com.google.gwt.core.client.JavaScriptObject;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.StateMap: org.waveprotocol.wave.client.gadget.StateMap create()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: void fromJsonObject(com.google.gwt.core.client.JavaScriptObject)>(r2);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getOrGenerateGadgetId()>();

        if $r3 == null goto label2;

        $r6 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$15;

        specialinvoke $r6.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$15: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.String)>(r0, $r3);

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r6);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "Applied private delta ";

        $r8 = virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r7[1] = $r8;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r7);

        $r9 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter>;

        virtualinvoke $r9.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void triggerScheduledSubmit()>();

        goto label3;

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "Unable to get gadget ID to update private state. Delta ";

        $r5 = virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.StateMap: java.lang.String toJson()>();

        $r4[1] = $r5;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r4);

     label3:
        return;
    }

    private void modifyState(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r9;
        java.lang.Object[] $r1, $r17;
        org.waveprotocol.wave.model.util.StringMap $r4, $r10, $r14;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5, $r7;
        java.lang.String r2, r3, $r13;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r12, $r16;
        org.waveprotocol.wave.model.document.util.Point$El $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object $r11, $r15;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = "Unable to modify state ";

        $r17[1] = r2;

        $r17[2] = " ";

        $r17[3] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r17);

        goto label3;

     label1:
        $r1 = newarray (java.lang.Object)[4];

        $r1[0] = "Modifying state ";

        $r1[1] = r2;

        $r1[2] = " ";

        $r1[3] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $z1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r10 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        $r12 = (org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild) $r11;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 != 0 goto label3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r14 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        $r16 = (org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild) $r15;

        virtualinvoke $r16.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: void setValue(java.lang.String)>(r3);

        goto label3;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r7);

        $r9 = staticinvoke <org.waveprotocol.wave.model.gadget.GadgetXmlUtil: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructStateXml(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.CMutableDocument: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r8, $r9);

     label3:
        return;
    }

    private void deleteState(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r8;
        java.lang.Object[] $r1, $r10;
        org.waveprotocol.wave.model.util.StringMap $r3, $r6;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4, $r9;
        java.lang.Object $r7;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 != 0 goto label1;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "Unable to remove state ";

        $r10[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r10);

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = "Removing state ";

        $r1[1] = r2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void onModifyingDocument()>();

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r6 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        $r8 = (org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild) $r7;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: org.waveprotocol.wave.client.editor.content.ContentElement getElement()>();

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void deleteNode(java.lang.Object)>($r9);

     label2:
        return;
    }

    private void sendWaveGadgetInitialization()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$16 $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r1, $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendMode()>();

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitImmediately()>();

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitImmediately()>();

        $r3 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$16;

        specialinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$16: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$16: void schedule(int)>(5000);

        return;
    }

    private void updateElementMaps(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.client.gadget.StateMap)
    {
        java.lang.Object[] $r9, $r12, $r15;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.client.gadget.StateMap r5;
        java.lang.String $r1, $r3, $r4, $r6, $r7, $r10, $r11, $r13;
        boolean $z0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r8;
        java.lang.Object $r14;

        r8 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        r5 := @parameter2: org.waveprotocol.wave.client.gadget.StateMap;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        if $r1 != null goto label1;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = "Missing key attribute: element ignored.";

        specialinvoke r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r15);

        return;

     label1:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        $z0 = interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "Old value: ";

        $r13 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        $r14 = interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r13);

        $r12[1] = $r14;

        specialinvoke r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r12);

     label2:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r4, r0);

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        virtualinvoke r5.<org.waveprotocol.wave.client.gadget.StateMap: void put(java.lang.String,java.lang.String)>($r6, $r7);

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = "Updated element ";

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        $r9[1] = $r10;

        $r9[2] = " : ";

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        $r9[3] = $r11;

        specialinvoke r8.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r9);

        return;
    }

    private void processTitleChild(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r3, $r5;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r2, $r4, r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild titleElement> = r1;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getValue()>();

        r6 = $r2;

        if $r2 != null goto label1;

        r6 = "";

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: java.lang.String getTitleLabelText()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        virtualinvoke $r5.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: void setTitleLabelText(java.lang.String)>(r6);

     label2:
        return;
    }

    private void removeChildFromMaps(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r0;
        java.lang.Object[] $r5;
        org.waveprotocol.wave.client.gadget.StateMap r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r4;
        java.lang.String $r1;
        org.waveprotocol.wave.model.util.StringMap r2;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        r3 := @parameter2: org.waveprotocol.wave.client.gadget.StateMap;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getKey()>();

        $z0 = interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r3.<org.waveprotocol.wave.client.gadget.StateMap: void remove(java.lang.String)>($r1);

        interfaceinvoke r2.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>($r1);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "Removed element ";

        $r5[1] = $r1;

        specialinvoke r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r5);

     label1:
        return;
    }

    private void processChild(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r0;
        java.lang.Object[] $r2, $r5, $r10;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild$Type $r4;
        org.waveprotocol.wave.model.util.StringMap $r7, $r9;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r6;
        int[] $r3;
        org.waveprotocol.wave.client.gadget.StateMap $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        int $i0, $i1;
        java.lang.String $r11;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Processing: ";

        $r2[1] = r0;

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r2);

        $r3 = <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$24: int[] $SwitchMap$org$waveprotocol$wave$client$gadget$renderer$GadgetElementChild$Type>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild$Type getType()>();

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild$Type: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        $r9 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        $r8 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void updateElementMaps(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.client.gadget.StateMap)>(r0, $r9, $r8);

        goto label7;

     label3:
        $r7 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements>;

        $r6 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void updateElementMaps(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.client.gadget.StateMap)>(r0, $r7, $r6);

        goto label7;

     label4:
        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void processTitleChild(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)>(r0);

        goto label7;

     label5:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "Categories element ignored.";

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r5);

        goto label7;

     label6:
        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "Unexpected gadget node ";

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: java.lang.String getTag()>();

        $r10[1] = $r11;

        specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void logFine(java.lang.Object[])>($r10);

     label7:
        return;
    }

    private static org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild findNextChildCopy(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r0, $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        if r0 != null goto label1;

        return null;

     label1:
        if r2 == null goto label3;

        $r1 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild create(org.waveprotocol.wave.client.editor.content.ContentNode)>(r2);

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: boolean isDuplicate(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)>($r1);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        r2 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label1;

     label3:
        return null;
    }

    private void removeRedundantNodes(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1, $r2;
        java.lang.Object[] $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean documentModified>;

        if $z0 == 0 goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild>;

        if $r2 != null goto label3;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild> = r1;

        $r4 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.scheduler.Scheduler$Task removeRedundantNodesTask>;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r4);

        goto label4;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Overlapping redundant node check requests.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r3);

     label4:
        return;
    }

    public void onChildAdded(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childAddedTask>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: void run(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

        return;
    }

    public void onRemovingChild(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask childRemovedTask>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask: void run(org.waveprotocol.wave.client.editor.content.ContentNode)>(r1);

        return;
    }

    private void rescanGadgetXmlElements()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r3;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Rescanning elements";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        r4 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label1:
        if r4 == null goto label2;

        $r3 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild create(org.waveprotocol.wave.client.editor.content.ContentNode)>(r4);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void processChild(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)>($r3);

        r4 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label1;

     label2:
        return;
    }

    public void onDescendantsMutated()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r2;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Descendants mutated.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.scheduler.Scheduler$Task schedulableMutationTask>;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r2);

        return;
    }

    public void onBlipContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Object[] $r1, $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Contributor added ";

        $r2[1] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Contributor added event in deleted node.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        return;
    }

    public void onBlipContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Object[] $r1, $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Contributor removed ";

        $r2[1] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Contributor removed event in deleted node.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        return;
    }

    public void onParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Object[] $r1, $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Participant added ";

        $r2[1] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Participant added event in deleted node.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        return;
    }

    public void onParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Object[] $r1, $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Participant removed ";

        $r2[1] = r3;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r2);

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Participant removed event in deleted node.";

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>($r1);

     label2:
        return;
    }

    private transient java.lang.Object[] expandArgs(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r3;
        java.lang.Object r2;

        r3 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = $i0 + 1;

        r1 = newarray (java.lang.Object)[$i1];

        r1[0] = r2;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 1, $i2);

        return r1;
    }

    private transient void log(java.lang.Object[])
    {
        java.lang.Object[] r1, $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.Object[];

        $z0 = staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: boolean shouldLog()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String clientInstanceLogLabel>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.Object[] expandArgs(java.lang.Object,java.lang.Object[])>($r2, r1);

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void logLazy(java.lang.Object[])>($r3);

     label1:
        return;
    }

    private transient void logFine(java.lang.Object[])
    {
        java.lang.Object[] r1, $r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter0: java.lang.Object[];

        $z0 = staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: boolean shouldLogFine()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String clientInstanceLogLabel>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.Object[] expandArgs(java.lang.Object,java.lang.Object[])>($r2, r1);

        staticinvoke <org.waveprotocol.wave.client.gadget.GadgetLog: void logFineLazy(java.lang.Object[])>($r3);

     label1:
        return;
    }

    private java.lang.String getUrlPrefix()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r7;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.String $r1, $r4, $r6;

        r7 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <com.google.gwt.user.client.Window$Location: java.lang.String getProtocol()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        $r4 = staticinvoke <com.google.gwt.user.client.Window$Location: java.lang.String getHost()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    com.google.gwt.user.client.Element getElement()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        com.google.gwt.user.client.Element $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi: com.google.gwt.user.client.Element getElement()>();

        return $r2;
    }

    private boolean isActive()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean active>;

        return $z0;
    }

    private boolean canModifyDocument()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        return $z0;
    }

    public void deleteGadget()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r3;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void deleteNode(java.lang.Object)>($r3);

     label1:
        return;
    }

    public void selectGadget()
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2;
        org.waveprotocol.wave.model.document.util.Point$El $r6, $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r3, $r5, $r7;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()>();

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r2, $r5);

        $r7 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r2, $r7);

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionPoints(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r6, $r8);

     label1:
        return;
    }

    public void resetGadget()
    {
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave $r5;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r3, $r8;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$22 $r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$23 $r7;
        org.waveprotocol.wave.client.gadget.StateMap $r2;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r4;
        org.waveprotocol.wave.model.util.ReadableStringMap $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        $r1 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$22;

        specialinvoke $r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$22: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)>(r0);

        virtualinvoke $r2.<org.waveprotocol.wave.client.gadget.StateMap: void each(org.waveprotocol.wave.client.gadget.StateMap$Each)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetId()>();

        if $r4 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.supplement.ObservableSupplementedWave: org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)>($r4);

        $r7 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$23;

        specialinvoke $r7.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$23: void <init>(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget,java.lang.String)>(r0, $r4);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r7);

        $r8 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submit()>();

     label1:
        return;
    }

    private static native void excludeCssName();

    public void onMaybeGadgetStateChanged(java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r1;
        java.lang.String r0, $r2;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = specialinvoke r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetId()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter privateGadgetStateSubmitter>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.gadget.renderer.Submitter: void submitImmediately()>();

     label1:
        return;
    }

    private void onModifyingDocument()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean documentModified> = 1;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean toUpdateIframeUrl>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String iframeUrl>;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void scheduleGadgetAttributeUpdate(java.lang.String,java.lang.String)>("ifr", $r1);

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean toUpdateIframeUrl> = 0;

     label1:
        return;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetWidget createForTesting(int, org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs, org.waveprotocol.wave.model.id.WaveletName, java.lang.String, org.waveprotocol.wave.client.gadget.renderer.Locale)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.wave.client.gadget.renderer.Locale r4;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget $r0;
        int i0;
        java.lang.String r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs r1;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs;

        r2 := @parameter2: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: org.waveprotocol.wave.client.gadget.renderer.Locale;

        $r0 = new org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        specialinvoke $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void <init>()>();

        $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int clientInstanceId> = i0;

        $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs> = r1;

        $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.id.WaveletName waveletName> = r2;

        $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String securityToken> = r3;

        $r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Locale locale> = r4;

        return $r0;
    }

    java.lang.String getRpcToken()
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String rpcToken>;

        return $r1;
    }

    static boolean access$000(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean isActive()>();

        return $z0;
    }

    static void access$100(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.Object[])
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.Object[] r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.Object[];

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void log(java.lang.Object[])>(r1);

        return;
    }

    static org.waveprotocol.wave.client.gadget.StateMap access$200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.StateMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.StateMap state>;

        return $r1;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs access$300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetUserPrefs userPrefs>;

        return $r1;
    }

    static org.waveprotocol.wave.client.gadget.renderer.Submitter access$400(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter gadgetStateSubmitter>;

        return $r1;
    }

    static boolean access$500(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean canModifyDocument()>();

        return $z0;
    }

    static boolean access$600(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $z0 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean documentModified>;

        return $z0;
    }

    static org.waveprotocol.wave.client.editor.content.ContentElement access$700(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.editor.content.ContentElement element>;

        return $r1;
    }

    static boolean access$800()
    {
        boolean $z0;

        $z0 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean gadgetLibraryLoaded()>();

        return $z0;
    }

    static void access$900(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.String, long, long)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        long l0, l1;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void controllerRegistration(java.lang.String,long,long)>(r1, l0, l1);

        return;
    }

    static void access$1000(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void initializePodium()>();

        return;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi access$1100(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidgetUi ui>;

        return $r1;
    }

    static java.lang.String access$1200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String generateAndSetGadgetId()>();

        return $r1;
    }

    static void access$1300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void showBrokenGadget(java.lang.String)>(r1);

        return;
    }

    static boolean access$1400(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean validIframeUrl(java.lang.String)>(r1);

        return $z0;
    }

    static void access$1500(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata r1;
        java.lang.String r2, r3;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void constructGadgetFromMetadata(org.waveprotocol.wave.client.gadget.renderer.GadgetMetadata,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    static java.lang.String access$1600(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String getGadgetName()>();

        return $r1;
    }

    static org.waveprotocol.wave.client.gadget.renderer.EditingIndicator access$1700(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.EditingIndicator $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.EditingIndicator editingIndicator>;

        return $r1;
    }

    static void access$1800(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void modifyState(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1900(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, java.lang.String)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void deleteState(java.lang.String)>(r1);

        return;
    }

    static org.waveprotocol.wave.client.gadget.renderer.Submitter access$2000(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.Submitter $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.Submitter blipSubmitter>;

        return $r1;
    }

    static org.waveprotocol.wave.model.supplement.ObservableSupplementedWave access$2100(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.supplement.ObservableSupplementedWave $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.supplement.ObservableSupplementedWave supplement>;

        return $r1;
    }

    static void access$2200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void sendCurrentParticipantInformation()>();

        return;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild access$2300(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild>;

        return $r1;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild access$2400(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r0, $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = staticinvoke <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild findNextChildCopy(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild,org.waveprotocol.wave.client.editor.content.ContentNode)>(r0, r1);

        return $r2;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild access$2302(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild redundantNodeCheckChild> = r1;

        return r1;
    }

    static void access$2600(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void removeRedundantNodes(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)>(r1);

        return;
    }

    static void access$2700(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void processChild(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$2800(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap stateElements>;

        return $r1;
    }

    static void access$2900(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget, org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.client.gadget.StateMap)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild r1;
        org.waveprotocol.wave.client.gadget.StateMap r3;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.util.StringMap r2;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        r1 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild;

        r2 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        r3 := @parameter3: org.waveprotocol.wave.client.gadget.StateMap;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void removeChildFromMaps(org.waveprotocol.wave.client.gadget.renderer.GadgetElementChild,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.client.gadget.StateMap)>(r1, r2, r3);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$3000(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.model.util.StringMap prefElements>;

        return $r1;
    }

    static void access$3100(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        specialinvoke r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: void rescanGadgetXmlElements()>();

        return;
    }

    static org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask access$3200(org.waveprotocol.wave.client.gadget.renderer.GadgetWidget)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget;

        $r1 = r0.<org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: org.waveprotocol.wave.client.gadget.renderer.GadgetWidget$ElementChangeTask descendantsMutatedTask>;

        return $r1;
    }

    static void <clinit>()
    {
        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String SNIPPET_SANITIZER_PATTERN> = "[<>\\\"\\\'\\&]";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String IFRAME_HOST_PATTERN> = "^\\/\\/(https?:\\/\\/)?[^\\/]+\\/";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String FRAGMENT_VALIDATION_PATTERN> = "([\\w~!&@\\$\\-\\.\\\'\\(\\)\\*\\+\\,\\;\\=\\?\\:]|%[0-9a-fA-F]{2})+";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String BEFORE_FRAGMENT_PATTERN> = "[^#]*#";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String FRAGMENT_PATTERN> = "#.*";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String URL_CLEANING_PATTERN> = "&(mid=|st=|lang=|country=|debug=)[^&]*";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String FRAGMENT_CLEANING_PATTERN> = "(^|&)(rpctoken=|st=|up_)[^&]*";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int REPEAT_PARTICIPANT_INFORMATION_SEND_DELAY_MS> = 5000;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int FRAME_BORDER_REMOVE_DELAY_MS> = 3000;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String EDIT_MODE_KEY> = "${edit}";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String PLAYBACK_MODE_KEY> = "${playback}";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String WAVE_API_VERSION> = "1";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int STATE_SEND_TIMEOUT_MS> = 30;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int BLIP_SUBMIT_TIMEOUT_MS> = 30;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int EDITING_POLLING_TIMER_MS> = 200;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int GADGET_RPC_LOAD_TIMER_MS> = 250;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int GADGET_RPC_LOAD_WARNING_TIMEOUT_MS> = 30000;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String GADGET_DEFAULT_VIEW> = "default";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String GADGET_PRIMARY_VIEW> = "canvas";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String GADGET_NAME_PREFIX> = "wgadget_iframe_";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String GADGET_RPC_PATH> = "/gadgets/js/core:rpc.js";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String PODIUM_STATE_NAME> = "podiumState";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int DEFAULT_WIDTH_PX> = 600;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int DEFAULT_HEIGHT_PX> = 100;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: java.lang.String GADGET_RELAY_PATH> = "gadgets/files/container/rpc_relay.html";

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: int nextClientInstanceId> = 0;

        <org.waveprotocol.wave.client.gadget.renderer.GadgetWidget: boolean initialized> = 0;

        return;
    }
}
