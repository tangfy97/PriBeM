public class org.waveprotocol.wave.client.editor.util.NodeMutationDelegator extends java.lang.Object implements org.waveprotocol.wave.client.editor.NodeMutationHandler
{
    protected final org.waveprotocol.wave.client.editor.NodeMutationHandler delegate;

    public void <init>(org.waveprotocol.wave.client.editor.NodeMutationHandler)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate> = r1;

        return;
    }

    public void onActivationStart(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onActivationStart(java.lang.Object)>(r1);

        return;
    }

    public void onActivatedSubtree(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onActivatedSubtree(java.lang.Object)>(r1);

        return;
    }

    public void onDeactivated(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onDeactivated(java.lang.Object)>(r1);

        return;
    }

    public void onAddedToParent(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onAddedToParent(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void onChildAdded(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onChildAdded(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void onDescendantsMutated(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onDescendantsMutated(java.lang.Object)>(r1);

        return;
    }

    public void onEmptied(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onEmptied(java.lang.Object)>(r1);

        return;
    }

    public void onAttributeModified(java.lang.Object, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r5;
        java.lang.Object r1;
        java.lang.String r2, r3, r4;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void onChildRemoved(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onChildRemoved(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void onRemovedFromParent(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.util.NodeMutationDelegator r0;
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r3;
        java.lang.Object r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.util.NodeMutationDelegator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.client.editor.util.NodeMutationDelegator: org.waveprotocol.wave.client.editor.NodeMutationHandler delegate>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onRemovedFromParent(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }
}
