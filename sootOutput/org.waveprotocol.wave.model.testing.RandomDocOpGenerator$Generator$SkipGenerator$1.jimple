class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 extends org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent
{
    final int val$distance;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator this$1;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator, int)
    {
        int i0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator this$1> = r1;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: int val$distance> = i0;

        $r2 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>($r2);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 r1;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $i0 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: int val$distance>;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($i0, r2);

        return $r3;
    }

    public void apply(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton)
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 r1;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: int val$distance>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void doRetain(int)>($i0);

        return;
    }

    public void output(org.waveprotocol.wave.model.document.operation.DocOpCursor)
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 r1;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        $i0 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: int val$distance>;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.DocOpCursor: void retain(int)>($i0);

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 r2;

        r2 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skip(");

        $i0 = r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: int val$distance>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
