class org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor extends org.apache.lucene.codecs.compressing.Compressor
{
    final java.util.zip.Deflater compressor;
    byte[] compressed;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        byte[] $r2;
        int i0;
        java.util.zip.Deflater $r1;
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.Compressor: void <init>()>();

        $r1 = new java.util.zip.Deflater;

        specialinvoke $r1.<java.util.zip.Deflater: void <init>(int)>(i0);

        r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor> = $r1;

        $r2 = newarray (byte)[64];

        r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed> = $r2;

        return;
    }

    public void compress(byte[], int, int, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        byte[] r2, $r6, $r7, $r10, $r11, $r13, $r14;
        org.apache.lucene.store.DataOutput r12;
        java.lang.AssertionError $r15, $r16;
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z0, $z1, $z2, $z3;
        java.util.zip.Deflater $r1, $r3, $r4, $r5, $r8, $r9;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r12 := @parameter3: org.apache.lucene.store.DataOutput;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        virtualinvoke $r1.<java.util.zip.Deflater: void reset()>();

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        virtualinvoke $r3.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r2, i0, i1);

        $r4 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        virtualinvoke $r4.<java.util.zip.Deflater: void finish()>();

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        $z0 = virtualinvoke $r5.<java.util.zip.Deflater: boolean needsInput()>();

        if $z0 == 0 goto label2;

        $z3 = <org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        if i1 == 0 goto label1;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(int)>(i1);

        throw $r16;

     label1:
        virtualinvoke r12.<org.apache.lucene.store.DataOutput: void writeVInt(int)>(0);

        return;

     label2:
        i7 = 0;

     label3:
        $r8 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        $r7 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed>;

        $r6 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed>;

        $i2 = lengthof $r6;

        $i3 = $i2 - i7;

        $i4 = virtualinvoke $r8.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r7, i7, $i3);

        $i5 = i7 + $i4;

        i7 = $i5;

        $z1 = <org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r14 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed>;

        $i6 = lengthof $r14;

        if $i5 <= $i6 goto label4;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label4:
        $r9 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: java.util.zip.Deflater compressor>;

        $z2 = virtualinvoke $r9.<java.util.zip.Deflater: boolean finished()>();

        if $z2 == 0 goto label5;

        goto label6;

     label5:
        $r10 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed>;

        $r11 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[])>($r10);

        r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed> = $r11;

        goto label3;

     label6:
        virtualinvoke r12.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i5);

        $r13 = r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: byte[] compressed>;

        virtualinvoke r12.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int)>($r13, $i5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressionMode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
