public class org.apache.zookeeper.ServerAdminClient extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.zookeeper.ServerAdminClient r0;

        r0 := @this: org.apache.zookeeper.ServerAdminClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static long getMask(java.lang.String)
    {
        long l0;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.String;

        l0 = 0L;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CLIENT_REQUEST_TRACE_MASK");

        if $z0 == 0 goto label1;

        l0 = 2L;

        goto label8;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CLIENT_DATA_PACKET_TRACE_MASK");

        if $z1 == 0 goto label2;

        l0 = 4L;

        goto label8;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CLIENT_PING_TRACE_MASK");

        if $z2 == 0 goto label3;

        l0 = 8L;

        goto label8;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SERVER_PACKET_TRACE_MASK");

        if $z3 == 0 goto label4;

        l0 = 16L;

        goto label8;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SESSION_TRACE_MASK");

        if $z4 == 0 goto label5;

        l0 = 32L;

        goto label8;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("EVENT_DELIVERY_TRACE_MASK");

        if $z5 == 0 goto label6;

        l0 = 64L;

        goto label8;

     label6:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SERVER_PING_TRACE_MASK");

        if $z6 == 0 goto label7;

        l0 = 128L;

        goto label8;

     label7:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("WARNING_TRACE_MASK");

        if $z7 == 0 goto label8;

        l0 = 256L;

     label8:
        return l0;
    }

    private static long getMasks(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        long $l0, l1;
        java.lang.String r1, $r2, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        l1 = 0L;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "|");

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $l0 = staticinvoke <org.apache.zookeeper.ServerAdminClient: long getMask(java.lang.String)>($r3);

        l1 = l1 | $l0;

        goto label1;

     label2:
        return l1;
    }

    public static void ruok(java.lang.String, int)
    {
        byte[] $r2, r9, r28;
        java.nio.ByteBuffer $r0, $r3;
        java.net.InetSocketAddress $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;
        java.lang.Throwable $r20;
        java.net.Socket $r4, r27;
        int $i0, i1, $i2;
        java.lang.String $r1, r6, $r10, $r17;
        java.io.OutputStream $r8;
        java.io.PrintStream $r12;
        org.slf4j.Logger $r19, $r22, $r24, $r26;
        java.io.IOException $r18, $r21, $r23, $r25;
        java.io.InputStream $r7;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r27 = null;

     label01:
        r28 = newarray (byte)[4];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r28);

        $r1 = "ruok";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r27 = $r4;

        virtualinvoke $r4.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r6, i1);

        virtualinvoke $r4.<java.net.Socket: void connect(java.net.SocketAddress)>($r5);

        $r7 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>(r28);

        r9 = newarray (byte)[4];

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r9);

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>(r9);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label02:
        if $r4 == null goto label17;

     label03:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r25 := @caughtexception;

        $r26 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r25);

        goto label17;

     label06:
        $r23 := @caughtexception;

        $r24 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r23);

     label07:
        if r27 == null goto label17;

     label08:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r21 := @caughtexception;

        $r22 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r21);

        goto label17;

     label11:
        $r20 := @caughtexception;

     label12:
        if r27 == null goto label16;

     label13:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r18 := @caughtexception;

        $r19 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r18);

     label16:
        throw $r20;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void dump(java.lang.String, int)
    {
        byte[] $r2, r9, r28;
        java.nio.ByteBuffer $r0, $r3;
        java.net.InetSocketAddress $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;
        java.lang.Throwable $r20;
        java.net.Socket $r4, r27;
        int $i0, i1, $i2;
        java.lang.String $r1, r6, $r10, $r17;
        java.io.OutputStream $r8;
        java.io.PrintStream $r12;
        org.slf4j.Logger $r19, $r22, $r24, $r26;
        java.io.IOException $r18, $r21, $r23, $r25;
        java.io.InputStream $r7;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r27 = null;

     label01:
        r28 = newarray (byte)[4];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r28);

        $r1 = "dump";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r27 = $r4;

        virtualinvoke $r4.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r6, i1);

        virtualinvoke $r4.<java.net.Socket: void connect(java.net.SocketAddress)>($r5);

        $r7 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>(r28);

        r9 = newarray (byte)[1024];

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r9);

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>(r9);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label02:
        if $r4 == null goto label17;

     label03:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r25 := @caughtexception;

        $r26 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r25);

        goto label17;

     label06:
        $r23 := @caughtexception;

        $r24 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r23);

     label07:
        if r27 == null goto label17;

     label08:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r21 := @caughtexception;

        $r22 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r21);

        goto label17;

     label11:
        $r20 := @caughtexception;

     label12:
        if r27 == null goto label16;

     label13:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r18 := @caughtexception;

        $r19 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r18);

     label16:
        throw $r20;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void stat(java.lang.String, int)
    {
        byte[] $r2, r9, r28;
        java.nio.ByteBuffer $r0, $r3;
        java.net.InetSocketAddress $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;
        java.lang.Throwable $r20;
        java.net.Socket $r4, r27;
        int $i0, i1, $i2;
        java.lang.String $r1, r6, $r10, $r17;
        java.io.OutputStream $r8;
        java.io.PrintStream $r12;
        org.slf4j.Logger $r19, $r22, $r24, $r26;
        java.io.IOException $r18, $r21, $r23, $r25;
        java.io.InputStream $r7;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r27 = null;

     label01:
        r28 = newarray (byte)[4];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r28);

        $r1 = "stat";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r27 = $r4;

        virtualinvoke $r4.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r6, i1);

        virtualinvoke $r4.<java.net.Socket: void connect(java.net.SocketAddress)>($r5);

        $r7 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>(r28);

        r9 = newarray (byte)[1024];

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r9);

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>(r9);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label02:
        if $r4 == null goto label17;

     label03:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r25 := @caughtexception;

        $r26 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r25);

        goto label17;

     label06:
        $r23 := @caughtexception;

        $r24 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r23);

     label07:
        if r27 == null goto label17;

     label08:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r21 := @caughtexception;

        $r22 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r21);

        goto label17;

     label11:
        $r20 := @caughtexception;

     label12:
        if r27 == null goto label16;

     label13:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r18 := @caughtexception;

        $r19 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r18);

     label16:
        throw $r20;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void kill(java.lang.String, int)
    {
        byte[] $r2, r9, r28;
        java.nio.ByteBuffer $r0, $r3;
        java.net.InetSocketAddress $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;
        java.lang.Throwable $r20;
        java.net.Socket $r4, r27;
        int $i0, i1, $i2;
        java.lang.String $r1, r6, $r10, $r17;
        java.io.OutputStream $r8;
        java.io.PrintStream $r12;
        org.slf4j.Logger $r19, $r22, $r24, $r26;
        java.io.IOException $r18, $r21, $r23, $r25;
        java.io.InputStream $r7;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r27 = null;

     label01:
        r28 = newarray (byte)[4];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r28);

        $r1 = "kill";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r27 = $r4;

        virtualinvoke $r4.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r6, i1);

        virtualinvoke $r4.<java.net.Socket: void connect(java.net.SocketAddress)>($r5);

        $r7 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>(r28);

        r9 = newarray (byte)[4];

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r9);

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[])>(r9);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label02:
        if $r4 == null goto label17;

     label03:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r25 := @caughtexception;

        $r26 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r25);

        goto label17;

     label06:
        $r23 := @caughtexception;

        $r24 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r24.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r23);

     label07:
        if r27 == null goto label17;

     label08:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r21 := @caughtexception;

        $r22 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r21);

        goto label17;

     label11:
        $r20 := @caughtexception;

     label12:
        if r27 == null goto label16;

     label13:
        virtualinvoke r27.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r18 := @caughtexception;

        $r19 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r18);

     label16:
        throw $r20;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void setTraceMask(java.lang.String, int, java.lang.String)
    {
        byte[] $r3, r10, r34;
        java.nio.ByteBuffer $r0, $r4, $r11;
        byte $b5;
        boolean $z0;
        java.net.InetSocketAddress $r6;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r18, $r19, $r21;
        java.lang.Throwable $r26;
        java.net.Socket $r5, r33;
        long $l0, $l4;
        java.lang.AssertionError $r23;
        int $i1, i2, $i3;
        java.lang.String r1, $r2, r7, $r17, $r20, $r22;
        java.io.OutputStream $r9;
        java.io.PrintStream $r13;
        org.slf4j.Logger $r25, $r28, $r30, $r32;
        java.io.IOException $r24, $r27, $r29, $r31;
        java.io.InputStream $r8;

        r7 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r33 = null;

     label01:
        r34 = newarray (byte)[12];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r34);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r1, 8);

        $r2 = "stmk";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        $r5 = new java.net.Socket;

        specialinvoke $r5.<java.net.Socket: void <init>()>();

        r33 = $r5;

        virtualinvoke $r5.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r6 = new java.net.InetSocketAddress;

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r7, i2);

        virtualinvoke $r5.<java.net.Socket: void connect(java.net.SocketAddress)>($r6);

        $r8 = virtualinvoke $r5.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r9 = virtualinvoke $r5.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r9.<java.io.OutputStream: void write(byte[])>(r34);

        r10 = newarray (byte)[8];

        $i3 = virtualinvoke $r8.<java.io.InputStream: int read(byte[])>(r10);

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r10);

        $l4 = virtualinvoke $r11.<java.nio.ByteBuffer: long getLong()>();

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=0");

        $r17 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>($l4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" masks=0");

        $r20 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>($l0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $z0 = <org.apache.zookeeper.ServerAdminClient: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $b5 = $l4 cmp $l0;

        if $b5 == 0 goto label02;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label02:
        if $r5 == null goto label17;

     label03:
        virtualinvoke $r5.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r31 := @caughtexception;

        $r32 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r31);

        goto label17;

     label06:
        $r29 := @caughtexception;

        $r30 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r29);

     label07:
        if r33 == null goto label17;

     label08:
        virtualinvoke r33.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r27 := @caughtexception;

        $r28 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r28.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r27);

        goto label17;

     label11:
        $r26 := @caughtexception;

     label12:
        if r33 == null goto label16;

     label13:
        virtualinvoke r33.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r24 := @caughtexception;

        $r25 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r25.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r24);

     label16:
        throw $r26;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static void getTraceMask(java.lang.String, int)
    {
        byte[] $r2, r9, r29;
        java.nio.ByteBuffer $r0, $r3, $r10;
        java.net.InetSocketAddress $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r17;
        java.lang.Throwable $r21;
        java.net.Socket $r4, r28;
        long $l3;
        int $i0, i1, $i2;
        java.lang.String $r1, r6, $r16, $r18;
        java.io.OutputStream $r8;
        java.io.PrintStream $r12;
        org.slf4j.Logger $r20, $r23, $r25, $r27;
        java.io.IOException $r19, $r22, $r24, $r26;
        java.io.InputStream $r7;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r28 = null;

     label01:
        r29 = newarray (byte)[12];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r29);

        $r1 = "gtmk";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r28 = $r4;

        virtualinvoke $r4.<java.net.Socket: void setSoLinger(boolean,int)>(0, 10);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(20000);

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r6, i1);

        virtualinvoke $r4.<java.net.Socket: void connect(java.net.SocketAddress)>($r5);

        $r7 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>(r29);

        r9 = newarray (byte)[8];

        $i2 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>(r9);

        $r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r9);

        $l3 = virtualinvoke $r10.<java.nio.ByteBuffer: long getLong()>();

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rc=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retv=0");

        $r16 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>($l3);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label02:
        if $r4 == null goto label17;

     label03:
        virtualinvoke $r4.<java.net.Socket: void close()>();

     label04:
        goto label17;

     label05:
        $r26 := @caughtexception;

        $r27 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r27.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r26);

        goto label17;

     label06:
        $r24 := @caughtexception;

        $r25 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r25.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r24);

     label07:
        if r28 == null goto label17;

     label08:
        virtualinvoke r28.<java.net.Socket: void close()>();

     label09:
        goto label17;

     label10:
        $r22 := @caughtexception;

        $r23 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r22);

        goto label17;

     label11:
        $r21 := @caughtexception;

     label12:
        if r28 == null goto label16;

     label13:
        virtualinvoke r28.<java.net.Socket: void close()>();

     label14:
        goto label16;

     label15:
        $r19 := @caughtexception;

        $r20 = <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG>;

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r19);

     label16:
        throw $r21;

     label17:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: java [-cp CLASSPATH] org.apache.zookeeper.ServerAdminClient host port op (ruok|stat|dump|kill|gettracemask|settracemask) [arguments]");

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, $i1;
        java.lang.String r1, $r2, r3, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintStream $r5;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 >= 3 goto label1;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void usage()>();

        return;

     label1:
        r1 = r0[0];

        $r2 = r0[1];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        r3 = r0[2];

        $z0 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gettracemask");

        if $z0 == 0 goto label2;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void getTraceMask(java.lang.String,int)>(r1, $i1);

        goto label8;

     label2:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("settracemask");

        if $z1 == 0 goto label3;

        $r9 = r0[3];

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void setTraceMask(java.lang.String,int,java.lang.String)>(r1, $i1, $r9);

        goto label8;

     label3:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ruok");

        if $z2 == 0 goto label4;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void ruok(java.lang.String,int)>(r1, $i1);

        goto label8;

     label4:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("kill");

        if $z3 == 0 goto label5;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void kill(java.lang.String,int)>(r1, $i1);

        goto label8;

     label5:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("stat");

        if $z4 == 0 goto label6;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void stat(java.lang.String,int)>(r1, $i1);

        goto label8;

     label6:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("dump");

        if $z5 == 0 goto label7;

        staticinvoke <org.apache.zookeeper.ServerAdminClient: void dump(java.lang.String,int)>(r1, $i1);

        goto label8;

     label7:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized op: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label8:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/zookeeper/ServerAdminClient;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.zookeeper.ServerAdminClient: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/ServerAdminClient;");

        <org.apache.zookeeper.ServerAdminClient: org.slf4j.Logger LOG> = $r1;

        return;
    }
}
