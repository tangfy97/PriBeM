public class org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer extends org.codehaus.jackson.map.ser.std.AsArraySerializerBase
{

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer r0;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(class "Ljava/util/List;", r1, z0, r2, r3, r4);

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer $r0, r1;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: boolean _staticTyping>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r5, $z0, r2, $r4, $r3);

        return $r0;
    }

    public void serializeContents(java.util.List, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r8;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.JsonGenerator r7;
        int $i0, i1;
        org.codehaus.jackson.type.JavaType $r9, $r10, $r11;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r14;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r1, $r6, $r12, r15;
        java.lang.Exception $r13;
        java.util.List r3;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer r0;
        java.lang.Object $r4;
        java.lang.Class $r5;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r3 := @parameter0: java.util.List;

        r7 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r8 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r1 == null goto label01;

        $r12 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContentsUsing(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r3, r7, r8, $r12);

        return;

     label01:
        $r2 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        if $r2 == null goto label02;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeTypedContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r3, r7, r8);

        return;

     label02:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 0 goto label03;

        return;

     label03:
        i1 = 0;

     label04:
        r14 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label05:
        if i1 >= $i0 goto label11;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        if $r4 != null goto label06;

        virtualinvoke r8.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r7);

        goto label10;

     label06:
        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r14.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r5);

        r15 = $r6;

        if $r6 != null goto label09;

        $r9 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        if $z0 == 0 goto label07;

        $r10 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r11 = virtualinvoke r8.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r10, $r5);

        r15 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>(r14, $r11, r8);

        goto label08;

     label07:
        r15 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r14, $r5, r8);

     label08:
        r14 = r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label09:
        virtualinvoke r15.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r7, r8);

     label10:
        i1 = i1 + 1;

        goto label05;

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(r8, $r13, r3, i1);

     label13:
        return;

        catch java.lang.Exception from label04 to label11 with label12;
    }

    public void serializeContentsUsing(java.util.List, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r6;
        org.codehaus.jackson.map.JsonSerializer r4;
        java.lang.Exception $r7;
        java.util.List r0;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.JsonGenerator r5;
        int $i0, i1;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer r1;
        java.lang.Object $r3;

        r1 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r2 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label9;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

     label3:
        if $r3 != null goto label4;

        virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r5);

        goto label6;

     label4:
        if r2 != null goto label5;

        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r3, r5, r6);

        goto label6;

     label5:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r3, r5, r6, r2);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(r6, $r7, r0, i1);

     label8:
        i1 = i1 + 1;

        goto label2;

     label9:
        return;

        catch java.lang.Exception from label3 to label6 with label7;
    }

    public void serializeTypedContents(java.util.List, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r6;
        org.codehaus.jackson.JsonGenerator r5;
        org.codehaus.jackson.map.TypeSerializer r11;
        int $i0, i1;
        org.codehaus.jackson.type.JavaType $r7, $r8, $r9;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r12;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r4, r13;
        java.lang.Exception $r10;
        java.util.List r0;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer r1;
        java.lang.Object $r2;
        java.lang.Class $r3;

        r1 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        i1 = 0;

     label02:
        r11 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        r12 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label03:
        if i1 >= $i0 goto label09;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        if $r2 != null goto label04;

        virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r5);

        goto label08;

     label04:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r12.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r3);

        r13 = $r4;

        if $r4 != null goto label07;

        $r7 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        if $z0 == 0 goto label05;

        $r8 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r9 = virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r8, $r3);

        r13 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>(r12, $r9, r6);

        goto label06;

     label05:
        r13 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r12, $r3, r6);

     label06:
        r12 = r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label07:
        virtualinvoke r13.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r2, r5, r6, r11);

     label08:
        i1 = i1 + 1;

        goto label03;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(r6, $r10, r0, i1);

     label11:
        return;

        catch java.lang.Exception from label02 to label09 with label10;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.util.List $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer r0;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.List) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.StdContainerSerializers$IndexedListSerializer: void serializeContents(java.util.List,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
