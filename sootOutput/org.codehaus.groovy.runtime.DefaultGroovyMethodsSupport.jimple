public class org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport extends java.lang.Object
{
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$org$codehaus$groovy$runtime$NullObject;

    public void <init>()
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport r0;

        r0 := @this: org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int, groovy.lang.IntRange)
    {
        groovy.lang.IntRange r0;
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r3;
        int $i0, i1, $i2, $i3, $i4, i5, i6, $i7;
        java.lang.Comparable $r1, $r2;
        boolean $z0, z1, $z2;

        i1 := @parameter0: int;

        r0 := @parameter1: groovy.lang.IntRange;

        $r1 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: int normaliseIndex(int,int)>($i0, i1);

        i5 = $i2;

        $r2 = virtualinvoke r0.<groovy.lang.IntRange: java.lang.Comparable getTo()>();

        $i3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r2);

        $i4 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: int normaliseIndex(int,int)>($i3, i1);

        i6 = $i4;

        $z0 = virtualinvoke r0.<groovy.lang.IntRange: boolean isReverse()>();

        z1 = $z0;

        if $i2 <= $i4 goto label3;

        i6 = $i2;

        i5 = $i4;

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

     label3:
        $r3 = new org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo;

        $i7 = i6 + 1;

        specialinvoke $r3.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: void <init>(int,int,boolean)>(i5, $i7, z1);

        return $r3;
    }

    protected static org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo subListBorders(int, groovy.lang.EmptyRange)
    {
        org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo $r2;
        int $i0, i1, $i2;
        java.lang.Comparable $r1;
        groovy.lang.EmptyRange r0;

        i1 := @parameter0: int;

        r0 := @parameter1: groovy.lang.EmptyRange;

        $r1 = virtualinvoke r0.<groovy.lang.EmptyRange: java.lang.Comparable getFrom()>();

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r1);

        $i2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: int normaliseIndex(int,int)>($i0, i1);

        $r2 = new org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo;

        specialinvoke $r2.<org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport$RangeInfo: void <init>(int,int,boolean)>($i2, $i2, 0);

        return $r2;
    }

    protected static int normaliseIndex(int, int)
    {
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5;
        int i0, i1, i2;
        java.lang.String $r6;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        i0 = i2;

        if i2 >= 0 goto label1;

        i2 = i2 + i1;

     label1:
        if i2 >= 0 goto label2;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Negative array index [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] too large for array size ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        return i2;
    }

    protected static java.util.Collection cloneSimilarCollection(java.util.Collection, int)
    {
        int i0;
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.util.Collection createSimilarCollection(java.util.Collection,int)>(r0, i0);

        interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>(r0);

        return $r1;
    }

    protected static java.util.Collection createSimilarOrDefaultCollection(java.lang.Object)
    {
        java.util.Collection $r2, $r3;
        java.lang.Object r0;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Collection) r0;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.util.Collection createSimilarCollection(java.util.Collection)>($r2);

        return $r3;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    protected static java.util.Collection createSimilarCollection(java.util.Collection)
    {
        int $i0;
        java.util.Collection r0, $r1;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.util.Collection createSimilarCollection(java.util.Collection,int)>(r0, $i0);

        return $r1;
    }

    protected static java.util.Collection createSimilarCollection(java.util.Collection, int)
    {
        java.util.Collection r0;
        java.util.Set $r4, $r5;
        java.util.ArrayList $r1;
        java.util.List $r2, $r3;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $r4 = (java.util.Set) r0;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.util.Set createSimilarSet(java.util.Set)>($r4);

        return $r5;

     label1:
        $z1 = r0 instanceof java.util.List;

        if $z1 == 0 goto label2;

        $r2 = (java.util.List) r0;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.util.List createSimilarList(java.util.List,int)>($r2, i0);

        return $r3;

     label2:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        return $r1;
    }

    protected static java.util.List createSimilarList(java.util.List, int)
    {
        java.util.AbstractList r4;
        java.util.ArrayList $r1;
        java.util.List r0;
        java.util.Vector $r2;
        int i0;
        java.util.LinkedList $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.util.LinkedList;

        if $z0 == 0 goto label1;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r4 = $r3;

        goto label3;

     label1:
        $z1 = r0 instanceof java.util.Vector;

        if $z1 == 0 goto label2;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r4 = $r2;

        goto label3;

     label2:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        r4 = $r1;

     label3:
        return r4;
    }

    protected static java.util.Map cloneSimilarMap(java.util.Map)
    {
        java.util.Properties $r3;
        java.util.HashMap $r1;
        java.util.LinkedHashMap $r4;
        java.util.TreeMap $r5;
        java.util.Map r0, r6;
        java.util.Hashtable $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof java.util.TreeMap;

        if $z0 == 0 goto label1;

        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>(java.util.Map)>(r0);

        r6 = $r5;

        goto label5;

     label1:
        $z1 = r0 instanceof java.util.LinkedHashMap;

        if $z1 == 0 goto label2;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(java.util.Map)>(r0);

        r6 = $r4;

        goto label5;

     label2:
        $z2 = r0 instanceof java.util.Properties;

        if $z2 == 0 goto label3;

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        r6 = $r3;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r0);

        goto label5;

     label3:
        $z3 = r0 instanceof java.util.Hashtable;

        if $z3 == 0 goto label4;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(java.util.Map)>(r0);

        r6 = $r2;

        goto label5;

     label4:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r0);

        r6 = $r1;

     label5:
        return r6;
    }

    protected static java.util.Set createSimilarSet(java.util.Set)
    {
        java.util.HashSet $r1;
        java.util.AbstractSet r4;
        java.util.Set r0;
        java.util.LinkedHashSet $r2;
        java.util.TreeSet $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Set;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r3 = new java.util.TreeSet;

        specialinvoke $r3.<java.util.TreeSet: void <init>()>();

        r4 = $r3;

        goto label3;

     label1:
        $z1 = r0 instanceof java.util.LinkedHashSet;

        if $z1 == 0 goto label2;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        r4 = $r2;

        goto label3;

     label2:
        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r4 = $r1;

     label3:
        return r4;
    }

    protected static boolean sameType(java.util.Collection[])
    {
        int $i0, $i1, i2, i3, $i4;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Collection $r3, $r8;
        java.util.Collection[] r1;
        java.lang.Object $r2, $r5;
        java.lang.Class $r6, $r7, $r9, r10, $r11;

        r1 := @parameter0: java.util.Collection[];

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        i2 = 0;

     label01:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label02;

        $r8 = r1[i2];

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        i2 = i2 + 1;

        goto label01;

     label02:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i1 != 0 goto label03;

        return 1;

     label03:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = $r2 instanceof java.lang.Number;

        if $z0 == 0 goto label06;

        $r7 = <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$java$lang$Number>;

        if $r7 != null goto label04;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$java$lang$Number> = $r9;

        goto label05;

     label04:
        $r9 = <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$java$lang$Number>;

     label05:
        r10 = $r9;

        goto label10;

     label06:
        if $r2 != null goto label09;

        $r6 = <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$org$codehaus$groovy$runtime$NullObject>;

        if $r6 != null goto label07;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.NullObject");

        <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$org$codehaus$groovy$runtime$NullObject> = $r11;

        goto label08;

     label07:
        $r11 = <org.codehaus.groovy.runtime.DefaultGroovyMethodsSupport: java.lang.Class class$org$codehaus$groovy$runtime$NullObject>;

     label08:
        r10 = $r11;

        goto label10;

     label09:
        r10 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

     label10:
        i3 = 0;

     label11:
        $i4 = lengthof r1;

        if i3 >= $i4 goto label14;

        $r3 = r1[i3];

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r10.<java.lang.Class: boolean isInstance(java.lang.Object)>($r5);

        if $z2 != 0 goto label12;

        return 0;

     label13:
        i3 = i3 + 1;

        goto label11;

     label14:
        return 1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
