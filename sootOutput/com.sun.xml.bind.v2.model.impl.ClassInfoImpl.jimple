public class com.sun.xml.bind.v2.model.impl.ClassInfoImpl extends com.sun.xml.bind.v2.model.impl.TypeInfoImpl implements com.sun.xml.bind.v2.model.core.ClassInfo, com.sun.xml.bind.v2.model.core.Element
{
    protected final java.lang.Object clazz;
    private final javax.xml.namespace.QName elementName;
    private final javax.xml.namespace.QName typeName;
    private com.sun.istack.FinalArrayList properties;
    private java.lang.String[] propOrder;
    private com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass;
    private boolean baseClassComputed;
    private boolean hasSubClasses;
    protected com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard;
    private java.lang.Object factoryMethod;
    private static final com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] SECONDARY_ANNOTATIONS;
    private static final java.lang.'annotation'.Annotation[] EMPTY_ANNOTATIONS;
    private static final java.util.HashMap ANNOTATION_NUMBER_MAP;
    private static final java.lang.String[] DEFAULT_ORDER;
    static final boolean $assertionsDisabled;

    void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder, com.sun.xml.bind.v2.model.'annotation'.Locatable, java.lang.Object)
    {
        javax.xml.bind.'annotation'.XmlAccessOrder $r32, $r33, $r34, $r35;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r5, $r9, $r42;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sun.xml.bind.v2.model.impl.Messages $r16, $r22, $r28;
        java.lang.'annotation'.Annotation $r6, $r10, $r43;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r14, $r20, $r26;
        javax.xml.namespace.QName $r4, $r7, $r13;
        java.lang.Object[] $r15, $r21, $r27;
        java.lang.String[] $r8, $r36, $r39;
        java.lang.AssertionError $r41;
        javax.xml.bind.'annotation'.XmlType $r40;
        int $i0, $i1;
        java.lang.String $r18, $r19, $r24, $r25, $r30, $r31, $r37;
        com.sun.xml.bind.v2.model.impl.ModelBuilder r1;
        javax.xml.bind.'annotation'.XmlAccessorOrder $r38, $r44;
        com.sun.xml.bind.v2.model.'annotation'.Locatable r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r11, $r12, $r17, $r23, $r29, $r45;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.model.impl.ModelBuilder;

        r2 := @parameter1: com.sun.xml.bind.v2.model.'annotation'.Locatable;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.TypeInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ModelBuilder,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r1, r2);

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean baseClassComputed> = 0;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasSubClasses> = 0;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object factoryMethod> = null;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz> = r3;

        $z0 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r3 != null goto label01;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label01:
        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName parseElementName(java.lang.Object)>(r3);

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName elementName> = $r4;

        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r6 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlType;", r3, r0);

        $r40 = (javax.xml.bind.'annotation'.XmlType) $r6;

        $r7 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName parseTypeName(java.lang.Object,javax.xml.bind.'annotation'.XmlType)>(r3, $r40);

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName typeName> = $r7;

        if $r40 == null goto label05;

        $r36 = interfaceinvoke $r40.<javax.xml.bind.'annotation'.XmlType: java.lang.String[] propOrder()>();

        $i0 = lengthof $r36;

        if $i0 != 0 goto label02;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = null;

        goto label04;

     label02:
        $r37 = $r36[0];

        $i1 = virtualinvoke $r37.<java.lang.String: int length()>();

        if $i1 != 0 goto label03;

        $r39 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] DEFAULT_ORDER>;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = $r39;

        goto label04;

     label03:
        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = $r36;

     label04:
        goto label06;

     label05:
        $r8 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] DEFAULT_ORDER>;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = $r8;

     label06:
        $r9 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlAccessorOrder;", r3, r0);

        $r38 = (javax.xml.bind.'annotation'.XmlAccessorOrder) $r10;

        if $r38 == null goto label07;

        $r34 = interfaceinvoke $r38.<javax.xml.bind.'annotation'.XmlAccessorOrder: javax.xml.bind.'annotation'.XmlAccessOrder value()>();

        $r35 = <javax.xml.bind.'annotation'.XmlAccessOrder: javax.xml.bind.'annotation'.XmlAccessOrder UNDEFINED>;

        if $r34 != $r35 goto label07;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = null;

     label07:
        $r42 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r43 = interfaceinvoke $r42.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(class "Ljavax/xml/bind/annotation/XmlAccessorOrder;", r3, r0);

        $r44 = (javax.xml.bind.'annotation'.XmlAccessorOrder) $r43;

        if $r44 == null goto label08;

        $r32 = interfaceinvoke $r44.<javax.xml.bind.'annotation'.XmlAccessorOrder: javax.xml.bind.'annotation'.XmlAccessOrder value()>();

        $r33 = <javax.xml.bind.'annotation'.XmlAccessOrder: javax.xml.bind.'annotation'.XmlAccessOrder UNDEFINED>;

        if $r32 != $r33 goto label08;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder> = null;

     label08:
        $r45 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z4 = interfaceinvoke $r45.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isInterface(java.lang.Object)>(r3);

        if $z4 == 0 goto label09;

        $r26 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r28 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages CANT_HANDLE_INTERFACE>;

        $r27 = newarray (java.lang.Object)[1];

        $r29 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r30 = interfaceinvoke $r29.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>(r3);

        $r27[0] = $r30;

        $r31 = virtualinvoke $r28.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r27);

        specialinvoke $r26.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r31, r0);

        virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r26);

     label09:
        $z1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasFactoryConstructor(javax.xml.bind.'annotation'.XmlType)>($r40);

        if $z1 != 0 goto label11;

        $r11 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z2 = interfaceinvoke $r11.<com.sun.xml.bind.v2.model.nav.Navigator: boolean hasDefaultConstructor(java.lang.Object)>(r3);

        if $z2 != 0 goto label11;

        $r12 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z3 = interfaceinvoke $r12.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isInnerClass(java.lang.Object)>(r3);

        if $z3 == 0 goto label10;

        $r20 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r22 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages CANT_HANDLE_INNER_CLASS>;

        $r21 = newarray (java.lang.Object)[1];

        $r23 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r24 = interfaceinvoke $r23.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>(r3);

        $r21[0] = $r24;

        $r25 = virtualinvoke $r22.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r21);

        specialinvoke $r20.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r25, r0);

        virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r20);

        goto label11;

     label10:
        $r13 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName elementName>;

        if $r13 == null goto label11;

        $r14 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r16 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages NO_DEFAULT_CONSTRUCTOR>;

        $r15 = newarray (java.lang.Object)[1];

        $r17 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r18 = interfaceinvoke $r17.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>(r3);

        $r15[0] = $r18;

        $r19 = virtualinvoke $r16.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r15);

        specialinvoke $r14.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r19, r0);

        virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r14);

     label11:
        return;
    }

    public com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()
    {
        com.sun.xml.bind.v2.model.core.NonElement $r7;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r8, $r9, $r10;
        java.lang.Object $r2, $r3, $r5;
        com.sun.xml.bind.v2.model.nav.Navigator $r1, $r4;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r6;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean baseClassComputed>;

        if $z0 != 0 goto label5;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getSuperClass(java.lang.Object)>($r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Class)>(class "Ljava/lang/Object;");

        if $r3 != $r5 goto label2;

     label1:
        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass> = null;

        goto label4;

     label2:
        $r6 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.model.impl.ModelBuilder: com.sun.xml.bind.v2.model.core.NonElement getClassInfo(java.lang.Object,boolean,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r3, 1, r0);

        $z1 = $r7 instanceof com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        if $z1 == 0 goto label3;

        $r8 = (com.sun.xml.bind.v2.model.impl.ClassInfoImpl) $r7;

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass> = $r8;

        $r9 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass>;

        $r9.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasSubClasses> = 1;

        goto label4;

     label3:
        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass> = null;

     label4:
        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean baseClassComputed> = 1;

     label5:
        $r10 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl baseClass>;

        return $r10;
    }

    public final com.sun.xml.bind.v2.model.core.Element getSubstitutionHead()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isElement()>();

        if $z0 != 0 goto label2;

        r1 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        goto label1;

     label2:
        return r1;
    }

    public final java.lang.Object getClazz()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        return $r1;
    }

    public com.sun.xml.bind.v2.model.impl.ClassInfoImpl getScope()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        return null;
    }

    public final java.lang.Object getType()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r2, $r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object use(java.lang.Object)>($r2);

        return $r3;
    }

    public boolean canBeReferencedByIDREF()
    {
        java.util.Iterator $r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r3;
        com.sun.xml.bind.v2.model.core.PropertyInfo r5;
        java.util.List $r1;
        java.lang.Object $r4;
        com.sun.xml.bind.v2.model.core.ID $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r4;

        $r6 = interfaceinvoke r5.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.ID id()>();

        $r7 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID ID>;

        if $r6 != $r7 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        $r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        if $r3 == null goto label4;

        $z1 = virtualinvoke $r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean canBeReferencedByIDREF()>();

        return $z1;

     label4:
        return 0;
    }

    public final java.lang.String getName()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r2;
        java.lang.String $r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r2);

        return $r3;
    }

    public java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r1;
        java.lang.'annotation'.Annotation $r4;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Class r2;
        java.lang.Object $r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r4 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r2, $r3, r0);

        return $r4;
    }

    public com.sun.xml.bind.v2.model.core.Element asElement()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isElement()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public java.util.List getProperties()
    {
        javax.xml.bind.'annotation'.XmlAccessOrder $r7, $r8;
        com.sun.istack.FinalArrayList $r1, $r3, $r9, $r32, $r35, $r37, $r39, $r43;
        int[] $r18;
        boolean $z0, $z1, $z2;
        javax.xml.bind.'annotation'.XmlAccessType $r2;
        com.sun.xml.bind.v2.model.impl.Messages $r13, $r23, $r28;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r11, $r21, $r26;
        java.lang.Object[] $r12, $r22, $r27;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter $r34;
        java.lang.String[] $r5, $r6, $r33;
        java.lang.AssertionError $r31;
        int $i0, $i1;
        com.sun.xml.bind.v2.model.core.PropertyKind $r19;
        java.lang.String $r15, $r25, $r30;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r14, $r24, $r29;
        java.util.Iterator $r10, $r36;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r20;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r17, r40, r41, r42;
        java.lang.Object $r4, $r16, $r38;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        if $r1 == null goto label01;

        $r39 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        return $r39;

     label01:
        $r2 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.bind.'annotation'.XmlAccessType getAccessType()>();

        $r3 = new com.sun.istack.FinalArrayList;

        specialinvoke $r3.<com.sun.istack.FinalArrayList: void <init>()>();

        r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties> = $r3;

        $r4 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void findFieldProperties(java.lang.Object,javax.xml.bind.'annotation'.XmlAccessType)>($r4, $r2);

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void findGetterSetterProperties(javax.xml.bind.'annotation'.XmlAccessType)>($r2);

        $r6 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder>;

        $r5 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] DEFAULT_ORDER>;

        if $r6 == $r5 goto label02;

        $r33 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder>;

        if $r33 != null goto label04;

     label02:
        $r7 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.bind.'annotation'.XmlAccessOrder getAccessorOrder()>();

        $r8 = <javax.xml.bind.'annotation'.XmlAccessOrder: javax.xml.bind.'annotation'.XmlAccessOrder ALPHABETICAL>;

        if $r7 != $r8 goto label03;

        $r32 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r32);

     label03:
        goto label07;

     label04:
        $r34 = new com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter;

        specialinvoke $r34.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl)>(r0);

        $r35 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r36 = virtualinvoke $r35.<com.sun.istack.FinalArrayList: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r38 = interfaceinvoke $r36.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.sun.xml.bind.v2.model.impl.PropertyInfoImpl) $r38;

        staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter: int access$000(com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter,com.sun.xml.bind.v2.model.impl.PropertyInfoImpl)>($r34, r40);

        goto label05;

     label06:
        $r37 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r37, $r34);

        virtualinvoke $r34.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertySorter: void checkUnusedProperties()>();

     label07:
        r41 = null;

        r42 = null;

        $r9 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r10 = virtualinvoke $r9.<com.sun.istack.FinalArrayList: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.sun.xml.bind.v2.model.impl.PropertyInfoImpl) $r16;

        $r18 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$1: int[] $SwitchMap$com$sun$xml$bind$v2$model$core$PropertyKind>;

        $r19 = virtualinvoke r17.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $i0 = virtualinvoke $r19.<com.sun.xml.bind.v2.model.core.PropertyKind: int ordinal()>();

        $i1 = $r18[$i0];

        tableswitch($i1)
        {
            case 1: goto label09;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label13;
            default: goto label14;
        };

     label09:
        r42 = r17;

        goto label15;

     label10:
        if r41 == null goto label11;

        $r29 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r26 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r28 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages MULTIPLE_VALUE_PROPERTY>;

        $r27 = newarray (java.lang.Object)[0];

        $r30 = virtualinvoke $r28.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r27);

        specialinvoke $r26.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r30, r41, r17);

        virtualinvoke $r29.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r26);

     label11:
        $r20 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        if $r20 == null goto label12;

        $r24 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r21 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r23 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages XMLVALUE_IN_DERIVED_TYPE>;

        $r22 = newarray (java.lang.Object)[0];

        $r25 = virtualinvoke $r23.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r22);

        specialinvoke $r21.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r25, r17);

        virtualinvoke $r24.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r21);

     label12:
        r41 = r17;

        goto label15;

     label13:
        goto label15;

     label14:
        $z0 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label15;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label15:
        goto label08;

     label16:
        if r42 == null goto label17;

        if r41 == null goto label17;

        $r14 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r11 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r13 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ELEMENT_AND_VALUE_PROPERTY>;

        $r12 = newarray (java.lang.Object)[0];

        $r15 = virtualinvoke $r13.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r12);

        specialinvoke $r11.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r15, r41, r42);

        virtualinvoke $r14.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r11);

     label17:
        $r43 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        return $r43;
    }

    private void findFieldProperties(java.lang.Object, javax.xml.bind.'annotation'.XmlAccessType)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r15, $r17, $r23;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl $r18;
        java.util.Collection $r5;
        javax.xml.bind.'annotation'.XmlAccessType r13, $r14, $r21;
        com.sun.xml.bind.v2.model.impl.Messages $r27;
        java.lang.'annotation'.Annotation $r31;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r24;
        com.sun.xml.bind.v2.model.core.ClassInfo r32;
        java.lang.Object[] $r25;
        java.lang.'annotation'.Annotation[] $r9;
        com.sun.xml.bind.v2.model.impl.DummyPropertyInfo $r20;
        java.lang.String $r29, $r30;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r26;
        java.util.Iterator $r6;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.core.PropertyInfo $r16, $r19;
        java.lang.Object r2, $r3, $r7;
        com.sun.xml.bind.v2.model.nav.Navigator $r1, $r4, $r11, $r12, $r22, $r28;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Object;

        r13 := @parameter1: javax.xml.bind.'annotation'.XmlAccessType;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getSuperClass(java.lang.Object)>(r2);

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean shouldRecurseSuperClass(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void findFieldProperties(java.lang.Object,javax.xml.bind.'annotation'.XmlAccessType)>($r3, r13);

     label01:
        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.util.Collection getDeclaredFields(java.lang.Object)>(r2);

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z8 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label12;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r9 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation[] getAllFieldAnnotations(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r7, r0);

        $r10 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $z1 = interfaceinvoke $r10.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: boolean hasFieldAnnotation(java.lang.Class,java.lang.Object)>(class "Lcom/sun/xml/bind/annotation/OverrideAnnotationOf;", $r7);

        $r11 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z2 = interfaceinvoke $r11.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isTransient(java.lang.Object)>($r7);

        if $z2 == 0 goto label03;

        $z7 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r9);

        if $z7 == 0 goto label11;

        $r26 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r24 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r27 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages TRANSIENT_FIELD_NOT_BINDABLE>;

        $r25 = newarray (java.lang.Object)[1];

        $r28 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r29 = interfaceinvoke $r28.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getFieldName(java.lang.Object)>($r7);

        $r25[0] = $r29;

        $r30 = virtualinvoke $r27.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r25);

        $r31 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation getSomeJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r9);

        specialinvoke $r24.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation)>($r30, $r31);

        virtualinvoke $r26.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r24);

        goto label11;

     label03:
        $r12 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z3 = interfaceinvoke $r12.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isStaticField(java.lang.Object)>($r7);

        if $z3 == 0 goto label04;

        $z6 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r9);

        if $z6 == 0 goto label11;

        $r23 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)>($r7);

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void addProperty(com.sun.xml.bind.v2.model.impl.PropertySeed,java.lang.'annotation'.Annotation[],boolean)>($r23, $r9, 0);

        goto label11;

     label04:
        $r14 = <javax.xml.bind.'annotation'.XmlAccessType: javax.xml.bind.'annotation'.XmlAccessType FIELD>;

        if r13 == $r14 goto label06;

        $r21 = <javax.xml.bind.'annotation'.XmlAccessType: javax.xml.bind.'annotation'.XmlAccessType PUBLIC_MEMBER>;

        if r13 != $r21 goto label05;

        $r22 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z5 = interfaceinvoke $r22.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isPublicField(java.lang.Object)>($r7);

        if $z5 != 0 goto label06;

     label05:
        $z4 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r9);

        if $z4 == 0 goto label10;

     label06:
        if $z1 == 0 goto label09;

        r32 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

     label07:
        if r32 == null goto label08;

        $r19 = interfaceinvoke r32.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.PropertyInfo getProperty(java.lang.String)>("content");

        if $r19 != null goto label08;

        r32 = interfaceinvoke r32.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.ClassInfo getBaseClass()>();

        goto label07;

     label08:
        $r16 = interfaceinvoke r32.<com.sun.xml.bind.v2.model.core.ClassInfo: com.sun.xml.bind.v2.model.core.PropertyInfo getProperty(java.lang.String)>("content");

        $r20 = (com.sun.xml.bind.v2.model.impl.DummyPropertyInfo) $r16;

        $r17 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)>($r7);

        $r18 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl createReferenceProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>($r17);

        interfaceinvoke $r20.<com.sun.xml.bind.v2.model.impl.DummyPropertyInfo: void addType(com.sun.xml.bind.v2.model.impl.PropertyInfoImpl)>($r18);

        goto label10;

     label09:
        $r15 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)>($r7);

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void addProperty(com.sun.xml.bind.v2.model.impl.PropertySeed,java.lang.'annotation'.Annotation[],boolean)>($r15, $r9, 0);

     label10:
        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkFieldXmlLocation(java.lang.Object)>($r7);

     label11:
        goto label02;

     label12:
        return;
    }

    public final boolean hasValueProperty()
    {
        java.util.Iterator $r3;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r1;
        com.sun.xml.bind.v2.model.core.PropertyInfo r5;
        java.util.List $r2;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        if $r1 == null goto label1;

        $z1 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasValueProperty()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r4;

        $z0 = r5 instanceof com.sun.xml.bind.v2.model.core.ValuePropertyInfo;

        if $z0 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public com.sun.xml.bind.v2.model.core.PropertyInfo getProperty(java.lang.String)
    {
        java.util.Iterator $r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.core.PropertyInfo r4;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r6 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r3;

        $r5 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.core.PropertyInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    protected void checkFieldXmlLocation(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    private java.lang.'annotation'.Annotation getClassOrPackageAnnotation(java.lang.Class)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r1, $r5;
        java.lang.'annotation'.Annotation $r4, $r7;
        java.lang.Class r2;
        java.lang.Object $r3, $r6;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r4 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getClassAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r2, $r3, r0);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r5 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r6 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r7 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation getPackageAnnotation(java.lang.Class,java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r2, $r6, r0);

        return $r7;
    }

    private javax.xml.bind.'annotation'.XmlAccessType getAccessType()
    {
        javax.xml.bind.'annotation'.XmlAccessorType r2;
        java.lang.'annotation'.Annotation $r1;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        javax.xml.bind.'annotation'.XmlAccessType $r3, $r4;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation getClassOrPackageAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlAccessorType;");

        r2 = (javax.xml.bind.'annotation'.XmlAccessorType) $r1;

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<javax.xml.bind.'annotation'.XmlAccessorType: javax.xml.bind.'annotation'.XmlAccessType value()>();

        return $r4;

     label1:
        $r3 = <javax.xml.bind.'annotation'.XmlAccessType: javax.xml.bind.'annotation'.XmlAccessType PUBLIC_MEMBER>;

        return $r3;
    }

    private javax.xml.bind.'annotation'.XmlAccessOrder getAccessorOrder()
    {
        javax.xml.bind.'annotation'.XmlAccessOrder $r3, $r4;
        javax.xml.bind.'annotation'.XmlAccessorOrder r2;
        java.lang.'annotation'.Annotation $r1;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation getClassOrPackageAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlAccessorOrder;");

        r2 = (javax.xml.bind.'annotation'.XmlAccessorOrder) $r1;

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<javax.xml.bind.'annotation'.XmlAccessorOrder: javax.xml.bind.'annotation'.XmlAccessOrder value()>();

        return $r4;

     label1:
        $r3 = <javax.xml.bind.'annotation'.XmlAccessOrder: javax.xml.bind.'annotation'.XmlAccessOrder UNDEFINED>;

        return $r3;
    }

    public boolean hasProperties()
    {
        com.sun.istack.FinalArrayList $r1;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $z0 = virtualinvoke $r1.<com.sun.istack.FinalArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static transient java.lang.Object pickOne(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static transient java.util.List makeSet(java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.sun.istack.FinalArrayList $r0;
        int i0, i1;
        java.lang.Object r2;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new com.sun.istack.FinalArrayList;

        specialinvoke $r0.<com.sun.istack.FinalArrayList: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private void checkConflict(java.lang.'annotation'.Annotation, java.lang.'annotation'.Annotation) throws com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException
    {
        java.lang.'annotation'.Annotation r0, r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r4;
        java.lang.AssertionError $r3;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException $r1;
        boolean $z0;

        r4 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.'annotation'.Annotation;

        $z0 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        if r0 == null goto label2;

        $r1 = new com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException;

        specialinvoke $r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException: void <init>(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r0, r2);

        throw $r1;

     label2:
        return;
    }

    private void addProperty(com.sun.xml.bind.v2.model.impl.PropertySeed, java.lang.'annotation'.Annotation[], boolean)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed r4, $r15, $r28, $r34, $r43;
        java.lang.Integer r127;
        com.sun.istack.FinalArrayList $r5, $r7, $r9, $r11, $r13;
        java.lang.StringBuilder $r91, $r97, $r98, $r100;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] r129;
        java.lang.Object[] $r21, $r30, $r36, $r51, $r79, $r90;
        javax.xml.bind.'annotation'.XmlMixed r124;
        java.lang.Class[] r47;
        javax.xml.bind.'annotation'.XmlAnyElement r123;
        com.sun.xml.bind.'annotation'.OverrideAnnotationOf r125;
        javax.xml.bind.'annotation'.XmlElementRef r121;
        javax.xml.bind.'annotation'.XmlElements r120;
        int[] $r2;
        javax.xml.bind.'annotation'.XmlAnyAttribute r116;
        com.sun.xml.bind.v2.model.impl.Messages $r23, $r31, $r38, $r53, $r82, $r93;
        javax.xml.bind.'annotation'.XmlElementRefs r122;
        java.lang.'annotation'.Annotation $r49, $r68, $r71, $r80, $r86, $r87, $r103, $r107, $r112, $r114, r126;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r20, $r29, $r35, $r50, $r78, $r89;
        java.lang.'annotation'.Annotation[] r0, $r65, $r66, $r69;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11, $i12, i13, i14, i15;
        java.lang.Object $r17, $r19, $r25, $r40, $r57, $r59, $r61, $r63, $r67, $r70, $r76, $r95, $r102, $r106, $r111, $r113;
        java.lang.Class r48, $r75, $r83, $r104, $r108;
        com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl $r14;
        javax.xml.bind.'annotation'.XmlElement r119;
        com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl $r12;
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl $r10;
        javax.xml.bind.'annotation'.XmlValue r118;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup $r1, r128;
        java.lang.AssertionError $r44, $r45, $r64;
        java.lang.String $r26, $r27, $r33, $r41, $r42, $r54, $r55, $r84, $r85, $r96, $r99, $r101, $r105, $r109, $r110;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r22, $r32, $r37, $r52, $r81, $r92;
        javax.xml.bind.'annotation'.XmlAttribute r117;
        com.sun.xml.bind.v2.model.nav.Navigator $r16, $r18, $r24, $r39, $r56, $r58, $r60, $r62, $r94;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl $r8;
        javax.xml.bind.'annotation'.XmlTransient r115;
        java.util.List $r72, r130;
        com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl $r6;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException $r77;
        java.util.HashMap $r74;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation r46;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException $r73, $r88;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r3;

        r3 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r4 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        r0 := @parameter1: java.lang.'annotation'.Annotation[];

        z11 := @parameter2: boolean;

        r115 = null;

        r116 = null;

        r117 = null;

        r118 = null;

        r119 = null;

        r120 = null;

        r121 = null;

        r122 = null;

        r123 = null;

        r124 = null;

        r125 = null;

        i7 = 0;

     label01:
        i8 = lengthof r0;

        i9 = 0;

     label02:
        if i9 >= i8 goto label17;

        r126 = r0[i9];

        $r74 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.HashMap ANNOTATION_NUMBER_MAP>;

        $r75 = interfaceinvoke r126.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r76 = virtualinvoke $r74.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r75);

        r127 = (java.lang.Integer) $r76;

        if r127 != null goto label03;

        goto label16;

     label03:
        $i3 = virtualinvoke r127.<java.lang.Integer: int intValue()>();

        tableswitch($i3)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label11;
            case 8: goto label12;
            case 9: goto label13;
            case 10: goto label14;
            default: goto label15;
        };

     label04:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r115, r126);

        r115 = (javax.xml.bind.'annotation'.XmlTransient) r126;

        goto label16;

     label05:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r116, r126);

        r116 = (javax.xml.bind.'annotation'.XmlAnyAttribute) r126;

        goto label16;

     label06:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r117, r126);

        r117 = (javax.xml.bind.'annotation'.XmlAttribute) r126;

        goto label16;

     label07:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r118, r126);

        r118 = (javax.xml.bind.'annotation'.XmlValue) r126;

        goto label16;

     label08:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r119, r126);

        r119 = (javax.xml.bind.'annotation'.XmlElement) r126;

        goto label16;

     label09:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r120, r126);

        r120 = (javax.xml.bind.'annotation'.XmlElements) r126;

        goto label16;

     label10:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r121, r126);

        r121 = (javax.xml.bind.'annotation'.XmlElementRef) r126;

        goto label16;

     label11:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r122, r126);

        r122 = (javax.xml.bind.'annotation'.XmlElementRefs) r126;

        goto label16;

     label12:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r123, r126);

        r123 = (javax.xml.bind.'annotation'.XmlAnyElement) r126;

        goto label16;

     label13:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r124, r126);

        r124 = (javax.xml.bind.'annotation'.XmlMixed) r126;

        goto label16;

     label14:
        specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void checkConflict(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(r125, r126);

        r125 = (com.sun.xml.bind.'annotation'.OverrideAnnotationOf) r126;

        goto label16;

     label15:
        $i4 = virtualinvoke r127.<java.lang.Integer: int intValue()>();

        $i5 = $i4 - 20;

        $i6 = 1 << $i5;

        i7 = i7 | $i6;

     label16:
        i9 = i9 + 1;

        goto label02;

     label17:
        r128 = null;

        i10 = 0;

        if r115 == null goto label18;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup TRANSIENT>;

        i10 = 1;

     label18:
        if r116 == null goto label19;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ANY_ATTRIBUTE>;

        i10 = i10 + 1;

     label19:
        if r117 == null goto label20;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ATTRIBUTE>;

        i10 = i10 + 1;

     label20:
        if r118 == null goto label21;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup VALUE>;

        i10 = i10 + 1;

     label21:
        if r119 != null goto label22;

        if r120 == null goto label23;

     label22:
        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ELEMENT>;

        i10 = i10 + 1;

     label23:
        if r121 != null goto label24;

        if r122 != null goto label24;

        if r123 != null goto label24;

        if r124 != null goto label24;

        if r125 == null goto label25;

     label24:
        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ELEMENT_REF>;

        i10 = i10 + 1;

     label25:
        if i10 <= 1 goto label26;

        $r65 = newarray (java.lang.'annotation'.Annotation)[6];

        $r65[0] = r115;

        $r65[1] = r116;

        $r65[2] = r117;

        $r65[3] = r118;

        $r66 = newarray (java.lang.'annotation'.Annotation)[2];

        $r66[0] = r119;

        $r66[1] = r120;

        $r67 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object pickOne(java.lang.Object[])>($r66);

        $r68 = (java.lang.'annotation'.Annotation) $r67;

        $r65[4] = $r68;

        $r69 = newarray (java.lang.'annotation'.Annotation)[3];

        $r69[0] = r121;

        $r69[1] = r122;

        $r69[2] = r123;

        $r70 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object pickOne(java.lang.Object[])>($r69);

        $r71 = (java.lang.'annotation'.Annotation) $r70;

        $r65[5] = $r71;

        $r72 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List makeSet(java.lang.Object[])>($r65);

        $r73 = new com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException;

        specialinvoke $r73.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException: void <init>(java.util.List)>($r72);

        throw $r73;

     label26:
        if r128 != null goto label29;

        $z8 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z8 != 0 goto label27;

        if i10 == 0 goto label27;

        $r64 = new java.lang.AssertionError;

        specialinvoke $r64.<java.lang.AssertionError: void <init>()>();

        throw $r64;

     label27:
        $r60 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r61 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        $r62 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r63 = interfaceinvoke $r62.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/util/Map;");

        $z9 = interfaceinvoke $r60.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r61, $r63);

        if $z9 == 0 goto label28;

        $z10 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;");

        if $z10 != 0 goto label28;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup MAP>;

        goto label30;

     label28:
        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ELEMENT>;

        goto label30;

     label29:
        $r1 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup ELEMENT>;

        $z0 = virtualinvoke r128.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label30;

        $r56 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r57 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        $r58 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r59 = interfaceinvoke $r58.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/util/Map;");

        $z6 = interfaceinvoke $r56.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r57, $r59);

        if $z6 == 0 goto label30;

        $z7 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: boolean hasAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/adapters/XmlJavaTypeAdapter;");

        if $z7 != 0 goto label30;

        r128 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup MAP>;

     label30:
        $i11 = r128.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: int allowedsecondaryAnnotations>;

        $i12 = i7 & $i11;

        if $i12 == 0 goto label38;

        r129 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] SECONDARY_ANNOTATIONS>;

        i13 = lengthof r129;

        i14 = 0;

     label31:
        if i14 >= i13 goto label37;

        r46 = r129[i14];

        $z5 = virtualinvoke r128.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: boolean allows(com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation)>(r46);

        if $z5 == 0 goto label32;

        goto label36;

     label32:
        r47 = r46.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation: java.lang.Class[] members>;

        i2 = lengthof r47;

        i15 = 0;

     label33:
        if i15 >= i2 goto label36;

        r48 = r47[i15];

        $r49 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.'annotation'.Annotation readAnnotation(java.lang.Class)>(r48);

        if $r49 == null goto label35;

        $r52 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r50 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r53 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ANNOTATION_NOT_ALLOWED>;

        $r51 = newarray (java.lang.Object)[1];

        $r54 = virtualinvoke r48.<java.lang.Class: java.lang.String getSimpleName()>();

        $r51[0] = $r54;

        $r55 = virtualinvoke $r53.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r51);

        specialinvoke $r50.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation)>($r55, $r49);

        virtualinvoke $r52.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r50);

     label34:
        return;

     label35:
        i15 = i15 + 1;

        goto label33;

     label36:
        i14 = i14 + 1;

        goto label31;

     label37:
        $z4 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z4 != 0 goto label38;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>()>();

        throw $r45;

     label38:
        $r2 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$1: int[] $SwitchMap$com$sun$xml$bind$v2$model$impl$ClassInfoImpl$PropertyGroup>;

        $i0 = virtualinvoke r128.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$PropertyGroup: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label39;
            case 2: goto label40;
            case 3: goto label47;
            case 4: goto label49;
            case 5: goto label51;
            case 6: goto label53;
            case 7: goto label55;
            default: goto label57;
        };

     label39:
        return;

     label40:
        $r15 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        if $r15 == null goto label42;

        $r37 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r35 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r38 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages TWO_ATTRIBUTE_WILDCARDS>;

        $r36 = newarray (java.lang.Object)[1];

        $r39 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r40 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r41 = interfaceinvoke $r39.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r40);

        $r36[0] = $r41;

        $r42 = virtualinvoke $r38.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r36);

        $r43 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        specialinvoke $r35.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r42, r116, $r43);

        virtualinvoke $r37.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r35);

     label41:
        return;

     label42:
        r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard> = r4;

        $z1 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean inheritsAttributeWildcard()>();

        if $z1 == 0 goto label44;

        $r32 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r29 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r31 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages SUPER_CLASS_HAS_WILDCARD>;

        $r30 = newarray (java.lang.Object)[0];

        $r33 = virtualinvoke $r31.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r30);

        $r34 = specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed getInheritedAttributeWildcard()>();

        specialinvoke $r29.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r33, r116, $r34);

        virtualinvoke $r32.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r29);

     label43:
        return;

     label44:
        $r16 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r17 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        $r18 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r19 = interfaceinvoke $r18.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljava/util/Map;");

        $z2 = interfaceinvoke $r16.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSubClassOf(java.lang.Object,java.lang.Object)>($r17, $r19);

        if $z2 != 0 goto label46;

        $r22 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r20 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r23 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages INVALID_ATTRIBUTE_WILDCARD_TYPE>;

        $r21 = newarray (java.lang.Object)[1];

        $r24 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r25 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.Object getRawType()>();

        $r26 = interfaceinvoke $r24.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r25);

        $r21[0] = $r26;

        $r27 = virtualinvoke $r23.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r21);

        $r28 = specialinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed getInheritedAttributeWildcard()>();

        specialinvoke $r20.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r27, r116, $r28);

        virtualinvoke $r22.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r20);

     label45:
        return;

     label46:
        return;

     label47:
        $r13 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r14 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl createAttributeProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>(r4);

        virtualinvoke $r13.<com.sun.istack.FinalArrayList: boolean add(java.lang.Object)>($r14);

     label48:
        return;

     label49:
        $r11 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r12 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl createValueProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>(r4);

        virtualinvoke $r11.<com.sun.istack.FinalArrayList: boolean add(java.lang.Object)>($r12);

     label50:
        return;

     label51:
        $r9 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r10 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl createElementProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>(r4);

        virtualinvoke $r9.<com.sun.istack.FinalArrayList: boolean add(java.lang.Object)>($r10);

     label52:
        return;

     label53:
        $r7 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r8 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl createReferenceProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>(r4);

        virtualinvoke $r7.<com.sun.istack.FinalArrayList: boolean add(java.lang.Object)>($r8);

     label54:
        return;

     label55:
        $r5 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r6 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl createMapProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)>(r4);

        virtualinvoke $r5.<com.sun.istack.FinalArrayList: boolean add(java.lang.Object)>($r6);

     label56:
        return;

     label57:
        $z3 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled>;

        if $z3 != 0 goto label58;

        $r44 = new java.lang.AssertionError;

        specialinvoke $r44.<java.lang.AssertionError: void <init>()>();

        throw $r44;

     label58:
        goto label61;

     label59:
        $r88 := @caughtexception;

        r130 = $r88.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException: java.util.List annotations>;

        $r92 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r89 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r93 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages MUTUALLY_EXCLUSIVE_ANNOTATIONS>;

        $r90 = newarray (java.lang.Object)[3];

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r95 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object getClazz()>();

        $r96 = interfaceinvoke $r94.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r95);

        $r97 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r96);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r99 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.impl.PropertySeed: java.lang.String getName()>();

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r99);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        $r90[0] = $r101;

        $r102 = interfaceinvoke r130.<java.util.List: java.lang.Object get(int)>(0);

        $r103 = (java.lang.'annotation'.Annotation) $r102;

        $r104 = interfaceinvoke $r103.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r105 = virtualinvoke $r104.<java.lang.Class: java.lang.String getName()>();

        $r90[1] = $r105;

        $r106 = interfaceinvoke r130.<java.util.List: java.lang.Object get(int)>(1);

        $r107 = (java.lang.'annotation'.Annotation) $r106;

        $r108 = interfaceinvoke $r107.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r109 = virtualinvoke $r108.<java.lang.Class: java.lang.String getName()>();

        $r90[2] = $r109;

        $r110 = virtualinvoke $r93.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r90);

        $r111 = interfaceinvoke r130.<java.util.List: java.lang.Object get(int)>(0);

        $r112 = (java.lang.'annotation'.Annotation) $r111;

        $r113 = interfaceinvoke r130.<java.util.List: java.lang.Object get(int)>(1);

        $r114 = (java.lang.'annotation'.Annotation) $r113;

        specialinvoke $r89.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r110, $r112, $r114);

        virtualinvoke $r92.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r89);

        goto label61;

     label60:
        $r77 := @caughtexception;

        $r81 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r78 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r82 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages DUPLICATE_ANNOTATIONS>;

        $r79 = newarray (java.lang.Object)[1];

        $r80 = $r77.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException: java.lang.'annotation'.Annotation a1>;

        $r83 = interfaceinvoke $r80.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r84 = virtualinvoke $r83.<java.lang.Class: java.lang.String getName()>();

        $r79[0] = $r84;

        $r85 = virtualinvoke $r82.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r79);

        $r87 = $r77.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException: java.lang.'annotation'.Annotation a1>;

        $r86 = $r77.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException: java.lang.'annotation'.Annotation a2>;

        specialinvoke $r78.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r85, $r87, $r86);

        virtualinvoke $r81.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r78);

     label61:
        return;

        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label01 to label34 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label35 to label39 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label40 to label41 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label42 to label43 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label44 to label45 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label47 to label48 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label49 to label50 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label51 to label52 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label53 to label54 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label55 to label56 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$ConflictException from label57 to label58 with label59;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label01 to label34 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label35 to label39 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label40 to label41 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label42 to label43 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label44 to label45 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label47 to label48 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label49 to label50 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label51 to label52 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label53 to label54 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label55 to label56 with label60;
        catch com.sun.xml.bind.v2.model.impl.ClassInfoImpl$DuplicateException from label57 to label58 with label60;
    }

    protected com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl createReferenceProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ReferencePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl createAttributeProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.AttributePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl createValueProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ValuePropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl createElementProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl $r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.ElementPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl createMapProperty(com.sun.xml.bind.v2.model.impl.PropertySeed)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.PropertySeed r2;
        com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: com.sun.xml.bind.v2.model.impl.PropertySeed;

        $r0 = new com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.MapPropertyInfoImpl: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,com.sun.xml.bind.v2.model.impl.PropertySeed)>(r1, r2);

        return $r0;
    }

    private void findGetterSetterProperties(javax.xml.bind.'annotation'.XmlAccessType)
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r57;
        java.util.Set $r7, $r8, $r10, $r11;
        java.lang.Object[] $r24, $r27, $r36;
        java.util.TreeSet $r6;
        java.util.LinkedHashMap $r0, $r1;
        java.lang.String r13, $r33, $r38, $r39;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r28;
        com.sun.xml.bind.v2.model.nav.Navigator $r4, $r20, $r21, $r23, $r30, $r31, $r34, $r35, $r41, $r43, $r44, $r45, $r48, $r51;
        com.sun.xml.bind.v2.model.'annotation'.MethodLocatable $r40, $r42, $r47, $r50;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r46, $r49;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z11, $z12, $z13, $z14;
        javax.xml.bind.'annotation'.XmlAccessType r18, $r19, $r55;
        com.sun.xml.bind.v2.model.impl.Messages $r29;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r26;
        java.lang.'annotation'.Annotation[] r16, r17, $r53, $r54, r56;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Iterator $r9;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r2;
        java.lang.Object $r3, $r5, $r12, $r14, $r15, $r22, $r25, $r32, $r37, r52;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r18 := @parameter0: javax.xml.bind.'annotation'.XmlAccessType;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r52 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

     label01:
        $r3 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void collectGetterSetters(java.lang.Object,java.util.Map,java.util.Map)>($r3, $r0, $r1);

        $r4 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getSuperClass(java.lang.Object)>(r52);

        r52 = $r5;

        $z0 = specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean shouldRecurseSuperClass(java.lang.Object)>($r5);

        if $z0 != 0 goto label01;

        $r6 = new java.util.TreeSet;

        $r7 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.Collection)>($r7);

        $r8 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r6.<java.util.Set: boolean retainAll(java.util.Collection)>($r8);

        specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void resurrect(java.util.Map,java.util.Set)>($r0, $r6);

        specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void resurrect(java.util.Map,java.util.Set)>($r1, $r6);

        $r9 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z9 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label21;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r12;

        $r14 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r15 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        if $r14 == null goto label03;

        $r49 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r50 = new com.sun.xml.bind.v2.model.'annotation'.MethodLocatable;

        $r51 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r50.<com.sun.xml.bind.v2.model.'annotation'.MethodLocatable: void <init>(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>(r2, $r14, $r51);

        $r53 = interfaceinvoke $r49.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation[] getAllMethodAnnotations(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r14, $r50);

        goto label04;

     label03:
        $r53 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation[] EMPTY_ANNOTATIONS>;

     label04:
        r16 = $r53;

        if $r15 == null goto label05;

        $r46 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r47 = new com.sun.xml.bind.v2.model.'annotation'.MethodLocatable;

        $r48 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r47.<com.sun.xml.bind.v2.model.'annotation'.MethodLocatable: void <init>(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>(r2, $r15, $r48);

        $r54 = interfaceinvoke $r46.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation[] getAllMethodAnnotations(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r15, $r47);

        goto label06;

     label05:
        $r54 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation[] EMPTY_ANNOTATIONS>;

     label06:
        r17 = $r54;

        $z1 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>(r16);

        if $z1 != 0 goto label07;

        $z8 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r54);

        if $z8 == 0 goto label08;

     label07:
        $z14 = 1;

        $z13 = 1;

        goto label09;

     label08:
        $z14 = 0;

        $z13 = 0;

     label09:
        z2 = $z13;

        z11 = 0;

        if $z14 != 0 goto label12;

        if $r14 == null goto label10;

        $r44 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z6 = interfaceinvoke $r44.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isOverriding(java.lang.Object,java.lang.Object)>($r14, $r5);

        if $z6 == 0 goto label10;

        if $r15 == null goto label10;

        $r45 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z7 = interfaceinvoke $r45.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isOverriding(java.lang.Object,java.lang.Object)>($r15, $r5);

        if $z7 == 0 goto label10;

        $z12 = 1;

        goto label11;

     label10:
        $z12 = 0;

     label11:
        z11 = $z12;

     label12:
        $r55 = <javax.xml.bind.'annotation'.XmlAccessType: javax.xml.bind.'annotation'.XmlAccessType PROPERTY>;

        if r18 != $r55 goto label13;

        if z11 == 0 goto label15;

     label13:
        $r19 = <javax.xml.bind.'annotation'.XmlAccessType: javax.xml.bind.'annotation'.XmlAccessType PUBLIC_MEMBER>;

        if r18 != $r19 goto label14;

        $z4 = specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isConsideredPublic(java.lang.Object)>($r14);

        if $z4 == 0 goto label14;

        $z5 = specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isConsideredPublic(java.lang.Object)>($r15);

        if $z5 == 0 goto label14;

        if z11 == 0 goto label15;

     label14:
        if z2 == 0 goto label20;

     label15:
        if $r14 == null goto label16;

        if $r15 == null goto label16;

        $r20 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r21 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r22 = interfaceinvoke $r21.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getReturnType(java.lang.Object)>($r14);

        $r23 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r24 = interfaceinvoke $r23.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object[] getMethodParameters(java.lang.Object)>($r15);

        $r25 = $r24[0];

        $z3 = interfaceinvoke $r20.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r22, $r25);

        if $z3 != 0 goto label16;

        $r28 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r26 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r29 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages GETTER_SETTER_INCOMPATIBLE_TYPE>;

        $r27 = newarray (java.lang.Object)[2];

        $r30 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r31 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r32 = interfaceinvoke $r31.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getReturnType(java.lang.Object)>($r14);

        $r33 = interfaceinvoke $r30.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r32);

        $r27[0] = $r33;

        $r34 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r35 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r36 = interfaceinvoke $r35.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object[] getMethodParameters(java.lang.Object)>($r15);

        $r37 = $r36[0];

        $r38 = interfaceinvoke $r34.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getTypeName(java.lang.Object)>($r37);

        $r27[1] = $r38;

        $r39 = virtualinvoke $r29.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r27);

        $r40 = new com.sun.xml.bind.v2.model.'annotation'.MethodLocatable;

        $r41 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r40.<com.sun.xml.bind.v2.model.'annotation'.MethodLocatable: void <init>(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>(r2, $r14, $r41);

        $r42 = new com.sun.xml.bind.v2.model.'annotation'.MethodLocatable;

        $r43 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        specialinvoke $r42.<com.sun.xml.bind.v2.model.'annotation'.MethodLocatable: void <init>(com.sun.xml.bind.v2.model.'annotation'.Locatable,java.lang.Object,com.sun.xml.bind.v2.model.nav.Navigator)>(r2, $r15, $r43);

        specialinvoke $r26.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r39, $r40, $r42);

        virtualinvoke $r28.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r26);

        goto label02;

     label16:
        $i7 = lengthof r16;

        if $i7 != 0 goto label17;

        r56 = r17;

        goto label19;

     label17:
        $i0 = lengthof r17;

        if $i0 != 0 goto label18;

        r56 = r16;

        goto label19;

     label18:
        $i2 = lengthof r16;

        $i1 = lengthof r17;

        $i3 = $i2 + $i1;

        r56 = newarray (java.lang.'annotation'.Annotation)[$i3];

        $i4 = lengthof r16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r16, 0, r56, 0, $i4);

        $i6 = lengthof r16;

        $i5 = lengthof r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r17, 0, r56, $i6, $i5);

     label19:
        $r57 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed createAccessorSeed(java.lang.Object,java.lang.Object)>($r14, $r15);

        specialinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void addProperty(com.sun.xml.bind.v2.model.impl.PropertySeed,java.lang.'annotation'.Annotation[],boolean)>($r57, r56, 0);

     label20:
        goto label02;

     label21:
        $r10 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        $r11 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r11.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        return;
    }

    private void collectGetterSetters(java.lang.Object, java.util.Map, java.util.Map)
    {
        java.util.Map r8, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        java.util.Collection $r5;
        java.util.Set $r9, $r11;
        java.util.List $r17, r42, r45;
        java.lang.Object[] $r28, $r36;
        java.util.ArrayList $r40;
        java.util.LinkedHashMap $r6;
        int i0;
        java.lang.String $r34, $r38, $r41, r44;
        java.util.Map$Entry r43, r46;
        java.util.Iterator $r7, $r10, $r12, $r25;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object r2, $r3, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r26, r29, $r31, $r39;
        com.sun.xml.bind.v2.model.nav.Navigator $r1, $r4, $r23, $r27, $r30, $r32, $r33, $r35, $r37;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.util.Map;

        r14 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getSuperClass(java.lang.Object)>(r2);

        $z0 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean shouldRecurseSuperClass(java.lang.Object)>($r3);

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void collectGetterSetters(java.lang.Object,java.util.Map,java.util.Map)>($r3, r8, r14);

     label01:
        $r4 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r5 = interfaceinvoke $r4.<com.sun.xml.bind.v2.model.nav.Navigator: java.util.Collection getDeclaredMethods(java.lang.Object)>(r2);

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        $r7 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r31 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        z7 = 0;

        $r32 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z4 = interfaceinvoke $r32.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isBridgeMethod(java.lang.Object)>($r31);

        if $z4 == 0 goto label03;

        goto label02;

     label03:
        $r33 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r34 = interfaceinvoke $r33.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getMethodName(java.lang.Object)>($r31);

        $r35 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r36 = interfaceinvoke $r35.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object[] getMethodParameters(java.lang.Object)>($r31);

        i0 = lengthof $r36;

        $r37 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z5 = interfaceinvoke $r37.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isStaticMethod(java.lang.Object)>($r31);

        if $z5 == 0 goto label04;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void ensureNoAnnotation(java.lang.Object)>($r31);

        goto label02;

     label04:
        $r38 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String getPropertyNameFromGetMethod(java.lang.String)>($r34);

        if $r38 == null goto label05;

        if i0 != 0 goto label05;

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r31);

        z7 = 1;

     label05:
        $r41 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String getPropertyNameFromSetMethod(java.lang.String)>($r34);

        if $r41 == null goto label07;

        if i0 != 1 goto label07;

        $r39 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        r42 = (java.util.List) $r39;

        if null != r42 goto label06;

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        r42 = $r40;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r40);

     label06:
        interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>($r31);

        z7 = 1;

     label07:
        if z7 != 0 goto label08;

        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: void ensureNoAnnotation(java.lang.Object)>($r31);

     label08:
        goto label02;

     label09:
        $r9 = interfaceinvoke r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z8 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label15;

        $r19 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getKey()>();

        r44 = (java.lang.String) $r20;

        $r21 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r44);

        r45 = (java.util.List) $r22;

        if null != r45 goto label11;

        goto label10;

     label11:
        $r23 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r24 = interfaceinvoke $r23.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getReturnType(java.lang.Object)>($r21);

        $r25 = interfaceinvoke r45.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        $r27 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r28 = interfaceinvoke $r27.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object[] getMethodParameters(java.lang.Object)>($r26);

        r29 = $r28[0];

        $r30 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z3 = interfaceinvoke $r30.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>(r29, $r24);

        if $z3 == 0 goto label13;

        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, $r26);

        goto label14;

     label13:
        goto label12;

     label14:
        goto label10;

     label15:
        $r11 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.util.Map$Entry) $r13;

        $r15 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (java.util.List) $r16;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r18);

        goto label16;

     label17:
        return;
    }

    private boolean shouldRecurseSuperClass(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r3;
        java.lang.Object r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label2;

        $r2 = r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $z0 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.impl.ModelBuilder: boolean isReplaced(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $z1 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: boolean hasClassAnnotation(java.lang.Object,java.lang.Class)>(r0, class "Ljavax/xml/bind/annotation/XmlTransient;");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isConsideredPublic(java.lang.Object)
    {
        java.lang.Object r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        com.sun.xml.bind.v2.model.nav.Navigator $r2;
        boolean $z0, $z1;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z0 = interfaceinvoke $r2.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isPublicMethod(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void resurrect(java.util.Map, java.util.Set)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1, r5;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r7;
        java.lang.'annotation'.Annotation[] $r10;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r8;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r9, $r11;
        boolean $z0, $z1, $z2;

        r7 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r8 = virtualinvoke r7.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = interfaceinvoke $r8.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation[] getAllMethodAnnotations(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r9, r7);

        $z1 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])>($r10);

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label3:
        goto label1;

     label4:
        return;
    }

    private void ensureNoAnnotation(java.lang.Object)
    {
        java.lang.Object[] $r6;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.'annotation'.Annotation[] $r3;
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r1;
        com.sun.xml.bind.v2.model.impl.Messages $r7;
        int i0, i1;
        java.lang.'annotation'.Annotation r4;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r5;
        java.lang.Object r2;
        java.lang.String $r9;
        boolean $z0;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r8;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.'annotation'.Annotation[] getAllMethodAnnotations(java.lang.Object,com.sun.xml.bind.v2.model.'annotation'.Locatable)>(r2, r0);

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = $r3[i1];

        $z0 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isJAXBAnnotation(java.lang.'annotation'.Annotation)>(r4);

        if $z0 == 0 goto label2;

        $r8 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r5 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r7 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages ANNOTATION_ON_WRONG_METHOD>;

        $r6 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r7.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r6);

        specialinvoke $r5.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,java.lang.'annotation'.Annotation)>($r9, r4);

        virtualinvoke $r8.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r5);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private static boolean isJAXBAnnotation(java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r0;
        java.util.HashMap $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        $r1 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.HashMap ANNOTATION_NUMBER_MAP>;

        $r2 = interfaceinvoke r0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    private static boolean hasJAXBAnnotation(java.lang.'annotation'.Annotation[])
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.'annotation'.Annotation[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        $r1 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation getSomeJAXBAnnotation(java.lang.'annotation'.Annotation[])>(r0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.lang.'annotation'.Annotation getSomeJAXBAnnotation(java.lang.'annotation'.Annotation[])
    {
        int i0, i1;
        java.lang.'annotation'.Annotation r1;
        java.lang.'annotation'.Annotation[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean isJAXBAnnotation(java.lang.'annotation'.Annotation)>(r1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static java.lang.String getPropertyNameFromGetMethod(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 3 goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(3);

        return $r2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 2 goto label2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        return $r1;

     label2:
        return null;
    }

    private static java.lang.String getPropertyNameFromSetMethod(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 3 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(3);

        return $r1;

     label1:
        return null;
    }

    protected com.sun.xml.bind.v2.model.impl.PropertySeed createFieldSeed(java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        java.lang.Object r2;
        com.sun.xml.bind.v2.model.impl.FieldPropertySeed $r0;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.sun.xml.bind.v2.model.impl.FieldPropertySeed;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.FieldPropertySeed: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,java.lang.Object)>(r1, r2);

        return $r0;
    }

    protected com.sun.xml.bind.v2.model.impl.PropertySeed createAccessorSeed(java.lang.Object, java.lang.Object)
    {
        com.sun.xml.bind.v2.model.impl.GetterSetterPropertySeed $r0;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r1;
        java.lang.Object r2, r3;

        r1 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new com.sun.xml.bind.v2.model.impl.GetterSetterPropertySeed;

        specialinvoke $r0.<com.sun.xml.bind.v2.model.impl.GetterSetterPropertySeed: void <init>(com.sun.xml.bind.v2.model.impl.ClassInfoImpl,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $r0;
    }

    public final boolean isElement()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        javax.xml.namespace.QName $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName elementName>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAbstract()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $z0 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isAbstract(java.lang.Object)>($r2);

        return $z0;
    }

    public boolean isOrdered()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isFinal()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $z0 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isFinal(java.lang.Object)>($r2);

        return $z0;
    }

    public final boolean hasSubClasses()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $z0 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean hasSubClasses>;

        return $z0;
    }

    public final boolean hasAttributeWildcard()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean declaresAttributeWildcard()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean inheritsAttributeWildcard()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final boolean inheritsAttributeWildcard()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed getInheritedAttributeWildcard()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean declaresAttributeWildcard()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private com.sun.xml.bind.v2.model.impl.PropertySeed getInheritedAttributeWildcard()
    {
        com.sun.xml.bind.v2.model.impl.PropertySeed $r1, $r2;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, r3;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r3 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

     label1:
        if r3 == null goto label3;

        $r1 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        if $r1 == null goto label2;

        $r2 = r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.PropertySeed attributeWildcard>;

        return $r2;

     label2:
        r3 = virtualinvoke r3.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        goto label1;

     label3:
        return null;
    }

    public final javax.xml.namespace.QName getElementName()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName elementName>;

        return $r1;
    }

    public final javax.xml.namespace.QName getTypeName()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: javax.xml.namespace.QName typeName>;

        return $r1;
    }

    public final boolean isSimpleType()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.core.PropertyInfo $r3;
        java.util.List $r1;
        int $i0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.model.core.PropertyKind $r4, $r5;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.sun.xml.bind.v2.model.core.PropertyInfo) $r2;

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.core.PropertyInfo: com.sun.xml.bind.v2.model.core.PropertyKind kind()>();

        $r5 = <com.sun.xml.bind.v2.model.core.PropertyKind: com.sun.xml.bind.v2.model.core.PropertyKind VALUE>;

        if $r4 != $r5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    void link()
    {
        java.lang.Object[] $r10;
        java.util.HashMap $r1;
        com.sun.istack.FinalArrayList $r2;
        java.lang.String $r6, $r13, $r14;
        boolean $z0;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r11;
        java.util.Iterator $r3;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.impl.Messages $r12;
        com.sun.xml.bind.v2.model.impl.PropertyInfoImpl r5, r8;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r9;
        java.lang.Object $r4, $r7;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.List getProperties()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        $r3 = virtualinvoke $r2.<com.sun.istack.FinalArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.sun.xml.bind.v2.model.impl.PropertyInfoImpl) $r4;

        virtualinvoke r5.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: void link()>();

        $r6 = virtualinvoke r5.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r5);

        r8 = (com.sun.xml.bind.v2.model.impl.PropertyInfoImpl) $r7;

        if r8 == null goto label2;

        $r11 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r9 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r12 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages PROPERTY_COLLISION>;

        $r10 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r5.<com.sun.xml.bind.v2.model.impl.PropertyInfoImpl: java.lang.String getName()>();

        $r10[0] = $r13;

        $r14 = virtualinvoke $r12.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r10);

        specialinvoke $r9.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r14, r5, r8);

        virtualinvoke $r11.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r9);

     label2:
        goto label1;

     label3:
        specialinvoke r0.<com.sun.xml.bind.v2.model.impl.TypeInfoImpl: void link()>();

        return;
    }

    public com.sun.xml.bind.v2.runtime.Location getLocation()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r2;
        com.sun.xml.bind.v2.runtime.Location $r3;
        com.sun.xml.bind.v2.model.nav.Navigator $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r2 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r3 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.runtime.Location getClassLocation(java.lang.Object)>($r2);

        return $r3;
    }

    private boolean hasFactoryConstructor(javax.xml.bind.'annotation'.XmlType)
    {
        com.sun.xml.bind.v2.model.'annotation'.AnnotationReader $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r23;
        com.sun.xml.bind.v2.model.impl.Messages $r11, $r29;
        com.sun.xml.bind.v2.runtime.IllegalAnnotationException $r8, $r26;
        java.lang.Object[] $r9, $r27, $r45;
        javax.xml.bind.'annotation'.XmlType r0;
        int $i0, $i1;
        java.lang.String $r1, $r15, $r16, $r33, $r34, $r37;
        com.sun.xml.bind.v2.model.impl.ModelBuilder $r10, $r28;
        java.util.Iterator $r24;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r2;
        java.lang.Object $r4, $r7, $r14, $r19, $r22, $r25, $r32, $r35, $r40, $r42, $r43, $r48, r49, $r50;
        com.sun.xml.bind.v2.model.nav.Navigator $r5, $r6, $r12, $r13, $r17, $r18, $r20, $r21, $r30, $r31, $r36, $r38, $r39, $r41, $r44, $r46, $r47;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        r0 := @parameter0: javax.xml.bind.'annotation'.XmlType;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<javax.xml.bind.'annotation'.XmlType: java.lang.String factoryMethod()>();

        $r3 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.'annotation'.AnnotationReader reader()>();

        $r4 = interfaceinvoke $r3.<com.sun.xml.bind.v2.model.'annotation'.AnnotationReader: java.lang.Object getClassValue(java.lang.'annotation'.Annotation,java.lang.String)>(r0, "factoryClass");

        r49 = $r4;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r17 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r18 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r19 = interfaceinvoke $r18.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlType$DEFAULT;");

        $z1 = interfaceinvoke $r17.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r4, $r19);

        if $z1 == 0 goto label2;

        $r47 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r48 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        r49 = interfaceinvoke $r47.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object use(java.lang.Object)>($r48);

     label2:
        $r20 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r21 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r22 = interfaceinvoke $r21.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>(r49);

        $r23 = interfaceinvoke $r20.<com.sun.xml.bind.v2.model.nav.Navigator: java.util.Collection getDeclaredMethods(java.lang.Object)>($r22);

        $r24 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r35 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        $r36 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r37 = interfaceinvoke $r36.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getMethodName(java.lang.Object)>($r35);

        $z2 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label4;

        $r38 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r39 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r40 = interfaceinvoke $r39.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object getReturnType(java.lang.Object)>($r35);

        $r41 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r42 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r43 = interfaceinvoke $r41.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object use(java.lang.Object)>($r42);

        $z3 = interfaceinvoke $r38.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r40, $r43);

        if $z3 == 0 goto label4;

        $r44 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r45 = interfaceinvoke $r44.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object[] getMethodParameters(java.lang.Object)>($r35);

        $i1 = lengthof $r45;

        if $i1 != 0 goto label4;

        $r46 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $z4 = interfaceinvoke $r46.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isStaticMethod(java.lang.Object)>($r35);

        if $z4 == 0 goto label4;

        r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object factoryMethod> = $r35;

        goto label5;

     label4:
        goto label3;

     label5:
        $r25 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object factoryMethod>;

        if $r25 != null goto label7;

        $r28 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r26 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r29 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages NO_FACTORY_METHOD>;

        $r27 = newarray (java.lang.Object)[2];

        $r30 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r31 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r32 = interfaceinvoke $r31.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>(r49);

        $r33 = interfaceinvoke $r30.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r32);

        $r27[0] = $r33;

        $r27[1] = $r1;

        $r34 = virtualinvoke $r29.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r27);

        specialinvoke $r26.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r34, r2);

        virtualinvoke $r28.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r26);

        goto label7;

     label6:
        $r5 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r6 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object ref(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlType$DEFAULT;");

        $z0 = interfaceinvoke $r5.<com.sun.xml.bind.v2.model.nav.Navigator: boolean isSameType(java.lang.Object,java.lang.Object)>($r4, $r7);

        if $z0 != 0 goto label7;

        $r10 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ModelBuilder builder>;

        $r8 = new com.sun.xml.bind.v2.runtime.IllegalAnnotationException;

        $r11 = <com.sun.xml.bind.v2.model.impl.Messages: com.sun.xml.bind.v2.model.impl.Messages FACTORY_CLASS_NEEDS_FACTORY_METHOD>;

        $r9 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r13 = virtualinvoke r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.nav.Navigator nav()>();

        $r14 = interfaceinvoke $r13.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.Object asDecl(java.lang.Object)>($r4);

        $r15 = interfaceinvoke $r12.<com.sun.xml.bind.v2.model.nav.Navigator: java.lang.String getClassName(java.lang.Object)>($r14);

        $r9[0] = $r15;

        $r16 = virtualinvoke $r11.<com.sun.xml.bind.v2.model.impl.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<com.sun.xml.bind.v2.runtime.IllegalAnnotationException: void <init>(java.lang.String,com.sun.xml.bind.v2.model.'annotation'.Locatable)>($r16, r2);

        virtualinvoke $r10.<com.sun.xml.bind.v2.model.impl.ModelBuilder: void reportError(com.sun.xml.bind.v2.runtime.IllegalAnnotationException)>($r8);

     label7:
        $r50 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object factoryMethod>;

        if $r50 == null goto label8;

        $z6 = 1;

        goto label9;

     label8:
        $z6 = 0;

     label9:
        return $z6;
    }

    public java.lang.reflect.Method getFactoryMethod()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.Object $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object factoryMethod>;

        $r2 = (java.lang.reflect.Method) $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r2;
        java.lang.Object $r3;
        java.lang.String $r6;

        r2 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassInfo(");

        $r3 = r2.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.Object clazz>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile com.sun.xml.bind.v2.model.'annotation'.Locatable getUpstream()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.xml.bind.v2.model.'annotation'.Locatable $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = specialinvoke r0.<com.sun.xml.bind.v2.model.impl.TypeInfoImpl: com.sun.xml.bind.v2.model.'annotation'.Locatable getUpstream()>();

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.model.core.ClassInfo getBaseClass()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getBaseClass()>();

        return $r1;
    }

    public volatile com.sun.xml.bind.v2.model.core.ClassInfo getScope()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0, $r1;

        r0 := @this: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl getScope()>();

        return $r1;
    }

    static java.lang.String[] access$100(com.sun.xml.bind.v2.model.impl.ClassInfoImpl)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        java.lang.String[] $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] propOrder>;

        return $r1;
    }

    static com.sun.istack.FinalArrayList access$200(com.sun.xml.bind.v2.model.impl.ClassInfoImpl)
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl r0;
        com.sun.istack.FinalArrayList $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.model.impl.ClassInfoImpl;

        $r1 = r0.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.istack.FinalArrayList properties>;

        return $r1;
    }

    static com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] access$300()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] $r0;

        $r0 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] SECONDARY_ANNOTATIONS>;

        return $r0;
    }

    static void <clinit>()
    {
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] $r1, r13;
        java.util.HashMap $r3, $r11;
        java.lang.String[] $r5;
        java.lang.'annotation'.Annotation[] $r2;
        java.lang.Integer $r9, $r10;
        int i0, $i1, $i2, i3, i4, i5, i6, i7;
        com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation r6;
        boolean $z0, $z1;
        java.lang.Class[] $r4, r7;
        java.lang.Class $r0, r8, r12;

        $r0 = class "Lcom/sun/xml/bind/v2/model/impl/ClassInfoImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] values()>();

        <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] SECONDARY_ANNOTATIONS> = $r1;

        $r2 = newarray (java.lang.'annotation'.Annotation)[0];

        <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.'annotation'.Annotation[] EMPTY_ANNOTATIONS> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.HashMap ANNOTATION_NUMBER_MAP> = $r3;

        $r4 = newarray (java.lang.Class)[11];

        $r4[0] = class "Ljavax/xml/bind/annotation/XmlTransient;";

        $r4[1] = class "Ljavax/xml/bind/annotation/XmlAnyAttribute;";

        $r4[2] = class "Ljavax/xml/bind/annotation/XmlAttribute;";

        $r4[3] = class "Ljavax/xml/bind/annotation/XmlValue;";

        $r4[4] = class "Ljavax/xml/bind/annotation/XmlElement;";

        $r4[5] = class "Ljavax/xml/bind/annotation/XmlElements;";

        $r4[6] = class "Ljavax/xml/bind/annotation/XmlElementRef;";

        $r4[7] = class "Ljavax/xml/bind/annotation/XmlElementRefs;";

        $r4[8] = class "Ljavax/xml/bind/annotation/XmlAnyElement;";

        $r4[9] = class "Ljavax/xml/bind/annotation/XmlMixed;";

        $r4[10] = class "Lcom/sun/xml/bind/annotation/OverrideAnnotationOf;";

        $r11 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.util.HashMap ANNOTATION_NUMBER_MAP>;

        $i2 = lengthof $r4;

        i3 = 0;

     label3:
        if i3 >= $i2 goto label4;

        r12 = $r4[i3];

        $i1 = virtualinvoke $r11.<java.util.HashMap: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r10);

        i3 = i3 + 1;

        goto label3;

     label4:
        i4 = 20;

        r13 = <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation[] SECONDARY_ANNOTATIONS>;

        i5 = lengthof r13;

        i6 = 0;

     label5:
        if i6 >= i5 goto label8;

        r6 = r13[i6];

        r7 = r6.<com.sun.xml.bind.v2.model.impl.ClassInfoImpl$SecondaryAnnotation: java.lang.Class[] members>;

        i0 = lengthof r7;

        i7 = 0;

     label6:
        if i7 >= i0 goto label7;

        r8 = r7[i7];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r9);

        i7 = i7 + 1;

        goto label6;

     label7:
        i4 = i4 + 1;

        i6 = i6 + 1;

        goto label5;

     label8:
        $r5 = newarray (java.lang.String)[0];

        <com.sun.xml.bind.v2.model.impl.ClassInfoImpl: java.lang.String[] DEFAULT_ORDER> = $r5;

        return;
    }
}
