class org.tukaani.xz.BCJEncoder extends org.tukaani.xz.BCJCoder implements org.tukaani.xz.FilterEncoder
{
    private final org.tukaani.xz.BCJOptions options;
    private final long filterID;
    private final byte[] props;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$BCJEncoder;

    void <init>(org.tukaani.xz.BCJOptions, long)
    {
        byte[] $r2, $r5, $r6;
        org.tukaani.xz.BCJEncoder r0;
        long l1;
        java.lang.AssertionError $r7;
        byte $b4;
        int $i0, $i2, $i3, i5;
        boolean $z0, $z1;
        org.tukaani.xz.BCJOptions r1, $r4;
        java.lang.Object $r3;

        r0 := @this: org.tukaani.xz.BCJEncoder;

        r1 := @parameter0: org.tukaani.xz.BCJOptions;

        l1 := @parameter1: long;

        specialinvoke r0.<org.tukaani.xz.BCJCoder: void <init>()>();

        $z0 = <org.tukaani.xz.BCJEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.tukaani.xz.BCJEncoder: boolean isBCJFilterID(long)>(l1);

        if $z1 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i0 = virtualinvoke r1.<org.tukaani.xz.BCJOptions: int getStartOffset()>();

        if $i0 != 0 goto label2;

        $r6 = newarray (byte)[0];

        r0.<org.tukaani.xz.BCJEncoder: byte[] props> = $r6;

        goto label4;

     label2:
        $r2 = newarray (byte)[4];

        r0.<org.tukaani.xz.BCJEncoder: byte[] props> = $r2;

        i5 = 0;

     label3:
        if i5 >= 4 goto label4;

        $r5 = r0.<org.tukaani.xz.BCJEncoder: byte[] props>;

        $i2 = i5 * 8;

        $i3 = $i0 >>> $i2;

        $b4 = (byte) $i3;

        $r5[i5] = $b4;

        i5 = i5 + 1;

        goto label3;

     label4:
        r0.<org.tukaani.xz.BCJEncoder: long filterID> = l1;

        $r3 = virtualinvoke r1.<org.tukaani.xz.BCJOptions: java.lang.Object clone()>();

        $r4 = (org.tukaani.xz.BCJOptions) $r3;

        r0.<org.tukaani.xz.BCJEncoder: org.tukaani.xz.BCJOptions options> = $r4;

        return;
    }

    public long getFilterID()
    {
        long $l0;
        org.tukaani.xz.BCJEncoder r0;

        r0 := @this: org.tukaani.xz.BCJEncoder;

        $l0 = r0.<org.tukaani.xz.BCJEncoder: long filterID>;

        return $l0;
    }

    public byte[] getFilterProps()
    {
        byte[] $r1;
        org.tukaani.xz.BCJEncoder r0;

        r0 := @this: org.tukaani.xz.BCJEncoder;

        $r1 = r0.<org.tukaani.xz.BCJEncoder: byte[] props>;

        return $r1;
    }

    public boolean supportsFlushing()
    {
        org.tukaani.xz.BCJEncoder r0;

        r0 := @this: org.tukaani.xz.BCJEncoder;

        return 0;
    }

    public org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)
    {
        org.tukaani.xz.BCJEncoder r0;
        org.tukaani.xz.FinishableOutputStream r1, $r3;
        org.tukaani.xz.BCJOptions $r2;

        r0 := @this: org.tukaani.xz.BCJEncoder;

        r1 := @parameter0: org.tukaani.xz.FinishableOutputStream;

        $r2 = r0.<org.tukaani.xz.BCJEncoder: org.tukaani.xz.BCJOptions options>;

        $r3 = virtualinvoke $r2.<org.tukaani.xz.BCJOptions: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>(r1);

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.BCJEncoder: java.lang.Class class$org$tukaani$xz$BCJEncoder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.BCJEncoder: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.BCJEncoder");

        <org.tukaani.xz.BCJEncoder: java.lang.Class class$org$tukaani$xz$BCJEncoder> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.BCJEncoder: java.lang.Class class$org$tukaani$xz$BCJEncoder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.BCJEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
