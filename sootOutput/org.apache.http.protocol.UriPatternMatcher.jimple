public class org.apache.http.protocol.UriPatternMatcher extends java.lang.Object
{
    private final java.util.Map map;

    public void <init>()
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map> = $r1;

        return;
    }

    public synchronized void register(java.lang.String, java.lang.Object)
    {
        java.util.Map $r3;
        org.apache.http.protocol.UriPatternMatcher r1;
        java.lang.Object r2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.http.protocol.UriPatternMatcher;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI request pattern may not be null");

        throw $r4;

     label1:
        $r3 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public synchronized void unregister(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r1;
        java.lang.String r0;
        java.util.Map $r2;

        r1 := @this: org.apache.http.protocol.UriPatternMatcher;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public synchronized void setHandlers(java.util.Map)
    {
        java.util.Map r0, $r2, $r3;
        org.apache.http.protocol.UriPatternMatcher r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.http.protocol.UriPatternMatcher;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of handlers may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r0);

        return;
    }

    public synchronized void setObjects(java.util.Map)
    {
        java.util.Map r0, $r2, $r3;
        org.apache.http.protocol.UriPatternMatcher r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.http.protocol.UriPatternMatcher;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of handlers may not be null");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r1.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r0);

        return;
    }

    public synchronized java.util.Map getObjects()
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.Map $r1;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        return $r1;
    }

    public synchronized java.lang.Object lookup(java.lang.String)
    {
        java.util.Map $r1, $r3, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String r7, r9, r11;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r2, $r6, r10;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r9 := @parameter0: java.lang.String;

        if r9 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request URI may not be null");

        throw $r13;

     label1:
        $i0 = virtualinvoke r9.<java.lang.String: int indexOf(java.lang.String)>("?");

        $i6 = (int) -1;

        if $i0 == $i6 goto label2;

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        $r1 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r10 = $r2;

        if $r2 != null goto label6;

        r11 = null;

        $r3 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z1 = virtualinvoke r0.<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>(r7, r9);

        if $z1 == 0 goto label5;

        if r11 == null goto label4;

        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        $i2 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i1 < $i2 goto label4;

        $i3 = virtualinvoke r11.<java.lang.String: int length()>();

        $i4 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i3 != $i4 goto label5;

        $z2 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z2 == 0 goto label5;

     label4:
        $r12 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map map>;

        r10 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r11 = r7;

     label5:
        goto label3;

     label6:
        return r10;
    }

    protected boolean matchUriRequestPattern(java.lang.String, java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r4;
        int $i0, $i1, $i2;
        java.lang.String r0, r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r4 := @this: org.apache.http.protocol.UriPatternMatcher;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z4 != 0 goto label3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z2 == 0 goto label4;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $z3 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z3 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;
    }
}
