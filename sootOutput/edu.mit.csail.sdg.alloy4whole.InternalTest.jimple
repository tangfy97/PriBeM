final class edu.mit.csail.sdg.alloy4whole.InternalTest extends java.lang.Object
{

    void <init>()
    {
        edu.mit.csail.sdg.alloy4whole.InternalTest r0;

        r0 := @this: edu.mit.csail.sdg.alloy4whole.InternalTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void check(boolean) throws java.lang.Exception
    {
        java.lang.RuntimeException $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assertion failure: condition should be TRUE");

        throw $r0;

     label1:
        return;
    }

    private static void check(java.lang.Object, java.lang.Object)
    {
        java.lang.AssertionError $r2, $r10, $r15;
        java.lang.String $r9, $r14, $r19;
        boolean $z0;
        java.lang.Object r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r16, $r17, $r18;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        if r1 == null goto label3;

        $r15 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a is null, but b is ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r15;

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.AssertionError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b is null, but a is ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r10;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a!=b\na=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nb=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r2;

     label3:
        return;
    }

    static void test1() throws java.lang.Exception
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Expr $r34;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig $r2, $r16, $r18;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar $r10, $r13, $r26, $r29;
        boolean $z0, $z1;
        edu.mit.csail.sdg.alloy4.SafeList $r7, $r23;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field $r19;
        edu.mit.csail.sdg.alloy4compiler.ast.Attr[] $r3, $r17;
        java.util.List $r5, $r21;
        java.lang.StringBuilder $r32, $r33, $r36;
        edu.mit.csail.sdg.alloy4.XMLNode $r0;
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r14, $r15, $r30, $r31;
        java.lang.Iterable $r8, $r24;
        int $i0, $i1;
        java.lang.String $r11, $r27, $r37;
        edu.mit.csail.sdg.alloy4compiler.translator.A4Solution $r6, $r22;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig[] $r4, $r20;
        java.io.StringReader $r1;
        java.lang.Object $r9, $r12, $r25, $r28, $r35;

        $r0 = new edu.mit.csail.sdg.alloy4.XMLNode;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>("<alloy builddate=\'unknown\'><instance bitwidth=\'2\' maxseq=\'1\' command=\'Run Deadlock\' filename=\'dijkstra.als\'><sig label=\'univ\' ID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> <atom label=\'State$0\'/> <atom label=\'State$1\'/> <atom label=\'State$2\'/> </sig><sig label=\'Int\' ID=\'1\' parentID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> </sig><sig label=\'seq/Int\' ID=\'2\' parentID=\'1\' builtin=\'yes\'> <atom label=\'0\'/> </sig><sig label=\'State\' ID=\'5\' parentID=\'0\'> <atom label=\'State$0\'/> <atom label=\'State$1\'/> <atom label=\'State$2\'/> </sig><field label=\'len\' parentID=\'5\' ID=\'17\'>   <tuple> <atom label=\'State$1\'/> <atom label=\'-2\'/> </tuple>   <tuple> <atom label=\'State$1\'/> <atom label=\'-1\'/> </tuple>   <types> <type ID=\'5\'/> <type ID=\'1\'/> </types></field><skolem label=\'$Deadlock_s\' ID=\'16\'>   <tuple> <atom label=\'State$0\'/> </tuple>   <types> <type ID=\'5\'/> </types></skolem></instance></alloy>");

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.XMLNode: void <init>(java.io.Reader)>($r1);

        $r2 = new edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig;

        $r3 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Attr)[0];

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: void <init>(java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Attr[])>("State", $r3);

        $r4 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Sig)[1];

        $r4[0] = $r2;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionReader: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution read(java.lang.Iterable,edu.mit.csail.sdg.alloy4.XMLNode)>($r5, $r0);

        $r7 = new edu.mit.csail.sdg.alloy4.SafeList;

        $r8 = virtualinvoke $r6.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: java.lang.Iterable getAllSkolems()>();

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: void <init>(java.lang.Iterable)>($r8);

        $i0 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: int size()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(boolean)>($z0);

        $r9 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r10 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r9;

        $r11 = $r10.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: java.lang.String label>;

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r11, "$Deadlock_s");

        $r12 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r13 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r12;

        $r14 = virtualinvoke $r13.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r15 = virtualinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = new edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig;

        $r17 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Attr)[0];

        specialinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: void <init>(java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Attr[])>("State", $r17);

        $r18 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        $r19 = virtualinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field addField(java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>("len", $r18);

        $r20 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Sig)[1];

        $r20[0] = $r16;

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        $r22 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionReader: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution read(java.lang.Iterable,edu.mit.csail.sdg.alloy4.XMLNode)>($r21, $r0);

        $r23 = new edu.mit.csail.sdg.alloy4.SafeList;

        $r24 = virtualinvoke $r22.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: java.lang.Iterable getAllSkolems()>();

        specialinvoke $r23.<edu.mit.csail.sdg.alloy4.SafeList: void <init>(java.lang.Iterable)>($r24);

        $i1 = virtualinvoke $r23.<edu.mit.csail.sdg.alloy4.SafeList: int size()>();

        if $i1 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(boolean)>($z1);

        $r25 = virtualinvoke $r23.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r26 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r25;

        $r27 = $r26.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: java.lang.String label>;

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r27, "$Deadlock_s");

        $r28 = virtualinvoke $r23.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r29 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r28;

        $r30 = virtualinvoke $r29.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r31 = virtualinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r34 = virtualinvoke $r19.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Expr cardinality()>();

        $r35 = virtualinvoke $r22.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: java.lang.Object eval(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>($r34);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r37, "-2");

        return;
    }

    static void test2() throws java.lang.Exception
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r14, $r16, $r17, $r18;
        java.lang.Iterable $r8;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig $r2, $r15;
        int $i0;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar $r10, $r13;
        java.lang.String $r11;
        edu.mit.csail.sdg.alloy4compiler.translator.A4Solution $r6;
        boolean $z0;
        edu.mit.csail.sdg.alloy4.SafeList $r7;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig[] $r4;
        edu.mit.csail.sdg.alloy4compiler.ast.Attr[] $r3;
        java.util.List $r5;
        java.io.StringReader $r1;
        java.lang.Object $r9, $r12;
        edu.mit.csail.sdg.alloy4.XMLNode $r0;

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void test1()>();

        $r0 = new edu.mit.csail.sdg.alloy4.XMLNode;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>("<alloy builddate=\'unknown\'><instance bitwidth=\'2\' maxseq=\'1\' command=\'Run Deadlock\' filename=\'dijkstra.als\'><sig label=\'univ\' ID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> <atom label=\'State$0\'/> <atom label=\'State$1\'/> <atom label=\'State$2\'/> </sig><sig label=\'Int\' ID=\'1\' parentID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> </sig><sig label=\'seq/Int\' ID=\'2\' parentID=\'1\' builtin=\'yes\'> <atom label=\'0\'/> </sig><sig label=\'Act\' ID=\'5\' parentID=\'0\'> <atom label=\'Act$0\'/> <atom label=\'Act$1\'/> <atom label=\'Act$2\'/> </sig><skolem label=\'$x\' ID=\'16\'>   <tuple> <atom label=\'0\'/> <atom label=\'Act$1\'/> </tuple>   <types> <type ID=\'2\'/> <type ID=\'5\'/> </types></skolem></instance></alloy>");

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.XMLNode: void <init>(java.io.Reader)>($r1);

        $r2 = new edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig;

        $r3 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Attr)[0];

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: void <init>(java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Attr[])>("Act", $r3);

        $r4 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Sig)[1];

        $r4[0] = $r2;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionReader: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution read(java.lang.Iterable,edu.mit.csail.sdg.alloy4.XMLNode)>($r5, $r0);

        $r7 = new edu.mit.csail.sdg.alloy4.SafeList;

        $r8 = virtualinvoke $r6.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: java.lang.Iterable getAllSkolems()>();

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: void <init>(java.lang.Iterable)>($r8);

        $i0 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: int size()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(boolean)>($z0);

        $r9 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r10 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r9;

        $r11 = $r10.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: java.lang.String label>;

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r11, "$x");

        $r12 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: java.lang.Object get(int)>(0);

        $r13 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r12;

        $r14 = virtualinvoke $r13.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r15 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SEQIDX>;

        $r16 = virtualinvoke $r15.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r17 = virtualinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r18 = virtualinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type product(edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r17);

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(java.lang.Object,java.lang.Object)>($r14, $r18);

        return;
    }

    static void test3() throws java.lang.Exception
    {
        java.lang.Throwable $r2;
        java.io.StringReader $r1;
        edu.mit.csail.sdg.alloy4.XMLNode $r0;
        java.lang.String r3;
        boolean $z0;

        $r0 = new edu.mit.csail.sdg.alloy4.XMLNode;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>("<alloy builddate=\'unknown\'><instance bitwidth=\'2\' maxseq=\'1\' command=\'Run Deadlock\' filename=\'dijkstra.als\'><sig label=\'univ\' ID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> <atom label=\'State$0\'/> <atom label=\'State$1\'/> <atom label=\'State$2\'/> </sig><sig label=\'Int\' ID=\'1\' parentID=\'0\' builtin=\'yes\'> <atom label=\'-2\'/> <atom label=\'-1\'/> <atom label=\'0\'/> <atom label=\'1\'/> </sig><sig label=\'seq/Int\' ID=\'2\' parentID=\'1\' builtin=\'yes\'> <atom label=\'0\'/> </sig><sig label=\'State\' ID=\'5\' parentID=\'6\'> <atom label=\'State$0\'/> </sig><sig label=\'Mutex\' ID=\'6\' parentID=\'5\'> <atom label=\'Mutex$0\'/> </sig></instance></alloy>");

        specialinvoke $r0.<edu.mit.csail.sdg.alloy4.XMLNode: void <init>(java.io.Reader)>($r1);

        r3 = "";

     label1:
        staticinvoke <edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionReader: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution read(java.lang.Iterable,edu.mit.csail.sdg.alloy4.XMLNode)>(null, $r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String toString()>();

     label4:
        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("cyclic inheritance");

        staticinvoke <edu.mit.csail.sdg.alloy4whole.InternalTest: void check(boolean)>($z0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void main2(java.lang.String[]) throws java.lang.Exception
    {
        edu.mit.csail.sdg.alloy4compiler.parser.CompModule $r1;
        edu.mit.csail.sdg.alloy4compiler.ast.Command r6;
        edu.mit.csail.sdg.alloy4.A4Reporter $r0, $r7;
        boolean $z0, $z1;
        java.lang.Runtime $r14, $r15, $r16;
        java.lang.StringBuilder $r9, $r10, $r12, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        long $l1, $l2, $l3;
        java.lang.String[] r28;
        int $i0;
        java.lang.String $r11, $r13, $r26;
        edu.mit.csail.sdg.alloy4compiler.translator.A4Solution r29;
        java.io.PrintStream $r18, $r27;
        edu.mit.csail.sdg.alloy4.ConstList $r3, $r8;
        java.util.Iterator $r4;
        edu.mit.csail.sdg.alloy4compiler.translator.A4Options $r2;
        java.lang.Object $r5;

        r28 := @parameter0: java.lang.String[];

        $r0 = <edu.mit.csail.sdg.alloy4.A4Reporter: edu.mit.csail.sdg.alloy4.A4Reporter NOP>;

        $r1 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.parser.CompUtil: edu.mit.csail.sdg.alloy4compiler.parser.CompModule parseEverything_fromFile(edu.mit.csail.sdg.alloy4.A4Reporter,java.util.Map,java.lang.String)>($r0, null, "models/examples/algorithms/dijkstra.als");

        $r2 = new edu.mit.csail.sdg.alloy4compiler.translator.A4Options;

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4compiler.translator.A4Options: void <init>()>();

        $r3 = interfaceinvoke $r1.<edu.mit.csail.sdg.alloy4compiler.ast.Module: edu.mit.csail.sdg.alloy4.ConstList getAllCommands()>();

        $r4 = virtualinvoke $r3.<edu.mit.csail.sdg.alloy4.ConstList: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (edu.mit.csail.sdg.alloy4compiler.ast.Command) $r5;

        $r7 = <edu.mit.csail.sdg.alloy4.A4Reporter: edu.mit.csail.sdg.alloy4.A4Reporter NOP>;

        $r8 = interfaceinvoke $r1.<edu.mit.csail.sdg.alloy4compiler.ast.Module: edu.mit.csail.sdg.alloy4.ConstList getAllReachableSigs()>();

        r29 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.translator.TranslateAlloyToKodkod: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution execute_command(edu.mit.csail.sdg.alloy4.A4Reporter,java.lang.Iterable,edu.mit.csail.sdg.alloy4compiler.ast.Command,edu.mit.csail.sdg.alloy4compiler.translator.A4Options)>($r7, $r8, r6, $r2);

     label1:
        $z1 = virtualinvoke r29.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: boolean satisfiable()>();

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Answer: ");

        $r11 = virtualinvoke r29.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: java.lang.String toString()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int hashCode()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

        $r14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r14.<java.lang.Runtime: long totalMemory()>();

        $r15 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l2 = virtualinvoke $r15.<java.lang.Runtime: long freeMemory()>();

        $r16 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l3 = virtualinvoke $r16.<java.lang.Runtime: long maxMemory()>();

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" total=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" free=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r26);

        $r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r27.<java.io.PrintStream: void flush()>();

        r29 = virtualinvoke r29.<edu.mit.csail.sdg.alloy4compiler.translator.A4Solution: edu.mit.csail.sdg.alloy4compiler.translator.A4Solution next()>();

        goto label1;

     label2:
        return;

     label3:
        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.reflect.Method[] $r1;
        java.lang.reflect.Method r2;
        boolean $z0, $z1;
        java.lang.reflect.InvocationTargetException $r26;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r17, $r19, $r22, $r23;
        java.lang.Throwable $r14, r28;
        java.lang.Object[] $r11;
        java.lang.String[] r27;
        int i0, i1;
        java.lang.String $r3, $r9, $r20, $r21, $r24;
        java.io.PrintStream $r5, $r10, $r12, $r13, $r15, $r16, $r18, $r25;
        java.lang.Class $r0;

        r27 := @parameter0: java.lang.String[];

     label1:
        $r0 = class "Ledu/mit/csail/sdg/alloy4whole/InternalTest;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r9);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void flush()>();

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r11);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>(" Done.\n");

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void flush()>();

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label8;

     label5:
        $r14 := @caughtexception;

        r28 = $r14;

     label6:
        $z1 = r28 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label7;

        $r26 = (java.lang.reflect.InvocationTargetException) r28;

        r28 = virtualinvoke $r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        goto label6;

     label7:
        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println()>();

        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void flush()>();

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error:\n");

        $r20 = staticinvoke <edu.mit.csail.sdg.alloy4.MailBug: java.lang.String dump(java.lang.Throwable)>(r28);

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r25 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r25.<java.io.PrintStream: void flush()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }
}
