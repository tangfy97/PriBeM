public class com.jmatio.types.MLInt32 extends com.jmatio.types.MLNumericArray
{

    public void <init>(java.lang.String, int[], int, int)
    {
        com.jmatio.types.MLInt32 r0;
        int[] r2;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, i0, i1);

        return;
    }

    public void <init>(java.lang.String, int[])
    {
        java.lang.String r1;
        com.jmatio.types.MLInt32 r0;
        int[] r2;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, 12, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.Integer[], int)
    {
        com.jmatio.types.MLInt32 r0;
        int i0;
        java.lang.String r1;
        java.lang.Integer[] r2;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Integer[];

        i0 := @parameter2: int;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int,java.lang.Number[],int)>(r1, 12, r2, i0);

        return;
    }

    public void <init>(java.lang.String, int[][])
    {
        int[][] r2;
        com.jmatio.types.MLInt32 r0;
        int $i0;
        java.lang.String r1;
        java.lang.Integer[] $r3;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[][];

        $r3 = staticinvoke <com.jmatio.types.MLInt32: java.lang.Integer[] int2DToInteger(int[][])>(r2);

        $i0 = lengthof r2;

        specialinvoke r0.<com.jmatio.types.MLInt32: void <init>(java.lang.String,java.lang.Integer[],int)>(r1, $r3, $i0);

        return;
    }

    public void <init>(java.lang.String, int[], int)
    {
        com.jmatio.types.MLInt32 r0;
        int[] r2;
        int i0;
        java.lang.String r1;
        java.lang.Integer[] $r3;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        $r3 = staticinvoke <com.jmatio.types.MLInt32: java.lang.Integer[] castToInteger(int[])>(r2);

        specialinvoke r0.<com.jmatio.types.MLInt32: void <init>(java.lang.String,java.lang.Integer[],int)>(r1, $r3, i0);

        return;
    }

    public java.lang.Integer[] createArray(int, int)
    {
        com.jmatio.types.MLInt32 r1;
        int i0, i1, $i2;
        java.lang.Integer[] $r0;

        r1 := @this: com.jmatio.types.MLInt32;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * i1;

        $r0 = newarray (java.lang.Integer)[$i2];

        return $r0;
    }

    public int[][] getArray()
    {
        int[][] r1;
        java.lang.Integer $r5;
        com.jmatio.types.MLInt32 r0;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Number $r4;

        r0 := @this: com.jmatio.types.MLInt32;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLInt32: int getM()>();

        r1 = newarray (int[])[$i0];

        i5 = 0;

     label1:
        $i1 = virtualinvoke r0.<com.jmatio.types.MLInt32: int getM()>();

        if i5 >= $i1 goto label4;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLInt32: int getN()>();

        $r2 = newarray (int)[$i2];

        r1[i5] = $r2;

        i6 = 0;

     label2:
        $i3 = virtualinvoke r0.<com.jmatio.types.MLInt32: int getN()>();

        if i6 >= $i3 goto label3;

        $r3 = r1[i5];

        $r4 = virtualinvoke r0.<com.jmatio.types.MLInt32: java.lang.Number getReal(int,int)>(i5, i6);

        $r5 = (java.lang.Integer) $r4;

        $i4 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r3[i6] = $i4;

        i6 = i6 + 1;

        goto label2;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return r1;
    }

    private static java.lang.Integer[] castToInteger(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r2;
        java.lang.Integer[] r1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Integer)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $i2 = r0[i3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r1[i3] = $r2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static java.lang.Integer[] int2DToInteger(int[][])
    {
        int[][] r0;
        java.lang.Integer $r5;
        int[] $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.Integer[] r2;

        r0 := @parameter0: int[][];

        $i1 = lengthof r0;

        $r1 = r0[0];

        $i0 = lengthof $r1;

        $i2 = $i1 * $i0;

        r2 = newarray (java.lang.Integer)[$i2];

        i9 = 0;

     label1:
        $r3 = r0[0];

        $i3 = lengthof $r3;

        if i9 >= $i3 goto label4;

        i10 = 0;

     label2:
        $i4 = lengthof r0;

        if i10 >= $i4 goto label3;

        $i5 = lengthof r0;

        $i6 = i9 * $i5;

        $i8 = i10 + $i6;

        $r4 = r0[i10];

        $i7 = $r4[i9];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r2[$i8] = $r5;

        i10 = i10 + 1;

        goto label2;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        return r2;
    }

    public java.lang.Integer buldFromBytes(byte[])
    {
        byte[] r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r3;
        java.nio.ByteBuffer $r2;
        com.jmatio.types.MLInt32 r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r1 := @this: com.jmatio.types.MLInt32;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<com.jmatio.types.MLInt32: int getBytesAllocated()>();

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("To build from byte array I need array of size: ");

        $i3 = virtualinvoke r1.<com.jmatio.types.MLInt32: int getBytesAllocated()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r3;
    }

    public int getBytesAllocated()
    {
        com.jmatio.types.MLInt32 r0;

        r0 := @this: com.jmatio.types.MLInt32;

        return 4;
    }

    public java.lang.Class getStorageClazz()
    {
        com.jmatio.types.MLInt32 r0;

        r0 := @this: com.jmatio.types.MLInt32;

        return class "Ljava/lang/Integer;";
    }

    public byte[] getByteArray(java.lang.Integer)
    {
        byte[] $r3;
        com.jmatio.types.MLInt32 r0;
        int $i0, $i1;
        java.lang.Integer r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLInt32;

        r2 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLInt32: int getBytesAllocated()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;
    }

    public volatile java.lang.Object[] createArray(int, int)
    {
        com.jmatio.types.MLInt32 r0;
        int i0, i1;
        java.lang.Integer[] $r1;

        r0 := @this: com.jmatio.types.MLInt32;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLInt32: java.lang.Integer[] createArray(int,int)>(i0, i1);

        return $r1;
    }

    public volatile byte[] getByteArray(java.lang.Number)
    {
        byte[] $r3;
        com.jmatio.types.MLInt32 r0;
        java.lang.Number r1;
        java.lang.Integer $r2;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: java.lang.Number;

        $r2 = (java.lang.Integer) r1;

        $r3 = virtualinvoke r0.<com.jmatio.types.MLInt32: byte[] getByteArray(java.lang.Integer)>($r2);

        return $r3;
    }

    public volatile java.lang.Number buldFromBytes(byte[])
    {
        byte[] r1;
        com.jmatio.types.MLInt32 r0;
        java.lang.Integer $r2;

        r0 := @this: com.jmatio.types.MLInt32;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.jmatio.types.MLInt32: java.lang.Integer buldFromBytes(byte[])>(r1);

        return $r2;
    }
}
