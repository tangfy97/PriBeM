public class org.waveprotocol.wave.client.editor.content.paragraph.Paragraph extends java.lang.Object
{
    public static final java.lang.String TAGNAME;
    public static final int NUM_HEADING_SIZES;
    public static final java.lang.String SUBTYPE_ATTR;
    public static final java.lang.String INDENT_ATTR;
    public static final int MAX_INDENT;
    public static final java.lang.String ALIGNMENT_ATTR;
    public static final java.lang.String DIRECTION_ATTR;
    public static final java.lang.String LIST_TYPE;
    public static final java.lang.String LIST_STYLE_ATTR;
    public static final java.lang.String LIST_STYLE_DECIMAL;
    public static final org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer DEFAULT_RENDERER;
    public static final org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer DEFAULT_NICE_HTML_RENDERER;
    public static final org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_EVENT_HANDLER;
    public static final org.waveprotocol.wave.client.editor.content.ContentElement$Action INDENTER;
    public static final org.waveprotocol.wave.client.editor.content.ContentElement$Action OUTDENTER;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void register(java.lang.String,org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>("p", r0);

        return;
    }

    public static void register(java.lang.String, org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer $r3;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r2;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r2 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_EVENT_HANDLER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>(r1, $r2);

        $r3 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer DEFAULT_RENDERER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>(r1, $r3);

        return;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle regularStyle(java.lang.String)
    {
        java.lang.String r0, $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$RegularStyler $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "li";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Don\'t use regularStyle() for list styles, use listStyle()");

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$RegularStyler;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$RegularStyler: void <init>(java.lang.String)>(r0);

        return $r2;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle listStyle(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$ListStyler $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$ListStyler;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$ListStyler: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.content.ContentElement$Action asAction(org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle, boolean)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle r1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$3 $r0;
        boolean z0;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle;

        z0 := @parameter1: boolean;

        $r0 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$3;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$3: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>(r1, z0);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLine(org.waveprotocol.wave.model.document.indexed.LocationMapper, int)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3, r6;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r4;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        int i0;
        java.lang.Object $r2, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r8;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r2;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: void checkNotParagraphDocument(org.waveprotocol.wave.model.document.ReadableDocument)>($r4);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object getRelatedLineElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r4, $r1);

        r6 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        if r6 != null goto label1;

        return null;

     label1:
        $r7 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>($r7);

        return $r8;
    }

    public static void toggle(org.waveprotocol.wave.model.document.indexed.LocationMapper, int, int, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle r1;
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.ContentElement$Action $r2;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean appliesEntirely(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle)>(r0, i0, i1, r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action asAction(org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>(r1, $z1);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void traverse(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.ContentElement$Action)>(r0, i0, i1, $r2);

        return;
    }

    public static void apply(org.waveprotocol.wave.model.document.indexed.LocationMapper, int, int, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle, boolean)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle r1;
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.ContentElement$Action $r2;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle;

        z0 := @parameter4: boolean;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action asAction(org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle,boolean)>(r1, z0);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void traverse(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.ContentElement$Action)>(r0, i0, i1, $r2);

        return;
    }

    public static boolean appliesEntirely(org.waveprotocol.wave.model.document.indexed.LocationMapper, int, int, org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle)
    {
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle r3;
        boolean[] $r0;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r1;
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$4 $r2;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle;

        $r0 = newarray (boolean)[2];

        $r0[0] = 1;

        $r0[1] = 0;

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$4;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$4: void <init>(boolean[],org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$LineStyle)>($r0, r3);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void traverse(org.waveprotocol.wave.model.document.indexed.LocationMapper,int,int,org.waveprotocol.wave.client.editor.content.ContentElement$Action)>(r1, i0, i1, $r2);

        $z0 = $r0[0];

        if $z0 == 0 goto label1;

        $z1 = $r0[1];

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static void traverse(org.waveprotocol.wave.model.document.indexed.LocationMapper, int, int, org.waveprotocol.wave.client.editor.content.ContentElement$Action)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement$Action r3;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r0;
        int i0, $i1, i2;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r1, r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        r3 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentElement$Action;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.Line getFirstLine(org.waveprotocol.wave.model.document.indexed.LocationMapper,int)>(r0, i0);

        r4 = $r1;

        if $r1 != null goto label1;

        return;

     label1:
        if r4 == null goto label3;

        $r2 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getLineElement()>();

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(java.lang.Object)>($r2);

        if $i1 < i2 goto label2;

        goto label3;

     label2:
        interfaceinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement$Action: void execute(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        r4 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line next()>();

        goto label1;

     label3:
        return;
    }

    public static org.waveprotocol.wave.client.editor.content.ContentNode getLocalParagraphBackwards(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

     label1:
        if r0 == null goto label2;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 != 0 goto label2;

        r0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        goto label1;

     label2:
        return r0;
    }

    public static boolean isListItem(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        java.lang.String $r1, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: boolean isLocalParagraph(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 == 0 goto label1;

        $r1 = "li";

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("t");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isHeading(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        char $c1, $c2, $c3;
        int $i0, $i4, $i5, $i6, $i7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("t");

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 2 goto label2;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 == 104 goto label1;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c3;

        if $i6 != 72 goto label2;

     label1:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        $i7 = (int) $c2;

        $i4 = $i7 - 48;

        if $i4 < 1 goto label2;

        if $i4 > 4 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int getHeadingSize(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        char $c0;
        java.lang.AssertionError $r7, $r8, $r9;
        int $i1, $i2, $i3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r5;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r5 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("t");

        $z1 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $r2 == null goto label2;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 2 goto label3;

     label2:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        $i3 = (int) $c0;

        $i2 = $i3 - 48;

        $z2 = <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        if $i2 < 1 goto label4;

        if $i2 <= 4 goto label5;

     label4:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label5:
        return $i2;
    }

    static int getIndent(java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.NumberFormatException $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 50);

     label2:
        return $i2;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean isDecimalListItem(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = "li";

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("t");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = "decimal";

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("listyle");

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static int getIndent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("i");

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int getIndent(java.lang.String)>($r1);

        return $i0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.DefaultParagraphHtmlRenderer $r2;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$2 $r6;
        org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$1 $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler $r4;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer $r3;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String LIST_STYLE_DECIMAL> = "decimal";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String LIST_STYLE_ATTR> = "listyle";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String LIST_TYPE> = "li";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String DIRECTION_ATTR> = "d";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String ALIGNMENT_ATTR> = "a";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int MAX_INDENT> = 50;

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String INDENT_ATTR> = "i";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String SUBTYPE_ATTR> = "t";

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: int NUM_HEADING_SIZES> = 4;

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: java.lang.String TAGNAME> = "p";

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/paragraph/Paragraph;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer;

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.DefaultParagraphHtmlRenderer;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.DefaultParagraphHtmlRenderer: void <init>()>();

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer: void <init>(org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHtmlRenderer)>($r2);

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphRenderer DEFAULT_RENDERER> = $r1;

        $r3 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphNiceHtmlRenderer DEFAULT_NICE_HTML_RENDERER> = $r3;

        $r4 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphEventHandler: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.NodeEventHandler DEFAULT_EVENT_HANDLER> = $r4;

        $r5 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$1;

        specialinvoke $r5.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action INDENTER> = $r5;

        $r6 = new org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$2;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.paragraph.Paragraph$2: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: org.waveprotocol.wave.client.editor.content.ContentElement$Action OUTDENTER> = $r6;

        return;
    }
}
