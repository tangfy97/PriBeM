public class org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 extends java.lang.Object implements org.apache.zookeeper.server.upgrade.UpgradeSnapShot
{
    private static final org.slf4j.Logger LOG;
    java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts;
    java.io.File dataDir;
    java.io.File snapShotDir;
    org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree;

    public void <init>(java.io.File, java.io.File)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.zookeeper.server.upgrade.DataTreeV1 $r4;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;
        java.io.File r2, r3;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts> = $r1;

        r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File dataDir> = r2;

        r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File snapShotDir> = r3;

        $r4 = new org.apache.zookeeper.server.upgrade.DataTreeV1;

        specialinvoke $r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree> = $r4;

        return;
    }

    private void deserializeSnapshot(org.apache.zookeeper.server.upgrade.DataTreeV1, org.apache.jute.InputArchive, java.util.Map) throws java.io.IOException
    {
        org.apache.jute.InputArchive r0;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r1;
        long $l0;
        java.lang.Integer $r4;
        java.lang.Long $r3;
        java.util.Map r2;
        int $i1, i2, $i4;
        java.lang.String $r12;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r13;
        boolean $z0;
        org.slf4j.Logger $r5, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14;

        r13 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r1 := @parameter0: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r0 := @parameter1: org.apache.jute.InputArchive;

        r2 := @parameter2: java.util.Map;

        i2 = interfaceinvoke r0.<org.apache.jute.InputArchive: int readInt(java.lang.String)>("count");

     label1:
        if i2 <= 0 goto label3;

        $l0 = interfaceinvoke r0.<org.apache.jute.InputArchive: long readLong(java.lang.String)>("id");

        $i1 = interfaceinvoke r0.<org.apache.jute.InputArchive: int readInt(java.lang.String)>("timeout");

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadData --- session in archive: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with timeout: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r7, 32L, $r12);

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        virtualinvoke r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r0, "tree");

        return;
    }

    public long playLog(org.apache.jute.InputArchive) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.jute.InputArchive r0;
        org.apache.zookeeper.server.upgrade.DataTreeV1 $r10, $r23, $r30;
        java.lang.Integer $r8;
        org.apache.zookeeper.txn.CreateSessionTxn $r7, $r17;
        byte $b1, $b3, $b10;
        java.lang.Long $r6, $r21;
        org.apache.jute.Record $r3;
        java.lang.StringBuilder $r13, $r15, $r16, $r18, $r26, $r28, $r33, $r34, $r35, $r36, $r37, $r47, $r48, $r49;
        long $l2, $l4, $l6, $l8, $l9, $l11, l13, $l17;
        java.lang.String $r14, $r19, $r27, $r29, $r38;
        org.apache.zookeeper.txn.TxnHeader $r45;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r5, $r20;
        java.io.EOFException $r42, $r44, $r46;
        org.apache.zookeeper.server.Request $r50;
        int $i0, $i5, $i7, $i12, $i14, $i15, $i16, $i18, $i19;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r4;
        org.slf4j.Logger $r9, $r12, $r22, $r25, $r32, $r39;

        r4 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r0 := @parameter0: org.apache.jute.InputArchive;

        l13 = 0L;

     label01:
        $r1 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte[] readBuffer(java.lang.String)>("txnEntry");

        $i0 = lengthof $r1;

        if $i0 != 0 goto label02;

        $r44 = new java.io.EOFException;

        specialinvoke $r44.<java.io.EOFException: void <init>()>();

        throw $r44;

     label02:
        $r45 = new org.apache.zookeeper.txn.TxnHeader;

        specialinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: void <init>()>();

        $r3 = staticinvoke <org.apache.zookeeper.server.util.SerializeUtils: org.apache.jute.Record deserializeTxn(byte[],org.apache.zookeeper.txn.TxnHeader)>($r1, $r45);

        $b1 = interfaceinvoke r0.<org.apache.jute.InputArchive: byte readByte(java.lang.String)>("EOR");

        $i18 = (int) $b1;

        if $i18 == 66 goto label03;

        $r39 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        interfaceinvoke $r39.<org.slf4j.Logger: void warn(java.lang.String)>("Last transaction was partial.");

        $r46 = new java.io.EOFException;

        specialinvoke $r46.<java.io.EOFException: void <init>(java.lang.String)>("Last transaction was partial.");

        throw $r46;

     label03:
        $l2 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $b3 = $l2 cmp l13;

        $i19 = (int) $b3;

        if $i19 > 0 goto label04;

        $b10 = l13 cmp 0L;

        if $b10 == 0 goto label04;

        $r32 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l13);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(higestZxid) >= ");

        $l11 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(next log) for type ");

        $i12 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String)>($r38);

        goto label05;

     label04:
        l13 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

     label05:
        $i14 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        lookupswitch($i14)
        {
            case -11: goto label08;
            case -10: goto label06;
            default: goto label10;
        };

     label06:
        $r5 = r4.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        $l4 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r7 = (org.apache.zookeeper.txn.CreateSessionTxn) $r3;

        $i5 = virtualinvoke $r7.<org.apache.zookeeper.txn.CreateSessionTxn: int getTimeOut()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r9 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label07;

        $r12 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("playLog --- create session in log: 0x");

        $l6 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l6);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with timeout: ");

        $r17 = (org.apache.zookeeper.txn.CreateSessionTxn) $r3;

        $i7 = virtualinvoke $r17.<org.apache.zookeeper.txn.CreateSessionTxn: int getTimeOut()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r12, 32L, $r19);

     label07:
        $r10 = r4.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        virtualinvoke $r10.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>($r45, $r3);

        goto label11;

     label08:
        $r20 = r4.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        $l8 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        virtualinvoke $r20.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r21);

        $r22 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r22.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label09;

        $r25 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("playLog --- close session in log: 0x");

        $l9 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r27 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l9);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r25, 32L, $r29);

     label09:
        $r23 = r4.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        virtualinvoke $r23.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>($r45, $r3);

        goto label11;

     label10:
        $r30 = r4.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        virtualinvoke $r30.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>($r45, $r3);

     label11:
        $r50 = new org.apache.zookeeper.server.Request;

        $i15 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: int getCxid()>();

        $i16 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        specialinvoke $r50.<org.apache.zookeeper.server.Request: void <init>(org.apache.zookeeper.server.ServerCnxn,long,int,int,java.nio.ByteBuffer,java.util.List)>(null, 0L, $i15, $i16, null, null);

        $r50.<org.apache.zookeeper.server.Request: org.apache.jute.Record txn> = $r3;

        $r50.<org.apache.zookeeper.server.Request: org.apache.zookeeper.txn.TxnHeader hdr> = $r45;

        $l17 = virtualinvoke $r45.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r50.<org.apache.zookeeper.server.Request: long zxid> = $l17;

        goto label01;

     label12:
        $r42 := @caughtexception;

        return l13;

        catch java.io.EOFException from label01 to label12 with label12;
    }

    private long processLogFiles(org.apache.zookeeper.server.upgrade.DataTreeV1, java.io.File[]) throws java.io.IOException
    {
        org.slf4j.Logger $r3;
        java.io.BufferedInputStream $r7;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r11;
        long l1;
        java.io.FileInputStream $r8;
        java.io.File r1;
        org.apache.jute.BinaryInputArchive $r10;
        int i0, i2;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r6;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r9;
        java.io.File[] r0;

        r9 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r11 := @parameter0: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r0 := @parameter1: java.io.File[];

        l1 = 0L;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r1 = r0[i2];

        $r3 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing log file: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r6);

        $r7 = new java.io.BufferedInputStream;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r8);

        $r10 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r7);

        l1 = virtualinvoke r9.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: long playLog(org.apache.jute.InputArchive)>($r10);

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return l1;
    }

    private void loadThisSnapShot() throws java.io.IOException
    {
        java.io.BufferedInputStream $r2;
        org.apache.zookeeper.server.upgrade.DataTreeV1 $r6, $r7, $r11, $r12, $r18;
        byte $b3;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r19, $r22, $r23, $r25;
        long l0, $l1, $l2, $l4;
        java.lang.String $r20, $r26;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;
        org.slf4j.Logger $r14;
        java.io.IOException $r21;
        java.io.FileInputStream $r3;
        java.io.File $r1, $r8, $r24;
        org.apache.jute.BinaryInputArchive $r4;
        java.io.File[] $r9, $r10;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        $r1 = specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File findMostRecentSnapshot()>();

        if $r1 != null goto label1;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid snapshots or not snapshots in ");

        $r24 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File snapShotDir>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label1:
        $r2 = new java.io.BufferedInputStream;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke $r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r3);

        $r4 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r2);

        $r6 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $r5 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: void deserializeSnapshot(org.apache.zookeeper.server.upgrade.DataTreeV1,org.apache.jute.InputArchive,java.util.Map)>($r6, $r4, $r5);

        $r7 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        l0 = $r7.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid>;

        $r8 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File dataDir>;

        $r9 = virtualinvoke $r8.<java.io.File: java.io.File[] listFiles()>();

        $r10 = staticinvoke <org.apache.zookeeper.server.persistence.FileTxnLog: java.io.File[] getLogFiles(java.io.File[],long)>($r9, l0);

        $r11 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $l1 = specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: long processLogFiles(org.apache.zookeeper.server.upgrade.DataTreeV1,java.io.File[])>($r11, $r10);

        $r12 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $l2 = $r12.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid>;

        $b3 = $l1 cmp $l2;

        if $b3 == 0 goto label2;

        $r14 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Zxids not equal  log zxid ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" datatree processed ");

        $r18 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $l4 = $r18.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String)>($r20);

     label2:
        return;
    }

    private java.io.File findMostRecentSnapshot() throws java.io.IOException
    {
        org.slf4j.Logger $r9;
        java.util.Iterator $r4;
        java.io.IOException $r7;
        java.io.File $r1, r6;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r12;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;
        java.io.File[] $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.io.File snapShotDir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $r3 = staticinvoke <org.apache.zookeeper.server.persistence.Util: java.util.List sortDataDir(java.io.File[],java.lang.String,boolean)>($r2, "snapshot", 0);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.io.File) $r5;

     label2:
        $z1 = staticinvoke <org.apache.zookeeper.server.persistence.Util: boolean isValidSnapshot(java.io.File)>(r6);

        if $z1 == 0 goto label4;

     label3:
        return r6;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r9 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid snapshot ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r12, $r7);

     label6:
        goto label1;

     label7:
        return null;

        catch java.io.IOException from label2 to label3 with label5;
    }

    private org.apache.zookeeper.data.StatPersisted convertStat(org.apache.zookeeper.data.StatPersistedV1)
    {
        long $l1, $l3, $l4, $l5, $l6;
        org.apache.zookeeper.data.StatPersistedV1 r1;
        org.apache.zookeeper.data.StatPersisted $r0;
        int $i0, $i2, $i7;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r2;

        r2 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r1 := @parameter0: org.apache.zookeeper.data.StatPersistedV1;

        $r0 = new org.apache.zookeeper.data.StatPersisted;

        specialinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getAversion()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setAversion(int)>($i0);

        $l1 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getCtime()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setCtime(long)>($l1);

        $i2 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getCversion()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setCversion(int)>($i2);

        $l3 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getCzxid()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setCzxid(long)>($l3);

        $l4 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getEphemeralOwner()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setEphemeralOwner(long)>($l4);

        $l5 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getMtime()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setMtime(long)>($l5);

        $l6 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getMzxid()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setMzxid(long)>($l6);

        $i7 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getVersion()>();

        virtualinvoke $r0.<org.apache.zookeeper.data.StatPersisted: void setVersion(int)>($i7);

        return $r0;
    }

    private org.apache.zookeeper.server.DataNode convertDataNode(org.apache.zookeeper.server.DataTree, org.apache.zookeeper.server.DataNode, org.apache.zookeeper.server.upgrade.DataNodeV1)
    {
        byte[] $r8;
        org.apache.zookeeper.data.StatPersistedV1 $r2;
        java.util.HashSet $r10;
        java.util.List $r7;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r1;
        java.lang.Long $r9;
        org.apache.zookeeper.data.StatPersisted $r3;
        org.apache.zookeeper.server.DataTree r6;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;
        org.apache.zookeeper.server.DataNode $r4, r5;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r6 := @parameter0: org.apache.zookeeper.server.DataTree;

        r5 := @parameter1: org.apache.zookeeper.server.DataNode;

        r1 := @parameter2: org.apache.zookeeper.server.upgrade.DataNodeV1;

        $r2 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $r3 = specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.data.StatPersisted convertStat(org.apache.zookeeper.data.StatPersistedV1)>($r2);

        $r4 = new org.apache.zookeeper.server.DataNode;

        $r8 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data>;

        $r7 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        $r9 = virtualinvoke r6.<org.apache.zookeeper.server.DataTree: java.lang.Long convertAcls(java.util.List)>($r7);

        specialinvoke $r4.<org.apache.zookeeper.server.DataNode: void <init>(org.apache.zookeeper.server.DataNode,byte[],java.lang.Long,org.apache.zookeeper.data.StatPersisted)>(r5, $r8, $r9, $r3);

        $r10 = r1.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        virtualinvoke $r4.<org.apache.zookeeper.server.DataNode: void setChildren(java.util.HashSet)>($r10);

        return $r4;
    }

    private void recurseThroughDataTree(org.apache.zookeeper.server.DataTree, java.lang.String)
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 $r2;
        java.util.HashSet r4;
        int $i0, $i1;
        java.lang.String r0, $r5, $r6, r11, $r16;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r1;
        boolean $z0, $z1;
        org.apache.zookeeper.server.DataNode $r8, r17;
        java.util.Iterator $r9;
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r3;
        org.apache.zookeeper.server.DataTree r7;
        java.lang.Object $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r1 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        r7 := @parameter0: org.apache.zookeeper.server.DataTree;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 getNode(java.lang.String)>(r0);

        r4 = $r3.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $r5 = "";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        r17 = null;

        goto label3;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r17 = virtualinvoke r7.<org.apache.zookeeper.server.DataTree: org.apache.zookeeper.server.DataNode getNode(java.lang.String)>($r6);

     label3:
        $r8 = specialinvoke r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.DataNode convertDataNode(org.apache.zookeeper.server.DataTree,org.apache.zookeeper.server.DataNode,org.apache.zookeeper.server.upgrade.DataNodeV1)>(r7, r17, $r3);

        virtualinvoke r7.<org.apache.zookeeper.server.DataTree: void addDataNode(java.lang.String,org.apache.zookeeper.server.DataNode)>(r0, $r8);

        if r4 == null goto label4;

        $i1 = virtualinvoke r4.<java.util.HashSet: int size()>();

        if $i1 != 0 goto label5;

     label4:
        return;

     label5:
        $r9 = virtualinvoke r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: void recurseThroughDataTree(org.apache.zookeeper.server.DataTree,java.lang.String)>(r7, $r16);

        goto label6;

     label7:
        return;
    }

    private org.apache.zookeeper.server.DataTree convertThisSnapShot() throws java.io.IOException
    {
        org.slf4j.Logger $r5;
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r3;
        org.apache.zookeeper.server.DataTree $r0;
        org.apache.zookeeper.server.upgrade.DataTreeV1 $r2, $r4;
        long $l0;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r1;

        r1 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        $r0 = new org.apache.zookeeper.server.DataTree;

        specialinvoke $r0.<org.apache.zookeeper.server.DataTree: void <init>()>();

        $r2 = r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 getNode(java.lang.String)>("");

        if $r3 != null goto label1;

        $r5 = <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String)>("Upgrading from an empty snapshot.");

     label1:
        specialinvoke r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: void recurseThroughDataTree(org.apache.zookeeper.server.DataTree,java.lang.String)>($r0, "");

        $r4 = r1.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.upgrade.DataTreeV1 oldDataTree>;

        $l0 = $r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid>;

        $r0.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid> = $l0;

        return $r0;
    }

    public org.apache.zookeeper.server.DataTree getNewDataTree() throws java.io.IOException
    {
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: void loadThisSnapShot()>();

        $r1 = specialinvoke r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.apache.zookeeper.server.DataTree convertThisSnapShot()>();

        return $r1;
    }

    public java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/upgrade/UpgradeSnapShotV1;");

        <org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
