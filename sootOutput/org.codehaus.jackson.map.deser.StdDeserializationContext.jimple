public class org.codehaus.jackson.map.deser.StdDeserializationContext extends org.codehaus.jackson.map.DeserializationContext
{
    static final int MAX_ERROR_STR_LEN;
    protected org.codehaus.jackson.JsonParser _parser;
    protected final org.codehaus.jackson.map.DeserializerProvider _deserProvider;
    protected final org.codehaus.jackson.map.InjectableValues _injectableValues;
    protected org.codehaus.jackson.map.util.ArrayBuilders _arrayBuilders;
    protected org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer;
    protected java.text.DateFormat _dateFormat;

    public void <init>(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.InjectableValues)
    {
        org.codehaus.jackson.map.InjectableValues r4;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        org.codehaus.jackson.map.DeserializerProvider r3;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.JsonParser r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.JsonParser;

        r3 := @parameter2: org.codehaus.jackson.map.DeserializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.InjectableValues;

        specialinvoke r0.<org.codehaus.jackson.map.DeserializationContext: void <init>(org.codehaus.jackson.map.DeserializationConfig)>(r1);

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser> = r2;

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.DeserializerProvider _deserProvider> = r3;

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.InjectableValues _injectableValues> = r4;

        return;
    }

    public org.codehaus.jackson.map.DeserializerProvider getDeserializerProvider()
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        org.codehaus.jackson.map.DeserializerProvider $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.DeserializerProvider _deserProvider>;

        return $r1;
    }

    public org.codehaus.jackson.JsonParser getParser()
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        return $r1;
    }

    public java.lang.Object findInjectableValue(java.lang.Object, org.codehaus.jackson.map.BeanProperty, java.lang.Object)
    {
        org.codehaus.jackson.map.InjectableValues $r1, $r5;
        java.lang.IllegalStateException $r7;
        org.codehaus.jackson.map.BeanProperty r3;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Object r2, r4, $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter2: java.lang.Object;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.InjectableValues _injectableValues>;

        if $r1 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No \'injectableValues\' configured, can not inject value with id [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.InjectableValues _injectableValues>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.InjectableValues: java.lang.Object findInjectableValue(java.lang.Object,org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.BeanProperty,java.lang.Object)>(r2, r0, r3, r4);

        return $r6;
    }

    public final org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()
    {
        org.codehaus.jackson.map.util.ObjectBuffer $r1, r2;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer>;

        if r2 != null goto label1;

        $r1 = new org.codehaus.jackson.map.util.ObjectBuffer;

        specialinvoke $r1.<org.codehaus.jackson.map.util.ObjectBuffer: void <init>()>();

        r2 = $r1;

        goto label2;

     label1:
        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer> = null;

     label2:
        return r2;
    }

    public final void returnObjectBuffer(org.codehaus.jackson.map.util.ObjectBuffer)
    {
        org.codehaus.jackson.map.util.ObjectBuffer $r1, r2, $r3;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r2 := @parameter0: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer>;

        if $r1 == null goto label1;

        $i0 = virtualinvoke r2.<org.codehaus.jackson.map.util.ObjectBuffer: int initialCapacity()>();

        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer>;

        $i1 = virtualinvoke $r3.<org.codehaus.jackson.map.util.ObjectBuffer: int initialCapacity()>();

        if $i0 < $i1 goto label2;

     label1:
        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer _objectBuffer> = r2;

     label2:
        return;
    }

    public final org.codehaus.jackson.map.util.ArrayBuilders getArrayBuilders()
    {
        org.codehaus.jackson.map.util.ArrayBuilders $r1, $r2, $r3;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders _arrayBuilders>;

        if $r1 != null goto label1;

        $r3 = new org.codehaus.jackson.map.util.ArrayBuilders;

        specialinvoke $r3.<org.codehaus.jackson.map.util.ArrayBuilders: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders _arrayBuilders> = $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders _arrayBuilders>;

        return $r2;
    }

    public java.util.Date parseDate(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.util.Date $r3;
        java.lang.String r2, $r6;
        java.text.ParseException $r4;
        java.lang.IllegalArgumentException $r5;
        java.text.DateFormat $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r2 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.text.DateFormat getDateFormat()>();

        $r3 = virtualinvoke $r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r4.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public java.util.Calendar constructCalendar(java.util.Date)
    {
        java.util.Calendar $r0;
        org.codehaus.jackson.map.deser.StdDeserializationContext r2;
        java.util.Date r1;

        r2 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r1 := @parameter0: java.util.Date;

        $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        return $r0;
    }

    public boolean handleUnknownProperty(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.JsonDeserializer, java.lang.Object, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.DeserializationProblemHandler $r9;
        java.lang.Throwable $r10;
        org.codehaus.jackson.map.util.LinkedNode $r2, r11;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Object $r5, r7;
        org.codehaus.jackson.map.JsonDeserializer r6;
        java.lang.String r8;
        org.codehaus.jackson.JsonParser r3, r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.map.JsonDeserializer;

        r7 := @parameter2: java.lang.Object;

        r8 := @parameter3: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode getProblemHandlers()>();

        r11 = $r2;

        if $r2 == null goto label7;

        r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser> = r4;

     label1:
        if r11 == null goto label4;

        $r5 = virtualinvoke r11.<org.codehaus.jackson.map.util.LinkedNode: java.lang.Object value()>();

        $r9 = (org.codehaus.jackson.map.DeserializationProblemHandler) $r5;

        $z0 = virtualinvoke $r9.<org.codehaus.jackson.map.DeserializationProblemHandler: boolean handleUnknownProperty(org.codehaus.jackson.map.DeserializationContext,org.codehaus.jackson.map.JsonDeserializer,java.lang.Object,java.lang.String)>(r0, r6, r7, r8);

        if $z0 == 0 goto label3;

     label2:
        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser> = r3;

        return 1;

     label3:
        r11 = virtualinvoke r11.<org.codehaus.jackson.map.util.LinkedNode: org.codehaus.jackson.map.util.LinkedNode next()>();

        goto label1;

     label4:
        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser> = r3;

        goto label7;

     label5:
        $r10 := @caughtexception;

     label6:
        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser> = r3;

        throw $r10;

     label7:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)
    {
        org.codehaus.jackson.map.JsonMappingException $r4;
        org.codehaus.jackson.JsonToken $r3;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Class r1;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class,org.codehaus.jackson.JsonToken)>(r1, $r3);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class, org.codehaus.jackson.JsonToken)
    {
        org.codehaus.jackson.JsonToken r8;
        org.codehaus.jackson.map.JsonMappingException $r12;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r11;
        org.codehaus.jackson.JsonParser $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r1 := @parameter0: java.lang.Class;

        r8 := @parameter1: org.codehaus.jackson.JsonToken;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _calcName(java.lang.Class)>(r1);

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not deserialize instance of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r4, $r11);

        return $r12;
    }

    public org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class, java.lang.Throwable)
    {
        java.lang.Throwable r8;
        org.codehaus.jackson.map.JsonMappingException $r12;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r10;
        java.lang.Class r4;
        java.lang.String $r5, $r9, $r11;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.Throwable;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct instance of ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r9 = virtualinvoke r8.<java.lang.Throwable: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String,java.lang.Throwable)>($r2, $r11, r8);

        return $r12;
    }

    public org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r11;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r9;
        java.lang.Class r4;
        java.lang.String $r5, r8, $r10;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct instance of ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r2, $r10);

        return $r11;
    }

    public org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r14;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r9, $r10, $r12;
        java.lang.Class r4;
        java.lang.String $r5, $r8, r11, $r13;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: java.lang.Class;

        r11 := @parameter1: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct instance of ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from String value \'");

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _valueDesc()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r2, $r13);

        return $r14;
    }

    public org.codehaus.jackson.map.JsonMappingException weirdNumberException(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r14;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r9, $r10, $r12;
        java.lang.Class r4;
        java.lang.String $r5, $r8, r11, $r13;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: java.lang.Class;

        r11 := @parameter1: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct instance of ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from number value (");

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _valueDesc()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r2, $r13);

        return $r14;
    }

    public org.codehaus.jackson.map.JsonMappingException weirdKeyException(java.lang.Class, java.lang.String, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r15;
        java.lang.String $r5, r8, $r9, r12, $r14;
        org.codehaus.jackson.JsonParser $r2;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r10, $r11, $r13;
        java.lang.Class r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r4 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not construct Map key of type ");

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from String \"");

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _desc(java.lang.String)>(r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r2, $r14);

        return $r15;
    }

    public org.codehaus.jackson.map.JsonMappingException wrongTokenException(org.codehaus.jackson.JsonParser, org.codehaus.jackson.JsonToken, java.lang.String)
    {
        org.codehaus.jackson.JsonToken $r3, r6;
        org.codehaus.jackson.map.JsonMappingException $r12;
        org.codehaus.jackson.map.deser.StdDeserializationContext r13;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10;
        java.lang.String r9, $r11;
        org.codehaus.jackson.JsonParser r0;

        r13 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r6 := @parameter1: org.codehaus.jackson.JsonToken;

        r9 := @parameter2: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token (");

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), expected ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>(r0, $r11);

        return $r12;
    }

    public org.codehaus.jackson.map.JsonMappingException unknownFieldException(java.lang.Object, java.lang.String)
    {
        org.codehaus.jackson.map.exc.UnrecognizedPropertyException $r4;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Object r1;
        java.lang.String r2;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r4 = staticinvoke <org.codehaus.jackson.map.exc.UnrecognizedPropertyException: org.codehaus.jackson.map.exc.UnrecognizedPropertyException 'from'(org.codehaus.jackson.JsonParser,java.lang.Object,java.lang.String)>($r3, r1, r2);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonMappingException unknownTypeException(org.codehaus.jackson.type.JavaType, java.lang.String)
    {
        org.codehaus.jackson.map.JsonMappingException $r10;
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        org.codehaus.jackson.type.JavaType r7;
        java.lang.StringBuilder $r1, $r3, $r5, $r6, $r8;
        java.lang.String r4, $r9;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r7 := @parameter0: org.codehaus.jackson.type.JavaType;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not resolve type id \'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' into a subtype of ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>($r2, $r9);

        return $r10;
    }

    protected java.text.DateFormat getDateFormat()
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.Object $r5;
        org.codehaus.jackson.map.DeserializationConfig $r3;
        java.text.DateFormat $r1, $r2, $r4, $r6;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.text.DateFormat _dateFormat>;

        if $r1 != null goto label1;

        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat getDateFormat()>();

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.lang.Object clone()>();

        $r6 = (java.text.DateFormat) $r5;

        r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.text.DateFormat _dateFormat> = $r6;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.text.DateFormat _dateFormat>;

        return $r2;
    }

    protected java.lang.String determineClassName(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;
        org.codehaus.jackson.map.deser.StdDeserializationContext r2;

        r2 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.String getClassDescription(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String _calcName(java.lang.Class)
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r3;
        java.lang.Class r0, $r4;
        java.lang.StringBuilder $r2, $r6, $r7;
        java.lang.String $r1, $r5, $r8;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _calcName(java.lang.Class)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    protected java.lang.String _valueDesc()
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r0;
        java.lang.String $r2, $r3;
        org.codehaus.jackson.JsonParser $r1;
        java.lang.Exception $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: org.codehaus.jackson.JsonParser _parser>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializationContext: java.lang.String _desc(java.lang.String)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return "[N/A]";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.String _desc(java.lang.String)
    {
        org.codehaus.jackson.map.deser.StdDeserializationContext r6;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.String $r1, $r4, r7;

        r6 := @this: org.codehaus.jackson.map.deser.StdDeserializationContext;

        r7 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 <= 500 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, 500);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]...[");

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        $i2 = $i1 - 500;

        $r4 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r7;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.map.deser.StdDeserializationContext: int MAX_ERROR_STR_LEN> = 500;

        return;
    }
}
