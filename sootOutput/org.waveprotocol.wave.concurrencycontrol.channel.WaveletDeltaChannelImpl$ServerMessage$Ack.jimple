final class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack extends org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage
{
    private final int opsApplied;
    private final org.waveprotocol.wave.model.version.HashedVersion hashedVersion;

    void <init>(int, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r1;
        int i1;
        long $l0, $l2, $l3, $l4;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack;

        i1 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l2 = (long) i1;

        $l3 = $l0 - $l2;

        $l4 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: void <init>(long,long)>($l3, $l4);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: int opsApplied> = i1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: org.waveprotocol.wave.model.version.HashedVersion hashedVersion> = r1;

        return;
    }

    void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver r0;
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver;

        $i0 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: int opsApplied>;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver: void onAck(int,org.waveprotocol.wave.model.version.HashedVersion)>($i0, $r2);

        return;
    }

    public java.lang.String toString()
    {
        long $l0;
        int $i1;
        org.waveprotocol.wave.model.version.HashedVersion $r7;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack r2;
        java.lang.String $r10;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ack(");

        $l0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: long startVersion()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: int opsApplied>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ops, ");

        $r7 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r2;
        int $i0;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) r1;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

        return $i0;
    }
}
