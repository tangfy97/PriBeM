public class com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer extends com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer
{
    private static final java.lang.String DELEGATE;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT;
    private java.lang.Class[] delegateIf;
    private java.lang.Class delegateImpl;
    private com.mycila.inject.internal.asm.Type delegateType;
    static java.lang.Class class$java$lang$Object;

    public void <init>(java.lang.Class[], java.lang.Class)
    {
        java.lang.NoSuchMethodException $r6;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r7;
        java.lang.Class[] $r2, r4;
        com.mycila.inject.internal.asm.Type $r5;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer r0;
        java.lang.Class r1, $r3, $r8;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer;

        r4 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void <init>()>();

     label1:
        $r2 = newarray (java.lang.Class)[1];

        $r3 = <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class class$java$lang$Object>;

        if $r3 != null goto label2;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class class$java$lang$Object> = $r8;

        goto label3;

     label2:
        $r8 = <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class class$java$lang$Object>;

     label3:
        $r2[0] = $r8;

        virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class[] delegateIf> = r4;

        r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class delegateImpl> = r1;

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.asm.Type delegateType> = $r5;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        return;

        catch java.lang.NoSuchMethodException from label1 to label4 with label5;
    }

    public void begin_class(int, int, java.lang.String, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type[], java.lang.String)
    {
        com.mycila.inject.internal.asm.Type r2, $r8;
        java.lang.reflect.Method[] $r12;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer r0;
        java.lang.String r1, r4;
        com.mycila.inject.internal.asm.Type[] r3, $r6, $r7;
        java.lang.reflect.Method $r13, $r14;
        boolean $z0, $z1;
        java.lang.Class[] $r5, $r9, $r10;
        java.lang.Class $r11;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: com.mycila.inject.internal.asm.Type;

        r3 := @parameter4: com.mycila.inject.internal.asm.Type[];

        r4 := @parameter5: java.lang.String;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isInterface(int)>(i0);

        if $z0 != 0 goto label6;

        $r5 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class[] delegateIf>;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r5);

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] add(com.mycila.inject.internal.asm.Type[],com.mycila.inject.internal.asm.Type[])>(r3, $r6);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(i1, i0, r1, r2, $r7, r4);

        $r8 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.asm.Type delegateType>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(130, "$CGLIB_DELEGATE", $r8, null);

        i5 = 0;

     label1:
        $r9 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class[] delegateIf>;

        $i2 = lengthof $r9;

        if i5 >= $i2 goto label5;

        $r10 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class[] delegateIf>;

        $r11 = $r10[i5];

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i6 = 0;

     label2:
        $i3 = lengthof $r12;

        if i6 >= $i3 goto label4;

        $r13 = $r12[i6];

        $i4 = virtualinvoke $r13.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i4);

        if $z1 == 0 goto label3;

        $r14 = $r12[i6];

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: void addDelegate(java.lang.reflect.Method)>($r14);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        goto label7;

     label6:
        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(i1, i0, r1, r2, r3, r4);

     label7:
        return;
    }

    public com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int, com.mycila.inject.internal.cglib.core.Signature, com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.cglib.core.Signature r1;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer$1 $r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r3;
        int i0;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer r0;
        java.lang.String $r4;
        com.mycila.inject.internal.asm.Type[] r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        r2 := @parameter2: com.mycila.inject.internal.asm.Type[];

        $r3 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(i0, r1, r2);

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        $r5 = new com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer$1;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer$1: void <init>(com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, $r3);

        return $r5;

     label1:
        return $r3;
    }

    private void addDelegate(java.lang.reflect.Method)
    {
        java.lang.NoSuchMethodException $r20;
        com.mycila.inject.internal.asm.Type $r14;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r13;
        java.lang.StringBuffer $r16, $r17, $r18;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer r0;
        java.lang.String $r3, $r7, $r9, $r19;
        com.mycila.inject.internal.asm.Type[] $r12;
        java.lang.reflect.Method r1, $r5;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.Signature $r10;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r21;
        java.lang.Class[] $r4, $r11;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class $r2, $r6, $r8;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer;

        r1 := @parameter0: java.lang.reflect.Method;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.Class delegateImpl>;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, $r4);

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid delegate signature ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        $r21 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label4:
        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.Signature getSignature(java.lang.reflect.Member)>(r1);

        $r11 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $r12 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r11);

        $r13 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r10, $r12);

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("$CGLIB_DELEGATE");

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        $r14 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.asm.Type delegateType>;

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r14, $r10);

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r13.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static com.mycila.inject.internal.asm.Type access$000(com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer)
    {
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.asm.Type delegateType>;

        return $r1;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$100()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        $r0 = <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: java.lang.String DELEGATE> = "$CGLIB_DELEGATE";

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void <init>(Object)");

        <com.mycila.inject.internal.cglib.transform.impl.AddDelegateTransformer: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT> = $r0;

        return;
    }
}
