class org.apache.solr.common.cloud.ZkStateReader$ZKTF extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private static java.lang.ThreadGroup tg;

    private void <init>()
    {
        org.apache.solr.common.cloud.ZkStateReader$ZKTF r0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader$ZKTF;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        org.apache.solr.common.cloud.ZkStateReader$ZKTF r3;
        java.lang.Thread $r0;
        java.lang.ThreadGroup $r2;
        java.lang.Runnable r1;

        r3 := @this: org.apache.solr.common.cloud.ZkStateReader$ZKTF;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r2 = <org.apache.solr.common.cloud.ZkStateReader$ZKTF: java.lang.ThreadGroup tg>;

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>($r2, r1);

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(1);

        return $r0;
    }

    void <init>(org.apache.solr.common.cloud.ZkStateReader$1)
    {
        org.apache.solr.common.cloud.ZkStateReader$1 r1;
        org.apache.solr.common.cloud.ZkStateReader$ZKTF r0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader$ZKTF;

        r1 := @parameter0: org.apache.solr.common.cloud.ZkStateReader$1;

        specialinvoke r0.<org.apache.solr.common.cloud.ZkStateReader$ZKTF: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.ThreadGroup $r0;

        $r0 = new java.lang.ThreadGroup;

        specialinvoke $r0.<java.lang.ThreadGroup: void <init>(java.lang.String)>("ZkStateReader");

        <org.apache.solr.common.cloud.ZkStateReader$ZKTF: java.lang.ThreadGroup tg> = $r0;

        return;
    }
}
