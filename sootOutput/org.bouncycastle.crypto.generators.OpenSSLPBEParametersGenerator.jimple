public class org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator extends org.bouncycastle.crypto.PBEParametersGenerator
{
    private org.bouncycastle.crypto.Digest digest;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.bouncycastle.crypto.digests.MD5Digest $r1;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke r0.<org.bouncycastle.crypto.PBEParametersGenerator: void <init>()>();

        $r1 = new org.bouncycastle.crypto.digests.MD5Digest;

        specialinvoke $r1.<org.bouncycastle.crypto.digests.MD5Digest: void <init>()>();

        r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest> = $r1;

        return;
    }

    public void init(byte[], byte[])
    {
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        byte[] r1, r2;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        specialinvoke r0.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>(r1, r2, 1);

        return;
    }

    private byte[] generateDerivedKey(int)
    {
        byte[] r2, r3, $r4, $r5, $r7, $r8;
        org.bouncycastle.crypto.Digest $r1, $r6, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        i6 := @parameter0: int;

        $r1 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r2 = newarray (byte)[$i0];

        r3 = newarray (byte)[i6];

        i7 = 0;

     label1:
        $r6 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        $r5 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] password>;

        $r4 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] password>;

        $i1 = lengthof $r4;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>($r5, 0, $i1);

        $r9 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        $r8 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] salt>;

        $r7 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] salt>;

        $i2 = lengthof $r7;

        interfaceinvoke $r9.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>($r8, 0, $i2);

        $r10 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r10.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        $i3 = lengthof r2;

        if i6 <= $i3 goto label2;

        $i8 = lengthof r2;

        goto label3;

     label2:
        $i8 = i6;

     label3:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i7, $i8);

        i7 = i7 + $i8;

        $i5 = i6 - $i8;

        i6 = $i5;

        if $i5 != 0 goto label4;

        goto label5;

     label4:
        $r11 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: void reset()>();

        $r12 = r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.Digest digest>;

        $i4 = lengthof r2;

        interfaceinvoke $r12.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i4);

        goto label1;

     label5:
        return r3;
    }

    public org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int)
    {
        byte[] $r1;
        int i0, i1;
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.bouncycastle.crypto.params.KeyParameter $r2;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        i0 := @parameter0: int;

        i1 = i0 / 8;

        $r1 = specialinvoke r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] generateDerivedKey(int)>(i1);

        $r2 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r2.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r1, 0, i1);

        return $r2;
    }

    public org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int, int)
    {
        byte[] $r1;
        org.bouncycastle.crypto.params.ParametersWithIV $r2;
        int $i0, i1, i2, i3, i4;
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.bouncycastle.crypto.params.KeyParameter $r3;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i3 = i1 / 8;

        i4 = i2 / 8;

        $i0 = i3 + i4;

        $r1 = specialinvoke r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: byte[] generateDerivedKey(int)>($i0);

        $r2 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r3 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r3.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r1, 0, i3);

        specialinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[],int,int)>($r3, $r1, i3, i4);

        return $r2;
    }

    public org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)
    {
        int i0;
        org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator r0;
        org.bouncycastle.crypto.CipherParameters $r1;

        r0 := @this: org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int)>(i0);

        return $r1;
    }
}
