public class ucar.ma2.MAVector extends java.lang.Object
{
    private ucar.ma2.Array a;
    private int nelems;
    private ucar.ma2.Index ima;

    public void <init>(double[])
    {
        double[] r1;
        ucar.ma2.MAVector r0;
        ucar.ma2.Array $r2;

        r0 := @this: ucar.ma2.MAVector;

        r1 := @parameter0: double[];

        $r2 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Object)>(r1);

        specialinvoke r0.<ucar.ma2.MAVector: void <init>(ucar.ma2.Array)>($r2);

        return;
    }

    public void <init>(int)
    {
        ucar.ma2.ArrayDouble$D1 $r1;
        ucar.ma2.Index $r3;
        int i0;
        ucar.ma2.MAVector r0;
        ucar.ma2.Array $r2;

        r0 := @this: ucar.ma2.MAVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r1.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(i0);

        r0.<ucar.ma2.MAVector: ucar.ma2.Array a> = $r1;

        r0.<ucar.ma2.MAVector: int nelems> = i0;

        $r2 = r0.<ucar.ma2.MAVector: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        r0.<ucar.ma2.MAVector: ucar.ma2.Index ima> = $r3;

        return;
    }

    public void <init>(ucar.ma2.Array)
    {
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.MAVector r0;
        ucar.ma2.Array r1;
        int[] $r2;
        ucar.ma2.Index $r3;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: ucar.ma2.MAVector;

        r1 := @parameter0: ucar.ma2.Array;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.MAVector: ucar.ma2.Array a> = r1;

        $i0 = virtualinvoke r1.<ucar.ma2.Array: int getRank()>();

        if $i0 == 1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rank != 1, instead = ");

        $i2 = virtualinvoke r1.<ucar.ma2.Array: int getRank()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<ucar.ma2.Array: int[] getShape()>();

        $i1 = $r2[0];

        r0.<ucar.ma2.MAVector: int nelems> = $i1;

        $r3 = virtualinvoke r1.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        r0.<ucar.ma2.MAVector: ucar.ma2.Index ima> = $r3;

        return;
    }

    public int getNelems()
    {
        int $i0;
        ucar.ma2.MAVector r0;

        r0 := @this: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAVector: int nelems>;

        return $i0;
    }

    public double getDouble(int)
    {
        ucar.ma2.Index $r1, $r3;
        int i0;
        ucar.ma2.MAVector r0;
        ucar.ma2.Array $r2;
        double $d0;

        r0 := @this: ucar.ma2.MAVector;

        i0 := @parameter0: int;

        $r2 = r0.<ucar.ma2.MAVector: ucar.ma2.Array a>;

        $r1 = r0.<ucar.ma2.MAVector: ucar.ma2.Index ima>;

        $r3 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        $d0 = virtualinvoke $r2.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r3);

        return $d0;
    }

    public void setDouble(int, double)
    {
        ucar.ma2.Index $r1, $r3;
        int i0;
        ucar.ma2.MAVector r0;
        ucar.ma2.Array $r2;
        double d0;

        r0 := @this: ucar.ma2.MAVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r2 = r0.<ucar.ma2.MAVector: ucar.ma2.Array a>;

        $r1 = r0.<ucar.ma2.MAVector: ucar.ma2.Index ima>;

        $r3 = virtualinvoke $r1.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        virtualinvoke $r2.<ucar.ma2.Array: void setDouble(ucar.ma2.Index,double)>($r3, d0);

        return;
    }

    public ucar.ma2.MAVector copy()
    {
        ucar.ma2.MAVector $r0, r1;
        ucar.ma2.Array $r2, $r3;

        r1 := @this: ucar.ma2.MAVector;

        $r0 = new ucar.ma2.MAVector;

        $r2 = r1.<ucar.ma2.MAVector: ucar.ma2.Array a>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Array: ucar.ma2.Array copy()>();

        specialinvoke $r0.<ucar.ma2.MAVector: void <init>(ucar.ma2.Array)>($r3);

        return $r0;
    }

    public double cos(ucar.ma2.MAVector)
    {
        ucar.ma2.MAVector r0, r1;
        byte $b2, $b3;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r8;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: ucar.ma2.MAVector;

        r1 := @parameter0: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAVector: int nelems>;

        $i1 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAVector.cos ");

        $i4 = r0.<ucar.ma2.MAVector: int nelems>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i5 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        $d0 = virtualinvoke r0.<ucar.ma2.MAVector: double norm()>();

        $d1 = virtualinvoke r1.<ucar.ma2.MAVector: double norm()>();

        $b2 = $d0 cmpl 0.0;

        if $b2 == 0 goto label2;

        $b3 = $d1 cmpl 0.0;

        if $b3 != 0 goto label3;

     label2:
        return 0.0;

     label3:
        $d2 = virtualinvoke r0.<ucar.ma2.MAVector: double dot(ucar.ma2.MAVector)>(r1);

        $d3 = $d0 * $d1;

        $d4 = $d2 / $d3;

        return $d4;
    }

    public double dot(ucar.ma2.MAVector)
    {
        ucar.ma2.MAVector r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r8;
        double $d0, $d1, $d2, d3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: ucar.ma2.MAVector;

        r1 := @parameter0: ucar.ma2.MAVector;

        $i0 = r0.<ucar.ma2.MAVector: int nelems>;

        $i1 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MAVector.dot ");

        $i3 = r0.<ucar.ma2.MAVector: int nelems>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i4 = virtualinvoke r1.<ucar.ma2.MAVector: int getNelems()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        d3 = 0.0;

        i5 = 0;

     label2:
        $i2 = r0.<ucar.ma2.MAVector: int nelems>;

        if i5 >= $i2 goto label3;

        $d0 = virtualinvoke r0.<ucar.ma2.MAVector: double getDouble(int)>(i5);

        $d1 = virtualinvoke r1.<ucar.ma2.MAVector: double getDouble(int)>(i5);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        return d3;
    }

    public double norm()
    {
        int $i0, i1;
        ucar.ma2.MAVector r0;
        double $d0, $d1, $d2, d3;

        r0 := @this: ucar.ma2.MAVector;

        d3 = 0.0;

        i1 = 0;

     label1:
        $i0 = r0.<ucar.ma2.MAVector: int nelems>;

        if i1 >= $i0 goto label2;

        $d1 = virtualinvoke r0.<ucar.ma2.MAVector: double getDouble(int)>(i1);

        $d2 = $d1 * $d1;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d3);

        return $d0;
    }

    public void normalize()
    {
        ucar.ma2.MAVector r0;
        byte $b0;
        int $i1, i2, $i3;
        double $d0, $d1, $d2;

        r0 := @this: ucar.ma2.MAVector;

        $d0 = virtualinvoke r0.<ucar.ma2.MAVector: double norm()>();

        $b0 = $d0 cmpg 0.0;

        $i3 = (int) $b0;

        if $i3 > 0 goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i1 = r0.<ucar.ma2.MAVector: int nelems>;

        if i2 >= $i1 goto label3;

        $d1 = virtualinvoke r0.<ucar.ma2.MAVector: double getDouble(int)>(i2);

        $d2 = $d1 / $d0;

        virtualinvoke r0.<ucar.ma2.MAVector: void setDouble(int,double)>(i2, $d2);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }
}
