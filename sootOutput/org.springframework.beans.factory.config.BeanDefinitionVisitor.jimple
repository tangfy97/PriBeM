public class org.springframework.beans.factory.config.BeanDefinitionVisitor extends java.lang.Object
{
    private org.springframework.util.StringValueResolver valueResolver;

    public void <init>(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r1;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r0;

        r0 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r1 := @parameter0: org.springframework.util.StringValueResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "StringValueResolver must not be null");

        r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: org.springframework.util.StringValueResolver valueResolver> = r1;

        return;
    }

    protected void <init>()
    {
        org.springframework.beans.factory.config.BeanDefinitionVisitor r0;

        r0 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void visitBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)
    {
        java.util.List $r5;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r3;
        java.util.Map $r4;
        org.springframework.beans.factory.config.BeanDefinition r1;
        org.springframework.beans.MutablePropertyValues $r2;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r0;

        r0 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r1 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitParentName(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitBeanClassName(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitFactoryBeanName(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitFactoryMethodName(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitScope(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitPropertyValues(org.springframework.beans.MutablePropertyValues)>($r2);

        $r3 = interfaceinvoke r1.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.Map getIndexedArgumentValues()>();

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitIndexedArgumentValues(java.util.Map)>($r4);

        $r5 = virtualinvoke $r3.<org.springframework.beans.factory.config.ConstructorArgumentValues: java.util.List getGenericArgumentValues()>();

        virtualinvoke r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitGenericArgumentValues(java.util.List)>($r5);

        return;
    }

    protected void visitParentName(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setParentName(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void visitBeanClassName(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setBeanClassName(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void visitFactoryBeanName(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setFactoryBeanName(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void visitFactoryMethodName(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryMethodName()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setFactoryMethodName(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void visitScope(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setScope(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void visitPropertyValues(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.PropertyValue r2;
        org.springframework.beans.MutablePropertyValues r0;
        org.springframework.beans.PropertyValue[] $r1;
        int i0, i1;
        java.lang.Object $r4, $r5, $r6;
        java.lang.String $r7;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r3;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: org.springframework.beans.MutablePropertyValues;

        $r1 = virtualinvoke r0.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $r4 = virtualinvoke r2.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r4);

        $r6 = virtualinvoke r2.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 != 0 goto label2;

        $r7 = virtualinvoke r2.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        virtualinvoke r0.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>($r7, $r5);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return;
    }

    protected void visitIndexedArgumentValues(java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        java.util.Map r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r4;
        java.lang.Object $r3, $r6, $r7, $r8;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r5;
        boolean $z0, $z1;

        r5 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r3;

        $r6 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $r7 = virtualinvoke r5.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r6);

        $r8 = virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z0 != 0 goto label2;

        virtualinvoke r4.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void setValue(java.lang.Object)>($r7);

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    protected void visitGenericArgumentValues(java.util.List)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder r3;
        java.lang.Object $r2, $r5, $r6, $r7;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r4;
        boolean $z0, $z1;

        r4 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder) $r2;

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $r6 = virtualinvoke r4.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r5);

        $r7 = virtualinvoke r3.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: java.lang.Object getValue()>();

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z0 != 0 goto label2;

        virtualinvoke r3.<org.springframework.beans.factory.config.ConstructorArgumentValues$ValueHolder: void setValue(java.lang.Object)>($r6);

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    protected java.lang.Object resolveValue(java.lang.Object)
    {
        java.util.Map $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.springframework.beans.factory.config.RuntimeBeanReference $r17, r21;
        java.util.Set $r7;
        java.util.List $r8;
        java.lang.Object[] $r9;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r18;
        org.springframework.beans.factory.config.BeanDefinition $r19, $r20;
        java.lang.String $r2, $r3, $r4, $r5, $r10, $r11, $r12, $r14, $r15, $r16;
        org.springframework.beans.factory.config.RuntimeBeanNameReference $r13, r22;
        org.springframework.beans.factory.config.TypedStringValue r23;
        java.lang.Object r0;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r1;

        r1 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.beans.factory.config.BeanDefinition;

        if $z0 == 0 goto label01;

        $r20 = (org.springframework.beans.factory.config.BeanDefinition) r0;

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)>($r20);

        goto label10;

     label01:
        $z1 = r0 instanceof org.springframework.beans.factory.config.BeanDefinitionHolder;

        if $z1 == 0 goto label02;

        $r18 = (org.springframework.beans.factory.config.BeanDefinitionHolder) r0;

        $r19 = virtualinvoke $r18.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)>($r19);

        goto label10;

     label02:
        $z2 = r0 instanceof org.springframework.beans.factory.config.RuntimeBeanReference;

        if $z2 == 0 goto label03;

        r21 = (org.springframework.beans.factory.config.RuntimeBeanReference) r0;

        $r14 = virtualinvoke r21.<org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String getBeanName()>();

        $r15 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r14);

        $r16 = virtualinvoke r21.<org.springframework.beans.factory.config.RuntimeBeanReference: java.lang.String getBeanName()>();

        $z11 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z11 != 0 goto label10;

        $r17 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r17.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r15);

        return $r17;

     label03:
        $z3 = r0 instanceof org.springframework.beans.factory.config.RuntimeBeanNameReference;

        if $z3 == 0 goto label04;

        r22 = (org.springframework.beans.factory.config.RuntimeBeanNameReference) r0;

        $r10 = virtualinvoke r22.<org.springframework.beans.factory.config.RuntimeBeanNameReference: java.lang.String getBeanName()>();

        $r11 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r10);

        $r12 = virtualinvoke r22.<org.springframework.beans.factory.config.RuntimeBeanNameReference: java.lang.String getBeanName()>();

        $z10 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z10 != 0 goto label10;

        $r13 = new org.springframework.beans.factory.config.RuntimeBeanNameReference;

        specialinvoke $r13.<org.springframework.beans.factory.config.RuntimeBeanNameReference: void <init>(java.lang.String)>($r11);

        return $r13;

     label04:
        $z4 = r0 instanceof java.lang.Object[];

        if $z4 == 0 goto label05;

        $r9 = (java.lang.Object[]) r0;

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitArray(java.lang.Object[])>($r9);

        goto label10;

     label05:
        $z5 = r0 instanceof java.util.List;

        if $z5 == 0 goto label06;

        $r8 = (java.util.List) r0;

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitList(java.util.List)>($r8);

        goto label10;

     label06:
        $z6 = r0 instanceof java.util.Set;

        if $z6 == 0 goto label07;

        $r7 = (java.util.Set) r0;

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitSet(java.util.Set)>($r7);

        goto label10;

     label07:
        $z7 = r0 instanceof java.util.Map;

        if $z7 == 0 goto label08;

        $r6 = (java.util.Map) r0;

        virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: void visitMap(java.util.Map)>($r6);

        goto label10;

     label08:
        $z8 = r0 instanceof org.springframework.beans.factory.config.TypedStringValue;

        if $z8 == 0 goto label09;

        r23 = (org.springframework.beans.factory.config.TypedStringValue) r0;

        $r4 = virtualinvoke r23.<org.springframework.beans.factory.config.TypedStringValue: java.lang.String getValue()>();

        if $r4 == null goto label10;

        $r5 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r4);

        virtualinvoke r23.<org.springframework.beans.factory.config.TypedStringValue: void setValue(java.lang.String)>($r5);

        goto label10;

     label09:
        $z9 = r0 instanceof java.lang.String;

        if $z9 == 0 goto label10;

        $r2 = (java.lang.String) r0;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.String resolveStringValue(java.lang.String)>($r2);

        return $r3;

     label10:
        return r0;
    }

    protected void visitArray(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: java.lang.Object[];

        i0 = 0;

        goto label3;

     label1:
        r1 = r0[i0];

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>(r1);

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z0 != 0 goto label2;

        r0[i0] = $r3;

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        return;
    }

    protected void visitList(java.util.List)
    {
        java.util.List r0;
        int i0, $i1;
        java.lang.Object $r1, $r3;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r2;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r0 := @parameter0: java.util.List;

        i0 = 0;

        goto label3;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r1);

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 != 0 goto label2;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r3);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        return;
    }

    protected void visitSet(java.util.Set)
    {
        java.util.Iterator $r2;
        java.util.Set r1;
        int i0, $i1, $i2;
        java.lang.Object $r3, $r5;
        java.util.LinkedHashSet $r0;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r4;
        boolean z0, $z1, $z2;

        r4 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r1 := @parameter0: java.util.Set;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        z0 = 0;

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        i0 = $i1;

        $r5 = virtualinvoke r4.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r3);

        if $r5 == null goto label4;

        $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        goto label5;

     label4:
        $i2 = 0;

     label5:
        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        if z0 != 0 goto label6;

        if $r5 != $r3 goto label6;

        if $i2 != i0 goto label6;

        $z1 = 0;

        goto label7;

     label6:
        $z1 = 1;

     label7:
        z0 = $z1;

     label8:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        if z0 == 0 goto label9;

        interfaceinvoke r1.<java.util.Set: void clear()>();

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r0);

     label9:
        return;
    }

    protected void visitMap(java.util.Map)
    {
        java.util.LinkedHashMap $r0;
        java.util.Map r1;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, $r6, $r8, $r9, $r10;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r7;

        r7 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        z0 = 0;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 == null goto label2;

        $i1 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        i0 = $i1;

        $r8 = virtualinvoke r7.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r6);

        if $r8 == null goto label4;

        $i2 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

        goto label5;

     label4:
        $i2 = 0;

     label5:
        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = virtualinvoke r7.<org.springframework.beans.factory.config.BeanDefinitionVisitor: java.lang.Object resolveValue(java.lang.Object)>($r9);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        if z0 != 0 goto label6;

        if $r10 != $r9 goto label6;

        if $r8 != $r6 goto label6;

        if $i2 != i0 goto label6;

        $z1 = 0;

        goto label7;

     label6:
        $z1 = 1;

     label7:
        z0 = $z1;

     label8:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        if z0 == 0 goto label9;

        interfaceinvoke r1.<java.util.Map: void clear()>();

        interfaceinvoke r1.<java.util.Map: void putAll(java.util.Map)>($r0);

     label9:
        return;
    }

    protected java.lang.String resolveStringValue(java.lang.String)
    {
        org.springframework.util.StringValueResolver $r1, $r3;
        java.lang.IllegalStateException $r5;
        java.lang.String r2, $r4, $r6;
        org.springframework.beans.factory.config.BeanDefinitionVisitor r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.BeanDefinitionVisitor;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: org.springframework.util.StringValueResolver valueResolver>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No StringValueResolver specified - pass a resolver object into the constructor or override the \'resolveStringValue\' method");

        throw $r5;

     label1:
        $r3 = r0.<org.springframework.beans.factory.config.BeanDefinitionVisitor: org.springframework.util.StringValueResolver valueResolver>;

        $r4 = interfaceinvoke $r3.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r2);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r6 = r2;

        goto label3;

     label2:
        $r6 = $r4;

     label3:
        return $r6;
    }
}
