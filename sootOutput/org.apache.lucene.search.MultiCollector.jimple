public class org.apache.lucene.search.MultiCollector extends org.apache.lucene.search.Collector
{
    private final org.apache.lucene.search.Collector[] collectors;

    public static transient org.apache.lucene.search.Collector wrap(org.apache.lucene.search.Collector[])
    {
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9;
        org.apache.lucene.search.MultiCollector $r1, $r2;
        org.apache.lucene.search.Collector r4, r5, r6, r8;
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.search.Collector[] r0, r7;

        r0 := @parameter0: org.apache.lucene.search.Collector[];

        i2 = 0;

        i3 = lengthof r0;

        i4 = 0;

     label01:
        if i4 >= i3 goto label03;

        r4 = r0[i4];

        if r4 == null goto label02;

        i2 = i2 + 1;

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        if i2 != 0 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least 1 collector must not be null");

        throw $r3;

     label04:
        if i2 != 1 goto label08;

        r5 = null;

        i5 = lengthof r0;

        i6 = 0;

     label05:
        if i6 >= i5 goto label07;

        r6 = r0[i6];

        if r6 == null goto label06;

        r5 = r6;

        goto label07;

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        return r5;

     label08:
        $i0 = lengthof r0;

        if i2 != $i0 goto label09;

        $r2 = new org.apache.lucene.search.MultiCollector;

        specialinvoke $r2.<org.apache.lucene.search.MultiCollector: void <init>(org.apache.lucene.search.Collector[])>(r0);

        return $r2;

     label09:
        r7 = newarray (org.apache.lucene.search.Collector)[i2];

        i7 = 0;

        i8 = lengthof r0;

        i9 = 0;

     label10:
        if i9 >= i8 goto label12;

        r8 = r0[i9];

        if r8 == null goto label11;

        $i1 = i7;

        i7 = i7 + 1;

        r7[$i1] = r8;

     label11:
        i9 = i9 + 1;

        goto label10;

     label12:
        $r1 = new org.apache.lucene.search.MultiCollector;

        specialinvoke $r1.<org.apache.lucene.search.MultiCollector: void <init>(org.apache.lucene.search.Collector[])>(r7);

        return $r1;
    }

    private transient void <init>(org.apache.lucene.search.Collector[])
    {
        org.apache.lucene.search.Collector[] r1;
        org.apache.lucene.search.MultiCollector r0;

        r0 := @this: org.apache.lucene.search.MultiCollector;

        r1 := @parameter0: org.apache.lucene.search.Collector[];

        specialinvoke r0.<org.apache.lucene.search.Collector: void <init>()>();

        r0.<org.apache.lucene.search.MultiCollector: org.apache.lucene.search.Collector[] collectors> = r1;

        return;
    }

    public boolean acceptsDocsOutOfOrder()
    {
        int i0, i1;
        org.apache.lucene.search.Collector[] r1;
        org.apache.lucene.search.MultiCollector r0;
        org.apache.lucene.search.Collector r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.MultiCollector;

        r1 = r0.<org.apache.lucene.search.MultiCollector: org.apache.lucene.search.Collector[] collectors>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<org.apache.lucene.search.Collector: boolean acceptsDocsOutOfOrder()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void collect(int) throws java.io.IOException
    {
        int i0, i1, i2;
        org.apache.lucene.search.Collector[] r1;
        org.apache.lucene.search.MultiCollector r0;
        org.apache.lucene.search.Collector r2;

        r0 := @this: org.apache.lucene.search.MultiCollector;

        i1 := @parameter0: int;

        r1 = r0.<org.apache.lucene.search.MultiCollector: org.apache.lucene.search.Collector[] collectors>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<org.apache.lucene.search.Collector: void collect(int)>(i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        int i0, i1;
        org.apache.lucene.search.Collector[] r1;
        org.apache.lucene.search.MultiCollector r0;
        org.apache.lucene.search.Collector r2;
        org.apache.lucene.index.AtomicReaderContext r3;

        r0 := @this: org.apache.lucene.search.MultiCollector;

        r3 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r1 = r0.<org.apache.lucene.search.MultiCollector: org.apache.lucene.search.Collector[] collectors>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<org.apache.lucene.search.Collector: void setNextReader(org.apache.lucene.index.AtomicReaderContext)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException
    {
        org.apache.lucene.search.Scorer r3;
        int i0, i1;
        org.apache.lucene.search.Collector[] r1;
        org.apache.lucene.search.MultiCollector r0;
        org.apache.lucene.search.Collector r2;

        r0 := @this: org.apache.lucene.search.MultiCollector;

        r3 := @parameter0: org.apache.lucene.search.Scorer;

        r1 = r0.<org.apache.lucene.search.MultiCollector: org.apache.lucene.search.Collector[] collectors>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<org.apache.lucene.search.Collector: void setScorer(org.apache.lucene.search.Scorer)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
