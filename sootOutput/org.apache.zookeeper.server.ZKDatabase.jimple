public class org.apache.zookeeper.server.ZKDatabase extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    protected org.apache.zookeeper.server.DataTree dataTree;
    protected java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts;
    protected org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog;
    protected long minCommittedLog;
    protected long maxCommittedLog;
    public static final int commitLogCount;
    protected static int commitLogBuffer;
    protected java.util.LinkedList committedLog;
    protected java.util.concurrent.locks.ReentrantReadWriteLock logLock;
    private volatile boolean initialized;

    public void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog)
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r5;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r5 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock> = $r2;

        r0.<org.apache.zookeeper.server.ZKDatabase: boolean initialized> = 0;

        $r3 = new org.apache.zookeeper.server.DataTree;

        specialinvoke $r3.<org.apache.zookeeper.server.DataTree: void <init>()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts> = $r4;

        r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog> = r5;

        return;
    }

    public boolean isInitialized()
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $z0 = r0.<org.apache.zookeeper.server.ZKDatabase: boolean initialized>;

        return $z0;
    }

    public void clear()
    {
        java.lang.Throwable $r6;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r4;
        java.util.LinkedList $r5;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r0.<org.apache.zookeeper.server.ZKDatabase: long minCommittedLog> = 0L;

        r0.<org.apache.zookeeper.server.ZKDatabase: long maxCommittedLog> = 0L;

        $r1 = new org.apache.zookeeper.server.DataTree;

        specialinvoke $r1.<org.apache.zookeeper.server.DataTree: void <init>()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree> = $r1;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

     label1:
        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r5 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        virtualinvoke $r5.<java.util.LinkedList: void clear()>();

        goto label6;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label7;

     label4:
        throw $r6;

     label5:
        r0.<org.apache.zookeeper.server.ZKDatabase: boolean initialized> = 0;

        return;

     label6:
        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label2;

     label7:
        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.zookeeper.server.DataTree getDataTree()
    {
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        return $r1;
    }

    public long getmaxCommittedLog()
    {
        long $l0;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $l0 = r0.<org.apache.zookeeper.server.ZKDatabase: long maxCommittedLog>;

        return $l0;
    }

    public long getminCommittedLog()
    {
        long $l0;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $l0 = r0.<org.apache.zookeeper.server.ZKDatabase: long minCommittedLog>;

        return $l0;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock getLogLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock>;

        return $r1;
    }

    public synchronized java.util.LinkedList getCommittedLog()
    {
        java.lang.Throwable $r7;
        org.apache.zookeeper.server.ZKDatabase r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1, $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;
        int $i0;
        java.util.LinkedList $r4, $r5, $r6;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>();

        if $i0 > 0 goto label5;

     label1:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r5 = new java.util.LinkedList;

        $r6 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        specialinvoke $r5.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        goto label6;

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        throw $r7;

     label5:
        $r4 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        return $r4;

     label6:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        goto label2;

     label7:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long getDataTreeLastProcessedZxid()
    {
        org.apache.zookeeper.server.DataTree $r1;
        long $l0;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $l0 = $r1.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid>;

        return $l0;
    }

    public void setDataTreeInit(boolean)
    {
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.zookeeper.server.ZKDatabase r0;
        boolean z0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r1.<org.apache.zookeeper.server.DataTree: boolean initialized> = z0;

        return;
    }

    public java.util.Collection getSessions()
    {
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.zookeeper.server.ZKDatabase r0;
        java.util.Collection $r2;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r2 = virtualinvoke $r1.<org.apache.zookeeper.server.DataTree: java.util.Collection getSessions()>();

        return $r2;
    }

    public java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        return $r1;
    }

    public long loadDataBase() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r4;
        org.apache.zookeeper.server.ZKDatabase r1;
        org.apache.zookeeper.server.ZKDatabase$1 $r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.zookeeper.server.DataTree $r3;
        long $l0;

        r1 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r0 = new org.apache.zookeeper.server.ZKDatabase$1;

        specialinvoke $r0.<org.apache.zookeeper.server.ZKDatabase$1: void <init>(org.apache.zookeeper.server.ZKDatabase)>(r1);

        $r4 = r1.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        $r3 = r1.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r2 = r1.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap sessionsWithTimeouts>;

        $l0 = virtualinvoke $r4.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: long restore(org.apache.zookeeper.server.DataTree,java.util.Map,org.apache.zookeeper.server.persistence.FileTxnSnapLog$PlayBackListener)>($r3, $r2, $r0);

        r1.<org.apache.zookeeper.server.ZKDatabase: boolean initialized> = 1;

        return $l0;
    }

    public void addCommittedProposal(org.apache.zookeeper.server.Request)
    {
        java.lang.Throwable $r21;
        org.apache.jute.BinaryOutputArchive $r6;
        byte[] $r11;
        java.io.ByteArrayOutputStream $r5;
        org.apache.zookeeper.server.ZKDatabase r0;
        long $l2, $l3, $l4, $l5, $l6;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r2;
        org.apache.zookeeper.server.quorum.QuorumPacket $r10, $r14, $r20;
        int $i0, $i1;
        java.util.LinkedList $r3, $r4, $r13, $r16, $r17;
        org.slf4j.Logger $r23;
        org.apache.zookeeper.txn.TxnHeader $r8;
        org.apache.jute.Record $r9, $r15;
        java.io.IOException $r22;
        org.apache.zookeeper.server.Request r7;
        org.apache.zookeeper.server.quorum.Leader$Proposal $r12, $r19;
        java.lang.Object $r18;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r7 := @parameter0: org.apache.zookeeper.server.Request;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.locks.ReentrantReadWriteLock logLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

     label01:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= 500 goto label02;

        $r16 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        virtualinvoke $r16.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r17 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        $r18 = virtualinvoke $r17.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r19 = (org.apache.zookeeper.server.quorum.Leader$Proposal) $r18;

        $r20 = $r19.<org.apache.zookeeper.server.quorum.Leader$Proposal: org.apache.zookeeper.server.quorum.QuorumPacket packet>;

        $l6 = virtualinvoke $r20.<org.apache.zookeeper.server.quorum.QuorumPacket: long getZxid()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: long minCommittedLog> = $l6;

     label02:
        $r4 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i1 != 0 goto label03;

        $l4 = r7.<org.apache.zookeeper.server.Request: long zxid>;

        r0.<org.apache.zookeeper.server.ZKDatabase: long minCommittedLog> = $l4;

        $l5 = r7.<org.apache.zookeeper.server.Request: long zxid>;

        r0.<org.apache.zookeeper.server.ZKDatabase: long maxCommittedLog> = $l5;

     label03:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = staticinvoke <org.apache.jute.BinaryOutputArchive: org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)>($r5);

     label04:
        $r8 = r7.<org.apache.zookeeper.server.Request: org.apache.zookeeper.txn.TxnHeader hdr>;

        virtualinvoke $r8.<org.apache.zookeeper.txn.TxnHeader: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r6, "hdr");

        $r9 = r7.<org.apache.zookeeper.server.Request: org.apache.jute.Record txn>;

        if $r9 == null goto label05;

        $r15 = r7.<org.apache.zookeeper.server.Request: org.apache.jute.Record txn>;

        interfaceinvoke $r15.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r6, "txn");

     label05:
        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r22 := @caughtexception;

        $r23 = <org.apache.zookeeper.server.ZKDatabase: org.slf4j.Logger LOG>;

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("This really should be impossible", $r22);

     label08:
        $r10 = new org.apache.zookeeper.server.quorum.QuorumPacket;

        $l2 = r7.<org.apache.zookeeper.server.Request: long zxid>;

        $r11 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<org.apache.zookeeper.server.quorum.QuorumPacket: void <init>(int,long,byte[],java.util.List)>(2, $l2, $r11, null);

        $r12 = new org.apache.zookeeper.server.quorum.Leader$Proposal;

        specialinvoke $r12.<org.apache.zookeeper.server.quorum.Leader$Proposal: void <init>()>();

        $r12.<org.apache.zookeeper.server.quorum.Leader$Proposal: org.apache.zookeeper.server.quorum.QuorumPacket packet> = $r10;

        $r12.<org.apache.zookeeper.server.quorum.Leader$Proposal: org.apache.zookeeper.server.Request request> = r7;

        $r13 = r0.<org.apache.zookeeper.server.ZKDatabase: java.util.LinkedList committedLog>;

        virtualinvoke $r13.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        $r14 = $r12.<org.apache.zookeeper.server.quorum.Leader$Proposal: org.apache.zookeeper.server.quorum.QuorumPacket packet>;

        $l3 = virtualinvoke $r14.<org.apache.zookeeper.server.quorum.QuorumPacket: long getZxid()>();

        r0.<org.apache.zookeeper.server.ZKDatabase: long maxCommittedLog> = $l3;

        goto label13;

     label09:
        goto label12;

     label10:
        $r21 := @caughtexception;

        goto label14;

     label11:
        throw $r21;

     label12:
        return;

     label13:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label09;

     label14:
        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label11;

        catch java.io.IOException from label04 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void removeCnxn(org.apache.zookeeper.server.ServerCnxn)
    {
        org.apache.zookeeper.server.DataTree $r2;
        org.apache.zookeeper.server.ServerCnxn r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        virtualinvoke $r2.<org.apache.zookeeper.server.DataTree: void removeCnxn(org.apache.zookeeper.Watcher)>(r1);

        return;
    }

    public void killSession(long, long)
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r1;
        long l0, l1;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        virtualinvoke $r1.<org.apache.zookeeper.server.DataTree: void killSession(long,long)>(l0, l1);

        return;
    }

    public void dumpEphemerals(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.zookeeper.server.DataTree $r2;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        virtualinvoke $r2.<org.apache.zookeeper.server.DataTree: void dumpEphemerals(java.io.PrintWriter)>(r1);

        return;
    }

    public int getNodeCount()
    {
        org.apache.zookeeper.server.DataTree $r1;
        int $i0;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $i0 = virtualinvoke $r1.<org.apache.zookeeper.server.DataTree: int getNodeCount()>();

        return $i0;
    }

    public java.util.HashSet getEphemerals(long)
    {
        java.util.HashSet $r2;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r1;
        long l0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r2 = virtualinvoke $r1.<org.apache.zookeeper.server.DataTree: java.util.HashSet getEphemerals(long)>(l0);

        return $r2;
    }

    public void setlastProcessedZxid(long)
    {
        org.apache.zookeeper.server.DataTree $r1;
        long l0;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r1.<org.apache.zookeeper.server.DataTree: long lastProcessedZxid> = l0;

        return;
    }

    public org.apache.zookeeper.server.DataTree$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader, org.apache.jute.Record)
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r3;
        org.apache.zookeeper.txn.TxnHeader r1;
        org.apache.jute.Record r2;
        org.apache.zookeeper.server.DataTree$ProcessTxnResult $r4;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: org.apache.zookeeper.txn.TxnHeader;

        r2 := @parameter1: org.apache.jute.Record;

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r4 = virtualinvoke $r3.<org.apache.zookeeper.server.DataTree: org.apache.zookeeper.server.DataTree$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader,org.apache.jute.Record)>(r1, r2);

        return $r4;
    }

    public org.apache.zookeeper.data.Stat statNode(java.lang.String, org.apache.zookeeper.server.ServerCnxn) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r3;
        org.apache.zookeeper.server.ServerCnxn r2;
        java.lang.String r1;
        org.apache.zookeeper.data.Stat $r4;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.zookeeper.server.ServerCnxn;

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r4 = virtualinvoke $r3.<org.apache.zookeeper.server.DataTree: org.apache.zookeeper.data.Stat statNode(java.lang.String,org.apache.zookeeper.Watcher)>(r1, r2);

        return $r4;
    }

    public org.apache.zookeeper.server.DataNode getNode(java.lang.String)
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r2;
        java.lang.String r1;
        org.apache.zookeeper.server.DataNode $r3;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.DataTree: org.apache.zookeeper.server.DataNode getNode(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.List convertLong(java.lang.Long)
    {
        java.util.List $r3;
        org.apache.zookeeper.server.ZKDatabase r0;
        java.lang.Long r1;
        org.apache.zookeeper.server.DataTree $r2;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.Long;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.DataTree: java.util.List convertLong(java.lang.Long)>(r1);

        return $r3;
    }

    public byte[] getData(java.lang.String, org.apache.zookeeper.data.Stat, org.apache.zookeeper.Watcher) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        byte[] $r5;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.Watcher r3;
        org.apache.zookeeper.server.DataTree $r4;
        java.lang.String r1;
        org.apache.zookeeper.data.Stat r2;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.zookeeper.data.Stat;

        r3 := @parameter2: org.apache.zookeeper.Watcher;

        $r4 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r5 = virtualinvoke $r4.<org.apache.zookeeper.server.DataTree: byte[] getData(java.lang.String,org.apache.zookeeper.data.Stat,org.apache.zookeeper.Watcher)>(r1, r2, r3);

        return $r5;
    }

    public void setWatches(long, java.util.List, java.util.List, java.util.List, org.apache.zookeeper.Watcher)
    {
        java.util.List r1, r2, r3;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.Watcher r4;
        org.apache.zookeeper.server.DataTree $r5;
        long l0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: org.apache.zookeeper.Watcher;

        $r5 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        virtualinvoke $r5.<org.apache.zookeeper.server.DataTree: void setWatches(long,java.util.List,java.util.List,java.util.List,org.apache.zookeeper.Watcher)>(l0, r1, r2, r3, r4);

        return;
    }

    public java.util.List getACL(java.lang.String, org.apache.zookeeper.data.Stat) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.util.List $r4;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r3;
        java.lang.String r1;
        org.apache.zookeeper.data.Stat r2;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.zookeeper.data.Stat;

        $r3 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r4 = virtualinvoke $r3.<org.apache.zookeeper.server.DataTree: java.util.List getACL(java.lang.String,org.apache.zookeeper.data.Stat)>(r1, r2);

        return $r4;
    }

    public java.util.List getChildren(java.lang.String, org.apache.zookeeper.data.Stat, org.apache.zookeeper.Watcher) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.util.List $r5;
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.Watcher r3;
        org.apache.zookeeper.server.DataTree $r4;
        java.lang.String r1;
        org.apache.zookeeper.data.Stat r2;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.zookeeper.data.Stat;

        r3 := @parameter2: org.apache.zookeeper.Watcher;

        $r4 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r5 = virtualinvoke $r4.<org.apache.zookeeper.server.DataTree: java.util.List getChildren(java.lang.String,org.apache.zookeeper.data.Stat,org.apache.zookeeper.Watcher)>(r1, r2, r3);

        return $r5;
    }

    public boolean isSpecialPath(java.lang.String)
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $z0 = virtualinvoke $r2.<org.apache.zookeeper.server.DataTree: boolean isSpecialPath(java.lang.String)>(r1);

        return $z0;
    }

    public int getAclSize()
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        java.util.Map $r2;
        org.apache.zookeeper.server.DataTree $r1;
        int $i0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree dataTree>;

        $r2 = $r1.<org.apache.zookeeper.server.DataTree: java.util.Map longKeyMap>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean truncateLog(long) throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;
        org.apache.zookeeper.server.ZKDatabase r0;
        long l0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        l0 := @parameter0: long;

        virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: void clear()>();

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        $z0 = virtualinvoke $r1.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: boolean truncateLog(long)>(l0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: long loadDataBase()>();

        return 1;
    }

    public void deserializeSnapshot(org.apache.jute.InputArchive) throws java.io.IOException
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.jute.InputArchive r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r2 := @parameter0: org.apache.jute.InputArchive;

        virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: void clear()>();

        $r1 = virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        $r3 = virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        staticinvoke <org.apache.zookeeper.server.util.SerializeUtils: void deserializeSnapshot(org.apache.zookeeper.server.DataTree,org.apache.jute.InputArchive,java.util.Map)>($r1, r2, $r3);

        r0.<org.apache.zookeeper.server.ZKDatabase: boolean initialized> = 1;

        return;
    }

    public void serializeSnapshot(org.apache.jute.OutputArchive) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.zookeeper.server.ZKDatabase r0;
        org.apache.zookeeper.server.DataTree $r1;
        org.apache.jute.OutputArchive r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r2 := @parameter0: org.apache.jute.OutputArchive;

        $r1 = virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        $r3 = virtualinvoke r0.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        staticinvoke <org.apache.zookeeper.server.util.SerializeUtils: void serializeSnapshot(org.apache.zookeeper.server.DataTree,org.apache.jute.OutputArchive,java.util.Map)>($r1, r2, $r3);

        return;
    }

    public boolean append(org.apache.zookeeper.server.Request) throws java.io.IOException
    {
        org.apache.zookeeper.server.Request r1;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r2;
        org.apache.zookeeper.server.ZKDatabase r0;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        r1 := @parameter0: org.apache.zookeeper.server.Request;

        $r2 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        $z0 = virtualinvoke $r2.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: boolean append(org.apache.zookeeper.server.Request)>(r1);

        return $z0;
    }

    public void rollLog() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        virtualinvoke $r1.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void rollLog()>();

        return;
    }

    public void commit() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        virtualinvoke $r1.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void commit()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.zookeeper.server.persistence.FileTxnSnapLog $r1;
        org.apache.zookeeper.server.ZKDatabase r0;

        r0 := @this: org.apache.zookeeper.server.ZKDatabase;

        $r1 = r0.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.persistence.FileTxnSnapLog snapLog>;

        virtualinvoke $r1.<org.apache.zookeeper.server.persistence.FileTxnSnapLog: void close()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.zookeeper.server.ZKDatabase: int commitLogCount> = 500;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/ZKDatabase;");

        <org.apache.zookeeper.server.ZKDatabase: org.slf4j.Logger LOG> = $r0;

        <org.apache.zookeeper.server.ZKDatabase: int commitLogBuffer> = 700;

        return;
    }
}
