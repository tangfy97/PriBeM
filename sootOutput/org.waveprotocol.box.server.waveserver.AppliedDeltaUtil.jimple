public class org.waveprotocol.box.server.waveserver.AppliedDeltaUtil extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC;
    private static final org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY;

    public static org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta r2;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r5;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;
        com.google.protobuf.ByteString $r4;
        com.google.protobuf.Message $r1;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r7;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        r2 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r1;

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: boolean hasHashedVersionAppliedAt()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAppliedAt()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r5 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta parseFrom(com.google.protobuf.ByteString)>($r4);

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

     label2:
        $r6 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r7);

        return $r6;
    }

    public static org.waveprotocol.wave.model.version.HashedVersion calculateResultingHashedVersion(org.waveprotocol.box.server.waveserver.ByteStringMessage) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r5;
        byte[] $r2;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r1;
        org.waveprotocol.wave.model.version.HashedVersion $r3, $r6;
        com.google.protobuf.Message $r4;
        int $i0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r1 = <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: byte[] getByteArray()>();

        $r3 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r0);

        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r5 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r4;

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: int getOperationsApplied()>();

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion create(byte[],org.waveprotocol.wave.model.version.HashedVersion,int)>($r2, $r3, $i0);

        return $r6;
    }

    public static org.waveprotocol.box.server.waveserver.ByteStringMessage buildAppliedDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta, org.waveprotocol.wave.model.version.HashedVersion, int, long)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r7;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r1;
        long l1;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r8;
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder $r0, $r2, $r3, $r4;
        int i0;
        org.waveprotocol.wave.model.version.HashedVersion r5;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r6;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder setSignedOriginalDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta)>(r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder setOperationsApplied(int)>(i0);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder setApplicationTimestamp(long)>(l1);

        $r6 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r5);

        virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder setHashedVersionAppliedAt(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r6);

        $r7 = virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta build()>();

        $r8 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage serializeMessage(com.google.protobuf.Message)>($r7);

        return $r8;
    }

    public static org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta buildTransformedDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage, org.waveprotocol.wave.model.operation.wave.WaveletDelta) throws com.google.protobuf.InvalidProtocolBufferException
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta r2;
        byte[] $r7;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r10;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r0;
        long $l3;
        org.waveprotocol.wave.model.version.HashedVersionFactory $r6;
        org.waveprotocol.wave.model.version.HashedVersion $r3, $r5, $r8, $r9;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r4;
        com.google.protobuf.Message $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        r4 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        r2 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r1;

        $r3 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersion getHashedVersionAppliedAt(org.waveprotocol.box.server.waveserver.ByteStringMessage)>(r0);

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r5);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: int getOperationsApplied()>();

        $i1 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r6 = <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY>;

        $r7 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.ByteStringMessage: byte[] getByteArray()>();

        $r8 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $i2 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: int getOperationsApplied()>();

        $r9 = interfaceinvoke $r6.<org.waveprotocol.wave.model.version.HashedVersionFactory: org.waveprotocol.wave.model.version.HashedVersion create(byte[],org.waveprotocol.wave.model.version.HashedVersion,int)>($r7, $r8, $i2);

        $l3 = virtualinvoke r2.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: long getApplicationTimestamp()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta cloneOperations(org.waveprotocol.wave.model.version.HashedVersion,long,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r9, $l3, r4);

        return $r10;
    }

    private void <init>()
    {
        org.waveprotocol.box.server.waveserver.AppliedDeltaUtil r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.AppliedDeltaUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec $r1;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r0, $r3;
        org.waveprotocol.wave.model.version.HashedVersionFactoryImpl $r2;

        $r0 = new org.waveprotocol.wave.model.id.IdURIEncoderDecoder;

        $r1 = new org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec;

        specialinvoke $r1.<org.waveprotocol.wave.util.escapers.jvm.JavaUrlCodec: void <init>()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: void <init>(org.waveprotocol.wave.model.id.URIEncoderDecoder$PercentEncoderDecoder)>($r1);

        <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC> = $r0;

        $r2 = new org.waveprotocol.wave.model.version.HashedVersionFactoryImpl;

        $r3 = <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder URI_CODEC>;

        specialinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersionFactoryImpl: void <init>(org.waveprotocol.wave.model.id.IdURIEncoderDecoder)>($r3);

        <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.wave.model.version.HashedVersionFactory HASH_FACTORY> = $r2;

        return;
    }
}
