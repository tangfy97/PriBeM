public class org.springframework.core.io.UrlResource extends org.springframework.core.io.AbstractFileResolvingResource
{
    private final java.net.URL url;
    private final java.net.URL cleanedUrl;
    private final java.net.URI uri;

    public void <init>(java.net.URL)
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URL r1, $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.springframework.core.io.UrlResource;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "URL must not be null");

        r0.<org.springframework.core.io.UrlResource: java.net.URL url> = r1;

        $r2 = r0.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r3 = virtualinvoke r1.<java.net.URL: java.lang.String toString()>();

        $r4 = specialinvoke r0.<org.springframework.core.io.UrlResource: java.net.URL getCleanedUrl(java.net.URL,java.lang.String)>($r2, $r3);

        r0.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl> = $r4;

        r0.<org.springframework.core.io.UrlResource: java.net.URI uri> = null;

        return;
    }

    public void <init>(java.net.URI) throws java.net.MalformedURLException
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URL $r2, $r3, $r5;
        java.net.URI r1;
        java.lang.String $r4;

        r0 := @this: org.springframework.core.io.UrlResource;

        r1 := @parameter0: java.net.URI;

        specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "URI must not be null");

        $r2 = virtualinvoke r1.<java.net.URI: java.net.URL toURL()>();

        r0.<org.springframework.core.io.UrlResource: java.net.URL url> = $r2;

        $r3 = r0.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r4 = virtualinvoke r1.<java.net.URI: java.lang.String toString()>();

        $r5 = specialinvoke r0.<org.springframework.core.io.UrlResource: java.net.URL getCleanedUrl(java.net.URL,java.lang.String)>($r3, $r4);

        r0.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl> = $r5;

        r0.<org.springframework.core.io.UrlResource: java.net.URI uri> = r1;

        return;
    }

    public void <init>(java.lang.String) throws java.net.MalformedURLException
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URL $r2, $r3, $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.core.io.UrlResource;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Path must not be null");

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r1);

        r0.<org.springframework.core.io.UrlResource: java.net.URL url> = $r2;

        $r3 = r0.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r4 = specialinvoke r0.<org.springframework.core.io.UrlResource: java.net.URL getCleanedUrl(java.net.URL,java.lang.String)>($r3, r1);

        r0.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl> = $r4;

        r0.<org.springframework.core.io.UrlResource: java.net.URI uri> = null;

        return;
    }

    private java.net.URL getCleanedUrl(java.net.URL, java.lang.String)
    {
        java.net.MalformedURLException $r3;
        org.springframework.core.io.UrlResource r5;
        java.net.URL $r0, r4;
        java.lang.String r1, $r2;

        r5 := @this: org.springframework.core.io.UrlResource;

        r4 := @parameter0: java.net.URL;

        r1 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String cleanPath(java.lang.String)>(r1);

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>($r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        return r4;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.net.HttpURLConnection $r5;
        org.springframework.core.io.UrlResource r0;
        java.net.URL $r1;
        java.net.URLConnection $r2;
        java.io.IOException $r4;
        java.io.InputStream $r3;
        boolean $z0;

        r0 := @this: org.springframework.core.io.UrlResource;

        $r1 = r0.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r2 = virtualinvoke $r1.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r2.<java.net.URLConnection: void setUseCaches(boolean)>(0);

     label1:
        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $z0 = $r2 instanceof java.net.HttpURLConnection;

        if $z0 == 0 goto label4;

        $r5 = (java.net.HttpURLConnection) $r2;

        virtualinvoke $r5.<java.net.HttpURLConnection: void disconnect()>();

     label4:
        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.net.URL getURL() throws java.io.IOException
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URL $r1;

        r0 := @this: org.springframework.core.io.UrlResource;

        $r1 = r0.<org.springframework.core.io.UrlResource: java.net.URL url>;

        return $r1;
    }

    public java.net.URI getURI() throws java.io.IOException
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URI $r1, $r2, $r3;

        r0 := @this: org.springframework.core.io.UrlResource;

        $r1 = r0.<org.springframework.core.io.UrlResource: java.net.URI uri>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.core.io.UrlResource: java.net.URI uri>;

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: java.net.URI getURI()>();

        return $r2;
    }

    public java.io.File getFile() throws java.io.IOException
    {
        org.springframework.core.io.UrlResource r0;
        java.net.URI $r1, $r3;
        java.io.File $r2, $r4;

        r0 := @this: org.springframework.core.io.UrlResource;

        $r1 = r0.<org.springframework.core.io.UrlResource: java.net.URI uri>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.core.io.UrlResource: java.net.URI uri>;

        $r4 = specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: java.io.File getFile(java.net.URI)>($r3);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<org.springframework.core.io.AbstractFileResolvingResource: java.io.File getFile()>();

        return $r2;
    }

    public org.springframework.core.io.Resource createRelative(java.lang.String) throws java.net.MalformedURLException
    {
        org.springframework.core.io.UrlResource $r0, r2;
        java.net.URL $r1, $r3;
        java.lang.String r4;
        boolean $z0;

        r2 := @this: org.springframework.core.io.UrlResource;

        r4 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $r0 = new org.springframework.core.io.UrlResource;

        $r1 = new java.net.URL;

        $r3 = r2.<org.springframework.core.io.UrlResource: java.net.URL url>;

        specialinvoke $r1.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, r4);

        specialinvoke $r0.<org.springframework.core.io.UrlResource: void <init>(java.net.URL)>($r1);

        return $r0;
    }

    public java.lang.String getFilename()
    {
        org.springframework.core.io.UrlResource r1;
        java.net.URL $r2;
        java.lang.String $r3, $r4;
        java.io.File $r0;

        r1 := @this: org.springframework.core.io.UrlResource;

        $r0 = new java.io.File;

        $r2 = r1.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String getFile()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        return $r4;
    }

    public java.lang.String getDescription()
    {
        org.springframework.core.io.UrlResource r1;
        java.net.URL $r2;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r5;

        r1 := @this: org.springframework.core.io.UrlResource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL [");

        $r2 = r1.<org.springframework.core.io.UrlResource: java.net.URL url>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.core.io.UrlResource r1, $r2;
        java.net.URL $r3, $r4;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: org.springframework.core.io.UrlResource;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label2;

        $z0 = r0 instanceof org.springframework.core.io.UrlResource;

        if $z0 == 0 goto label1;

        $r4 = r1.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl>;

        $r2 = (org.springframework.core.io.UrlResource) r0;

        $r3 = $r2.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl>;

        $z1 = virtualinvoke $r4.<java.net.URL: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        int $i0;
        org.springframework.core.io.UrlResource r0;
        java.net.URL $r1;

        r0 := @this: org.springframework.core.io.UrlResource;

        $r1 = r0.<org.springframework.core.io.UrlResource: java.net.URL cleanedUrl>;

        $i0 = virtualinvoke $r1.<java.net.URL: int hashCode()>();

        return $i0;
    }
}
