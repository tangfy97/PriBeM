class groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2 extends groovy.lang.Closure implements org.codehaus.groovy.runtime.GeneratedClosure
{
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$groovy$xml$streamingmarkupsupport$AbstractStreamingBuilder;

    public void <init>(java.lang.Object, java.lang.Object)
    {
        groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2 r2;
        java.lang.Class $r0, $r1, $r5, $r6;
        java.lang.Object r3, r4;

        r2 := @this: groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0> = $r5;

        goto label2;

     label1:
        $r5 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r6 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass> = $r6;

        goto label4;

     label3:
        $r6 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        specialinvoke r2.<groovy.lang.Closure: void <init>(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public transient java.lang.Object doCall(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] $r12, r19;
        groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2_closure5 $r13;
        groovy.lang.Reference $r1, $r3, $r5, $r7;
        groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2 r14;
        java.lang.Object r0, r2, r4, r6, $r11, $r15, $r16, r17, r18;
        java.lang.Class $r8, $r9, $r10, $r20, $r21, $r22;

        r14 := @this: groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2;

        r17 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r18 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r19 := @parameter6: java.lang.Object[];

        $r1 = new groovy.lang.Reference;

        specialinvoke $r1.<groovy.lang.Reference: void <init>(java.lang.Object)>(r0);

        $r3 = new groovy.lang.Reference;

        specialinvoke $r3.<groovy.lang.Reference: void <init>(java.lang.Object)>(r2);

        $r5 = new groovy.lang.Reference;

        specialinvoke $r5.<groovy.lang.Reference: void <init>(java.lang.Object)>(r4);

        $r7 = new groovy.lang.Reference;

        specialinvoke $r7.<groovy.lang.Reference: void <init>(java.lang.Object)>(r6);

        $r8 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

        if $r8 != null goto label1;

        $r20 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0> = $r20;

        goto label2;

     label1:
        $r20 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

     label2:
        $r9 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

        if $r9 != null goto label3;

        $r21 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass> = $r21;

        goto label4;

     label3:
        $r21 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r10 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$xml$streamingmarkupsupport$AbstractStreamingBuilder>;

        if $r10 != null goto label5;

        $r22 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$xml$streamingmarkupsupport$AbstractStreamingBuilder> = $r22;

        goto label6;

     label5:
        $r22 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$xml$streamingmarkupsupport$AbstractStreamingBuilder>;

     label6:
        $r11 = virtualinvoke $r7.<groovy.lang.Reference: java.lang.Object get()>();

        $r12 = newarray (java.lang.Object)[1];

        $r13 = new groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2_closure5;

        $r15 = virtualinvoke r14.<groovy.lang.Closure: java.lang.Object getThisObject()>();

        specialinvoke $r13.<groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2_closure5: void <init>(java.lang.Object,java.lang.Object,groovy.lang.Reference,groovy.lang.Reference,groovy.lang.Reference)>(r14, $r15, $r1, $r5, $r3);

        $r12[0] = $r13;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>($r22, $r11, "each", $r12);

        return $r16;
    }

    public transient java.lang.Object call(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] $r12, r19;
        groovy.lang.Reference $r1, $r3, $r5, $r7;
        groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2 r11;
        java.lang.Object r0, r2, r4, r6, r13, $r14, $r15, $r16, r17, $r18, $r20;
        java.lang.Class $r8, r9, $r10, $r21, $r22;

        r11 := @this: groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2;

        r13 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r17 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r19 := @parameter6: java.lang.Object[];

        $r1 = new groovy.lang.Reference;

        specialinvoke $r1.<groovy.lang.Reference: void <init>(java.lang.Object)>(r0);

        $r3 = new groovy.lang.Reference;

        specialinvoke $r3.<groovy.lang.Reference: void <init>(java.lang.Object)>(r2);

        $r5 = new groovy.lang.Reference;

        specialinvoke $r5.<groovy.lang.Reference: void <init>(java.lang.Object)>(r4);

        $r7 = new groovy.lang.Reference;

        specialinvoke $r7.<groovy.lang.Reference: void <init>(java.lang.Object)>(r6);

        $r8 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

        if $r8 != null goto label1;

        $r21 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0> = $r21;

        goto label2;

     label1:
        $r21 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$0>;

     label2:
        r9 = $r21;

        $r10 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

        if $r10 != null goto label3;

        $r22 = staticinvoke <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass> = $r22;

        goto label4;

     label3:
        $r22 = <groovy.xml.streamingmarkupsupport.AbstractStreamingBuilder$_closure2: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r12 = newarray (java.lang.Object)[7];

        $r12[0] = r13;

        $r14 = virtualinvoke $r1.<groovy.lang.Reference: java.lang.Object get()>();

        $r12[1] = $r14;

        $r15 = virtualinvoke $r3.<groovy.lang.Reference: java.lang.Object get()>();

        $r12[2] = $r15;

        $r16 = virtualinvoke $r5.<groovy.lang.Reference: java.lang.Object get()>();

        $r12[3] = $r16;

        $r12[4] = r17;

        $r18 = virtualinvoke $r7.<groovy.lang.Reference: java.lang.Object get()>();

        $r12[5] = $r18;

        $r12[6] = r19;

        $r20 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r9, r11, "doCall", $r12);

        return $r20;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
