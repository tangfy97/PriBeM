public class org.apache.commons.collections.LRUMap extends org.apache.commons.collections.SequencedHashMap implements java.io.Externalizable
{
    private int maximumSize;
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.collections.LRUMap r0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        specialinvoke r0.<org.apache.commons.collections.LRUMap: void <init>(int)>(100);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.commons.collections.LRUMap r0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.collections.SequencedHashMap: void <init>(int)>(i0);

        r0.<org.apache.commons.collections.LRUMap: int maximumSize> = 0;

        r0.<org.apache.commons.collections.LRUMap: int maximumSize> = i0;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.LRUMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.commons.collections.SequencedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        int $i0, $i1;
        org.apache.commons.collections.LRUMap r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: int size()>();

        $i1 = r0.<org.apache.commons.collections.LRUMap: int maximumSize>;

        if $i0 < $i1 goto label1;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.collections.LRUMap: void removeLRU()>();

     label1:
        $r3 = specialinvoke r0.<org.apache.commons.collections.SequencedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    protected void removeLRU()
    {
        org.apache.commons.collections.LRUMap r0;
        java.lang.Object $r1, $r2;

        r0 := @this: org.apache.commons.collections.LRUMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: java.lang.Object getFirstKey()>();

        $r2 = specialinvoke r0.<org.apache.commons.collections.SequencedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        virtualinvoke r0.<org.apache.commons.collections.LRUMap: java.lang.Object remove(java.lang.Object)>($r1);

        virtualinvoke r0.<org.apache.commons.collections.LRUMap: void processRemovedLRU(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    protected void processRemovedLRU(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.LRUMap r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.commons.collections.LRUMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        int $i0, $i1, i2;
        org.apache.commons.collections.LRUMap r0;
        java.io.ObjectInput r1;
        java.lang.Object $r2, $r3;

        r0 := @this: org.apache.commons.collections.LRUMap;

        r1 := @parameter0: java.io.ObjectInput;

        $i0 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        r0.<org.apache.commons.collections.LRUMap: int maximumSize> = $i0;

        $i1 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r2 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r3 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        virtualinvoke r0.<org.apache.commons.collections.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        java.util.Iterator $r3;
        java.io.ObjectOutput r0;
        java.util.Set $r2;
        int $i0, $i1;
        org.apache.commons.collections.LRUMap r1;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.LRUMap;

        r0 := @parameter0: java.io.ObjectOutput;

        $i0 = r1.<org.apache.commons.collections.LRUMap: int maximumSize>;

        interfaceinvoke r0.<java.io.ObjectOutput: void writeInt(int)>($i0);

        $i1 = virtualinvoke r1.<org.apache.commons.collections.LRUMap: int size()>();

        interfaceinvoke r0.<java.io.ObjectOutput: void writeInt(int)>($i1);

        $r2 = virtualinvoke r1.<org.apache.commons.collections.LRUMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r0.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r4);

        $r5 = specialinvoke r1.<org.apache.commons.collections.SequencedHashMap: java.lang.Object get(java.lang.Object)>($r4);

        interfaceinvoke r0.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public int getMaximumSize()
    {
        int $i0;
        org.apache.commons.collections.LRUMap r0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        $i0 = r0.<org.apache.commons.collections.LRUMap: int maximumSize>;

        return $i0;
    }

    public void setMaximumSize(int)
    {
        int i0, $i1;
        org.apache.commons.collections.LRUMap r0;

        r0 := @this: org.apache.commons.collections.LRUMap;

        i0 := @parameter0: int;

        r0.<org.apache.commons.collections.LRUMap: int maximumSize> = i0;

     label1:
        $i1 = virtualinvoke r0.<org.apache.commons.collections.LRUMap: int size()>();

        if $i1 <= i0 goto label2;

        virtualinvoke r0.<org.apache.commons.collections.LRUMap: void removeLRU()>();

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.LRUMap: long serialVersionUID> = 2197433140769957051L;

        return;
    }
}
