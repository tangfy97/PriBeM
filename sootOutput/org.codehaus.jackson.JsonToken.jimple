public final enum class org.codehaus.jackson.JsonToken extends java.lang.Enum
{
    public static final enum org.codehaus.jackson.JsonToken NOT_AVAILABLE;
    public static final enum org.codehaus.jackson.JsonToken START_OBJECT;
    public static final enum org.codehaus.jackson.JsonToken END_OBJECT;
    public static final enum org.codehaus.jackson.JsonToken START_ARRAY;
    public static final enum org.codehaus.jackson.JsonToken END_ARRAY;
    public static final enum org.codehaus.jackson.JsonToken FIELD_NAME;
    public static final enum org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT;
    public static final enum org.codehaus.jackson.JsonToken VALUE_STRING;
    public static final enum org.codehaus.jackson.JsonToken VALUE_NUMBER_INT;
    public static final enum org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT;
    public static final enum org.codehaus.jackson.JsonToken VALUE_TRUE;
    public static final enum org.codehaus.jackson.JsonToken VALUE_FALSE;
    public static final enum org.codehaus.jackson.JsonToken VALUE_NULL;
    final java.lang.String _serialized;
    final char[] _serializedChars;
    final byte[] _serializedBytes;
    private static final org.codehaus.jackson.JsonToken[] $VALUES;

    public static org.codehaus.jackson.JsonToken[] values()
    {
        java.lang.Object $r1;
        org.codehaus.jackson.JsonToken[] $r0, $r2;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.codehaus.jackson.JsonToken[]) $r1;

        return $r2;
    }

    public static org.codehaus.jackson.JsonToken valueOf(java.lang.String)
    {
        java.lang.String r0;
        org.codehaus.jackson.JsonToken $r2;
        java.lang.Enum $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/jackson/JsonToken;", r0);

        $r2 = (org.codehaus.jackson.JsonToken) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        byte[] $r5, $r7;
        org.codehaus.jackson.JsonToken r0;
        char $c2;
        byte $b3;
        int i0, i1, i4;
        char[] $r3, $r4, $r6;
        java.lang.String r1, r2;

        r0 := @this: org.codehaus.jackson.JsonToken;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        if r2 != null goto label1;

        r0.<org.codehaus.jackson.JsonToken: java.lang.String _serialized> = null;

        r0.<org.codehaus.jackson.JsonToken: char[] _serializedChars> = null;

        r0.<org.codehaus.jackson.JsonToken: byte[] _serializedBytes> = null;

        goto label3;

     label1:
        r0.<org.codehaus.jackson.JsonToken: java.lang.String _serialized> = r2;

        $r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r0.<org.codehaus.jackson.JsonToken: char[] _serializedChars> = $r3;

        $r4 = r0.<org.codehaus.jackson.JsonToken: char[] _serializedChars>;

        i1 = lengthof $r4;

        $r5 = newarray (byte)[i1];

        r0.<org.codehaus.jackson.JsonToken: byte[] _serializedBytes> = $r5;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r7 = r0.<org.codehaus.jackson.JsonToken: byte[] _serializedBytes>;

        $r6 = r0.<org.codehaus.jackson.JsonToken: char[] _serializedChars>;

        $c2 = $r6[i4];

        $b3 = (byte) $c2;

        $r7[i4] = $b3;

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public java.lang.String asString()
    {
        org.codehaus.jackson.JsonToken r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.JsonToken;

        $r1 = r0.<org.codehaus.jackson.JsonToken: java.lang.String _serialized>;

        return $r1;
    }

    public char[] asCharArray()
    {
        char[] $r1;
        org.codehaus.jackson.JsonToken r0;

        r0 := @this: org.codehaus.jackson.JsonToken;

        $r1 = r0.<org.codehaus.jackson.JsonToken: char[] _serializedChars>;

        return $r1;
    }

    public byte[] asByteArray()
    {
        byte[] $r1;
        org.codehaus.jackson.JsonToken r0;

        r0 := @this: org.codehaus.jackson.JsonToken;

        $r1 = r0.<org.codehaus.jackson.JsonToken: byte[] _serializedBytes>;

        return $r1;
    }

    public boolean isNumeric()
    {
        org.codehaus.jackson.JsonToken r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonToken;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if r0 == $r1 goto label1;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if r0 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isScalarValue()
    {
        org.codehaus.jackson.JsonToken r0, $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonToken;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: int ordinal()>();

        if $i0 < $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.JsonToken $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        org.codehaus.jackson.JsonToken[] $r13;

        $r0 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r0.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("NOT_AVAILABLE", 0, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken NOT_AVAILABLE> = $r0;

        $r1 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r1.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("START_OBJECT", 1, "{");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT> = $r1;

        $r2 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r2.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("END_OBJECT", 2, "}");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT> = $r2;

        $r3 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r3.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("START_ARRAY", 3, "[");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY> = $r3;

        $r4 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r4.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("END_ARRAY", 4, "]");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY> = $r4;

        $r5 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r5.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("FIELD_NAME", 5, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME> = $r5;

        $r6 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r6.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_EMBEDDED_OBJECT", 6, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT> = $r6;

        $r7 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r7.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_STRING", 7, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING> = $r7;

        $r8 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r8.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_NUMBER_INT", 8, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT> = $r8;

        $r9 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r9.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_NUMBER_FLOAT", 9, null);

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT> = $r9;

        $r10 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r10.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_TRUE", 10, "true");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE> = $r10;

        $r11 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r11.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_FALSE", 11, "false");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE> = $r11;

        $r12 = new org.codehaus.jackson.JsonToken;

        specialinvoke $r12.<org.codehaus.jackson.JsonToken: void <init>(java.lang.String,int,java.lang.String)>("VALUE_NULL", 12, "null");

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL> = $r12;

        $r13 = newarray (org.codehaus.jackson.JsonToken)[13];

        $r14 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken NOT_AVAILABLE>;

        $r13[0] = $r14;

        $r15 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        $r13[1] = $r15;

        $r16 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        $r13[2] = $r16;

        $r17 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        $r13[3] = $r17;

        $r18 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        $r13[4] = $r18;

        $r19 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        $r13[5] = $r19;

        $r20 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        $r13[6] = $r20;

        $r21 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        $r13[7] = $r21;

        $r22 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        $r13[8] = $r22;

        $r23 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        $r13[9] = $r23;

        $r24 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        $r13[10] = $r24;

        $r25 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        $r13[11] = $r25;

        $r26 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        $r13[12] = $r26;

        <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken[] $VALUES> = $r13;

        return;
    }
}
