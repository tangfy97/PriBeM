public final class kodkod.engine.ucore.AdaptiveRCEStrategy extends java.lang.Object implements kodkod.engine.satlab.ReductionStrategy
{
    private final kodkod.util.ints.IntCollection varsToTry;
    private final double noRecycleRatio;
    private final double recycleLimit;
    private final double hardnessCutOff;
    private static final boolean DBG;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <kodkod.engine.ucore.AdaptiveRCEStrategy: boolean DBG> = 1;

        $r0 = class "Lkodkod/engine/ucore/AdaptiveRCEStrategy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.ucore.AdaptiveRCEStrategy: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.fol2sat.TranslationLog r1;
        kodkod.engine.ucore.AdaptiveRCEStrategy r0;

        r0 := @this: kodkod.engine.ucore.AdaptiveRCEStrategy;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        specialinvoke r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: void <init>(kodkod.engine.fol2sat.TranslationLog,double,double,double)>(r1, 0.03, 2.0, 1.2);

        return;
    }

    public void <init>(kodkod.engine.fol2sat.TranslationLog, double, double, double)
    {
        kodkod.engine.fol2sat.TranslationLog r1;
        byte $b0, $b1, $b2, $b3;
        kodkod.engine.ucore.AdaptiveRCEStrategy r0;
        int $i4, $i5, $i6, $i7;
        java.lang.String $r6, $r10, $r14;
        double d0, d1, d2;
        kodkod.util.ints.IntSet $r2;
        java.lang.IllegalArgumentException $r16, $r18, $r20;
        java.lang.StringBuilder $r5, $r9, $r13, $r15, $r17, $r19;

        r0 := @this: kodkod.engine.ucore.AdaptiveRCEStrategy;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet rootVars(kodkod.engine.fol2sat.TranslationLog)>(r1);

        r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: kodkod.util.ints.IntCollection varsToTry> = $r2;

        $b0 = d0 cmpg 0.0;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

     label1:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("noRecycleRatio must be in [0..1]: ");

        $r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r16;

     label2:
        $b2 = d1 cmpg 1.0;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label3;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("hardnessCutOff must be >=1: ");

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r18;

     label3:
        $b3 = d2 cmpg 1.0;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label4;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("recycleLimit must be >=1: ");

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r20;

     label4:
        r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: double noRecycleRatio> = d0;

        r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: double hardnessCutOff> = d1;

        r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: double recycleLimit> = d2;

        return;
    }

    public kodkod.util.ints.IntSet next(kodkod.engine.satlab.ResolutionTrace)
    {
        java.lang.AssertionError $r13;
        kodkod.util.ints.IntIterator $r5;
        kodkod.util.ints.IntCollection $r1, $r4, $r14;
        kodkod.engine.ucore.AdaptiveRCEStrategy r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.engine.satlab.ResolutionTrace r2;
        java.io.PrintStream $r8;
        kodkod.util.ints.IntSet $r3, $r6, $r15, $r16;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;

        r0 := @this: kodkod.engine.ucore.AdaptiveRCEStrategy;

        r2 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r1 = r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r16 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r16;

     label1:
        $r3 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet coreTailUnits(kodkod.engine.satlab.ResolutionTrace)>(r2);

        $r4 = r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        $r5 = interfaceinvoke $r4.<kodkod.util.ints.IntCollection: kodkod.util.ints.IntIterator iterator()>();

        goto label6;

     label2:
        $i0 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: int next()>();

        interfaceinvoke $r5.<kodkod.util.ints.IntIterator: void remove()>();

        $z2 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean remove(int)>($i0);

        if $z2 == 0 goto label6;

        $z3 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z3 == 0 goto label3;

        goto label7;

     label3:
        $r6 = specialinvoke r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace,kodkod.util.ints.IntSet)>(r2, $r3);

        $z4 = <kodkod.engine.ucore.AdaptiveRCEStrategy: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $z5 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z5 != 0 goto label4;

        $i2 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: int size()>();

        $i3 = $i2 - 1;

        $z6 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z6 == 0 goto label5;

     label4:
        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label5:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("relevant clauses: ");

        $i1 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: int size()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", removed ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return $r6;

     label6:
        $z1 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label7:
        $r14 = r0.<kodkod.engine.ucore.AdaptiveRCEStrategy: kodkod.util.ints.IntCollection varsToTry>;

        interfaceinvoke $r14.<kodkod.util.ints.IntCollection: void clear()>();

        $r15 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r15;
    }

    private kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace, kodkod.util.ints.IntSet)
    {
        byte $b9, $b10;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r19, $r20, $r21, $r27, $r34, $r35, $r36, $r37, $r38, $r43, $r44, $r45, $r46;
        java.lang.String $r16, $r22, $r28, $r39;
        kodkod.util.ints.IntSet $r1, $r2, $r3, $r8, $r11, $r14, r23, $r24, r30, $r31, $r40, r41, $r42;
        kodkod.engine.ucore.AdaptiveRCEStrategy r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11;
        kodkod.engine.satlab.ResolutionTrace r0;
        java.io.PrintStream $r5, $r18, $r26, $r33;

        r29 := @this: kodkod.engine.ucore.AdaptiveRCEStrategy;

        r0 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        r23 := @parameter1: kodkod.util.ints.IntSet;

        $i0 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: int size()>();

        $d0 = (double) $i0;

        $r1 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet axioms()>();

        $i1 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int size()>();

        $d1 = (double) $i1;

        d2 = $d0 / $d1;

        $r2 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $i2 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int size()>();

        $d3 = (double) $i2;

        $r3 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet axioms()>();

        $i3 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: int size()>();

        $d4 = (double) $i3;

        d5 = $d3 / $d4;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>(java.lang.String)>("\ntrace size: ");

        $i4 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: int size()>();

        $r6 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", axioms: ");

        $r8 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet axioms()>();

        $i5 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int size()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", core: ");

        $r11 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $i6 = interfaceinvoke $r11.<kodkod.util.ints.IntSet: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resolvents: ");

        $r14 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet resolvents()>();

        $i7 = interfaceinvoke $r14.<kodkod.util.ints.IntSet: int size()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("hardness: ");

        $r19 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", coreRatio: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r24 = staticinvoke <kodkod.engine.ucore.StrategyUtils: kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace,kodkod.util.ints.IntSet)>(r0, r23);

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("relevant axioms:  ");

        $i8 = interfaceinvoke $r24.<kodkod.util.ints.IntSet: int size()>();

        $r27 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $d6 = r29.<kodkod.engine.ucore.AdaptiveRCEStrategy: double noRecycleRatio>;

        $b9 = d5 cmpg $d6;

        $i19 = (int) $b9;

        if $i19 >= 0 goto label1;

        return $r24;

     label1:
        $d7 = r29.<kodkod.engine.ucore.AdaptiveRCEStrategy: double hardnessCutOff>;

        $b10 = d2 cmpg $d7;

        $i20 = (int) $b10;

        if $i20 >= 0 goto label2;

        $r40 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet learnable(kodkod.util.ints.IntSet)>($r24);

        return $r40;

     label2:
        r41 = $r24;

        $i11 = interfaceinvoke $r24.<kodkod.util.ints.IntSet: int size()>();

        $d9 = (double) $i11;

        $d8 = r29.<kodkod.engine.ucore.AdaptiveRCEStrategy: double recycleLimit>;

        $d10 = $d9 * $d8;

        $d11 = staticinvoke <java.lang.Math: double rint(double)>($d10);

        i12 = (int) $d11;

     label3:
        r30 = r41;

        $r31 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet directlyLearnable(kodkod.util.ints.IntSet)>(r41);

        r41 = $r31;

        $i13 = interfaceinvoke r30.<kodkod.util.ints.IntSet: int size()>();

        $i14 = interfaceinvoke $r31.<kodkod.util.ints.IntSet: int size()>();

        if $i13 >= $i14 goto label4;

        $i18 = interfaceinvoke $r31.<kodkod.util.ints.IntSet: int size()>();

        if $i18 < i12 goto label3;

     label4:
        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("last: ");

        $i15 = interfaceinvoke r30.<kodkod.util.ints.IntSet: int size()>();

        $r34 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", current: ");

        $i16 = interfaceinvoke $r31.<kodkod.util.ints.IntSet: int size()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxRelevant: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $i17 = interfaceinvoke $r31.<kodkod.util.ints.IntSet: int size()>();

        if $i17 >= i12 goto label5;

        $r42 = $r31;

        goto label6;

     label5:
        $r42 = r30;

     label6:
        return $r42;
    }
}
