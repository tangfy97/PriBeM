public final class org.waveprotocol.wave.model.conversation.DocumentBasedManifest extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableManifest
{
    static final org.waveprotocol.wave.model.adt.docbased.Factory FACTORY;
    public static final java.lang.String MANIFEST_TOP_TAG;
    private final org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor;
    private final org.waveprotocol.wave.model.conversation.ObservableManifestThread rootThread;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    public static boolean documentHasManifest(org.waveprotocol.wave.model.document.Document)
    {
        org.waveprotocol.wave.model.document.Document r0;
        java.lang.Object $r1, $r2;
        java.lang.String $r4;
        org.waveprotocol.wave.model.document.Doc$E r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.Document;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.Document: java.lang.Object getDocumentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r1);

        r3 = (org.waveprotocol.wave.model.document.Doc$E) $r2;

        if r3 == null goto label1;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.Document: java.lang.String getTagName(java.lang.Object)>(r3);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("conversation");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void delete(org.waveprotocol.wave.model.document.Document)
    {
        org.waveprotocol.wave.model.document.Document r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.Doc$E r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.Document;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object expectAndGetFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String)>(r0, "conversation");

        r2 = (org.waveprotocol.wave.model.document.Doc$E) $r1;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.Document: void deleteNode(java.lang.Object)>(r2);

        return;
    }

    static void initialiseDocumentManifest(org.waveprotocol.wave.model.document.Document)
    {
        org.waveprotocol.wave.model.document.Document r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.Document;

        staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object createFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String)>(r0, "conversation");

        return;
    }

    static org.waveprotocol.wave.model.conversation.DocumentBasedManifest createOnExisting(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest $r7;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue $r10;
        java.lang.Object[] $r4;
        org.waveprotocol.wave.model.util.Serializer $r9;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread $r8;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1, $r5;
        java.lang.Object r2;
        java.lang.String $r3, $r6;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("conversation");

        $r4 = newarray (java.lang.Object)[1];

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r2);

        $r4[0] = $r6;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid manifest top tag %s", $r4);

        $r7 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        $r8 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r0, r2);

        $r9 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.Class)>(r0, r2, $r9, class "Lorg/waveprotocol/wave/model/conversation/DocumentBasedManifest$AnchorKey;");

        specialinvoke $r7.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestThread,org.waveprotocol.wave.model.adt.ObservableStructuredValue)>($r8, $r10);

        return $r7;
    }

    public static org.waveprotocol.wave.model.conversation.DocumentBasedManifest createNew(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest $r3;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread $r4;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue $r6;
        org.waveprotocol.wave.model.util.Serializer $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object createFirstTopLevelElement(org.waveprotocol.wave.model.document.MutableDocument,java.lang.String)>(r0, "conversation");

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        $r3 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        $r4 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>($r2, $r1);

        $r5 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedStructuredValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.Class)>($r2, $r1, $r5, class "Lorg/waveprotocol/wave/model/conversation/DocumentBasedManifest$AnchorKey;");

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestThread,org.waveprotocol.wave.model.adt.ObservableStructuredValue)>($r4, $r6);

        return $r3;
    }

    void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestThread, org.waveprotocol.wave.model.adt.ObservableStructuredValue)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest$2 $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r3;
        org.waveprotocol.wave.model.adt.ObservableStructuredValue r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r3 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        r4 := @parameter1: org.waveprotocol.wave.model.adt.ObservableStructuredValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        $r2 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifest$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest$2: void <init>(org.waveprotocol.wave.model.conversation.DocumentBasedManifest)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.conversation.ObservableManifestThread rootThread> = r3;

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor> = r4;

        $r5 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: void addListener(java.lang.Object)>($r2);

        return;
    }

    public org.waveprotocol.wave.model.conversation.AnchorData getAnchor()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey $r2, $r5;
        java.lang.Object $r4, $r8;
        java.lang.String $r7, $r9;
        org.waveprotocol.wave.model.conversation.AnchorData $r0;
        org.waveprotocol.wave.model.adt.ObservableStructuredValue $r3, $r6;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        $r0 = new org.waveprotocol.wave.model.conversation.AnchorData;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r2 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r2);

        $r7 = (java.lang.String) $r4;

        $r6 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r5 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r5);

        $r9 = (java.lang.String) $r8;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.AnchorData: void <init>(java.lang.String,java.lang.String)>($r7, $r9);

        return $r0;
    }

    public void setAnchor(org.waveprotocol.wave.model.conversation.AnchorData)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey $r3, $r5;
        java.util.Map $r7;
        java.lang.String $r4, $r6;
        org.waveprotocol.wave.model.conversation.AnchorData r1;
        org.waveprotocol.wave.model.adt.ObservableStructuredValue $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorData;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r3 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getConversationId()>();

        $r5 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.AnchorData: java.lang.String getBlipId()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map immutableMap(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r5, $r6);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: void set(java.util.Map)>($r7);

        return;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestThread getRootThread()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.conversation.ObservableManifestThread rootThread>;

        return $r1;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableManifest$Listener)
    {
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifest$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifest$Listener)
    {
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifest$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void triggerOnAnchorChanged(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r29;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r19;
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener r22;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey $r1, $r3, $r7, $r8, $r11, $r14, $r23, $r27;
        java.lang.String r6, $r25, $r26, $r30, $r31;
        org.waveprotocol.wave.model.adt.ObservableStructuredValue $r4, $r9, $r12, $r15;
        org.waveprotocol.wave.model.conversation.AnchorData $r17, $r18;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r2;
        java.util.Iterator $r20;
        java.lang.Object $r5, $r10, $r13, $r16, $r21, $r24, $r28;

        r2 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r0 := @parameter0: java.util.Map;

        r29 := @parameter1: java.util.Map;

        $r1 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r27 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $r28 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        $r30 = (java.lang.String) $r28;

        goto label2;

     label1:
        $r4 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r3 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r3);

        $r30 = (java.lang.String) $r5;

     label2:
        r6 = $r30;

        $r7 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $z1 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        $r23 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $r24 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        $r31 = (java.lang.String) $r24;

        goto label4;

     label3:
        $r9 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r8 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r8);

        $r31 = (java.lang.String) $r10;

     label4:
        $r12 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r11 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey WAVELET>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r11);

        $r25 = (java.lang.String) $r13;

        $r15 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.ObservableStructuredValue anchor>;

        $r14 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey: org.waveprotocol.wave.model.conversation.DocumentBasedManifest$AnchorKey BLIP>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.model.adt.ObservableStructuredValue: java.lang.Object get(java.lang.Enum)>($r14);

        $r26 = (java.lang.String) $r16;

        $r17 = new org.waveprotocol.wave.model.conversation.AnchorData;

        specialinvoke $r17.<org.waveprotocol.wave.model.conversation.AnchorData: void <init>(java.lang.String,java.lang.String)>(r6, $r31);

        $r18 = new org.waveprotocol.wave.model.conversation.AnchorData;

        specialinvoke $r18.<org.waveprotocol.wave.model.conversation.AnchorData: void <init>(java.lang.String,java.lang.String)>($r25, $r26);

        $z2 = virtualinvoke $r17.<org.waveprotocol.wave.model.conversation.AnchorData: boolean equals(java.lang.Object)>($r18);

        if $z2 != 0 goto label6;

        $r19 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.waveprotocol.wave.model.conversation.ObservableManifest$Listener) $r21;

        interfaceinvoke r22.<org.waveprotocol.wave.model.conversation.ObservableManifest$Listener: void onAnchorChanged(org.waveprotocol.wave.model.conversation.AnchorData,org.waveprotocol.wave.model.conversation.AnchorData)>($r17, $r18);

        goto label5;

     label6:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestThread getRootThread()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.conversation.ObservableManifestThread getRootThread()>();

        return $r1;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener $r2;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifest$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifest$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.ObservableManifest$Listener $r2;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifest$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void addListener(org.waveprotocol.wave.model.conversation.ObservableManifest$Listener)>($r2);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.conversation.DocumentBasedManifest, java.util.Map, java.util.Map)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest r0;
        java.util.Map r1, r2;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifest;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Map;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest: void triggerOnAnchorChanged(java.util.Map,java.util.Map)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifest$1 $r0;

        <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: java.lang.String MANIFEST_TOP_TAG> = "conversation";

        $r0 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifest$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifest$1: void <init>()>();

        <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.docbased.Factory FACTORY> = $r0;

        return;
    }
}
