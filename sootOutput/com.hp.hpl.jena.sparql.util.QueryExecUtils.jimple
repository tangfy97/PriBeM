public class com.hp.hpl.jena.sparql.util.QueryExecUtils extends java.lang.Object
{
    protected static com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.QueryExecUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.QueryExecUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void executeQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r2;
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.QueryExecution r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r1 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void executeQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, $r2);

        return;
    }

    public static void executeQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat r2;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.query.QueryExecution r1;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r1 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        r2 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void doSelectQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, r2);

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        if $z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void doDescribeQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, r2);

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isConstructType()>();

        if $z2 == 0 goto label3;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void doConstructQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, r2);

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isAskType()>();

        if $z3 == 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void doAskQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, r2);

     label4:
        interfaceinvoke r1.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        return;
    }

    public static void execute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r0, r1, $r2);

        return;
    }

    public static void execute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject $r6;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.query.ResultSet $r4;
        java.util.List $r7, r8;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r5 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.core.DatasetGraph)>(r0, r1);

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        if $z0 == 0 goto label1;

        $r6 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r0;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r7);

        goto label2;

     label1:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r3);

     label2:
        $r4 = staticinvoke <com.hp.hpl.jena.query.ResultSetFactory: com.hp.hpl.jena.query.ResultSet create(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List)>($r2, r8);

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void outputResultSet(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r4, null, r5);

        return;
    }

    public static void outputResultSet(com.hp.hpl.jena.query.ResultSet, com.hp.hpl.jena.sparql.core.Prologue, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.core.Prologue $r34, r37;
        com.hp.hpl.jena.sparql.resultset.PlainFormat $r19;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r26, $r27, $r33, r38, $r39, $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z14, $z15;
        com.hp.hpl.jena.sparql.resultset.ResultSetApply $r21;
        com.hp.hpl.jena.query.ResultSet r36;
        java.lang.StringBuilder $r11, $r13, $r14, $r28, $r30, $r31;
        com.hp.hpl.jena.shared.PrefixMapping $r35, $r41;
        int $i0;
        com.hp.hpl.jena.rdf.model.RDFWriter $r42;
        java.lang.String $r15, $r32, $r43;
        java.io.PrintStream $r10, $r12, $r16, $r17, $r18, $r20, $r22, $r23, $r24, $r25, $r29, $r44;
        com.hp.hpl.jena.rdf.model.Model $r40;

        r36 := @parameter0: com.hp.hpl.jena.query.ResultSet;

        r37 := @parameter1: com.hp.hpl.jena.sparql.core.Prologue;

        r38 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        z13 = 0;

        if r37 != null goto label01;

        $r34 = new com.hp.hpl.jena.sparql.core.Prologue;

        $r35 = <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap>;

        specialinvoke $r34.<com.hp.hpl.jena.sparql.core.Prologue: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>($r35);

        r37 = $r34;

     label01:
        $r0 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        $z0 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label02;

        r38 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

     label02:
        $r1 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_NONE>;

        $z1 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label03;

        $r33 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_COUNT>;

        $z12 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r33);

        if $z12 == 0 goto label05;

     label03:
        $i0 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: int consume(com.hp.hpl.jena.query.ResultSet)>(r36);

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_COUNT>;

        $z2 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label04;

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r32);

     label04:
        z13 = 1;

     label05:
        $r39 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_XML>;

        $z14 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r39);

        if $z14 != 0 goto label06;

        $r26 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_N3>;

        $z10 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r26);

        if $z10 != 0 goto label06;

        $r27 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

        $z11 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r27);

        if $z11 == 0 goto label07;

     label06:
        $r40 = staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: com.hp.hpl.jena.rdf.model.Model toModel(com.hp.hpl.jena.query.ResultSet)>(r36);

        $r41 = virtualinvoke r37.<com.hp.hpl.jena.sparql.core.Prologue: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        interfaceinvoke $r40.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(com.hp.hpl.jena.shared.PrefixMapping)>($r41);

        $r42 = interfaceinvoke $r40.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFWriter getWriter(java.lang.String)>("TURTLE");

        $r43 = staticinvoke <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: java.lang.String getURI()>();

        interfaceinvoke $r40.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rs", $r43);

        $r44 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke $r42.<com.hp.hpl.jena.rdf.model.RDFWriter: void write(com.hp.hpl.jena.rdf.model.Model,java.io.OutputStream,java.lang.String)>($r40, $r44, null);

        z13 = 1;

     label07:
        $r45 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_XML>;

        $z15 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r45);

        if $z15 == 0 goto label08;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r25, r36);

        z13 = 1;

     label08:
        $r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_JSON>;

        $z3 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label09;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r24, r36);

        z13 = 1;

     label09:
        $r4 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_SSE>;

        $z4 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label10;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsSSE(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r23, r36, r37);

        z13 = 1;

     label10:
        $r5 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

        $z5 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r5);

        if $z5 == 0 goto label11;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r22, r36, r37);

        z13 = 1;

     label11:
        $r6 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TUPLES>;

        $z6 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r6);

        if $z6 == 0 goto label12;

        $r19 = new com.hp.hpl.jena.sparql.resultset.PlainFormat;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.resultset.PlainFormat: void <init>(java.io.OutputStream,com.hp.hpl.jena.sparql.core.Prologue)>($r20, r37);

        $r21 = new com.hp.hpl.jena.sparql.resultset.ResultSetApply;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.resultset.ResultSetApply: void <init>(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.resultset.ResultSetProcessor)>(r36, $r19);

        virtualinvoke $r21.<com.hp.hpl.jena.sparql.resultset.ResultSetApply: void apply()>();

        z13 = 1;

     label12:
        $r7 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_CSV>;

        $z7 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r7);

        if $z7 == 0 goto label13;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsCSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r18, r36);

        z13 = 1;

     label13:
        $r8 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_TSV>;

        $z8 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r8);

        if $z8 == 0 goto label14;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsTSV(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r17, r36);

        z13 = 1;

     label14:
        $r9 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_BIO>;

        $z9 = virtualinvoke r38.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r9);

        if $z9 == 0 goto label15;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsBIO(java.io.OutputStream,com.hp.hpl.jena.query.ResultSet)>($r16, r36);

        z13 = 1;

     label15:
        if z13 != 0 goto label16;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown format request: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label16:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void flush()>();

        return;
    }

    private static void doSelectQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r2, r3;
        com.hp.hpl.jena.query.ResultSet $r4;
        com.hp.hpl.jena.query.QueryExecution r0;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        r3 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        if r3 == null goto label1;

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        if r3 != $r2 goto label2;

     label1:
        r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

     label2:
        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void outputResultSet(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r4, r1, r3);

        return;
    }

    private static void doDescribeQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.rdf.model.Model $r4;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r2, r3;
        com.hp.hpl.jena.query.QueryExecution r0;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        r3 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        if r3 == null goto label1;

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        if r3 != $r2 goto label2;

     label1:
        r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

     label2:
        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.rdf.model.Model execDescribe()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void writeModel(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r1, $r4, r3);

        return;
    }

    private static void doConstructQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.rdf.model.Model $r4;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r2, r3;
        com.hp.hpl.jena.query.QueryExecution r0;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        r3 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        if r3 == null goto label1;

        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        if r3 != $r2 goto label2;

     label1:
        r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

     label2:
        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.rdf.model.Model execConstruct()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void writeModel(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(r1, $r4, r3);

        return;
    }

    private static void writeModel(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r0, $r1, $r2, $r3, $r4, $r24, r25, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r5, $r7, $r8, $r16, $r18, $r19, $r20;
        com.hp.hpl.jena.query.Query r15;
        java.lang.String $r9, $r21, r27;
        java.io.PrintStream $r6, $r11, $r12, $r13, $r14, $r17, $r22, $r23;
        com.hp.hpl.jena.rdf.model.Model r10;

        r15 := @parameter0: com.hp.hpl.jena.query.Query;

        r10 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r25 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        if r25 == null goto label01;

        $r24 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        if r25 != $r24 goto label02;

     label01:
        r25 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

     label02:
        $r26 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_NONE>;

        $z7 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r26);

        if $z7 == 0 goto label03;

        return;

     label03:
        $r0 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

        $z0 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label06;

        r27 = "";

        $z5 = virtualinvoke r15.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        if $z5 == 0 goto label04;

        r27 = "DESCRIBE";

     label04:
        $z6 = virtualinvoke r15.<com.hp.hpl.jena.query.Query: boolean isConstructType()>();

        if $z6 == 0 goto label05;

        r27 = "CONSTRUCT";

     label05:
        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# ======== ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" results ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String,java.lang.String)>($r22, "N3", null);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("# ======== ");

        return;

     label06:
        $r1 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_XML>;

        $z1 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label07;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String,java.lang.String)>($r14, "RDF/XML-ABBREV", null);

        return;

     label07:
        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

        $z2 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label08;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String,java.lang.String)>($r13, "N3", null);

        return;

     label08:
        $r3 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_N3>;

        $z3 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label09;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String,java.lang.String)>($r12, "N3", null);

        return;

     label09:
        $r4 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_NT>;

        $z4 = virtualinvoke r25.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label10;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model write(java.io.OutputStream,java.lang.String,java.lang.String)>($r11, "N-TRIPLES", null);

        return;

     label10:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown format: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    private static void doAskQuery(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.QueryExecution, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r24, r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r10, $r12, $r13, $r17, $r19, $r20;
        com.hp.hpl.jena.query.QueryExecution r0;
        com.hp.hpl.jena.query.Query r25;
        java.lang.String $r14, $r21, $r28;
        java.io.PrintStream $r3, $r4, $r11, $r15, $r16, $r18, $r22, $r23;

        r25 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: com.hp.hpl.jena.query.QueryExecution;

        r26 := @parameter2: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: boolean execAsk()>();

        if r26 == null goto label01;

        $r24 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_UNKNOWN>;

        if r26 != $r24 goto label02;

     label01:
        r26 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

     label02:
        $r27 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_NONE>;

        $z8 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r27);

        if $z8 == 0 goto label03;

        return;

     label03:
        $r1 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_XML>;

        $z1 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label04;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsXML(java.io.OutputStream,boolean)>($r23, $z0);

        return;

     label04:
        $r2 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_N3>;

        $z2 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r2);

        if $z2 != 0 goto label05;

        $r5 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RDF_TTL>;

        $z3 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label06;

     label05:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsRDF(java.io.OutputStream,java.lang.String,boolean)>($r3, "TURTLE", $z0);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void flush()>();

        return;

     label06:
        $r6 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_JSON>;

        $z4 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label07;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsJSON(java.io.OutputStream,boolean)>($r22, $z0);

        return;

     label07:
        $r7 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_TEXT>;

        $z5 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label10;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ask => ");

        if $z0 == 0 goto label08;

        $r28 = "Yes";

        goto label09;

     label08:
        $r28 = "No";

     label09:
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r21);

        return;

     label10:
        $r8 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_CSV>;

        $z6 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r8);

        if $z6 == 0 goto label11;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsCSV(java.io.OutputStream,boolean)>($r16, $z0);

        return;

     label11:
        $r9 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_RS_TSV>;

        $z7 = virtualinvoke r26.<com.hp.hpl.jena.sparql.resultset.ResultsFormat: boolean equals(java.lang.Object)>($r9);

        if $z7 == 0 goto label12;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void outputAsTSV(java.io.OutputStream,boolean)>($r15, $z0);

        return;

     label12:
        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown format: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        return;
    }

    public static com.hp.hpl.jena.rdf.model.RDFNode getExactlyOne(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r3;
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.query.Dataset $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $r2 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset create(com.hp.hpl.jena.rdf.model.Model)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.rdf.model.RDFNode getExactlyOne(java.lang.String,com.hp.hpl.jena.query.Dataset)>(r0, $r2);

        return $r3;
    }

    public static com.hp.hpl.jena.rdf.model.RDFNode getExactlyOne(java.lang.String, com.hp.hpl.jena.query.Dataset)
    {
        com.hp.hpl.jena.query.Query $r1;
        com.hp.hpl.jena.rdf.model.RDFNode $r8;
        java.util.List $r2, $r3;
        int $i0;
        com.hp.hpl.jena.query.Dataset r6;
        java.lang.Object $r4;
        java.lang.String r0, r5;
        com.hp.hpl.jena.sparql.ARQException $r9;
        com.hp.hpl.jena.query.QueryExecution $r7;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: com.hp.hpl.jena.query.Dataset;

        $r1 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: java.util.List getResultVars()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r9 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("getExactlyOne: Must have exactly one result columns");

        throw $r9;

     label1:
        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: java.util.List getResultVars()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (java.lang.String) $r4;

        $r7 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)>($r1, r6);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.rdf.model.RDFNode getExactlyOne(com.hp.hpl.jena.query.QueryExecution,java.lang.String)>($r7, r5);

        return $r8;
    }

    public static com.hp.hpl.jena.rdf.model.RDFNode getExactlyOne(com.hp.hpl.jena.query.QueryExecution, java.lang.String)
    {
        java.lang.Throwable $r15;
        java.lang.String r3, $r9, $r14;
        com.hp.hpl.jena.sparql.ARQException $r5, $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.query.ResultSet $r1;
        com.hp.hpl.jena.query.QuerySolution $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        com.hp.hpl.jena.query.QueryExecution r0;

        r0 := @parameter0: com.hp.hpl.jena.query.QueryExecution;

        r3 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r10 = new com.hp.hpl.jena.sparql.ARQException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: var ?");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution nextSolution()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = new com.hp.hpl.jena.sparql.ARQException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one: var ?");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        return $r4;

     label4:
        $r15 := @caughtexception;

     label5:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        throw $r15;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static com.hp.hpl.jena.rdf.model.RDFNode getOne(com.hp.hpl.jena.query.QueryExecution, java.lang.String)
    {
        java.lang.Throwable $r26;
        java.lang.String r3, $r15, $r25;
        com.hp.hpl.jena.sparql.ARQException $r7, $r16;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.model.RDFNode $r4, $r6;
        com.hp.hpl.jena.query.ResultSet $r1;
        com.hp.hpl.jena.query.QuerySolution $r2, $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        com.hp.hpl.jena.query.QueryExecution r0;

        r0 := @parameter0: com.hp.hpl.jena.query.QueryExecution;

        r3 := @parameter1: java.lang.String;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        return null;

     label3:
        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution nextSolution()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>(r3);

        $z2 = interfaceinvoke $r1.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r16 = new com.hp.hpl.jena.sparql.ARQException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one: var ?");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r25);

        throw $r16;

     label4:
        $r7 = new com.hp.hpl.jena.sparql.ARQException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found two matches: var ?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label5:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        return $r4;

     label6:
        $r26 := @caughtexception;

     label7:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryExecution: void close()>();

        throw $r26;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    static void <clinit>()
    {
        java.lang.String $r1, $r3, $r7;
        com.hp.hpl.jena.shared.PrefixMapping $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r0;

        $r0 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r0.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap> = $r0;

        $r2 = <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap>;

        $r1 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfPrefix>;

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdf", $r1);

        $r4 = <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap>;

        $r3 = <com.hp.hpl.jena.sparql.ARQConstants: java.lang.String rdfsPrefix>;

        interfaceinvoke $r4.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rdfs", $r3);

        $r5 = <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap>;

        interfaceinvoke $r5.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema#");

        $r6 = <com.hp.hpl.jena.sparql.util.QueryExecUtils: com.hp.hpl.jena.shared.PrefixMapping globalPrefixMap>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.vocabulary.ResultSetGraphVocab: java.lang.String getURI()>();

        interfaceinvoke $r6.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>("rs", $r7);

        return;
    }
}
