public class com.hp.hpl.jena.sparql.util.NodeUtils extends java.lang.Object
{
    public static com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm;
    public static com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameValue;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.NodeUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.graph.Node asNode(org.apache.jena.iri.IRI)
    {
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r2;
        org.apache.jena.iri.IRI r0;

        r0 := @parameter0: org.apache.jena.iri.IRI;

        $r1 = virtualinvoke r0.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node asNode(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        return $r1;
    }

    public static boolean isStringLiteral(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r2 == null goto label2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        if $r1 == null goto label4;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z2 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static boolean hasLang(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static java.lang.String stringLiteral(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: boolean isStringLiteral(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r1;
    }

    public static java.util.Iterator nodesToURIs(java.util.Iterator)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.sparql.util.NodeUtils$1 $r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.util.iterator.MapFilterIterator $r3;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new com.hp.hpl.jena.sparql.util.NodeUtils$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.NodeUtils$1: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>(r1);

        $r3 = new com.hp.hpl.jena.util.iterator.MapFilterIterator;

        specialinvoke $r3.<com.hp.hpl.jena.util.iterator.MapFilterIterator: void <init>(com.hp.hpl.jena.util.iterator.MapFilter,com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r0, $r2);

        return $r3;
    }

    public static java.util.Set convertToNodes(java.util.Collection)
    {
        java.util.HashSet $r0;
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3;
        java.lang.String r4;
        com.hp.hpl.jena.graph.Node $r5;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r4);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static int compareRDFTerms(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.rdf.model.AnonId $r11, $r13;
        int $i0, $i1, $i2, $i4, $i6, $i8;
        java.lang.String $r8, $r9, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r16;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r15;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label02;

        if r1 != null goto label01;

        return 0;

     label01:
        $i4 = (int) -1;

        return $i4;

     label02:
        if r1 != null goto label03;

        return 1;

     label03:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label04;

        $z7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z7 == 0 goto label04;

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: int compareLiteralsBySyntax(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1);

        return $i2;

     label04:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label06;

        $z6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z6 == 0 goto label05;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String getLabelString()>();

        $r13 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String getLabelString()>();

        $i1 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r12, $r14);

        return $i1;

     label05:
        $i6 = (int) -1;

        return $i6;

     label06:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z2 == 0 goto label07;

        return 1;

     label07:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z3 == 0 goto label09;

        $z5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z5 == 0 goto label08;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i0 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r9, $r10);

        return $i0;

     label08:
        $i8 = (int) -1;

        return $i8;

     label09:
        $z4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z4 == 0 goto label10;

        return 1;

     label10:
        $r16 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compare: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r8);

        throw $r16;
    }

    private static int compareLiteralsBySyntax(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r28, $r30, $r32, $r33;
        java.lang.StringBuilder $r11, $r12, $r16, $r17, $r21, $r22, $r23, $r24, $r25, $r27, $r29, $r31;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r13, $r18, $r26;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label01;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label01;

        if r1 == null goto label01;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label02;

     label01:
        $r28 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compareLiteralsBySyntax called with non-literal: (");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r26);

        throw $r28;

     label02:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label03;

        return 0;

     label03:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $i0 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r2, $r3);

        if $i0 == 0 goto label04;

        return $i0;

     label04:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r4 != null goto label05;

        $r30 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag is null: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r18);

        throw $r30;

     label05:
        if $r5 != null goto label06;

        $r32 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag is null: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r13);

        throw $r32;

     label06:
        $z3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: boolean simpleLiteral(com.hp.hpl.jena.graph.Node)>(r0);

        if $z3 == 0 goto label07;

        $i5 = (int) -1;

        return $i5;

     label07:
        $z4 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: boolean simpleLiteral(com.hp.hpl.jena.graph.Node)>(r1);

        if $z4 == 0 goto label08;

        return 1;

     label08:
        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 != 0 goto label09;

        if $r7 == null goto label09;

        $i7 = (int) -1;

        return $i7;

     label09:
        if $r6 == null goto label10;

        $z6 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 != 0 goto label10;

        return 1;

     label10:
        if $r6 != null goto label13;

        if $r7 != null goto label13;

        $i2 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompareIgnoreCase(java.lang.String,java.lang.String)>($r4, $r5);

        if $i2 == 0 goto label11;

        return $i2;

     label11:
        $i3 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r4, $r5);

        if $i3 == 0 goto label12;

        return $i3;

     label12:
        $r33 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r33.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("compareLiteralsBySyntax: lexical form and languages tags identical on non.equals literals");

        throw $r33;

     label13:
        $i1 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: int strCompare(java.lang.String,java.lang.String)>($r6, $r7);

        return $i1;
    }

    private static boolean simpleLiteral(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.NodeUtils$2 $r0;
        com.hp.hpl.jena.sparql.util.NodeUtils$3 $r1;

        $r0 = new com.hp.hpl.jena.sparql.util.NodeUtils$2;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.NodeUtils$2: void <init>()>();

        <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm> = $r0;

        $r1 = new com.hp.hpl.jena.sparql.util.NodeUtils$3;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.NodeUtils$3: void <init>()>();

        <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameValue> = $r1;

        return;
    }
}
