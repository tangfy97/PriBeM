public class org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil extends java.lang.Object
{
    public org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation;

    public void <init>()
    {
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private org.eclipse.jdt.internal.core.util.RecordedParsingInformation getRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult, org.eclipse.jdt.internal.core.util.CommentRecorderParser)
    {
        int[][] $r8;
        org.eclipse.jdt.core.compiler.CategorizedProblem[] r2, $r3, r5;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser r1;
        int[] $r7;
        org.eclipse.jdt.internal.core.util.RecordedParsingInformation $r6;
        int i0, $i1;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r4;

        r4 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.CompilationResult;

        r1 := @parameter1: org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        i0 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int problemCount>;

        r5 = (org.eclipse.jdt.core.compiler.CategorizedProblem[]) null;

        if i0 == 0 goto label2;

        r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] problems>;

        $i1 = lengthof r2;

        if $i1 != i0 goto label1;

        r5 = r2;

        goto label2;

     label1:
        $r3 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[i0];

        r5 = $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r3, 0, i0);

     label2:
        $r6 = new org.eclipse.jdt.internal.core.util.RecordedParsingInformation;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: int[] getLineSeparatorPositions()>();

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: int[][] getCommentsPositions()>();

        specialinvoke $r6.<org.eclipse.jdt.internal.core.util.RecordedParsingInformation: void <init>(org.eclipse.jdt.core.compiler.CategorizedProblem[],int[],int[][])>(r5, $r7, $r8);

        return $r6;
    }

    public org.eclipse.jdt.internal.compiler.ast.ASTNode[] parseClassBodyDeclarations(char[], java.util.Map, boolean)
    {
        java.util.Map r2;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r0;
        int $i0;
        char[] r1;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        $i0 = lengthof r1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.compiler.ast.ASTNode[] parseClassBodyDeclarations(char[],int,int,java.util.Map,boolean)>(r1, 0, $i0, r2, z0);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.ast.ASTNode[] parseClassBodyDeclarations(char[], int, int, java.util.Map, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser $r7;
        java.util.Locale $r6;
        java.util.Map r2;
        int $i0, $i1, i2, i3;
        java.lang.String $r9;
        org.eclipse.jdt.internal.compiler.ast.ASTNode[] $r12;
        boolean z0;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r10;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r8;
        java.lang.IllegalArgumentException $r15;
        org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory $r5;
        org.eclipse.jdt.internal.core.util.RecordedParsingInformation $r14;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r13;
        char[] r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r11;

        r13 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        r2 := @parameter3: java.util.Map;

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        $r1 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>(r2);

        $r3 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy proceedWithAllProblems()>();

        $r5 = new org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: void <init>(java.util.Locale)>($r6);

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r4, $r1, $r5);

        $r7 = new org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        specialinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r3, 0);

        virtualinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void setMethodsFullRecovery(boolean)>(0);

        virtualinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void setStatementsRecovery(boolean)>(0);

        $r8 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r9 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String)>(r0, "", $r9);

        $r10 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>($r8, 0, 0, $i0);

        $r11 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $i1 = lengthof r0;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r3, $r10, $i1);

        $r12 = virtualinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.ASTNode[] parseClassBodyDeclarations(char[],int,int,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>(r0, i2, i3, $r11);

        if z0 == 0 goto label2;

        $r14 = specialinvoke r13.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation getRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.core.util.CommentRecorderParser)>($r10, $r7);

        r13.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation> = $r14;

     label2:
        return $r12;
    }

    public org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration parseCompilationUnit(char[], java.util.Map, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r13;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser $r3;
        java.util.Locale $r7;
        java.util.Map r2;
        int $i0, i1, i2;
        java.lang.String $r9;
        boolean z0, $z1;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r12;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r5;
        org.eclipse.jdt.internal.compiler.CompilationResult $r10;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r8;
        java.lang.IllegalArgumentException $r18;
        org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory $r6;
        org.eclipse.jdt.internal.core.util.RecordedParsingInformation $r15, $r17;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r14;
        char[] r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r16;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r11;

        r14 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r0 := @parameter0: char[];

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r18;

     label1:
        $r1 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>(r2);

        $r3 = new org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        $r4 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy proceedWithAllProblems()>();

        $r6 = new org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;

        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: void <init>(java.util.Locale)>($r7);

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r5, $r1, $r6);

        specialinvoke $r3.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r4, 0);

        $r8 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r9 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String)>(r0, "", $r9);

        $r10 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>($r8, 0, 0, $i0);

        $r11 = virtualinvoke $r3.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration dietParse(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,org.eclipse.jdt.internal.compiler.CompilationResult)>($r8, $r10);

        if z0 == 0 goto label2;

        $r17 = specialinvoke r14.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation getRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.core.util.CommentRecorderParser)>($r10, $r3);

        r14.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation> = $r17;

     label2:
        $z1 = $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean ignoreMethodBodies>;

        if $z1 == 0 goto label3;

        $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: boolean ignoreFurtherInvestigation> = 1;

        return $r11;

     label3:
        $r12 = $r3.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(org.eclipse.jdt.internal.compiler.CompilationResult)>($r10);

        r13 = $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types>;

        if r13 == null goto label6;

        i2 = 0;

        i1 = lengthof r13;

        goto label5;

     label4:
        $r16 = r13[i2];

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: void parseMethods(org.eclipse.jdt.internal.compiler.parser.Parser,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>($r3, $r11);

        i2 = i2 + 1;

     label5:
        if i2 < i1 goto label4;

     label6:
        if z0 == 0 goto label7;

        $r15 = r14.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.core.util.RecordedParsingInformation: void updateRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult)>($r10);

     label7:
        return $r11;
    }

    public org.eclipse.jdt.internal.compiler.ast.Expression parseExpression(char[], java.util.Map, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        java.util.Map r2;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r0;
        int $i0;
        char[] r1;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        $i0 = lengthof r1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.compiler.ast.Expression parseExpression(char[],int,int,java.util.Map,boolean)>(r1, 0, $i0, r2, z0);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.ast.Expression parseExpression(char[], int, int, java.util.Map, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r12;
        java.util.Locale $r6;
        java.util.Map r2;
        int $i0, i1, i2, $i3;
        java.lang.String $r9;
        boolean z0;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r10;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r8;
        java.lang.IllegalArgumentException $r15;
        org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory $r5;
        org.eclipse.jdt.internal.core.util.RecordedParsingInformation $r14;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r13;
        char[] r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r1;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r11;

        r13 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r2 := @parameter3: java.util.Map;

        z0 := @parameter4: boolean;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label1:
        $r1 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>(r2);

        $r3 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy proceedWithAllProblems()>();

        $r5 = new org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: void <init>(java.util.Locale)>($r6);

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r4, $r1, $r5);

        $r7 = new org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        specialinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r3, 0);

        $r8 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r9 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String)>(r0, "", $r9);

        $r10 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>($r8, 0, 0, $i0);

        $r11 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        $i3 = lengthof r0;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r3, $r10, $i3);

        $r12 = virtualinvoke $r7.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.ast.Expression parseExpression(char[],int,int,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)>(r0, i1, i2, $r11);

        if z0 == 0 goto label2;

        $r14 = specialinvoke r13.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation getRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.core.util.CommentRecorderParser)>($r10, $r7);

        r13.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation> = $r14;

     label2:
        return $r12;
    }

    public org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration parseStatements(char[], java.util.Map, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r3;
        java.util.Map r2;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r0;
        int $i0;
        char[] r1;
        boolean z0, z1;

        r0 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $i0 = lengthof r1;

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration parseStatements(char[],int,int,java.util.Map,boolean,boolean)>(r1, 0, $i0, r2, z0, z1);

        return $r3;
    }

    public org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration parseStatements(char[], int, int, java.util.Map, boolean, boolean)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r21;
        org.eclipse.jdt.internal.core.util.CommentRecorderParser $r22;
        java.util.Locale $r6;
        java.util.Map r2;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.String $r9;
        boolean z0, z1;
        org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration $r26;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r13, $r14;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r4;
        org.eclipse.jdt.internal.compiler.CompilationResult $r24;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r23;
        java.lang.IllegalArgumentException $r18;
        org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory $r20;
        org.eclipse.jdt.internal.core.util.RecordedParsingInformation $r16;
        org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil r15;
        char[] r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r19;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r25;

        r15 := @this: org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.util.Map;

        z1 := @parameter4: boolean;

        z0 := @parameter5: boolean;

        if r0 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r18;

     label1:
        $r19 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r19.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>(r2);

        $r21 = new org.eclipse.jdt.internal.compiler.problem.ProblemReporter;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy proceedWithAllProblems()>();

        $r20 = new org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r20.<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: void <init>(java.util.Locale)>($r6);

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void <init>(org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.IProblemFactory)>($r4, $r19, $r20);

        $r22 = new org.eclipse.jdt.internal.core.util.CommentRecorderParser;

        specialinvoke $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,boolean)>($r21, 0);

        virtualinvoke $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void setMethodsFullRecovery(boolean)>(0);

        virtualinvoke $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void setStatementsRecovery(boolean)>(z0);

        $r23 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r9 = $r19.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        specialinvoke $r23.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String)>(r0, "", $r9);

        $r24 = new org.eclipse.jdt.internal.compiler.CompilationResult;

        $i0 = $r19.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        specialinvoke $r24.<org.eclipse.jdt.internal.compiler.CompilationResult: void <init>(org.eclipse.jdt.internal.compiler.env.ICompilationUnit,int,int,int)>($r23, 0, 0, $i0);

        $r25 = new org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;

        specialinvoke $r25.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: void <init>(org.eclipse.jdt.internal.compiler.problem.ProblemReporter,org.eclipse.jdt.internal.compiler.CompilationResult,int)>($r21, $r24, i1);

        $r26 = new org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;

        specialinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)>($r24);

        $i9 = (int) -1;

        $r26.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int sourceEnd> = $i9;

        $i3 = i2 + i1;

        $i4 = $i3 - 1;

        $r26.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int declarationSourceEnd> = $i4;

        $r26.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyStart> = i2;

        $i5 = i2 + i1;

        $i6 = $i5 - 1;

        $r26.<org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration: int bodyEnd> = $i6;

        $r13 = $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.parser.Scanner: void setSource(org.eclipse.jdt.internal.compiler.CompilationResult)>($r24);

        $r14 = $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i7 = i2 + i1;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i2, $i7);

        virtualinvoke $r22.<org.eclipse.jdt.internal.core.util.CommentRecorderParser: void parse(org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration,org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration,boolean)>($r26, $r25, 1);

        if z1 == 0 goto label2;

        $r16 = specialinvoke r15.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation getRecordedParsingInformation(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.internal.core.util.CommentRecorderParser)>($r24, $r22);

        r15.<org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil: org.eclipse.jdt.internal.core.util.RecordedParsingInformation recordedParsingInformation> = $r16;

     label2:
        return $r26;
    }
}
