public class arq.cmdline.ModEngine extends arq.cmdline.ModBase
{
    protected final arq.cmdline.ArgDecl engineDecl;
    protected final arq.cmdline.ArgDecl unEngineDecl;
    private boolean timing;

    public void <init>()
    {
        arq.cmdline.ArgDecl $r1, $r3;
        java.lang.String[] $r2, $r4;
        arq.cmdline.ModEngine r0;

        r0 := @this: arq.cmdline.ModEngine;

        specialinvoke r0.<arq.cmdline.ModBase: void <init>()>();

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[0];

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "engine", $r2);

        r0.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl engineDecl> = $r1;

        $r3 = new arq.cmdline.ArgDecl;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "unEngine";

        $r4[1] = "removeEngine";

        $r4[2] = "removeengine";

        specialinvoke $r3.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "unengine", $r4);

        r0.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl unEngineDecl> = $r3;

        r0.<arq.cmdline.ModEngine: boolean timing> = 0;

        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.Usage $r1;
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r3, $r4;
        arq.cmdline.ModEngine r2;

        r2 := @this: arq.cmdline.ModEngine;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = virtualinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r1.<arq.cmdline.Usage: void startCategory(java.lang.String)>("Query Engine");

        $r3 = r2.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl engineDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--engine=EngineName", "Register another engine factory[ref]");

        $r4 = r2.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl unEngineDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r4, "--unengine=EngineName", "Unregister an engine factory");

        return;
    }

    public void checkCommandLine(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.CmdGeneral r1;
        arq.cmdline.ModEngine r0;

        r0 := @this: arq.cmdline.ModEngine;

        r1 := @parameter0: arq.cmdline.CmdGeneral;

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.ArgDecl $r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.List $r3, $r6;
        arq.cmd.CmdException $r10, $r16;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        arq.cmdline.CmdArgModule r0;
        java.lang.String r9, $r14, $r20, r21;
        arq.cmdline.ModEngine r1;
        java.util.Iterator $r4, $r7;
        java.lang.Object $r8, $r15;

        r1 := @this: arq.cmdline.ModEngine;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        $r2 = r1.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl engineDecl>;

        $r3 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.util.List getValues(arq.cmdline.ArgDecl)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z10 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label07;

        $r15 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r15;

        $z5 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ref");

        if $z5 != 0 goto label02;

        $z6 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("reference");

        if $z6 == 0 goto label03;

     label02:
        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: void register()>();

        goto label01;

     label03:
        $z7 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("refQuad");

        if $z7 == 0 goto label04;

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRefQuad: void register()>();

        goto label01;

     label04:
        $z8 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("main");

        if $z8 == 0 goto label05;

        staticinvoke <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: void register()>();

        goto label01;

     label05:
        $z9 = virtualinvoke r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("quad");

        if $z9 == 0 goto label06;

        staticinvoke <com.hp.hpl.jena.sparql.engine.main.QueryEngineMainQuad: void register()>();

        goto label01;

     label06:
        $r16 = new arq.cmd.CmdException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Engine name not recognized: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<arq.cmd.CmdException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label07:
        $r5 = r1.<arq.cmdline.ModEngine: arq.cmdline.ArgDecl unEngineDecl>;

        $r6 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.util.List getValues(arq.cmdline.ArgDecl)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z11 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label14;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        $z0 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ref");

        if $z0 != 0 goto label09;

        $z1 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("reference");

        if $z1 == 0 goto label10;

     label09:
        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRef: void unregister()>();

        goto label08;

     label10:
        $z2 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("refQuad");

        if $z2 == 0 goto label11;

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.QueryEngineRefQuad: void unregister()>();

        goto label08;

     label11:
        $z3 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("main");

        if $z3 == 0 goto label12;

        staticinvoke <com.hp.hpl.jena.sparql.engine.main.QueryEngineMain: void unregister()>();

        goto label08;

     label12:
        $z4 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("main");

        if $z4 == 0 goto label13;

        staticinvoke <com.hp.hpl.jena.sparql.engine.main.QueryEngineMainQuad: void unregister()>();

        goto label08;

     label13:
        $r10 = new arq.cmd.CmdException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Engine name not recognized: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<arq.cmd.CmdException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label14:
        return;
    }
}
