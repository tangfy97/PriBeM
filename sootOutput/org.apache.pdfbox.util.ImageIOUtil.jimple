public class org.apache.pdfbox.util.ImageIOUtil extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    public static final int DEFAULT_SCREEN_RESOLUTION;
    public static final float DEFAULT_COMPRESSION_QUALITY;

    private void <init>()
    {
        org.apache.pdfbox.util.ImageIOUtil r0;

        r0 := @this: org.apache.pdfbox.util.ImageIOUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean writeImage(java.awt.image.BufferedImage, java.lang.String, int) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        java.awt.image.BufferedImage r4;
        java.io.FileOutputStream $r2;
        java.io.File $r0;
        int $i0, $i1, i2;
        java.lang.String r1, $r3;
        boolean $z0;

        r4 := @parameter0: java.awt.image.BufferedImage;

        r1 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,int)>(r4, $r3, $r2, i2);

     label2:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        return $z0;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean writeImage(java.awt.image.BufferedImage, java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        java.awt.image.BufferedImage r9;
        java.io.FileOutputStream $r8;
        java.io.File $r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String r2, r5, $r7;
        boolean $z0;

        r9 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r0 = new java.io.File;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r7);

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

     label1:
        $z0 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,int)>(r9, r5, $r8, i0);

     label2:
        virtualinvoke $r8.<java.io.FileOutputStream: void close()>();

        return $z0;

     label3:
        $r10 := @caughtexception;

     label4:
        virtualinvoke $r8.<java.io.FileOutputStream: void close()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean writeImage(java.awt.image.BufferedImage, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.awt.image.BufferedImage r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.OutputStream;

        $z0 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,int)>(r0, r1, r2, 72);

        return $z0;
    }

    public static boolean writeImage(java.awt.image.BufferedImage, java.lang.String, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.awt.image.BufferedImage r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.OutputStream;

        i0 := @parameter3: int;

        $z0 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,int,float)>(r0, r1, r2, i0, 1.0F);

        return $z0;
    }

    public static boolean writeImage(java.awt.image.BufferedImage, java.lang.String, java.io.OutputStream, int, float) throws java.io.IOException
    {
        javax.imageio.IIOImage $r37;
        javax.imageio.metadata.IIOMetadata $r28, r34;
        javax.imageio.ImageWriteParam $r26, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.awt.image.BufferedImage r5;
        javax.imageio.stream.ImageOutputStream r31, $r36;
        float f0;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r17, $r19, $r21, $r22;
        java.lang.Throwable $r30;
        javax.imageio.ImageTypeSpecifier $r27;
        java.lang.String[] $r9, $r18;
        int i0, i1, i2;
        java.lang.String r0, $r2, $r3, $r6, $r7, $r8, $r10, $r16, $r23, r24, $r35;
        java.io.OutputStream r4;
        java.util.Iterator $r1;
        javax.imageio.ImageWriter $r29, r32;
        org.apache.commons.logging.Log $r12, $r20;
        java.lang.Object $r25;

        r5 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.OutputStream;

        i0 := @parameter3: int;

        f0 := @parameter4: float;

        r31 = null;

        r32 = null;

     label01:
        $r1 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByFormatName(java.lang.String)>(r0);

        r33 = null;

        r34 = null;

     label02:
        $z8 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label04;

        if r32 == null goto label03;

        virtualinvoke r32.<javax.imageio.ImageWriter: void dispose()>();

     label03:
        $r25 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (javax.imageio.ImageWriter) $r25;

        r32 = $r29;

        $r26 = virtualinvoke $r29.<javax.imageio.ImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam()>();

        r33 = $r26;

        $r27 = new javax.imageio.ImageTypeSpecifier;

        specialinvoke $r27.<javax.imageio.ImageTypeSpecifier: void <init>(java.awt.image.RenderedImage)>(r5);

        $r28 = virtualinvoke $r29.<javax.imageio.ImageWriter: javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)>($r27, $r26);

        r34 = $r28;

        if $r28 == null goto label02;

        $z6 = virtualinvoke $r28.<javax.imageio.metadata.IIOMetadata: boolean isReadOnly()>();

        if $z6 != 0 goto label02;

        $z7 = virtualinvoke $r28.<javax.imageio.metadata.IIOMetadata: boolean isStandardMetadataFormatSupported()>();

        if $z7 == 0 goto label02;

        goto label04;

     label04:
        if r32 != null goto label10;

        $r12 = <org.apache.pdfbox.util.ImageIOUtil: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ImageWriter found for \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' format");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = staticinvoke <javax.imageio.ImageIO: java.lang.String[] getWriterFormatNames()>();

        i1 = lengthof $r18;

        i2 = 0;

     label05:
        if i2 >= i1 goto label06;

        r24 = $r18[i2];

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i2 = i2 + 1;

        goto label05;

     label06:
        $r20 = <org.apache.pdfbox.util.ImageIOUtil: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supported formats: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r23);

     label07:
        if r32 == null goto label08;

        virtualinvoke r32.<javax.imageio.ImageWriter: void dispose()>();

     label08:
        if null == null goto label09;

        interfaceinvoke r31.<javax.imageio.stream.ImageOutputStream: void close()>();

     label09:
        return 0;

     label10:
        if r33 == null goto label12;

        $z4 = virtualinvoke r33.<javax.imageio.ImageWriteParam: boolean canWriteCompressed()>();

        if $z4 == 0 goto label12;

        virtualinvoke r33.<javax.imageio.ImageWriteParam: void setCompressionMode(int)>(2);

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z5 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("tif");

        if $z5 == 0 goto label11;

        staticinvoke <org.apache.pdfbox.util.TIFFUtil: void setCompressionType(javax.imageio.ImageWriteParam,java.awt.image.BufferedImage)>(r33, r5);

        goto label12;

     label11:
        $r9 = virtualinvoke r33.<javax.imageio.ImageWriteParam: java.lang.String[] getCompressionTypes()>();

        $r10 = $r9[0];

        virtualinvoke r33.<javax.imageio.ImageWriteParam: void setCompressionType(java.lang.String)>($r10);

        virtualinvoke r33.<javax.imageio.ImageWriteParam: void setCompressionQuality(float)>(f0);

     label12:
        $r35 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z9 = virtualinvoke $r35.<java.lang.String: boolean startsWith(java.lang.String)>("tif");

        if $z9 == 0 goto label13;

        staticinvoke <org.apache.pdfbox.util.TIFFUtil: void updateMetadata(javax.imageio.metadata.IIOMetadata,java.awt.image.BufferedImage,int)>(r34, r5, i0);

        goto label16;

     label13:
        $r2 = "jpeg";

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label14;

        $r6 = "jpg";

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label15;

     label14:
        staticinvoke <org.apache.pdfbox.util.JPEGUtil: void updateMetadata(javax.imageio.metadata.IIOMetadata,int)>(r34, i0);

        goto label16;

     label15:
        if r34 == null goto label16;

        $z2 = virtualinvoke r34.<javax.imageio.metadata.IIOMetadata: boolean isReadOnly()>();

        if $z2 != 0 goto label16;

        $z3 = virtualinvoke r34.<javax.imageio.metadata.IIOMetadata: boolean isStandardMetadataFormatSupported()>();

        if $z3 == 0 goto label16;

        staticinvoke <org.apache.pdfbox.util.ImageIOUtil: void setDPI(javax.imageio.metadata.IIOMetadata,int,java.lang.String)>(r34, i0, r0);

     label16:
        $r36 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.lang.Object)>(r4);

        r31 = $r36;

        virtualinvoke r32.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>($r36);

        $r37 = new javax.imageio.IIOImage;

        specialinvoke $r37.<javax.imageio.IIOImage: void <init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)>(r5, null, r34);

        virtualinvoke r32.<javax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)>(null, $r37, r33);

     label17:
        if r32 == null goto label18;

        virtualinvoke r32.<javax.imageio.ImageWriter: void dispose()>();

     label18:
        if $r36 == null goto label23;

        interfaceinvoke $r36.<javax.imageio.stream.ImageOutputStream: void close()>();

        goto label23;

     label19:
        $r30 := @caughtexception;

     label20:
        if r32 == null goto label21;

        virtualinvoke r32.<javax.imageio.ImageWriter: void dispose()>();

     label21:
        if r31 == null goto label22;

        interfaceinvoke r31.<javax.imageio.stream.ImageOutputStream: void close()>();

     label22:
        throw $r30;

     label23:
        return 1;

        catch java.lang.Throwable from label01 to label07 with label19;
        catch java.lang.Throwable from label10 to label17 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private static javax.imageio.metadata.IIOMetadataNode getOrCreateChildNode(javax.imageio.metadata.IIOMetadataNode, java.lang.String)
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Node $r4;
        int $i0;
        javax.imageio.metadata.IIOMetadataNode r0, $r3, $r5;
        java.lang.String r1;

        r0 := @parameter0: javax.imageio.metadata.IIOMetadataNode;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 <= 0 goto label1;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r5 = (javax.imageio.metadata.IIOMetadataNode) $r4;

        return $r5;

     label1:
        $r3 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r3.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return $r3;
    }

    private static void setDPI(javax.imageio.metadata.IIOMetadata, int, java.lang.String)
    {
        javax.imageio.metadata.IIOInvalidTreeException $r11;
        javax.imageio.metadata.IIOMetadata r0;
        javax.imageio.metadata.IIOMetadataNode r2, $r3, $r7, $r9;
        org.w3c.dom.Node $r1;
        int i0;
        java.lang.String r4, $r5, $r6, $r8, $r10;
        boolean $z0;
        double $d0, $d1;
        java.lang.RuntimeException $r12;
        float $f0, $f1, $f2;

        r0 := @parameter0: javax.imageio.metadata.IIOMetadata;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_1.0");

        r2 = (javax.imageio.metadata.IIOMetadataNode) $r1;

        $r3 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: javax.imageio.metadata.IIOMetadataNode getOrCreateChildNode(javax.imageio.metadata.IIOMetadataNode,java.lang.String)>(r2, "Dimension");

        $r5 = "PNG";

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $f1 = (float) i0;

        $f2 = $f1 / 25.4F;

        goto label2;

     label1:
        $f0 = (float) i0;

        $f2 = 25.4F / $f0;

     label2:
        $r7 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: javax.imageio.metadata.IIOMetadataNode getOrCreateChildNode(javax.imageio.metadata.IIOMetadataNode,java.lang.String)>($r3, "HorizontalPixelSize");

        $d0 = (double) $f2;

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        virtualinvoke $r7.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r8);

        $r9 = staticinvoke <org.apache.pdfbox.util.ImageIOUtil: javax.imageio.metadata.IIOMetadataNode getOrCreateChildNode(javax.imageio.metadata.IIOMetadataNode,java.lang.String)>($r3, "VerticalPixelSize");

        $d1 = (double) $f2;

        $r10 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        virtualinvoke $r9.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r10);

     label3:
        virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: void mergeTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_1.0", r2);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label6:
        return;

        catch javax.imageio.metadata.IIOInvalidTreeException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.util.ImageIOUtil: float DEFAULT_COMPRESSION_QUALITY> = 1.0F;

        <org.apache.pdfbox.util.ImageIOUtil: int DEFAULT_SCREEN_RESOLUTION> = 72;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/util/ImageIOUtil;");

        <org.apache.pdfbox.util.ImageIOUtil: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
