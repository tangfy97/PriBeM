public final class org.joda.time.chrono.BuddhistChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    public static final int BE;
    private static final org.joda.time.DateTimeField ERA_FIELD;
    private static final int BUDDHIST_OFFSET;
    private static final java.util.Map cCache;
    private static final org.joda.time.chrono.BuddhistChronology INSTANCE_UTC;

    public static org.joda.time.chrono.BuddhistChronology getInstanceUTC()
    {
        org.joda.time.chrono.BuddhistChronology $r0;

        $r0 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.BuddhistChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.BuddhistChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }

    public static synchronized org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r9;
        org.joda.time.chrono.LimitChronology $r6;
        org.joda.time.DateTime $r4;
        org.joda.time.chrono.GJChronology $r3;
        java.util.Map $r0, $r7;
        java.lang.Object $r1;
        org.joda.time.chrono.BuddhistChronology $r2, $r5, $r8, r10;

        r9 := @parameter0: org.joda.time.DateTimeZone;

        if r9 != null goto label1;

        r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r0 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r8 = (org.joda.time.chrono.BuddhistChronology) $r1;

        r10 = $r8;

        if $r8 != null goto label2;

        $r2 = new org.joda.time.chrono.BuddhistChronology;

        $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>(r9, null);

        specialinvoke $r2.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r3, null);

        $r4 = new org.joda.time.DateTime;

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r2);

        $r5 = new org.joda.time.chrono.BuddhistChronology;

        $r6 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r2, $r4, null);

        specialinvoke $r5.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r6, "");

        r10 = $r5;

        $r7 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r5);

     label2:
        return r10;
    }

    private void <init>(org.joda.time.Chronology, java.lang.Object)
    {
        org.joda.time.Chronology r1;
        java.lang.Object r2;
        org.joda.time.chrono.BuddhistChronology r0;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, r2);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.DateTimeZone $r2;
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.BuddhistChronology r0, $r3;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology getBase()>();

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>();

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r2);

     label2:
        return $r3;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.BuddhistChronology $r0, r1;

        r1 := @this: org.joda.time.chrono.BuddhistChronology;

        $r0 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return $r0;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r1, r3;
        org.joda.time.chrono.BuddhistChronology r0, $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        org.joda.time.chrono.BuddhistChronology r0;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        org.joda.time.DateTimeZone $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0;
        org.joda.time.chrono.BuddhistChronology r1;

        r1 := @this: org.joda.time.chrono.BuddhistChronology;

        $r0 = "Buddhist";

        $i0 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        $i1 = $i0 * 11;

        $r2 = virtualinvoke r1.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.joda.time.DateTimeZone $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r6, $r7;
        java.lang.String $r5, r8;
        org.joda.time.chrono.BuddhistChronology r0;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r8 = "BuddhistChronology";

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BuddhistChronology");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r5 = virtualinvoke $r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r8;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.field.OffsetDateTimeField $r3, $r8, $r10, $r17, $r22;
        org.joda.time.field.RemainderDateTimeField $r14, $r19;
        org.joda.time.DateTimeField $r6, $r11, $r15, $r20, $r24, r25, r26, r27;
        org.joda.time.DateTimeFieldType $r7, $r13, $r18, $r21, $r23;
        org.joda.time.field.SkipUndoDateTimeField $r4, $r9;
        org.joda.time.chrono.AssembledChronology$Fields r2;
        org.joda.time.field.DelegatedDateTimeField $r5;
        java.lang.Object $r1;
        org.joda.time.field.DividedDateTimeField $r12, $r16;
        org.joda.time.chrono.BuddhistChronology r0;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r2 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>();

        if $r1 != null goto label1;

        r25 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r3 = new org.joda.time.field.OffsetDateTimeField;

        $r4 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r4.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r25);

        specialinvoke $r3.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r4, 543);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3;

        r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r5 = new org.joda.time.field.DelegatedDateTimeField;

        $r6 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        specialinvoke $r5.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r6, $r7);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5;

        r27 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r8 = new org.joda.time.field.OffsetDateTimeField;

        $r9 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r9.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r27);

        specialinvoke $r8.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r9, 543);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r8;

        $r10 = new org.joda.time.field.OffsetDateTimeField;

        $r11 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        specialinvoke $r10.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r11, 99);

        $r12 = new org.joda.time.field.DividedDateTimeField;

        $r13 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r12.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r10, $r13, 100);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r12;

        $r14 = new org.joda.time.field.RemainderDateTimeField;

        $r15 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r16 = (org.joda.time.field.DividedDateTimeField) $r15;

        specialinvoke $r14.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r16);

        $r17 = new org.joda.time.field.OffsetDateTimeField;

        $r18 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r17.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r14, $r18, 1);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r17;

        $r19 = new org.joda.time.field.RemainderDateTimeField;

        $r20 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r21 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r19.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r20, $r21, 100);

        $r22 = new org.joda.time.field.OffsetDateTimeField;

        $r23 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r22.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r19, $r23, 1);

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r22;

        $r24 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD>;

        r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r24;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeZone $r2;
        java.util.HashMap $r1;
        org.joda.time.chrono.BasicSingleEraDateTimeField $r0;
        org.joda.time.chrono.BuddhistChronology $r3;

        <org.joda.time.chrono.BuddhistChronology: int BUDDHIST_OFFSET> = 543;

        <org.joda.time.chrono.BuddhistChronology: int BE> = 1;

        <org.joda.time.chrono.BuddhistChronology: long serialVersionUID> = -3474595157769370126L;

        $r0 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r0.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("BE");

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache> = $r1;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC> = $r3;

        return;
    }
}
