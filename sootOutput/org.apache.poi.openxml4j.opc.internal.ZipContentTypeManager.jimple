public class org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager extends org.apache.poi.openxml4j.opc.internal.ContentTypeManager
{
    private static org.apache.poi.util.POILogger logger;

    public void <init>(java.io.InputStream, org.apache.poi.openxml4j.opc.OPCPackage) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager r0;
        org.apache.poi.openxml4j.opc.OPCPackage r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.OPCPackage;

        specialinvoke r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void <init>(java.io.InputStream,org.apache.poi.openxml4j.opc.OPCPackage)>(r1, r2);

        return;
    }

    public boolean saveImpl(org.w3c.dom.Document, java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.util.zip.ZipOutputStream $r1, r7;
        org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager r6;
        java.io.IOException $r4;
        org.apache.poi.util.POILogger $r5;
        org.w3c.dom.Document r3;
        java.util.zip.ZipEntry $r2;
        boolean $z0, $z1;

        r6 := @this: org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager;

        r3 := @parameter0: org.w3c.dom.Document;

        r0 := @parameter1: java.io.OutputStream;

        $z0 = r0 instanceof java.util.zip.ZipOutputStream;

        if $z0 == 0 goto label1;

        r7 = (java.util.zip.ZipOutputStream) r0;

        goto label2;

     label1:
        $r1 = new java.util.zip.ZipOutputStream;

        specialinvoke $r1.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>(r0);

        r7 = $r1;

     label2:
        $r2 = new java.util.zip.ZipEntry;

        specialinvoke $r2.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("[Content_Types].xml");

     label3:
        virtualinvoke r7.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r2);

        $z1 = staticinvoke <org.apache.poi.openxml4j.opc.StreamHelper: boolean saveXmlInStream(org.w3c.dom.Document,java.io.OutputStream)>(r3, r7);

        if $z1 != 0 goto label5;

     label4:
        return 0;

     label5:
        virtualinvoke r7.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

        $r5 = <org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager: org.apache.poi.util.POILogger logger>;

        virtualinvoke $r5.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Throwable)>(7, "Cannot write: [Content_Types].xml in Zip !", $r4);

        return 0;

     label8:
        return 1;

        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/openxml4j/opc/internal/ZipContentTypeManager;");

        <org.apache.poi.openxml4j.opc.internal.ZipContentTypeManager: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
