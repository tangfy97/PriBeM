public class org.waveprotocol.box.server.frontend.testing.FakeWaveServer extends org.waveprotocol.box.server.frontend.testing.FakeClientFrontend
{
    private static final long APP_TIMESTAMP;
    private final java.util.Map waves;
    private final com.google.common.collect.ListMultimap deltas;
    private final java.util.Map versions;
    private org.waveprotocol.wave.model.wave.ParticipantId user;

    public void <init>()
    {
        com.google.common.collect.ArrayListMultimap $r2;
        org.waveprotocol.box.server.frontend.testing.FakeWaveServer r0;
        java.util.HashMap $r1, $r3;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeWaveServer;

        specialinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map waves> = $r1;

        $r2 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();

        r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: com.google.common.collect.ListMultimap deltas> = $r2;

        $r3 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map versions> = $r3;

        r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: org.waveprotocol.wave.model.wave.ParticipantId user> = null;

        return;
    }

    public void openRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdFilter, java.util.Collection, org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)
    {
        com.google.common.collect.ListMultimap $r17;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r7;
        org.waveprotocol.wave.model.id.WaveletId $r15;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, r2, $r3;
        org.waveprotocol.box.common.DeltaSequence $r19;
        java.util.Map $r8, $r20;
        org.waveprotocol.wave.model.id.IdFilter r5;
        org.waveprotocol.wave.model.wave.data.WaveletData r13;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r16;
        org.waveprotocol.wave.model.id.WaveId r4, $r14;
        java.util.Iterator $r11;
        java.util.Collection r6, $r10;
        java.util.List $r18;
        org.waveprotocol.box.server.frontend.testing.FakeWaveServer r0;
        java.lang.Object $r9, $r12;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeWaveServer;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter1: org.waveprotocol.wave.model.id.WaveId;

        r5 := @parameter2: org.waveprotocol.wave.model.id.IdFilter;

        r6 := @parameter3: java.util.Collection;

        r7 := @parameter4: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener;

        $r1 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: org.waveprotocol.wave.model.wave.ParticipantId user>;

        if $r1 != null goto label1;

        r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: org.waveprotocol.wave.model.wave.ParticipantId user> = r2;

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: org.waveprotocol.wave.model.wave.ParticipantId user>;

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Unexpected user");

     label2:
        specialinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: void openRequest(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.IdFilter,java.util.Collection,org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)>(r2, r4, r5, r6, r7);

        $r8 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map waves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r20 = (java.util.Map) $r9;

        if $r20 == null goto label4;

        $r10 = interfaceinvoke $r20.<java.util.Map: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.wave.data.WaveletData) $r12;

        $r14 = interfaceinvoke r13.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r15 = interfaceinvoke r13.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r16 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r14, $r15);

        $r17 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: com.google.common.collect.ListMultimap deltas>;

        $r18 = interfaceinvoke $r17.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>($r16);

        $r19 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence of(java.lang.Iterable)>($r18);

        virtualinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.box.common.DeltaSequence)>(r13, $r19);

        goto label3;

     label4:
        return;
    }

    public void submitRequest(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, java.lang.String, org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r12;
        com.google.common.collect.ListMultimap $r13;
        org.waveprotocol.wave.model.id.WaveletId $r9, $r20;
        long $l1;
        java.util.HashMap $r21;
        org.waveprotocol.wave.model.wave.ParticipantId r1, $r17;
        org.waveprotocol.box.common.DeltaSequence $r15;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta[] $r14;
        java.util.Map $r7, $r23, r25;
        int $i0;
        org.waveprotocol.wave.model.version.HashedVersion $r11, $r18;
        java.lang.String r4, $r16;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener r5;
        org.waveprotocol.wave.model.wave.data.WaveletData $r24, r26;
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.wave.model.id.WaveId $r6, $r22;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r19;
        org.waveprotocol.box.server.frontend.testing.FakeWaveServer r0;
        java.lang.Object $r8, $r10;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeWaveServer;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener;

        specialinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeClientFrontend: void submitRequest(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,java.lang.String,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>(r1, r2, r3, r4, r5);

        $r7 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map waves>;

        $r6 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r25 = (java.util.Map) $r8;

        if r25 != null goto label1;

        $r21 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r25 = $r21;

        $r23 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map waves>;

        $r22 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

     label1:
        $r9 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r10 = interfaceinvoke r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r24 = (org.waveprotocol.wave.model.wave.data.WaveletData) $r10;

        r26 = $r24;

        if $r24 != null goto label2;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r16 = virtualinvoke r3.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r17 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r16);

        $r18 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        $r19 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData createEmptyWavelet(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>(r2, $r17, $r18, $l1);

        r26 = $r19;

        $r20 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        interfaceinvoke r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r19);

     label2:
        $i0 = virtualinvoke r3.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        $r11 = specialinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: org.waveprotocol.wave.model.version.HashedVersion updateAndGetVersion(org.waveprotocol.wave.model.id.WaveletName,int)>(r2, $i0);

        $r12 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,org.waveprotocol.wave.model.version.HashedVersion,long)>(r3, $r11, 0L);

        $r13 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: com.google.common.collect.ListMultimap deltas>;

        interfaceinvoke $r13.<com.google.common.collect.ListMultimap: boolean put(java.lang.Object,java.lang.Object)>(r2, $r12);

        virtualinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: void doSubmitSuccess(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion,long)>(r2, $r11, 0L);

        $r14 = newarray (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)[1];

        $r14[0] = $r12;

        $r15 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence of(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta[])>($r14);

        virtualinvoke r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.box.common.DeltaSequence)>(r26, $r15);

        return;
    }

    private org.waveprotocol.wave.model.version.HashedVersion updateAndGetVersion(org.waveprotocol.wave.model.id.WaveletName, int)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        long $l1, $l2, $l3, $l4;
        org.waveprotocol.box.server.frontend.testing.FakeWaveServer r0;
        java.util.Map $r2, $r4;
        int i0;
        org.waveprotocol.wave.model.version.HashedVersion r5, r6;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.box.server.frontend.testing.FakeWaveServer;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map versions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (org.waveprotocol.wave.model.version.HashedVersion) $r3;

        if r5 == null goto label1;

        $l2 = virtualinvoke r5.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l3 = (long) i0;

        $l4 = $l2 + $l3;

        r6 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>($l4);

        goto label2;

     label1:
        $l1 = (long) i0;

        r6 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>($l1);

     label2:
        $r4 = r0.<org.waveprotocol.box.server.frontend.testing.FakeWaveServer: java.util.Map versions>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        return r6;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.box.server.frontend.testing.FakeWaveServer: long APP_TIMESTAMP> = 0L;

        return;
    }
}
