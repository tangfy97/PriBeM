public class org.apache.batik.extension.svg.BatikFlowTextElementBridge extends org.apache.batik.bridge.SVGTextElementBridge implements org.apache.batik.extension.svg.BatikExtConstants
{
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS;
    public static final java.text.AttributedCharacterIterator$Attribute PREFORMATTED;
    protected static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH;
    protected static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE;
    protected static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING;
    protected static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING;
    protected static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING;

    public void <init>()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        return "http://xml.apache.org/batik/ext";
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        return "flowText";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge $r0, r1;

        r1 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        $r0 = new org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        specialinvoke $r0.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void <init>()>();

        return $r0;
    }

    public boolean isComposite()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        return 0;
    }

    protected org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r1;
        org.apache.batik.extension.svg.FlowExtTextNode $r0;

        r1 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        $r0 = new org.apache.batik.extension.svg.FlowExtTextNode;

        specialinvoke $r0.<org.apache.batik.extension.svg.FlowExtTextNode: void <init>()>();

        return $r0;
    }

    protected java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r1;
        java.awt.geom.Point2D$Float $r0;
        org.w3c.dom.Element r3;
        org.apache.batik.bridge.BridgeContext r2;

        r1 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.awt.geom.Point2D$Float;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        return $r0;
    }

    protected void addContextToChild(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;
        org.apache.batik.extension.svg.BatikFlowTextElementBridge$BatikFlowContentBridge $r8;
        short $s0;
        org.w3c.dom.Node r9;
        java.lang.String $r1, $r3, $r6;
        org.apache.batik.dom.svg.SVGOMElement $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r2, $r5;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z6 == 0 goto label2;

     label1:
        $r7 = (org.apache.batik.dom.svg.SVGOMElement) r2;

        $r8 = new org.apache.batik.extension.svg.BatikFlowTextElementBridge$BatikFlowContentBridge;

        specialinvoke $r8.<org.apache.batik.extension.svg.BatikFlowTextElementBridge$BatikFlowContentBridge: void <init>(org.apache.batik.extension.svg.BatikFlowTextElementBridge,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.SVGTextElementBridge,org.w3c.dom.Element)>(r0, r4, r0, r2);

        virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>($r8);

     label2:
        r9 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r2);

        goto label5;

     label3:
        $s0 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

        $r5 = (org.w3c.dom.Element) r9;

        virtualinvoke r0.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, $r5);

     label4:
        r9 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r9);

     label5:
        if r9 != null goto label3;

        return;
    }

    protected java.text.AttributedString buildAttributedString(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;
        java.util.List $r3;
        org.w3c.dom.Element r2;
        java.text.AttributedCharacterIterator$Attribute $r5;
        org.apache.batik.bridge.BridgeContext r1;
        java.text.AttributedString $r4;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r3 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.util.List getRegions(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        $r4 = virtualinvoke r0.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedString getFlowDiv(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        if $r4 != null goto label1;

        return $r4;

     label1:
        $r5 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS>;

        virtualinvoke $r4.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r5, $r3, 0, 1);

        return $r4;
    }

    protected void addGlyphPositionAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        short $s0, $s1;
        org.w3c.dom.Node r12;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.bridge.BridgeContext r9;
        java.text.AttributedString r8;
        org.w3c.dom.Element r0, $r11;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r8 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r9 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/svg");

        if $z4 != 0 goto label2;

        return;

     label2:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r4 == "flowText" goto label3;

        specialinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r8, r0, r9);

        return;

     label3:
        r12 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label8;

     label4:
        $s1 = interfaceinvoke r12.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 == 1 goto label5;

        goto label7;

     label5:
        $r5 = interfaceinvoke r12.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label6;

        $r10 = "http://www.w3.org/2000/svg";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label6;

        goto label7;

     label6:
        $r11 = (org.w3c.dom.Element) r12;

        $r7 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z2 == 0 goto label7;

        specialinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r8, $r11, r9);

        return;

     label7:
        r12 = interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label8:
        if r12 != null goto label4;

        return;
    }

    protected void addChildGlyphPositionAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        short $s0;
        org.w3c.dom.Node r8;
        java.lang.String $r1, $r3, $r4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.batik.bridge.BridgeContext r6;
        java.text.AttributedString r5;
        org.w3c.dom.Element r0, $r9;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r5 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r6 := @parameter2: org.apache.batik.bridge.BridgeContext;

        r8 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label6;

     label1:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label5;

     label2:
        $r1 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r7 = "http://www.w3.org/2000/svg";

        $z7 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z7 != 0 goto label3;

        goto label5;

     label3:
        $r4 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z5 != 0 goto label4;

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z6 == 0 goto label5;

     label4:
        $r9 = (org.w3c.dom.Element) r8;

        virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void addGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r5, $r9, r6);

     label5:
        r8 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label6:
        if r8 != null goto label1;

        return;
    }

    protected void addPaintAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.gvt.TextNode, org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        org.apache.batik.gvt.TextNode r10;
        short $s0, $s1;
        org.w3c.dom.Node r13;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r12;
        java.text.AttributedString r9;
        org.apache.batik.gvt.text.TextPaintInfo r11;
        org.w3c.dom.Element r0, r7;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r9 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r10 := @parameter2: org.apache.batik.gvt.TextNode;

        r11 := @parameter3: org.apache.batik.gvt.text.TextPaintInfo;

        r12 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/svg");

        if $z3 != 0 goto label2;

        return;

     label2:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r4 == "flowText" goto label3;

        specialinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r9, r0, r10, r11, r12);

        return;

     label3:
        r13 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label8;

     label4:
        $s1 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 == 1 goto label5;

        goto label7;

     label5:
        $r5 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r6 = interfaceinvoke r13.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label6;

        goto label7;

     label6:
        r7 = (org.w3c.dom.Element) r13;

        $r8 = interfaceinvoke r7.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z2 == 0 goto label7;

        specialinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r9, r7, r10, r11, r12);

        return;

     label7:
        r13 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label8:
        if r13 != null goto label4;

        return;
    }

    protected void addChildPaintAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.gvt.TextNode, org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        org.apache.batik.gvt.TextNode r5;
        short $s0;
        org.w3c.dom.Node r10;
        java.lang.String $r1, $r3, $r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.batik.bridge.BridgeContext r7;
        java.text.AttributedString r8;
        org.apache.batik.gvt.text.TextPaintInfo r6, $r12;
        org.w3c.dom.Element r0, $r11;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r8 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r5 := @parameter2: org.apache.batik.gvt.TextNode;

        r6 := @parameter3: org.apache.batik.gvt.text.TextPaintInfo;

        r7 := @parameter4: org.apache.batik.bridge.BridgeContext;

        r10 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label6;

     label1:
        $s0 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label5;

     label2:
        $r1 = interfaceinvoke r10.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r9 = "http://www.w3.org/2000/svg";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z7 != 0 goto label3;

        goto label5;

     label3:
        $r4 = interfaceinvoke r10.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z5 != 0 goto label4;

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z6 == 0 goto label5;

     label4:
        $r11 = (org.w3c.dom.Element) r10;

        $r12 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.text.TextPaintInfo getTextPaintInfo(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>($r11, r5, r6, r7);

        virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void addPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r8, $r11, r5, $r12, r7);

     label5:
        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label6:
        if r10 != null goto label1;

        return;
    }

    protected java.text.AttributedString getFlowDiv(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r1;
        org.apache.batik.bridge.BridgeContext r6;
        java.text.AttributedString $r7;
        short $s0;
        org.w3c.dom.Element r0, r4;
        org.w3c.dom.Node r8;
        java.lang.String $r2, $r3, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r6 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r8 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label4;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        r4 = (org.w3c.dom.Element) r8;

        $r5 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("flowDiv");

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r1.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedString gatherFlowPara(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r6, r4);

        return $r7;

     label4:
        r8 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r8 != null goto label1;

        return null;
    }

    protected java.text.AttributedString gatherFlowPara(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.awt.Color $r1;
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        java.lang.Integer $r13, $r14, $r18, $r24;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r12;
        java.text.AttributedString $r15;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer $r5;
        org.apache.batik.extension.svg.MarginInfo $r26, $r28;
        java.util.ArrayList $r6, $r7, $r8;
        short $s0;
        java.text.AttributedCharacterIterator$Attribute $r20, $r25, $r27;
        org.w3c.dom.Node r30;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        java.lang.String $r9, $r10, $r11;
        java.util.LinkedList $r29, r32;
        java.util.WeakHashMap $r4;
        java.util.Iterator $r16;
        org.apache.batik.gvt.text.TextPaintInfo $r0;
        org.w3c.dom.Element r3, r22, r31;
        java.lang.Object $r17, $r19, $r21, $r23;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r12 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r0.<org.apache.batik.gvt.text.TextPaintInfo: void <init>()>();

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible> = 1;

        $r1 = <java.awt.Color: java.awt.Color black>;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint> = $r1;

        $r4 = r2.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r0);

        $r5 = new org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        specialinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r30 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label05;

     label01:
        $s0 = interfaceinvoke r30.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label04;

        $r9 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r10 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label02;

        goto label04;

     label02:
        r31 = (org.w3c.dom.Element) r30;

        $r11 = interfaceinvoke r31.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("flowPara");

        if $z1 == 0 goto label03;

        virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r12, r31, 1, null, null, $r5, $r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r31);

        $r14 = new java.lang.Integer;

        $i2 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label04;

     label03:
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        if $z2 == 0 goto label04;

        virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r12, r31, 1, null, null, $r5, $r8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r31);

        $r13 = new java.lang.Integer;

        $i1 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r13);

     label04:
        r30 = interfaceinvoke r30.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label05:
        if r30 != null goto label01;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = 0;

        $i3 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i4 = $i3 - 1;

        $r0.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i4;

        $r15 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: java.text.AttributedString toAttributedString()>();

        i7 = 0;

        $r16 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

        goto label08;

     label06:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (java.lang.Integer) $r17;

        $i5 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        if $i5 != i7 goto label07;

        goto label08;

     label07:
        $r20 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r20, $r19, i7, $i5);

        i7 = $i5;

     label08:
        $z3 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label06;

        i8 = 0;

        r32 = null;

        i9 = 0;

        goto label13;

     label09:
        $r21 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i9);

        r22 = (org.w3c.dom.Element) $r21;

        $r23 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i9);

        $r24 = (java.lang.Integer) $r23;

        $i6 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        if i8 != $i6 goto label11;

        if r32 != null goto label10;

        $r29 = new java.util.LinkedList;

        specialinvoke $r29.<java.util.LinkedList: void <init>()>();

        r32 = $r29;

     label10:
        $r28 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.extension.svg.MarginInfo makeMarginInfo(org.w3c.dom.Element)>(r22);

        interfaceinvoke r32.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label12;

     label11:
        $r25 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r26 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.extension.svg.MarginInfo makeMarginInfo(org.w3c.dom.Element)>(r22);

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r25, $r26, i8, $i6);

        if r32 == null goto label12;

        $r27 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH>;

        virtualinvoke $r15.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r27, r32, i8, $i6);

        r32 = null;

     label12:
        i9 = i9 + 1;

        i8 = $i6;

     label13:
        $i10 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i9 < $i10 goto label09;

        return $r15;
    }

    protected java.util.List getRegions(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r2;
        short $s0;
        org.w3c.dom.Node r13;
        int $i1;
        java.lang.String $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.bridge.BridgeContext r9;
        org.w3c.dom.Element r1, r5;
        float f0;

        r2 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r9 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        r13 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label9;

     label1:
        $s0 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label8;

     label2:
        $r3 = virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke r13.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        goto label8;

     label3:
        r5 = (org.w3c.dom.Element) r13;

        $r6 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r7 = "flowRegion";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        goto label8;

     label4:
        f0 = 0.0F;

        $r8 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("vertical-align");

        if $r8 == null goto label7;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 <= 0 goto label7;

        $r10 = "top";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label5;

        f0 = 0.0F;

        goto label7;

     label5:
        $r11 = "middle";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label6;

        f0 = 0.5F;

        goto label7;

     label6:
        $r12 = "bottom";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label7;

        f0 = 1.0F;

     label7:
        virtualinvoke r2.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void gatherRegionInfo(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,float,java.util.List)>(r9, r5, f0, $r0);

     label8:
        r13 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label9:
        if r13 != null goto label1;

        return $r0;
    }

    protected void gatherRegionInfo(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, float, java.util.List)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r1;
        org.apache.batik.parser.UnitProcessor$Context $r7;
        org.apache.batik.bridge.BridgeContext r6;
        org.apache.batik.extension.svg.RegionInfo $r8;
        short $s0;
        java.util.List r9;
        org.w3c.dom.Element r0, r4;
        org.w3c.dom.Node r10;
        float f0;
        java.lang.String $r2, $r3, $r5;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r6 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        f0 := @parameter2: float;

        r9 := @parameter3: java.util.List;

        r10 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r10.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label4;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r10.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        r4 = (org.w3c.dom.Element) r10;

        $r5 = interfaceinvoke r10.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("rect");

        if $z1 == 0 goto label4;

        $r7 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r6, r4);

        $r8 = virtualinvoke r1.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.extension.svg.RegionInfo buildRegion(org.apache.batik.parser.UnitProcessor$Context,org.w3c.dom.Element,float)>($r7, r4, f0);

        if $r8 == null goto label4;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r8);

     label4:
        r10 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r10 != null goto label1;

        return;
    }

    protected org.apache.batik.extension.svg.RegionInfo buildRegion(org.apache.batik.parser.UnitProcessor$Context, org.w3c.dom.Element, float)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r5;
        java.lang.Object[] $r6, $r11;
        byte $b3, $b5;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1, $r2, $r3, $r9;
        org.apache.batik.parser.UnitProcessor$Context r8;
        org.apache.batik.bridge.BridgeException $r4, $r10;
        org.apache.batik.bridge.BridgeContext $r7, $r12;
        org.apache.batik.extension.svg.RegionInfo $r13;
        org.w3c.dom.Element r0;
        float $f0, $f1, f2, f3, f4;

        r5 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r8 := @parameter0: org.apache.batik.parser.UnitProcessor$Context;

        r0 := @parameter1: org.w3c.dom.Element;

        f2 := @parameter2: float;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("x");

        f3 = 0.0F;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        f3 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r1, "x", r8);

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("y");

        f4 = 0.0F;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label2;

        f4 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r2, "y", r8);

     label2:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("width");

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 == 0 goto label3;

        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r3, "width", r8);

        goto label4;

     label3:
        $r4 = new org.apache.batik.bridge.BridgeException;

        $r7 = r5.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "width";

        $r6[1] = $r3;

        specialinvoke $r4.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r7, r0, "attribute.missing", $r6);

        throw $r4;

     label4:
        $b3 = $f0 cmpl 0.0F;

        if $b3 != 0 goto label5;

        return null;

     label5:
        $r9 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("height");

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i4 == 0 goto label6;

        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r9, "height", r8);

        goto label7;

     label6:
        $r10 = new org.apache.batik.bridge.BridgeException;

        $r12 = r5.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "height";

        $r11[1] = $r9;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r12, r0, "attribute.missing", $r11);

        throw $r10;

     label7:
        $b5 = $f1 cmpl 0.0F;

        if $b5 != 0 goto label8;

        return null;

     label8:
        $r13 = new org.apache.batik.extension.svg.RegionInfo;

        specialinvoke $r13.<org.apache.batik.extension.svg.RegionInfo: void <init>(float,float,float,float,float)>(f3, f4, $f0, $f1, f2);

        return $r13;
    }

    protected void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, boolean, java.lang.Integer, java.util.Map, org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer, java.util.List)
    {
        java.awt.Cursor $r27;
        java.lang.Integer r7, r42, $r52;
        java.util.Map r39, r41;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer r4;
        org.apache.batik.bridge.UserAgent $r2, $r25;
        org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener $r56;
        java.awt.font.TextAttribute $r8;
        short $s27;
        java.lang.String $r3, $r10, $r11, $r12, $r13, $r14, $r17, $r20, $r21, $r32, $r33;
        org.apache.batik.dom.events.NodeEventTarget r44;
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r6;
        org.apache.batik.bridge.SVGAElementBridge$AnchorListener $r54;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, z14, $z15;
        java.util.Collection $r36;
        java.util.List r15;
        org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener $r55;
        java.util.HashMap r5, $r40, $r45, $r50, $r51, $r57, $r58;
        org.apache.batik.bridge.SVGAElementBridge$CursorHolder $r53;
        org.w3c.dom.Node r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30;
        java.util.WeakHashMap $r22, $r35, $r47;
        java.util.Iterator $r37;
        org.apache.batik.gvt.text.TextPaintInfo $r24, r46, $r49;
        org.w3c.dom.Element r0, $r16, $r18, $r19, $r34;
        java.lang.Object $r9, $r23, $r38, $r48;

        r6 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        z3 := @parameter2: boolean;

        r7 := @parameter3: java.lang.Integer;

        r39 := @parameter4: java.util.Map;

        r4 := @parameter5: org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        r15 := @parameter6: java.util.List;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r3 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLSpace(org.w3c.dom.Element)>(r0);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        $i0 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if z3 == 0 goto label03;

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = 0;

     label03:
        if $z2 == 0 goto label04;

        $i26 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i26;

     label04:
        if r39 != null goto label05;

        $r50 = new java.util.HashMap;

        $r40 = $r50;

        specialinvoke $r50.<java.util.HashMap: void <init>()>();

        goto label06;

     label05:
        $r51 = new java.util.HashMap;

        $r40 = $r51;

        specialinvoke $r51.<java.util.HashMap: void <init>(java.util.Map)>(r39);

     label06:
        r5 = $r40;

        r41 = virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r0, null, r7, $r40);

        $r8 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        $r9 = interfaceinvoke $r40.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r42 = r7;

        if $r9 == null goto label07;

        r42 = (java.lang.Integer) $r9;

     label07:
        r43 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label30;

     label08:
        if $z2 == 0 goto label09;

        z12 = 0;

        goto label13;

     label09:
        $i1 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i1 != 0 goto label10;

        z12 = 1;

        goto label13;

     label10:
        $i2 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i2 != 32 goto label11;

        $z13 = 1;

        goto label12;

     label11:
        $z13 = 0;

     label12:
        z12 = $z13;

     label13:
        $s27 = interfaceinvoke r43.<org.w3c.dom.Node: short getNodeType()>();

        $i30 = (int) $s27;

        tableswitch($i30)
        {
            case 1: goto label14;
            case 2: goto label29;
            case 3: goto label27;
            case 4: goto label27;
            default: goto label29;
        };

     label14:
        $r12 = virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.lang.String getNamespaceURI()>();

        $r13 = interfaceinvoke r43.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z4 != 0 goto label15;

        $r32 = "http://www.w3.org/2000/svg";

        $r33 = interfaceinvoke r43.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z11 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z11 != 0 goto label15;

        goto label29;

     label15:
        $r34 = (org.w3c.dom.Element) r43;

        $r14 = interfaceinvoke r43.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("flowLine");

        if $z5 == 0 goto label17;

        $i13 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, $r34, 0, r42, r41, r4, r15);

        $r52 = new java.lang.Integer;

        $i14 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        specialinvoke $r52.<java.lang.Integer: void <init>(int)>($i14);

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r52);

        $i15 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i15 == $i13 goto label16;

        r41 = null;

     label16:
        goto label29;

     label17:
        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("flowSpan");

        if $z6 != 0 goto label18;

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z7 == 0 goto label20;

     label18:
        $i5 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, $r34, 0, r42, r41, r4, r15);

        $i6 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i6 == $i5 goto label19;

        r41 = null;

     label19:
        goto label29;

     label20:
        $z8 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z8 == 0 goto label23;

        $z10 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z10 == 0 goto label21;

        r44 = (org.apache.batik.dom.events.NodeEventTarget) $r34;

        $r25 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r53 = new org.apache.batik.bridge.SVGAElementBridge$CursorHolder;

        $r27 = <org.apache.batik.bridge.CursorManager: java.awt.Cursor DEFAULT_CURSOR>;

        specialinvoke $r53.<org.apache.batik.bridge.SVGAElementBridge$CursorHolder: void <init>(java.awt.Cursor)>($r27);

        $r54 = new org.apache.batik.bridge.SVGAElementBridge$AnchorListener;

        specialinvoke $r54.<org.apache.batik.bridge.SVGAElementBridge$AnchorListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r25, $r53);

        interfaceinvoke r44.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "click", $r54, 0, null);

        $r55 = new org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener;

        specialinvoke $r55.<org.apache.batik.bridge.SVGAElementBridge$CursorMouseOverListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r25, $r53);

        interfaceinvoke r44.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseover", $r55, 0, null);

        $r56 = new org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener;

        specialinvoke $r56.<org.apache.batik.bridge.SVGAElementBridge$CursorMouseOutListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r25, $r53);

        interfaceinvoke r44.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseout", $r56, 0, null);

     label21:
        $i11 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer,java.util.List)>(r1, $r34, 0, r42, r41, r4, r15);

        $i12 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i12 == $i11 goto label22;

        r41 = null;

     label22:
        goto label29;

     label23:
        $z9 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z9 == 0 goto label29;

        $r16 = (org.w3c.dom.Element) r43;

        $r17 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>($r16);

        $r18 = (org.w3c.dom.Element) r43;

        $r19 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>($r18, $r17);

        $r20 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.String getElementContent(org.w3c.dom.Element)>($r19);

        $r21 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r20, $z2, z12);

        $i7 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i7 == 0 goto label26;

        $i8 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if r41 != null goto label24;

        $r57 = new java.util.HashMap;

        $r45 = $r57;

        specialinvoke $r57.<java.util.HashMap: void <init>()>();

        goto label25;

     label24:
        $r58 = new java.util.HashMap;

        $r45 = $r58;

        specialinvoke $r58.<java.util.HashMap: void <init>(java.util.Map)>(r41);

     label25:
        virtualinvoke r6.<org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, $r34, null, r7, $r45);

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r21, $r45);

        $i9 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i10 = $i9 - 1;

        $r22 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r23 = virtualinvoke $r22.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r34);

        $r24 = (org.apache.batik.gvt.text.TextPaintInfo) $r23;

        $r24.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i8;

        $r24.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i10;

        r41 = null;

     label26:
        goto label29;

     label27:
        $r10 = interfaceinvoke r43.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r11 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r10, $z2, z12);

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i3 == 0 goto label29;

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r11, r5);

        if $z2 == 0 goto label28;

        $i4 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i4;

     label28:
        r41 = null;

     label29:
        r43 = interfaceinvoke r43.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label30:
        if r43 != null goto label08;

        if z3 == 0 goto label36;

        z14 = 0;

        goto label32;

     label31:
        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void stripLast()>();

        z14 = 1;

     label32:
        $i16 = r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit>;

        $i17 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i16 >= $i17 goto label33;

        $i25 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i25 == 32 goto label31;

     label33:
        if z14 == 0 goto label36;

        $r35 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r36 = virtualinvoke $r35.<java.util.AbstractMap: java.util.Collection values()>();

        $r37 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();

        goto label35;

     label34:
        $r38 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.apache.batik.gvt.text.TextPaintInfo) $r38;

        $i18 = r46.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        $i19 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i18 < $i19 goto label35;

        $i20 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i21 = $i20 - 1;

        r46.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i21;

        $i23 = r46.<org.apache.batik.gvt.text.TextPaintInfo: int startChar>;

        $i22 = r46.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        if $i23 <= $i22 goto label35;

        $i24 = r46.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        r46.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i24;

     label35:
        $z15 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z15 != 0 goto label34;

     label36:
        $i28 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i29 = $i28 - 1;

        $r47 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r48 = virtualinvoke $r47.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r49 = (org.apache.batik.gvt.text.TextPaintInfo) $r48;

        $r49.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i0;

        $r49.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i29;

        return;
    }

    protected java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.text.TextPath, java.lang.Integer, java.util.Map)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r0;
        org.apache.batik.bridge.BridgeContext r1;
        java.lang.Integer r4;
        org.w3c.dom.Element r2;
        java.text.AttributedCharacterIterator$Attribute $r9;
        java.util.Map r5, $r6;
        int $i0;
        java.lang.Boolean $r8;
        org.apache.batik.gvt.text.TextPath r3;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.text.TextPath;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.util.Map;

        $r6 = specialinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r2, r3, r4, r5);

        $r7 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("preformatted");

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $r9 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute PREFORMATTED>;

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8);

     label1:
        return $r6;
    }

    protected void checkMap(java.util.Map)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r6;
        java.util.Map r0;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r6 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r0 := @parameter0: java.util.Map;

        $r1 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        $z1 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING>;

        $z2 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z2 == 0 goto label3;

        return;

     label3:
        $r4 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING>;

        $z3 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z3 == 0 goto label4;

        return;

     label4:
        $r5 = <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING>;

        $z4 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z4 == 0 goto label5;

        return;

     label5:
        return;
    }

    public org.apache.batik.extension.svg.MarginInfo makeMarginInfo(org.w3c.dom.Element)
    {
        org.apache.batik.extension.svg.BatikFlowTextElementBridge r21;
        byte b7;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, f1, f2, f3, f4, f5;
        org.apache.batik.extension.svg.MarginInfo $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        java.lang.NumberFormatException $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.w3c.dom.Element r0;

        r21 := @this: org.apache.batik.extension.svg.BatikFlowTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        f4 = 0.0F;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("margin");

     label01:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label02;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r1);

        f4 = $f0;

        f3 = $f0;

        f2 = $f0;

        f1 = $f0;

     label02:
        goto label04;

     label03:
        $r20 := @caughtexception;

     label04:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("top-margin");

     label05:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label06;

        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

     label08:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("right-margin");

     label09:
        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 == 0 goto label10;

        f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

     label12:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("bottom-margin");

     label13:
        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 == 0 goto label14;

        f3 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

     label16:
        $r5 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("left-margin");

     label17:
        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 == 0 goto label18;

        f4 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

     label18:
        goto label20;

     label19:
        $r16 := @caughtexception;

     label20:
        f5 = 0.0F;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("indent");

     label21:
        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i5 == 0 goto label22;

        f5 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r6);

     label22:
        goto label24;

     label23:
        $r15 := @caughtexception;

     label24:
        b7 = 0;

        $r7 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("justification");

     label25:
        $i6 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i6 == 0 goto label29;

        $r10 = "start";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label26;

        b7 = 0;

        goto label29;

     label26:
        $r11 = "middle";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label27;

        b7 = 1;

        goto label29;

     label27:
        $r12 = "end";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label28;

        b7 = 2;

        goto label29;

     label28:
        $r13 = "full";

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z4 == 0 goto label29;

        b7 = 3;

     label29:
        goto label31;

     label30:
        $r14 := @caughtexception;

     label31:
        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("flowRegionBreak");

        $r9 = new org.apache.batik.extension.svg.MarginInfo;

        specialinvoke $r9.<org.apache.batik.extension.svg.MarginInfo: void <init>(float,float,float,float,float,int,boolean)>(f1, f2, f3, f4, f5, b7, $z0);

        return $r9;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.lang.NumberFormatException from label13 to label14 with label15;
        catch java.lang.NumberFormatException from label17 to label18 with label19;
        catch java.lang.NumberFormatException from label21 to label22 with label23;
        catch java.lang.NumberFormatException from label25 to label29 with label30;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_PARAGRAPH>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH> = $r0;

        $r1 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_EMPTY_PARAGRAPH>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_EMPTY_PARAGRAPH> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_LINE_BREAK>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_REGIONS>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS> = $r3;

        $r4 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PREFORMATTED>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: java.text.AttributedCharacterIterator$Attribute PREFORMATTED> = $r4;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH> = $r5;

        $r6 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE> = $r6;

        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING> = $r7;

        $r8 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING> = $r8;

        $r9 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING>;

        <org.apache.batik.extension.svg.BatikFlowTextElementBridge: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING> = $r9;

        return;
    }
}
