public class org.apache.poi.hslf.record.ExEmbedAtom extends org.apache.poi.hslf.record.RecordAtom
{
    public static final int DOES_NOT_FOLLOW_COLOR_SCHEME;
    public static final int FOLLOWS_ENTIRE_COLOR_SCHEME;
    public static final int FOLLOWS_TEXT_AND_BACKGROUND_SCHEME;
    private byte[] _header;
    private byte[] _data;

    protected void <init>()
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        long $l0;
        short $s2;
        int $i1, $i3;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        specialinvoke r0.<org.apache.poi.hslf.record.RecordAtom: void <init>()>();

        $r1 = newarray (byte)[8];

        r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header> = $r1;

        $r2 = newarray (byte)[8];

        r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data> = $r2;

        $r3 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header>;

        $l0 = virtualinvoke r0.<org.apache.poi.hslf.record.ExEmbedAtom: long getRecordType()>();

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>($r3, 2, $s2);

        $r5 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header>;

        $r4 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $i3 = lengthof $r4;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>($r5, 4, $i3);

        return;
    }

    protected void <init>(byte[], int, int)
    {
        byte[] $r1, r2, $r3, $r4, $r5, $r6, $r10;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.poi.hslf.record.RecordAtom: void <init>()>();

        $r1 = newarray (byte)[8];

        r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header> = $r1;

        $r3 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r3, 0, 8);

        $i2 = i1 - 8;

        $r4 = newarray (byte)[$i2];

        r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data> = $r4;

        $i4 = i0 + 8;

        $r5 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $i3 = i1 - 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i4, $r5, 0, $i3);

        $r6 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $i5 = lengthof $r6;

        if $i5 >= 8 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The length of the data for a ExEmbedAtom must be at least 4 bytes, but was only ");

        $r10 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $i6 = lengthof $r10;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        return;
    }

    public int getFollowColorScheme()
    {
        int $i0;
        byte[] $r1;
        org.apache.poi.hslf.record.ExEmbedAtom r0;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        $r1 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>($r1, 0);

        return $i0;
    }

    public boolean getCantLockServerB()
    {
        byte[] $r1;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        $r1 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $b0 = $r1[4];

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setCantLockServerB(boolean)
    {
        byte[] $r1;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        byte $b0;
        boolean z0, $z1;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        if z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = (byte) $z1;

        $r1[4] = $b0;

        return;
    }

    public boolean getNoSizeToServerB()
    {
        byte[] $r1;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        $r1 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $b0 = $r1[5];

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean getIsTable()
    {
        byte[] $r1;
        org.apache.poi.hslf.record.ExEmbedAtom r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        $r1 = r0.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        $b0 = $r1[6];

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getRecordType()
    {
        org.apache.poi.hslf.record.RecordTypes$Type $r0;
        org.apache.poi.hslf.record.ExEmbedAtom r1;
        int $i0;
        long $l1;

        r1 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        $r0 = <org.apache.poi.hslf.record.RecordTypes: org.apache.poi.hslf.record.RecordTypes$Type ExEmbedAtom>;

        $i0 = $r0.<org.apache.poi.hslf.record.RecordTypes$Type: int typeID>;

        $l1 = (long) $i0;

        return $l1;
    }

    public void writeOut(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2, $r3;
        org.apache.poi.hslf.record.ExEmbedAtom r1;

        r1 := @this: org.apache.poi.hslf.record.ExEmbedAtom;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = r1.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _header>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        $r3 = r1.<org.apache.poi.hslf.record.ExEmbedAtom: byte[] _data>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hslf.record.ExEmbedAtom: int FOLLOWS_TEXT_AND_BACKGROUND_SCHEME> = 2;

        <org.apache.poi.hslf.record.ExEmbedAtom: int FOLLOWS_ENTIRE_COLOR_SCHEME> = 1;

        <org.apache.poi.hslf.record.ExEmbedAtom: int DOES_NOT_FOLLOW_COLOR_SCHEME> = 0;

        return;
    }
}
