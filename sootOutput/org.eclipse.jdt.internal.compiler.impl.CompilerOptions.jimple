public class org.eclipse.jdt.internal.compiler.impl.CompilerOptions extends java.lang.Object
{
    public static final java.lang.String OPTION_LocalVariableAttribute;
    public static final java.lang.String OPTION_LineNumberAttribute;
    public static final java.lang.String OPTION_SourceFileAttribute;
    public static final java.lang.String OPTION_PreserveUnusedLocal;
    public static final java.lang.String OPTION_DocCommentSupport;
    public static final java.lang.String OPTION_ReportMethodWithConstructorName;
    public static final java.lang.String OPTION_ReportOverridingPackageDefaultMethod;
    public static final java.lang.String OPTION_ReportDeprecation;
    public static final java.lang.String OPTION_ReportDeprecationInDeprecatedCode;
    public static final java.lang.String OPTION_ReportDeprecationWhenOverridingDeprecatedMethod;
    public static final java.lang.String OPTION_ReportHiddenCatchBlock;
    public static final java.lang.String OPTION_ReportUnusedLocal;
    public static final java.lang.String OPTION_ReportUnusedParameter;
    public static final java.lang.String OPTION_ReportUnusedParameterWhenImplementingAbstract;
    public static final java.lang.String OPTION_ReportUnusedParameterWhenOverridingConcrete;
    public static final java.lang.String OPTION_ReportUnusedParameterIncludeDocCommentReference;
    public static final java.lang.String OPTION_ReportUnusedImport;
    public static final java.lang.String OPTION_ReportSyntheticAccessEmulation;
    public static final java.lang.String OPTION_ReportNoEffectAssignment;
    public static final java.lang.String OPTION_ReportLocalVariableHiding;
    public static final java.lang.String OPTION_ReportSpecialParameterHidingField;
    public static final java.lang.String OPTION_ReportFieldHiding;
    public static final java.lang.String OPTION_ReportTypeParameterHiding;
    public static final java.lang.String OPTION_ReportPossibleAccidentalBooleanAssignment;
    public static final java.lang.String OPTION_ReportNonExternalizedStringLiteral;
    public static final java.lang.String OPTION_ReportIncompatibleNonInheritedInterfaceMethod;
    public static final java.lang.String OPTION_ReportUnusedPrivateMember;
    public static final java.lang.String OPTION_ReportNoImplicitStringConversion;
    public static final java.lang.String OPTION_ReportAssertIdentifier;
    public static final java.lang.String OPTION_ReportEnumIdentifier;
    public static final java.lang.String OPTION_ReportNonStaticAccessToStatic;
    public static final java.lang.String OPTION_ReportIndirectStaticAccess;
    public static final java.lang.String OPTION_ReportEmptyStatement;
    public static final java.lang.String OPTION_ReportUnnecessaryTypeCheck;
    public static final java.lang.String OPTION_ReportUnnecessaryElse;
    public static final java.lang.String OPTION_ReportUndocumentedEmptyBlock;
    public static final java.lang.String OPTION_ReportInvalidJavadoc;
    public static final java.lang.String OPTION_ReportInvalidJavadocTags;
    public static final java.lang.String OPTION_ReportInvalidJavadocTagsDeprecatedRef;
    public static final java.lang.String OPTION_ReportInvalidJavadocTagsNotVisibleRef;
    public static final java.lang.String OPTION_ReportInvalidJavadocTagsVisibility;
    public static final java.lang.String OPTION_ReportMissingJavadocTags;
    public static final java.lang.String OPTION_ReportMissingJavadocTagsVisibility;
    public static final java.lang.String OPTION_ReportMissingJavadocTagsOverriding;
    public static final java.lang.String OPTION_ReportMissingJavadocComments;
    public static final java.lang.String OPTION_ReportMissingJavadocTagDescription;
    public static final java.lang.String OPTION_ReportMissingJavadocCommentsVisibility;
    public static final java.lang.String OPTION_ReportMissingJavadocCommentsOverriding;
    public static final java.lang.String OPTION_ReportFinallyBlockNotCompletingNormally;
    public static final java.lang.String OPTION_ReportUnusedDeclaredThrownException;
    public static final java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding;
    public static final java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference;
    public static final java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable;
    public static final java.lang.String OPTION_ReportUnqualifiedFieldAccess;
    public static final java.lang.String OPTION_ReportUncheckedTypeOperation;
    public static final java.lang.String OPTION_ReportRawTypeReference;
    public static final java.lang.String OPTION_ReportFinalParameterBound;
    public static final java.lang.String OPTION_ReportMissingSerialVersion;
    public static final java.lang.String OPTION_ReportVarargsArgumentNeedCast;
    public static final java.lang.String OPTION_ReportUnusedTypeArgumentsForMethodInvocation;
    public static final java.lang.String OPTION_Source;
    public static final java.lang.String OPTION_TargetPlatform;
    public static final java.lang.String OPTION_Compliance;
    public static final java.lang.String OPTION_Encoding;
    public static final java.lang.String OPTION_MaxProblemPerUnit;
    public static final java.lang.String OPTION_TaskTags;
    public static final java.lang.String OPTION_TaskPriorities;
    public static final java.lang.String OPTION_TaskCaseSensitive;
    public static final java.lang.String OPTION_InlineJsr;
    public static final java.lang.String OPTION_ReportNullReference;
    public static final java.lang.String OPTION_ReportPotentialNullReference;
    public static final java.lang.String OPTION_ReportRedundantNullCheck;
    public static final java.lang.String OPTION_ReportAutoboxing;
    public static final java.lang.String OPTION_ReportAnnotationSuperInterface;
    public static final java.lang.String OPTION_ReportMissingOverrideAnnotation;
    public static final java.lang.String OPTION_ReportMissingDeprecatedAnnotation;
    public static final java.lang.String OPTION_ReportIncompleteEnumSwitch;
    public static final java.lang.String OPTION_ReportForbiddenReference;
    public static final java.lang.String OPTION_ReportDiscouragedReference;
    public static final java.lang.String OPTION_SuppressWarnings;
    public static final java.lang.String OPTION_ReportUnhandledWarningToken;
    public static final java.lang.String OPTION_ReportUnusedWarningToken;
    public static final java.lang.String OPTION_ReportUnusedLabel;
    public static final java.lang.String OPTION_FatalOptionalError;
    public static final java.lang.String OPTION_ReportParameterAssignment;
    public static final java.lang.String OPTION_ReportFallthroughCase;
    public static final java.lang.String OPTION_ReportOverridingMethodWithoutSuperInvocation;
    public static final java.lang.String OPTION_GenerateClassFiles;
    public static final java.lang.String OPTION_Process_Annotations;
    public static final java.lang.String OPTION_ReportRedundantSuperinterface;
    public static final java.lang.String OPTION_ReportInvalidAnnotation;
    public static final java.lang.String OPTION_ReportMissingAnnotation;
    public static final java.lang.String OPTION_ReportMissingJavadoc;
    public static final java.lang.String GENERATE;
    public static final java.lang.String DO_NOT_GENERATE;
    public static final java.lang.String PRESERVE;
    public static final java.lang.String OPTIMIZE_OUT;
    public static final java.lang.String VERSION_1_1;
    public static final java.lang.String VERSION_1_2;
    public static final java.lang.String VERSION_1_3;
    public static final java.lang.String VERSION_1_4;
    public static final java.lang.String VERSION_JSR14;
    public static final java.lang.String VERSION_CLDC1_1;
    public static final java.lang.String VERSION_1_5;
    public static final java.lang.String VERSION_1_6;
    public static final java.lang.String VERSION_1_7;
    public static final java.lang.String ERROR;
    public static final java.lang.String WARNING;
    public static final java.lang.String IGNORE;
    public static final java.lang.String ENABLED;
    public static final java.lang.String DISABLED;
    public static final java.lang.String PUBLIC;
    public static final java.lang.String PROTECTED;
    public static final java.lang.String DEFAULT;
    public static final java.lang.String PRIVATE;
    public static final java.lang.String RETURN_TAG;
    public static final java.lang.String NO_TAG;
    public static final java.lang.String ALL_STANDARD_TAGS;
    public static final long MethodWithConstructorName;
    public static final long OverriddenPackageDefaultMethod;
    public static final long UsingDeprecatedAPI;
    public static final long MaskedCatchBlock;
    public static final long UnusedLocalVariable;
    public static final long UnusedArgument;
    public static final long NoImplicitStringConversion;
    public static final long AccessEmulation;
    public static final long NonExternalizedString;
    public static final long AssertUsedAsAnIdentifier;
    public static final long UnusedImport;
    public static final long NonStaticAccessToStatic;
    public static final long Task;
    public static final long NoEffectAssignment;
    public static final long IncompatibleNonInheritedInterfaceMethod;
    public static final long UnusedPrivateMember;
    public static final long LocalVariableHiding;
    public static final long FieldHiding;
    public static final long AccidentalBooleanAssign;
    public static final long EmptyStatement;
    public static final long MissingJavadocComments;
    public static final long MissingJavadocTags;
    public static final long UnqualifiedFieldAccess;
    public static final long UnusedDeclaredThrownException;
    public static final long FinallyBlockNotCompleting;
    public static final long InvalidJavadoc;
    public static final long UnnecessaryTypeCheck;
    public static final long UndocumentedEmptyBlock;
    public static final long IndirectStaticAccess;
    public static final long UnnecessaryElse;
    public static final long UncheckedTypeOperation;
    public static final long FinalParameterBound;
    public static final long MissingSerialVersion;
    public static final long EnumUsedAsAnIdentifier;
    public static final long ForbiddenReference;
    public static final long VarargsArgumentNeedCast;
    public static final long NullReference;
    public static final long AutoBoxing;
    public static final long AnnotationSuperInterface;
    public static final long TypeHiding;
    public static final long MissingOverrideAnnotation;
    public static final long IncompleteEnumSwitch;
    public static final long MissingDeprecatedAnnotation;
    public static final long DiscouragedReference;
    public static final long UnhandledWarningToken;
    public static final long RawTypeReference;
    public static final long UnusedLabel;
    public static final long ParameterAssignment;
    public static final long FallthroughCase;
    public static final long OverridingMethodWithoutSuperInvocation;
    public static final long PotentialNullReference;
    public static final long RedundantNullCheck;
    public static final long MissingJavadocTagDescription;
    public static final long UnusedTypeArguments;
    public static final long UnusedWarningToken;
    public static final long RedundantSuperinterface;
    private static java.util.Map OptionToIrritants;
    public long errorThreshold;
    public long warningThreshold;
    public int produceDebugAttributes;
    public long complianceLevel;
    public long sourceLevel;
    public long targetJDK;
    public java.lang.String defaultEncoding;
    public boolean verbose;
    public boolean produceReferenceInfo;
    public boolean preserveAllLocalVariables;
    public boolean parseLiteralExpressionsAsConstants;
    public int maxProblemsPerUnit;
    public char[][] taskTags;
    public char[][] taskPriorites;
    public boolean isTaskCaseSensitive;
    public boolean reportDeprecationInsideDeprecatedCode;
    public boolean reportDeprecationWhenOverridingDeprecatedMethod;
    public boolean reportUnusedParameterWhenImplementingAbstract;
    public boolean reportUnusedParameterWhenOverridingConcrete;
    public boolean reportUnusedParameterIncludeDocCommentReference;
    public boolean reportUnusedDeclaredThrownExceptionWhenOverriding;
    public boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference;
    public boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable;
    public boolean reportSpecialParameterHidingField;
    public int reportInvalidJavadocTagsVisibility;
    public boolean reportInvalidJavadocTags;
    public boolean reportInvalidJavadocTagsDeprecatedRef;
    public boolean reportInvalidJavadocTagsNotVisibleRef;
    public java.lang.String reportMissingJavadocTagDescription;
    public int reportMissingJavadocTagsVisibility;
    public boolean reportMissingJavadocTagsOverriding;
    public int reportMissingJavadocCommentsVisibility;
    public boolean reportMissingJavadocCommentsOverriding;
    public boolean inlineJsrBytecode;
    public boolean docCommentSupport;
    public boolean suppressWarnings;
    public boolean treatOptionalErrorAsFatal;
    public boolean performMethodsFullRecovery;
    public boolean performStatementsRecovery;
    public boolean storeAnnotations;
    public boolean generateClassFiles;
    public boolean processAnnotations;
    public static final java.lang.String[] warningTokens;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long RedundantSuperinterface> = 36028797018963968L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedWarningToken> = 18014398509481984L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedTypeArguments> = 9007199254740992L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingJavadocTagDescription> = 4503599627370496L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long RedundantNullCheck> = 2251799813685248L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long PotentialNullReference> = 1125899906842624L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long OverridingMethodWithoutSuperInvocation> = 562949953421312L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long FallthroughCase> = 281474976710656L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long ParameterAssignment> = 140737488355328L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedLabel> = 70368744177664L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long RawTypeReference> = 35184372088832L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnhandledWarningToken> = 17592186044416L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long DiscouragedReference> = 8796093022208L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingDeprecatedAnnotation> = 4398046511104L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long IncompleteEnumSwitch> = 2199023255552L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingOverrideAnnotation> = 1099511627776L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long TypeHiding> = 549755813888L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long AnnotationSuperInterface> = 274877906944L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long AutoBoxing> = 137438953472L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long NullReference> = 68719476736L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long VarargsArgumentNeedCast> = 34359738368L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long ForbiddenReference> = 17179869184L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long EnumUsedAsAnIdentifier> = 8589934592L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingSerialVersion> = 4294967296L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long FinalParameterBound> = 2147483648L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UncheckedTypeOperation> = 1073741824L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnnecessaryElse> = 536870912L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long IndirectStaticAccess> = 268435456L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UndocumentedEmptyBlock> = 134217728L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnnecessaryTypeCheck> = 67108864L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long InvalidJavadoc> = 33554432L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long FinallyBlockNotCompleting> = 16777216L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedDeclaredThrownException> = 8388608L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnqualifiedFieldAccess> = 4194304L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingJavadocTags> = 2097152L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MissingJavadocComments> = 1048576L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long EmptyStatement> = 524288L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long AccidentalBooleanAssign> = 262144L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long FieldHiding> = 131072L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long LocalVariableHiding> = 65536L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedPrivateMember> = 32768L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long IncompatibleNonInheritedInterfaceMethod> = 16384L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long NoEffectAssignment> = 8192L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long Task> = 4096L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long NonStaticAccessToStatic> = 2048L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedImport> = 1024L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long AssertUsedAsAnIdentifier> = 512L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long NonExternalizedString> = 256L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long AccessEmulation> = 128L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long NoImplicitStringConversion> = 64L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedArgument> = 32L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UnusedLocalVariable> = 16L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MaskedCatchBlock> = 8L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long UsingDeprecatedAPI> = 4L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long OverriddenPackageDefaultMethod> = 2L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long MethodWithConstructorName> = 1L;

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String ALL_STANDARD_TAGS> = "all_standard_tags";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String NO_TAG> = "no_tag";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String RETURN_TAG> = "return_tag";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String PRIVATE> = "private";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String DEFAULT> = "default";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String PROTECTED> = "protected";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String PUBLIC> = "public";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String DISABLED> = "disabled";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String ENABLED> = "enabled";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String IGNORE> = "ignore";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String WARNING> = "warning";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String ERROR> = "error";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_7> = "1.7";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_6> = "1.6";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_5> = "1.5";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_CLDC1_1> = "cldc1.1";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_JSR14> = "jsr14";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_4> = "1.4";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_3> = "1.3";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_2> = "1.2";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String VERSION_1_1> = "1.1";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTIMIZE_OUT> = "optimize out";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String PRESERVE> = "preserve";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String DO_NOT_GENERATE> = "do not generate";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String GENERATE> = "generate";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadoc> = "org.eclipse.jdt.core.compiler.problem.missingJavadoc";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingAnnotation> = "org.eclipse.jdt.core.compiler.problem.missingAnnotation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidAnnotation> = "org.eclipse.jdt.core.compiler.problem.invalidAnnotation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportRedundantSuperinterface> = "org.eclipse.jdt.core.compiler.problem.redundantSuperinterface";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_Process_Annotations> = "org.eclipse.jdt.core.compiler.processAnnotations";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_GenerateClassFiles> = "org.eclipse.jdt.core.compiler.generateClassFiles";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportOverridingMethodWithoutSuperInvocation> = "org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportFallthroughCase> = "org.eclipse.jdt.core.compiler.problem.fallthroughCase";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportParameterAssignment> = "org.eclipse.jdt.core.compiler.problem.parameterAssignment";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_FatalOptionalError> = "org.eclipse.jdt.core.compiler.problem.fatalOptionalError";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedLabel> = "org.eclipse.jdt.core.compiler.problem.unusedLabel";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedWarningToken> = "org.eclipse.jdt.core.compiler.problem.unusedWarningToken";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnhandledWarningToken> = "org.eclipse.jdt.core.compiler.problem.unhandledWarningToken";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_SuppressWarnings> = "org.eclipse.jdt.core.compiler.problem.suppressWarnings";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportDiscouragedReference> = "org.eclipse.jdt.core.compiler.problem.discouragedReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportForbiddenReference> = "org.eclipse.jdt.core.compiler.problem.forbiddenReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportIncompleteEnumSwitch> = "org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingDeprecatedAnnotation> = "org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingOverrideAnnotation> = "org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportAnnotationSuperInterface> = "org.eclipse.jdt.core.compiler.problem.annotationSuperInterface";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportAutoboxing> = "org.eclipse.jdt.core.compiler.problem.autoboxing";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportRedundantNullCheck> = "org.eclipse.jdt.core.compiler.problem.redundantNullCheck";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportPotentialNullReference> = "org.eclipse.jdt.core.compiler.problem.potentialNullReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportNullReference> = "org.eclipse.jdt.core.compiler.problem.nullReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_InlineJsr> = "org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_TaskCaseSensitive> = "org.eclipse.jdt.core.compiler.taskCaseSensitive";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_TaskPriorities> = "org.eclipse.jdt.core.compiler.taskPriorities";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_TaskTags> = "org.eclipse.jdt.core.compiler.taskTags";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_MaxProblemPerUnit> = "org.eclipse.jdt.core.compiler.maxProblemPerUnit";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_Encoding> = "org.eclipse.jdt.core.encoding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_Compliance> = "org.eclipse.jdt.core.compiler.compliance";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_TargetPlatform> = "org.eclipse.jdt.core.compiler.codegen.targetPlatform";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_Source> = "org.eclipse.jdt.core.compiler.source";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedTypeArgumentsForMethodInvocation> = "org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportVarargsArgumentNeedCast> = "org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingSerialVersion> = "org.eclipse.jdt.core.compiler.problem.missingSerialVersion";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportFinalParameterBound> = "org.eclipse.jdt.core.compiler.problem.finalParameterBound";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportRawTypeReference> = "org.eclipse.jdt.core.compiler.problem.rawTypeReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUncheckedTypeOperation> = "org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnqualifiedFieldAccess> = "org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable> = "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference> = "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding> = "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedDeclaredThrownException> = "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportFinallyBlockNotCompletingNormally> = "org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocCommentsOverriding> = "org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocCommentsVisibility> = "org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocTagDescription> = "org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocComments> = "org.eclipse.jdt.core.compiler.problem.missingJavadocComments";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocTagsOverriding> = "org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocTagsVisibility> = "org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMissingJavadocTags> = "org.eclipse.jdt.core.compiler.problem.missingJavadocTags";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidJavadocTagsVisibility> = "org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidJavadocTagsNotVisibleRef> = "org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidJavadocTagsDeprecatedRef> = "org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidJavadocTags> = "org.eclipse.jdt.core.compiler.problem.invalidJavadocTags";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportInvalidJavadoc> = "org.eclipse.jdt.core.compiler.problem.invalidJavadoc";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUndocumentedEmptyBlock> = "org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnnecessaryElse> = "org.eclipse.jdt.core.compiler.problem.unnecessaryElse";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnnecessaryTypeCheck> = "org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportEmptyStatement> = "org.eclipse.jdt.core.compiler.problem.emptyStatement";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportIndirectStaticAccess> = "org.eclipse.jdt.core.compiler.problem.indirectStaticAccess";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportNonStaticAccessToStatic> = "org.eclipse.jdt.core.compiler.problem.staticAccessReceiver";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportEnumIdentifier> = "org.eclipse.jdt.core.compiler.problem.enumIdentifier";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportAssertIdentifier> = "org.eclipse.jdt.core.compiler.problem.assertIdentifier";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportNoImplicitStringConversion> = "org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedPrivateMember> = "org.eclipse.jdt.core.compiler.problem.unusedPrivateMember";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportIncompatibleNonInheritedInterfaceMethod> = "org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportNonExternalizedStringLiteral> = "org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportPossibleAccidentalBooleanAssignment> = "org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportTypeParameterHiding> = "org.eclipse.jdt.core.compiler.problem.typeParameterHiding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportFieldHiding> = "org.eclipse.jdt.core.compiler.problem.fieldHiding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportSpecialParameterHidingField> = "org.eclipse.jdt.core.compiler.problem.specialParameterHidingField";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportLocalVariableHiding> = "org.eclipse.jdt.core.compiler.problem.localVariableHiding";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportNoEffectAssignment> = "org.eclipse.jdt.core.compiler.problem.noEffectAssignment";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportSyntheticAccessEmulation> = "org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedImport> = "org.eclipse.jdt.core.compiler.problem.unusedImport";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedParameterIncludeDocCommentReference> = "org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedParameterWhenOverridingConcrete> = "org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedParameterWhenImplementingAbstract> = "org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedParameter> = "org.eclipse.jdt.core.compiler.problem.unusedParameter";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportUnusedLocal> = "org.eclipse.jdt.core.compiler.problem.unusedLocal";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportHiddenCatchBlock> = "org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportDeprecationWhenOverridingDeprecatedMethod> = "org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportDeprecationInDeprecatedCode> = "org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportDeprecation> = "org.eclipse.jdt.core.compiler.problem.deprecation";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportOverridingPackageDefaultMethod> = "org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_ReportMethodWithConstructorName> = "org.eclipse.jdt.core.compiler.problem.methodWithConstructorName";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_DocCommentSupport> = "org.eclipse.jdt.core.compiler.doc.comment.support";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_PreserveUnusedLocal> = "org.eclipse.jdt.core.compiler.codegen.unusedLocal";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_SourceFileAttribute> = "org.eclipse.jdt.core.compiler.debug.sourceFile";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_LineNumberAttribute> = "org.eclipse.jdt.core.compiler.debug.lineNumber";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String OPTION_LocalVariableAttribute> = "org.eclipse.jdt.core.compiler.debug.localVariable";

        $r0 = newarray (java.lang.String)[19];

        $r0[0] = "all";

        $r0[1] = "boxing";

        $r0[2] = "cast";

        $r0[3] = "dep-ann";

        $r0[4] = "deprecation";

        $r0[5] = "fallthrough";

        $r0[6] = "finally";

        $r0[7] = "hiding";

        $r0[8] = "incomplete-switch";

        $r0[9] = "nls";

        $r0[10] = "null";

        $r0[11] = "restriction";

        $r0[12] = "serial";

        $r0[13] = "static-access";

        $r0[14] = "super";

        $r0[15] = "synthetic-access";

        $r0[16] = "unchecked";

        $r0[17] = "unqualified-field-access";

        $r0[18] = "unused";

        <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String[] warningTokens> = $r0;

        return;
    }

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold> = 0L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold> = 27154500175326815L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = 3;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel> = 3145728L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel> = 3080192L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK> = 3014656L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding> = null;

        $z0 = <org.eclipse.jdt.internal.compiler.Compiler: boolean DEBUG>;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose> = $z0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean produceReferenceInfo> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean parseLiteralExpressionsAsConstants> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit> = 100;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags> = null;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites> = null;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String reportMissingJavadocTagDescription> = "return_tag";

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean storeAnnotations> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations> = 0;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;
        boolean $z0;
        java.util.Map r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold> = 0L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold> = 27154500175326815L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = 3;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel> = 3145728L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel> = 3080192L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK> = 3014656L;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding> = null;

        $z0 = <org.eclipse.jdt.internal.compiler.Compiler: boolean DEBUG>;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose> = $z0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean produceReferenceInfo> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean parseLiteralExpressionsAsConstants> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit> = 100;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags> = null;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites> = null;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String reportMissingJavadocTagDescription> = "return_tag";

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean storeAnnotations> = 0;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles> = 1;

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations> = 0;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void set(java.util.Map)>(r1);

        return;
    }

    public void <init>(java.util.Map, boolean)
    {
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;
        java.util.Map r1;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean parseLiteralExpressionsAsConstants> = z0;

        return;
    }

    public java.util.Map getMap()
    {
        long $l9, $l10, $l11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12;
        char[][] $r56, $r57, $r59, $r60;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99;
        char[] $r58, $r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.util.HashMap $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(30);

        $i0 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label01;

        $r73 = "generate";

        goto label02;

     label01:
        $r73 = "do not generate";

     label02:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", $r73);

        $i2 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label03;

        $r74 = "generate";

        goto label04;

     label03:
        $r74 = "do not generate";

     label04:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", $r74);

        $i4 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label05;

        $r75 = "generate";

        goto label06;

     label05:
        $r75 = "do not generate";

     label06:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", $r75);

        $z0 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables>;

        if $z0 == 0 goto label07;

        $r76 = "preserve";

        goto label08;

     label07:
        $r76 = "optimize out";

     label08:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.unusedLocal", $r76);

        $z1 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport>;

        if $z1 == 0 goto label09;

        $r77 = "enabled";

        goto label10;

     label09:
        $r77 = "disabled";

     label10:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.doc.comment.support", $r77);

        $r2 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName", $r2);

        $r3 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod", $r3);

        $r4 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", $r4);

        $z2 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode>;

        if $z2 == 0 goto label11;

        $r78 = "enabled";

        goto label12;

     label11:
        $r78 = "disabled";

     label12:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", $r78);

        $z3 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod>;

        if $z3 == 0 goto label13;

        $r79 = "enabled";

        goto label14;

     label13:
        $r79 = "disabled";

     label14:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", $r79);

        $r5 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", $r5);

        $r6 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLocal", $r6);

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(32L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameter", $r7);

        $r8 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1024L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedImport", $r8);

        $r9 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(128L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation", $r9);

        $r10 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8192L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noEffectAssignment", $r10);

        $r11 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(256L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral", $r11);

        $r12 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(64L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion", $r12);

        $r13 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2048L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver", $r13);

        $r14 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(268435456L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess", $r14);

        $r15 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16384L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod", $r15);

        $r16 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(32768L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember", $r16);

        $r17 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(65536L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.localVariableHiding", $r17);

        $r18 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(131072L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fieldHiding", $r18);

        $r19 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(549755813888L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", $r19);

        $r20 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(262144L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment", $r20);

        $r21 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(524288L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.emptyStatement", $r21);

        $r22 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(512L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.assertIdentifier", $r22);

        $r23 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8589934592L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.enumIdentifier", $r23);

        $r24 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(134217728L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock", $r24);

        $r25 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(67108864L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck", $r25);

        $r26 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(536870912L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryElse", $r26);

        $r27 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(137438953472L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.autoboxing", $r27);

        $r28 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(274877906944L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.annotationSuperInterface", $r28);

        $r29 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2199023255552L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch", $r29);

        $r30 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(33554432L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadoc", $r30);

        $i6 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility>;

        $r31 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i6);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility", $r31);

        $z4 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags>;

        if $z4 == 0 goto label15;

        $r80 = "enabled";

        goto label16;

     label15:
        $r80 = "disabled";

     label16:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTags", $r80);

        $z5 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef>;

        if $z5 == 0 goto label17;

        $r81 = "enabled";

        goto label18;

     label17:
        $r81 = "disabled";

     label18:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef", $r81);

        $z6 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef>;

        if $z6 == 0 goto label19;

        $r82 = "enabled";

        goto label20;

     label19:
        $r82 = "disabled";

     label20:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef", $r82);

        $r32 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2097152L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTags", $r32);

        $i7 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility>;

        $r33 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i7);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility", $r33);

        $z7 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding>;

        if $z7 == 0 goto label21;

        $r83 = "enabled";

        goto label22;

     label21:
        $r83 = "disabled";

     label22:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding", $r83);

        $r34 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1048576L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocComments", $r34);

        $r35 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String reportMissingJavadocTagDescription>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription", $r35);

        $i8 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility>;

        $r36 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility", $r36);

        $z8 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding>;

        if $z8 == 0 goto label23;

        $r84 = "enabled";

        goto label24;

     label23:
        $r84 = "disabled";

     label24:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding", $r84);

        $r37 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16777216L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally", $r37);

        $r38 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8388608L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException", $r38);

        $z9 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding>;

        if $z9 == 0 goto label25;

        $r85 = "enabled";

        goto label26;

     label25:
        $r85 = "disabled";

     label26:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding", $r85);

        $z10 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference>;

        if $z10 == 0 goto label27;

        $r86 = "enabled";

        goto label28;

     label27:
        $r86 = "disabled";

     label28:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference", $r86);

        $z11 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable>;

        if $z11 == 0 goto label29;

        $r87 = "enabled";

        goto label30;

     label29:
        $r87 = "disabled";

     label30:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable", $r87);

        $r39 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4194304L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess", $r39);

        $r40 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1073741824L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation", $r40);

        $r41 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(35184372088832L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.rawTypeReference", $r41);

        $r42 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2147483648L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finalParameterBound", $r42);

        $r43 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4294967296L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingSerialVersion", $r43);

        $r44 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(17179869184L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.forbiddenReference", $r44);

        $r45 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8796093022208L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.discouragedReference", $r45);

        $r46 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(34359738368L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast", $r46);

        $r47 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1099511627776L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation", $r47);

        $r48 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4398046511104L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation", $r48);

        $r49 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2199023255552L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch", $r49);

        $r50 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(70368744177664L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLabel", $r50);

        $r51 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(9007199254740992L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation", $r51);

        $l9 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $r52 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l9);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", $r52);

        $l10 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $r53 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l10);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", $r53);

        $l11 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK>;

        $r54 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l11);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", $r54);

        $z12 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal>;

        if $z12 == 0 goto label31;

        $r88 = "enabled";

        goto label32;

     label31:
        $r88 = "disabled";

     label32:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fatalOptionalError", $r88);

        $r55 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        if $r55 == null goto label33;

        $r72 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.encoding", $r72);

     label33:
        $r56 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        if $r56 != null goto label34;

        $r89 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        goto label35;

     label34:
        $r89 = new java.lang.String;

        $r57 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        $r58 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r57, 44);

        specialinvoke $r89.<java.lang.String: void <init>(char[])>($r58);

     label35:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskTags", $r89);

        $r59 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        if $r59 != null goto label36;

        $r90 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        goto label37;

     label36:
        $r90 = new java.lang.String;

        $r60 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        $r61 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r60, 44);

        specialinvoke $r90.<java.lang.String: void <init>(char[])>($r61);

     label37:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskPriorities", $r90);

        $z13 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive>;

        if $z13 == 0 goto label38;

        $r91 = "enabled";

        goto label39;

     label38:
        $r91 = "disabled";

     label39:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskCaseSensitive", $r91);

        $z14 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract>;

        if $z14 == 0 goto label40;

        $r92 = "enabled";

        goto label41;

     label40:
        $r92 = "disabled";

     label41:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract", $r92);

        $z15 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete>;

        if $z15 == 0 goto label42;

        $r93 = "enabled";

        goto label43;

     label42:
        $r93 = "disabled";

     label43:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete", $r93);

        $z16 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference>;

        if $z16 == 0 goto label44;

        $r94 = "enabled";

        goto label45;

     label44:
        $r94 = "disabled";

     label45:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference", $r94);

        $z17 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField>;

        if $z17 == 0 goto label46;

        $r95 = "enabled";

        goto label47;

     label46:
        $r95 = "disabled";

     label47:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.specialParameterHidingField", $r95);

        $i12 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit>;

        $r62 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i12);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.maxProblemPerUnit", $r62);

        $z18 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode>;

        if $z18 == 0 goto label48;

        $r96 = "enabled";

        goto label49;

     label48:
        $r96 = "disabled";

     label49:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode", $r96);

        $r63 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(68719476736L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference", $r63);

        $r64 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1125899906842624L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.potentialNullReference", $r64);

        $r65 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2251799813685248L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", $r65);

        $z19 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings>;

        if $z19 == 0 goto label50;

        $r97 = "enabled";

        goto label51;

     label50:
        $r97 = "disabled";

     label51:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.suppressWarnings", $r97);

        $r66 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(17592186044416L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unhandledWarningToken", $r66);

        $r67 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(18014398509481984L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedWarningToken", $r67);

        $r68 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(140737488355328L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.parameterAssignment", $r68);

        $r69 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(281474976710656L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fallthroughCase", $r69);

        $r70 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(562949953421312L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation", $r70);

        $z20 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles>;

        if $z20 == 0 goto label52;

        $r98 = "enabled";

        goto label53;

     label52:
        $r98 = "disabled";

     label53:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.generateClassFiles", $r98);

        $z21 = r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations>;

        if $z21 == 0 goto label54;

        $r99 = "enabled";

        goto label55;

     label54:
        $r99 = "disabled";

     label55:
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.processAnnotations", $r99);

        $r71 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(36028797018963968L);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantSuperinterface", $r71);

        return $r0;
    }

    public static java.lang.String optionKeyFromIrritant(long)
    {
        byte $b2;
        int i4, i5;
        long l0, $l1, $l3;

        l0 := @parameter0: long;

        i4 = (int) l0;

        $l1 = (long) i4;

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label34;

        lookupswitch(i4)
        {
            case -2147483648: goto label32;
            case 1: goto label01;
            case 2: goto label02;
            case 4: goto label03;
            case 8: goto label04;
            case 16: goto label05;
            case 32: goto label06;
            case 64: goto label07;
            case 128: goto label08;
            case 256: goto label09;
            case 512: goto label10;
            case 1024: goto label11;
            case 2048: goto label12;
            case 4096: goto label13;
            case 8192: goto label14;
            case 16384: goto label15;
            case 32768: goto label16;
            case 65536: goto label17;
            case 131072: goto label18;
            case 262144: goto label19;
            case 524288: goto label20;
            case 1048576: goto label21;
            case 2097152: goto label22;
            case 4194304: goto label23;
            case 8388608: goto label24;
            case 16777216: goto label25;
            case 33554432: goto label26;
            case 33554436: goto label03;
            case 67108864: goto label27;
            case 134217728: goto label28;
            case 268435456: goto label29;
            case 536870912: goto label30;
            case 1073741824: goto label31;
            default: goto label33;
        };

     label01:
        return "org.eclipse.jdt.core.compiler.problem.methodWithConstructorName";

     label02:
        return "org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod";

     label03:
        return "org.eclipse.jdt.core.compiler.problem.deprecation";

     label04:
        return "org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock";

     label05:
        return "org.eclipse.jdt.core.compiler.problem.unusedLocal";

     label06:
        return "org.eclipse.jdt.core.compiler.problem.unusedParameter";

     label07:
        return "org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion";

     label08:
        return "org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation";

     label09:
        return "org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral";

     label10:
        return "org.eclipse.jdt.core.compiler.problem.assertIdentifier";

     label11:
        return "org.eclipse.jdt.core.compiler.problem.unusedImport";

     label12:
        return "org.eclipse.jdt.core.compiler.problem.staticAccessReceiver";

     label13:
        return "org.eclipse.jdt.core.compiler.taskTags";

     label14:
        return "org.eclipse.jdt.core.compiler.problem.noEffectAssignment";

     label15:
        return "org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod";

     label16:
        return "org.eclipse.jdt.core.compiler.problem.unusedPrivateMember";

     label17:
        return "org.eclipse.jdt.core.compiler.problem.localVariableHiding";

     label18:
        return "org.eclipse.jdt.core.compiler.problem.fieldHiding";

     label19:
        return "org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment";

     label20:
        return "org.eclipse.jdt.core.compiler.problem.emptyStatement";

     label21:
        return "org.eclipse.jdt.core.compiler.problem.missingJavadocComments";

     label22:
        return "org.eclipse.jdt.core.compiler.problem.missingJavadocTags";

     label23:
        return "org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess";

     label24:
        return "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding";

     label25:
        return "org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally";

     label26:
        return "org.eclipse.jdt.core.compiler.problem.invalidJavadoc";

     label27:
        return "org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck";

     label28:
        return "org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock";

     label29:
        return "org.eclipse.jdt.core.compiler.problem.indirectStaticAccess";

     label30:
        return "org.eclipse.jdt.core.compiler.problem.unnecessaryElse";

     label31:
        return "org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation";

     label32:
        return "org.eclipse.jdt.core.compiler.problem.finalParameterBound";

     label33:
        goto label59;

     label34:
        $l3 = l0 >>> 32;

        i5 = (int) $l3;

        lookupswitch(i5)
        {
            case 1: goto label35;
            case 2: goto label36;
            case 4: goto label37;
            case 8: goto label38;
            case 16: goto label39;
            case 32: goto label42;
            case 64: goto label43;
            case 128: goto label44;
            case 256: goto label45;
            case 512: goto label46;
            case 1024: goto label47;
            case 2048: goto label48;
            case 4096: goto label49;
            case 8192: goto label50;
            case 16384: goto label51;
            case 32768: goto label52;
            case 65536: goto label53;
            case 131072: goto label54;
            case 262144: goto label40;
            case 524288: goto label41;
            case 1048576: goto label55;
            case 2097152: goto label56;
            case 4194304: goto label57;
            case 8388608: goto label58;
            default: goto label59;
        };

     label35:
        return "org.eclipse.jdt.core.compiler.problem.missingSerialVersion";

     label36:
        return "org.eclipse.jdt.core.compiler.problem.enumIdentifier";

     label37:
        return "org.eclipse.jdt.core.compiler.problem.forbiddenReference";

     label38:
        return "org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast";

     label39:
        return "org.eclipse.jdt.core.compiler.problem.nullReference";

     label40:
        return "org.eclipse.jdt.core.compiler.problem.potentialNullReference";

     label41:
        return "org.eclipse.jdt.core.compiler.problem.redundantNullCheck";

     label42:
        return "org.eclipse.jdt.core.compiler.problem.autoboxing";

     label43:
        return "org.eclipse.jdt.core.compiler.problem.annotationSuperInterface";

     label44:
        return "org.eclipse.jdt.core.compiler.problem.typeParameterHiding";

     label45:
        return "org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation";

     label46:
        return "org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch";

     label47:
        return "org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation";

     label48:
        return "org.eclipse.jdt.core.compiler.problem.discouragedReference";

     label49:
        return "org.eclipse.jdt.core.compiler.problem.unhandledWarningToken";

     label50:
        return "org.eclipse.jdt.core.compiler.problem.rawTypeReference";

     label51:
        return "org.eclipse.jdt.core.compiler.problem.unusedLabel";

     label52:
        return "org.eclipse.jdt.core.compiler.problem.parameterAssignment";

     label53:
        return "org.eclipse.jdt.core.compiler.problem.fallthroughCase";

     label54:
        return "org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation";

     label55:
        return "org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription";

     label56:
        return "org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation";

     label57:
        return "org.eclipse.jdt.core.compiler.problem.unusedWarningToken";

     label58:
        return "org.eclipse.jdt.core.compiler.problem.redundantSuperinterface";

     label59:
        return null;
    }

    public static long optionKeyToIrritant(java.lang.String)
    {
        long l0, $l2;
        java.lang.Long $r5, $r7;
        java.util.Map $r0, $r2, $r6;
        int i1;
        java.lang.Object $r3;
        java.lang.String r1, $r4;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.util.Map OptionToIrritants>;

        if $r0 != null goto label5;

        l0 = 0L;

        i1 = 0;

        goto label4;

     label1:
        l0 = l0 << 1;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String optionKeyFromIrritant(long)>(l0);

        if $r4 != null goto label2;

        goto label3;

     label2:
        $r6 = <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.util.Map OptionToIrritants>;

        $r5 = new java.lang.Long;

        specialinvoke $r5.<java.lang.Long: void <init>(long)>(l0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < 64 goto label1;

     label5:
        $r2 = <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.util.Map OptionToIrritants>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.Long) $r3;

        if $r7 != null goto label6;

        $l2 = 0L;

        goto label7;

     label6:
        $l2 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

     label7:
        return $l2;
    }

    public int getSeverity(long)
    {
        long l0, $l1, $l2, $l4, $l5, $l7;
        short $s9;
        byte $b3, $b6, $b8;
        int $i11;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        l0 := @parameter0: long;

        $l1 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold>;

        $l2 = $l1 & l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label4;

        $l7 = l0 & 18014398509481984L;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label1;

        return 33;

     label1:
        $z0 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal>;

        if $z0 == 0 goto label2;

        $s9 = 161;

        goto label3;

     label2:
        $s9 = 33;

     label3:
        return $s9;

     label4:
        $l4 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold>;

        $l5 = $l4 & l0;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label5;

        return 32;

     label5:
        $i11 = (int) -1;

        return $i11;
    }

    public java.lang.String getSeverityString(long)
    {
        long l0, $l1, $l2, $l4, $l5;
        byte $b3, $b6;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        l0 := @parameter0: long;

        $l1 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold>;

        $l2 = $l1 & l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        return "error";

     label1:
        $l4 = r0.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold>;

        $l5 = $l4 & l0;

        $b6 = $l5 cmp 0L;

        if $b6 == 0 goto label2;

        return "warning";

     label2:
        return "ignore";
    }

    public java.lang.String getVisibilityString(int)
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        i0 := @parameter0: int;

        $i1 = i0 & 7;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label2;
            default: goto label4;
        };

     label1:
        return "public";

     label2:
        return "protected";

     label3:
        return "private";

     label4:
        return "default";
    }

    public void set(java.util.Map)
    {
        java.io.ByteArrayInputStream $r168;
        int $i2, $i3, $i4, $i5, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i29, $i31, $i32, $i33;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r59;
        java.lang.String $r57, $r58, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, r142, r148, r150, r152;
        char[] $r95, $r97;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65;
        java.io.UnsupportedEncodingException $r129;
        byte[] $r108;
        byte $b1, $b7, $b9, $b11, $b13;
        java.util.Map r0;
        long $l0, $l6, $l8, $l10, $l12;
        java.io.InputStreamReader $r169;
        java.lang.Object $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r143, $r144, $r145, $r146, $r147, $r149, $r151, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167;
        char[][] $r96, $r98;
        java.lang.NumberFormatException $r128;

        r59 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable");

        if $r1 == null goto label002;

        $r126 = "generate";

        $z64 = virtualinvoke $r126.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z64 == 0 goto label001;

        $i24 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i25 = $i24 | 4;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i25;

        goto label002;

     label001:
        $r127 = "do not generate";

        $z65 = virtualinvoke $r127.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z65 == 0 goto label002;

        $i22 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i27 = (int) -5;

        $i23 = $i22 & $i27;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i23;

     label002:
        $r130 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber");

        if $r130 == null goto label004;

        $r124 = "generate";

        $z62 = virtualinvoke $r124.<java.lang.String: boolean equals(java.lang.Object)>($r130);

        if $z62 == 0 goto label003;

        $i20 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i21 = $i20 | 2;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i21;

        goto label004;

     label003:
        $r125 = "do not generate";

        $z63 = virtualinvoke $r125.<java.lang.String: boolean equals(java.lang.Object)>($r130);

        if $z63 == 0 goto label004;

        $i18 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i29 = (int) -3;

        $i19 = $i18 & $i29;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i19;

     label004:
        $r131 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile");

        if $r131 == null goto label006;

        $r122 = "generate";

        $z60 = virtualinvoke $r122.<java.lang.String: boolean equals(java.lang.Object)>($r131);

        if $z60 == 0 goto label005;

        $i16 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i17 = $i16 | 1;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i17;

        goto label006;

     label005:
        $r123 = "do not generate";

        $z61 = virtualinvoke $r123.<java.lang.String: boolean equals(java.lang.Object)>($r131);

        if $z61 == 0 goto label006;

        $i14 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i31 = (int) -2;

        $i15 = $i14 & $i31;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes> = $i15;

     label006:
        $r132 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.unusedLocal");

        if $r132 == null goto label008;

        $r120 = "preserve";

        $z58 = virtualinvoke $r120.<java.lang.String: boolean equals(java.lang.Object)>($r132);

        if $z58 == 0 goto label007;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables> = 1;

        goto label008;

     label007:
        $r121 = "optimize out";

        $z59 = virtualinvoke $r121.<java.lang.String: boolean equals(java.lang.Object)>($r132);

        if $z59 == 0 goto label008;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables> = 0;

     label008:
        $r133 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode");

        if $r133 == null goto label010;

        $r118 = "enabled";

        $z56 = virtualinvoke $r118.<java.lang.String: boolean equals(java.lang.Object)>($r133);

        if $z56 == 0 goto label009;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode> = 1;

        goto label010;

     label009:
        $r119 = "disabled";

        $z57 = virtualinvoke $r119.<java.lang.String: boolean equals(java.lang.Object)>($r133);

        if $z57 == 0 goto label010;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode> = 0;

     label010:
        $r134 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod");

        if $r134 == null goto label012;

        $r116 = "enabled";

        $z54 = virtualinvoke $r116.<java.lang.String: boolean equals(java.lang.Object)>($r134);

        if $z54 == 0 goto label011;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod> = 1;

        goto label012;

     label011:
        $r117 = "disabled";

        $z55 = virtualinvoke $r117.<java.lang.String: boolean equals(java.lang.Object)>($r134);

        if $z55 == 0 goto label012;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod> = 0;

     label012:
        $r135 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding");

        if $r135 == null goto label014;

        $r114 = "enabled";

        $z52 = virtualinvoke $r114.<java.lang.String: boolean equals(java.lang.Object)>($r135);

        if $z52 == 0 goto label013;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding> = 1;

        goto label014;

     label013:
        $r115 = "disabled";

        $z53 = virtualinvoke $r115.<java.lang.String: boolean equals(java.lang.Object)>($r135);

        if $z53 == 0 goto label014;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding> = 0;

     label014:
        $r136 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference");

        if $r136 == null goto label016;

        $r112 = "enabled";

        $z50 = virtualinvoke $r112.<java.lang.String: boolean equals(java.lang.Object)>($r136);

        if $z50 == 0 goto label015;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference> = 1;

        goto label016;

     label015:
        $r113 = "disabled";

        $z51 = virtualinvoke $r113.<java.lang.String: boolean equals(java.lang.Object)>($r136);

        if $z51 == 0 goto label016;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference> = 0;

     label016:
        $r137 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable");

        if $r137 == null goto label018;

        $r110 = "enabled";

        $z48 = virtualinvoke $r110.<java.lang.String: boolean equals(java.lang.Object)>($r137);

        if $z48 == 0 goto label017;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable> = 1;

        goto label018;

     label017:
        $r111 = "disabled";

        $z49 = virtualinvoke $r111.<java.lang.String: boolean equals(java.lang.Object)>($r137);

        if $z49 == 0 goto label018;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable> = 0;

     label018:
        $r138 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        if $r138 == null goto label019;

        $l12 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r138);

        $b13 = $l12 cmp 0L;

        if $b13 == 0 goto label019;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel> = $l12;

     label019:
        $r139 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        if $r139 == null goto label020;

        $l10 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r139);

        $b11 = $l10 cmp 0L;

        if $b11 == 0 goto label020;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel> = $l10;

     label020:
        $r140 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform");

        if $r140 == null goto label022;

        $l6 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r140);

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label021;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK> = $l6;

     label021:
        $l8 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK>;

        $b9 = $l8 cmp 3211264L;

        $i32 = (int) $b9;

        if $i32 < 0 goto label022;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode> = 1;

     label022:
        $r141 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.encoding");

        if $r141 == null goto label026;

        $z47 = $r141 instanceof java.lang.String;

        if $z47 == 0 goto label026;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding> = null;

        r142 = (java.lang.String) $r141;

        $i5 = virtualinvoke r142.<java.lang.String: int length()>();

        if $i5 <= 0 goto label026;

     label023:
        $r169 = new java.io.InputStreamReader;

        $r168 = new java.io.ByteArrayInputStream;

        $r108 = newarray (byte)[0];

        specialinvoke $r168.<java.io.ByteArrayInputStream: void <init>(byte[])>($r108);

        specialinvoke $r169.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r168, r142);

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding> = r142;

     label024:
        goto label026;

     label025:
        $r129 := @caughtexception;

     label026:
        $r143 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract");

        if $r143 == null goto label028;

        $r105 = "enabled";

        $z45 = virtualinvoke $r105.<java.lang.String: boolean equals(java.lang.Object)>($r143);

        if $z45 == 0 goto label027;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract> = 1;

        goto label028;

     label027:
        $r106 = "disabled";

        $z46 = virtualinvoke $r106.<java.lang.String: boolean equals(java.lang.Object)>($r143);

        if $z46 == 0 goto label028;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract> = 0;

     label028:
        $r144 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete");

        if $r144 == null goto label030;

        $r103 = "enabled";

        $z43 = virtualinvoke $r103.<java.lang.String: boolean equals(java.lang.Object)>($r144);

        if $z43 == 0 goto label029;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete> = 1;

        goto label030;

     label029:
        $r104 = "disabled";

        $z44 = virtualinvoke $r104.<java.lang.String: boolean equals(java.lang.Object)>($r144);

        if $z44 == 0 goto label030;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete> = 0;

     label030:
        $r145 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference");

        if $r145 == null goto label032;

        $r101 = "enabled";

        $z41 = virtualinvoke $r101.<java.lang.String: boolean equals(java.lang.Object)>($r145);

        if $z41 == 0 goto label031;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference> = 1;

        goto label032;

     label031:
        $r102 = "disabled";

        $z42 = virtualinvoke $r102.<java.lang.String: boolean equals(java.lang.Object)>($r145);

        if $z42 == 0 goto label032;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference> = 0;

     label032:
        $r146 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.specialParameterHidingField");

        if $r146 == null goto label034;

        $r99 = "enabled";

        $z39 = virtualinvoke $r99.<java.lang.String: boolean equals(java.lang.Object)>($r146);

        if $z39 == 0 goto label033;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField> = 1;

        goto label034;

     label033:
        $r100 = "disabled";

        $z40 = virtualinvoke $r100.<java.lang.String: boolean equals(java.lang.Object)>($r146);

        if $z40 == 0 goto label034;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField> = 0;

     label034:
        $r147 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.maxProblemPerUnit");

        if $r147 == null goto label038;

        $z38 = $r147 instanceof java.lang.String;

        if $z38 == 0 goto label038;

        r148 = (java.lang.String) $r147;

     label035:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r148);

        if $i4 < 0 goto label038;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int maxProblemsPerUnit> = $i4;

     label036:
        goto label038;

     label037:
        $r128 := @caughtexception;

     label038:
        $r149 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.taskTags");

        if $r149 == null goto label040;

        $z37 = $r149 instanceof java.lang.String;

        if $z37 == 0 goto label040;

        r150 = (java.lang.String) $r149;

        $i3 = virtualinvoke r150.<java.lang.String: int length()>();

        if $i3 != 0 goto label039;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags> = null;

        goto label040;

     label039:
        $r97 = virtualinvoke r150.<java.lang.String: char[] toCharArray()>();

        $r98 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitAndTrimOn(char,char[])>(44, $r97);

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags> = $r98;

     label040:
        $r151 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.taskPriorities");

        if $r151 == null goto label042;

        $z36 = $r151 instanceof java.lang.String;

        if $z36 == 0 goto label042;

        r152 = (java.lang.String) $r151;

        $i2 = virtualinvoke r152.<java.lang.String: int length()>();

        if $i2 != 0 goto label041;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites> = null;

        goto label042;

     label041:
        $r95 = virtualinvoke r152.<java.lang.String: char[] toCharArray()>();

        $r96 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitAndTrimOn(char,char[])>(44, $r95);

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites> = $r96;

     label042:
        $r153 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.taskCaseSensitive");

        if $r153 == null goto label044;

        $r93 = "enabled";

        $z34 = virtualinvoke $r93.<java.lang.String: boolean equals(java.lang.Object)>($r153);

        if $z34 == 0 goto label043;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive> = 1;

        goto label044;

     label043:
        $r94 = "disabled";

        $z35 = virtualinvoke $r94.<java.lang.String: boolean equals(java.lang.Object)>($r153);

        if $z35 == 0 goto label044;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean isTaskCaseSensitive> = 0;

     label044:
        $r154 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode");

        if $r154 == null goto label046;

        $l0 = r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK>;

        $b1 = $l0 cmp 3211264L;

        $i33 = (int) $b1;

        if $i33 >= 0 goto label046;

        $r91 = "enabled";

        $z32 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>($r154);

        if $z32 == 0 goto label045;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode> = 1;

        goto label046;

     label045:
        $r92 = "disabled";

        $z33 = virtualinvoke $r92.<java.lang.String: boolean equals(java.lang.Object)>($r154);

        if $z33 == 0 goto label046;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode> = 0;

     label046:
        $r155 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.suppressWarnings");

        if $r155 == null goto label048;

        $r89 = "enabled";

        $z30 = virtualinvoke $r89.<java.lang.String: boolean equals(java.lang.Object)>($r155);

        if $z30 == 0 goto label047;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings> = 1;

        goto label048;

     label047:
        $r90 = "disabled";

        $z31 = virtualinvoke $r90.<java.lang.String: boolean equals(java.lang.Object)>($r155);

        if $z31 == 0 goto label048;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings> = 0;

     label048:
        $r156 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fatalOptionalError");

        if $r156 == null goto label050;

        $r87 = "enabled";

        $z28 = virtualinvoke $r87.<java.lang.String: boolean equals(java.lang.Object)>($r156);

        if $z28 == 0 goto label049;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal> = 1;

        goto label050;

     label049:
        $r88 = "disabled";

        $z29 = virtualinvoke $r88.<java.lang.String: boolean equals(java.lang.Object)>($r156);

        if $z29 == 0 goto label050;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal> = 0;

     label050:
        $r157 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName");

        if $r157 == null goto label051;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1L, $r157);

     label051:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod");

        if $r2 == null goto label052;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2L, $r2);

     label052:
        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation");

        if $r3 == null goto label053;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(4L, $r3);

     label053:
        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock");

        if $r4 == null goto label054;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(8L, $r4);

     label054:
        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLocal");

        if $r5 == null goto label055;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(16L, $r5);

     label055:
        $r6 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameter");

        if $r6 == null goto label056;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(32L, $r6);

     label056:
        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedImport");

        if $r7 == null goto label057;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1024L, $r7);

     label057:
        $r8 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember");

        if $r8 == null goto label058;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(32768L, $r8);

     label058:
        $r9 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException");

        if $r9 == null goto label059;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(8388608L, $r9);

     label059:
        $r10 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion");

        if $r10 == null goto label060;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(64L, $r10);

     label060:
        $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation");

        if $r11 == null goto label061;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(128L, $r11);

     label061:
        $r12 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.localVariableHiding");

        if $r12 == null goto label062;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(65536L, $r12);

     label062:
        $r13 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fieldHiding");

        if $r13 == null goto label063;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(131072L, $r13);

     label063:
        $r14 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.typeParameterHiding");

        if $r14 == null goto label064;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(549755813888L, $r14);

     label064:
        $r15 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment");

        if $r15 == null goto label065;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(262144L, $r15);

     label065:
        $r16 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.emptyStatement");

        if $r16 == null goto label066;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(524288L, $r16);

     label066:
        $r17 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral");

        if $r17 == null goto label067;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(256L, $r17);

     label067:
        $r18 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.assertIdentifier");

        if $r18 == null goto label068;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(512L, $r18);

     label068:
        $r19 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.enumIdentifier");

        if $r19 == null goto label069;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(8589934592L, $r19);

     label069:
        $r20 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver");

        if $r20 == null goto label070;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2048L, $r20);

     label070:
        $r21 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess");

        if $r21 == null goto label071;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(268435456L, $r21);

     label071:
        $r22 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod");

        if $r22 == null goto label072;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(16384L, $r22);

     label072:
        $r23 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock");

        if $r23 == null goto label073;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(134217728L, $r23);

     label073:
        $r24 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck");

        if $r24 == null goto label074;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(67108864L, $r24);

     label074:
        $r25 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryElse");

        if $r25 == null goto label075;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(536870912L, $r25);

     label075:
        $r26 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally");

        if $r26 == null goto label076;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(16777216L, $r26);

     label076:
        $r27 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess");

        if $r27 == null goto label077;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(4194304L, $r27);

     label077:
        $r28 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noEffectAssignment");

        if $r28 == null goto label078;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(8192L, $r28);

     label078:
        $r29 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation");

        if $r29 == null goto label079;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1073741824L, $r29);

     label079:
        $r30 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.rawTypeReference");

        if $r30 == null goto label080;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(35184372088832L, $r30);

     label080:
        $r31 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finalParameterBound");

        if $r31 == null goto label081;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2147483648L, $r31);

     label081:
        $r32 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingSerialVersion");

        if $r32 == null goto label082;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(4294967296L, $r32);

     label082:
        $r33 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.forbiddenReference");

        if $r33 == null goto label083;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(17179869184L, $r33);

     label083:
        $r34 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.discouragedReference");

        if $r34 == null goto label084;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(8796093022208L, $r34);

     label084:
        $r35 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast");

        if $r35 == null goto label085;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(34359738368L, $r35);

     label085:
        $r36 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference");

        if $r36 == null goto label086;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(68719476736L, $r36);

     label086:
        $r37 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.potentialNullReference");

        if $r37 == null goto label087;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1125899906842624L, $r37);

     label087:
        $r38 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantNullCheck");

        if $r38 == null goto label088;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2251799813685248L, $r38);

     label088:
        $r39 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.autoboxing");

        if $r39 == null goto label089;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(137438953472L, $r39);

     label089:
        $r40 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.annotationSuperInterface");

        if $r40 == null goto label090;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(274877906944L, $r40);

     label090:
        $r41 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation");

        if $r41 == null goto label091;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1099511627776L, $r41);

     label091:
        $r42 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation");

        if $r42 == null goto label092;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(4398046511104L, $r42);

     label092:
        $r43 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch");

        if $r43 == null goto label093;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2199023255552L, $r43);

     label093:
        $r44 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unhandledWarningToken");

        if $r44 == null goto label094;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(17592186044416L, $r44);

     label094:
        $r45 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedWarningToken");

        if $r45 == null goto label095;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(18014398509481984L, $r45);

     label095:
        $r46 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLabel");

        if $r46 == null goto label096;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(70368744177664L, $r46);

     label096:
        $r47 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.parameterAssignment");

        if $r47 == null goto label097;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(140737488355328L, $r47);

     label097:
        $r48 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fallthroughCase");

        if $r48 == null goto label098;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(281474976710656L, $r48);

     label098:
        $r49 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation");

        if $r49 == null goto label099;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(562949953421312L, $r49);

     label099:
        $r50 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation");

        if $r50 == null goto label100;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(9007199254740992L, $r50);

     label100:
        $r51 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantSuperinterface");

        if $r51 == null goto label101;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(36028797018963968L, $r51);

     label101:
        $r52 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.doc.comment.support");

        if $r52 == null goto label103;

        $r85 = "enabled";

        $z26 = virtualinvoke $r85.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z26 == 0 goto label102;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport> = 1;

        goto label103;

     label102:
        $r86 = "disabled";

        $z27 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z27 == 0 goto label103;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport> = 0;

     label103:
        $r158 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadoc");

        if $r158 == null goto label104;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(33554432L, $r158);

     label104:
        $r53 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility");

        if $r53 == null goto label108;

        $r81 = "public";

        $z22 = virtualinvoke $r81.<java.lang.String: boolean equals(java.lang.Object)>($r53);

        if $z22 == 0 goto label105;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 1;

        goto label108;

     label105:
        $r82 = "protected";

        $z23 = virtualinvoke $r82.<java.lang.String: boolean equals(java.lang.Object)>($r53);

        if $z23 == 0 goto label106;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 4;

        goto label108;

     label106:
        $r83 = "default";

        $z24 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>($r53);

        if $z24 == 0 goto label107;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 0;

        goto label108;

     label107:
        $r84 = "private";

        $z25 = virtualinvoke $r84.<java.lang.String: boolean equals(java.lang.Object)>($r53);

        if $z25 == 0 goto label108;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility> = 2;

     label108:
        $r159 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTags");

        if $r159 == null goto label110;

        $r79 = "enabled";

        $z20 = virtualinvoke $r79.<java.lang.String: boolean equals(java.lang.Object)>($r159);

        if $z20 == 0 goto label109;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags> = 1;

        goto label110;

     label109:
        $r80 = "disabled";

        $z21 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>($r159);

        if $z21 == 0 goto label110;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags> = 0;

     label110:
        $r160 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef");

        if $r160 == null goto label112;

        $r77 = "enabled";

        $z18 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>($r160);

        if $z18 == 0 goto label111;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef> = 1;

        goto label112;

     label111:
        $r78 = "disabled";

        $z19 = virtualinvoke $r78.<java.lang.String: boolean equals(java.lang.Object)>($r160);

        if $z19 == 0 goto label112;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef> = 0;

     label112:
        $r161 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef");

        if $r161 == null goto label114;

        $r75 = "enabled";

        $z16 = virtualinvoke $r75.<java.lang.String: boolean equals(java.lang.Object)>($r161);

        if $z16 == 0 goto label113;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef> = 1;

        goto label114;

     label113:
        $r76 = "disabled";

        $z17 = virtualinvoke $r76.<java.lang.String: boolean equals(java.lang.Object)>($r161);

        if $z17 == 0 goto label114;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef> = 0;

     label114:
        $r162 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTags");

        if $r162 == null goto label115;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(2097152L, $r162);

     label115:
        $r54 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility");

        if $r54 == null goto label119;

        $r71 = "public";

        $z12 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z12 == 0 goto label116;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 1;

        goto label119;

     label116:
        $r72 = "protected";

        $z13 = virtualinvoke $r72.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z13 == 0 goto label117;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 4;

        goto label119;

     label117:
        $r73 = "default";

        $z14 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z14 == 0 goto label118;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 0;

        goto label119;

     label118:
        $r74 = "private";

        $z15 = virtualinvoke $r74.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z15 == 0 goto label119;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility> = 2;

     label119:
        $r163 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding");

        if $r163 == null goto label121;

        $r69 = "enabled";

        $z10 = virtualinvoke $r69.<java.lang.String: boolean equals(java.lang.Object)>($r163);

        if $z10 == 0 goto label120;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding> = 1;

        goto label121;

     label120:
        $r70 = "disabled";

        $z11 = virtualinvoke $r70.<java.lang.String: boolean equals(java.lang.Object)>($r163);

        if $z11 == 0 goto label121;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding> = 0;

     label121:
        $r164 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocComments");

        if $r164 == null goto label122;

        virtualinvoke r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void updateSeverity(long,java.lang.Object)>(1048576L, $r164);

     label122:
        $r55 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription");

        if $r55 == null goto label123;

        $r68 = (java.lang.String) $r55;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String reportMissingJavadocTagDescription> = $r68;

     label123:
        $r56 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility");

        if $r56 == null goto label127;

        $r64 = "public";

        $z6 = virtualinvoke $r64.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z6 == 0 goto label124;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 1;

        goto label127;

     label124:
        $r65 = "protected";

        $z7 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z7 == 0 goto label125;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 4;

        goto label127;

     label125:
        $r66 = "default";

        $z8 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z8 == 0 goto label126;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 0;

        goto label127;

     label126:
        $r67 = "private";

        $z9 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z9 == 0 goto label127;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility> = 2;

     label127:
        $r165 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding");

        if $r165 == null goto label129;

        $r62 = "enabled";

        $z4 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>($r165);

        if $z4 == 0 goto label128;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding> = 1;

        goto label129;

     label128:
        $r63 = "disabled";

        $z5 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>($r165);

        if $z5 == 0 goto label129;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding> = 0;

     label129:
        $r166 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.generateClassFiles");

        if $r166 == null goto label131;

        $r60 = "enabled";

        $z2 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>($r166);

        if $z2 == 0 goto label130;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles> = 1;

        goto label131;

     label130:
        $r61 = "disabled";

        $z3 = virtualinvoke $r61.<java.lang.String: boolean equals(java.lang.Object)>($r166);

        if $z3 == 0 goto label131;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles> = 0;

     label131:
        $r167 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.processAnnotations");

        if $r167 == null goto label133;

        $r57 = "enabled";

        $z0 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>($r167);

        if $z0 == 0 goto label132;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations> = 1;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean storeAnnotations> = 1;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport> = 1;

        goto label133;

     label132:
        $r58 = "disabled";

        $z1 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>($r167);

        if $z1 == 0 goto label133;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations> = 0;

        r59.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean storeAnnotations> = 0;

     label133:
        return;

        catch java.io.UnsupportedEncodingException from label023 to label024 with label025;
        catch java.lang.NumberFormatException from label035 to label036 with label037;
    }

    public java.lang.String toString()
    {
        long $l9, $l10, $l11;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r49, $r51, $r52, $r53, $r54, $r56, $r58, $r60, $r61, $r63, $r65, $r67, $r68, $r70, $r72, $r73, $r74, $r75, $r77, $r79, $r81, $r83, $r85, $r87, $r89, $r90, $r91, $r92, $r94, $r98, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r111, $r113, $r115, $r117, $r119, $r121, $r123, $r125, $r127, $r129, $r131, $r133, $r135, $r137, $r139, $r140, $r142, $r144, $r146, $r147, $r149, $r150, $r151, $r153;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char[][] $r95, $r96, $r99, $r100;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r2;
        java.lang.String $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r50, $r55, $r57, $r59, $r62, $r64, $r66, $r69, $r71, $r76, $r78, $r80, $r82, $r84, $r86, $r88, $r93, $r110, $r112, $r114, $r116, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132, $r134, $r136, $r138, $r141, $r143, $r145, $r148, $r152, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177, $r178, $r179, $r180, $r181, $r182, $r183, $r184, $r185;
        char[] $r97, $r101;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;

        r2 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("CompilerOptions:");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- local variables debug attributes: ");

        $i0 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label01;

        $r156 = "ON";

        goto label02;

     label01:
        $r156 = " OFF";

     label02:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r156);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- line number debug attributes: ");

        $i2 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label03;

        $r157 = "ON";

        goto label04;

     label03:
        $r157 = " OFF";

     label04:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r157);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- source debug attributes: ");

        $i4 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int produceDebugAttributes>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label05;

        $r158 = "ON";

        goto label06;

     label05:
        $r158 = " OFF";

     label06:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r158);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- preserve all local variables: ");

        $z0 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean preserveAllLocalVariables>;

        if $z0 == 0 goto label07;

        $r159 = "ON";

        goto label08;

     label07:
        $r159 = " OFF";

     label08:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r159);

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- method with constructor name: ");

        $r7 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1L);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- overridden package default method: ");

        $r9 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2L);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- deprecation: ");

        $r11 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4L);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- masked catch block: ");

        $r13 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8L);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused local variable: ");

        $r15 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16L);

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused parameter: ");

        $r17 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(32L);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused import: ");

        $r19 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1024L);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- synthetic access emulation: ");

        $r21 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(128L);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r22 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- assignment with no effect: ");

        $r23 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8192L);

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r24 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- non externalized string: ");

        $r25 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(256L);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r26 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- static access receiver: ");

        $r27 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2048L);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r28 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- indirect static access: ");

        $r29 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(268435456L);

        virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r30 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- incompatible non inherited interface method: ");

        $r31 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16384L);

        virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r32 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused private member: ");

        $r33 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(32768L);

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r34 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- local variable hiding another variable: ");

        $r35 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(65536L);

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r36 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- field hiding another variable: ");

        $r37 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(131072L);

        virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r38 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- type hiding another type: ");

        $r39 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(549755813888L);

        virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r40 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- possible accidental boolean assignment: ");

        $r41 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(262144L);

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r42 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- superfluous semicolon: ");

        $r43 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(524288L);

        virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r44 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- uncommented empty block: ");

        $r45 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(134217728L);

        virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r46 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unnecessary type check: ");

        $r47 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(67108864L);

        virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r48 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- javadoc comment support: ");

        $z1 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean docCommentSupport>;

        if $z1 == 0 goto label09;

        $r160 = "ON";

        goto label10;

     label09:
        $r160 = " OFF";

     label10:
        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r160);

        $r49 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ invalid javadoc: ");

        $r50 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(33554432L);

        virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r51 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ report invalid javadoc tags: ");

        $z2 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTags>;

        if $z2 == 0 goto label11;

        $r161 = "enabled";

        goto label12;

     label11:
        $r161 = "disabled";

     label12:
        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r161);

        $r52 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t\t* deprecated references: ");

        $z3 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsDeprecatedRef>;

        if $z3 == 0 goto label13;

        $r162 = "enabled";

        goto label14;

     label13:
        $r162 = "disabled";

     label14:
        virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r162);

        $r53 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t\t* not visible references: ");

        $z4 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportInvalidJavadocTagsNotVisibleRef>;

        if $z4 == 0 goto label15;

        $r163 = "enabled";

        goto label16;

     label15:
        $r163 = "disabled";

     label16:
        virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r163);

        $r54 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ visibility level to report invalid javadoc tags: ");

        $i6 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportInvalidJavadocTagsVisibility>;

        $r55 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i6);

        virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r56 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ missing javadoc tags: ");

        $r57 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2097152L);

        virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r58 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ visibility level to report missing javadoc tags: ");

        $i7 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocTagsVisibility>;

        $r59 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i7);

        virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        $r60 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ report missing javadoc tags in overriding methods: ");

        $z5 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocTagsOverriding>;

        if $z5 == 0 goto label17;

        $r164 = "enabled";

        goto label18;

     label17:
        $r164 = "disabled";

     label18:
        virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r164);

        $r61 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ missing javadoc comments: ");

        $r62 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1048576L);

        virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

        $r63 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ report missing tag description option: ");

        $r64 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String reportMissingJavadocTagDescription>;

        virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r64);

        $r65 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ visibility level to report missing javadoc comments: ");

        $i8 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: int reportMissingJavadocCommentsVisibility>;

        $r66 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getVisibilityString(int)>($i8);

        virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r67 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t\t+ report missing javadoc comments in overriding methods: ");

        $z6 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportMissingJavadocCommentsOverriding>;

        if $z6 == 0 goto label19;

        $r165 = "enabled";

        goto label20;

     label19:
        $r165 = "disabled";

     label20:
        virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r165);

        $r68 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- finally block not completing normally: ");

        $r69 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(16777216L);

        virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        $r70 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused declared thrown exception: ");

        $r71 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8388608L);

        virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r71);

        $r72 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused declared thrown exception when overriding: ");

        $z7 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionWhenOverriding>;

        if $z7 == 0 goto label21;

        $r166 = "enabled";

        goto label22;

     label21:
        $r166 = "disabled";

     label22:
        virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r166);

        $r73 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused declared thrown exception include doc comment reference: ");

        $z8 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionIncludeDocCommentReference>;

        if $z8 == 0 goto label23;

        $r167 = "enabled";

        goto label24;

     label23:
        $r167 = "disabled";

     label24:
        virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r167);

        $r74 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused declared thrown exception exempt exception and throwable: ");

        $z9 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable>;

        if $z9 == 0 goto label25;

        $r168 = "enabled";

        goto label26;

     label25:
        $r168 = "disabled";

     label26:
        virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r168);

        $r75 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unnecessary else: ");

        $r76 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(536870912L);

        virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuffer;

        specialinvoke $r77.<java.lang.StringBuffer: void <init>(java.lang.String)>("\n\t- JDK compliance level: ");

        $l9 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $r78 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l9);

        $r79 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>(java.lang.String)>("\n\t- JDK source level: ");

        $l10 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $r82 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l10);

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r84);

        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>(java.lang.String)>("\n\t- JDK target level: ");

        $l11 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long targetJDK>;

        $r86 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String versionFromJdkLevel(long)>($l11);

        $r87 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r88);

        $r89 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- verbose : ");

        $z10 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose>;

        if $z10 == 0 goto label27;

        $r169 = "ON";

        goto label28;

     label27:
        $r169 = "OFF";

     label28:
        virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r169);

        $r90 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- produce reference info : ");

        $z11 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean produceReferenceInfo>;

        if $z11 == 0 goto label29;

        $r170 = "ON";

        goto label30;

     label29:
        $r170 = "OFF";

     label30:
        virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r170);

        $r91 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- parse literal expressions as constants : ");

        $z12 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean parseLiteralExpressionsAsConstants>;

        if $z12 == 0 goto label31;

        $r171 = "ON";

        goto label32;

     label31:
        $r171 = "OFF";

     label32:
        virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r171);

        $r92 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- encoding : ");

        $r93 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

        if $r93 != null goto label33;

        $r172 = "<default>";

        goto label34;

     label33:
        $r172 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String defaultEncoding>;

     label34:
        virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r172);

        $r94 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- task tags: ");

        $r95 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        if $r95 != null goto label35;

        $r173 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        goto label36;

     label35:
        $r173 = new java.lang.String;

        $r96 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskTags>;

        $r97 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r96, 44);

        specialinvoke $r173.<java.lang.String: void <init>(char[])>($r97);

     label36:
        virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r173);

        $r98 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- task priorities : ");

        $r99 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        if $r99 != null goto label37;

        $r174 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        goto label38;

     label37:
        $r174 = new java.lang.String;

        $r100 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: char[][] taskPriorites>;

        $r101 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concatWith(char[][],char)>($r100, 44);

        specialinvoke $r174.<java.lang.String: void <init>(char[])>($r101);

     label38:
        virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r174);

        $r102 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report deprecation inside deprecated code : ");

        $z13 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationInsideDeprecatedCode>;

        if $z13 == 0 goto label39;

        $r175 = "enabled";

        goto label40;

     label39:
        $r175 = "disabled";

     label40:
        virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r175);

        $r103 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report deprecation when overriding deprecated method : ");

        $z14 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportDeprecationWhenOverridingDeprecatedMethod>;

        if $z14 == 0 goto label41;

        $r176 = "enabled";

        goto label42;

     label41:
        $r176 = "disabled";

     label42:
        virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r176);

        $r104 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused parameter when implementing abstract method : ");

        $z15 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenImplementingAbstract>;

        if $z15 == 0 goto label43;

        $r177 = "enabled";

        goto label44;

     label43:
        $r177 = "disabled";

     label44:
        virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r177);

        $r105 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused parameter when overriding concrete method : ");

        $z16 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterWhenOverridingConcrete>;

        if $z16 == 0 goto label45;

        $r178 = "enabled";

        goto label46;

     label45:
        $r178 = "disabled";

     label46:
        virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r178);

        $r106 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report unused parameter include doc comment reference : ");

        $z17 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportUnusedParameterIncludeDocCommentReference>;

        if $z17 == 0 goto label47;

        $r179 = "enabled";

        goto label48;

     label47:
        $r179 = "disabled";

     label48:
        virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r179);

        $r107 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- report constructor/setter parameter hiding existing field : ");

        $z18 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean reportSpecialParameterHidingField>;

        if $z18 == 0 goto label49;

        $r180 = "enabled";

        goto label50;

     label49:
        $r180 = "disabled";

     label50:
        virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r180);

        $r108 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- inline JSR bytecode : ");

        $z19 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean inlineJsrBytecode>;

        if $z19 == 0 goto label51;

        $r181 = "enabled";

        goto label52;

     label51:
        $r181 = "disabled";

     label52:
        virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r181);

        $r109 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unsafe type operation: ");

        $r110 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1073741824L);

        virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r110);

        $r111 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unsafe raw type: ");

        $r112 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(35184372088832L);

        virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r112);

        $r113 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- final bound for type parameter: ");

        $r114 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2147483648L);

        virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r114);

        $r115 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- missing serialVersionUID: ");

        $r116 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4294967296L);

        virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r116);

        $r117 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- varargs argument need cast: ");

        $r118 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(34359738368L);

        virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r118);

        $r119 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- forbidden reference to type with access restriction: ");

        $r120 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(17179869184L);

        virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r120);

        $r121 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- discouraged reference to type with access restriction: ");

        $r122 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(8796093022208L);

        virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r122);

        $r123 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- null reference: ");

        $r124 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(68719476736L);

        virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r125 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- potential null reference: ");

        $r126 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1125899906842624L);

        virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r126);

        $r127 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- redundant null check: ");

        $r128 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2251799813685248L);

        virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r128);

        $r129 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- autoboxing: ");

        $r130 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(137438953472L);

        virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r130);

        $r131 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- annotation super interface: ");

        $r132 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(274877906944L);

        virtualinvoke $r131.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r133 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- missing @Override annotation: ");

        $r134 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(1099511627776L);

        virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r134);

        $r135 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- missing @Deprecated annotation: ");

        $r136 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(4398046511104L);

        virtualinvoke $r135.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r136);

        $r137 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- incomplete enum switch: ");

        $r138 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(2199023255552L);

        virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r138);

        $r139 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- suppress warnings: ");

        $z20 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean suppressWarnings>;

        if $z20 == 0 goto label53;

        $r182 = "enabled";

        goto label54;

     label53:
        $r182 = "disabled";

     label54:
        virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r182);

        $r140 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unhandled warning token: ");

        $r141 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(17592186044416L);

        virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r141);

        $r142 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused warning token: ");

        $r143 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(18014398509481984L);

        virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r143);

        $r144 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused label: ");

        $r145 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(70368744177664L);

        virtualinvoke $r144.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r145);

        $r146 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- treat optional error as fatal: ");

        $z21 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean treatOptionalErrorAsFatal>;

        if $z21 == 0 goto label55;

        $r183 = "enabled";

        goto label56;

     label55:
        $r183 = "disabled";

     label56:
        virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r183);

        $r147 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- parameter assignment: ");

        $r148 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(140737488355328L);

        virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r148);

        $r149 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- generate class files: ");

        $z22 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean generateClassFiles>;

        if $z22 == 0 goto label57;

        $r184 = "enabled";

        goto label58;

     label57:
        $r184 = "disabled";

     label58:
        virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r184);

        $r150 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- process annotations: ");

        $z23 = r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations>;

        if $z23 == 0 goto label59;

        $r185 = "enabled";

        goto label60;

     label59:
        $r185 = "disabled";

     label60:
        virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r185);

        $r151 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- unused type arguments for method/constructor invocation: ");

        $r152 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(9007199254740992L);

        virtualinvoke $r151.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r152);

        $r153 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t- redundant superinterface: ");

        $r154 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.lang.String getSeverityString(long)>(36028797018963968L);

        virtualinvoke $r153.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r154);

        $r155 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r155;
    }

    void updateSeverity(long, java.lang.Object)
    {
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions r4;

        r4 := @this: org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.Object;

        $r1 = "error";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $l12 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold>;

        $l13 = $l12 | l0;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold> = $l13;

        $l15 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold>;

        $l14 = l0 ^ -1L;

        $l16 = $l15 & $l14;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold> = $l16;

        goto label3;

     label1:
        $r2 = "warning";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $l8 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold>;

        $l7 = l0 ^ -1L;

        $l9 = $l8 & $l7;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold> = $l9;

        $l10 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold>;

        $l11 = $l10 | l0;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold> = $l11;

        goto label3;

     label2:
        $r3 = "ignore";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        $l2 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold>;

        $l1 = l0 ^ -1L;

        $l3 = $l2 & $l1;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long errorThreshold> = $l3;

        $l5 = r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold>;

        $l4 = l0 ^ -1L;

        $l6 = $l5 & $l4;

        r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long warningThreshold> = $l6;

     label3:
        return;
    }

    public static long versionToJdkLevel(java.lang.Object)
    {
        char $c1, $c2, $c3;
        int $i0, $i4, $i5, $i6;
        java.lang.Object r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label11;

        r1 = (java.lang.String) r0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 3 goto label09;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c1;

        if $i4 != 49 goto label09;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i5 = (int) $c2;

        if $i5 != 46 goto label09;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(2);

        $i6 = (int) $c3;

        tableswitch($i6)
        {
            case 49: goto label01;
            case 50: goto label02;
            case 51: goto label03;
            case 52: goto label04;
            case 53: goto label05;
            case 54: goto label06;
            case 55: goto label07;
            default: goto label08;
        };

     label01:
        return 2949123L;

     label02:
        return 3014656L;

     label03:
        return 3080192L;

     label04:
        return 3145728L;

     label05:
        return 3211264L;

     label06:
        return 3276800L;

     label07:
        return 3342336L;

     label08:
        return 0L;

     label09:
        $r3 = "jsr14";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label10;

        return 3145728L;

     label10:
        $r2 = "cldc1.1";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label11;

        return 2949124L;

     label11:
        return 0L;
    }

    public static java.lang.String versionFromJdkLevel(long)
    {
        long l0, $l1;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        int $i2;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $l1 = l0 >> 16;

        $i2 = (int) $l1;

        tableswitch($i2)
        {
            case 45: goto label1;
            case 46: goto label2;
            case 47: goto label3;
            case 48: goto label4;
            case 49: goto label5;
            case 50: goto label6;
            case 51: goto label7;
            default: goto label8;
        };

     label1:
        $b9 = l0 cmp 2949123L;

        if $b9 != 0 goto label8;

        return "1.1";

     label2:
        $b8 = l0 cmp 3014656L;

        if $b8 != 0 goto label8;

        return "1.2";

     label3:
        $b7 = l0 cmp 3080192L;

        if $b7 != 0 goto label8;

        return "1.3";

     label4:
        $b6 = l0 cmp 3145728L;

        if $b6 != 0 goto label8;

        return "1.4";

     label5:
        $b5 = l0 cmp 3211264L;

        if $b5 != 0 goto label8;

        return "1.5";

     label6:
        $b4 = l0 cmp 3276800L;

        if $b4 != 0 goto label8;

        return "1.6";

     label7:
        $b3 = l0 cmp 3342336L;

        if $b3 != 0 goto label8;

        return "1.7";

     label8:
        $r0 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        return $r0;
    }

    public static java.lang.String[] warningOptionNames()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[53];

        $r0[0] = "org.eclipse.jdt.core.compiler.problem.annotationSuperInterface";

        $r0[1] = "org.eclipse.jdt.core.compiler.problem.assertIdentifier";

        $r0[2] = "org.eclipse.jdt.core.compiler.problem.autoboxing";

        $r0[3] = "org.eclipse.jdt.core.compiler.problem.deprecation";

        $r0[4] = "org.eclipse.jdt.core.compiler.problem.discouragedReference";

        $r0[5] = "org.eclipse.jdt.core.compiler.problem.emptyStatement";

        $r0[6] = "org.eclipse.jdt.core.compiler.problem.enumIdentifier";

        $r0[7] = "org.eclipse.jdt.core.compiler.problem.fallthroughCase";

        $r0[8] = "org.eclipse.jdt.core.compiler.problem.fieldHiding";

        $r0[9] = "org.eclipse.jdt.core.compiler.problem.finalParameterBound";

        $r0[10] = "org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally";

        $r0[11] = "org.eclipse.jdt.core.compiler.problem.forbiddenReference";

        $r0[12] = "org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock";

        $r0[13] = "org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod";

        $r0[14] = "org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch";

        $r0[15] = "org.eclipse.jdt.core.compiler.problem.indirectStaticAccess";

        $r0[16] = "org.eclipse.jdt.core.compiler.problem.invalidJavadoc";

        $r0[17] = "org.eclipse.jdt.core.compiler.problem.localVariableHiding";

        $r0[18] = "org.eclipse.jdt.core.compiler.problem.methodWithConstructorName";

        $r0[19] = "org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation";

        $r0[20] = "org.eclipse.jdt.core.compiler.problem.missingJavadocComments";

        $r0[21] = "org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription";

        $r0[22] = "org.eclipse.jdt.core.compiler.problem.missingJavadocTags";

        $r0[23] = "org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation";

        $r0[24] = "org.eclipse.jdt.core.compiler.problem.missingSerialVersion";

        $r0[25] = "org.eclipse.jdt.core.compiler.problem.noEffectAssignment";

        $r0[26] = "org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion";

        $r0[27] = "org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral";

        $r0[28] = "org.eclipse.jdt.core.compiler.problem.staticAccessReceiver";

        $r0[29] = "org.eclipse.jdt.core.compiler.problem.nullReference";

        $r0[30] = "org.eclipse.jdt.core.compiler.problem.potentialNullReference";

        $r0[31] = "org.eclipse.jdt.core.compiler.problem.redundantNullCheck";

        $r0[32] = "org.eclipse.jdt.core.compiler.problem.redundantSuperinterface";

        $r0[33] = "org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod";

        $r0[34] = "org.eclipse.jdt.core.compiler.problem.parameterAssignment";

        $r0[35] = "org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment";

        $r0[36] = "org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation";

        $r0[37] = "org.eclipse.jdt.core.compiler.problem.typeParameterHiding";

        $r0[38] = "org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation";

        $r0[39] = "org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock";

        $r0[40] = "org.eclipse.jdt.core.compiler.problem.unnecessaryElse";

        $r0[41] = "org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck";

        $r0[42] = "org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess";

        $r0[43] = "org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException";

        $r0[44] = "org.eclipse.jdt.core.compiler.problem.unusedImport";

        $r0[45] = "org.eclipse.jdt.core.compiler.problem.unusedLocal";

        $r0[46] = "org.eclipse.jdt.core.compiler.problem.unusedParameter";

        $r0[47] = "org.eclipse.jdt.core.compiler.problem.unusedPrivateMember";

        $r0[48] = "org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast";

        $r0[49] = "org.eclipse.jdt.core.compiler.problem.unhandledWarningToken";

        $r0[50] = "org.eclipse.jdt.core.compiler.problem.unusedWarningToken";

        $r0[51] = "org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation";

        $r0[52] = "org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation";

        return $r0;
    }

    public static java.lang.String warningTokenFromIrritant(long)
    {
        byte $b2;
        int i4, i5;
        long l0, $l1, $l3;

        l0 := @parameter0: long;

        i4 = (int) l0;

        $l1 = (long) i4;

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label12;

        lookupswitch(i4)
        {
            case 4: goto label01;
            case 8: goto label03;
            case 16: goto label06;
            case 32: goto label06;
            case 128: goto label08;
            case 256: goto label04;
            case 1024: goto label06;
            case 2048: goto label07;
            case 32768: goto label06;
            case 65536: goto label03;
            case 131072: goto label03;
            case 4194304: goto label09;
            case 8388608: goto label06;
            case 16777216: goto label02;
            case 33554436: goto label01;
            case 67108864: goto label05;
            case 268435456: goto label07;
            case 1073741824: goto label10;
            default: goto label11;
        };

     label01:
        return "deprecation";

     label02:
        return "finally";

     label03:
        return "hiding";

     label04:
        return "nls";

     label05:
        return "cast";

     label06:
        return "unused";

     label07:
        return "static-access";

     label08:
        return "synthetic-access";

     label09:
        return "unqualified-field-access";

     label10:
        return "unchecked";

     label11:
        goto label24;

     label12:
        $l3 = l0 >>> 32;

        i5 = (int) $l3;

        lookupswitch(i5)
        {
            case 1: goto label13;
            case 4: goto label20;
            case 16: goto label21;
            case 32: goto label14;
            case 128: goto label15;
            case 512: goto label16;
            case 1024: goto label17;
            case 2048: goto label20;
            case 8192: goto label18;
            case 16384: goto label19;
            case 65536: goto label22;
            case 131072: goto label23;
            case 262144: goto label21;
            case 524288: goto label21;
            case 2097152: goto label19;
            case 8388608: goto label19;
            default: goto label24;
        };

     label13:
        return "serial";

     label14:
        return "boxing";

     label15:
        return "hiding";

     label16:
        return "incomplete-switch";

     label17:
        return "dep-ann";

     label18:
        return "unchecked";

     label19:
        return "unused";

     label20:
        return "restriction";

     label21:
        return "null";

     label22:
        return "fallthrough";

     label23:
        return "super";

     label24:
        return null;
    }

    public static long warningTokenToIrritants(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int $i0, $i2;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        char $c1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 0L;

     label02:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        tableswitch($i2)
        {
            case 97: goto label03;
            case 98: goto label04;
            case 99: goto label05;
            case 100: goto label06;
            case 101: goto label22;
            case 102: goto label08;
            case 103: goto label22;
            case 104: goto label10;
            case 105: goto label11;
            case 106: goto label22;
            case 107: goto label22;
            case 108: goto label22;
            case 109: goto label22;
            case 110: goto label12;
            case 111: goto label22;
            case 112: goto label22;
            case 113: goto label22;
            case 114: goto label14;
            case 115: goto label15;
            case 116: goto label22;
            case 117: goto label19;
            default: goto label22;
        };

     label03:
        $r19 = "all";

        $z18 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z18 == 0 goto label22;

        return -1L;

     label04:
        $r18 = "boxing";

        $z17 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z17 == 0 goto label22;

        return 137438953472L;

     label05:
        $r17 = "cast";

        $z16 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z16 == 0 goto label22;

        return 67108864L;

     label06:
        $r15 = "deprecation";

        $z14 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z14 == 0 goto label07;

        return 4L;

     label07:
        $r16 = "dep-ann";

        $z15 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z15 == 0 goto label22;

        return 4398046511104L;

     label08:
        $r13 = "fallthrough";

        $z12 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z12 == 0 goto label09;

        return 281474976710656L;

     label09:
        $r14 = "finally";

        $z13 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z13 == 0 goto label22;

        return 16777216L;

     label10:
        $r12 = "hiding";

        $z11 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z11 == 0 goto label11;

        return 549756010504L;

     label11:
        $r11 = "incomplete-switch";

        $z10 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z10 == 0 goto label22;

        return 2199023255552L;

     label12:
        $r9 = "nls";

        $z8 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z8 == 0 goto label13;

        return 256L;

     label13:
        $r10 = "null";

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z9 == 0 goto label22;

        return 3377768440004608L;

     label14:
        $r8 = "restriction";

        $z7 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z7 == 0 goto label22;

        return 8813272891392L;

     label15:
        $r4 = "serial";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label16;

        return 4294967296L;

     label16:
        $r5 = "static-access";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label17;

        return 268437504L;

     label17:
        $r6 = "synthetic-access";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z5 == 0 goto label18;

        return 128L;

     label18:
        $r7 = "super";

        $z6 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z6 == 0 goto label22;

        return 562949953421312L;

     label19:
        $r1 = "unused";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label20;

        return 45106365026305072L;

     label20:
        $r2 = "unchecked";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label21;

        return 35185445830656L;

     label21:
        $r3 = "unqualified-field-access";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label22;

        return 4194304L;

     label22:
        return 0L;
    }
}
