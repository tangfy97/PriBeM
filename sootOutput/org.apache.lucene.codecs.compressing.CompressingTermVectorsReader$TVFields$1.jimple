class org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 extends java.lang.Object implements java.util.Iterator
{
    int i;
    final org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1;

    void <init>(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields)
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 r0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1;

        r1 := @parameter0: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: int i> = 0;

        return;
    }

    public boolean hasNext()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 r0;
        int[] $r2;
        int $i0, $i1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1;

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: int i>;

        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1>;

        $r2 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields: int[] access$000(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields)>($r1);

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String next()
    {
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 r0;
        int[] $r2, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.String $r9;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader $r6;
        org.apache.lucene.index.FieldInfos $r7;
        java.util.NoSuchElementException $r10;
        boolean $z0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields $r1, $r3, $r5;
        org.apache.lucene.index.FieldInfo $r8;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1;

        $z0 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r10 = new java.util.NoSuchElementException;

        specialinvoke $r10.<java.util.NoSuchElementException: void <init>()>();

        throw $r10;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1>;

        $r2 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields: int[] access$100(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields)>($r1);

        $r3 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1>;

        $r4 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields: int[] access$000(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields)>($r3);

        $i0 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: int i>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: int i> = $i1;

        $i2 = $r4[$i0];

        i3 = $r2[$i2];

        $r5 = r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields this$1>;

        $r6 = $r5.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader this$0>;

        $r7 = staticinvoke <org.apache.lucene.codecs.compressing.CompressingTermVectorsReader: org.apache.lucene.index.FieldInfos access$200(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader)>($r6);

        $r8 = virtualinvoke $r7.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(int)>(i3);

        $r9 = $r8.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        return $r9;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 r1;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        java.lang.String $r1;
        org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1 r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1;

        $r1 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1: java.lang.String next()>();

        return $r1;
    }
}
