class com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools extends java.lang.Object
{

    void <init>()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void binDump(java.lang.String)
    {
        java.io.RandomAccessFile $r0;
        int $i0;
        java.io.IOException $r4;
        java.lang.String r1;
        java.nio.channels.FileChannel $r3;
        java.nio.ByteBuffer $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "r");

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        $r3 = virtualinvoke $r0.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

     label2:
        $i0 = virtualinvoke $r3.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>($r2);

        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        staticinvoke <org.apache.jena.atlas.lib.ByteBufferLib: void print(java.nio.ByteBuffer)>($r2);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label2;

     label4:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private static void bpt_scan_record_buffer(java.lang.String, boolean)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r1;
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.base.block.BlockMgrFactory: com.hp.hpl.jena.tdb.base.block.BlockMgr createStdFileNoCache(java.lang.String,int)>(r0, 8192);

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools: void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.block.BlockMgr,boolean)>($r1, z0);

        interfaceinvoke $r1.<com.hp.hpl.jena.tdb.base.block.BlockMgr: void close()>();

        return;
    }

    private static void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, boolean)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r1;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.block.BlockMgr getBlockMgr()>();

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools: void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.block.BlockMgr,boolean)>($r2, z0);

        return;
    }

    private static void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.block.BlockMgr, boolean)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr r2;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr $r1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        boolean z0;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.block.BlockMgr;

        z0 := @parameter1: boolean;

        r0 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordTripleFactory>;

        $r1 = new com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr: void <init>(com.hp.hpl.jena.tdb.base.record.RecordFactory,com.hp.hpl.jena.tdb.base.block.BlockMgr)>(r0, r2);

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeTools: void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr,boolean)>($r1, z0);

        return;
    }

    private static void bpt_scan_record_buffer(com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr, boolean)
    {
        java.lang.Float $r5;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr r6;
        com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage $r23;
        java.lang.Integer $r3, $r4, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r22;
        boolean z0;
        java.lang.Exception $r26;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r27, $r29, $r30;
        com.hp.hpl.jena.tdb.base.page.Page $r7;
        java.lang.Object[] $r1, $r9, $r13, $r20, $r24;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r31;
        java.io.PrintStream $r0, $r2, $r10, $r14, $r21, $r25, $r28;

        r6 := @parameter0: com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr;

        z0 := @parameter1: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("[Scan Records] start\n");

        i7 = 0;

        i8 = 0;

        i9 = 0;

        if z0 == 0 goto label1;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r6;

        virtualinvoke $r25.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("recordPageMgr = %s\n", $r24);

     label1:
        if i7 < 0 goto label5;

        if z0 == 0 goto label2;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = newarray (java.lang.Object)[1];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r20[0] = $r22;

        virtualinvoke $r21.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("idx = %d\n", $r20);

     label2:
        $r7 = virtualinvoke r6.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr: com.hp.hpl.jena.tdb.base.page.Page getRead(int)>(i7);

        $r23 = (com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage) $r7;

        if z0 == 0 goto label3;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = newarray (java.lang.Object)[5];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r13[0] = $r15;

        $i3 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getId()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r13[1] = $r16;

        $i4 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getLink()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r13[2] = $r17;

        $i5 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getCount()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r13[3] = $r18;

        $i6 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getMaxSize()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r13[4] = $r19;

        virtualinvoke $r14.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%04d :: id=%04d -> link=%04d [count=%d, max=%d]\n", $r13);

     label3:
        $r8 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()>();

        if z0 == 0 goto label4;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = newarray (java.lang.Object)[2];

        $i1 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int getSize()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[0] = $r11;

        $i2 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int maxSize()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9[1] = $r12;

        virtualinvoke $r10.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("     :: %d %d\n", $r9);

     label4:
        $i0 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        i9 = i9 + $i0;

        i7 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPage: int getLink()>();

        i8 = i8 + 1;

        virtualinvoke r6.<com.hp.hpl.jena.tdb.base.recordbuffer.RecordBufferPageMgr: void release(com.hp.hpl.jena.tdb.base.page.Page)>($r23);

        goto label1;

     label5:
        goto label7;

     label6:
        $r26 := @caughtexception;

        $r28 = <java.lang.System: java.io.PrintStream out>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r31);

     label7:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r1[1] = $r4;

        $f1 = (float) i9;

        $f0 = (float) i8;

        $f2 = $f1 / $f0;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r1[2] = $r5;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("[Scan Records] Count = %d in %d blocks (avg: %.2f)\n", $r1);

        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    private static void bpt_scan_nodes(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, boolean)
    {
        java.lang.Float $r10;
        java.lang.Object[] $r6, $r13, $r16;
        java.lang.Integer $r8, $r9, $r15;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r5;
        int i0, i1;
        java.lang.String $r23;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r3;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2, $r4;
        boolean z0;
        java.io.PrintStream $r0, $r7, $r12, $r14, $r17, $r20;
        java.lang.Exception $r18;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r11;
        float $f0, $f1, $f2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r1;
        java.lang.StringBuilder $r19, $r21, $r22;

        r3 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        z0 := @parameter1: boolean;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("[Scan Nodes] start\n");

        r1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: com.hp.hpl.jena.tdb.base.record.RecordFactory indexRecordTripleFactory>;

        $r2 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.base.block.BlockMgr getBlockMgr()>();

        specialinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.BlockMgr)>(r3, $r5);

        i0 = 0;

        i1 = 0;

        if z0 == 0 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = $r2;

        virtualinvoke $r17.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("BPTreeNodeMgr = %s\n", $r16);

     label1:
        if i0 < 0 goto label4;

        if z0 == 0 goto label2;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = newarray (java.lang.Object)[1];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[0] = $r15;

        virtualinvoke $r14.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("idx = %d\n", $r13);

     label2:
        $r11 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int,int)>(i0, 0);

        if $r11 != null goto label3;

        goto label4;

     label3:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>($r11);

        i1 = i1 + 1;

        i0 = i0 + 1;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void release(com.hp.hpl.jena.tdb.base.page.Page)>($r11);

        goto label1;

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label6:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = newarray (java.lang.Object)[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r9;

        $f1 = (float) 0;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r6[2] = $r10;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("[Scan Nodes] Count = %d in %d blocks (avg: %.2f)\n", $r6);

        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
