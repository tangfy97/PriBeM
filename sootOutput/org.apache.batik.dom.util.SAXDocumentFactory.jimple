public class org.apache.batik.dom.util.SAXDocumentFactory extends org.xml.sax.helpers.DefaultHandler implements org.xml.sax.ext.LexicalHandler, org.apache.batik.dom.util.DocumentFactory
{
    protected org.w3c.dom.DOMImplementation implementation;
    protected java.lang.String parserClassName;
    protected org.xml.sax.XMLReader parser;
    protected org.w3c.dom.Document document;
    protected org.apache.batik.dom.util.DocumentDescriptor documentDescriptor;
    protected boolean createDocumentDescriptor;
    protected org.w3c.dom.Node currentNode;
    protected org.xml.sax.Locator locator;
    protected java.lang.StringBuffer stringBuffer;
    protected boolean stringContent;
    protected boolean inDTD;
    protected boolean inCDATA;
    protected boolean inProlog;
    protected boolean isValidating;
    protected boolean isStandalone;
    protected java.lang.String xmlVersion;
    protected org.apache.batik.dom.util.HashTableStack namespaces;
    protected org.xml.sax.ErrorHandler errorHandler;
    protected java.util.List preInfo;
    static javax.xml.parsers.SAXParserFactory saxFactory;

    public void <init>(org.w3c.dom.DOMImplementation, java.lang.String)
    {
        java.lang.StringBuffer $r1;
        java.lang.String r3;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.w3c.dom.DOMImplementation r2;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: org.w3c.dom.DOMImplementation;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer> = $r1;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation implementation> = r2;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String parserClassName> = r3;

        return;
    }

    public void <init>(org.w3c.dom.DOMImplementation, java.lang.String, boolean)
    {
        java.lang.StringBuffer $r1;
        java.lang.String r3;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.w3c.dom.DOMImplementation r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: org.w3c.dom.DOMImplementation;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer> = $r1;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation implementation> = r2;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String parserClassName> = r3;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean createDocumentDescriptor> = z0;

        return;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.xml.sax.InputSource $r4;
        org.w3c.dom.Document $r5;
        java.lang.String r1, r2, r3;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.xml.sax.InputSource;

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r3);

        $r5 = virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>(r1, r2, r3, $r4);

        return $r5;
    }

    public org.w3c.dom.Document createDocument(java.lang.String) throws java.io.IOException
    {
        org.xml.sax.InputSource $r1;
        org.w3c.dom.Document $r3;
        java.lang.String r2;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.xml.sax.InputSource;

        specialinvoke $r1.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(org.xml.sax.InputSource)>($r1);

        return $r3;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.w3c.dom.Document $r6;
        java.lang.String r2, r4, r5;
        org.apache.batik.dom.util.SAXDocumentFactory r3;
        java.io.InputStream r1;

        r3 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r1 := @parameter3: java.io.InputStream;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

        $r6 = virtualinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>(r4, r5, r2, $r0);

        return $r6;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.w3c.dom.Document $r4;
        java.lang.String r2;
        org.apache.batik.dom.util.SAXDocumentFactory r3;
        java.io.InputStream r1;

        r3 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.InputStream;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

        $r4 = virtualinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(org.xml.sax.InputSource)>($r0);

        return $r4;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.w3c.dom.Document $r6;
        java.io.Reader r1;
        java.lang.String r2, r4, r5;
        org.apache.batik.dom.util.SAXDocumentFactory r3;

        r3 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r1 := @parameter3: java.io.Reader;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

        $r6 = virtualinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.InputSource)>(r4, r5, r2, $r0);

        return $r6;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.XMLReader) throws java.io.IOException
    {
        org.apache.batik.dom.util.SAXIOException $r5;
        org.apache.batik.dom.util.SAXDocumentFactory r1;
        java.io.InterruptedIOException $r6;
        java.lang.Exception $r4;
        org.xml.sax.XMLReader r0;
        org.w3c.dom.Document r9;
        org.xml.sax.SAXException $r3;
        java.lang.String r2, r7, r8;
        boolean $z0;

        r1 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r0 := @parameter3: org.xml.sax.XMLReader;

        interfaceinvoke r0.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>(r1);

        interfaceinvoke r0.<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>(r1);

        interfaceinvoke r0.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>(r1);

     label1:
        interfaceinvoke r0.<org.xml.sax.XMLReader: void parse(java.lang.String)>(r2);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.xml.sax.SAXException: java.lang.Exception getException()>();

        if $r4 == null goto label4;

        $z0 = $r4 instanceof java.io.InterruptedIOException;

        if $z0 == 0 goto label4;

        $r6 = (java.io.InterruptedIOException) $r4;

        throw $r6;

     label4:
        $r5 = new org.apache.batik.dom.util.SAXIOException;

        specialinvoke $r5.<org.apache.batik.dom.util.SAXIOException: void <init>(org.xml.sax.SAXException)>($r3);

        throw $r5;

     label5:
        r1.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = null;

        r9 = r1.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        r1.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document> = null;

        return r9;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    public org.w3c.dom.Document createDocument(java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.w3c.dom.Document $r4;
        java.io.Reader r1;
        java.lang.String r2;
        org.apache.batik.dom.util.SAXDocumentFactory r3;

        r3 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.Reader;

        $r0 = new org.xml.sax.InputSource;

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r1);

        virtualinvoke $r0.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r2);

        $r4 = virtualinvoke r3.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(org.xml.sax.InputSource)>($r0);

        return $r4;
    }

    protected org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.InputSource) throws java.io.IOException
    {
        org.apache.batik.dom.util.HashTableStack $r34;
        org.w3c.dom.Document $r2;
        boolean $z0, $z1, $z2;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r12, $r14, $r19, $r20, $r21, $r22, $r24, $r28, $r29, $r30, $r31, $r32, $r40, $r42, $r44;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String r4, r5, $r6, $r13, $r15, $r16, $r23, $r25, $r33, r35, r36, r37, $r38, $r39;
        org.xml.sax.InputSource r1;
        java.io.IOException $r41, $r43, $r45;
        org.w3c.dom.Element $r3;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r5 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r35 := @parameter2: java.lang.String;

        r1 := @parameter3: org.xml.sax.InputSource;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(org.xml.sax.InputSource)>(r1);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r36 = r4;

        r37 = r5;

        if r5 != null goto label4;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(58);

        $i7 = (int) -1;

        if $i0 == $i7 goto label1;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if $i0 != $i5 goto label2;

     label1:
        $r38 = "";

        goto label3;

     label2:
        $r38 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        $r34 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        r37 = virtualinvoke $r34.<org.apache.batik.dom.util.HashTableStack: java.lang.String get(java.lang.String)>($r38);

        $i9 = (int) -1;

        if $i0 == $i9 goto label4;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 == $i2 goto label4;

        $i3 = $i0 + 1;

        r36 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i3);

     label4:
        $r39 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r39 == r37 goto label6;

        if $r39 == null goto label5;

        $z2 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r37);

        if $z2 != 0 goto label6;

     label5:
        $r41 = new java.io.IOException;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Root element namespace does not match that requested:\nRequested: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r37);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r41;

     label6:
        if $r39 == null goto label7;

        $r16 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z1 != 0 goto label8;

        $r43 = new java.io.IOException;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Root element does not match that requested:\nRequested: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found: ");

        $r23 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r43.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r43;

     label7:
        $r6 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z0 != 0 goto label8;

        $r45 = new java.io.IOException;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Root element does not match that requested:\nRequested: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Found: ");

        $r13 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r45;

     label8:
        return $r2;
    }

    protected org.w3c.dom.Document createDocument(org.xml.sax.InputSource) throws java.io.IOException
    {
        org.apache.batik.dom.util.SAXIOException $r20;
        org.xml.sax.ErrorHandler $r8, $r29;
        org.w3c.dom.Document r30;
        javax.xml.parsers.SAXParser $r3;
        boolean $z0, $z1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        java.lang.Exception $r19;
        org.xml.sax.SAXException $r18;
        javax.xml.parsers.SAXParserFactory $r2;
        java.io.InterruptedIOException $r21;
        org.xml.sax.XMLReader $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r17;
        java.lang.StringBuffer $r24, $r25, $r27;
        java.lang.String $r1, $r16, $r26, $r28;
        org.xml.sax.InputSource r14;
        java.io.IOException $r23;
        javax.xml.parsers.ParserConfigurationException $r22;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r14 := @parameter0: org.xml.sax.InputSource;

     label01:
        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String parserClassName>;

        if $r1 == null goto label02;

        $r16 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String parserClassName>;

        $r17 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader(java.lang.String)>($r16);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser> = $r17;

        goto label06;

     label02:
        $r2 = <org.apache.batik.dom.util.SAXDocumentFactory: javax.xml.parsers.SAXParserFactory saxFactory>;

        $r3 = virtualinvoke $r2.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

     label03:
        goto label05;

     label04:
        $r22 := @caughtexception;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not create SAXParser: ");

        $r26 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label05:
        $r4 = virtualinvoke $r3.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser> = $r4;

     label06:
        $r5 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r5.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>(r0);

        $r6 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r6.<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>(r0);

        $r7 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r7.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>(r0);

        $r9 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        $r8 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.ErrorHandler errorHandler>;

        if $r8 != null goto label07;

        $r29 = r0;

        goto label08;

     label07:
        $r29 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.ErrorHandler errorHandler>;

     label08:
        interfaceinvoke $r9.<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>($r29);

        $r10 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r10.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", 1);

        $r11 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r11.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespace-prefixes", 1);

        $r12 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isValidating>;

        interfaceinvoke $r12.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/validation", $z0);

        $r13 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r13.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/properties/lexical-handler", r0);

        $r15 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r15.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>(r14);

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<org.xml.sax.SAXException: java.lang.Exception getException()>();

        if $r19 == null goto label11;

        $z1 = $r19 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label11;

        $r21 = (java.io.InterruptedIOException) $r19;

        throw $r21;

     label11:
        $r20 = new org.apache.batik.dom.util.SAXIOException;

        specialinvoke $r20.<org.apache.batik.dom.util.SAXIOException: void <init>(org.xml.sax.SAXException)>($r18);

        throw $r20;

     label12:
        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = null;

        r30 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document> = null;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.Locator locator> = null;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser> = null;

        return r30;

        catch javax.xml.parsers.ParserConfigurationException from label02 to label03 with label04;
        catch org.xml.sax.SAXException from label01 to label09 with label10;
    }

    public org.apache.batik.dom.util.DocumentDescriptor getDocumentDescriptor()
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.apache.batik.dom.util.DocumentDescriptor $r1;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.DocumentDescriptor documentDescriptor>;

        return $r1;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.xml.sax.Locator r1;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: org.xml.sax.Locator;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.Locator locator> = r1;

        return;
    }

    public void setValidating(boolean)
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isValidating> = z0;

        return;
    }

    public boolean isValidating()
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isValidating>;

        return $z0;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.xml.sax.ErrorHandler r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.ErrorHandler errorHandler> = r1;

        return;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)
    {
        java.lang.String r2;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.w3c.dom.DOMImplementation $r1;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation implementation>;

        return $r1;
    }

    public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.xml.sax.SAXParseException r0;
        org.apache.batik.dom.util.SAXDocumentFactory r1;

        r1 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.xml.sax.SAXParseException r0;
        org.apache.batik.dom.util.SAXDocumentFactory r1;

        r1 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r0 := @parameter0: org.xml.sax.SAXParseException;

        throw r0;
    }

    public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.xml.sax.SAXParseException r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: org.xml.sax.SAXParseException;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.apache.batik.dom.util.HashTableStack $r2, $r3, $r4, $r5;
        java.lang.StringBuffer $r6;
        org.apache.batik.dom.util.DocumentDescriptor $r7;
        java.util.LinkedList $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo> = $r1;

        $r2 = new org.apache.batik.dom.util.HashTableStack;

        specialinvoke $r2.<org.apache.batik.dom.util.HashTableStack: void <init>()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces> = $r2;

        $r3 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r3.<org.apache.batik.dom.util.HashTableStack: java.lang.String put(java.lang.String,java.lang.String)>("xml", "http://www.w3.org/XML/1998/namespace");

        $r4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r4.<org.apache.batik.dom.util.HashTableStack: java.lang.String put(java.lang.String,java.lang.String)>("xmlns", "http://www.w3.org/2000/xmlns/");

        $r5 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r5.<org.apache.batik.dom.util.HashTableStack: java.lang.String put(java.lang.String,java.lang.String)>("", null);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inDTD> = 0;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inCDATA> = 0;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inProlog> = 1;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = null;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document> = null;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isStandalone> = 0;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String xmlVersion> = "1.0";

        $r6 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer>;

        virtualinvoke $r6.<java.lang.StringBuffer: void setLength(int)>(0);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent> = 0;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean createDocumentDescriptor>;

        if $z0 == 0 goto label1;

        $r7 = new org.apache.batik.dom.util.DocumentDescriptor;

        specialinvoke $r7.<org.apache.batik.dom.util.DocumentDescriptor: void <init>()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.DocumentDescriptor documentDescriptor> = $r7;

        goto label2;

     label1:
        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.DocumentDescriptor documentDescriptor> = null;

     label2:
        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.HashTableStack $r4, $r7, $r9, $r16, $r45;
        org.w3c.dom.Document $r12, $r26, $r29, $r32, $r34;
        org.w3c.dom.DOMImplementation $r24, $r25;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        java.io.InterruptedIOException $r53;
        org.xml.sax.Locator $r20, $r21, $r23;
        org.xml.sax.XMLReader $r35, $r36;
        org.apache.batik.dom.util.DocumentDescriptor $r22;
        java.lang.String $r2, $r3, $r5, $r6, r8, $r10, $r15, $r17, $r18, $r19, $r38, r43, r44, r46, r47, r48, $r49, $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r27;
        org.xml.sax.SAXException $r54;
        org.apache.batik.dom.util.SAXDocumentFactory$PreInfo r51;
        org.xml.sax.SAXNotRecognizedException $r41, $r42;
        org.w3c.dom.Node $r11, $r14, $r33;
        org.xml.sax.Attributes r1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i15, $i17;
        java.util.Iterator $r28;
        char $c1;
        org.w3c.dom.Element $r13, $r30, r50;
        java.lang.Object $r31, $r37;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r43 := @parameter0: java.lang.String;

        r44 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        r1 := @parameter3: org.xml.sax.Attributes;

        $z0 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z0 == 0 goto label01;

        $r54 = new org.xml.sax.SAXException;

        $r53 = new java.io.InterruptedIOException;

        specialinvoke $r53.<java.io.InterruptedIOException: void <init>()>();

        specialinvoke $r54.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r53);

        throw $r54;

     label01:
        $z1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inProlog>;

        if $z1 == 0 goto label08;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inProlog> = 0;

     label02:
        $r35 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        $z7 = interfaceinvoke $r35.<org.xml.sax.XMLReader: boolean getFeature(java.lang.String)>("http://xml.org/sax/features/is-standalone");

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean isStandalone> = $z7;

     label03:
        goto label05;

     label04:
        $r42 := @caughtexception;

     label05:
        $r36 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.XMLReader parser>;

        $r37 = interfaceinvoke $r36.<org.xml.sax.XMLReader: java.lang.Object getProperty(java.lang.String)>("http://xml.org/sax/properties/document-xml-version");

        $r38 = (java.lang.String) $r37;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.String xmlVersion> = $r38;

     label06:
        goto label08;

     label07:
        $r41 := @caughtexception;

     label08:
        $i10 = interfaceinvoke r1.<org.xml.sax.Attributes: int getLength()>();

        $r45 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r45.<org.apache.batik.dom.util.HashTableStack: void push()>();

        r46 = null;

        i11 = 0;

        goto label17;

     label09:
        $r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i11);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 >= 5 goto label10;

        goto label16;

     label10:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("version");

        if $z2 == 0 goto label11;

        r46 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i11);

        goto label16;

     label11:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z3 != 0 goto label12;

        goto label16;

     label12:
        if $i0 != 5 goto label14;

        $r6 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i11);

        r47 = $r6;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 != 0 goto label13;

        r47 = null;

     label13:
        $r7 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r7.<org.apache.batik.dom.util.HashTableStack: java.lang.String put(java.lang.String,java.lang.String)>("", r47);

        goto label16;

     label14:
        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(5);

        $i13 = (int) $c1;

        if $i13 != 58 goto label16;

        $r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i11);

        r48 = $r3;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 0 goto label15;

        r48 = null;

     label15:
        $r4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(6);

        virtualinvoke $r4.<org.apache.batik.dom.util.HashTableStack: java.lang.String put(java.lang.String,java.lang.String)>($r5, r48);

     label16:
        i11 = i11 + 1;

     label17:
        if i11 < $i10 goto label09;

        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        $i4 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(58);

        $i15 = (int) -1;

        if $i4 == $i15 goto label18;

        $i8 = virtualinvoke r8.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        if $i4 != $i9 goto label19;

     label18:
        $r49 = "";

        goto label20;

     label19:
        $r49 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label20:
        $r9 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        $r10 = virtualinvoke $r9.<org.apache.batik.dom.util.HashTableStack: java.lang.String get(java.lang.String)>($r49);

        $r11 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        if $r11 != null goto label23;

        $r24 = virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String)>(r46);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation implementation> = $r24;

        $r25 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.DOMImplementation implementation>;

        $r26 = interfaceinvoke $r25.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>($r10, r8, null);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document> = $r26;

        $r27 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo>;

        $r28 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

        $r29 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        $r30 = interfaceinvoke $r29.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r50 = $r30;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = $r30;

        goto label22;

     label21:
        $r31 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.apache.batik.dom.util.SAXDocumentFactory$PreInfo) $r31;

        $r32 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        $r33 = interfaceinvoke r51.<org.apache.batik.dom.util.SAXDocumentFactory$PreInfo: org.w3c.dom.Node createNode(org.w3c.dom.Document)>($r32);

        $r34 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        interfaceinvoke $r34.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r33, $r30);

     label22:
        $z6 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label21;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo> = null;

        goto label24;

     label23:
        $r12 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r10, r8);

        r50 = $r13;

        $r14 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        interfaceinvoke $r14.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = $r13;

     label24:
        $z4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean createDocumentDescriptor>;

        if $z4 == 0 goto label25;

        $r20 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.Locator locator>;

        if $r20 == null goto label25;

        $r22 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.DocumentDescriptor documentDescriptor>;

        $r21 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.Locator locator>;

        $i6 = interfaceinvoke $r21.<org.xml.sax.Locator: int getLineNumber()>();

        $r23 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.xml.sax.Locator locator>;

        $i7 = interfaceinvoke $r23.<org.xml.sax.Locator: int getColumnNumber()>();

        virtualinvoke $r22.<org.apache.batik.dom.util.DocumentDescriptor: void setLocation(org.w3c.dom.Element,int,int)>(r50, $i6, $i7);

     label25:
        i12 = 0;

        goto label31;

     label26:
        $r15 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i12);

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z5 == 0 goto label27;

        $r19 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i12);

        interfaceinvoke r50.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", $r15, $r19);

        goto label30;

     label27:
        $i5 = virtualinvoke $r15.<java.lang.String: int indexOf(int)>(58);

        $i17 = (int) -1;

        if $i5 != $i17 goto label28;

        $r52 = null;

        goto label29;

     label28:
        $r16 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        $r17 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r52 = virtualinvoke $r16.<org.apache.batik.dom.util.HashTableStack: java.lang.String get(java.lang.String)>($r17);

     label29:
        $r18 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i12);

        interfaceinvoke r50.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>($r52, $r15, $r18);

     label30:
        i12 = i12 + 1;

     label31:
        if i12 < $i10 goto label26;

        return;

        catch org.xml.sax.SAXNotRecognizedException from label02 to label03 with label04;
        catch org.xml.sax.SAXNotRecognizedException from label05 to label06 with label07;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.apache.batik.dom.util.HashTableStack $r2;
        org.w3c.dom.Node $r1, $r3, $r4;
        java.lang.String r5, r6, r7;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode> = $r4;

     label1:
        $r2 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.apache.batik.dom.util.HashTableStack namespaces>;

        virtualinvoke $r2.<org.apache.batik.dom.util.HashTableStack: void pop()>();

        return;
    }

    public void appendStringData()
    {
        org.w3c.dom.Text r12;
        java.lang.StringBuffer $r1, $r3;
        org.w3c.dom.Document $r5, $r7;
        org.apache.batik.dom.util.SAXDocumentFactory$CDataInfo $r10;
        org.w3c.dom.Node $r4, $r6;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        java.util.List $r9, $r11;
        org.apache.batik.dom.util.SAXDocumentFactory$TextInfo $r8;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer>;

        virtualinvoke $r3.<java.lang.StringBuffer: void setLength(int)>(0);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent> = 0;

        $r4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        if $r4 != null goto label3;

        $z2 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inCDATA>;

        if $z2 == 0 goto label2;

        $r11 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo>;

        $r10 = new org.apache.batik.dom.util.SAXDocumentFactory$CDataInfo;

        specialinvoke $r10.<org.apache.batik.dom.util.SAXDocumentFactory$CDataInfo: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label6;

     label2:
        $r9 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo>;

        $r8 = new org.apache.batik.dom.util.SAXDocumentFactory$TextInfo;

        specialinvoke $r8.<org.apache.batik.dom.util.SAXDocumentFactory$TextInfo: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label6;

     label3:
        $z1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inCDATA>;

        if $z1 == 0 goto label4;

        $r7 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        r12 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r2);

        goto label5;

     label4:
        $r5 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        r12 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r2);

     label5:
        $r6 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r12);

     label6:
        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r2;
        int i0, i1;
        char[] r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent> = 1;

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r2;
        int i0, i1;
        char[] r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.lang.StringBuffer stringBuffer>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r1, i0, i1);

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent> = 1;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.w3c.dom.ProcessingInstruction $r6;
        org.apache.batik.dom.util.SAXDocumentFactory$ProcessingInstructionInfo $r7;
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        java.util.List $r8;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node $r1, $r5;
        java.lang.String r2, r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        $r1 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        if $r1 != null goto label2;

        $r8 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo>;

        $r7 = new org.apache.batik.dom.util.SAXDocumentFactory$ProcessingInstructionInfo;

        specialinvoke $r7.<org.apache.batik.dom.util.SAXDocumentFactory$ProcessingInstructionInfo: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r5 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        $r4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        $r6 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r2, r3);

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label3:
        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2, r3;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inDTD> = 1;

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inDTD> = 0;

        return;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inCDATA> = 1;

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean stringContent> = 1;

        return;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inCDATA> = 0;

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.batik.dom.util.SAXDocumentFactory r0;
        org.w3c.dom.Comment $r6;
        java.util.List $r8;
        org.apache.batik.dom.util.SAXDocumentFactory$CommentInfo $r7;
        org.w3c.dom.Document $r4;
        org.w3c.dom.Node $r3, $r5;
        int i0, i1;
        char[] r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.util.SAXDocumentFactory;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: boolean inDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.util.SAXDocumentFactory: void appendStringData()>();

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        $r3 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        if $r3 != null goto label2;

        $r8 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: java.util.List preInfo>;

        $r7 = new org.apache.batik.dom.util.SAXDocumentFactory$CommentInfo;

        specialinvoke $r7.<org.apache.batik.dom.util.SAXDocumentFactory$CommentInfo: void <init>(java.lang.String)>($r1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r5 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Node currentNode>;

        $r4 = r0.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document document>;

        $r6 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>($r1);

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

     label3:
        return;
    }

    static void <clinit>()
    {
        javax.xml.parsers.SAXParserFactory $r0;

        $r0 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        <org.apache.batik.dom.util.SAXDocumentFactory: javax.xml.parsers.SAXParserFactory saxFactory> = $r0;

        return;
    }
}
