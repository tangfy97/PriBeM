public abstract class org.codehaus.groovy.runtime.ConversionHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
    private java.lang.Object delegate;
    static java.lang.Class class$java$lang$Object;

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        org.codehaus.groovy.runtime.ConversionHandler r0;

        r0 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("delegate must not be null");

        throw $r2;

     label1:
        r0.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object delegate> = r1;

        return;
    }

    public java.lang.Object getDelegate()
    {
        java.lang.Object $r1;
        org.codehaus.groovy.runtime.ConversionHandler r0;

        r0 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        $r1 = r0.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object delegate>;

        return $r1;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r7;
        java.lang.Object[] r2;
        org.codehaus.groovy.runtime.ConversionHandler r1;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Object $r3, r4, $r5;
        java.lang.reflect.Method r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ConversionHandler: boolean isCoreObjectMethod(java.lang.reflect.Method)>(r0);

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object invokeCustom(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r4, r0, r2);

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public abstract java.lang.Object invokeCustom(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable;

    public boolean equals(java.lang.Object)
    {
        org.codehaus.groovy.runtime.ConversionHandler $r0, r2;
        java.lang.Object $r1, $r3, r4;
        boolean $z0, $z1, $z2;

        r2 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        r4 := @parameter0: java.lang.Object;

        $z0 = r4 instanceof java.lang.reflect.Proxy;

        if $z0 == 0 goto label1;

        r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r4);

     label1:
        $z1 = r4 instanceof org.codehaus.groovy.runtime.ConversionHandler;

        if $z1 == 0 goto label2;

        $r0 = (org.codehaus.groovy.runtime.ConversionHandler) r4;

        $r1 = virtualinvoke $r0.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object getDelegate()>();

        $r3 = r2.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object delegate>;

        $z2 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Object $r1;
        org.codehaus.groovy.runtime.ConversionHandler r0;

        r0 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        $r1 = r0.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object delegate>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.codehaus.groovy.runtime.ConversionHandler r0;

        r0 := @this: org.codehaus.groovy.runtime.ConversionHandler;

        $r1 = r0.<org.codehaus.groovy.runtime.ConversionHandler: java.lang.Object delegate>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static boolean isCoreObjectMethod(java.lang.reflect.Method)
    {
        java.lang.Class $r0, $r2, $r5;
        java.lang.String $r3, $r4;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.reflect.Method;

        $r0 = <org.codehaus.groovy.runtime.ConversionHandler: java.lang.Class class$java$lang$Object>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ConversionHandler: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.runtime.ConversionHandler: java.lang.Class class$java$lang$Object> = $r5;

        goto label2;

     label1:
        $r5 = <org.codehaus.groovy.runtime.ConversionHandler: java.lang.Class class$java$lang$Object>;

     label2:
        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r3 = "toString";

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
