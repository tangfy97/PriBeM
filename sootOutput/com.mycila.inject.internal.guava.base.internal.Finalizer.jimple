public class com.mycila.inject.internal.guava.base.internal.Finalizer extends java.lang.Thread
{
    private static final java.util.logging.Logger logger;
    private static final java.lang.String FINALIZABLE_REFERENCE;
    private final java.lang.ref.WeakReference finalizableReferenceClassReference;
    private final java.lang.ref.PhantomReference frqReference;
    private final java.lang.ref.ReferenceQueue queue;
    private static final java.lang.reflect.Field inheritableThreadLocals;

    public static java.lang.ref.ReferenceQueue startFinalizer(java.lang.Class, java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.internal.Finalizer $r2;
        java.lang.Class r0;
        java.lang.Object r3;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.ref.ReferenceQueue $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("com.mycila.inject.internal.guava.base.FinalizableReference");

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected com.google.common.base.FinalizableReference.");

        throw $r5;

     label1:
        $r2 = new com.mycila.inject.internal.guava.base.internal.Finalizer;

        specialinvoke $r2.<com.mycila.inject.internal.guava.base.internal.Finalizer: void <init>(java.lang.Class,java.lang.Object)>(r0, r3);

        virtualinvoke $r2.<com.mycila.inject.internal.guava.base.internal.Finalizer: void start()>();

        $r4 = $r2.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

        return $r4;
    }

    private void <init>(java.lang.Class, java.lang.Object)
    {
        java.lang.ref.PhantomReference $r6;
        java.lang.Throwable $r11;
        com.mycila.inject.internal.guava.base.internal.Finalizer r0;
        java.lang.reflect.Field $r9, $r10;
        java.util.logging.Logger $r13;
        java.lang.ref.ReferenceQueue $r3, $r8;
        java.util.logging.Level $r12;
        java.lang.Class $r1, r5;
        java.lang.Object r7;
        java.lang.String $r2;
        java.lang.ref.WeakReference $r4;

        r0 := @this: com.mycila.inject.internal.guava.base.internal.Finalizer;

        r5 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.Object;

        $r1 = class "Lcom/mycila/inject/internal/guava/base/internal/Finalizer;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>($r2);

        $r3 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue> = $r3;

        $r4 = new java.lang.ref.WeakReference;

        specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r5);

        r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.WeakReference finalizableReferenceClassReference> = $r4;

        $r6 = new java.lang.ref.PhantomReference;

        $r8 = r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r6.<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(r7, $r8);

        r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.PhantomReference frqReference> = $r6;

        virtualinvoke r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: void setDaemon(boolean)>(1);

     label1:
        $r9 = <com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals>;

        if $r9 == null goto label2;

        $r10 = <com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals>;

        virtualinvoke $r10.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, null);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r13 = <com.mycila.inject.internal.guava.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r12 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r12, "Failed to clear thread local values inherited by reference finalizer thread.", $r11);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void run()
    {
        java.lang.ref.Reference $r4;
        com.mycila.inject.internal.guava.base.internal.Finalizer r0;
        java.lang.InterruptedException $r2;
        com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown $r1;
        java.lang.ref.ReferenceQueue $r3;

        r0 := @this: com.mycila.inject.internal.guava.base.internal.Finalizer;

     label1:
        $r3 = r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

        $r4 = virtualinvoke $r3.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: void cleanUp(java.lang.ref.Reference)>($r4);

     label2:
        goto label1;

     label3:
        $r2 := @caughtexception;

        goto label1;

     label4:
        $r1 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown from label1 to label4 with label4;
    }

    private void cleanUp(java.lang.ref.Reference) throws com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown
    {
        java.lang.ref.PhantomReference $r2;
        java.lang.Throwable $r7;
        java.lang.Object[] $r3;
        com.mycila.inject.internal.guava.base.internal.Finalizer r0;
        com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown $r6;
        java.util.logging.Logger $r9;
        java.lang.ref.ReferenceQueue $r4;
        java.util.logging.Level $r8;
        java.lang.ref.Reference $r5, r10;
        java.lang.reflect.Method $r1;

        r0 := @this: com.mycila.inject.internal.guava.base.internal.Finalizer;

        r10 := @parameter0: java.lang.ref.Reference;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.reflect.Method getFinalizeReferentMethod()>();

     label1:
        virtualinvoke r10.<java.lang.ref.Reference: void clear()>();

        $r2 = r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.PhantomReference frqReference>;

        if r10 != $r2 goto label2;

        $r6 = new com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown;

        specialinvoke $r6.<com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown: void <init>(com.mycila.inject.internal.guava.base.internal.Finalizer$1)>(null);

        throw $r6;

     label2:
        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, $r3);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r9 = <com.mycila.inject.internal.guava.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, "Error cleaning up after reference.", $r7);

     label5:
        $r4 = r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.ReferenceQueue queue>;

        $r5 = virtualinvoke $r4.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r10 = $r5;

        if $r5 != null goto label1;

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private java.lang.reflect.Method getFinalizeReferentMethod() throws com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown
    {
        com.mycila.inject.internal.guava.base.internal.Finalizer r0;
        java.lang.NoSuchMethodException $r7;
        com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown $r6;
        java.lang.Class[] $r4;
        java.lang.AssertionError $r8;
        java.lang.Object $r2;
        java.lang.Class r3;
        java.lang.ref.WeakReference $r1;
        java.lang.reflect.Method $r5;

        r0 := @this: com.mycila.inject.internal.guava.base.internal.Finalizer;

        $r1 = r0.<com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.ref.WeakReference finalizableReferenceClassReference>;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r3 = (java.lang.Class) $r2;

        if r3 != null goto label1;

        $r6 = new com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown;

        specialinvoke $r6.<com.mycila.inject.internal.guava.base.internal.Finalizer$ShutDown: void <init>(com.mycila.inject.internal.guava.base.internal.Finalizer$1)>(null);

        throw $r6;

     label1:
        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("finalizeReferent", $r4);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Field getInheritableThreadLocalsField()
    {
        java.lang.Throwable $r2;
        java.lang.Class $r0;
        java.lang.reflect.Field $r1;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r3;

     label1:
        $r0 = class "Ljava/lang/Thread;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("inheritableThreadLocals");

        virtualinvoke $r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r4 = <com.mycila.inject.internal.guava.base.internal.Finalizer: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r3, "Couldn\'t access Thread.inheritableThreadLocals. Reference finalizer threads will inherit thread local values.");

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        java.lang.reflect.Field $r3;

        <com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.String FINALIZABLE_REFERENCE> = "com.mycila.inject.internal.guava.base.FinalizableReference";

        $r0 = class "Lcom/mycila/inject/internal/guava/base/internal/Finalizer;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.mycila.inject.internal.guava.base.internal.Finalizer: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.reflect.Field getInheritableThreadLocalsField()>();

        <com.mycila.inject.internal.guava.base.internal.Finalizer: java.lang.reflect.Field inheritableThreadLocals> = $r3;

        return;
    }
}
