final class kodkod.util.ints.TreeSequence$DescendingIterator extends kodkod.util.ints.TreeSequence$EntryIterator
{
    final kodkod.util.ints.TreeSequence this$0;

    void <init>(kodkod.util.ints.TreeSequence, int, int)
    {
        kodkod.util.ints.IntTree$Node $r3;
        kodkod.util.ints.TreeSequence$Entry $r4;
        kodkod.util.ints.TreeSequence r1;
        int i0, i1;
        kodkod.util.ints.TreeSequence$DescendingIterator r0;
        kodkod.util.ints.IntTree $r2;

        r0 := @this: kodkod.util.ints.TreeSequence$DescendingIterator;

        r1 := @parameter0: kodkod.util.ints.TreeSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence this$0> = r1;

        $r2 = staticinvoke <kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.TreeSequence)>(r1);

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i0);

        $r4 = (kodkod.util.ints.TreeSequence$Entry) $r3;

        specialinvoke r0.<kodkod.util.ints.TreeSequence$EntryIterator: void <init>(kodkod.util.ints.TreeSequence,kodkod.util.ints.TreeSequence$Entry,int)>(r1, $r4, i1);

        return;
    }

    final void advance()
    {
        kodkod.util.ints.IntTree$Node $r4;
        kodkod.util.ints.TreeSequence$Entry $r3, $r5;
        kodkod.util.ints.TreeSequence $r1;
        kodkod.util.ints.TreeSequence$DescendingIterator r0;
        kodkod.util.ints.IntTree $r2;

        r0 := @this: kodkod.util.ints.TreeSequence$DescendingIterator;

        $r1 = r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence this$0>;

        $r2 = staticinvoke <kodkod.util.ints.TreeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.TreeSequence)>($r1);

        $r3 = r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence$Entry next>;

        $r4 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)>($r3);

        $r5 = (kodkod.util.ints.TreeSequence$Entry) $r4;

        r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence$Entry next> = $r5;

        return;
    }

    public boolean hasNext()
    {
        kodkod.util.ints.TreeSequence$Entry $r1, $r2;
        int $i0, $i1;
        kodkod.util.ints.TreeSequence$DescendingIterator r0;

        r0 := @this: kodkod.util.ints.TreeSequence$DescendingIterator;

        $r1 = r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence$Entry next>;

        if $r1 == null goto label1;

        $r2 = r0.<kodkod.util.ints.TreeSequence$DescendingIterator: kodkod.util.ints.TreeSequence$Entry next>;

        $i1 = $r2.<kodkod.util.ints.TreeSequence$Entry: int key>;

        $i0 = r0.<kodkod.util.ints.TreeSequence$DescendingIterator: int endIndex>;

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
