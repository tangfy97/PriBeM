public class org.mortbay.xml.XmlConfiguration extends java.lang.Object
{
    private static java.lang.Class[] __primitives;
    private static java.lang.Class[] __primitiveHolders;
    private static final java.lang.Integer ZERO;
    private static org.mortbay.xml.XmlParser __parser;
    private org.mortbay.xml.XmlParser$Node _config;
    private java.util.Map _idMap;
    private java.util.Map _propertyMap;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$Character;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$java$lang$Void;
    static java.lang.Class class$org$mortbay$xml$XmlConfiguration;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$net$URL;
    static java.lang.Class class$java$net$InetAddress;

    private static synchronized void initParser() throws java.io.IOException
    {
        java.net.URL $r3;
        org.mortbay.xml.XmlParser $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r20;
        java.lang.Class $r2, $r21;
        java.lang.ClassNotFoundException $r19;

        $r0 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        if $r0 == null goto label1;

        return;

     label1:
        $r1 = new org.mortbay.xml.XmlParser;

        specialinvoke $r1.<org.mortbay.xml.XmlParser: void <init>()>();

        <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser> = $r1;

     label2:
        $r2 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

        if $r2 != null goto label3;

        $r21 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("org.mortbay.xml.XmlConfiguration");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration> = $r21;

        goto label4;

     label3:
        $r21 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

     label4:
        $r3 = staticinvoke <org.mortbay.util.Loader: java.net.URL getResource(java.lang.Class,java.lang.String,boolean)>($r21, "org/mortbay/xml/configure_6_0.dtd", 1);

        $r4 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r4.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("configure.dtd", $r3);

        $r5 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r5.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("configure_1_3.dtd", $r3);

        $r6 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r6.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("http://jetty.mortbay.org/configure.dtd", $r3);

        $r7 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r7.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("-//Mort Bay Consulting//DTD Configure//EN", $r3);

        $r8 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r8.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("http://jetty.mortbay.org/configure_1_3.dtd", $r3);

        $r9 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r9.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("-//Mort Bay Consulting//DTD Configure 1.3//EN", $r3);

        $r10 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r10.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("configure_1_2.dtd", $r3);

        $r11 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r11.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("http://jetty.mortbay.org/configure_1_2.dtd", $r3);

        $r12 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r12.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("-//Mort Bay Consulting//DTD Configure 1.2//EN", $r3);

        $r13 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r13.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("configure_1_1.dtd", $r3);

        $r14 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r14.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("http://jetty.mortbay.org/configure_1_1.dtd", $r3);

        $r15 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r15.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("-//Mort Bay Consulting//DTD Configure 1.1//EN", $r3);

        $r16 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r16.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("configure_1_0.dtd", $r3);

        $r17 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r17.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("http://jetty.mortbay.org/configure_1_0.dtd", $r3);

        $r18 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        virtualinvoke $r18.<org.mortbay.xml.XmlParser: void redirectEntity(java.lang.String,java.net.URL)>("-//Mort Bay Consulting//DTD Configure 1.0//EN", $r3);

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r20);

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.Throwable)>($r19);

     label7:
        return;

        catch java.lang.ClassNotFoundException from label2 to label5 with label6;
    }

    public void <init>(java.net.URL) throws org.xml.sax.SAXException, java.io.IOException
    {
        java.lang.Throwable $r8;
        org.mortbay.xml.XmlConfiguration r0;
        java.net.URL r4;
        org.mortbay.xml.XmlParser $r3, $r5;
        java.util.HashMap $r1, $r2;
        org.mortbay.xml.XmlParser$Node $r7;
        java.lang.String $r6;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r4 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap> = $r2;

        staticinvoke <org.mortbay.xml.XmlConfiguration: void initParser()>();

        $r3 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        entermonitor $r3;

     label1:
        $r5 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        $r6 = virtualinvoke r4.<java.net.URL: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<org.mortbay.xml.XmlParser: org.mortbay.xml.XmlParser$Node parse(java.lang.String)>($r6);

        r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config> = $r7;

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(java.lang.String) throws org.xml.sax.SAXException, java.io.IOException
    {
        java.lang.Throwable $r12;
        org.xml.sax.InputSource $r7;
        org.mortbay.xml.XmlConfiguration r0;
        org.mortbay.xml.XmlParser $r9, $r10;
        java.util.HashMap $r1, $r2;
        java.io.StringReader $r8;
        java.lang.StringBuffer $r3, $r4, $r5;
        org.mortbay.xml.XmlParser$Node $r11;
        java.lang.String $r6, r13;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r13 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap> = $r2;

        staticinvoke <org.mortbay.xml.XmlConfiguration: void initParser()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?>\n<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure 1.2//EN\" \"http://jetty.mortbay.org/configure_1_2.dtd\">");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new org.xml.sax.InputSource;

        $r8 = new java.io.StringReader;

        specialinvoke $r8.<java.io.StringReader: void <init>(java.lang.String)>($r6);

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r8);

        $r9 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        entermonitor $r9;

     label1:
        $r10 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        $r11 = virtualinvoke $r10.<org.mortbay.xml.XmlParser: org.mortbay.xml.XmlParser$Node parse(org.xml.sax.InputSource)>($r7);

        r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config> = $r11;

        exitmonitor $r9;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        exitmonitor $r9;

     label4:
        throw $r12;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(java.io.InputStream) throws org.xml.sax.SAXException, java.io.IOException
    {
        java.lang.Throwable $r8;
        org.xml.sax.InputSource $r3;
        org.mortbay.xml.XmlConfiguration r0;
        org.mortbay.xml.XmlParser $r5, $r6;
        java.util.HashMap $r1, $r2;
        org.mortbay.xml.XmlParser$Node $r7;
        java.io.InputStream r4;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r4 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap> = $r2;

        staticinvoke <org.mortbay.xml.XmlConfiguration: void initParser()>();

        $r3 = new org.xml.sax.InputSource;

        specialinvoke $r3.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r4);

        $r5 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        entermonitor $r5;

     label1:
        $r6 = <org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser __parser>;

        $r7 = virtualinvoke $r6.<org.mortbay.xml.XmlParser: org.mortbay.xml.XmlParser$Node parse(org.xml.sax.InputSource)>($r3);

        r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config> = $r7;

        exitmonitor $r5;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r5;

     label4:
        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Map getIdMap()
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.util.Map $r1;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        $r1 = r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        return $r1;
    }

    public void setIdMap(java.util.Map)
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.util.Map r1;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r1 := @parameter0: java.util.Map;

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap> = r1;

        return;
    }

    public void setProperties(java.util.Map)
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.util.Map r1;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r1 := @parameter0: java.util.Map;

        r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap> = r1;

        return;
    }

    public java.util.Map getProperties()
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.util.Map $r1;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        $r1 = r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap>;

        return $r1;
    }

    public void configure(java.lang.Object) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuffer $r6, $r7, $r8;
        org.mortbay.xml.XmlParser$Node $r1, $r4;
        java.lang.Class $r2;
        java.lang.Object r3;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config>;

        $r2 = specialinvoke r0.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Object is not of type ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config>;

        specialinvoke r0.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>(r3, $r4, 0);

        return;
    }

    public java.lang.Object configure() throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.lang.ClassCastException $r7;
        java.util.Map $r5;
        org.mortbay.xml.XmlParser$Node $r1, $r3, $r6;
        java.lang.Class $r2;
        java.lang.Object $r9, r10;
        java.lang.String $r4, $r8;
        boolean $z0;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        $r1 = r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config>;

        $r2 = specialinvoke r0.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>($r1);

        $r3 = r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config>;

        $r4 = virtualinvoke $r3.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        if $r4 != null goto label1;

        $r9 = null;

        goto label2;

     label1:
        $r5 = r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        $r9 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

     label2:
        r10 = $r9;

        if $r9 != null goto label3;

        if $r2 == null goto label3;

        r10 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

     label3:
        if $r2 == null goto label4;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r10);

        if $z0 != 0 goto label4;

        $r7 = new java.lang.ClassCastException;

        $r8 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r6 = r0.<org.mortbay.xml.XmlConfiguration: org.mortbay.xml.XmlParser$Node _config>;

        specialinvoke r0.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>(r10, $r6, 0);

        return r10;
    }

    private java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node) throws java.lang.ClassNotFoundException
    {
        org.mortbay.xml.XmlConfiguration r4;
        org.mortbay.xml.XmlParser$Node r0;
        java.lang.Class $r2, $r3, $r5;
        java.lang.String $r1;

        r4 := @this: org.mortbay.xml.XmlConfiguration;

        r0 := @parameter0: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("class");

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

        if $r2 != null goto label2;

        $r5 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("org.mortbay.xml.XmlConfiguration");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration> = $r5;

        goto label3;

     label2:
        $r5 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

     label3:
        $r3 = staticinvoke <org.mortbay.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String,boolean)>($r5, $r1, 1);

        return $r3;
    }

    private void configure(java.lang.Object, org.mortbay.xml.XmlParser$Node, int) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r13;
        org.mortbay.xml.XmlConfiguration r18;
        java.util.Map $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Exception $r21;
        java.lang.StringBuffer $r14, $r15, $r16, $r22, $r23, $r24;
        int i0, $i1;
        org.mortbay.xml.XmlParser$Node r0, r3;
        java.lang.String $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r17, $r25, $r26;
        java.lang.Object $r2, r19;

        r18 := @this: org.mortbay.xml.XmlConfiguration;

        r19 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        if $r1 == null goto label01;

        $r20 = r18.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r19);

     label01:
        $i1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        if i0 >= $i1 goto label15;

        $r2 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i0);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        goto label14;

     label02:
        r3 = (org.mortbay.xml.XmlParser$Node) $r2;

     label03:
        $r4 = virtualinvoke r3.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $r5 = "Set";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label04;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: void set(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label04:
        $r6 = "Put";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label05;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: void put(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label05:
        $r7 = "Call";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label06;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object call(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label06:
        $r8 = "Get";

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label07;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object get(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label07:
        $r9 = "New";

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z5 == 0 goto label08;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object newObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label08:
        $r10 = "Array";

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z6 == 0 goto label09;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object newArray(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label09:
        $r11 = "Ref";

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z7 == 0 goto label10;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object refObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label10:
        $r12 = "Property";

        $z8 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z8 == 0 goto label11;

        specialinvoke r18.<org.mortbay.xml.XmlConfiguration: java.lang.Object propertyObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r19, r3);

        goto label12;

     label11:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown tag: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label12:
        goto label14;

     label13:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Config error at ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        $r26 = virtualinvoke $r21.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Object)>($r25, $r26);

        throw $r21;

     label14:
        i0 = i0 + 1;

        goto label01;

     label15:
        return;

        catch java.lang.Exception from label03 to label12 with label13;
    }

    private void set(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r10;
        java.lang.NoSuchFieldException $r41, $r46;
        java.lang.Object[] $r12;
        java.lang.reflect.Constructor $r63;
        java.lang.StringBuffer $r2, $r3, $r6, $r8, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r66, $r67, $r68, $r69, $r70, $r72, $r73;
        java.lang.String $r1, $r4, $r5, $r7, $r9, $r24, $r36, $r53, $r74;
        java.lang.Class[] $r14, $r30, $r31, $r32, $r34, $r38;
        java.lang.reflect.Field $r56, $r60;
        java.lang.NoSuchMethodException $r28, $r43, $r47, $r65;
        java.lang.reflect.Method[] $r42;
        java.lang.InstantiationException $r26;
        java.lang.reflect.Method $r35, $r37, $r39, $r54, $r59, r61;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalAccessException $r27, $r29, $r44, $r48;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.mortbay.xml.XmlParser$Node r0;
        java.lang.IllegalArgumentException $r40, $r45, $r49;
        java.lang.Object $r11, r50, $r57, $r64;
        java.lang.Class $r13, $r15, $r25, $r33, r51, $r52, $r55, $r58, r62, $r71;

        r10 := @this: org.mortbay.xml.XmlConfiguration;

        r50 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set");

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = specialinvoke r10.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r50, r0);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r11;

        $r13 = specialinvoke r10.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>(r0);

        r51 = $r13;

        if $r13 == null goto label01;

        r50 = null;

        goto label02;

     label01:
        r51 = virtualinvoke r50.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $r14 = newarray (java.lang.Class)[1];

        $r15 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object>;

        if $r15 != null goto label03;

        $r52 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object> = $r52;

        goto label04;

     label03:
        $r52 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object>;

     label04:
        $r14[0] = $r52;

        if $r11 == null goto label05;

        $r25 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $r14[0] = $r25;

     label05:
        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label08;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML ");

        if r50 == null goto label06;

        $r53 = virtualinvoke r50.<java.lang.Object: java.lang.String toString()>();

        goto label07;

     label06:
        $r53 = virtualinvoke r51.<java.lang.Class: java.lang.String getName()>();

     label07:
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r24);

     label08:
        $r54 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r9, $r14);

        virtualinvoke $r54.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r50, $r12);

     label09:
        return;

     label10:
        $r49 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r49);

        goto label13;

     label11:
        $r48 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r48);

        goto label13;

     label12:
        $r47 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r47);

     label13:
        $r55 = $r14[0];

        $r56 = virtualinvoke $r55.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TYPE");

        $r57 = virtualinvoke $r56.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r58 = (java.lang.Class) $r57;

        $r14[0] = $r58;

        $r59 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r9, $r14);

        virtualinvoke $r59.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r50, $r12);

     label14:
        return;

     label15:
        $r46 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r46);

        goto label19;

     label16:
        $r45 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r45);

        goto label19;

     label17:
        $r44 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r44);

        goto label19;

     label18:
        $r43 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r43);

     label19:
        $r60 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r1);

        $i3 = virtualinvoke $r60.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z4 == 0 goto label21;

        virtualinvoke $r60.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r50, $r11);

     label20:
        return;

     label21:
        goto label23;

     label22:
        $r41 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r41);

     label23:
        $r42 = virtualinvoke r51.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        r61 = null;

        i4 = 0;

     label24:
        if $r42 == null goto label30;

        $i1 = lengthof $r42;

        if i4 >= $i1 goto label30;

        $r35 = $r42[i4];

        $r36 = virtualinvoke $r35.<java.lang.reflect.Method: java.lang.String getName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z3 == 0 goto label29;

        $r37 = $r42[i4];

        $r38 = virtualinvoke $r37.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r38;

        if $i2 != 1 goto label29;

     label25:
        r61 = $r42[i4];

        $r39 = $r42[i4];

        virtualinvoke $r39.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r50, $r12);

     label26:
        return;

     label27:
        $r40 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r40);

        goto label29;

     label28:
        $r29 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r29);

     label29:
        i4 = i4 + 1;

        goto label24;

     label30:
        if r61 == null goto label39;

     label31:
        $r30 = virtualinvoke r61.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r62 = $r30[0];

        $z1 = virtualinvoke r62.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label34;

        i5 = 0;

     label32:
        $r31 = <org.mortbay.xml.XmlConfiguration: java.lang.Class[] __primitives>;

        $i0 = lengthof $r31;

        if i5 >= $i0 goto label34;

        $r32 = <org.mortbay.xml.XmlConfiguration: java.lang.Class[] __primitives>;

        $r33 = $r32[i5];

        $z2 = virtualinvoke r62.<java.lang.Object: boolean equals(java.lang.Object)>($r33);

        if $z2 == 0 goto label33;

        $r34 = <org.mortbay.xml.XmlConfiguration: java.lang.Class[] __primitiveHolders>;

        r62 = $r34[i5];

        goto label34;

     label33:
        i5 = i5 + 1;

        goto label32;

     label34:
        $r63 = virtualinvoke r62.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

        $r64 = virtualinvoke $r63.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r12);

        $r12[0] = $r64;

        virtualinvoke r61.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r50, $r12);

     label35:
        return;

     label36:
        $r28 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r28);

        goto label39;

     label37:
        $r27 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r27);

        goto label39;

     label38:
        $r26 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r26);

     label39:
        $r65 = new java.lang.NoSuchMethodException;

        $r66 = new java.lang.StringBuffer;

        specialinvoke $r66.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r51);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r71 = $r14[0];

        $r72 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r65.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r74);

        throw $r65;

        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label08 to label09 with label11;
        catch java.lang.NoSuchMethodException from label08 to label09 with label12;
        catch java.lang.NoSuchFieldException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label13 to label14 with label16;
        catch java.lang.IllegalAccessException from label13 to label14 with label17;
        catch java.lang.NoSuchMethodException from label13 to label14 with label18;
        catch java.lang.NoSuchFieldException from label19 to label20 with label22;
        catch java.lang.IllegalArgumentException from label25 to label26 with label27;
        catch java.lang.IllegalAccessException from label25 to label26 with label28;
        catch java.lang.NoSuchMethodException from label31 to label35 with label36;
        catch java.lang.IllegalAccessException from label31 to label35 with label37;
        catch java.lang.InstantiationException from label31 to label35 with label38;
    }

    private void put(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r18;
        java.util.Map r1;
        org.mortbay.xml.XmlParser$Node r2;
        java.lang.String $r3, $r14, $r19;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r15;
        java.lang.Object r0, $r5;

        r4 := @this: org.mortbay.xml.XmlConfiguration;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $z0 = r0 instanceof java.util.Map;

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Object for put is not a Map: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label1:
        r1 = (java.util.Map) r0;

        $r3 = virtualinvoke r2.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $r5 = specialinvoke r4.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r0, r2);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $z1 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".put(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r14);

     label2:
        return;
    }

    private java.lang.Object get(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r0;
        java.lang.Object[] $r15;
        java.lang.NoSuchMethodException $r23;
        java.lang.NoSuchFieldException $r22;
        java.lang.StringBuffer $r5, $r6, $r9, $r11, $r18, $r19, $r20;
        java.util.Map $r17;
        org.mortbay.xml.XmlParser$Node r1;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r12, $r21;
        java.lang.reflect.Method $r14;
        boolean $z0;
        java.lang.Class[] $r13;
        java.lang.reflect.Field $r24;
        java.lang.Class $r2, r27;
        java.lang.Object $r16, $r25, r26;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r26 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r2 = specialinvoke r0.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>(r1);

        r27 = $r2;

        if $r2 == null goto label01;

        r26 = null;

        goto label02;

     label01:
        r27 = virtualinvoke r26.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $r3 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $r4 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML get ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r21);

     label03:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get");

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toUpperCase()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = (java.lang.Class[]) null;

        $r14 = virtualinvoke r27.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r12, $r13);

        $r15 = (java.lang.Object[]) null;

        $r16 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r26, $r15);

        r26 = $r16;

        specialinvoke r0.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>($r16, r1, 0);

     label04:
        goto label09;

     label05:
        $r23 := @caughtexception;

     label06:
        $r24 = virtualinvoke r27.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r3);

        $r25 = virtualinvoke $r24.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r26);

        r26 = $r25;

        specialinvoke r0.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>($r25, r1, 0);

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        throw $r23;

     label09:
        if $r4 == null goto label10;

        $r17 = r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r26);

     label10:
        return r26;

        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
        catch java.lang.NoSuchFieldException from label06 to label07 with label08;
    }

    private java.lang.Object call(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r6;
        org.mortbay.xml.XmlConfiguration r2;
        java.lang.reflect.Method[] $r5;
        java.util.Map $r19;
        java.lang.reflect.Method $r13, $r15, $r17, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.IllegalAccessException $r36;
        java.lang.Object[] $r32;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        org.mortbay.xml.XmlParser$Node r0, $r27, $r30;
        java.lang.String $r1, $r4, $r12, $r14, $r25, $r31, $r34;
        java.lang.Class[] $r16;
        java.lang.IllegalArgumentException $r33, $r35;
        java.lang.Class $r3, $r21, r38;
        java.lang.Object $r26, $r28, $r29, r37, r39;

        r2 := @this: org.mortbay.xml.XmlConfiguration;

        r37 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r3 = specialinvoke r2.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>(r0);

        r38 = $r3;

        if $r3 == null goto label01;

        r37 = null;

        goto label02;

     label01:
        if r37 == null goto label02;

        r38 = virtualinvoke r37.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        if r38 != null goto label03;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label03:
        i5 = 0;

        i6 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        i7 = 0;

     label04:
        $i0 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        if i7 >= $i0 goto label08;

        $r29 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i7);

        $z4 = $r29 instanceof java.lang.String;

        if $z4 == 0 goto label05;

        goto label07;

     label05:
        $r30 = (org.mortbay.xml.XmlParser$Node) $r29;

        $r31 = virtualinvoke $r30.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $z5 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>("Arg");

        if $z5 != 0 goto label06;

        i6 = i7;

        goto label08;

     label06:
        i5 = i5 + 1;

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        $r32 = newarray (java.lang.Object)[i5];

        i8 = 0;

        i9 = 0;

     label09:
        if i9 >= i5 goto label12;

        $r26 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i8);

        $z3 = $r26 instanceof java.lang.String;

        if $z3 == 0 goto label10;

        goto label11;

     label10:
        $i4 = i9;

        i9 = i9 + 1;

        $r27 = (org.mortbay.xml.XmlParser$Node) $r26;

        $r28 = specialinvoke r2.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r37, $r27);

        $r32[$i4] = $r28;

     label11:
        i8 = i8 + 1;

        goto label09;

     label12:
        $r4 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label13;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML call ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r25);

     label13:
        $r5 = virtualinvoke r38.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i10 = 0;

     label14:
        if $r5 == null goto label28;

        $i1 = lengthof $r5;

        if i10 >= $i1 goto label28;

        $r13 = $r5[i10];

        $r14 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label15;

        goto label27;

     label15:
        $r15 = $r5[i10];

        $r16 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r16;

        if $i2 == i5 goto label16;

        goto label27;

     label16:
        $r17 = $r5[i10];

        $i3 = virtualinvoke $r17.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if r37 != null goto label17;

        $z6 = 1;

        goto label18;

     label17:
        $z6 = 0;

     label18:
        if $z2 == $z6 goto label19;

        goto label27;

     label19:
        if r37 != null goto label20;

        $r20 = $r5[i10];

        $r21 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r21 == r38 goto label20;

        goto label27;

     label20:
        r39 = null;

        z7 = 0;

     label21:
        $r18 = $r5[i10];

        r39 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r37, $r32);

        z7 = 1;

     label22:
        goto label25;

     label23:
        $r36 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r36);

        goto label25;

     label24:
        $r35 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r35);

     label25:
        if z7 == 0 goto label27;

        if $r1 == null goto label26;

        $r19 = r2.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r39);

     label26:
        specialinvoke r2.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>(r39, r0, i6);

        return r39;

     label27:
        i10 = i10 + 1;

        goto label14;

     label28:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No Method: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r38);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r6;

        catch java.lang.IllegalAccessException from label21 to label22 with label23;
        catch java.lang.IllegalArgumentException from label21 to label22 with label24;
    }

    private java.lang.Object newObj(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r5;
        org.mortbay.xml.XmlConfiguration r0;
        java.util.Map $r16;
        java.lang.InstantiationException $r29;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.IllegalAccessException $r30;
        java.lang.Object[] $r27;
        java.lang.reflect.Constructor $r13, $r15;
        java.lang.reflect.Constructor[] $r4;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        org.mortbay.xml.XmlParser$Node r1, $r22, $r25;
        java.lang.String $r3, $r12, $r20, $r26;
        java.lang.Class[] $r14;
        java.lang.IllegalArgumentException $r28;
        java.lang.Class $r2;
        java.lang.Object r10, $r21, $r23, $r24, r31;

        r0 := @this: org.mortbay.xml.XmlConfiguration;

        r10 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r2 = specialinvoke r0.<org.mortbay.xml.XmlConfiguration: java.lang.Class nodeClass(org.mortbay.xml.XmlParser$Node)>(r1);

        $r3 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        i4 = 0;

        i5 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: int size()>();

        i6 = 0;

     label01:
        $i0 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: int size()>();

        if i6 >= $i0 goto label05;

        $r24 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i6);

        $z2 = $r24 instanceof java.lang.String;

        if $z2 == 0 goto label02;

        goto label04;

     label02:
        $r25 = (org.mortbay.xml.XmlParser$Node) $r24;

        $r26 = virtualinvoke $r25.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $z3 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("Arg");

        if $z3 != 0 goto label03;

        i5 = i6;

        goto label05;

     label03:
        i4 = i4 + 1;

     label04:
        i6 = i6 + 1;

        goto label01;

     label05:
        $r27 = newarray (java.lang.Object)[i4];

        i7 = 0;

        i8 = 0;

     label06:
        if i8 >= i4 goto label09;

        $r21 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i7);

        $z1 = $r21 instanceof java.lang.String;

        if $z1 == 0 goto label07;

        goto label08;

     label07:
        $i3 = i8;

        i8 = i8 + 1;

        $r22 = (org.mortbay.xml.XmlParser$Node) $r21;

        $r23 = specialinvoke r0.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r10, $r22);

        $r27[$i3] = $r23;

     label08:
        i7 = i7 + 1;

        goto label06;

     label09:
        $z0 = staticinvoke <org.mortbay.log.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label10;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML new ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String)>($r20);

     label10:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i9 = 0;

     label11:
        if $r4 == null goto label21;

        $i1 = lengthof $r4;

        if i9 >= $i1 goto label21;

        $r13 = $r4[i9];

        $r14 = virtualinvoke $r13.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r14;

        if $i2 == i4 goto label12;

        goto label20;

     label12:
        r31 = null;

        z4 = 0;

     label13:
        $r15 = $r4[i9];

        r31 = virtualinvoke $r15.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r27);

        z4 = 1;

     label14:
        goto label18;

     label15:
        $r30 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r30);

        goto label18;

     label16:
        $r29 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r29);

        goto label18;

     label17:
        $r28 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>($r28);

     label18:
        if z4 == 0 goto label20;

        if $r3 == null goto label19;

        $r16 = r0.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r31);

     label19:
        specialinvoke r0.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>(r31, r1, i5);

        return r31;

     label20:
        i9 = i9 + 1;

        goto label11;

     label21:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No Constructor: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" on ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r5;

        catch java.lang.IllegalAccessException from label13 to label14 with label15;
        catch java.lang.InstantiationException from label13 to label14 with label16;
        catch java.lang.IllegalArgumentException from label13 to label14 with label17;
    }

    private java.lang.Object refObj(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r5;
        org.mortbay.xml.XmlConfiguration r2;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.util.Map $r3;
        org.mortbay.xml.XmlParser$Node r0;
        java.lang.Object $r4, r10;
        java.lang.String $r1, $r9;

        r2 := @this: org.mortbay.xml.XmlConfiguration;

        r10 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r3 = r2.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r4 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No object for id=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        specialinvoke r2.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>($r4, r0, 0);

        return $r4;
    }

    private java.lang.Object newArray(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r5;
        java.util.Map $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.mortbay.xml.XmlParser$Node r1, r28;
        java.lang.String $r2, $r3, $r8, $r13, $r14, $r15;
        java.util.Iterator $r27;
        java.lang.Class $r0, $r12, $r16, $r17, $r18, $r19, $r20, r21, $r22, $r23, $r24, $r25;
        java.lang.Object $r4, $r7, r9, $r10, r26, $r29, $r30;

        r5 := @this: org.mortbay.xml.XmlConfiguration;

        r9 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r0 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object>;

        if $r0 != null goto label01;

        $r20 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object> = $r20;

        goto label02;

     label01:
        $r20 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Object>;

     label02:
        r21 = $r20;

        $r2 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("type");

        $r3 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        if $r2 == null goto label14;

        $r12 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class fromName(java.lang.String)>($r2);

        r21 = $r12;

        if $r12 != null goto label14;

        $r13 = "String";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label05;

        $r19 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$String>;

        if $r19 != null goto label03;

        $r22 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$String> = $r22;

        goto label04;

     label03:
        $r22 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$String>;

     label04:
        r21 = $r22;

        goto label14;

     label05:
        $r14 = "URL";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label08;

        $r18 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$URL>;

        if $r18 != null goto label06;

        $r23 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.net.URL");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$URL> = $r23;

        goto label07;

     label06:
        $r23 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$URL>;

     label07:
        r21 = $r23;

        goto label14;

     label08:
        $r15 = "InetAddress";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label11;

        $r17 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$InetAddress>;

        if $r17 != null goto label09;

        $r24 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.net.InetAddress");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$InetAddress> = $r24;

        goto label10;

     label09:
        $r24 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$net$InetAddress>;

     label10:
        r21 = $r24;

        goto label14;

     label11:
        $r16 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

        if $r16 != null goto label12;

        $r25 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("org.mortbay.xml.XmlConfiguration");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration> = $r25;

        goto label13;

     label12:
        $r25 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$org$mortbay$xml$XmlConfiguration>;

     label13:
        r21 = staticinvoke <org.mortbay.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String,boolean)>($r25, $r2, 1);

     label14:
        r26 = null;

        $r27 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.util.Iterator iterator(java.lang.String)>("Item");

     label15:
        $z4 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label19;

        $r7 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.mortbay.xml.XmlParser$Node) $r7;

        $r8 = virtualinvoke r28.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r10 = specialinvoke r5.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r9, r28);

        $r29 = r26;

        if $r10 != null goto label16;

        $z0 = virtualinvoke r21.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label16;

        $r30 = <org.mortbay.xml.XmlConfiguration: java.lang.Integer ZERO>;

        goto label17;

     label16:
        $r30 = $r10;

     label17:
        r26 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>($r29, $r30);

        if $r8 == null goto label18;

        $r11 = r5.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

     label18:
        goto label15;

     label19:
        $r4 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object toArray(java.lang.Object,java.lang.Class)>(r26, r21);

        if $r3 == null goto label20;

        $r6 = r5.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label20:
        return $r4;
    }

    private java.lang.Object newMap(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        java.lang.IllegalStateException $r6, $r17, $r18;
        org.mortbay.xml.XmlConfiguration r9;
        java.util.HashMap $r2;
        java.util.Map $r13, $r14, $r19;
        int $i0, i1, $i2, i3;
        org.mortbay.xml.XmlParser$Node r0, r4, r20, r21, r22;
        java.lang.String $r1, $r5, $r7, $r8, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3, r10, $r11, $r12, $r15;

        r9 := @this: org.mortbay.xml.XmlConfiguration;

        r10 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        if $r1 == null goto label01;

        $r19 = r9.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label01:
        i1 = 0;

     label02:
        $i2 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        if i1 >= $i2 goto label15;

        $r3 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i1);

        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        goto label14;

     label03:
        r4 = (org.mortbay.xml.XmlParser$Node) $r3;

        $r5 = virtualinvoke r4.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("Entry");

        if $z1 != 0 goto label04;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not an Entry");

        throw $r18;

     label04:
        r20 = null;

        r21 = null;

        i3 = 0;

     label05:
        $i0 = virtualinvoke r4.<org.mortbay.xml.XmlParser$Node: int size()>();

        if i3 >= $i0 goto label10;

        $r15 = virtualinvoke r4.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i3);

        $z2 = $r15 instanceof java.lang.String;

        if $z2 == 0 goto label06;

        goto label09;

     label06:
        r22 = (org.mortbay.xml.XmlParser$Node) $r15;

        $r16 = virtualinvoke r22.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("Item");

        if $z3 != 0 goto label07;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not an Item");

        throw $r17;

     label07:
        if r20 != null goto label08;

        r20 = r22;

        goto label09;

     label08:
        r21 = r22;

     label09:
        i3 = i3 + 1;

        goto label05;

     label10:
        if r20 == null goto label11;

        if r21 != null goto label12;

     label11:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing Item in Entry");

        throw $r6;

     label12:
        $r7 = virtualinvoke r20.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r8 = virtualinvoke r21.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r11 = specialinvoke r9.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r10, r20);

        $r12 = specialinvoke r9.<org.mortbay.xml.XmlConfiguration: java.lang.Object value(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r10, r21);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        if $r7 == null goto label13;

        $r14 = r9.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11);

     label13:
        if $r8 == null goto label14;

        $r13 = r9.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r12);

     label14:
        i1 = i1 + 1;

        goto label02;

     label15:
        return $r2;
    }

    private java.lang.Object propertyObj(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r4;
        java.util.Map $r5, $r6, $r7, $r8;
        org.mortbay.xml.XmlParser$Node r0;
        java.lang.Object r9, r10;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r4 := @this: org.mortbay.xml.XmlConfiguration;

        r9 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("id");

        $r2 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $r3 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("default");

        r10 = null;

        $r5 = r4.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap>;

        if $r5 == null goto label1;

        $r7 = r4.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r8 = r4.<org.mortbay.xml.XmlConfiguration: java.util.Map _propertyMap>;

        r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        goto label2;

     label1:
        if $r3 == null goto label2;

        r10 = $r3;

     label2:
        if $r1 == null goto label3;

        $r6 = r4.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r10);

     label3:
        if r10 == null goto label4;

        specialinvoke r4.<org.mortbay.xml.XmlConfiguration: void configure(java.lang.Object,org.mortbay.xml.XmlParser$Node,int)>(r10, r0, 0);

     label4:
        return r10;
    }

    private java.lang.Object value(java.lang.Object, org.mortbay.xml.XmlParser$Node) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r27;
        java.net.InetAddress $r14;
        java.util.Map $r41;
        java.lang.reflect.InvocationTargetException $r50, $r51;
        java.lang.Throwable $r46;
        java.lang.StringBuffer $r18, $r19, $r48, $r52;
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r13, $r15, $r20, $r21, $r23, $r24, $r25, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40;
        java.net.UnknownHostException $r42;
        java.lang.IllegalStateException $r53;
        java.net.URL $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        org.mortbay.xml.XmlParser$Node r0;
        java.net.MalformedURLException $r44;
        java.lang.Class $r7;
        java.lang.Object $r22, $r26, r28, $r29, $r30, $r31, $r35, r47;

        r27 := @this: org.mortbay.xml.XmlConfiguration;

        r28 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.mortbay.xml.XmlParser$Node;

        $r1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("type");

        $r2 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("ref");

        if $r2 == null goto label01;

        $r41 = r27.<org.mortbay.xml.XmlConfiguration: java.util.Map _idMap>;

        r47 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        goto label19;

     label01:
        $i0 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        if $i0 != 0 goto label03;

        $r40 = "String";

        $z13 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z13 == 0 goto label02;

        return "";

     label02:
        return null;

     label03:
        i4 = 0;

        $i1 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: int size()>();

        i5 = $i1 - 1;

        if $r1 == null goto label04;

        $r39 = "String";

        $z12 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z12 != 0 goto label11;

     label04:
        if i4 > i5 goto label07;

        $r35 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i4);

        $z11 = $r35 instanceof java.lang.String;

        if $z11 != 0 goto label05;

        goto label07;

     label05:
        $r36 = (java.lang.String) $r35;

        $r37 = virtualinvoke $r36.<java.lang.String: java.lang.String trim()>();

        $r38 = (java.lang.String) $r37;

        $i3 = virtualinvoke $r38.<java.lang.String: int length()>();

        if $i3 <= 0 goto label06;

        goto label07;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        if i4 >= i5 goto label10;

        $r31 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i5);

        $z10 = $r31 instanceof java.lang.String;

        if $z10 != 0 goto label08;

        goto label10;

     label08:
        $r32 = (java.lang.String) $r31;

        $r33 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>();

        $r34 = (java.lang.String) $r33;

        $i2 = virtualinvoke $r34.<java.lang.String: int length()>();

        if $i2 <= 0 goto label09;

        goto label10;

     label09:
        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label07;

     label10:
        if i4 <= i5 goto label11;

        return null;

     label11:
        if i4 != i5 goto label12;

        $r30 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i4);

        r47 = specialinvoke r27.<org.mortbay.xml.XmlConfiguration: java.lang.Object itemValue(java.lang.Object,java.lang.Object)>(r28, $r30);

        goto label19;

     label12:
        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        entermonitor $r48;

     label13:
        i6 = i4;

     label14:
        if i6 > i5 goto label15;

        $r26 = virtualinvoke r0.<org.mortbay.xml.XmlParser$Node: java.lang.Object get(int)>(i6);

        $r29 = specialinvoke r27.<org.mortbay.xml.XmlConfiguration: java.lang.Object itemValue(java.lang.Object,java.lang.Object)>(r28, $r26);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r29);

        i6 = i6 + 1;

        goto label14;

     label15:
        r47 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        exitmonitor $r48;

     label16:
        goto label19;

     label17:
        $r46 := @caughtexception;

        exitmonitor $r48;

     label18:
        throw $r46;

     label19:
        if r47 != null goto label21;

        $r25 = "String";

        $z9 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z9 == 0 goto label20;

        return "";

     label20:
        return null;

     label21:
        if $r1 != null goto label23;

        if r47 == null goto label22;

        $z8 = r47 instanceof java.lang.String;

        if $z8 == 0 goto label22;

        $r23 = (java.lang.String) r47;

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String trim()>();

        return $r24;

     label22:
        return r47;

     label23:
        $r4 = "String";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label24;

        $r6 = "java.lang.String";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label25;

     label24:
        $r5 = virtualinvoke r47.<java.lang.Object: java.lang.String toString()>();

        return $r5;

     label25:
        $r7 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Class fromName(java.lang.String)>($r1);

        if $r7 == null goto label26;

        $r21 = virtualinvoke r47.<java.lang.Object: java.lang.String toString()>();

        $r22 = staticinvoke <org.mortbay.util.TypeUtil: java.lang.Object valueOf(java.lang.Class,java.lang.String)>($r7, $r21);

        return $r22;

     label26:
        $r8 = "URL";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label27;

        $r11 = "java.net.URL";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label31;

     label27:
        $z3 = r47 instanceof java.net.URL;

        if $z3 == 0 goto label28;

        return r47;

     label28:
        $r49 = new java.net.URL;

        $r10 = virtualinvoke r47.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r49.<java.net.URL: void <init>(java.lang.String)>($r10);

     label29:
        return $r49;

     label30:
        $r44 := @caughtexception;

        $r50 = new java.lang.reflect.InvocationTargetException;

        specialinvoke $r50.<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>($r44);

        throw $r50;

     label31:
        $r12 = "InetAddress";

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z5 != 0 goto label32;

        $r15 = "java.net.InetAddress";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z7 == 0 goto label36;

     label32:
        $z6 = r47 instanceof java.net.InetAddress;

        if $z6 == 0 goto label33;

        return r47;

     label33:
        $r13 = virtualinvoke r47.<java.lang.Object: java.lang.String toString()>();

        $r14 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r13);

     label34:
        return $r14;

     label35:
        $r42 := @caughtexception;

        $r51 = new java.lang.reflect.InvocationTargetException;

        specialinvoke $r51.<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>($r42);

        throw $r51;

     label36:
        $r53 = new java.lang.IllegalStateException;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown type ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r53;

        catch java.lang.Throwable from label13 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.net.MalformedURLException from label28 to label29 with label30;
        catch java.net.UnknownHostException from label33 to label34 with label35;
    }

    private java.lang.Object itemValue(java.lang.Object, java.lang.Object) throws java.lang.Exception
    {
        org.mortbay.xml.XmlConfiguration r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Throwable $r15;
        java.lang.StringBuffer $r11, $r12, $r13;
        org.mortbay.xml.XmlParser$Node r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r16, $r17, $r18;
        java.lang.Object r0, r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        r19 := @this: org.mortbay.xml.XmlConfiguration;

        r20 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r1 = (org.mortbay.xml.XmlParser$Node) r0;

        $r2 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getTag()>();

        $r3 = "Call";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r27 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object call(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r27;

     label2:
        $r4 = "Get";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label3;

        $r26 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object get(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r26;

     label3:
        $r5 = "New";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label4;

        $r25 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object newObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r25;

     label4:
        $r6 = "Ref";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z4 == 0 goto label5;

        $r24 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object refObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r24;

     label5:
        $r7 = "Array";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z5 == 0 goto label6;

        $r23 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object newArray(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r23;

     label6:
        $r8 = "Map";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z6 == 0 goto label7;

        $r22 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object newMap(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r22;

     label7:
        $r9 = "Property";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z7 == 0 goto label8;

        $r21 = specialinvoke r19.<org.mortbay.xml.XmlConfiguration: java.lang.Object propertyObj(java.lang.Object,org.mortbay.xml.XmlParser$Node)>(r20, r1);

        return $r21;

     label8:
        $r10 = "SystemProperty";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z8 == 0 goto label9;

        $r16 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("name");

        $r17 = virtualinvoke r1.<org.mortbay.xml.XmlParser$Node: java.lang.String getAttribute(java.lang.String)>("default");

        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r16, $r17);

        return $r18;

     label9:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown value tag: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = new java.lang.Throwable;

        specialinvoke $r15.<java.lang.Throwable: void <init>()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>($r14, $r15);

        return null;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Object[] r2;
        org.mortbay.xml.XmlConfiguration $r7, r18;
        java.net.URL $r10;
        java.lang.String[] r1;
        java.util.Map $r12, $r13;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.mortbay.resource.Resource $r9, $r15;
        java.lang.String $r5, $r6, $r8, $r14;
        boolean $z0, $z1, $z2;
        java.util.Properties $r0;
        java.lang.Exception $r17;
        org.mortbay.component.LifeCycle r19;
        java.lang.Object $r3, $r4, $r11;
        java.io.InputStream $r16;

        r1 := @parameter0: java.lang.String[];

     label01:
        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        r18 = null;

        $i0 = lengthof r1;

        r2 = newarray (java.lang.Object)[$i0];

        i4 = 0;

     label02:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label07;

        $r5 = r1[i4];

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".properties");

        if $z2 == 0 goto label03;

        $r14 = r1[i4];

        $r15 = staticinvoke <org.mortbay.resource.Resource: org.mortbay.resource.Resource newResource(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<org.mortbay.resource.Resource: java.io.InputStream getInputStream()>();

        virtualinvoke $r0.<java.util.Properties: void load(java.io.InputStream)>($r16);

        goto label06;

     label03:
        $r7 = new org.mortbay.xml.XmlConfiguration;

        $r8 = r1[i4];

        $r9 = staticinvoke <org.mortbay.resource.Resource: org.mortbay.resource.Resource newResource(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<org.mortbay.resource.Resource: java.net.URL getURL()>();

        specialinvoke $r7.<org.mortbay.xml.XmlConfiguration: void <init>(java.net.URL)>($r10);

        if r18 == null goto label04;

        $r12 = virtualinvoke $r7.<org.mortbay.xml.XmlConfiguration: java.util.Map getIdMap()>();

        $r13 = virtualinvoke r18.<org.mortbay.xml.XmlConfiguration: java.util.Map getIdMap()>();

        interfaceinvoke $r12.<java.util.Map: void putAll(java.util.Map)>($r13);

     label04:
        $i3 = virtualinvoke $r0.<java.util.Properties: int size()>();

        if $i3 <= 0 goto label05;

        virtualinvoke $r7.<org.mortbay.xml.XmlConfiguration: void setProperties(java.util.Map)>($r0);

     label05:
        $r11 = virtualinvoke $r7.<org.mortbay.xml.XmlConfiguration: java.lang.Object configure()>();

        r2[i4] = $r11;

        r18 = $r7;

     label06:
        i4 = i4 + 1;

        goto label02;

     label07:
        i5 = 0;

     label08:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label10;

        $r3 = r2[i5];

        $z0 = $r3 instanceof org.mortbay.component.LifeCycle;

        if $z0 == 0 goto label09;

        $r4 = r2[i5];

        r19 = (org.mortbay.component.LifeCycle) $r4;

        $z1 = interfaceinvoke r19.<org.mortbay.component.LifeCycle: boolean isRunning()>();

        if $z1 != 0 goto label09;

        interfaceinvoke r19.<org.mortbay.component.LifeCycle: void start()>();

     label09:
        i5 = i5 + 1;

        goto label08;

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>("EXCEPTION ", $r17);

     label12:
        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Integer $r20;
        java.lang.Class[] $r0, $r10;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;

        $r0 = newarray (java.lang.Class)[9];

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = <java.lang.Character: java.lang.Class TYPE>;

        $r0[1] = $r2;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        $r0[2] = $r3;

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        $r0[3] = $r4;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[4] = $r5;

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        $r0[5] = $r6;

        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        $r0[6] = $r7;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        $r0[7] = $r8;

        $r9 = <java.lang.Void: java.lang.Class TYPE>;

        $r0[8] = $r9;

        <org.mortbay.xml.XmlConfiguration: java.lang.Class[] __primitives> = $r0;

        $r10 = newarray (java.lang.Class)[9];

        $r11 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Boolean>;

        if $r11 != null goto label01;

        $r21 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Boolean> = $r21;

        goto label02;

     label01:
        $r21 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Boolean>;

     label02:
        $r10[0] = $r21;

        $r12 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Character>;

        if $r12 != null goto label03;

        $r22 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Character> = $r22;

        goto label04;

     label03:
        $r22 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Character>;

     label04:
        $r10[1] = $r22;

        $r13 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Byte>;

        if $r13 != null goto label05;

        $r23 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Byte> = $r23;

        goto label06;

     label05:
        $r23 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Byte>;

     label06:
        $r10[2] = $r23;

        $r14 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Short>;

        if $r14 != null goto label07;

        $r24 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Short> = $r24;

        goto label08;

     label07:
        $r24 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Short>;

     label08:
        $r10[3] = $r24;

        $r15 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Integer>;

        if $r15 != null goto label09;

        $r25 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Integer> = $r25;

        goto label10;

     label09:
        $r25 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Integer>;

     label10:
        $r10[4] = $r25;

        $r16 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Long>;

        if $r16 != null goto label11;

        $r26 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Long> = $r26;

        goto label12;

     label11:
        $r26 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Long>;

     label12:
        $r10[5] = $r26;

        $r17 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Float>;

        if $r17 != null goto label13;

        $r27 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Float> = $r27;

        goto label14;

     label13:
        $r27 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Float>;

     label14:
        $r10[6] = $r27;

        $r18 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Double>;

        if $r18 != null goto label15;

        $r28 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Double> = $r28;

        goto label16;

     label15:
        $r28 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Double>;

     label16:
        $r10[7] = $r28;

        $r19 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Void>;

        if $r19 != null goto label17;

        $r29 = staticinvoke <org.mortbay.xml.XmlConfiguration: java.lang.Class class$(java.lang.String)>("java.lang.Void");

        <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Void> = $r29;

        goto label18;

     label17:
        $r29 = <org.mortbay.xml.XmlConfiguration: java.lang.Class class$java$lang$Void>;

     label18:
        $r10[8] = $r29;

        <org.mortbay.xml.XmlConfiguration: java.lang.Class[] __primitiveHolders> = $r10;

        $r20 = new java.lang.Integer;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>(0);

        <org.mortbay.xml.XmlConfiguration: java.lang.Integer ZERO> = $r20;

        return;
    }
}
