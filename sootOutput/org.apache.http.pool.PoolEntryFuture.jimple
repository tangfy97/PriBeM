abstract class org.apache.http.pool.PoolEntryFuture extends java.lang.Object implements java.util.concurrent.Future
{
    private final java.util.concurrent.locks.Lock lock;
    private final org.apache.http.concurrent.FutureCallback callback;
    private final java.util.concurrent.locks.Condition condition;
    private volatile boolean cancelled;
    private volatile boolean completed;
    private java.lang.Object result;

    void <init>(java.util.concurrent.locks.Lock, org.apache.http.concurrent.FutureCallback)
    {
        java.util.concurrent.locks.Lock r1;
        java.util.concurrent.locks.Condition $r2;
        org.apache.http.pool.PoolEntryFuture r0;
        org.apache.http.concurrent.FutureCallback r3;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        r1 := @parameter0: java.util.concurrent.locks.Lock;

        r3 := @parameter1: org.apache.http.concurrent.FutureCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock> = r1;

        $r2 = interfaceinvoke r1.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Condition condition> = $r2;

        r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback> = r3;

        return;
    }

    public boolean cancel(boolean)
    {
        java.lang.Throwable $r7;
        org.apache.http.pool.PoolEntryFuture r0;
        org.apache.http.concurrent.FutureCallback $r2, $r5;
        java.util.concurrent.locks.Lock $r1, $r4, $r6, $r8;
        java.util.concurrent.locks.Condition $r3;
        boolean $z0, z1;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<org.apache.http.pool.PoolEntryFuture: boolean completed>;

        if $z0 == 0 goto label3;

     label2:
        $r6 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return 0;

     label3:
        r0.<org.apache.http.pool.PoolEntryFuture: boolean completed> = 1;

        r0.<org.apache.http.pool.PoolEntryFuture: boolean cancelled> = 1;

        $r2 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        if $r2 == null goto label4;

        $r5 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        interfaceinvoke $r5.<org.apache.http.concurrent.FutureCallback: void cancelled()>();

     label4:
        $r3 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Condition condition>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signalAll()>();

     label5:
        $r4 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return 1;

     label6:
        $r7 := @caughtexception;

     label7:
        $r8 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isCancelled()
    {
        org.apache.http.pool.PoolEntryFuture r0;
        boolean $z0;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        $z0 = r0.<org.apache.http.pool.PoolEntryFuture: boolean cancelled>;

        return $z0;
    }

    public boolean isDone()
    {
        org.apache.http.pool.PoolEntryFuture r0;
        boolean $z0;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        $z0 = r0.<org.apache.http.pool.PoolEntryFuture: boolean completed>;

        return $z0;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ExecutionException $r4;
        org.apache.http.pool.PoolEntryFuture r0;
        java.util.concurrent.TimeoutException $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

     label1:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = virtualinvoke r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(0L, $r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.util.concurrent.ExecutionException;

        specialinvoke $r4.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r10;
        long l0;
        boolean $z0;
        org.apache.http.pool.PoolEntryFuture r0;
        org.apache.http.concurrent.FutureCallback $r4, $r7, $r13, $r15;
        java.io.IOException $r12;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ExecutionException $r14;
        java.util.concurrent.locks.Lock $r1, $r5, $r9, $r11;
        java.lang.Object $r3, $r6, $r8, r16;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        l0 := @parameter0: long;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<org.apache.http.pool.PoolEntryFuture: boolean completed>;

        if $z0 == 0 goto label3;

        r16 = r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object result>;

     label2:
        $r9 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        return r16;

     label3:
        $r3 = virtualinvoke r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object getPoolEntry(long,java.util.concurrent.TimeUnit)>(l0, r2);

        r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object result> = $r3;

        r0.<org.apache.http.pool.PoolEntryFuture: boolean completed> = 1;

        $r4 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        if $r4 == null goto label4;

        $r7 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        $r6 = r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object result>;

        interfaceinvoke $r7.<org.apache.http.concurrent.FutureCallback: void completed(java.lang.Object)>($r6);

     label4:
        $r8 = r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object result>;

     label5:
        $r5 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r8;

     label6:
        $r12 := @caughtexception;

        r0.<org.apache.http.pool.PoolEntryFuture: boolean completed> = 1;

        r0.<org.apache.http.pool.PoolEntryFuture: java.lang.Object result> = null;

        $r13 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        if $r13 == null goto label7;

        $r15 = r0.<org.apache.http.pool.PoolEntryFuture: org.apache.http.concurrent.FutureCallback callback>;

        interfaceinvoke $r15.<org.apache.http.concurrent.FutureCallback: void failed(java.lang.Exception)>($r12);

     label7:
        $r14 = new java.util.concurrent.ExecutionException;

        specialinvoke $r14.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r12);

        throw $r14;

     label8:
        $r10 := @caughtexception;

     label9:
        $r11 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r10;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label5 with label6;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    protected abstract java.lang.Object getPoolEntry(long, java.util.concurrent.TimeUnit) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.TimeoutException;

    public boolean await(java.util.Date) throws java.lang.InterruptedException
    {
        java.lang.Throwable $r8;
        java.util.Date r2;
        org.apache.http.pool.PoolEntryFuture r0;
        java.util.concurrent.locks.Lock $r1, $r4, $r9;
        java.util.concurrent.locks.Condition $r3, $r6;
        java.lang.InterruptedException $r5, $r7;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        r2 := @parameter0: java.util.Date;

        $r1 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<org.apache.http.pool.PoolEntryFuture: boolean cancelled>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.InterruptedException;

        specialinvoke $r7.<java.lang.InterruptedException: void <init>(java.lang.String)>("Operation interrupted");

        throw $r7;

     label2:
        if r2 == null goto label3;

        $r6 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Condition condition>;

        z2 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>(r2);

        goto label4;

     label3:
        $r3 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Condition condition>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void await()>();

        z2 = 1;

     label4:
        $z1 = r0.<org.apache.http.pool.PoolEntryFuture: boolean cancelled>;

        if $z1 == 0 goto label5;

        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>(java.lang.String)>("Operation interrupted");

        throw $r5;

     label5:
        $r4 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return z2;

     label6:
        $r8 := @caughtexception;

     label7:
        $r9 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void wakeup()
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.Lock $r1, $r3, $r5;
        java.util.concurrent.locks.Condition $r2;
        org.apache.http.pool.PoolEntryFuture r0;

        r0 := @this: org.apache.http.pool.PoolEntryFuture;

        $r1 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Condition condition>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Condition: void signalAll()>();

     label2:
        $r3 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.http.pool.PoolEntryFuture: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
