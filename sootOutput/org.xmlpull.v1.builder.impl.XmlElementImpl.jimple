public class org.xmlpull.v1.builder.impl.XmlElementImpl extends java.lang.Object implements org.xmlpull.v1.builder.XmlElement
{
    private org.xmlpull.v1.builder.XmlContainer parent;
    private org.xmlpull.v1.builder.XmlNamespace namespace;
    private java.lang.String name;
    private java.util.List attrs;
    private java.util.List nsList;
    private java.util.List children;
    private static final java.util.Iterator EMPTY_ITERATOR;
    private static final org.xmlpull.v1.builder.Iterable EMPTY_ITERABLE;

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0, r2;
        int $i0, i1;
        boolean $z0;
        org.xmlpull.v1.builder.XmlContained r13;
        org.xmlpull.v1.builder.XmlContainer $r14;
        java.util.List $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r1, $r12;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.xmlpull.v1.builder.impl.XmlElementImpl) $r1;

        r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent> = null;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $r4 = specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlElementImpl,java.util.List)>(r2, $r3);

        r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs> = $r4;

        $r5 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $r6 = specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlElementImpl,java.util.List)>(r2, $r5);

        r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList> = $r6;

        $r7 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r8 = specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlElementImpl,java.util.List)>(r2, $r7);

        r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children> = $r8;

        $r9 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r9 == null goto label3;

        i1 = 0;

     label1:
        $r10 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r11 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r12 instanceof org.xmlpull.v1.builder.XmlContained;

        if $z0 == 0 goto label2;

        r13 = (org.xmlpull.v1.builder.XmlContained) $r12;

        $r14 = interfaceinvoke r13.<org.xmlpull.v1.builder.XmlContained: org.xmlpull.v1.builder.XmlContainer getParent()>();

        if $r14 != r0 goto label2;

        interfaceinvoke r13.<org.xmlpull.v1.builder.XmlContained: void setParent(org.xmlpull.v1.builder.XmlContainer)>(null);

        interfaceinvoke r13.<org.xmlpull.v1.builder.XmlContained: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r2;
    }

    private java.util.List cloneList(org.xmlpull.v1.builder.impl.XmlElementImpl, java.util.List) throws java.lang.CloneNotSupportedException
    {
        java.lang.CloneNotSupportedException $r3, $r13;
        org.xmlpull.v1.builder.impl.XmlElementImpl r7, r19;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r12;
        java.util.List r0;
        org.xmlpull.v1.builder.XmlAttribute r22;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r14, $r15, $r16, $r17;
        int $i0, $i1, i2;
        java.lang.String $r8, $r10, $r11, $r18;
        org.xmlpull.v1.builder.XmlNamespace $r9;
        org.xmlpull.v1.builder.XmlElement r21;
        java.lang.Object $r2, r20;
        java.lang.Class $r4;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl $r6;

        r19 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r7 := @parameter0: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter1: java.util.List;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label02:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i1 goto label12;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = $r2 instanceof org.xmlpull.v1.builder.XmlNamespace;

        if $z0 != 0 goto label03;

        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label04;

     label03:
        r20 = $r2;

        goto label11;

     label04:
        $z2 = $r2 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z2 == 0 goto label05;

        r21 = (org.xmlpull.v1.builder.XmlElement) $r2;

        r20 = interfaceinvoke r21.<org.xmlpull.v1.builder.XmlElement: java.lang.Object clone()>();

        goto label11;

     label05:
        $z3 = $r2 instanceof org.xmlpull.v1.builder.XmlAttribute;

        if $z3 == 0 goto label06;

        r22 = (org.xmlpull.v1.builder.XmlAttribute) $r2;

        $r6 = new org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        $r8 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getType()>();

        $r9 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlAttribute: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        $r10 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getName()>();

        $r11 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getValue()>();

        $z5 = interfaceinvoke r22.<org.xmlpull.v1.builder.XmlAttribute: boolean isSpecified()>();

        specialinvoke $r6.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: void <init>(org.xmlpull.v1.builder.XmlElement,java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>(r7, $r8, $r9, $r10, $r11, $z5);

        r20 = $r6;

        goto label11;

     label06:
        $z4 = $r2 instanceof java.lang.Cloneable;

        if $z4 == 0 goto label10;

     label07:
        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", null);

        r20 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, null);

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        $r13 = new java.lang.CloneNotSupportedException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to call clone() on  ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label10:
        $r3 = new java.lang.CloneNotSupportedException;

        specialinvoke $r3.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r3;

     label11:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r20);

        i2 = i2 + 1;

        goto label02;

     label12:
        return $r1;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    void <init>(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name> = r1;

        return;
    }

    void <init>(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlNamespace r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace> = r1;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name> = r2;

        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl $r3;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $r3 = new org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        specialinvoke $r3.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: void <init>(java.lang.String,java.lang.String)>(null, r1);

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace> = $r3;

     label1:
        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name> = r2;

        return;
    }

    public org.xmlpull.v1.builder.XmlContainer getRoot()
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.XmlContainer $r2, r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r3 = r0;

     label1:
        $z0 = r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        r1 = (org.xmlpull.v1.builder.XmlElement) r3;

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        if $r2 == null goto label3;

        r3 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        goto label1;

     label3:
        return r3;
    }

    public org.xmlpull.v1.builder.XmlContainer getParent()
    {
        org.xmlpull.v1.builder.XmlContainer $r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        return $r1;
    }

    public void setParent(org.xmlpull.v1.builder.XmlContainer)
    {
        org.xmlpull.v1.builder.XmlContainer r0;
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r4;
        org.xmlpull.v1.builder.XmlDocument r2;
        boolean $z0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: org.xmlpull.v1.builder.XmlContainer;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlDocument;

        if $z0 == 0 goto label1;

        r2 = (org.xmlpull.v1.builder.XmlDocument) r0;

        $r3 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlDocument: org.xmlpull.v1.builder.XmlElement getDocumentElement()>();

        if $r3 == r1 goto label1;

        $r4 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r4.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this element must be root document element to have document set as parent but already different element is set as root document element");

        throw $r4;

     label1:
        r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent> = r0;

        return;
    }

    public org.xmlpull.v1.builder.XmlNamespace getNamespace()
    {
        org.xmlpull.v1.builder.XmlNamespace $r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace>;

        return $r1;
    }

    public java.lang.String getNamespaceName()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlNamespace $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setNamespace(org.xmlpull.v1.builder.XmlNamespace)
    {
        org.xmlpull.v1.builder.XmlNamespace r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace> = r1;

        return;
    }

    public java.lang.String getName()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String $r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r7, $r9, $r10, $r13, $r14;
        java.lang.String $r3, $r8, $r12, $r15;
        org.xmlpull.v1.builder.XmlNamespace $r6, $r11;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name[");

        $r3 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace>;

        if $r6 == null goto label1;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" namespace[");

        $r11 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace namespace>;

        $r12 = interfaceinvoke $r11.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r15 = "";

     label2:
        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getBaseUri()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public void setBaseUri(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlBuilderException $r0;
        java.lang.String r2;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r0.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("not implemented");

        throw $r0;
    }

    public java.util.Iterator attributes()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        java.util.Iterator $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r1 != null goto label1;

        $r4 = <org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator EMPTY_ITERATOR>;

        return $r4;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlAttribute)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r3;
        org.xmlpull.v1.builder.XmlAttribute r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: org.xmlpull.v1.builder.XmlAttribute;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void ensureAttributeCapacity(int)>(5);

     label1:
        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlAttribute $r4;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2, r3;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>("CDATA", r1, r2, r3, 0);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlAttribute $r3;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>("CDATA", null, r1, r2, 0);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlAttribute $r5;
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.String r1, r3, r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, 0);

        return $r5;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlAttribute $r6;
        org.xmlpull.v1.builder.XmlNamespace r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.lang.String r2, r4, r5;
        org.xmlpull.v1.builder.impl.XmlAttributeImpl $r0;
        boolean z0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r0 = new org.xmlpull.v1.builder.impl.XmlAttributeImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlAttributeImpl: void <init>(org.xmlpull.v1.builder.XmlElement,java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, r5, z0);

        $r6 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlAttribute)>($r0);

        return $r6;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlAttribute $r7;
        org.xmlpull.v1.builder.XmlNamespace $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1, r2, r4, r5, r6;
        boolean z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>(r4, $r3, r5, r6, z0);

        return $r7;
    }

    public void ensureAttributeCapacity(int)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int i0;
        java.util.ArrayList $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $r3 = (java.util.ArrayList) $r2;

        virtualinvoke $r3.<java.util.ArrayList: void ensureCapacity(int)>(i0);

     label2:
        return;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlAttribute $r3;
        java.lang.String r1, r2, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute findAttribute(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getValue()>();

        return $r4;

     label1:
        return null;
    }

    public boolean hasAttributes()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.xmlpull.v1.builder.XmlAttribute attribute(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;
        org.xmlpull.v1.builder.XmlAttribute $r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute attribute(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(null, r1);

        return $r2;
    }

    public org.xmlpull.v1.builder.XmlAttribute attribute(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlAttribute $r3;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r4 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlAttribute findAttribute(java.lang.String,java.lang.String)>($r4, r2);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlAttribute findAttribute(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlAttribute r6;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        int $i0, i1;
        java.lang.String r0, $r7, r8, $r11, $r12;
        boolean $z0, $z1;
        org.xmlpull.v1.builder.XmlNamespace $r9, $r10;
        java.lang.IllegalArgumentException $r13;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attribute name ca not ber null");

        throw $r13;

     label01:
        $r2 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r2 != null goto label02;

        return null;

     label02:
        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = 0;

     label03:
        if i1 >= $i0 goto label10;

        $r4 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (org.xmlpull.v1.builder.XmlAttribute) $r5;

        $r7 = interfaceinvoke r6.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getName()>();

        if $r7 == r0 goto label04;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label09;

     label04:
        if r8 == null goto label07;

        $r12 = interfaceinvoke r6.<org.xmlpull.v1.builder.XmlAttribute: java.lang.String getNamespaceName()>();

        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label05;

        return r6;

     label05:
        if r8 != "" goto label06;

        if $r12 != null goto label06;

        return r6;

     label06:
        goto label09;

     label07:
        $r9 = interfaceinvoke r6.<org.xmlpull.v1.builder.XmlAttribute: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        if $r9 != null goto label08;

        return r6;

     label08:
        $r10 = interfaceinvoke r6.<org.xmlpull.v1.builder.XmlAttribute: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        $r11 = interfaceinvoke $r10.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        if $r11 != "" goto label09;

        return r6;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        return null;
    }

    public void removeAllAttributes()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs> = null;

        return;
    }

    public void removeAttribute(org.xmlpull.v1.builder.XmlAttribute)
    {
        org.xmlpull.v1.builder.XmlAttribute r5;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2, $r3, $r6;
        int $i0, i1;
        java.lang.Object $r4;
        org.xmlpull.v1.builder.XmlBuilderException $r7;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r5 := @parameter0: org.xmlpull.v1.builder.XmlAttribute;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        if $r1 != null goto label1;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("this element has no attributes to remove");

        throw $r7;

     label1:
        i1 = 0;

     label2:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        $r6 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List attrs>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i1);

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public org.xmlpull.v1.builder.XmlNamespace declareNamespace(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlNamespace $r3, $r4;
        java.lang.String r0, r2;
        org.xmlpull.v1.builder.XmlBuilderException $r5;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r5 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r5.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("namespace added to element must have not null prefix");

        throw $r5;

     label1:
        $r3 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String,java.lang.String)>(r0, r2);

        $r4 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace declareNamespace(org.xmlpull.v1.builder.XmlNamespace)>($r3);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlNamespace declareNamespace(org.xmlpull.v1.builder.XmlNamespace)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r2;
        java.util.List $r3, $r4;
        org.xmlpull.v1.builder.XmlNamespace r0;
        java.lang.String $r1;
        org.xmlpull.v1.builder.XmlBuilderException $r5;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        $r1 = interfaceinvoke r0.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getPrefix()>();

        if $r1 != null goto label1;

        $r5 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r5.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("namespace added to element must have not null prefix");

        throw $r5;

     label1:
        $r3 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        if $r3 != null goto label2;

        virtualinvoke r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: void ensureNamespaceDeclarationsCapacity(int)>(5);

     label2:
        $r4 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r0;
    }

    public boolean hasNamespaceDeclarations()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByPrefix(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        int $i0, i1;
        java.lang.String r0, $r11;
        boolean $z0, $z1, $z2;
        org.xmlpull.v1.builder.XmlNamespace $r6, r10;
        java.lang.IllegalArgumentException $r12;
        org.xmlpull.v1.builder.XmlContainer $r2, $r3, $r4;
        org.xmlpull.v1.builder.XmlElement $r5;
        java.util.List $r7, $r8;
        java.lang.Object $r9;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("namespace prefix can not be null");

        throw $r12;

     label1:
        $z0 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: boolean hasNamespaceDeclarations()>();

        if $z0 == 0 goto label4;

        $r7 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $r8 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (org.xmlpull.v1.builder.XmlNamespace) $r9;

        $r11 = interfaceinvoke r10.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getPrefix()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label3;

        return r10;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r2 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        if $r2 == null goto label5;

        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        $z1 = $r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label5;

        $r4 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        $r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r6 = interfaceinvoke $r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByPrefix(java.lang.String)>(r0);

        return $r6;

     label5:
        return null;
    }

    public org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByName(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        int $i0, i1;
        java.lang.String r0, $r11;
        boolean $z0, $z1, $z2;
        org.xmlpull.v1.builder.XmlNamespace $r6, r10;
        java.lang.IllegalArgumentException $r12;
        org.xmlpull.v1.builder.XmlContainer $r2, $r3, $r4;
        org.xmlpull.v1.builder.XmlElement $r5;
        java.util.List $r7, $r8;
        java.lang.Object $r9;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("namespace name can not ber null");

        throw $r12;

     label1:
        $z0 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: boolean hasNamespaceDeclarations()>();

        if $z0 == 0 goto label4;

        $r7 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $r8 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (org.xmlpull.v1.builder.XmlNamespace) $r9;

        $r11 = interfaceinvoke r10.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label3;

        return r10;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r2 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        if $r2 == null goto label5;

        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        $z1 = $r3 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label5;

        $r4 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        $r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r6 = interfaceinvoke $r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByName(java.lang.String)>(r0);

        return $r6;

     label5:
        return null;
    }

    public java.util.Iterator namespaces()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        java.util.Iterator $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        if $r1 != null goto label1;

        $r4 = <org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator EMPTY_ITERATOR>;

        return $r4;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlNamespace $r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String,java.lang.String)>(null, r1);

        return $r2;
    }

    public org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r3;
        org.xmlpull.v1.builder.impl.XmlNamespaceImpl $r0;
        java.lang.String r1, r2;

        r3 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlNamespaceImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlNamespaceImpl: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r0;
    }

    public void ensureNamespaceDeclarationsCapacity(int)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int i0;
        java.util.ArrayList $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList>;

        $r3 = (java.util.ArrayList) $r2;

        virtualinvoke $r3.<java.util.ArrayList: void ensureCapacity(int)>(i0);

     label2:
        return;
    }

    public void removeAllNamespaceDeclarations()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List nsList> = null;

        return;
    }

    public void addChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.util.List $r2, $r3;
        java.lang.Object r0;
        java.lang.NullPointerException $r4;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r2 != null goto label2;

        virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: void ensureChildrenCapacity(int)>(1);

     label2:
        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void addChild(int, java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r3;
        int i0;
        java.lang.Object r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void ensureChildrenCapacity(int)>(1);

     label1:
        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i0, r2);

        return;
    }

    private void checkChildParent(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement r2;
        org.xmlpull.v1.builder.XmlContainer $r3, $r5;
        org.xmlpull.v1.builder.impl.XmlElementImpl r4;
        java.lang.Object r0;
        org.xmlpull.v1.builder.XmlBuilderException $r1, $r6;
        boolean $z0, $z1, $z2;

        r4 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlContainer;

        if $z0 == 0 goto label3;

        $z1 = r0 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label2;

        r2 = (org.xmlpull.v1.builder.XmlElement) r0;

        $r3 = interfaceinvoke r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        if $r3 == null goto label1;

        $r5 = r4.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlContainer parent>;

        if $r3 == $r5 goto label1;

        $r6 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r6.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("child must have no parent to be added to this node");

        throw $r6;

     label1:
        goto label3;

     label2:
        $z2 = r0 instanceof org.xmlpull.v1.builder.XmlDocument;

        if $z2 == 0 goto label3;

        $r1 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r1.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("docuemet can not be stored as element child");

        throw $r1;

     label3:
        return;
    }

    private void setChildParent(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r2;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label1;

        r1 = (org.xmlpull.v1.builder.XmlElement) r0;

        interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r2);

     label1:
        return;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void checkChildParent(java.lang.Object)>(r1);

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void addChild(java.lang.Object)>(r1);

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void setChildParent(java.lang.Object)>(r1);

        return r1;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(int, org.xmlpull.v1.builder.XmlElement)
    {
        int i0;
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xmlpull.v1.builder.XmlElement;

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void checkChildParent(java.lang.Object)>(r1);

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void addChild(int,java.lang.Object)>(i0, r1);

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void setChildParent(java.lang.Object)>(r1);

        return r1;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement newElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void addChild(java.lang.Object)>($r3);

        specialinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void setChildParent(java.lang.Object)>($r3);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(null, r1);

        return $r2;
    }

    public java.util.Iterator children()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        java.util.Iterator $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        $r4 = <org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator EMPTY_ITERATOR>;

        return $r4;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public org.xmlpull.v1.builder.Iterable requiredElementContent()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1;
        org.xmlpull.v1.builder.Iterable $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl$1 $r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        $r3 = <org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.Iterable EMPTY_ITERABLE>;

        return $r3;

     label1:
        $r2 = new org.xmlpull.v1.builder.impl.XmlElementImpl$1;

        specialinvoke $r2.<org.xmlpull.v1.builder.impl.XmlElementImpl$1: void <init>(org.xmlpull.v1.builder.impl.XmlElementImpl)>(r0);

        return $r2;
    }

    public java.lang.String requiredTextContent()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlBuilderException $r8, $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r2, $r3, $r20;
        java.lang.StringBuffer $r5, $r9, $r10, $r12, $r13, $r14, $r15, $r23, $r24, $r25, $r26, $r27, $r28;
        int $i0, $i1;
        java.lang.String $r6, $r16, $r18, $r19, $r29, $r31, $r32;
        org.xmlpull.v1.builder.XmlCharacters $r17, $r30;
        java.util.Iterator $r4;
        java.lang.Object $r7, $r21;
        java.lang.Class $r11, $r33;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label01;

        return "";

     label01:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label02;

        return "";

     label02:
        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 1 goto label07;

        $r20 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(0);

        $z3 = $r21 instanceof java.lang.String;

        if $z3 == 0 goto label03;

        $r32 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        return $r32;

     label03:
        $z4 = $r21 instanceof org.xmlpull.v1.builder.XmlCharacters;

        if $z4 == 0 goto label04;

        $r30 = (org.xmlpull.v1.builder.XmlCharacters) $r21;

        $r31 = interfaceinvoke $r30.<org.xmlpull.v1.builder.XmlCharacters: java.lang.String getText()>();

        return $r31;

     label04:
        $r22 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected text content and not ");

        if $r21 == null goto label05;

        $r33 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        goto label06;

     label05:
        $r33 = null;

     label06:
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r33);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label07:
        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator children()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

     label08:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r7 instanceof java.lang.String;

        if $z1 == 0 goto label09;

        $r19 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        goto label11;

     label09:
        $z2 = $r7 instanceof org.xmlpull.v1.builder.XmlCharacters;

        if $z2 == 0 goto label10;

        $r17 = (org.xmlpull.v1.builder.XmlCharacters) $r7;

        $r18 = interfaceinvoke $r17.<org.xmlpull.v1.builder.XmlCharacters: java.lang.String getText()>();

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        goto label11;

     label10:
        $r8 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected text content and not ");

        $r11 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label11:
        goto label08;

     label12:
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public void ensureChildrenCapacity(int)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int i0;
        java.util.ArrayList $r3, $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r3 = (java.util.ArrayList) $r2;

        virtualinvoke $r3.<java.util.ArrayList: void ensureCapacity(int)>(i0);

     label2:
        return;
    }

    public org.xmlpull.v1.builder.XmlElement element(int)
    {
        java.lang.IndexOutOfBoundsException $r3, $r11;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17;
        int $i0, i1, $i2, i3, i4;
        java.lang.String $r10, $r18;
        boolean $z0;
        org.xmlpull.v1.builder.XmlElement $r21;
        java.util.List $r1, $r2, $r19;
        java.lang.Object $r20;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i1 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i3 = 0;

        if i1 < 0 goto label5;

        $i2 = $i0 + 1;

        if i1 >= $i2 goto label5;

        i4 = 0;

     label2:
        if i4 >= $i0 goto label4;

        $r19 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i4);

        $z0 = $r20 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label3;

        i3 = i3 + 1;

        if i3 != i1 goto label3;

        $r21 = (org.xmlpull.v1.builder.XmlElement) $r20;

        return $r21;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("position ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" bigger or equal to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" children");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label6:
        $r11 = new java.lang.IndexOutOfBoundsException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("position ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" too big as only ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" element(s) available");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r18);

        throw $r11;
    }

    public org.xmlpull.v1.builder.XmlElement requiredElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String) throws org.xmlpull.v1.builder.XmlBuilderException
    {
        org.xmlpull.v1.builder.XmlNamespace r1;
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9;
        java.lang.String r2, $r10, $r11;
        org.xmlpull.v1.builder.XmlBuilderException $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        if $r3 != null goto label3;

        $r4 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not find element with name ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in namespace ");

        if r1 == null goto label1;

        $r11 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        goto label2;

     label1:
        $r11 = null;

     label2:
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String,boolean)>(r1, r2, 0);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r5;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlNamespace r0;
        java.lang.String r2, $r4;
        boolean z0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $r5 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String,java.lang.String)>($r4, r2);

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String)>(r2);

     label2:
        if $r5 == null goto label3;

        return $r5;

     label3:
        if z0 == 0 goto label4;

        $r3 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r0, r2);

        return $r3;

     label4:
        return null;
    }

    public org.xmlpull.v1.builder.Iterable elements(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl$2 $r0;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.String r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlElementImpl$2;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$2: void <init>(org.xmlpull.v1.builder.impl.XmlElementImpl,org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2, r3);

        return $r0;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement r5;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r4 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label3;

        r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r7 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        return r5;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, java.lang.String, org.xmlpull.v1.builder.XmlElement)
    {
        java.lang.UnsupportedOperationException $r0;
        org.xmlpull.v1.builder.XmlElement r4;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.lang.String r2, r3;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.xmlpull.v1.builder.XmlElement;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, org.xmlpull.v1.builder.XmlElement)
    {
        java.lang.UnsupportedOperationException $r0;
        org.xmlpull.v1.builder.XmlElement r3;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.lang.String r2;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.xmlpull.v1.builder.XmlElement;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        int $i0, i1;
        java.lang.String r7, $r8, r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.xmlpull.v1.builder.XmlNamespace $r6;
        org.xmlpull.v1.builder.XmlElement r5;
        java.util.List $r1, $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r9 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label5;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r4 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label4;

        r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r6 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        if $r6 == null goto label3;

        $r10 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke $r6.<org.xmlpull.v1.builder.XmlNamespace: java.lang.String getNamespaceName()>();

        $z3 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label4;

        return r5;

     label3:
        $r8 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label4;

        if r9 != null goto label4;

        return r5;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;
    }

    public boolean hasChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4, r5;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r5 := @parameter0: java.lang.Object;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        if $r4 != r5 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean hasChildren()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void insertChild(int, java.lang.Object)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1, $r3;
        int i0;
        java.lang.Object r2;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void ensureChildrenCapacity(int)>(1);

     label1:
        $r3 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i0, r2);

        return;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.XmlElement newElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(null, r1);

        return $r2;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl $r0, r3;
        java.lang.String r1, r2;

        r3 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlElementImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl $r0, r3;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r3 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.xmlpull.v1.builder.impl.XmlElementImpl;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void <init>(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r0;
    }

    public void replaceChild(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalArgumentException $r9, $r10;
        org.xmlpull.v1.builder.impl.XmlElementImpl r2;
        java.util.List $r3, $r4;
        int $i0, $i2;
        java.lang.Object r0, r1;
        org.xmlpull.v1.builder.XmlBuilderException $r11, $r12;
        boolean $z0;

        r2 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("new child to replace can not be null");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("old child to replace can not be null");

        throw $r10;

     label2:
        $z0 = virtualinvoke r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: boolean hasChildren()>();

        if $z0 != 0 goto label3;

        $r11 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r11.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("no children available for replacement");

        throw $r11;

     label3:
        $r3 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1);

        $i2 = (int) -1;

        if $i0 != $i2 goto label4;

        $r12 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r12.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("could not find child to replace");

        throw $r12;

     label4:
        $r4 = r2.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, r0);

        return;
    }

    public void removeAllChildren()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children> = null;

        return;
    }

    public void removeChild(java.lang.Object)
    {
        java.lang.IllegalArgumentException $r6;
        org.xmlpull.v1.builder.impl.XmlElementImpl r1;
        java.util.List $r2, $r3;
        int $i0, $i2;
        java.lang.Object r0;
        org.xmlpull.v1.builder.XmlBuilderException $r7;
        boolean $z0;

        r1 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("child to remove can not be null");

        throw $r6;

     label1:
        $z0 = virtualinvoke r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: boolean hasChildren()>();

        if $z0 != 0 goto label2;

        $r7 = new org.xmlpull.v1.builder.XmlBuilderException;

        specialinvoke $r7.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String)>("no children to remove");

        throw $r7;

     label2:
        $r2 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        $r3 = r1.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i0);

     label3:
        return;
    }

    public void replaceChildrenWithText(java.lang.String)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.impl.XmlElementImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void removeAllChildren()>();

        virtualinvoke r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: void addChild(java.lang.Object)>(r1);

        return;
    }

    private static final boolean isWhiteSpace(java.lang.String)
    {
        char $c1, $c2, $c3, $c4;
        int $i0, i5, $i6, $i7, $i8, $i9;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i5 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c1;

        if $i6 == 32 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i7 = (int) $c2;

        if $i7 == 10 goto label2;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i8 = (int) $c3;

        if $i8 == 9 goto label2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i9 = (int) $c4;

        if $i9 == 13 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return 1;
    }

    static java.util.List access$000(org.xmlpull.v1.builder.impl.XmlElementImpl)
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl r0;
        java.util.List $r1;

        r0 := @parameter0: org.xmlpull.v1.builder.impl.XmlElementImpl;

        $r1 = r0.<org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.List children>;

        return $r1;
    }

    static boolean access$100(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.xmlpull.v1.builder.impl.XmlElementImpl: boolean isWhiteSpace(java.lang.String)>(r0);

        return $z0;
    }

    static java.util.Iterator access$300()
    {
        java.util.Iterator $r0;

        $r0 = <org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator EMPTY_ITERATOR>;

        return $r0;
    }

    static void <clinit>()
    {
        org.xmlpull.v1.builder.impl.XmlElementImpl$EmptyIterator $r0;
        org.xmlpull.v1.builder.impl.XmlElementImpl$3 $r1;

        $r0 = new org.xmlpull.v1.builder.impl.XmlElementImpl$EmptyIterator;

        specialinvoke $r0.<org.xmlpull.v1.builder.impl.XmlElementImpl$EmptyIterator: void <init>(org.xmlpull.v1.builder.impl.XmlElementImpl$1)>(null);

        <org.xmlpull.v1.builder.impl.XmlElementImpl: java.util.Iterator EMPTY_ITERATOR> = $r0;

        $r1 = new org.xmlpull.v1.builder.impl.XmlElementImpl$3;

        specialinvoke $r1.<org.xmlpull.v1.builder.impl.XmlElementImpl$3: void <init>()>();

        <org.xmlpull.v1.builder.impl.XmlElementImpl: org.xmlpull.v1.builder.Iterable EMPTY_ITERABLE> = $r1;

        return;
    }
}
