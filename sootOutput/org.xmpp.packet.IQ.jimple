public class org.xmpp.packet.IQ extends org.xmpp.packet.Packet
{
    private static int sequence;
    private static java.util.Random random;

    public void <init>()
    {
        org.dom4j.Document $r2;
        java.util.Random $r5;
        org.dom4j.DocumentFactory $r1;
        int $i0, $i1, $i2;
        org.dom4j.Element $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.lang.String $r9, $r10;
        org.xmpp.packet.IQ$Type $r11;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r1 = <org.xmpp.packet.IQ: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>("iq");

        r0.<org.xmpp.packet.IQ: org.dom4j.Element element> = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = <org.xmpp.packet.IQ: java.util.Random random>;

        $i0 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>(1000);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i1 = <org.xmpp.packet.IQ: int sequence>;

        $i2 = $i1 + 1;

        <org.xmpp.packet.IQ: int sequence> = $i2;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r11 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        virtualinvoke r0.<org.xmpp.packet.IQ: void setType(org.xmpp.packet.IQ$Type)>($r11);

        virtualinvoke r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r10);

        return;
    }

    public void <init>(org.xmpp.packet.IQ$Type)
    {
        org.dom4j.Document $r2;
        java.util.Random $r6;
        org.dom4j.DocumentFactory $r1;
        int $i0, $i1, $i2;
        org.dom4j.Element $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        org.xmpp.packet.IQ$Type r4;
        java.lang.String $r10, $r11;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        r4 := @parameter0: org.xmpp.packet.IQ$Type;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r1 = <org.xmpp.packet.IQ: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>("iq");

        r0.<org.xmpp.packet.IQ: org.dom4j.Element element> = $r3;

        virtualinvoke r0.<org.xmpp.packet.IQ: void setType(org.xmpp.packet.IQ$Type)>(r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = <org.xmpp.packet.IQ: java.util.Random random>;

        $i0 = virtualinvoke $r6.<java.util.Random: int nextInt(int)>(1000);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i1 = <org.xmpp.packet.IQ: int sequence>;

        $i2 = $i1 + 1;

        <org.xmpp.packet.IQ: int sequence> = $i2;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        virtualinvoke r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r11);

        return;
    }

    public void <init>(org.xmpp.packet.IQ$Type, java.lang.String)
    {
        org.dom4j.Document $r2;
        org.dom4j.Element $r3;
        org.xmpp.packet.IQ$Type r4;
        java.lang.String r5;
        org.xmpp.packet.IQ r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.xmpp.packet.IQ;

        r4 := @parameter0: org.xmpp.packet.IQ$Type;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r1 = <org.xmpp.packet.IQ: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>("iq");

        r0.<org.xmpp.packet.IQ: org.dom4j.Element element> = $r3;

        virtualinvoke r0.<org.xmpp.packet.IQ: void setType(org.xmpp.packet.IQ$Type)>(r4);

        virtualinvoke r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>(r5);

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element)>(r1);

        return;
    }

    public void <init>(org.dom4j.Element, boolean)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.IQ r0;
        boolean z0;

        r0 := @this: org.xmpp.packet.IQ;

        r1 := @parameter0: org.dom4j.Element;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element,boolean)>(r1, z0);

        return;
    }

    private void <init>(org.xmpp.packet.IQ)
    {
        org.dom4j.Document $r5;
        org.xmpp.packet.JID $r6, $r7;
        org.dom4j.DocumentFactory $r4;
        org.dom4j.Element $r2, $r3;
        org.xmpp.packet.IQ r0, r1;

        r0 := @this: org.xmpp.packet.IQ;

        r1 := @parameter0: org.xmpp.packet.IQ;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r2 = r1.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        $r4 = <org.xmpp.packet.IQ: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r5.<org.dom4j.Document: void add(org.dom4j.Element)>($r3);

        r0.<org.xmpp.packet.IQ: org.dom4j.Element element> = $r3;

        $r6 = r1.<org.xmpp.packet.IQ: org.xmpp.packet.JID toJID>;

        r0.<org.xmpp.packet.IQ: org.xmpp.packet.JID toJID> = $r6;

        $r7 = r1.<org.xmpp.packet.IQ: org.xmpp.packet.JID fromJID>;

        r0.<org.xmpp.packet.IQ: org.xmpp.packet.JID fromJID> = $r7;

        return;
    }

    public org.xmpp.packet.IQ$Type getType()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.IQ$Type $r3;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        $r1 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type valueOf(java.lang.String)>($r2);

        return $r3;

     label1:
        return null;
    }

    public void setType(org.xmpp.packet.IQ$Type)
    {
        org.dom4j.Element $r2;
        org.xmpp.packet.IQ$Type r1;
        java.lang.String $r3;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        r1 := @parameter0: org.xmpp.packet.IQ$Type;

        $r2 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.xmpp.packet.IQ$Type: java.lang.String toString()>();

     label2:
        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", $r3);

        return;
    }

    public org.dom4j.Element getChildElement()
    {
        java.util.List $r2;
        int $i0, i1;
        org.dom4j.Element $r1, r4;
        java.lang.Object $r3;
        java.lang.String $r5;
        org.xmpp.packet.IQ r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.xmpp.packet.IQ;

        $r1 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        i1 = 0;

     label2:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.dom4j.Element) $r3;

        $r5 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("jabber:client");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("jabber:server");

        if $z3 != 0 goto label3;

        return r4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public void setChildElement(org.dom4j.Element)
    {
        java.util.Iterator $r2;
        org.dom4j.Element $r1, r3, $r4, $r5, $r7;
        java.lang.Object $r6;
        org.xmpp.packet.IQ r0;
        boolean $z0;

        r0 := @this: org.xmpp.packet.IQ;

        r3 := @parameter0: org.dom4j.Element;

        $r1 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.dom4j.Element) $r6;

        interfaceinvoke $r5.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r7);

        goto label1;

     label2:
        $r4 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        interfaceinvoke $r4.<org.dom4j.Element: void add(org.dom4j.Element)>(r3);

        return;
    }

    public org.dom4j.Element setChildElement(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r2;
        org.dom4j.Element $r1, $r5, $r6, $r7, $r9;
        java.lang.Object $r8;
        java.lang.String r3, r4;
        org.xmpp.packet.IQ r0;
        boolean $z0;

        r0 := @this: org.xmpp.packet.IQ;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.dom4j.Element) $r8;

        interfaceinvoke $r7.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r9);

        goto label1;

     label2:
        $r5 = r0.<org.xmpp.packet.IQ: org.dom4j.Element element>;

        $r6 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>(r3, r4);

        return $r6;
    }

    public void addExtension(org.xmpp.packet.PacketExtension)
    {
        org.xmpp.packet.PacketExtension r2;
        java.lang.IllegalStateException $r4;
        org.dom4j.Element $r1, $r3;
        org.xmpp.packet.IQ r0;

        r0 := @this: org.xmpp.packet.IQ;

        r2 := @parameter0: org.xmpp.packet.PacketExtension;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot add packet extension when child element is null");

        throw $r4;

     label1:
        $r3 = virtualinvoke r2.<org.xmpp.packet.PacketExtension: org.dom4j.Element getElement()>();

        interfaceinvoke $r1.<org.dom4j.Element: void add(org.dom4j.Element)>($r3);

        return;
    }

    public org.xmpp.packet.PacketExtension getExtension(java.lang.String, java.lang.String)
    {
        org.xmpp.packet.PacketExtension $r12;
        java.lang.Object[] $r9;
        java.lang.Class[] $r7;
        java.lang.reflect.Constructor $r8;
        java.lang.Exception $r13;
        java.util.List $r5;
        org.dom4j.Element $r1;
        org.dom4j.QName $r4;
        java.lang.Class $r6;
        java.lang.Object $r10, $r11;
        java.lang.String r2, r3;
        org.xmpp.packet.IQ r0;
        boolean $z0;

        r0 := @this: org.xmpp.packet.IQ;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>(r2, r3);

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements(org.dom4j.QName)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r6 = staticinvoke <org.xmpp.packet.PacketExtension: java.lang.Class getExtensionClass(java.lang.String,java.lang.String)>(r2, r3);

        if $r6 == null goto label5;

     label2:
        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Lorg/dom4j/Element;";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[1];

        $r10 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r9[0] = $r10;

        $r11 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        $r12 = (org.xmpp.packet.PacketExtension) $r11;

     label3:
        return $r12;

     label4:
        $r13 := @caughtexception;

     label5:
        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public boolean deleteExtension(java.lang.String, java.lang.String)
    {
        java.util.List $r5;
        org.dom4j.Element $r1, $r7;
        org.dom4j.QName $r4;
        java.lang.Object $r6;
        java.lang.String r2, r3;
        org.xmpp.packet.IQ r0;
        boolean $z0;

        r0 := @this: org.xmpp.packet.IQ;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String)>(r2, r3);

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements(org.dom4j.QName)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.dom4j.Element) $r6;

        interfaceinvoke $r1.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r7);

        return 1;

     label2:
        return 0;
    }

    public org.xmpp.packet.IQ createCopy()
    {
        org.xmpp.packet.IQ $r0, r1;

        r1 := @this: org.xmpp.packet.IQ;

        $r0 = new org.xmpp.packet.IQ;

        specialinvoke $r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ)>(r1);

        return $r0;
    }

    public static org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)
    {
        org.xmpp.packet.JID $r6, $r7;
        org.xmpp.packet.IQ$Type $r1, $r2, $r4, $r8, $r9;
        java.lang.String $r5, $r13, $r15;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        org.xmpp.packet.IQ r0, $r3;

        r0 := @parameter0: org.xmpp.packet.IQ;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r2 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        if $r1 == $r2 goto label1;

        $r8 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.IQ$Type getType()>();

        $r9 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        if $r8 == $r9 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IQ must be of type \'set\' or \'get\'. Original IQ: ");

        $r13 = virtualinvoke r0.<org.xmpp.packet.IQ: java.lang.String toXML()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        $r3 = new org.xmpp.packet.IQ;

        $r4 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type result>;

        $r5 = virtualinvoke r0.<org.xmpp.packet.IQ: java.lang.String getID()>();

        specialinvoke $r3.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type,java.lang.String)>($r4, $r5);

        $r6 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.JID getTo()>();

        virtualinvoke $r3.<org.xmpp.packet.IQ: void setFrom(org.xmpp.packet.JID)>($r6);

        $r7 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.JID getFrom()>();

        virtualinvoke $r3.<org.xmpp.packet.IQ: void setTo(org.xmpp.packet.JID)>($r7);

        return $r3;
    }

    public volatile org.xmpp.packet.Packet createCopy()
    {
        org.xmpp.packet.IQ r0, $r1;

        r0 := @this: org.xmpp.packet.IQ;

        $r1 = virtualinvoke r0.<org.xmpp.packet.IQ: org.xmpp.packet.IQ createCopy()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <org.xmpp.packet.IQ: int sequence> = 0;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.xmpp.packet.IQ: java.util.Random random> = $r0;

        return;
    }
}
