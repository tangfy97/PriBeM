final class org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState extends java.lang.Object
{
    private final java.util.Map blipVersions;
    private java.lang.Integer waveletVersion;
    private java.lang.Integer participantVersion;
    private java.lang.Integer tagsVersion;

    void <init>()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.util.HashMap $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions> = $r1;

        return;
    }

    void setBlipVersion(java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.Integer $r4, $r7;
        java.util.Map $r2, $r3, $r5;
        int i0, $i1;
        java.lang.Object $r6;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i1 >= i0 goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label2:
        return;
    }

    void clearBlipVersion(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    void setParticipantVersion(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        int i0, $i1;
        java.lang.Integer $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer participantVersion>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer participantVersion>;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i1 >= i0 goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer participantVersion> = $r2;

     label2:
        return;
    }

    void setTagsVersion(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        int i0, $i1;
        java.lang.Integer $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer tagsVersion>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer tagsVersion>;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i1 >= i0 goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer tagsVersion> = $r2;

     label2:
        return;
    }

    void setWaveletVersion(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.Integer $r1, $r2, $r3, $r4;
        int i0, $i1, $i2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer waveletVersion>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer waveletVersion>;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer participantVersion>;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 >= $i2 goto label2;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer waveletVersion> = $r2;

     label2:
        return;
    }

    java.lang.Integer getBlipVersion(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.Integer $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        return $r4;
    }

    java.lang.Integer getParticipantVersion()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.Integer $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer participantVersion>;

        return $r1;
    }

    java.lang.Integer getTagsVersion()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.Integer $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer tagsVersion>;

        return $r1;
    }

    java.lang.Integer getWaveletVersion()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.lang.Integer $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer waveletVersion>;

        return $r1;
    }

    java.lang.Iterable getReadBlips()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.util.Map blipVersions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }
}
