public class com.hp.hpl.jena.sparql.graph.GraphMemPlain extends com.hp.hpl.jena.graph.impl.GraphBase
{
    private java.util.Set triples;

    public void <init>()
    {
        java.util.HashSet $r1;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: java.util.Set triples> = $r1;

        return;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: java.util.Set triples>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: java.util.Set triples>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public boolean graphBaseContains(com.hp.hpl.jena.graph.Triple)
    {
        java.lang.Throwable $r6;
        java.util.Set $r5;
        com.hp.hpl.jena.graph.Triple r0, r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain r1;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r5 = r1.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: java.util.Set triples>;

        $z3 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z3;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r0);

     label2:
        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: boolean tripleContained(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple)>(r0, r4);

        if $z2 == 0 goto label4;

     label3:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return 1;

     label4:
        goto label2;

     label5:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        goto label8;

     label6:
        $r6 := @caughtexception;

     label7:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r6;

     label8:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality $r4;
        com.hp.hpl.jena.graph.Triple $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r7;
        com.hp.hpl.jena.sparql.graph.GraphMemPlain r0;
        com.hp.hpl.jena.graph.TripleMatch r5;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphMemPlain;

        r5 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r1 = r0.<com.hp.hpl.jena.sparql.graph.GraphMemPlain: java.util.Set triples>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.hp.hpl.jena.graph.impl.SimpleEventManager: com.hp.hpl.jena.util.iterator.ExtendedIterator notifyingRemove(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r2);

        $r4 = new com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality;

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Triple asTriple()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.graph.GraphMemPlain$TripleMatchFilterEquality: void <init>(com.hp.hpl.jena.graph.Triple)>($r6);

        $r7 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r4);

        return $r7;
    }

    static boolean tripleContained(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r3, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Triple r0, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: boolean equalNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: boolean equalNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: boolean equalNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r7);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private static boolean equalNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, r3, r4;
        boolean $z0, $z1;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: com.hp.hpl.jena.graph.Node fixupNode(com.hp.hpl.jena.graph.Node)>(r4);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphMemPlain: com.hp.hpl.jena.graph.Node fixupNode(com.hp.hpl.jena.graph.Node)>(r3);

        if $r1 == null goto label1;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if $r1 == $r2 goto label1;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static com.hp.hpl.jena.graph.Node fixupNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r0, r6;
        com.hp.hpl.jena.datatypes.RDFDatatype $r5;
        java.util.Locale $r3;
        java.lang.String $r1, $r2, $r4;
        boolean $z0, $z1;

        r6 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r6 == null goto label1;

        $r0 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r6 != $r0 goto label2;

     label1:
        return r6;

     label2:
        $z0 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r1 == null goto label3;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label3;

        $r2 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r5 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r2, $r4, $r5);

     label3:
        return r6;
    }
}
