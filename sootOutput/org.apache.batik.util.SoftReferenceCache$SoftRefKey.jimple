class org.apache.batik.util.SoftReferenceCache$SoftRefKey extends org.apache.batik.util.CleanerThread$SoftReferenceCleared
{
    java.lang.Object key;
    private final org.apache.batik.util.SoftReferenceCache this$0;

    public void <init>(org.apache.batik.util.SoftReferenceCache, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r3;
        org.apache.batik.util.SoftReferenceCache r2;
        org.apache.batik.util.SoftReferenceCache$SoftRefKey r0;

        r0 := @this: org.apache.batik.util.SoftReferenceCache$SoftRefKey;

        r2 := @parameter0: org.apache.batik.util.SoftReferenceCache;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.apache.batik.util.CleanerThread$SoftReferenceCleared: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: org.apache.batik.util.SoftReferenceCache this$0> = r2;

        r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: java.lang.Object key> = r3;

        return;
    }

    public void cleared()
    {
        java.lang.Throwable $r9;
        java.util.Map $r3, $r5, $r8;
        java.lang.Object $r2, $r4, $r6, $r7;
        org.apache.batik.util.SoftReferenceCache r1;
        org.apache.batik.util.SoftReferenceCache$SoftRefKey r0;
        boolean $z0;

        r0 := @this: org.apache.batik.util.SoftReferenceCache$SoftRefKey;

        r1 = r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: org.apache.batik.util.SoftReferenceCache this$0>;

        if r1 != null goto label1;

        return;

     label1:
        entermonitor r1;

     label2:
        $r3 = r1.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $r2 = r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: java.lang.Object key>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        exitmonitor r1;

        return;

     label3:
        $r5 = r1.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $r4 = r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: java.lang.Object key>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        if r0 != $r6 goto label4;

        virtualinvoke r1.<java.lang.Object: void notifyAll()>();

        goto label5;

     label4:
        $r8 = r1.<org.apache.batik.util.SoftReferenceCache: java.util.Map map>;

        $r7 = r0.<org.apache.batik.util.SoftReferenceCache$SoftRefKey: java.lang.Object key>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label5:
        exitmonitor r1;

        goto label7;

     label6:
        $r9 := @caughtexception;

        exitmonitor r1;

        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label2 to label6 with label6;
    }
}
