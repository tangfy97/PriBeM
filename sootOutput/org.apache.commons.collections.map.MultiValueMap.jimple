public class org.apache.commons.collections.map.MultiValueMap extends org.apache.commons.collections.map.AbstractMapDecorator implements org.apache.commons.collections.MultiMap
{
    private final org.apache.commons.collections.Factory collectionFactory;
    private transient java.util.Collection values;
    static java.lang.Class class$java$util$ArrayList;

    public static org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map)
    {
        org.apache.commons.collections.map.MultiValueMap $r0;
        java.util.Map r1;
        org.apache.commons.collections.map.MultiValueMap$ReflectionFactory $r2;
        java.lang.Class $r3, $r4;

        r1 := @parameter0: java.util.Map;

        $r0 = new org.apache.commons.collections.map.MultiValueMap;

        $r2 = new org.apache.commons.collections.map.MultiValueMap$ReflectionFactory;

        $r3 = <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$(java.lang.String)>("java.util.ArrayList");

        <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList>;

     label2:
        specialinvoke $r2.<org.apache.commons.collections.map.MultiValueMap$ReflectionFactory: void <init>(java.lang.Class)>($r4);

        specialinvoke $r0.<org.apache.commons.collections.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections.Factory)>(r1, $r2);

        return $r0;
    }

    public static org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map, java.lang.Class)
    {
        org.apache.commons.collections.map.MultiValueMap $r0;
        java.util.Map r1;
        org.apache.commons.collections.map.MultiValueMap$ReflectionFactory $r2;
        java.lang.Class r3;

        r1 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.Class;

        $r0 = new org.apache.commons.collections.map.MultiValueMap;

        $r2 = new org.apache.commons.collections.map.MultiValueMap$ReflectionFactory;

        specialinvoke $r2.<org.apache.commons.collections.map.MultiValueMap$ReflectionFactory: void <init>(java.lang.Class)>(r3);

        specialinvoke $r0.<org.apache.commons.collections.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections.Factory)>(r1, $r2);

        return $r0;
    }

    public static org.apache.commons.collections.map.MultiValueMap decorate(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.map.MultiValueMap $r0;
        org.apache.commons.collections.Factory r2;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Factory;

        $r0 = new org.apache.commons.collections.map.MultiValueMap;

        specialinvoke $r0.<org.apache.commons.collections.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections.Factory)>(r1, r2);

        return $r0;
    }

    public void <init>()
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.HashMap $r1;
        org.apache.commons.collections.map.MultiValueMap$ReflectionFactory $r2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new org.apache.commons.collections.map.MultiValueMap$ReflectionFactory;

        $r3 = <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$(java.lang.String)>("java.util.ArrayList");

        <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.commons.collections.map.MultiValueMap: java.lang.Class class$java$util$ArrayList>;

     label2:
        specialinvoke $r2.<org.apache.commons.collections.map.MultiValueMap$ReflectionFactory: void <init>(java.lang.Class)>($r4);

        specialinvoke r0.<org.apache.commons.collections.map.MultiValueMap: void <init>(java.util.Map,org.apache.commons.collections.Factory)>($r1, $r2);

        return;
    }

    protected void <init>(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map r1;
        org.apache.commons.collections.Factory r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Factory;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractMapDecorator: void <init>(java.util.Map)>(r1);

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The factory must not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections.map.MultiValueMap: org.apache.commons.collections.Factory collectionFactory> = r2;

        return;
    }

    public void clear()
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.lang.Object remove(java.lang.Object)>(r1);

     label3:
        return r3;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Collection r7;
        java.util.Set $r2;
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r6, r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r8 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.util.Collection) $r6;

        $z1 = interfaceinvoke r7.<java.util.Collection: boolean contains(java.lang.Object)>(r8);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Collection $r2, $r4;
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map $r5;
        int $i0;
        java.lang.Object r1, r3, $r6;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection createCollection(int)>(1);

        z0 = interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        $i0 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label2;

        $r5 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        z0 = 0;

        goto label2;

     label1:
        z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r3);

     label2:
        if z0 == 0 goto label3;

        $r6 = r3;

        goto label4;

     label3:
        $r6 = null;

     label4:
        return $r6;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections.map.MultiValueMap r4;
        java.util.Map r0;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r13, r14;
        java.util.Iterator $r2, $r8;
        java.util.Collection r11;
        java.util.Set $r1, $r7;
        java.lang.Object $r3, $r5, $r6, $r9, $r10, $r12;

        r4 := @this: org.apache.commons.collections.map.MultiValueMap;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof org.apache.commons.collections.MultiMap;

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.util.Collection) $r10;

        $r12 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r4.<org.apache.commons.collections.map.MultiValueMap: boolean putAll(java.lang.Object,java.util.Collection)>($r12, r11);

        goto label1;

     label2:
        goto label5;

     label3:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r4.<org.apache.commons.collections.map.MultiValueMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label4;

     label5:
        return;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Collection r1, $r2;
        org.apache.commons.collections.map.MultiValueMap$Values $r3;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 = r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection values>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.commons.collections.map.MultiValueMap$Values;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.commons.collections.map.MultiValueMap$Values: void <init>(org.apache.commons.collections.map.MultiValueMap,org.apache.commons.collections.map.MultiValueMap$1)>(r0, null);

        r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection values> = $r3;

     label2:
        return $r2;
    }

    public boolean containsValue(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Collection $r2;
        java.lang.Object r1, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        return $z0;
    }

    public java.util.Collection getCollection(java.lang.Object)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map $r1;
        java.util.Collection $r4;
        java.lang.Object r2, $r3;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = (java.util.Collection) $r3;

        return $r4;
    }

    public int size(java.lang.Object)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Collection $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.Collection: int size()>();

        return $i0;
    }

    public boolean putAll(java.lang.Object, java.util.Collection)
    {
        java.util.Collection r0, $r3, $r4;
        org.apache.commons.collections.map.MultiValueMap r1;
        java.util.Map $r5;
        int $i0, $i1, $i2;
        java.lang.Object r2;
        boolean $z0, z1;

        r1 := @this: org.apache.commons.collections.map.MultiValueMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = virtualinvoke r1.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection getCollection(java.lang.Object)>(r2);

        if $r3 != null goto label4;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r4 = virtualinvoke r1.<org.apache.commons.collections.map.MultiValueMap: java.util.Collection createCollection(int)>($i1);

        z1 = interfaceinvoke $r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r0);

        $i2 = interfaceinvoke $r4.<java.util.Collection: int size()>();

        if $i2 <= 0 goto label3;

        $r5 = virtualinvoke r1.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        z1 = 0;

     label3:
        return z1;

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>(r0);

        return $z0;
    }

    public java.util.Iterator iterator(java.lang.Object)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Iterator $r3;
        org.apache.commons.collections.map.MultiValueMap$ValuesIterator $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r3;

     label1:
        $r2 = new org.apache.commons.collections.map.MultiValueMap$ValuesIterator;

        specialinvoke $r2.<org.apache.commons.collections.map.MultiValueMap$ValuesIterator: void <init>(org.apache.commons.collections.map.MultiValueMap,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public int totalSize()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2, r5;
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Map $r1;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        i1 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiValueMap: java.util.Map getMap()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Collection) $r4;

        $i0 = interfaceinvoke r5.<java.util.Collection: int size()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    protected java.util.Collection createCollection(int)
    {
        org.apache.commons.collections.map.MultiValueMap r0;
        java.util.Collection $r3;
        int i0;
        java.lang.Object $r2;
        org.apache.commons.collections.Factory $r1;

        r0 := @this: org.apache.commons.collections.map.MultiValueMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.map.MultiValueMap: org.apache.commons.collections.Factory collectionFactory>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.Factory: java.lang.Object create()>();

        $r3 = (java.util.Collection) $r2;

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
