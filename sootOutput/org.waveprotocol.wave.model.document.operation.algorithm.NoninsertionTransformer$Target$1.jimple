class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 extends org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache
{
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)>(null);

        return;
    }

    void resolveRetain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r6;
        int i0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(i0);

        return;
    }

    void resolveDeleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$100(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,java.lang.String)>($r2, r3);

        return;
    }

    void resolveDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r5, $r6;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.operation.Attributes r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r2, r3, r4);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$304(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r6);

        return;
    }

    void resolveDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$500(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r3);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int access$306(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r4);

        return;
    }

    void resolveReplaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.Attributes r7, r8;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        r7 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r8 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r7, r8);

        return;
    }

    void resolveUpdateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r1, $r2, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3, $r6;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        r7 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target this$1>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r5);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r7);

        return;
    }
}
