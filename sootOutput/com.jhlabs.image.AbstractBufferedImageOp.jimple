public abstract class com.jhlabs.image.AbstractBufferedImageOp extends java.lang.Object implements java.awt.image.BufferedImageOp, java.lang.Cloneable
{

    public void <init>()
    {
        com.jhlabs.image.AbstractBufferedImageOp r0;

        r0 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
    {
        com.jhlabs.image.AbstractBufferedImageOp r3;
        java.awt.image.BufferedImage $r0, r1;
        java.awt.image.ColorModel r4;
        int $i0, $i1;
        java.awt.image.WritableRaster $r2;
        boolean $z0;

        r3 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r4 := @parameter1: java.awt.image.ColorModel;

        if r4 != null goto label1;

        r4 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

     label1:
        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $r2 = virtualinvoke r4.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i0, $i1);

        $z0 = virtualinvoke r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>(r4, $r2, $z0, null);

        return $r0;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r0;
        com.jhlabs.image.AbstractBufferedImageOp r2;
        java.awt.image.BufferedImage r1;
        int $i0, $i1;

        r2 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        return $r0;
    }

    public java.awt.geom.Point2D getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        com.jhlabs.image.AbstractBufferedImageOp r2;
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Point2D r0, r3;
        double $d0, $d1;

        r2 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        r0 := @parameter0: java.awt.geom.Point2D;

        r3 := @parameter1: java.awt.geom.Point2D;

        if r3 != null goto label1;

        $r1 = new java.awt.geom.Point2D$Double;

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>()>();

        r3 = $r1;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke r3.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        return r3;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        com.jhlabs.image.AbstractBufferedImageOp r0;

        r0 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        return null;
    }

    public int[] getRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        com.jhlabs.image.AbstractBufferedImageOp r7;
        java.awt.image.BufferedImage r0;
        int[] r2, $r4, $r5, $r6;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;
        java.lang.Object $r3;

        r7 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r3 = virtualinvoke $r1.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        return $r5;

     label2:
        $r6 = virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

        return $r6;
    }

    public void setRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        com.jhlabs.image.AbstractBufferedImageOp r3;
        java.awt.image.BufferedImage r0;
        int[] r2;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;

        r3 := @this: com.jhlabs.image.AbstractBufferedImageOp;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r1.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        goto label3;

     label2:
        virtualinvoke r0.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

     label3:
        return;
    }

    public java.lang.Object clone()
    {
        com.jhlabs.image.AbstractBufferedImageOp r0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: com.jhlabs.image.AbstractBufferedImageOp;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public abstract java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage);
}
