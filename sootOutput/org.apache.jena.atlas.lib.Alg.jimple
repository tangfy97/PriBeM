public class org.apache.jena.atlas.lib.Alg extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.atlas.lib.Alg r0;

        r0 := @this: org.apache.jena.atlas.lib.Alg;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int linearSearch(java.nio.IntBuffer, int)
    {
        java.nio.IntBuffer r0;
        int $i0, i1, $i2;

        r0 := @parameter0: java.nio.IntBuffer;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.nio.IntBuffer: int limit()>();

        $i2 = staticinvoke <org.apache.jena.atlas.lib.Alg: int linearSearch(java.nio.IntBuffer,int,int,int)>(r0, 0, $i0, i1);

        return $i2;
    }

    static int linearSearch(java.nio.IntBuffer, int, int, int)
    {
        java.nio.IntBuffer r0;
        int $i0, i1, i2, $i3, $i4, i5, $i6, i7;

        r0 := @parameter0: java.nio.IntBuffer;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i5 := @parameter3: int;

        $i0 = virtualinvoke r0.<java.nio.IntBuffer: int limit()>();

        staticinvoke <org.apache.jena.atlas.lib.Alg: void check(int,int,int)>($i0, i1, i2);

        i7 = i1;

     label1:
        if i7 >= i2 goto label4;

        $i4 = virtualinvoke r0.<java.nio.IntBuffer: int get(int)>(i7);

        if $i4 != i5 goto label2;

        return i7;

     label2:
        if $i4 <= i5 goto label3;

        $i6 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i7);

        return $i6;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $i3 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i2);

        return $i3;
    }

    public static final int encodeIndex(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = neg $i1;

        return $i2;
    }

    public static final int decodeIndex(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = neg $i1;

        return $i2;
    }

    public static int binarySearch(java.nio.IntBuffer, int)
    {
        java.nio.IntBuffer r0;
        int $i0, i1, $i2;

        r0 := @parameter0: java.nio.IntBuffer;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.nio.IntBuffer: int limit()>();

        $i2 = staticinvoke <org.apache.jena.atlas.lib.Alg: int binarySearch(java.nio.IntBuffer,int,int,int)>(r0, 0, $i0, i1);

        return $i2;
    }

    public static int binarySearch(java.nio.IntBuffer, int, int, int)
    {
        java.nio.IntBuffer r0;
        int $i0, $i1, $i2, i3, $i4, i5, i6, i7, i8, $i10;

        r0 := @parameter0: java.nio.IntBuffer;

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i5 := @parameter3: int;

        $i0 = virtualinvoke r0.<java.nio.IntBuffer: int limit()>();

        staticinvoke <org.apache.jena.atlas.lib.Alg: void check(int,int,int)>($i0, i6, i7);

        $i10 = (int) -1;

        i8 = i7 + $i10;

     label1:
        if i6 > i8 goto label5;

        $i2 = i6 + i8;

        i3 = $i2 >>> 1;

        $i4 = virtualinvoke r0.<java.nio.IntBuffer: int get(int)>(i3);

        if $i4 >= i5 goto label2;

        i6 = i3 + 1;

        goto label4;

     label2:
        if $i4 <= i5 goto label3;

        i8 = i3 - 1;

        goto label4;

     label3:
        return i3;

     label4:
        goto label1;

     label5:
        $i1 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i6);

        return $i1;
    }

    private static void check(int, int, int)
    {
        int i0, i1, i2;
        java.lang.String $r4, $r9, $r17;
        java.lang.ArrayIndexOutOfBoundsException $r0, $r5;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Low index (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not less than high index (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label1:
        if i0 >= 0 goto label2;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Low index is negative: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        if i1 <= i2 goto label3;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("High index is too large: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label3:
        return;
    }

    public static int binarySearch(java.util.List, int, int, java.lang.Object, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1, $i2, i3, $i4, i5, i6, i7, $i9;
        java.lang.Object $r1, r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.util.List;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        r3 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        staticinvoke <org.apache.jena.atlas.lib.Alg: void check(int,int,int)>($i0, i5, i6);

        $i9 = (int) -1;

        i7 = i6 + $i9;

     label1:
        if i5 > i7 goto label5;

        $i2 = i5 + i7;

        i3 = $i2 >>> 1;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $i4 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, r3);

        if $i4 >= 0 goto label2;

        i5 = i3 + 1;

        goto label4;

     label2:
        if $i4 <= 0 goto label3;

        i7 = i3 - 1;

        goto label4;

     label3:
        return i3;

     label4:
        goto label1;

     label5:
        $i1 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i5);

        return $i1;
    }

    public static int binarySearch(java.lang.Comparable[], int, int, java.lang.Comparable)
    {
        java.lang.Comparable[] r0;
        int $i0, $i1, $i2, i3, $i4, i5, i6, i7, $i9;
        java.lang.Comparable r1, r2;

        r0 := @parameter0: java.lang.Comparable[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        r2 := @parameter3: java.lang.Comparable;

        $i0 = lengthof r0;

        staticinvoke <org.apache.jena.atlas.lib.Alg: void check(int,int,int)>($i0, i5, i6);

        $i9 = (int) -1;

        i7 = i6 + $i9;

     label1:
        if i5 > i7 goto label5;

        $i2 = i5 + i7;

        i3 = $i2 >>> 1;

        r1 = r0[i3];

        $i4 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        if $i4 >= 0 goto label2;

        i5 = i3 + 1;

        goto label4;

     label2:
        if $i4 <= 0 goto label3;

        i7 = i3 - 1;

        goto label4;

     label3:
        return i3;

     label4:
        goto label1;

     label5:
        $i1 = staticinvoke <org.apache.jena.atlas.lib.Alg: int encodeIndex(int)>(i5);

        return $i1;
    }
}
