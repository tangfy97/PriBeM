public class org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression extends org.eclipse.jdt.internal.compiler.ast.Expression
{
    public org.eclipse.jdt.internal.compiler.ast.TypeReference type;
    public org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions;
    public org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer;

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Expression: void <init>()>();

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r6, $r7;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r1, $r2;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r8, r9;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r5;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r5 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r9 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        i1 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r3 = $r2[i1];

        if $r3 == null goto label2;

        r9 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, r9);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r6 == null goto label4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, r9);

        return $r8;

     label4:
        return r9;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r6;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5;
        int i0, i1, $i2, $i3, i4, i5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r7, $r8;
        boolean z0;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r2, $r10;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r9;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        r6 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r2 == null goto label1;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r6, r0, z0);

        return;

     label1:
        i4 = 0;

        i5 = 0;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        i1 = lengthof $r3;

        goto label4;

     label2:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r5 = $r4[i5];

        if $r5 != null goto label3;

        goto label5;

     label3:
        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r6, r0, 1);

        i4 = i4 + 1;

        i5 = i5 + 1;

     label4:
        if i5 < i1 goto label2;

     label5:
        if i4 != 1 goto label6;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r9 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r8;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newArray(org.eclipse.jdt.internal.compiler.lookup.ArrayBinding)>($r9);

        goto label7;

     label6:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void multianewarray(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>($r7, i4);

     label7:
        if z0 == 0 goto label8;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i3);

        goto label9;

     label8:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

     label9:
        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i2);

        return;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r7, $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r5, $r9;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r6;
        java.lang.StringBuffer r0;
        int i0, i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("new ");

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r0);

        i1 = 0;

        goto label4;

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r4 = $r3[i1];

        if $r4 != null goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r6 = $r5[i1];

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label3:
        i1 = i1 + 1;

     label4:
        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $i2 = lengthof $r9;

        if i1 < $i2 goto label1;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r7 == null goto label5;

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

     label5:
        return r0;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r9, $r29, $r30, $r31, $r32, $r33;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r6, $r7, $r11, $r15, $r19, $r20;
        org.eclipse.jdt.internal.compiler.ast.Expression $r8, $r12, $r17;
        byte $b7;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3, $r14, $r18, $r23, $r25, $r26, r34;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r2;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r21, $r27;
        org.eclipse.jdt.internal.compiler.impl.Constant $r4;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        long $l5, $l6;
        int $i0, $i1, i2, i3, i4, $i9, $i11;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r10, $r22, $r24, $r28;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r5, $r13, $r16;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r1, 1);

        r34 = $r3;

        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r4;

        $r5 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding VOID>;

        if $r3 != $r5 goto label01;

        $r33 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotAllocateVoidArray(org.eclipse.jdt.internal.compiler.ast.Expression)>(r0);

        r34 = null;

     label01:
        $i9 = (int) -1;

        i2 = $i9;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        i3 = lengthof $r6;

        goto label04;

     label02:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r8 = $r7[i3];

        if $r8 == null goto label03;

        if i2 >= 0 goto label04;

        i2 = i3;

        goto label04;

     label03:
        if i2 <= 0 goto label04;

        $r9 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void incorrectLocationForNonEmptyDimension(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,int)>(r0, i2);

        goto label05;

     label04:
        $i11 = (int) -1;

        i3 = i3 + $i11;

        if i3 >= 0 goto label02;

     label05:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r10 != null goto label07;

        if i2 >= 0 goto label06;

        $r32 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void mustDefineDimensionsOrInitializer(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression)>(r0);

     label06:
        if r34 == null goto label08;

        $z0 = virtualinvoke r34.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isReifiable()>();

        if $z0 != 0 goto label08;

        $r31 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalGenericArray(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r34, r0);

        goto label08;

     label07:
        if i2 < 0 goto label08;

        $r30 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotDefineDimensionsAndInitializer(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression)>(r0);

     label08:
        i4 = 0;

        goto label11;

     label09:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r12 = $r11[i4];

        if $r12 == null goto label10;

        $r13 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r13);

        if $r14 == null goto label10;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r17 = $r15[i4];

        $r16 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r16, $r14);

     label10:
        i4 = i4 + 1;

     label11:
        if i4 <= i2 goto label09;

        if r34 == null goto label14;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $i0 = lengthof $r19;

        if $i0 <= 255 goto label12;

        $r29 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void tooManyDimensions(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

     label12:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $i1 = lengthof $r20;

        $r21 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ArrayBinding createArrayType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>(r34, $i1);

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r21;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r22 == null goto label13;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r25 = virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r23);

        if $r25 == null goto label13;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r27 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r26;

        $r28.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: org.eclipse.jdt.internal.compiler.lookup.ArrayBinding binding> = $r27;

     label13:
        $l5 = r34.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: long tagBits>;

        $l6 = $l5 & 128L;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label14;

        return null;

     label14:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r18;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.ArrayInitializer $r9, $r10;
        org.eclipse.jdt.internal.compiler.ast.Expression[] $r3, $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.Expression $r6, $r8;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label4;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        i0 = lengthof $r3;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        i1 = 0;

        goto label3;

     label1:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r6 = $r5[i1];

        if $r6 == null goto label2;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.Expression[] dimensions>;

        $r8 = $r7[i1];

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        if $r9 == null goto label4;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression: org.eclipse.jdt.internal.compiler.ast.ArrayInitializer initializer>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.ArrayInitializer: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
