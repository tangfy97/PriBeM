final class org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableConversationThread, org.waveprotocol.wave.model.wave.SourcesEvents, org.waveprotocol.wave.model.conversation.ObservableManifestThread$Listener
{
    private final org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread;
    private final org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip;
    private final org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper;
    private final org.waveprotocol.wave.model.util.StringMap blips;
    private boolean isUsable;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    static final boolean $assertionsDisabled;

    static org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread create(org.waveprotocol.wave.model.conversation.ObservableManifestThread, org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)
    {
        org.waveprotocol.wave.model.wave.Blip $r9;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r7;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r1;
        java.lang.Iterable $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread $r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper r3;
        java.lang.Object $r6;
        java.lang.String $r8;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r3 := @parameter2: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper;

        $r0 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestThread,org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)>(r1, r2, r3);

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: java.lang.Iterable getBlips()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip) $r6;

        $r8 = interfaceinvoke r7.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r9 = virtualinvoke r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.Blip getBlip(java.lang.String)>($r8);

        if $r9 == null goto label2;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip adaptBlip(org.waveprotocol.wave.model.conversation.ObservableManifestBlip,org.waveprotocol.wave.model.wave.Blip)>(r7, $r9);

     label2:
        goto label1;

     label3:
        interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: void addListener(java.lang.Object)>($r0);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.conversation.ObservableManifestThread, org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper r4;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r3;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r3 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        r5 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r4 := @parameter2: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips> = $r1;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean isUsable> = 1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "WaveletBasedConversationThread received null manifest thread");

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread> = r3;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper> = r4;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip> = r5;

        return;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getParentBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip>;

        return $r1;
    }

    public java.lang.Iterable getBlips()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$1 $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: java.lang.Iterable getBlips()>();

        $r3 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$1;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$1: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getFirstBlip()
    {
        java.util.Iterator $r8;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r2;
        org.waveprotocol.wave.model.util.StringMap $r1, $r4;
        java.lang.Iterable $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r10, r11;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object $r6, $r9;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r11 = null;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip getBlip(int)>(0);

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r6 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r5);

        r11 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r6;

        if r11 != null goto label1;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: java.lang.Iterable getBlips()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r9;

        r11 = r10;

        goto label1;

     label1:
        return r11;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void checkIsUsable()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlipWithContent(org.waveprotocol.wave.model.document.operation.DocInitialization)>(null);

        return $r1;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "initialization is null");

        virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void checkIsUsable()>();

        $r2 = specialinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlipWithContent(org.waveprotocol.wave.model.document.operation.DocInitialization)>(r0);

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip insertBlip(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r10;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r12, $r18;
        int $i0;
        java.lang.String $r3, $r8, $r17;
        boolean $z0;
        org.waveprotocol.wave.model.wave.Blip $r7;
        org.waveprotocol.wave.model.conversation.ManifestBlip $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r4, $r9;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r6;
        java.lang.Object $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void checkIsUsable()>();

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t insert blip before blip ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not from this thread");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r17);

     label1:
        $r18 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) r1;

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r5 = virtualinvoke $r18.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ManifestBlip getManifestBlip()>();

        $i0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: int indexOf(org.waveprotocol.wave.model.conversation.ManifestBlip)>($r5);

        $r6 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.Blip createBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)>(null);

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.wave.Blip: java.lang.String getId()>();

        $r9 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip insertBlip(int,java.lang.String)>($i0, $r8);

        $r10 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r8);

        $r12 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r11;

        return $r12;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0, $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r3;
        java.lang.String $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread getRootThread()>();

        if r0 != $r2 goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: java.lang.String getId()>();

     label2:
        return $r4;
    }

    public void delete()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean isRootThread()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlips()>();

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void deleteThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r0);

     label2:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void onBlipAdded(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.wave.Blip $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.Blip getBlip(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip adaptBlip(org.waveprotocol.wave.model.conversation.ObservableManifestBlip,org.waveprotocol.wave.model.wave.Blip)>(r1, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void triggerOnBlipAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r5);

     label1:
        return;
    }

    public void onBlipRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r3);

        r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r4;

        if r5 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void forgetBlip(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r5);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r3, $r7;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r10;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveletBasedConversationThread(id = ");

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: java.lang.String getId()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", inline = ");

        $r7 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $z0 = interfaceinvoke $r7.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: boolean isInline()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    org.waveprotocol.wave.model.conversation.ManifestThread getManifestThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        return $r1;
    }

    void deleteBlip(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, boolean)
    {
        org.waveprotocol.wave.model.conversation.ManifestBlip $r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r4;
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.String $r3;
        boolean $z0, z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        z1 := @parameter1: boolean;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.String getId()>();

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r3);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Can\'t delete blip not from this thread");

        virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void deleteThreads()>();

        $r4 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.ManifestBlip getManifestBlip()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: boolean removeBlip(org.waveprotocol.wave.model.conversation.ManifestBlip)>($r5);

        virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void clearContent()>();

        if z1 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteSelfIfEmpty()>();

     label1:
        return;
    }

    void deleteBlips()
    {
        java.util.List $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r5;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.util.StringMap $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.List valueList(org.waveprotocol.wave.model.util.ReadableStringMap)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r4;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void deleteBlip(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,boolean)>(r5, 0);

        goto label1;

     label2:
        return;
    }

    void deleteSelfIfEmpty()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.util.StringMap $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean isRootThread()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void deleteThread(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r0);

     label1:
        return;
    }

    void invalidate()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void checkIsUsable()>();

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: void removeListener(java.lang.Object)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean isUsable> = 0;

        return;
    }

    void destroy()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$2 $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.util.StringMap $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r1 = new org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$2: void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void invalidate()>();

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        return;
    }

    void checkIsUsable()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $z0 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean isUsable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted thread is not usable: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalState(java.lang.Object)>($r4);

     label1:
        return;
    }

    private boolean isRootThread()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip parentBlip>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlipWithContent(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.wave.Blip $r3;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r5;
        org.waveprotocol.wave.model.util.StringMap $r6;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r8;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r2;
        java.lang.Object $r7;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper: org.waveprotocol.wave.model.wave.Blip createBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)>(r1);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.Blip: java.lang.String getId()>();

        $r5 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.ObservableManifestThread manifestThread>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.conversation.ObservableManifestThread: org.waveprotocol.wave.model.conversation.ObservableManifestBlip appendBlip(java.lang.String)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r4);

        $r8 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip) $r7;

        return $r8;
    }

    private org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip adaptBlip(org.waveprotocol.wave.model.conversation.ObservableManifestBlip, org.waveprotocol.wave.model.wave.Blip)
    {
        org.waveprotocol.wave.model.wave.Blip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r4;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper $r3;
        org.waveprotocol.wave.model.util.StringMap $r5;
        java.lang.String $r6;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper helper>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip create(org.waveprotocol.wave.model.conversation.ObservableManifestBlip,org.waveprotocol.wave.model.wave.Blip,org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread,org.waveprotocol.wave.model.conversation.WaveletBasedConversation$ComponentHelper)>(r0, r1, r2, $r3);

        $r5 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip: java.lang.String getId()>();

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r6, $r4);

        return $r4;
    }

    private void forgetBlip(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.util.StringMap $r3, $r4;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: java.lang.String getId()>();

        $z0 = <org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        $z1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>($r1);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r3 = r2.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>($r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void triggerOnDeleted()>();

        return;
    }

    private void triggerOnBlipAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r5;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener: void onBlipAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>(r5);

        goto label1;

     label2:
        return;
    }

    void triggerOnDeleted()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void invalidate()>();

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener: void onDeleted()>();

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip insertBlip(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip insertBlip(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip appendBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip appendBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip getFirstBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getFirstBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversationBlip getParentBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getParentBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip insertBlip(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip insertBlip(org.waveprotocol.wave.model.conversation.ConversationBlip)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip(org.waveprotocol.wave.model.document.operation.DocInitialization)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip appendBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip getFirstBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getFirstBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ConversationBlip getParentBlip()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip getParentBlip()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        return $r1;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void removeListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: void addListener(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread$Listener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.util.StringMap access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: org.waveprotocol.wave.model.util.StringMap blips>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/conversation/WaveletBasedConversationThread;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread: boolean $assertionsDisabled> = $z1;

        return;
    }
}
