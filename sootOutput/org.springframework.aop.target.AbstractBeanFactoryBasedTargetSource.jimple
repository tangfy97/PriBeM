public abstract class org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource extends java.lang.Object implements org.springframework.aop.TargetSource, org.springframework.beans.factory.BeanFactoryAware, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.commons.logging.Log logger;
    private java.lang.String targetBeanName;
    private java.lang.Class targetClass;
    private org.springframework.beans.factory.BeanFactory beanFactory;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public void setTargetBeanName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName> = r1;

        return;
    }

    public java.lang.String getTargetBeanName()
    {
        java.lang.String $r1;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r1 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        return $r1;
    }

    public void setTargetClass(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        java.lang.IllegalStateException $r3;
        org.springframework.beans.factory.BeanFactory r2;
        java.lang.String $r1;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r2 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $r1 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Property\'targetBeanName\' is required");

        throw $r3;

     label1:
        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory> = r2;

        return;
    }

    public org.springframework.beans.factory.BeanFactory getBeanFactory()
    {
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;
        org.springframework.beans.factory.BeanFactory $r1;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r1 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        return $r1;
    }

    public synchronized java.lang.Class getTargetClass()
    {
        java.lang.String $r3, $r8, $r14, $r17;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;
        boolean $z0;
        org.springframework.beans.factory.BeanFactory $r2, $r4, $r9;
        java.lang.Class $r1, $r5, $r6, $r11, $r18;
        org.apache.commons.logging.Log $r7, $r13;
        java.lang.Object $r10;
        java.lang.StringBuilder $r12, $r15, $r16;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r1 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        if $r1 != null goto label2;

        $r2 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r3 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $r5 = interfaceinvoke $r4.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>($r3);

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass> = $r5;

        $r6 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        if $r6 != null goto label2;

        $r7 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Getting bean with name \'");

        $r14 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in order to determine type");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r17);

     label1:
        $r9 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r8 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $r10 = interfaceinvoke $r9.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r8);

        if $r10 == null goto label2;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass> = $r11;

     label2:
        $r18 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        return $r18;
    }

    public boolean isStatic()
    {
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        return 0;
    }

    public void releaseTarget(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected void copyFrom(org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource)
    {
        org.springframework.beans.factory.BeanFactory $r4;
        java.lang.Class $r3;
        java.lang.String $r2;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0, r1;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r1 := @parameter0: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r2 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName> = $r2;

        $r3 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass> = $r3;

        $r4 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory> = $r4;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.beans.factory.BeanFactory $r5, $r6;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r7, $r8;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0, r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r4 = (org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource) r1;

        $r6 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r5 = r4.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 == 0 goto label4;

        $r8 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $r7 = r4.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $z2 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.springframework.beans.factory.BeanFactory $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Class $r1;
        java.lang.String $r3;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r0;

        r0 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 13 * $i0;

        $r2 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: org.springframework.beans.factory.BeanFactory beanFactory>;

        $i2 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r2);

        i5 = $i1 + $i2;

        $i3 = 13 * i5;

        $r3 = r0.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $i4 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r3);

        i6 = $i3 + $i4;

        return i6;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r6, $r9, $r12;
        java.lang.Class $r2, $r7, $r10;
        java.lang.String $r3, $r5, $r8, $r11;
        org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource r1;

        r1 := @this: org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for target bean \'");

        $r5 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.String targetBeanName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        if $r7 == null goto label1;

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type [");

        $r10 = r1.<org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: java.lang.Class targetClass>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label1:
        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <org.springframework.aop.target.AbstractBeanFactoryBasedTargetSource: long serialVersionUID> = -4721607536018568393L;

        return;
    }
}
