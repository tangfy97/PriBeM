public class org.apache.regexp.REProgram extends java.lang.Object implements java.io.Serializable
{
    static final int OPT_HASBACKREFS;
    static final int OPT_HASBOL;
    char[] instruction;
    int lenInstruction;
    char[] prefix;
    int flags;
    int maxParens;

    public void <init>(char[])
    {
        int $i0;
        char[] r1;
        org.apache.regexp.REProgram r0;

        r0 := @this: org.apache.regexp.REProgram;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.regexp.REProgram: void <init>(char[],int)>(r1, $i0);

        return;
    }

    public void <init>(int, char[])
    {
        org.apache.regexp.REProgram r0;
        int $i0, i1;
        char[] r1;

        r0 := @this: org.apache.regexp.REProgram;

        i1 := @parameter0: int;

        r1 := @parameter1: char[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.regexp.REProgram: void <init>(char[],int)>(r1, $i0);

        r0.<org.apache.regexp.REProgram: int maxParens> = i1;

        return;
    }

    public void <init>(char[], int)
    {
        org.apache.regexp.REProgram r0;
        int i0, $i2;
        char[] r1;

        r0 := @this: org.apache.regexp.REProgram;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.apache.regexp.REProgram: int maxParens> = $i2;

        virtualinvoke r0.<org.apache.regexp.REProgram: void setInstructions(char[],int)>(r1, i0);

        return;
    }

    public char[] getInstructions()
    {
        org.apache.regexp.REProgram r0;
        int $i0, $i1, $i2;
        char[] r1, $r2;

        r0 := @this: org.apache.regexp.REProgram;

        $i0 = r0.<org.apache.regexp.REProgram: int lenInstruction>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.apache.regexp.REProgram: int lenInstruction>;

        r1 = newarray (char)[$i1];

        $r2 = r0.<org.apache.regexp.REProgram: char[] instruction>;

        $i2 = r0.<org.apache.regexp.REProgram: int lenInstruction>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2);

        return r1;

     label1:
        return null;
    }

    public void setInstructions(char[], int)
    {
        int i0, $i1, $i3, $i5, $i6, $i8, $i9, $i11, $i14, $i15, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        org.apache.regexp.REProgram r0;
        char $c2, $c4, $c7, $c10, $c12, c13, c16, c17;
        char[] r1, $r2, $r3;

        r0 := @this: org.apache.regexp.REProgram;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r0.<org.apache.regexp.REProgram: char[] instruction> = r1;

        r0.<org.apache.regexp.REProgram: int lenInstruction> = i0;

        r0.<org.apache.regexp.REProgram: int flags> = 0;

        r0.<org.apache.regexp.REProgram: char[] prefix> = null;

        if r1 == null goto label9;

        if i0 == 0 goto label9;

        if i0 < 3 goto label2;

        $c10 = r1[0];

        $i19 = (int) $c10;

        if $i19 != 124 goto label2;

        c17 = r1[2];

        $i20 = (int) c17;

        $i11 = $i20 + 0;

        $c12 = r1[$i11];

        $i21 = (int) $c12;

        if $i21 != 69 goto label2;

        if i0 < 6 goto label2;

        c13 = r1[3];

        $i22 = (int) c13;

        if $i22 != 65 goto label1;

        c16 = r1[4];

        $i23 = (int) c16;

        $r2 = newarray (char)[$i23];

        r0.<org.apache.regexp.REProgram: char[] prefix> = $r2;

        $r3 = r0.<org.apache.regexp.REProgram: char[] prefix>;

        $i24 = (int) c16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 6, $r3, 0, $i24);

        goto label2;

     label1:
        $i25 = (int) c13;

        if $i25 != 94 goto label2;

        $i14 = r0.<org.apache.regexp.REProgram: int flags>;

        $i15 = $i14 | 2;

        r0.<org.apache.regexp.REProgram: int flags> = $i15;

     label2:
        i18 = 0;

        goto label8;

     label3:
        $i1 = i18 + 0;

        $c2 = r1[$i1];

        $i26 = (int) $c2;

        lookupswitch($i26)
        {
            case 35: goto label6;
            case 65: goto label5;
            case 91: goto label4;
            default: goto label7;
        };

     label4:
        $i3 = i18 + 1;

        $c4 = r1[$i3];

        $i27 = (int) $c4;

        $i5 = $i27 * 2;

        i18 = i18 + $i5;

        goto label7;

     label5:
        $i6 = i18 + 1;

        $c7 = r1[$i6];

        $i28 = (int) $c7;

        i18 = i18 + $i28;

        goto label7;

     label6:
        $i8 = r0.<org.apache.regexp.REProgram: int flags>;

        $i9 = $i8 | 1;

        r0.<org.apache.regexp.REProgram: int flags> = $i9;

        goto label9;

     label7:
        i18 = i18 + 3;

     label8:
        if i18 < i0 goto label3;

     label9:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.regexp.REProgram: int OPT_HASBOL> = 2;

        <org.apache.regexp.REProgram: int OPT_HASBACKREFS> = 1;

        return;
    }
}
