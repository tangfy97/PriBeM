public class com.jidesoft.icons.IconsFactory extends java.lang.Object
{
    static java.util.Map _icons;
    static java.util.Map _disableIcons;
    static java.util.Map _brighterIcons;
    static java.util.Map _tintedIcons;
    public static javax.swing.ImageIcon EMPTY_ICON;
    static final double DEGREE_90;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.jidesoft.icons.IconsFactory r0;

        r0 := @this: com.jidesoft.icons.IconsFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.swing.ImageIcon getImageIcon(java.lang.Class, java.lang.String)
    {
        java.util.Map $r10, $r14;
        javax.swing.ImageIcon $r13, $r15, $r16;
        java.lang.String $r2, r5, $r7;
        boolean $z0;
        javax.swing.UIDefaults $r8;
        javax.swing.Icon r12;
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        java.lang.Class r1;
        java.lang.Object $r9, $r11;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r9 = virtualinvoke $r8.<javax.swing.UIDefaults: java.lang.Object get(java.lang.Object)>($r7);

        $z0 = $r9 instanceof javax.swing.ImageIcon;

        if $z0 == 0 goto label1;

        $r16 = (javax.swing.ImageIcon) $r9;

        return $r16;

     label1:
        $r10 = <com.jidesoft.icons.IconsFactory: java.util.Map _icons>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r12 = (javax.swing.Icon) $r11;

        if r12 == null goto label2;

        $r15 = (javax.swing.ImageIcon) r12;

        return $r15;

     label2:
        $r13 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createImageIcon(java.lang.Class,java.lang.String)>(r1, r5);

        $r14 = <com.jidesoft.icons.IconsFactory: java.util.Map _icons>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

        return $r13;
    }

    public static javax.swing.ImageIcon findImageIcon(java.lang.Class, java.lang.String) throws java.io.IOException
    {
        java.util.Map $r10, $r14;
        javax.swing.ImageIcon r12, $r13, $r15;
        java.lang.String $r2, r5, $r7;
        boolean $z0;
        javax.swing.UIDefaults $r8;
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        java.lang.Class r1;
        java.lang.Object $r9, $r11;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r9 = virtualinvoke $r8.<javax.swing.UIDefaults: java.lang.Object get(java.lang.Object)>($r7);

        $z0 = $r9 instanceof javax.swing.ImageIcon;

        if $z0 == 0 goto label1;

        $r15 = (javax.swing.ImageIcon) $r9;

        return $r15;

     label1:
        $r10 = <com.jidesoft.icons.IconsFactory: java.util.Map _icons>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r12 = (javax.swing.ImageIcon) $r11;

        if r12 == null goto label2;

        return r12;

     label2:
        $r13 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createImageIconWithException(java.lang.Class,java.lang.String)>(r1, r5);

        $r14 = <com.jidesoft.icons.IconsFactory: java.util.Map _icons>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

        return $r13;
    }

    public static javax.swing.ImageIcon getDisabledImageIcon(java.lang.Class, java.lang.String)
    {
        java.util.Map $r8, $r13;
        javax.swing.ImageIcon r10, $r11, $r12;
        java.lang.StringBuilder $r0, $r3, $r4, $r6;
        java.lang.Class r1;
        java.lang.Object $r9;
        java.lang.String $r2, r5, $r7;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = <com.jidesoft.icons.IconsFactory: java.util.Map _disableIcons>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r10 = (javax.swing.ImageIcon) $r9;

        if r10 == null goto label1;

        return r10;

     label1:
        $r11 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(r1, r5);

        $r12 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createGrayImage(javax.swing.ImageIcon)>($r11);

        $r13 = <com.jidesoft.icons.IconsFactory: java.util.Map _disableIcons>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r12);

        return $r12;
    }

    public static javax.swing.ImageIcon getBrighterImageIcon(java.lang.Class, java.lang.String)
    {
        java.util.Map $r10, $r15;
        int $i0;
        javax.swing.ImageIcon r12, $r13, $r14;
        java.lang.String $r2, r5, $r9;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r8;
        java.lang.Class r1;
        java.lang.Object $r11;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = staticinvoke <com.jidesoft.icons.ColorFilter: int getPercent()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <com.jidesoft.icons.IconsFactory: java.util.Map _brighterIcons>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r12 = (javax.swing.ImageIcon) $r11;

        if r12 == null goto label1;

        return r12;

     label1:
        $r13 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(r1, r5);

        $r14 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createBrighterImage(javax.swing.ImageIcon)>($r13);

        $r15 = <com.jidesoft.icons.IconsFactory: java.util.Map _brighterIcons>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r14);

        return $r14;
    }

    public static javax.swing.ImageIcon getBrighterImageIcon(java.lang.Class, java.lang.String, int)
    {
        java.util.Map $r10, $r15;
        int i0;
        javax.swing.ImageIcon r12, $r13, $r14;
        java.lang.String $r2, r5, $r9;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r8;
        java.lang.Class r1;
        java.lang.Object $r11;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <com.jidesoft.icons.IconsFactory: java.util.Map _brighterIcons>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r12 = (javax.swing.ImageIcon) $r11;

        if r12 == null goto label1;

        return r12;

     label1:
        $r13 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(r1, r5);

        $r14 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createBrighterImage(javax.swing.ImageIcon,int)>($r13, i0);

        $r15 = <com.jidesoft.icons.IconsFactory: java.util.Map _brighterIcons>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r14);

        return $r14;
    }

    public static javax.swing.ImageIcon getTintedImageIcon(java.lang.Class, java.lang.String, java.awt.Color)
    {
        java.awt.Color r8;
        java.util.Map $r12, $r17;
        javax.swing.ImageIcon r14, $r15, $r16;
        java.lang.String $r2, r5, $r9, $r11;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r10;
        java.lang.Class r1;
        java.lang.Object $r13;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.awt.Color;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r9 = virtualinvoke r8.<java.awt.Color: java.lang.String toString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = <com.jidesoft.icons.IconsFactory: java.util.Map _tintedIcons>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r14 = (javax.swing.ImageIcon) $r13;

        if r14 == null goto label1;

        return r14;

     label1:
        $r15 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getImageIcon(java.lang.Class,java.lang.String)>(r1, r5);

        $r16 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createTintedImage(javax.swing.ImageIcon,java.awt.Color)>($r15, r8);

        $r17 = <com.jidesoft.icons.IconsFactory: java.util.Map _tintedIcons>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r16);

        return $r16;
    }

    public static javax.swing.ImageIcon createGrayImage(java.awt.Image)
    {
        java.awt.Image r0, $r2;
        javax.swing.ImageIcon $r1, $r3;

        r0 := @parameter0: java.awt.Image;

        if r0 != null goto label1;

        $r3 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r3;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = staticinvoke <javax.swing.GrayFilter: java.awt.Image createDisabledImage(java.awt.Image)>(r0);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r2);

        return $r1;
    }

    private static javax.swing.ImageIcon createGrayImage(javax.swing.ImageIcon)
    {
        java.awt.Image $r2, $r3;
        javax.swing.ImageIcon r0, $r1, $r4;

        r0 := @parameter0: javax.swing.ImageIcon;

        if r0 != null goto label1;

        $r4 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r4;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $r3 = staticinvoke <javax.swing.GrayFilter: java.awt.Image createDisabledImage(java.awt.Image)>($r2);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r3);

        return $r1;
    }

    public static javax.swing.ImageIcon createGrayImage(java.awt.Component, javax.swing.Icon)
    {
        java.awt.image.BufferedImage $r2;
        java.awt.Image $r6;
        javax.swing.Icon r0;
        java.awt.Component r3;
        int $i0, $i1, $i2, $i3;
        java.awt.Graphics $r4;
        javax.swing.ImageIcon $r1, $r5, $r7;

        r3 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.Icon;

        if r0 != null goto label1;

        $r7 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r7;

     label1:
        $i0 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        $i1 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        if $i0 == 0 goto label2;

        if $i1 != 0 goto label3;

     label2:
        $r1 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r1;

     label3:
        $r2 = new java.awt.image.BufferedImage;

        $i2 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        $i3 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i3, 2);

        $r4 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r3, $r4, 0, 0);

        $r5 = new javax.swing.ImageIcon;

        $r6 = staticinvoke <javax.swing.GrayFilter: java.awt.Image createDisabledImage(java.awt.Image)>($r2);

        specialinvoke $r5.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r6);

        return $r5;
    }

    public static javax.swing.ImageIcon createBrighterImage(java.awt.Image)
    {
        java.awt.Image r0, $r2;
        javax.swing.ImageIcon $r1, $r3;

        r0 := @parameter0: java.awt.Image;

        if r0 != null goto label1;

        $r3 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r3;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image)>(r0);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r2);

        return $r1;
    }

    public static javax.swing.ImageIcon createBrighterImage(java.awt.Image, int)
    {
        java.awt.Image r0, $r2;
        int i0;
        javax.swing.ImageIcon $r1, $r3;

        r0 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r3;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image,int)>(r0, i0);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r2);

        return $r1;
    }

    public static javax.swing.ImageIcon createBrighterImage(java.awt.Component, javax.swing.Icon)
    {
        java.awt.image.BufferedImage $r1;
        java.awt.Image $r5;
        javax.swing.Icon r0;
        java.awt.Component r2;
        int $i0, $i1;
        java.awt.Graphics $r3;
        javax.swing.ImageIcon $r4, $r6;

        r2 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.Icon;

        if r0 != null goto label1;

        $r6 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r6;

     label1:
        $r1 = new java.awt.image.BufferedImage;

        $i0 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        $i1 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r3 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, $r3, 0, 0);

        $r4 = new javax.swing.ImageIcon;

        $r5 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image)>($r1);

        specialinvoke $r4.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r5);

        return $r4;
    }

    public static javax.swing.ImageIcon createBrighterImage(java.awt.Component, javax.swing.Icon, int)
    {
        java.awt.image.BufferedImage $r1;
        java.awt.Image $r5;
        javax.swing.Icon r0;
        java.awt.Component r2;
        int $i0, $i1, i2;
        java.awt.Graphics $r3;
        javax.swing.ImageIcon $r4, $r6;

        r2 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.Icon;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $r6 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r6;

     label1:
        $r1 = new java.awt.image.BufferedImage;

        $i0 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        $i1 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r3 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, $r3, 0, 0);

        $r4 = new javax.swing.ImageIcon;

        $r5 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image,int)>($r1, i2);

        specialinvoke $r4.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r5);

        return $r4;
    }

    public static javax.swing.ImageIcon createBrighterImage(javax.swing.ImageIcon)
    {
        java.awt.Image $r2, $r3;
        javax.swing.ImageIcon r0, $r1, $r4;

        r0 := @parameter0: javax.swing.ImageIcon;

        if r0 != null goto label1;

        $r4 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r4;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $r3 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image)>($r2);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r3);

        return $r1;
    }

    public static javax.swing.ImageIcon createBrighterImage(javax.swing.ImageIcon, int)
    {
        java.awt.Image $r2, $r3;
        int i0;
        javax.swing.ImageIcon r0, $r1, $r4;

        r0 := @parameter0: javax.swing.ImageIcon;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r4 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r4;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $r3 = staticinvoke <com.jidesoft.icons.ColorFilter: java.awt.Image createBrighterImage(java.awt.Image,int)>($r2, i0);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r3);

        return $r1;
    }

    public static javax.swing.ImageIcon createTintedImage(javax.swing.ImageIcon, java.awt.Color)
    {
        java.awt.Color r3;
        java.awt.Image $r2, $r4;
        javax.swing.ImageIcon r0, $r1, $r5;

        r0 := @parameter0: javax.swing.ImageIcon;

        r3 := @parameter1: java.awt.Color;

        if r0 != null goto label1;

        $r5 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r5;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $r4 = staticinvoke <com.jidesoft.icons.TintFilter: java.awt.Image createTintedImage(java.awt.Image,java.awt.Color,java.awt.Insets)>($r2, r3, null);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r4);

        return $r1;
    }

    public static javax.swing.ImageIcon createNegativeImage(java.awt.Image)
    {
        java.awt.Image r0, $r2;
        javax.swing.ImageIcon $r1, $r3;

        r0 := @parameter0: java.awt.Image;

        if r0 != null goto label1;

        $r3 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r3;

     label1:
        $r1 = new javax.swing.ImageIcon;

        $r2 = staticinvoke <com.jidesoft.icons.MaskFilter: java.awt.Image createNegativeImage(java.awt.Image)>(r0);

        specialinvoke $r1.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r2);

        return $r1;
    }

    public static javax.swing.ImageIcon createMaskImage(java.awt.Component, javax.swing.Icon, java.awt.Color, java.awt.Color)
    {
        java.awt.Color r5, r6;
        java.awt.image.BufferedImage $r0;
        java.awt.Image $r7;
        javax.swing.Icon r1;
        java.awt.Component r2;
        int $i0, $i1;
        java.awt.Graphics $r3;
        javax.swing.ImageIcon $r4;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.Icon;

        r5 := @parameter2: java.awt.Color;

        r6 := @parameter3: java.awt.Color;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = interfaceinvoke r1.<javax.swing.Icon: int getIconWidth()>();

        $i1 = interfaceinvoke r1.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r3 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        interfaceinvoke r1.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, $r3, 0, 0);

        $r4 = new javax.swing.ImageIcon;

        $r7 = staticinvoke <com.jidesoft.icons.MaskFilter: java.awt.Image createImage(java.awt.Image,java.awt.Color,java.awt.Color)>($r0, r5, r6);

        specialinvoke $r4.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r7);

        return $r4;
    }

    public static javax.swing.ImageIcon createRotatedImage(java.awt.Component, javax.swing.Icon, double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b9, $b10, $b11, $b12, $b15;
        java.awt.Component r1;
        long $l7, $l8;
        javax.swing.ImageIcon $r10;
        java.awt.RenderingHints$Key $r6;
        boolean z0, $z1, $z2;
        java.awt.image.BufferedImage $r9;
        javax.swing.Icon r0;
        java.awt.Graphics $r3, $r4;
        java.awt.Graphics2D $r5;
        int $i13, $i14, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, d33, $d34, d35, $d36, $d37;
        java.lang.Object $r7;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.Icon;

        d0 := @parameter2: double;

        d33 = d0 % 360.0;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label01;

        $b11 = d33 cmpl 0.0;

        if $b11 != 0 goto label01;

        d33 = 360.0;

     label01:
        $d34 = d33 % 90.0;

        d35 = $d34;

        $b12 = d33 cmpl 0.0;

        if $b12 == 0 goto label02;

        $b10 = $d34 cmpl 0.0;

        if $b10 != 0 goto label02;

        d35 = 90.0;

     label02:
        $d36 = staticinvoke <java.lang.Math: double toRadians(double)>(d35);

        $i13 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        $i14 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        $b15 = d33 cmpl 0.0;

        $i28 = (int) $b15;

        if $i28 < 0 goto label03;

        $b9 = d33 cmpg 90.0;

        $i29 = (int) $b9;

        if $i29 <= 0 goto label04;

     label03:
        $b1 = d33 cmpl 180.0;

        $i30 = (int) $b1;

        if $i30 <= 0 goto label05;

        $b6 = d33 cmpg 270.0;

        $i31 = (int) $b6;

        if $i31 > 0 goto label05;

     label04:
        $d18 = (double) $i13;

        $d17 = 1.5707963267948966 - $d36;

        $d19 = staticinvoke <java.lang.Math: double sin(double)>($d17);

        $d20 = $d18 * $d19;

        $d21 = (double) $i14;

        $d22 = staticinvoke <java.lang.Math: double sin(double)>($d36);

        $d23 = $d21 * $d22;

        $d24 = $d20 + $d23;

        $l7 = staticinvoke <java.lang.Math: long round(double)>($d24);

        i16 = (int) $l7;

        $d25 = (double) $i13;

        $d26 = staticinvoke <java.lang.Math: double sin(double)>($d36);

        $d28 = $d25 * $d26;

        $d29 = (double) $i14;

        $d27 = 1.5707963267948966 - $d36;

        $d30 = staticinvoke <java.lang.Math: double sin(double)>($d27);

        $d31 = $d29 * $d30;

        $d32 = $d28 + $d31;

        $l8 = staticinvoke <java.lang.Math: long round(double)>($d32);

        i17 = (int) $l8;

        goto label06;

     label05:
        $d2 = (double) $i14;

        $d1 = 1.5707963267948966 - $d36;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d4 = $d2 * $d3;

        $d5 = (double) $i13;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d36);

        $d7 = $d5 * $d6;

        $d8 = $d4 + $d7;

        i16 = (int) $d8;

        $d9 = (double) $i14;

        $d10 = staticinvoke <java.lang.Math: double sin(double)>($d36);

        $d12 = $d9 * $d10;

        $d13 = (double) $i13;

        $d11 = 1.5707963267948966 - $d36;

        $d14 = staticinvoke <java.lang.Math: double sin(double)>($d11);

        $d15 = $d13 * $d14;

        $d16 = $d12 + $d15;

        i17 = (int) $d16;

     label06:
        $r9 = new java.awt.image.BufferedImage;

        specialinvoke $r9.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i16, i17, 2);

        $r3 = virtualinvoke $r9.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r4 = virtualinvoke $r3.<java.awt.Graphics: java.awt.Graphics create()>();

        $r5 = (java.awt.Graphics2D) $r4;

        $i18 = $i13 / 2;

        $i19 = $i14 / 2;

        $i20 = $i13 % 2;

        if $i20 == 0 goto label07;

        $b4 = d33 cmpl 90.0;

        $i32 = (int) $b4;

        if $i32 < 0 goto label07;

        $b5 = d33 cmpg 180.0;

        $i33 = (int) $b5;

        if $i33 > 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        $i21 = $i13 % 2;

        if $i21 == 0 goto label09;

        $b2 = d33 cmpl 180.0;

        $i34 = (int) $b2;

        if $i34 < 0 goto label09;

        $b3 = d33 cmpg 360.0;

        $i35 = (int) $b3;

        if $i35 >= 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        $i22 = i16 / 2;

        $i23 = $i22 + z0;

        $i24 = i17 / 2;

        $i25 = $i24 + $z2;

        virtualinvoke $r5.<java.awt.Graphics2D: void translate(int,int)>($i23, $i25);

        $d37 = staticinvoke <java.lang.Math: double toRadians(double)>(d33);

        virtualinvoke $r5.<java.awt.Graphics2D: void rotate(double)>($d37);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        virtualinvoke $r5.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r7);

        $i26 = neg $i18;

        $i27 = neg $i19;

        interfaceinvoke r0.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r1, $r5, $i26, $i27);

        virtualinvoke $r5.<java.awt.Graphics2D: void dispose()>();

        $r10 = new javax.swing.ImageIcon;

        specialinvoke $r10.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r9);

        return $r10;
    }

    public static javax.swing.ImageIcon createNegativeImage(java.awt.Component, javax.swing.Icon)
    {
        java.awt.image.BufferedImage $r0;
        java.awt.Image $r5;
        javax.swing.Icon r1;
        java.awt.Component r2;
        int $i0, $i1;
        java.awt.Graphics $r3;
        javax.swing.ImageIcon $r4;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.Icon;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = interfaceinvoke r1.<javax.swing.Icon: int getIconWidth()>();

        $i1 = interfaceinvoke r1.<javax.swing.Icon: int getIconHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r3 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        interfaceinvoke r1.<javax.swing.Icon: void paintIcon(java.awt.Component,java.awt.Graphics,int,int)>(r2, $r3, 0, 0);

        $r4 = new javax.swing.ImageIcon;

        $r5 = staticinvoke <com.jidesoft.icons.MaskFilter: java.awt.Image createNegativeImage(java.awt.Image)>($r0);

        specialinvoke $r4.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r5);

        return $r4;
    }

    private static javax.swing.ImageIcon createImageIcon(java.lang.Class, java.lang.String)
    {
        java.io.PrintStream $r4;
        javax.swing.ImageIcon $r2;
        java.lang.Class r0;
        java.io.IOException $r3;
        java.lang.String r1, $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon createImageIconWithException(java.lang.Class,java.lang.String)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static javax.swing.ImageIcon createImageIconWithException(java.lang.Class, java.lang.String) throws java.io.IOException
    {
        java.awt.Image r7;
        java.io.FileNotFoundException $r6;
        javax.swing.ImageIcon $r5;
        java.lang.Class r0;
        java.lang.String r1, $r3, $r4;
        java.io.InputStream $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r6 = new java.io.FileNotFoundException;

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label1:
        $r3 = "true";

        $r4 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("jide.useImageIO", "true");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        r7 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r2);

        goto label3;

     label2:
        r7 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.Image readImageIcon(java.lang.Class,java.lang.String,java.io.InputStream)>(r0, r1, $r2);

     label3:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        $r5 = new javax.swing.ImageIcon;

        specialinvoke $r5.<javax.swing.ImageIcon: void <init>(java.awt.Image)>(r7);

        return $r5;
    }

    private static java.awt.Image readImageIcon(java.lang.Class, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        byte[] $r4, $r5, $r6, $r7, $r10, $r11, $r13, $r33, $r34;
        java.io.BufferedInputStream $r1;
        java.awt.Image $r14;
        byte[][] r0;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21, $r22, $r25, $r26, $r27, $r28, $r29, $r30;
        java.awt.Toolkit $r12;
        java.io.ByteArrayOutputStream $r3;
        int $i0, $i1, $i2;
        java.lang.String r20, $r23, $r31, $r32, r36;
        java.lang.Package $r9;
        java.io.IOException $r15, $r24, $r35;
        java.lang.Class r8;
        java.io.InputStream r2;

        r8 := @parameter0: java.lang.Class;

        r20 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.InputStream;

        r0 = newarray (byte[])[1];

     label01:
        $r1 = new java.io.BufferedInputStream;

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        $r4 = newarray (byte)[1024];

        r0[0] = $r4;

     label02:
        $r5 = r0[0];

        $i0 = virtualinvoke $r1.<java.io.BufferedInputStream: int read(byte[])>($r5);

        if $i0 <= 0 goto label03;

        $r34 = r0[0];

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r34, 0, $i0);

        goto label02;

     label03:
        virtualinvoke $r1.<java.io.BufferedInputStream: void close()>();

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void flush()>();

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0[0] = $r6;

     label04:
        goto label06;

     label05:
        $r35 := @caughtexception;

        throw $r35;

     label06:
        $r7 = r0[0];

        if $r7 == null goto label07;

        $r33 = r0[0];

        $i2 = lengthof $r33;

        if $i2 != 0 goto label10;

     label07:
        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.Package getPackage()>();

        r36 = "";

        if $r9 == null goto label08;

        $r32 = virtualinvoke $r9.<java.lang.Package: java.lang.String getName()>();

        r36 = virtualinvoke $r32.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

     label08:
        $r10 = r0[0];

        if $r10 != null goto label09;

        $r24 = new java.io.IOException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Resource ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r24;

     label09:
        $r11 = r0[0];

        $i1 = lengthof $r11;

        if $i1 != 0 goto label10;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: Resource ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is zero-length");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r15;

     label10:
        $r12 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r13 = r0[0];

        $r14 = virtualinvoke $r12.<java.awt.Toolkit: java.awt.Image createImage(byte[])>($r13);

        return $r14;

        catch java.io.IOException from label01 to label04 with label05;
    }

    public static void generateHTML(java.lang.Class)
    {
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r28, $r30, $r31, $r32, $r33;
        java.lang.Throwable $r37;
        java.lang.String $r1, $r2, $r7, $r13, $r18, $r25, $r29, $r34;
        java.io.PrintStream $r27, $r36, $r39;
        java.io.FileWriter $r8;
        java.io.IOException $r35, $r38;
        java.io.File $r3;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: java.lang.String getClassName(java.lang.String)>($r1);

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".html");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r7);

     label01:
        $r8 = new java.io.FileWriter;

        specialinvoke $r8.<java.io.FileWriter: void <init>(java.io.File)>($r3);

     label02:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<html>\n<body>\n<p><b><font size=\"5\" face=\"Verdana\">Icons in ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font></b></p>");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.FileWriter: void write(java.lang.String)>($r13);

        virtualinvoke $r8.<java.io.FileWriter: void write(java.lang.String)>("<p><b><font size=\"3\" face=\"Verdana\">Generated by JIDE Icons</font></b></p>");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b><font size=\"3\" color=\"#AAAAAA\" face=\"Verdana\">1. If you cannot view the images in this page, make sure the file is at the same directory as ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java</font></b></p>");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.FileWriter: void write(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><b><font size=\"3\" color=\"#AAAAAA\" face=\"Verdana\">2. To get a particular icon in your code, call ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".getImageIcon(FULL_CONSTANT_NAME). Replace FULL_CONSTANT_NAME with the actual ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("full constant name as in the table below");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font></b></p>");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.FileWriter: void write(java.lang.String)>($r25);

        staticinvoke <com.jidesoft.icons.IconsFactory: void generate(java.lang.Class,java.io.FileWriter,java.lang.String)>(r0, $r8, $r2);

        virtualinvoke $r8.<java.io.FileWriter: void write(java.lang.String)>("\n</body>\n</html>");

     label03:
        virtualinvoke $r8.<java.io.FileWriter: void close()>();

        goto label08;

     label04:
        $r38 := @caughtexception;

        $r39 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.Object)>($r38);

     label05:
        virtualinvoke $r8.<java.io.FileWriter: void close()>();

        goto label08;

     label06:
        $r37 := @caughtexception;

     label07:
        virtualinvoke $r8.<java.io.FileWriter: void close()>();

        throw $r37;

     label08:
        $r27 = <java.lang.System: java.io.PrintStream out>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File is generated at \"");

        $r29 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". Please copy it to the same directory as ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r34);

     label09:
        goto label11;

     label10:
        $r35 := @caughtexception;

        $r36 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.Object)>($r35);

     label11:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label01 to label09 with label10;
    }

    private static java.lang.String getClassName(java.lang.String)
    {
        java.util.StringTokenizer $r5;
        java.lang.StringBuffer $r6;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r2, $r3, r4;
        boolean $z0;

        r4 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        $i3 = $i0 + 1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i3);

     label1:
        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, "$");

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label2:
        $z0 = virtualinvoke $r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        goto label2;

     label3:
        $i1 = virtualinvoke $r6.<java.lang.StringBuffer: int length()>();

        $i2 = $i1 - 1;

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i2);

        return $r2;
    }

    private static void generate(java.lang.Class, java.io.FileWriter, java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalAccessException $r37;
        java.lang.StringBuilder $r5, $r7, $r8, $r14, $r15, $r16, $r19, $r20, $r21, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r33, $r40, $r41, $r42, $r43, $r44;
        int $i0, i1, i2, i3, $i5;
        java.lang.String r6, $r9, $r11, $r17, $r22, $r27, $r34, $r35, $r36;
        java.io.FileWriter r3;
        java.lang.Class[] $r1;
        java.lang.reflect.Field r10;
        java.lang.IllegalArgumentException $r38;
        java.lang.reflect.Field[] $r2;
        java.lang.Class r0, r39;
        java.lang.Object $r12;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.io.FileWriter;

        r6 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>();

        $i0 = lengthof $r1;

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        r39 = $r1[i2];

        $r35 = virtualinvoke r39.<java.lang.Class: java.lang.String getName()>();

        $r36 = staticinvoke <com.jidesoft.icons.IconsFactory: java.lang.String getClassName(java.lang.String)>($r35);

        staticinvoke <com.jidesoft.icons.IconsFactory: void generate(java.lang.Class,java.io.FileWriter,java.lang.String)>(r39, r3, $r36);

        $i5 = (int) -1;

        i2 = i2 + $i5;

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<p><font face=\"Verdana\"><b>");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</b></font></p>");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>($r9);

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" bordercolor=\"#CCCCCC\" width=\"66%\">");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<tr>\n");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<td width=\"24%\" align=\"center\"><b><font face=\"Verdana\" color=\"#003399\">Name</font></b></td>\n");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<td width=\"13%\" align=\"center\"><b><font face=\"Verdana\" color=\"#003399\">Image</font></b></td>\n");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<td width=\"32%\" align=\"center\"><b><font face=\"Verdana\" color=\"#003399\">File Name</font></b></td>\n");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<td width=\"31%\" align=\"center\"><b><font face=\"Verdana\" color=\"#003399\">Full Constant Name</font></b></td>\n");

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("</tr>\n");

        i1 = lengthof $r2;

        i3 = 0;

     label3:
        if i3 >= i1 goto label9;

        r10 = $r2[i3];

     label4:
        $r11 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.String getName()>();

        $r12 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("<tr>\n");

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<td align=\"left\"><font face=\"Verdana\">");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font></td>\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>($r17);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<td align=\"center\"><font face=\"Verdana\"><img border=\"0\" src=\"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"></font></td>\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>($r22);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<td align=\"left\"><font face=\"Verdana\">");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font></td>\n");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>($r27);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<td align=\"left\"><font face=\"Verdana\">");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</font></td>\n");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>($r34);

        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("</tr>\n");

     label5:
        goto label8;

     label6:
        $r38 := @caughtexception;

        virtualinvoke $r38.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label8;

     label7:
        $r37 := @caughtexception;

        virtualinvoke $r37.<java.lang.IllegalAccessException: void printStackTrace()>();

     label8:
        i3 = i3 + 1;

        goto label3;

     label9:
        virtualinvoke r3.<java.io.FileWriter: void write(java.lang.String)>("</table><br><p>\n");

        return;

        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label7;
    }

    public static javax.swing.ImageIcon getIcon(java.awt.Component, javax.swing.ImageIcon, int, int, int, int)
    {
        int i0, i1, i2, i3;
        javax.swing.ImageIcon r1, $r2;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.ImageIcon;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int,int,int)>(r0, r1, i0, i1, i2, i3, i2, i3);

        return $r2;
    }

    public static javax.swing.ImageIcon getIcon(java.awt.Component, javax.swing.ImageIcon, int, int, int, int, int, int)
    {
        java.awt.Component r0;
        int i0, i1, i2, i3, i4, i5;
        javax.swing.ImageIcon r1, $r2;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.ImageIcon;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int,int,int,int)>(r0, r1, i0, i1, i2, i3, 2, i4, i5);

        return $r2;
    }

    public static javax.swing.ImageIcon getIcon(java.awt.Component, javax.swing.ImageIcon, int, int, int, int, int)
    {
        java.awt.Component r0;
        int i0, i1, i2, i3, i4;
        javax.swing.ImageIcon r1, $r2;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.ImageIcon;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getIcon(java.awt.Component,javax.swing.ImageIcon,int,int,int,int,int,int,int)>(r0, r1, i0, i1, i2, i3, i4, i2, i3);

        return $r2;
    }

    public static javax.swing.ImageIcon getIcon(java.awt.Component, javax.swing.ImageIcon, int, int, int, int, int, int, int)
    {
        int i0, i1, $i2, $i3, i4, i5, $i6, $i7, i8, i9, i10, $i11, $i12;
        javax.swing.ImageIcon r0, $r5, $r6;
        java.awt.image.BufferedImage $r1;
        java.awt.Image $r3;
        java.awt.Component r4;
        java.awt.Graphics $r2;

        r4 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.ImageIcon;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        i1 := @parameter4: int;

        i5 := @parameter5: int;

        i10 := @parameter6: int;

        i8 := @parameter7: int;

        i9 := @parameter8: int;

        if r0 == null goto label1;

        if i0 < 0 goto label1;

        $i2 = i0 + i1;

        $i3 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        if $i2 > $i3 goto label1;

        if i4 < 0 goto label1;

        $i6 = i4 + i5;

        $i7 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconHeight()>();

        if $i6 <= $i7 goto label2;

     label1:
        $r6 = <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON>;

        return $r6;

     label2:
        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i8, i9, i10);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r3 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i12 = i0 + i1;

        $i11 = i4 + i5;

        virtualinvoke $r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r3, 0, 0, i8, i9, i0, i4, $i12, $i11, r4);

        $r5 = new javax.swing.ImageIcon;

        specialinvoke $r5.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r1);

        return $r5;
    }

    public static javax.swing.ImageIcon getOverlayIcon(java.awt.Component, javax.swing.ImageIcon, javax.swing.ImageIcon, int)
    {
        java.awt.Insets $r3;
        int i0;
        javax.swing.ImageIcon r1, r2, $r4;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: javax.swing.ImageIcon;

        r2 := @parameter2: javax.swing.ImageIcon;

        i0 := @parameter3: int;

        $r3 = new java.awt.Insets;

        specialinvoke $r3.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $r4 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int,java.awt.Insets)>(r0, r1, r2, i0, $r3);

        return $r4;
    }

    public static javax.swing.ImageIcon getOverlayIcon(java.awt.Component, javax.swing.ImageIcon, javax.swing.ImageIcon, int, java.awt.Insets)
    {
        java.awt.Component r3;
        java.awt.Insets r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, $i26, $i28;
        javax.swing.ImageIcon r0, r1, $r4;

        r3 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.ImageIcon;

        r1 := @parameter2: javax.swing.ImageIcon;

        i4 := @parameter3: int;

        r2 := @parameter4: java.awt.Insets;

        $i26 = (int) -1;

        i23 = $i26;

        $i28 = (int) -1;

        i24 = $i28;

        $i0 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        $i1 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconHeight()>();

        $i2 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconWidth()>();

        $i3 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconHeight()>();

        tableswitch(i4)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label05;
            case 4: goto label09;
            case 5: goto label03;
            case 6: goto label08;
            case 7: goto label04;
            case 8: goto label07;
            default: goto label10;
        };

     label01:
        $i21 = $i0 - $i2;

        i23 = $i21 / 2;

        $i22 = $i1 - $i3;

        i24 = $i22 / 2;

        goto label10;

     label02:
        $i20 = $i0 - $i2;

        i23 = $i20 / 2;

        i24 = r2.<java.awt.Insets: int top>;

        goto label10;

     label03:
        $i8 = $i0 - $i2;

        i23 = $i8 / 2;

        $i9 = r2.<java.awt.Insets: int bottom>;

        $i10 = $i1 - $i9;

        i24 = $i10 - $i3;

        goto label10;

     label04:
        i23 = r2.<java.awt.Insets: int left>;

        $i5 = $i1 - $i3;

        i24 = $i5 / 2;

        goto label10;

     label05:
        $i15 = r2.<java.awt.Insets: int right>;

        $i16 = $i0 - $i15;

        i23 = $i16 - $i2;

        $i17 = $i1 - $i3;

        i24 = $i17 / 2;

        goto label10;

     label06:
        $i18 = r2.<java.awt.Insets: int right>;

        $i19 = $i0 - $i18;

        i23 = $i19 - $i2;

        i24 = r2.<java.awt.Insets: int top>;

        goto label10;

     label07:
        i23 = r2.<java.awt.Insets: int left>;

        i24 = r2.<java.awt.Insets: int top>;

        goto label10;

     label08:
        i23 = r2.<java.awt.Insets: int left>;

        $i6 = r2.<java.awt.Insets: int bottom>;

        $i7 = $i1 - $i6;

        i24 = $i7 - $i3;

        goto label10;

     label09:
        $i11 = r2.<java.awt.Insets: int right>;

        $i12 = $i0 - $i11;

        i23 = $i12 - $i2;

        $i13 = r2.<java.awt.Insets: int bottom>;

        $i14 = $i1 - $i13;

        i24 = $i14 - $i3;

     label10:
        $r4 = staticinvoke <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon getOverlayIcon(java.awt.Component,javax.swing.ImageIcon,javax.swing.ImageIcon,int,int)>(r3, r0, r1, i23, i24);

        return $r4;
    }

    public static javax.swing.ImageIcon getOverlayIcon(java.awt.Component, javax.swing.ImageIcon, javax.swing.ImageIcon, int, int)
    {
        int i0, $i1, $i2, i3, i4, $i5, $i6, $i8, $i10;
        javax.swing.ImageIcon r0, r1, $r10;
        java.awt.Image $r4, $r8;
        java.awt.image.BufferedImage $r9;
        java.awt.Component r5;
        java.awt.Graphics $r3, $r7;

        r5 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.ImageIcon;

        r1 := @parameter2: javax.swing.ImageIcon;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        if r0 != null goto label1;

        $i5 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconWidth()>();

        goto label2;

     label1:
        $i5 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

     label2:
        i0 = $i5;

        if r0 != null goto label3;

        $i6 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconHeight()>();

        goto label4;

     label3:
        $i6 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconHeight()>();

     label4:
        $i1 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconWidth()>();

        $i2 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconHeight()>();

        $i8 = (int) -1;

        if i3 == $i8 goto label6;

        $i10 = (int) -1;

        if i4 == $i10 goto label6;

        $r9 = new java.awt.image.BufferedImage;

        specialinvoke $r9.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, $i6, 2);

        if r0 == null goto label5;

        $r7 = virtualinvoke $r9.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r8 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        virtualinvoke $r7.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r8, 0, 0, i0, $i6, r5);

     label5:
        $r3 = virtualinvoke $r9.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r4 = virtualinvoke r1.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        virtualinvoke $r3.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r4, i3, i4, $i1, $i2, r5);

        $r10 = new javax.swing.ImageIcon;

        specialinvoke $r10.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r9);

        return $r10;

     label6:
        return r0;
    }

    public static javax.swing.ImageIcon getCombinedIcon(java.awt.Component, javax.swing.ImageIcon, javax.swing.ImageIcon, int, int)
    {
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i16, i17, $i18, i19, $i20, $i21;
        javax.swing.ImageIcon r0, r1, $r8;
        java.awt.image.BufferedImage $r3;
        java.awt.Image $r5, $r7;
        java.awt.Component r2;
        java.awt.Graphics $r4, $r6;

        r2 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.ImageIcon;

        r1 := @parameter2: javax.swing.ImageIcon;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        if r0 != null goto label01;

        return r1;

     label01:
        if r1 != null goto label02;

        return r0;

     label02:
        $i0 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        $i1 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconHeight()>();

        $i2 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconWidth()>();

        $i3 = virtualinvoke r1.<javax.swing.ImageIcon: int getIconHeight()>();

        if i4 != 0 goto label07;

        $i9 = $i0 + $i2;

        i12 = $i9 + i5;

        i13 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i3);

        i14 = 0;

        i15 = $i0 + i5;

        if $i1 <= $i3 goto label03;

        $i16 = 0;

        goto label04;

     label03:
        $i10 = $i3 - $i1;

        $i16 = $i10 / 2;

     label04:
        i17 = $i16;

        if $i1 >= $i3 goto label05;

        $i18 = 0;

        goto label06;

     label05:
        $i11 = $i1 - $i3;

        $i18 = $i11 / 2;

     label06:
        i19 = $i18;

        goto label12;

     label07:
        i12 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i2);

        $i6 = $i1 + $i3;

        i13 = $i6 + i5;

        if $i0 <= $i2 goto label08;

        $i20 = 0;

        goto label09;

     label08:
        $i7 = $i2 - $i0;

        $i20 = $i7 / 2;

     label09:
        i14 = $i20;

        if $i0 >= $i2 goto label10;

        $i21 = 0;

        goto label11;

     label10:
        $i8 = $i0 - $i2;

        $i21 = $i8 / 2;

     label11:
        i15 = $i21;

        i17 = 0;

        i19 = $i1 + i5;

     label12:
        $r3 = new java.awt.image.BufferedImage;

        specialinvoke $r3.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i12, i13, 2);

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r5 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        virtualinvoke $r4.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r5, i14, i17, $i0, $i1, r2);

        $r6 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        $r7 = virtualinvoke r1.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        virtualinvoke $r6.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r7, i15, i19, $i2, $i3, r2);

        $r8 = new javax.swing.ImageIcon;

        specialinvoke $r8.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r3);

        return $r8;
    }

    public static javax.swing.ImageIcon getScaledImage(java.awt.Component, javax.swing.ImageIcon, int, int)
    {
        java.awt.Graphics2D $r2, $r11;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        javax.swing.ImageIcon r0, $r7, $r15;
        java.awt.image.BufferedImage $r1, $r9, $r10;
        java.awt.Image $r5, $r14;
        java.awt.Component r6;
        java.awt.RenderingHints$Key $r4, $r13;
        java.lang.Object $r3, $r8, $r12;

        r6 := @parameter0: java.awt.Component;

        r0 := @parameter1: javax.swing.ImageIcon;

        i0 := @parameter2: int;

        i3 := @parameter3: int;

        $i1 = virtualinvoke r0.<javax.swing.ImageIcon: int getIconWidth()>();

        $i2 = $i1 / 2;

        if i0 < $i2 goto label1;

        $r10 = new java.awt.image.BufferedImage;

        specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i3, 2);

        $r11 = virtualinvoke $r10.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r13 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r12 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r13, $r12);

        $r14 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i6 = virtualinvoke $r10.<java.awt.image.BufferedImage: int getWidth()>();

        $i7 = virtualinvoke $r10.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r11.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r14, 0, 0, $i6, $i7, r6);

        virtualinvoke $r11.<java.awt.Graphics2D: void dispose()>();

        $r15 = new javax.swing.ImageIcon;

        specialinvoke $r15.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r10);

        return $r15;

     label1:
        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i3, 2);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

        $r5 = virtualinvoke r0.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i4 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r5, 0, 0, $i4, $i5, r6);

        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        $r7 = new javax.swing.ImageIcon;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        $r9 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.image.BufferedImage getFasterScaledInstance(java.awt.image.BufferedImage,int,int,java.lang.Object,boolean)>($r1, i0, i3, $r8, 1);

        specialinvoke $r7.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r9);

        return $r7;
    }

    public static void writeGifToFile(java.awt.Component, java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        java.io.IOException $r3;
        java.lang.String $r5;
        java.util.logging.Logger $r4;
        java.awt.Component r2;
        java.io.File r1;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.io.File;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        staticinvoke <com.jidesoft.icons.IconsFactory: void writeToStream(java.awt.Component,java.lang.String,java.io.OutputStream)>(r2, "gif", $r0);

     label1:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.util.logging.Logger: void severe(java.lang.String)>($r5);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void writeJpegToFile(java.awt.Component, java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        java.io.IOException $r3;
        java.lang.String $r5;
        java.util.logging.Logger $r4;
        java.awt.Component r2;
        java.io.File r1;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.io.File;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        staticinvoke <com.jidesoft.icons.IconsFactory: void writeToStream(java.awt.Component,java.lang.String,java.io.OutputStream)>(r2, "jpg", $r0);

     label1:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.util.logging.Logger: void severe(java.lang.String)>($r5);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void writePngToFile(java.awt.Component, java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream $r0;
        java.io.IOException $r3;
        java.lang.String $r5;
        java.util.logging.Logger $r4;
        java.awt.Component r2;
        java.io.File r1;

        r2 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.io.File;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        staticinvoke <com.jidesoft.icons.IconsFactory: void writeToStream(java.awt.Component,java.lang.String,java.io.OutputStream)>(r2, "png", $r0);

     label1:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.util.logging.Logger: void severe(java.lang.String)>($r5);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void writeToStream(java.awt.Component, java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <com.jidesoft.icons.IconsFactory: void writeToStream(java.awt.Component,java.lang.String,java.io.OutputStream)>(r0, "png", r1);

        return;
    }

    private static void writeToStream(java.awt.Component, java.lang.String, java.io.OutputStream)
    {
        java.io.OutputStream r3;
        java.awt.image.BufferedImage $r1;
        java.io.IOException $r4;
        java.lang.String r2, $r6;
        java.util.logging.Logger $r5;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.OutputStream;

        $r1 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.image.BufferedImage createImage(java.awt.Component)>(r0);

     label1:
        staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>($r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()>();

        $r6 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.util.logging.Logger: void severe(java.lang.String)>($r6);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.awt.image.BufferedImage createImage(java.awt.Component)
    {
        java.awt.Component r0;
        java.awt.image.BufferedImage $r1;

        r0 := @parameter0: java.awt.Component;

        $r1 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.image.BufferedImage createImage(java.awt.Component,int)>(r0, 1);

        return $r1;
    }

    public static java.awt.image.BufferedImage createImage(java.awt.Component, java.awt.Rectangle, int)
    {
        java.awt.Rectangle r1;
        java.awt.Graphics2D $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean $z0, $z1;
        javax.swing.JComponent r4;
        java.awt.image.BufferedImage $r0;
        java.awt.Component r3;

        r3 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        $r0 = new java.awt.image.BufferedImage;

        $i2 = r1.<java.awt.Rectangle: int width>;

        $i1 = r1.<java.awt.Rectangle: int height>;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i1, i0);

        $r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i3 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i4 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r2.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i3, $i4);

        $z0 = r3 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        r4 = (javax.swing.JComponent) r3;

        $z1 = virtualinvoke r4.<javax.swing.JComponent: boolean isDoubleBuffered()>();

        virtualinvoke r4.<javax.swing.JComponent: void setDoubleBuffered(boolean)>(0);

        $i5 = r1.<java.awt.Rectangle: int x>;

        $i8 = neg $i5;

        $i6 = r1.<java.awt.Rectangle: int y>;

        $i7 = neg $i6;

        virtualinvoke $r2.<java.awt.Graphics2D: void translate(int,int)>($i8, $i7);

        $i12 = r1.<java.awt.Rectangle: int x>;

        $i11 = r1.<java.awt.Rectangle: int y>;

        $i10 = r1.<java.awt.Rectangle: int width>;

        $i9 = r1.<java.awt.Rectangle: int height>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setClip(int,int,int,int)>($i12, $i11, $i10, $i9);

        virtualinvoke r4.<javax.swing.JComponent: void paint(java.awt.Graphics)>($r2);

        virtualinvoke r4.<javax.swing.JComponent: void setDoubleBuffered(boolean)>($z1);

        goto label2;

     label1:
        virtualinvoke r3.<java.awt.Component: void paint(java.awt.Graphics)>($r2);

     label2:
        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        return $r0;
    }

    public static java.awt.image.BufferedImage createImage(java.awt.Component, int)
    {
        javax.swing.JComponent r4;
        java.awt.image.BufferedImage $r2;
        java.awt.Component r0;
        java.awt.Dimension $r1;
        java.awt.Graphics2D $r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Dimension getSize()>();

        $r2 = new java.awt.image.BufferedImage;

        $i2 = $r1.<java.awt.Dimension: int width>;

        $i1 = $r1.<java.awt.Dimension: int height>;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i1, i0);

        $r3 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i3 = virtualinvoke $r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i4 = virtualinvoke $r2.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r3.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i3, $i4);

        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        r4 = (javax.swing.JComponent) r0;

        $z1 = virtualinvoke r4.<javax.swing.JComponent: boolean isDoubleBuffered()>();

        virtualinvoke r4.<javax.swing.JComponent: void setDoubleBuffered(boolean)>(0);

        virtualinvoke r4.<javax.swing.JComponent: void paint(java.awt.Graphics)>($r3);

        virtualinvoke r4.<javax.swing.JComponent: void setDoubleBuffered(boolean)>($z1);

        goto label2;

     label1:
        virtualinvoke r0.<java.awt.Component: void paint(java.awt.Graphics)>($r3);

     label2:
        virtualinvoke $r3.<java.awt.Graphics2D: void dispose()>();

        return $r2;
    }

    public static java.awt.Image createThumbnailImage(java.awt.Component, int, int)
    {
        java.lang.AssertionError $r14, $r15;
        byte $b4, $b5;
        java.awt.Graphics2D $r3;
        int i0, i1, $i2, $i3, $i6, $i7;
        double $d0, $d1, d2, $d3, $d4, d5;
        boolean $z0, $z1;
        java.awt.image.BufferedImage $r1, $r13;
        java.awt.geom.AffineTransform $r10;
        java.awt.Component r0;
        java.awt.RenderingHints$Key $r5, $r7, $r9;
        java.lang.Object $r4, $r6, $r8;

        r0 := @parameter0: java.awt.Component;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.image.BufferedImage createImage(java.awt.Component)>(r0);

        $r13 = new java.awt.image.BufferedImage;

        specialinvoke $r13.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);

        $r3 = virtualinvoke $r13.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4);

        $r7 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_DITHERING>;

        $r6 = <java.awt.RenderingHints: java.lang.Object VALUE_DITHER_ENABLE>;

        virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r7, $r6);

        $r9 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r9, $r8);

        $d0 = (double) i0;

        $i2 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        $d1 = (double) $i2;

        d2 = $d0 / $d1;

        $d3 = (double) i1;

        $i3 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        $d4 = (double) $i3;

        d5 = $d3 / $d4;

        $z0 = <com.jidesoft.icons.IconsFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b5 = d2 cmpg 1.0;

        $i6 = (int) $b5;

        if $i6 <= 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("The thumbnail should be smaller than the original");

        throw $r14;

     label1:
        $z1 = <com.jidesoft.icons.IconsFactory: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b4 = d5 cmpg 1.0;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("The thumbnail should be smaller than the original");

        throw $r15;

     label2:
        $r10 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(d2, d5);

        virtualinvoke $r3.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r1, $r10);

        return $r13;
    }

    public static javax.swing.ImageIcon createThumbnail(java.awt.Component, int, int)
    {
        java.awt.Image $r2;
        int i0, i1;
        javax.swing.ImageIcon $r0;
        java.awt.Component r1;

        r1 := @parameter0: java.awt.Component;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new javax.swing.ImageIcon;

        $r2 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.Image createThumbnailImage(java.awt.Component,int,int)>(r1, i0, i1);

        specialinvoke $r0.<javax.swing.ImageIcon: void <init>(java.awt.Image)>($r2);

        return $r0;
    }

    public static java.awt.TexturePaint createTexture(javax.swing.JComponent, java.lang.String)
    {
        javax.swing.JComponent r3;
        java.awt.Rectangle $r7;
        java.awt.TexturePaint $r6;
        java.awt.Image $r1;
        java.awt.image.BufferedImage $r4;
        java.lang.Exception $r8;
        java.awt.MediaTracker $r2;
        java.awt.Graphics2D $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0;

        r3 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.jidesoft.icons.IconsFactory: java.awt.Image createImage(java.lang.String)>(r0);

        $r2 = new java.awt.MediaTracker;

        specialinvoke $r2.<java.awt.MediaTracker: void <init>(java.awt.Component)>(r3);

        virtualinvoke $r2.<java.awt.MediaTracker: void addImage(java.awt.Image,int)>($r1, 1);

     label1:
        virtualinvoke $r2.<java.awt.MediaTracker: void waitForAll()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $i0 = virtualinvoke $r1.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(r3);

        $i1 = virtualinvoke $r1.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(r3);

        $r4 = new java.awt.image.BufferedImage;

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 1);

        $r5 = virtualinvoke $r4.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r5.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, 0, 0, r3);

        $r6 = new java.awt.TexturePaint;

        $r7 = new java.awt.Rectangle;

        $i2 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r7.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i2, $i3);

        specialinvoke $r6.<java.awt.TexturePaint: void <init>(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)>($r4, $r7);

        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.awt.Image createImage(java.lang.String)
    {
        java.awt.Image $r5;
        java.net.URL $r3, r10;
        java.lang.Class $r0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.ClassLoader $r1;
        java.lang.String r2, $r9;
        java.awt.Toolkit $r4;

        r2 := @parameter0: java.lang.String;

        $r0 = class "Lcom/jidesoft/icons/IconsFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == null goto label2;

        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2);

        r10 = $r3;

        if $r3 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r9);

     label1:
        $r4 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r5 = virtualinvoke $r4.<java.awt.Toolkit: java.awt.Image createImage(java.net.URL)>(r10);

        return $r5;

     label2:
        return null;
    }

    static void <clinit>()
    {
        com.jidesoft.icons.IconsFactory$1 $r5;
        java.util.HashMap $r1, $r2, $r3, $r4;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.jidesoft.icons.IconsFactory: double DEGREE_90> = 1.5707963267948966;

        $r0 = class "Lcom/jidesoft/icons/IconsFactory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.jidesoft.icons.IconsFactory: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.jidesoft.icons.IconsFactory: java.util.Map _icons> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.jidesoft.icons.IconsFactory: java.util.Map _disableIcons> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.jidesoft.icons.IconsFactory: java.util.Map _brighterIcons> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <com.jidesoft.icons.IconsFactory: java.util.Map _tintedIcons> = $r4;

        $r5 = new com.jidesoft.icons.IconsFactory$1;

        specialinvoke $r5.<com.jidesoft.icons.IconsFactory$1: void <init>()>();

        <com.jidesoft.icons.IconsFactory: javax.swing.ImageIcon EMPTY_ICON> = $r5;

        return;
    }
}
