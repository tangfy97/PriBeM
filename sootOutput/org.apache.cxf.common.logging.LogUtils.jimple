public final class org.apache.cxf.common.logging.LogUtils extends java.lang.Object
{
    public static final java.lang.String KEY;
    private static final java.lang.Object[] NO_PARAMETERS;
    private static java.lang.Class loggerClass;

    private void <init>()
    {
        org.apache.cxf.common.logging.LogUtils r0;

        r0 := @this: org.apache.cxf.common.logging.LogUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setLoggerClass(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass> = r0;

        return;
    }

    public static java.util.logging.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, null, $r1);

        return $r2;
    }

    public static java.util.logging.Logger getLogger(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.logging.Logger getLogger(java.lang.Class, java.lang.String, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.logging.Logger getL7dLogger(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, null, $r1);

        return $r2;
    }

    public static java.util.logging.Logger getL7dLogger(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.logging.Logger getL7dLogger(java.lang.Class, java.lang.String, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2;
        java.util.logging.Logger $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger createLogger(java.lang.Class,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    protected static java.util.logging.Logger createLogger(java.lang.Class, java.lang.String, java.lang.String)
    {
        java.lang.Thread $r0;
        boolean $z0, $z1;
        java.util.MissingResourceException $r17, $r24, $r30, $r31;
        java.util.logging.Logger r29, r34, r35, r36, r37;
        java.lang.Exception $r19;
        java.lang.reflect.InvocationTargetException $r21, $r25;
        java.lang.ClassLoader $r1, $r3;
        java.lang.Throwable $r15, $r16, $r22, $r23, $r26;
        java.lang.Object[] $r11, $r13, $r27;
        java.lang.reflect.Constructor $r10;
        java.util.ResourceBundle r32;
        java.lang.String r4, $r5, r7, r33;
        java.lang.Class[] $r8;
        java.lang.RuntimeException $r20;
        java.lang.IllegalArgumentException $r18;
        java.lang.Class r2, $r6, $r9;
        java.lang.Object $r12, $r14, $r28;

        r2 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r3 == null goto label01;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r3);

     label01:
        r32 = null;

        if r4 != null goto label05;

        r33 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.lang.String getBundleName(java.lang.Class)>(r2);

     label02:
        r32 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(r2);

     label03:
        goto label09;

     label04:
        $r31 := @caughtexception;

        goto label09;

     label05:
        $r5 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.lang.String getBundleName(java.lang.Class,java.lang.String)>(r2, r4);

        r33 = $r5;

     label06:
        r32 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class,java.lang.String)>(r2, $r5);

     label07:
        goto label09;

     label08:
        $r30 := @caughtexception;

     label09:
        if r32 == null goto label10;

        virtualinvoke r32.<java.util.ResourceBundle: java.util.Locale getLocale()>();

     label10:
        $r6 = <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass>;

        if $r6 == null goto label25;

     label11:
        $r9 = <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass>;

        $r8 = newarray (java.lang.Class)[2];

        $r8[0] = class "Ljava/lang/String;";

        $r8[1] = class "Ljava/lang/String;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r8);

        if r4 != null goto label19;

     label12:
        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r7;

        $r13[1] = r33;

        $r14 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r13);

        r34 = (java.util.logging.Logger) $r14;

     label13:
        if $r3 == $r1 goto label14;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r1);

     label14:
        return r34;

     label15:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r26 instanceof java.util.MissingResourceException;

        if $z1 == 0 goto label18;

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = r7;

        $r27[1] = null;

        $r28 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r27);

        r29 = (java.util.logging.Logger) $r28;

     label16:
        if $r3 == $r1 goto label17;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r1);

     label17:
        return r29;

     label18:
        throw $r25;

     label19:
        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r7;

        $r11[1] = r33;

        $r12 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r11);

        r35 = (java.util.logging.Logger) $r12;

     label20:
        if $r3 == $r1 goto label21;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r1);

     label21:
        return r35;

     label22:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r22 instanceof java.util.MissingResourceException;

        if $z0 == 0 goto label23;

        $r23 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r24 = (java.util.MissingResourceException) $r23;

        throw $r24;

     label23:
        throw $r21;

     label24:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label25:
        r36 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)>(r7, r33);

     label26:
        goto label33;

     label27:
        $r18 := @caughtexception;

        r36 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r7);

     label28:
        goto label33;

     label29:
        $r17 := @caughtexception;

        r36 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r7);

     label30:
        goto label33;

     label31:
        $r16 := @caughtexception;

     label32:
        throw $r16;

     label33:
        r37 = r36;

     label34:
        if $r3 == $r1 goto label35;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r1);

     label35:
        return r37;

     label36:
        $r15 := @caughtexception;

     label37:
        if $r3 == $r1 goto label38;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void setContextClassLoader(java.lang.ClassLoader)>($r1);

     label38:
        throw $r15;

        catch java.util.MissingResourceException from label02 to label03 with label04;
        catch java.util.MissingResourceException from label06 to label07 with label08;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label15;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label22;
        catch java.lang.Exception from label11 to label13 with label24;
        catch java.lang.Exception from label15 to label16 with label24;
        catch java.lang.Exception from label18 to label20 with label24;
        catch java.lang.Exception from label22 to label24 with label24;
        catch java.lang.IllegalArgumentException from label25 to label26 with label27;
        catch java.util.MissingResourceException from label25 to label26 with label29;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch java.lang.Throwable from label27 to label28 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
        catch java.lang.Throwable from label01 to label13 with label36;
        catch java.lang.Throwable from label15 to label16 with label36;
        catch java.lang.Throwable from label18 to label20 with label36;
        catch java.lang.Throwable from label22 to label34 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    private static void setContextClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.apache.cxf.common.logging.LogUtils$2 $r0;

        r1 := @parameter0: java.lang.ClassLoader;

        $r0 = new org.apache.cxf.common.logging.LogUtils$2;

        specialinvoke $r0.<org.apache.cxf.common.logging.LogUtils$2: void <init>(java.lang.ClassLoader)>(r1);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return;
    }

    public static void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Throwable, java.lang.Object)
    {
        java.lang.Throwable r7;
        java.lang.Object[] $r4;
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.Object r5;
        java.lang.String r2, $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.Throwable;

        r5 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.lang.String localize(java.util.logging.Logger,java.lang.String)>(r0, r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r4);

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void doLog(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>(r0, r1, $r6, r7);

     label1:
        return;
    }

    public static transient void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Throwable, java.lang.Object[])
    {
        java.lang.Throwable r6;
        java.lang.Object[] r4;
        java.util.logging.Logger r0;
        java.util.logging.Level r1;
        java.lang.String r2, $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Throwable;

        r4 := @parameter4: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.lang.String localize(java.util.logging.Logger,java.lang.String)>(r0, r2);

        $r5 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, r4);

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void doLog(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>(r0, r1, $r5, r6);

     label1:
        return;
    }

    public static void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String)
    {
        java.lang.Object[] $r3;
        java.lang.String r2;
        java.util.logging.Logger r0;
        java.util.logging.Level r1;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        $r3 = <org.apache.cxf.common.logging.LogUtils: java.lang.Object[] NO_PARAMETERS>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[])>(r0, r1, r2, $r3);

        return;
    }

    public static void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r3;
        java.lang.Object[] $r4;
        java.lang.String r2;
        java.util.logging.Logger r0;
        java.util.logging.Level r1;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Throwable;

        $r4 = <org.apache.cxf.common.logging.LogUtils: java.lang.Object[] NO_PARAMETERS>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable,java.lang.Object[])>(r0, r1, r2, r3, $r4);

        return;
    }

    public static void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r3;
        java.lang.Object r4;
        java.lang.String r2;
        java.util.logging.Logger r0;
        java.util.logging.Level r1;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Object[])>(r0, r1, r2, $r3);

        return;
    }

    public static void log(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r4;
        java.util.logging.Logger r0;
        java.lang.IllegalArgumentException $r5;
        java.util.logging.Level r1;
        java.lang.String r2, $r3, r6;
        boolean $z0;

        r0 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 == 0 goto label5;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.lang.String localize(java.util.logging.Logger,java.lang.String)>(r0, r2);

        r6 = $r3;

     label1:
        r6 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        staticinvoke <org.apache.cxf.common.logging.LogUtils: void doLog(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable)>(r0, r1, r6, null);

     label5:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static void doLog(java.util.logging.Logger, java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r7, $r8;
        java.util.logging.Level r1;
        java.util.ResourceBundle $r6;
        int i0, $i1;
        java.lang.StackTraceElement r12;
        java.lang.String r2, $r4, $r5, $r11, $r13, $r14, $r15;
        boolean $z0;
        java.util.logging.LogRecord $r0;
        java.util.logging.Logger r3;
        java.lang.StackTraceElement[] $r9;
        java.lang.Class $r10;

        r3 := @parameter0: java.util.logging.Logger;

        r1 := @parameter1: java.util.logging.Level;

        r2 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.Throwable;

        $r0 = new java.util.logging.LogRecord;

        specialinvoke $r0.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r3.<java.util.logging.Logger: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r4);

        $r5 = virtualinvoke r3.<java.util.logging.Logger: java.lang.String getResourceBundleName()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>($r5);

        $r6 = virtualinvoke r3.<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>($r6);

        if r7 == null goto label1;

        virtualinvoke $r0.<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>(r7);

     label1:
        $r8 = new java.lang.Throwable;

        specialinvoke $r8.<java.lang.Throwable: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r10 = class "Lorg/apache/cxf/common/logging/LogUtils;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r9;

        if i0 >= $i1 goto label4;

        r12 = $r9[i0];

        $r13 = virtualinvoke r12.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label3;

        $r14 = virtualinvoke r12.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r14);

        $r15 = virtualinvoke r12.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke $r0.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>($r15);

        goto label4;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        virtualinvoke r3.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r0);

        return;
    }

    private static java.lang.String localize(java.util.logging.Logger, java.lang.String)
    {
        java.util.ResourceBundle $r1;
        java.util.MissingResourceException $r3;
        java.lang.String r2, $r4;
        java.util.logging.Logger r0;

        r0 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()>();

     label1:
        if $r1 == null goto label2;

        $r4 = virtualinvoke $r1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);

        goto label3;

     label2:
        $r4 = r2;

     label3:
        return $r4;

     label4:
        $r3 := @caughtexception;

        return r2;

        catch java.util.MissingResourceException from label1 to label3 with label4;
    }

    static void <clinit>()
    {
        org.apache.cxf.common.logging.LogUtils$1 $r1;
        java.lang.Thread $r4, $r29;
        java.lang.reflect.Method $r17, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.logging.Logger $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r13;
        java.lang.ClassLoader $r5, $r30;
        java.lang.Throwable $r34, $r35, $r38, $r39, $r40;
        java.lang.Object[] $r0, $r18, $r25;
        java.lang.String $r3, $r11, $r14, $r21, $r28, $r36, r41;
        java.lang.Class[] $r16, $r23;
        java.io.InputStreamReader $r33;
        java.lang.Object $r2, $r19, $r26;
        java.lang.Class $r6, $r10, $r15, $r20, $r22, $r27, $r37;
        java.io.BufferedReader $r32;
        java.io.InputStream $r31, r42;

        <org.apache.cxf.common.logging.LogUtils: java.lang.String KEY> = "org.apache.cxf.Logger";

        $r0 = newarray (java.lang.Object)[0];

        <org.apache.cxf.common.logging.LogUtils: java.lang.Object[] NO_PARAMETERS> = $r0;

        staticinvoke <org.apache.cxf.common.logging.JDKBugHacks: void doHacks()>();

     label01:
        r41 = null;

     label02:
        $r1 = new org.apache.cxf.common.logging.LogUtils$1;

        specialinvoke $r1.<org.apache.cxf.common.logging.LogUtils$1: void <init>()>();

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        r41 = (java.lang.String) $r2;

     label03:
        goto label05;

     label04:
        $r40 := @caughtexception;

     label05:
        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r41);

        if $z0 == 0 goto label11;

        $r29 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r30 = virtualinvoke $r29.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r31 = virtualinvoke $r30.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("META-INF/cxf/org.apache.cxf.Logger");

        r42 = $r31;

        if $r31 != null goto label06;

        r42 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>("META-INF/cxf/org.apache.cxf.Logger");

     label06:
        if r42 == null goto label11;

        $r32 = new java.io.BufferedReader;

        $r33 = new java.io.InputStreamReader;

        specialinvoke $r33.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r42);

        specialinvoke $r32.<java.io.BufferedReader: void <init>(java.io.Reader)>($r33);

     label07:
        r41 = virtualinvoke $r32.<java.io.BufferedReader: java.lang.String readLine()>();

     label08:
        virtualinvoke $r32.<java.io.BufferedReader: void close()>();

        goto label11;

     label09:
        $r39 := @caughtexception;

     label10:
        virtualinvoke $r32.<java.io.BufferedReader: void close()>();

        throw $r39;

     label11:
        $z7 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r41);

        if $z7 == 0 goto label20;

     label12:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.slf4j.impl.StaticLoggerBinder");

        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.slf4j.LoggerFactory");

        $r16 = newarray (java.lang.Class)[0];

        $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getILoggerFactory", $r16);

        $r18 = newarray (java.lang.Object)[0];

        $r19 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r18);

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("NOPLogger");

        if $z1 == 0 goto label13;

        r41 = null;

        goto label18;

     label13:
        $z2 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("Log4j");

        if $z2 == 0 goto label14;

        r41 = "org.apache.cxf.common.logging.Log4jLogger";

        goto label18;

     label14:
        $z3 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("JCL");

        if $z3 == 0 goto label15;

        $r22 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r23 = newarray (java.lang.Class)[0];

        $r24 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getFactory", $r23);

        $r25 = newarray (java.lang.Object)[0];

        $r26 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r25);

        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke $r28.<java.lang.String: boolean contains(java.lang.CharSequence)>("Log4j");

        if $z6 == 0 goto label18;

        r41 = "org.apache.cxf.common.logging.Log4jLogger";

        goto label18;

     label15:
        $z4 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("JDK14");

        if $z4 != 0 goto label16;

        $z5 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("pax.logging");

        if $z5 == 0 goto label17;

     label16:
        r41 = null;

        goto label18;

     label17:
        r41 = "org.apache.cxf.common.logging.Slf4jLogger";

     label18:
        goto label20;

     label19:
        $r38 := @caughtexception;

     label20:
        $z8 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r41);

        if $z8 != 0 goto label25;

     label21:
        $r3 = virtualinvoke r41.<java.lang.String: java.lang.String trim()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 1, $r5);

        <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass> = $r6;

     label22:
        goto label24;

     label23:
        $r35 := @caughtexception;

        $r36 = virtualinvoke r41.<java.lang.String: java.lang.String trim()>();

        $r37 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r36);

        <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass> = $r37;

     label24:
        $r7 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getLogger(java.lang.Class)>(class "Lorg/apache/cxf/common/logging/LogUtils;");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ");

        $r10 = <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for logging.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r14);

     label25:
        goto label27;

     label26:
        $r34 := @caughtexception;

        <org.apache.cxf.common.logging.LogUtils: java.lang.Class loggerClass> = null;

     label27:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label12 to label18 with label19;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label01 to label25 with label26;
    }
}
