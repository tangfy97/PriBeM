public class com.sun.lwuit.plaf.Border extends java.lang.Object
{
    private static com.sun.lwuit.plaf.Border defaultBorder;
    private static final int TYPE_EMPTY;
    private static final int TYPE_LINE;
    private static final int TYPE_ROUNDED;
    private static final int TYPE_ROUNDED_PRESSED;
    private static final int TYPE_ETCHED_LOWERED;
    private static final int TYPE_ETCHED_RAISED;
    private static final int TYPE_BEVEL_RAISED;
    private static final int TYPE_BEVEL_LOWERED;
    private static final int TYPE_IMAGE;
    int type;
    com.sun.lwuit.Image[] images;
    boolean themeColors;
    int colorA;
    int colorB;
    int colorC;
    int colorD;
    int thickness;
    int arcWidth;
    int arcHeight;
    boolean outline;
    com.sun.lwuit.plaf.Border pressedBorder;
    com.sun.lwuit.plaf.Border focusBorder;
    private static com.sun.lwuit.plaf.Border empty;

    protected void <init>()
    {
        com.sun.lwuit.plaf.Border r0;

        r0 := @this: com.sun.lwuit.plaf.Border;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.lwuit.plaf.Border: int thickness> = 0;

        r0.<com.sun.lwuit.plaf.Border: boolean outline> = 1;

        return;
    }

    public static com.sun.lwuit.plaf.Border getEmpty()
    {
        com.sun.lwuit.plaf.Border $r0, $r1, $r2;

        $r0 = <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border empty>;

        if $r0 != null goto label1;

        $r2 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r2.<com.sun.lwuit.plaf.Border: void <init>()>();

        <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border empty> = $r2;

     label1:
        $r1 = <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border empty>;

        return $r1;
    }

    public static com.sun.lwuit.plaf.Border createEmpty()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createImageBorder(com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image)
    {
        com.sun.lwuit.Image r2, r3, r4, r5, r6, r7, r8, r9, r10;
        com.sun.lwuit.plaf.Border $r0;
        com.sun.lwuit.Image[] $r1;

        r2 := @parameter0: com.sun.lwuit.Image;

        r3 := @parameter1: com.sun.lwuit.Image;

        r4 := @parameter2: com.sun.lwuit.Image;

        r5 := @parameter3: com.sun.lwuit.Image;

        r6 := @parameter4: com.sun.lwuit.Image;

        r7 := @parameter5: com.sun.lwuit.Image;

        r8 := @parameter6: com.sun.lwuit.Image;

        r9 := @parameter7: com.sun.lwuit.Image;

        r10 := @parameter8: com.sun.lwuit.Image;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 8;

        $r1 = newarray (com.sun.lwuit.Image)[9];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r1[3] = r5;

        $r1[4] = r6;

        $r1[5] = r7;

        $r1[6] = r8;

        $r1[7] = r9;

        $r1[8] = r10;

        $r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images> = $r1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createImageBorder(com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image)
    {
        com.sun.lwuit.Image r2, $r3, $r4, $r5, r6, $r7, $r8, $r9, r10;
        com.sun.lwuit.plaf.Border $r0;
        com.sun.lwuit.Image[] $r1;

        r2 := @parameter0: com.sun.lwuit.Image;

        r6 := @parameter1: com.sun.lwuit.Image;

        r10 := @parameter2: com.sun.lwuit.Image;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 8;

        $r1 = newarray (com.sun.lwuit.Image)[9];

        $r1[0] = r2;

        $r3 = virtualinvoke r2.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(180);

        $r1[1] = $r3;

        $r4 = virtualinvoke r2.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(270);

        $r1[2] = $r4;

        $r5 = virtualinvoke r2.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(90);

        $r1[3] = $r5;

        $r1[4] = r6;

        $r7 = virtualinvoke r6.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(90);

        $r1[5] = $r7;

        $r8 = virtualinvoke r6.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(270);

        $r1[6] = $r8;

        $r9 = virtualinvoke r6.<com.sun.lwuit.Image: com.sun.lwuit.Image rotate(int)>(180);

        $r1[7] = $r9;

        $r1[8] = r10;

        $r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images> = $r1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createLineBorder(int)
    {
        int i0;
        com.sun.lwuit.plaf.Border $r0;

        i0 := @parameter0: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 1;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = i0;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createLineBorder(int, int)
    {
        int i0, i1;
        com.sun.lwuit.plaf.Border $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 1;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createRoundBorder(int, int)
    {
        int i0, i1;
        com.sun.lwuit.plaf.Border $r0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 2;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        $r0.<com.sun.lwuit.plaf.Border: int arcHeight> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int arcWidth> = i1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createRoundBorder(int, int, boolean)
    {
        int i0, i1;
        com.sun.lwuit.plaf.Border $r0;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createRoundBorder(int,int)>(i0, i1);

        $r0.<com.sun.lwuit.plaf.Border: boolean outline> = z0;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createRoundBorder(int, int, int)
    {
        int i0, i1, i2;
        com.sun.lwuit.plaf.Border $r0;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 2;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int arcHeight> = i1;

        $r0.<com.sun.lwuit.plaf.Border: int arcWidth> = i2;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createRoundBorder(int, int, int, boolean)
    {
        int i0, i1, i2;
        com.sun.lwuit.plaf.Border $r0;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createRoundBorder(int,int,int)>(i0, i1, i2);

        $r0.<com.sun.lwuit.plaf.Border: boolean outline> = z0;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createEtchedLowered()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 4;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createEtchedLowered(int, int)
    {
        int i0, i1;
        com.sun.lwuit.plaf.Border $r0;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 4;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int colorB> = i1;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createEtchedRaised()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 5;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createEtchedRaised(int, int)
    {
        int i0, i1;
        com.sun.lwuit.plaf.Border $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 5;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int colorB> = i1;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public boolean isBackgroundPainter()
    {
        int $i0, $i1, $i2;
        com.sun.lwuit.plaf.Border r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.plaf.Border;

        $i0 = r0.<com.sun.lwuit.plaf.Border: int type>;

        if $i0 == 2 goto label1;

        $i1 = r0.<com.sun.lwuit.plaf.Border: int type>;

        if $i1 == 3 goto label1;

        $i2 = r0.<com.sun.lwuit.plaf.Border: int type>;

        if $i2 != 8 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static com.sun.lwuit.plaf.Border createBevelLowered()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 7;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createBevelLowered(int, int, int, int)
    {
        int i0, i1, i2, i3;
        com.sun.lwuit.plaf.Border $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 7;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int colorB> = i1;

        $r0.<com.sun.lwuit.plaf.Border: int colorC> = i2;

        $r0.<com.sun.lwuit.plaf.Border: int colorD> = i3;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createBevelRaised()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 6;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 1;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public static com.sun.lwuit.plaf.Border createBevelRaised(int, int, int, int)
    {
        int i0, i1, i2, i3;
        com.sun.lwuit.plaf.Border $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new com.sun.lwuit.plaf.Border;

        specialinvoke $r0.<com.sun.lwuit.plaf.Border: void <init>()>();

        $r0.<com.sun.lwuit.plaf.Border: int type> = 6;

        $r0.<com.sun.lwuit.plaf.Border: boolean themeColors> = 0;

        $r0.<com.sun.lwuit.plaf.Border: int colorA> = i0;

        $r0.<com.sun.lwuit.plaf.Border: int colorB> = i1;

        $r0.<com.sun.lwuit.plaf.Border: int colorC> = i2;

        $r0.<com.sun.lwuit.plaf.Border: int colorD> = i3;

        $r0.<com.sun.lwuit.plaf.Border: int thickness> = 2;

        return $r0;
    }

    public void setPressedInstance(com.sun.lwuit.plaf.Border)
    {
        com.sun.lwuit.plaf.Border r0, r1;

        r0 := @this: com.sun.lwuit.plaf.Border;

        r1 := @parameter0: com.sun.lwuit.plaf.Border;

        r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border pressedBorder> = r1;

        return;
    }

    public void setFocusedInstance(com.sun.lwuit.plaf.Border)
    {
        com.sun.lwuit.plaf.Border r0, r1;

        r0 := @this: com.sun.lwuit.plaf.Border;

        r1 := @parameter0: com.sun.lwuit.plaf.Border;

        r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border focusBorder> = r1;

        return;
    }

    public com.sun.lwuit.plaf.Border getFocusedInstance()
    {
        com.sun.lwuit.plaf.Border r0, $r1, $r2;

        r0 := @this: com.sun.lwuit.plaf.Border;

        $r1 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border focusBorder>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border focusBorder>;

        return $r2;

     label1:
        return r0;
    }

    public com.sun.lwuit.plaf.Border getPressedInstance()
    {
        com.sun.lwuit.plaf.Border r0, $r1, $r2;

        r0 := @this: com.sun.lwuit.plaf.Border;

        $r1 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border pressedBorder>;

        if $r1 == null goto label1;

        $r2 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border pressedBorder>;

        return $r2;

     label1:
        return r0;
    }

    public com.sun.lwuit.plaf.Border createPressedVersion()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        com.sun.lwuit.plaf.Border r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: com.sun.lwuit.plaf.Border;

        $r1 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border pressedBorder>;

        if $r1 == null goto label1;

        $r9 = r0.<com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border pressedBorder>;

        return $r9;

     label1:
        $i0 = r0.<com.sun.lwuit.plaf.Border: int type>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label7;
            case 3: goto label8;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label6;
            default: goto label9;
        };

     label2:
        $i19 = r0.<com.sun.lwuit.plaf.Border: int thickness>;

        $i21 = $i19 + 1;

        $i20 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $r8 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createLineBorder(int,int)>($i21, $i20);

        return $r8;

     label3:
        $i12 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $i11 = r0.<com.sun.lwuit.plaf.Border: int colorB>;

        $r5 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createEtchedRaised(int,int)>($i12, $i11);

        $z3 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r5.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z3;

        return $r5;

     label4:
        $i10 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $i9 = r0.<com.sun.lwuit.plaf.Border: int colorB>;

        $r4 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createEtchedLowered(int,int)>($i10, $i9);

        $z2 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r4.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z2;

        return $r4;

     label5:
        $i8 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $i7 = r0.<com.sun.lwuit.plaf.Border: int colorB>;

        $i6 = r0.<com.sun.lwuit.plaf.Border: int colorC>;

        $i5 = r0.<com.sun.lwuit.plaf.Border: int colorD>;

        $r3 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createBevelLowered(int,int,int,int)>($i8, $i7, $i6, $i5);

        $z1 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r3.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z1;

        return $r3;

     label6:
        $i4 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $i3 = r0.<com.sun.lwuit.plaf.Border: int colorB>;

        $i2 = r0.<com.sun.lwuit.plaf.Border: int colorC>;

        $i1 = r0.<com.sun.lwuit.plaf.Border: int colorD>;

        $r2 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createBevelRaised(int,int,int,int)>($i4, $i3, $i2, $i1);

        $z0 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r2.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z0;

        return $r2;

     label7:
        $i18 = r0.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i17 = r0.<com.sun.lwuit.plaf.Border: int arcHeight>;

        $i16 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $r7 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createRoundBorder(int,int,int)>($i18, $i17, $i16);

        $z5 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r7.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z5;

        $r7.<com.sun.lwuit.plaf.Border: int type> = 3;

        return $r7;

     label8:
        $i15 = r0.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i14 = r0.<com.sun.lwuit.plaf.Border: int arcHeight>;

        $i13 = r0.<com.sun.lwuit.plaf.Border: int colorA>;

        $r6 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createRoundBorder(int,int,int)>($i15, $i14, $i13);

        $z4 = r0.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        $r6.<com.sun.lwuit.plaf.Border: boolean themeColors> = $z4;

        return $r6;

     label9:
        return r0;
    }

    public void paintBorderBackground(com.sun.lwuit.Graphics, com.sun.lwuit.Component)
    {
        com.sun.lwuit.plaf.Style $r17;
        byte $b44, $b47, $b48, $b53, $b69, $b78, $b86;
        com.sun.lwuit.RGBImage $r45;
        short $s54, $s70, $s104, $s106;
        int[] $r36, r37, r38;
        com.sun.lwuit.Painter $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i49, $i50, $i51, $i52, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i71, $i72, $i73, $i74, $i75, $i76, $i77, i79, i80, i81, i82, $i83, $i84, $i85, i87, $i88, i89, i90, i91, i92, i93, i94, i95, $i97, $i99, $i100, $i101, $i103, $i105, $i107;
        java.lang.ref.WeakReference $r32, $r44;
        com.sun.lwuit.Image $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r23, $r27, $r29, $r30, r33, $r34, r39, r40, r41, r42;
        java.lang.Object $r31;
        com.sun.lwuit.Graphics r0, $r20, $r22, $r25, $r35;
        com.sun.lwuit.Image[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        com.sun.lwuit.Component r1;
        boolean $z0;
        com.sun.lwuit.geom.Rectangle $r43;
        com.sun.lwuit.plaf.Border r2;

        r2 := @this: com.sun.lwuit.plaf.Border;

        r0 := @parameter0: com.sun.lwuit.Graphics;

        r1 := @parameter1: com.sun.lwuit.Component;

        $i0 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        $i1 = virtualinvoke r1.<com.sun.lwuit.Component: int getX()>();

        i79 = $i1;

        $i2 = virtualinvoke r1.<com.sun.lwuit.Component: int getY()>();

        i80 = $i2;

        $i3 = virtualinvoke r1.<com.sun.lwuit.Component: int getWidth()>();

        i81 = $i3;

        $i4 = virtualinvoke r1.<com.sun.lwuit.Component: int getHeight()>();

        i82 = $i4;

        $i5 = r2.<com.sun.lwuit.plaf.Border: int type>;

        lookupswitch($i5)
        {
            case 2: goto label02;
            case 3: goto label01;
            case 8: goto label24;
            default: goto label29;
        };

     label01:
        i79 = $i1 + 1;

        i80 = $i2 + 1;

        $i97 = (int) -2;

        i81 = $i3 + $i97;

        $i99 = (int) -2;

        i82 = $i4 + $i99;

     label02:
        $r17 = virtualinvoke r1.<com.sun.lwuit.Component: com.sun.lwuit.plaf.Style getStyle()>();

        $r18 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: com.sun.lwuit.Image getBgImage()>();

        if $r18 == null goto label03;

        $b78 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBackgroundType()>();

        if $b78 == 1 goto label04;

     label03:
        $b44 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBackgroundType()>();

        $i100 = (int) $b44;

        if $i100 <= 1 goto label14;

     label04:
        $r32 = $r17.<com.sun.lwuit.plaf.Style: java.lang.ref.WeakReference roundRectCache>;

        r33 = null;

        if $r32 == null goto label05;

        $r31 = virtualinvoke $r32.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r33 = (com.sun.lwuit.Image) $r31;

     label05:
        if r33 == null goto label06;

        $i76 = virtualinvoke r33.<com.sun.lwuit.Image: int getWidth()>();

        if $i76 != i81 goto label06;

        $i77 = virtualinvoke r33.<com.sun.lwuit.Image: int getHeight()>();

        if $i77 != i82 goto label06;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r33, i79, i80);

        goto label13;

     label06:
        $r34 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(int,int)>(i81, i82);

        $r35 = virtualinvoke $r34.<com.sun.lwuit.Image: com.sun.lwuit.Graphics getGraphics()>();

        virtualinvoke $r35.<com.sun.lwuit.Graphics: void setColor(int)>(0);

        $i83 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i84 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke $r35.<com.sun.lwuit.Graphics: void fillRoundRect(int,int,int,int,int,int)>(0, 0, i81, i82, $i83, $i84);

        $r36 = virtualinvoke $r34.<com.sun.lwuit.Image: int[] getRGBCached()>();

        $i85 = $r36[0];

        $b86 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBackgroundType()>();

        if $b86 != 1 goto label07;

        $r29 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: com.sun.lwuit.Image getBgImage()>();

        $r30 = virtualinvoke $r29.<com.sun.lwuit.Image: com.sun.lwuit.Image scaled(int,int)>(i81, i82);

        r37 = virtualinvoke $r30.<com.sun.lwuit.Image: int[] getRGBCached()>();

        goto label09;

     label07:
        $r23 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(int,int)>(i81, i82);

        $r24 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: com.sun.lwuit.Painter getBgPainter()>();

        if $r24 != null goto label08;

        return;

     label08:
        $r25 = virtualinvoke $r23.<com.sun.lwuit.Image: com.sun.lwuit.Graphics getGraphics()>();

        $r43 = new com.sun.lwuit.geom.Rectangle;

        specialinvoke $r43.<com.sun.lwuit.geom.Rectangle: void <init>(int,int,int,int)>(0, 0, i81, i82);

        interfaceinvoke $r24.<com.sun.lwuit.Painter: void paint(com.sun.lwuit.Graphics,com.sun.lwuit.geom.Rectangle)>($r25, $r43);

        r37 = virtualinvoke $r23.<com.sun.lwuit.Image: int[] getRGB()>();

     label09:
        i87 = 0;

     label10:
        $i88 = lengthof $r36;

        if i87 >= $i88 goto label12;

        $i75 = $r36[i87];

        if $i75 != $i85 goto label11;

        r37[i87] = 0;

     label11:
        i87 = i87 + 1;

        goto label10;

     label12:
        $r27 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(int[],int,int)>(r37, i81, i82);

        $r44 = new java.lang.ref.WeakReference;

        specialinvoke $r44.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r27);

        $r17.<com.sun.lwuit.plaf.Style: java.lang.ref.WeakReference roundRectCache> = $r44;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>($r27, i79, i80);

     label13:
        goto label29;

     label14:
        $i45 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        $i46 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: int getBgColor()>();

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i46);

        $b47 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBgTransparency()>();

        $i101 = (int) $b47;

        $i103 = (int) -1;

        if $i101 != $i103 goto label15;

        $i74 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i73 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void fillRoundRect(int,int,int,int,int,int)>(i79, i80, i81, i82, $i74, $i73);

        goto label23;

     label15:
        $z0 = virtualinvoke r0.<com.sun.lwuit.Graphics: boolean isAlphaSupported()>();

        if $z0 == 0 goto label16;

        $i68 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getAlpha()>();

        $b69 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBgTransparency()>();

        $s104 = (short) $b69;

        $s70 = $s104 & 255;

        $i105 = (int) $s70;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setAlpha(int)>($i105);

        $i72 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i71 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void fillRoundRect(int,int,int,int,int,int)>(i79, i80, i81, i82, $i72, $i71);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setAlpha(int)>($i68);

        goto label23;

     label16:
        $b48 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBgTransparency()>();

        if $b48 == 0 goto label23;

        $r19 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(int,int)>(i81, i82);

        $i49 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        if $i49 == 16777215 goto label17;

        $r22 = virtualinvoke $r19.<com.sun.lwuit.Image: com.sun.lwuit.Graphics getGraphics()>();

        $i62 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        virtualinvoke $r22.<com.sun.lwuit.Graphics: void setColor(int)>($i62);

        $i64 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i63 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke $r22.<com.sun.lwuit.Graphics: void fillRoundRect(int,int,int,int,int,int)>(0, 0, i81, i82, $i64, $i63);

        r38 = virtualinvoke $r19.<com.sun.lwuit.Image: int[] getRGBCached()>();

        goto label18;

     label17:
        $r20 = virtualinvoke $r19.<com.sun.lwuit.Image: com.sun.lwuit.Graphics getGraphics()>();

        virtualinvoke $r20.<com.sun.lwuit.Graphics: void setColor(int)>(0);

        virtualinvoke $r20.<com.sun.lwuit.Graphics: void fillRect(int,int,int,int)>(0, 0, i81, i82);

        $i50 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        virtualinvoke $r20.<com.sun.lwuit.Graphics: void setColor(int)>($i50);

        $i52 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i51 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke $r20.<com.sun.lwuit.Graphics: void fillRoundRect(int,int,int,int,int,int)>(0, 0, i81, i82, $i52, $i51);

        r38 = virtualinvoke $r19.<com.sun.lwuit.Image: int[] getRGBCached()>();

     label18:
        $i65 = r38[0];

        $i66 = i81 * i82;

        $b53 = virtualinvoke $r17.<com.sun.lwuit.plaf.Style: byte getBgTransparency()>();

        $s106 = (short) $b53;

        $s54 = $s106 & 255;

        $i107 = (int) $s54;

        $i55 = $i107 << 24;

        $i67 = $i55 & -16777216;

        i89 = 0;

     label19:
        if i89 >= $i66 goto label22;

        $i56 = r38[i89];

        if $i65 != $i56 goto label20;

        r38[i89] = 0;

        goto label21;

     label20:
        $i57 = r38[i89];

        $i58 = $i57 & -16777216;

        if $i58 == 0 goto label21;

        $i59 = r38[i89];

        $i60 = $i59 & 16777215;

        $i61 = $i60 | $i67;

        r38[i89] = $i61;

     label21:
        i89 = i89 + 1;

        goto label19;

     label22:
        $r45 = new com.sun.lwuit.RGBImage;

        specialinvoke $r45.<com.sun.lwuit.RGBImage: void <init>(int[],int,int)>(r38, i81, i82);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>($r45, i79, i80);

     label23:
        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i45);

        goto label29;

     label24:
        $i6 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getClipX()>();

        $i7 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getClipY()>();

        $i8 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getClipWidth()>();

        $i9 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getClipHeight()>();

        $r3 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        r39 = $r3[4];

        $r4 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        r40 = $r4[5];

        $r5 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        r41 = $r5[6];

        $r6 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        r42 = $r6[8];

        $i10 = virtualinvoke r39.<com.sun.lwuit.Image: int getWidth()>();

        i90 = $i1 + $i10;

        $i11 = virtualinvoke r39.<com.sun.lwuit.Image: int getHeight()>();

        i91 = $i2 + $i11;

        $i12 = virtualinvoke r39.<com.sun.lwuit.Image: int getHeight()>();

        $i13 = virtualinvoke r41.<com.sun.lwuit.Image: int getHeight()>();

        $i14 = $i12 + $i13;

        i92 = $i4 - $i14;

        $i15 = virtualinvoke r39.<com.sun.lwuit.Image: int getWidth()>();

        $i16 = virtualinvoke r40.<com.sun.lwuit.Image: int getWidth()>();

        $i17 = $i15 + $i16;

        i93 = $i3 - $i17;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void clipRect(int,int,int,int)>(i90, i91, i93, i92);

        if r42 == null goto label28;

        $i40 = virtualinvoke r42.<com.sun.lwuit.Image: int getWidth()>();

        $i41 = virtualinvoke r42.<com.sun.lwuit.Image: int getHeight()>();

        i94 = i90;

     label25:
        $i42 = i90 + i93;

        if i94 >= $i42 goto label28;

        i95 = i91;

     label26:
        $i43 = i91 + i92;

        if i95 >= $i43 goto label27;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r42, i94, i95);

        i95 = i95 + $i41;

        goto label26;

     label27:
        i94 = i94 + $i40;

        goto label25;

     label28:
        $r7 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        $r12 = $r7[0];

        $r8 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        $r13 = $r8[1];

        $r9 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        $r14 = $r9[2];

        $r10 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        $r15 = $r10[3];

        $r11 = r2.<com.sun.lwuit.plaf.Border: com.sun.lwuit.Image[] images>;

        $r16 = $r11[7];

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

        $i18 = virtualinvoke r1.<com.sun.lwuit.Component: int getX()>();

        $i19 = virtualinvoke r1.<com.sun.lwuit.Component: int getY()>();

        $i20 = virtualinvoke r1.<com.sun.lwuit.Component: int getWidth()>();

        $i21 = virtualinvoke r1.<com.sun.lwuit.Component: int getHeight()>();

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r39, $i18, $i19);

        $i22 = $i19 + $i21;

        $i23 = virtualinvoke r41.<com.sun.lwuit.Image: int getHeight()>();

        $i24 = $i22 - $i23;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r41, $i18, $i24);

        $i25 = $i18 + $i20;

        $i26 = virtualinvoke r40.<com.sun.lwuit.Image: int getWidth()>();

        $i27 = $i25 - $i26;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r40, $i27, $i19);

        $i28 = $i18 + $i20;

        $i29 = virtualinvoke $r16.<com.sun.lwuit.Image: int getWidth()>();

        $i30 = $i28 - $i29;

        $i31 = $i19 + $i21;

        $i32 = virtualinvoke $r16.<com.sun.lwuit.Image: int getHeight()>();

        $i33 = $i31 - $i32;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>($r16, $i30, $i33);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

        specialinvoke r2.<com.sun.lwuit.plaf.Border: void drawImageBorderLine(com.sun.lwuit.Graphics,com.sun.lwuit.Image,com.sun.lwuit.Image,com.sun.lwuit.Image,int,int,int)>(r0, r39, r40, $r12, $i18, $i19, $i20);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

        $i34 = $i19 + $i21;

        $i35 = virtualinvoke $r13.<com.sun.lwuit.Image: int getHeight()>();

        $i36 = $i34 - $i35;

        specialinvoke r2.<com.sun.lwuit.plaf.Border: void drawImageBorderLine(com.sun.lwuit.Graphics,com.sun.lwuit.Image,com.sun.lwuit.Image,com.sun.lwuit.Image,int,int,int)>(r0, r41, $r16, $r13, $i18, $i36, $i20);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

        specialinvoke r2.<com.sun.lwuit.plaf.Border: void drawImageBorderColumn(com.sun.lwuit.Graphics,com.sun.lwuit.Image,com.sun.lwuit.Image,com.sun.lwuit.Image,int,int,int)>(r0, r39, r41, $r14, $i18, $i19, $i21);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

        $i37 = $i18 + $i20;

        $i38 = virtualinvoke $r15.<com.sun.lwuit.Image: int getWidth()>();

        $i39 = $i37 - $i38;

        specialinvoke r2.<com.sun.lwuit.plaf.Border: void drawImageBorderColumn(com.sun.lwuit.Graphics,com.sun.lwuit.Image,com.sun.lwuit.Image,com.sun.lwuit.Image,int,int,int)>(r0, r40, $r16, $r15, $i39, $i19, $i21);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setClip(int,int,int,int)>($i6, $i7, $i8, $i9);

     label29:
        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i0);

        return;
    }

    public void paint(com.sun.lwuit.Graphics, com.sun.lwuit.Component)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, i110, i111, i112, i113, i114, i115, i116, i117, i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i142, $i144, $i146, $i148, $i150, $i152, $i154, $i156;
        com.sun.lwuit.Graphics r0;
        com.sun.lwuit.Component r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.sun.lwuit.plaf.Border r2;

        r2 := @this: com.sun.lwuit.plaf.Border;

        r0 := @parameter0: com.sun.lwuit.Graphics;

        r1 := @parameter1: com.sun.lwuit.Component;

        $i0 = virtualinvoke r0.<com.sun.lwuit.Graphics: int getColor()>();

        $i1 = virtualinvoke r1.<com.sun.lwuit.Component: int getX()>();

        i110 = $i1;

        $i2 = virtualinvoke r1.<com.sun.lwuit.Component: int getY()>();

        i111 = $i2;

        $i3 = virtualinvoke r1.<com.sun.lwuit.Component: int getWidth()>();

        i112 = $i3;

        $i4 = virtualinvoke r1.<com.sun.lwuit.Component: int getHeight()>();

        i113 = $i4;

        $z0 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z0 != 0 goto label01;

        $i109 = r2.<com.sun.lwuit.plaf.Border: int colorA>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i109);

     label01:
        $i5 = r2.<com.sun.lwuit.plaf.Border: int type>;

        tableswitch($i5)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label07;
            case 6: goto label11;
            case 7: goto label20;
            case 8: goto label29;
            default: goto label29;
        };

     label02:
        $i142 = (int) -1;

        i114 = $i3 + $i142;

        $i144 = (int) -1;

        i115 = $i4 + $i144;

        i116 = 0;

     label03:
        $i106 = r2.<com.sun.lwuit.plaf.Border: int thickness>;

        if i116 >= $i106 goto label04;

        $i108 = $i1 + i116;

        $i107 = $i2 + i116;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawRect(int,int,int,int)>($i108, $i107, i114, i115);

        $i146 = (int) -2;

        i114 = i114 + $i146;

        $i148 = (int) -2;

        i115 = i115 + $i148;

        i116 = i116 + 1;

        goto label03;

     label04:
        goto label29;

     label05:
        i110 = $i1 + 1;

        i111 = $i2 + 1;

        $i150 = (int) -2;

        i112 = $i3 + $i150;

        $i152 = (int) -2;

        i113 = $i4 + $i152;

     label06:
        $i154 = (int) -1;

        i117 = i112 + $i154;

        $i156 = (int) -1;

        i118 = i113 + $i156;

        $z10 = r2.<com.sun.lwuit.plaf.Border: boolean outline>;

        if $z10 == 0 goto label29;

        $i105 = r2.<com.sun.lwuit.plaf.Border: int arcWidth>;

        $i104 = r2.<com.sun.lwuit.plaf.Border: int arcHeight>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawRoundRect(int,int,int,int,int,int)>(i110, i111, i117, i118, $i105, $i104);

        goto label29;

     label07:
        $i101 = $i3 - 2;

        $i100 = $i4 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawRect(int,int,int,int)>($i1, $i2, $i101, $i100);

        $z9 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z9 == 0 goto label09;

        $i103 = r2.<com.sun.lwuit.plaf.Border: int type>;

        if $i103 != 4 goto label08;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void lighterColor(int)>(40);

        goto label10;

     label08:
        virtualinvoke r0.<com.sun.lwuit.Graphics: void darkerColor(int)>(40);

        goto label10;

     label09:
        $i102 = r2.<com.sun.lwuit.plaf.Border: int colorB>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i102);

     label10:
        $i119 = $i1 + 1;

        $i120 = $i2 + $i4;

        $i121 = $i120 - 3;

        $i122 = $i1 + 1;

        $i123 = $i2 + 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i119, $i121, $i122, $i123);

        $i124 = $i1 + 1;

        $i125 = $i2 + 1;

        $i126 = $i1 + $i3;

        $i127 = $i126 - 3;

        $i128 = $i2 + 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i124, $i125, $i127, $i128);

        $i129 = $i2 + $i4;

        $i130 = $i129 - 1;

        $i131 = $i1 + $i3;

        $i132 = $i131 - 1;

        $i133 = $i2 + $i4;

        $i134 = $i133 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i1, $i130, $i132, $i134);

        $i135 = $i1 + $i3;

        $i136 = $i135 - 1;

        $i137 = $i2 + $i4;

        $i138 = $i137 - 1;

        $i139 = $i1 + $i3;

        $i140 = $i139 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i136, $i138, $i140, $i2);

        goto label29;

     label11:
        $z5 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z5 == 0 goto label12;

        $i99 = specialinvoke r2.<com.sun.lwuit.plaf.Border: int getBackgroundColor(com.sun.lwuit.Component)>(r1);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i99);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void lighterColor(int)>(50);

        goto label13;

     label12:
        $i54 = r2.<com.sun.lwuit.plaf.Border: int colorA>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i54);

     label13:
        $i55 = $i2 + $i4;

        $i56 = $i55 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i1, $i2, $i1, $i56);

        $i59 = $i1 + 1;

        $i57 = $i1 + $i3;

        $i58 = $i57 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i59, $i2, $i58, $i2);

        $z6 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z6 == 0 goto label14;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void darkerColor(int)>(25);

        goto label15;

     label14:
        $i60 = r2.<com.sun.lwuit.plaf.Border: int colorB>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i60);

     label15:
        $i65 = $i1 + 1;

        $i64 = $i2 + 1;

        $i63 = $i1 + 1;

        $i61 = $i2 + $i4;

        $i62 = $i61 - 3;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i65, $i64, $i63, $i62);

        $i70 = $i1 + 2;

        $i69 = $i2 + 1;

        $i66 = $i1 + $i3;

        $i68 = $i66 - 3;

        $i67 = $i2 + 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i70, $i69, $i68, $i67);

        $z7 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z7 == 0 goto label16;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void darkerColor(int)>(50);

        goto label17;

     label16:
        $i71 = r2.<com.sun.lwuit.plaf.Border: int colorC>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i71);

     label17:
        $i72 = $i2 + $i4;

        $i77 = $i72 - 1;

        $i73 = $i1 + $i3;

        $i76 = $i73 - 1;

        $i74 = $i2 + $i4;

        $i75 = $i74 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i1, $i77, $i76, $i75);

        $i78 = $i1 + $i3;

        $i83 = $i78 - 1;

        $i79 = $i1 + $i3;

        $i82 = $i79 - 1;

        $i80 = $i2 + $i4;

        $i81 = $i80 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i83, $i2, $i82, $i81);

        $z8 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z8 == 0 goto label18;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void darkerColor(int)>(25);

        goto label19;

     label18:
        $i84 = r2.<com.sun.lwuit.plaf.Border: int colorD>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i84);

     label19:
        $i91 = $i1 + 1;

        $i85 = $i2 + $i4;

        $i90 = $i85 - 2;

        $i86 = $i1 + $i3;

        $i89 = $i86 - 2;

        $i87 = $i2 + $i4;

        $i88 = $i87 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i91, $i90, $i89, $i88);

        $i92 = $i1 + $i3;

        $i98 = $i92 - 2;

        $i97 = $i2 + 1;

        $i93 = $i1 + $i3;

        $i96 = $i93 - 2;

        $i94 = $i2 + $i4;

        $i95 = $i94 - 3;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i98, $i97, $i96, $i95);

        goto label29;

     label20:
        $z1 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z1 == 0 goto label21;

        $i53 = specialinvoke r2.<com.sun.lwuit.plaf.Border: int getBackgroundColor(com.sun.lwuit.Component)>(r1);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i53);

        virtualinvoke r0.<com.sun.lwuit.Graphics: void darkerColor(int)>(50);

        goto label22;

     label21:
        $i6 = r2.<com.sun.lwuit.plaf.Border: int colorD>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i6);

     label22:
        $i7 = $i2 + $i4;

        $i8 = $i7 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i1, $i2, $i1, $i8);

        $i11 = $i1 + 1;

        $i9 = $i1 + $i3;

        $i10 = $i9 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i11, $i2, $i10, $i2);

        $z2 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z2 == 0 goto label23;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void lighterColor(int)>(25);

        goto label24;

     label23:
        $i12 = r2.<com.sun.lwuit.plaf.Border: int colorC>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i12);

     label24:
        $i17 = $i1 + 1;

        $i16 = $i2 + 1;

        $i15 = $i1 + 1;

        $i13 = $i2 + $i4;

        $i14 = $i13 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i17, $i16, $i15, $i14);

        $i22 = $i1 + 2;

        $i21 = $i2 + 1;

        $i18 = $i1 + $i3;

        $i20 = $i18 - 2;

        $i19 = $i2 + 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i22, $i21, $i20, $i19);

        $z3 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z3 == 0 goto label25;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void lighterColor(int)>(50);

        goto label26;

     label25:
        $i23 = r2.<com.sun.lwuit.plaf.Border: int colorC>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i23);

     label26:
        $i30 = $i1 + 1;

        $i24 = $i2 + $i4;

        $i29 = $i24 - 1;

        $i25 = $i1 + $i3;

        $i28 = $i25 - 1;

        $i26 = $i2 + $i4;

        $i27 = $i26 - 1;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i30, $i29, $i28, $i27);

        $i31 = $i1 + $i3;

        $i37 = $i31 - 1;

        $i36 = $i2 + 1;

        $i32 = $i1 + $i3;

        $i35 = $i32 - 1;

        $i33 = $i2 + $i4;

        $i34 = $i33 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i37, $i36, $i35, $i34);

        $z4 = r2.<com.sun.lwuit.plaf.Border: boolean themeColors>;

        if $z4 == 0 goto label27;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void lighterColor(int)>(25);

        goto label28;

     label27:
        $i38 = r2.<com.sun.lwuit.plaf.Border: int colorA>;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i38);

     label28:
        $i45 = $i1 + 2;

        $i39 = $i2 + $i4;

        $i44 = $i39 - 2;

        $i40 = $i1 + $i3;

        $i43 = $i40 - 2;

        $i41 = $i2 + $i4;

        $i42 = $i41 - 2;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i45, $i44, $i43, $i42);

        $i46 = $i1 + $i3;

        $i52 = $i46 - 2;

        $i51 = $i2 + 2;

        $i47 = $i1 + $i3;

        $i50 = $i47 - 2;

        $i48 = $i2 + $i4;

        $i49 = $i48 - 3;

        virtualinvoke r0.<com.sun.lwuit.Graphics: void drawLine(int,int,int,int)>($i52, $i51, $i50, $i49);

        goto label29;

     label29:
        virtualinvoke r0.<com.sun.lwuit.Graphics: void setColor(int)>($i0);

        return;
    }

    private int getBackgroundColor(com.sun.lwuit.Component)
    {
        com.sun.lwuit.Component r0;
        com.sun.lwuit.plaf.Style $r1;
        int $i0;
        com.sun.lwuit.plaf.Border r2;

        r2 := @this: com.sun.lwuit.plaf.Border;

        r0 := @parameter0: com.sun.lwuit.Component;

        $r1 = virtualinvoke r0.<com.sun.lwuit.Component: com.sun.lwuit.plaf.Style getStyle()>();

        $i0 = virtualinvoke $r1.<com.sun.lwuit.plaf.Style: int getBgColor()>();

        return $i0;
    }

    private void drawImageBorderLine(com.sun.lwuit.Graphics, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, int, int, int)
    {
        com.sun.lwuit.Graphics r2;
        int i0, $i1, i2, $i3, i4, i5, $i6, $i7, $i8, $i9, i10, i11;
        com.sun.lwuit.Image r0, r1, r3;
        com.sun.lwuit.plaf.Border r4;

        r4 := @this: com.sun.lwuit.plaf.Border;

        r2 := @parameter0: com.sun.lwuit.Graphics;

        r1 := @parameter1: com.sun.lwuit.Image;

        r0 := @parameter2: com.sun.lwuit.Image;

        r3 := @parameter3: com.sun.lwuit.Image;

        i10 := @parameter4: int;

        i5 := @parameter5: int;

        i0 := @parameter6: int;

        $i1 = virtualinvoke r0.<com.sun.lwuit.Image: int getWidth()>();

        i2 = i0 - $i1;

        if i2 <= 0 goto label2;

        $i3 = virtualinvoke r1.<com.sun.lwuit.Image: int getWidth()>();

        i11 = i10 + $i3;

        i4 = i11 + i2;

        $i6 = virtualinvoke r1.<com.sun.lwuit.Image: int getWidth()>();

        $i7 = i2 - $i6;

        $i8 = virtualinvoke r3.<com.sun.lwuit.Image: int getHeight()>();

        virtualinvoke r2.<com.sun.lwuit.Graphics: void clipRect(int,int,int,int)>(i11, i5, $i7, $i8);

        $i9 = virtualinvoke r3.<com.sun.lwuit.Image: int getWidth()>();

     label1:
        if i11 >= i4 goto label2;

        virtualinvoke r2.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r3, i11, i5);

        i11 = i11 + $i9;

        goto label1;

     label2:
        return;
    }

    private void drawImageBorderColumn(com.sun.lwuit.Graphics, com.sun.lwuit.Image, com.sun.lwuit.Image, com.sun.lwuit.Image, int, int, int)
    {
        com.sun.lwuit.Graphics r2;
        int i0, $i1, i2, $i3, i4, i5, $i6, $i7, $i8, $i9, i10, i11;
        com.sun.lwuit.Image r0, r1, r3;
        com.sun.lwuit.plaf.Border r4;

        r4 := @this: com.sun.lwuit.plaf.Border;

        r2 := @parameter0: com.sun.lwuit.Graphics;

        r1 := @parameter1: com.sun.lwuit.Image;

        r0 := @parameter2: com.sun.lwuit.Image;

        r3 := @parameter3: com.sun.lwuit.Image;

        i5 := @parameter4: int;

        i10 := @parameter5: int;

        i0 := @parameter6: int;

        $i1 = virtualinvoke r0.<com.sun.lwuit.Image: int getHeight()>();

        i2 = i0 - $i1;

        if i2 <= 0 goto label2;

        $i3 = virtualinvoke r1.<com.sun.lwuit.Image: int getHeight()>();

        i11 = i10 + $i3;

        i4 = i11 + i2;

        $i6 = virtualinvoke r3.<com.sun.lwuit.Image: int getWidth()>();

        $i7 = virtualinvoke r1.<com.sun.lwuit.Image: int getHeight()>();

        $i8 = i2 - $i7;

        virtualinvoke r2.<com.sun.lwuit.Graphics: void clipRect(int,int,int,int)>(i5, i11, $i6, $i8);

        $i9 = virtualinvoke r3.<com.sun.lwuit.Image: int getHeight()>();

     label1:
        if i11 >= i4 goto label2;

        virtualinvoke r2.<com.sun.lwuit.Graphics: void drawImage(com.sun.lwuit.Image,int,int)>(r3, i5, i11);

        i11 = i11 + $i9;

        goto label1;

     label2:
        return;
    }

    public static void setDefaultBorder(com.sun.lwuit.plaf.Border)
    {
        com.sun.lwuit.plaf.Border r0;

        r0 := @parameter0: com.sun.lwuit.plaf.Border;

        <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border defaultBorder> = r0;

        return;
    }

    public static com.sun.lwuit.plaf.Border getDefaultBorder()
    {
        com.sun.lwuit.plaf.Border $r0;

        $r0 = <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border defaultBorder>;

        return $r0;
    }

    public int getThickness()
    {
        int $i0;
        com.sun.lwuit.plaf.Border r0;

        r0 := @this: com.sun.lwuit.plaf.Border;

        $i0 = r0.<com.sun.lwuit.plaf.Border: int thickness>;

        return $i0;
    }

    static void <clinit>()
    {
        com.sun.lwuit.plaf.Border $r0;

        <com.sun.lwuit.plaf.Border: int TYPE_IMAGE> = 8;

        <com.sun.lwuit.plaf.Border: int TYPE_BEVEL_LOWERED> = 7;

        <com.sun.lwuit.plaf.Border: int TYPE_BEVEL_RAISED> = 6;

        <com.sun.lwuit.plaf.Border: int TYPE_ETCHED_RAISED> = 5;

        <com.sun.lwuit.plaf.Border: int TYPE_ETCHED_LOWERED> = 4;

        <com.sun.lwuit.plaf.Border: int TYPE_ROUNDED_PRESSED> = 3;

        <com.sun.lwuit.plaf.Border: int TYPE_ROUNDED> = 2;

        <com.sun.lwuit.plaf.Border: int TYPE_LINE> = 1;

        <com.sun.lwuit.plaf.Border: int TYPE_EMPTY> = 0;

        $r0 = staticinvoke <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border createEtchedRaised(int,int)>(131586, 12303291);

        <com.sun.lwuit.plaf.Border: com.sun.lwuit.plaf.Border defaultBorder> = $r0;

        return;
    }
}
