public class com.hp.hpl.jena.tdb.sys.DatasetControlMRSW extends java.lang.Object implements com.hp.hpl.jena.tdb.sys.DatasetControl
{
    private final boolean concurrencyChecking;
    private final java.util.concurrent.atomic.AtomicLong epoch;
    private final java.util.concurrent.atomic.AtomicLong readCounter;
    private final java.util.concurrent.atomic.AtomicLong writeCounter;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: boolean concurrencyChecking> = 1;

        r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: boolean concurrencyChecking> = 1;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(5L);

        r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong epoch> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong readCounter> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong writeCounter> = $r3;

        return;
    }

    public void startRead()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        $r1 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void checkConcurrency()>();

        return;
    }

    public void finishRead()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        $r1 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return;
    }

    public void startUpdate()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        $r1 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong epoch>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void checkConcurrency()>();

        return;
    }

    public void finishUpdate()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        $r1 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return;
    }

    private void checkConcurrency()
    {
        java.lang.Throwable $r3;
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r1, $r2;
        byte $b2, $b3, $b4;
        int $i5, $i6, $i7;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r0;

        r0 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        entermonitor r0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong readCounter>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r2 = r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong writeCounter>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r3;

     label5:
        $b2 = $l0 cmp 0L;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label6;

        $b3 = $l1 cmp 0L;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label6;

        staticinvoke <com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void policyError(long,long)>($l0, $l1);

     label6:
        $b4 = $l1 cmp 1L;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label7;

        staticinvoke <com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void policyError(long,long)>($l0, $l1);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Iterator iteratorControl(java.util.Iterator)
    {
        java.util.concurrent.atomic.AtomicLong $r3;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW$IteratorCheckNotConcurrent $r0;
        java.util.Iterator r1;
        com.hp.hpl.jena.tdb.sys.DatasetControlMRSW r2;

        r2 := @this: com.hp.hpl.jena.tdb.sys.DatasetControlMRSW;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new com.hp.hpl.jena.tdb.sys.DatasetControlMRSW$IteratorCheckNotConcurrent;

        $r3 = r2.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: java.util.concurrent.atomic.AtomicLong epoch>;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.sys.DatasetControlMRSW$IteratorCheckNotConcurrent: void <init>(java.util.Iterator,java.util.concurrent.atomic.AtomicLong)>(r1, $r3);

        return $r0;
    }

    private static void policyError(long, long)
    {
        java.lang.Object[] $r0;
        java.lang.Long $r1, $r2;
        long l0, l1;
        java.lang.String $r3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Reader = %d, Writer = %d", $r0);

        staticinvoke <com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void policyError(java.lang.String)>($r3);

        return;
    }

    private static void policyError(java.lang.String)
    {
        java.lang.String r1;
        java.util.ConcurrentModificationException $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ConcurrentModificationException;

        specialinvoke $r0.<java.util.ConcurrentModificationException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.tdb.sys.DatasetControlMRSW: void policyError(java.lang.String)>(r0);

        return;
    }
}
