public class com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier extends java.lang.Object
{
    public static boolean print;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isLinear(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean isLinear(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r1, $r2);

        return $z0;
    }

    public static boolean isLinear(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r0, $r1, r49, r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z9, $z10, $z11;
        java.util.Set $r2, $r4, $r5, $r6, $r7;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r24, $r26, $r27, $r29, $r31, $r32, $r34, $r36, $r37, $r39, $r41, $r42, $r44, $r46, $r47;
        java.util.HashSet $r8;
        int $i0;
        java.lang.String $r13, $r18, $r23, $r28, $r33, $r38, $r43, $r48;
        java.io.PrintStream $r10, $r15, $r20, $r25, $r30, $r35, $r40, $r45;

        r49 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r50 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: com.hp.hpl.jena.sparql.algebra.Op effectiveOp(com.hp.hpl.jena.sparql.algebra.Op)>(r49);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: com.hp.hpl.jena.sparql.algebra.Op effectiveOp(com.hp.hpl.jena.sparql.algebra.Op)>(r50);

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpModifier;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>($r0);

        $r3 = new com.hp.hpl.jena.sparql.engine.main.VarFinder;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>($r1);

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder: java.util.Set getOpt()>();

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder: java.util.Set getFixed()>();

        $r6 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder: java.util.Set getFilter()>();

        $r7 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder: java.util.Set getAssign()>();

        $z1 = <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean print>;

        if $z1 == 0 goto label2;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Left/visible: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r30 = <java.lang.System: java.io.PrintStream err>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Right/fixed:  ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r35 = <java.lang.System: java.io.PrintStream err>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Right/opt:    ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r38);

        $r40 = <java.lang.System: java.io.PrintStream err>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Right/filter: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r43);

        $r45 = <java.lang.System: java.io.PrintStream err>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Right/assign: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r45.<java.io.PrintStream: void println(java.lang.String)>($r48);

     label2:
        $z2 = staticinvoke <org.apache.jena.atlas.lib.SetUtils: boolean intersectionP(java.util.Set,java.util.Set)>($r2, $r4);

        $z3 = <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean print>;

        if $z3 == 0 goto label3;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Case 1 - ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label3:
        $z4 = staticinvoke <org.apache.jena.atlas.lib.SetUtils: boolean intersectionP(java.util.Set,java.util.Set)>($r2, $r6);

        $z5 = <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean print>;

        if $z5 == 0 goto label4;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Case 2 - ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label4:
        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>(java.util.Collection)>($r7);

        interfaceinvoke $r8.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        if $i0 <= 0 goto label5;

        $z11 = 1;

        $z10 = 1;

        goto label6;

     label5:
        $z11 = 0;

        $z10 = 0;

     label6:
        z6 = $z11;

        $z7 = <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean print>;

        if $z7 == 0 goto label7;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Case 3 - ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label7:
        if $z2 != 0 goto label8;

        if $z4 != 0 goto label8;

        if z6 != 0 goto label8;

        $z9 = 1;

        goto label9;

     label8:
        $z9 = 0;

     label9:
        return $z9;
    }

    public static java.util.Set nonLinearVars(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)
    {
        java.util.Set $r5, $r6, $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2, $r3, $r4;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: com.hp.hpl.jena.sparql.algebra.Op effectiveOp(com.hp.hpl.jena.sparql.algebra.Op)>($r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: com.hp.hpl.jena.sparql.algebra.Op effectiveOp(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder: java.util.Set optDefined(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r7 = staticinvoke <org.apache.jena.atlas.lib.SetUtils: java.util.Set intersection(java.util.Set,java.util.Set)>($r5, $r6);

        return $r7;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op effectiveOp(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpExt;

        if $z0 == 0 goto label1;

        $r0 = (com.hp.hpl.jena.sparql.algebra.op.OpExt) r1;

        r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpExt: com.hp.hpl.jena.sparql.algebra.Op effectiveOp()>();

     label1:
        return r1;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean print> = 0;

        return;
    }
}
