public class org.apache.batik.bridge.SVGSVGElementBridge extends org.apache.batik.bridge.SVGGElementBridge implements org.apache.batik.dom.svg.SVGSVGContext
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.SVGGElementBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        return "svg";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.SVGSVGElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r0 = new org.apache.batik.bridge.SVGSVGElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGSVGElementBridge: void <init>()>();

        return $r0;
    }

    protected org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r1;
        org.apache.batik.gvt.CanvasGraphicsNode $r0;

        r1 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r0 = new org.apache.batik.gvt.CanvasGraphicsNode;

        specialinvoke $r0.<org.apache.batik.gvt.CanvasGraphicsNode: void <init>()>();

        return $r0;
    }

    public org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.w3c.dom.svg.SVGAnimatedRect $r11;
        java.awt.geom.Rectangle2D $r17;
        java.awt.geom.Rectangle2D$Float $r26, $r27, r41;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit $r24;
        org.w3c.dom.Document $r6, $r16;
        org.w3c.dom.svg.SVGRect $r19;
        org.w3c.dom.svg.SVGSVGElement $r8;
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.bridge.BridgeException $r35;
        org.apache.batik.bridge.BridgeContext r1;
        java.awt.geom.AffineTransform $r13, $r14, $r15, $r20, $r21;
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r7;
        org.apache.batik.bridge.SVGSVGElementBridge$SVGSVGElementViewport $r18;
        org.apache.batik.dom.svg.AbstractSVGAnimatedLength $r31, $r32, r39, r40;
        org.apache.batik.dom.svg.LiveAttributeException $r34;
        org.w3c.dom.svg.SVGDocument r38;
        float[] $r25;
        org.apache.batik.gvt.CanvasGraphicsNode r5;
        org.apache.batik.bridge.SVGSVGElementBridge r3;
        java.awt.RenderingHints $r42;
        java.awt.geom.NoninvertibleTransformException $r36, $r37;
        boolean $z0, z1, $z2, $z3, $z5, $z6, $z7;
        java.awt.Shape $r22;
        org.apache.batik.ext.awt.image.renderable.Filter $r23;
        java.awt.Dimension $r28;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, f17, f18, f19;
        org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio $r12;
        int $i0, $i1;
        org.w3c.dom.svg.SVGAnimatedLength $r9, $r10, $r29, $r30;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.w3c.dom.Element r0;
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r33;

        r3 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r4 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()>();

        r5 = (org.apache.batik.gvt.CanvasGraphicsNode) $r4;

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void associateSVGContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r0, r5);

     label02:
        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r38 = (org.w3c.dom.svg.SVGDocument) $r6;

        r7 = (org.apache.batik.dom.svg.SVGOMSVGElement) r0;

        $r8 = interfaceinvoke r38.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        if $r8 != r0 goto label03;

        $z7 = 1;

        $z6 = 1;

        goto label04;

     label03:
        $z7 = 0;

        $z6 = 0;

     label04:
        z1 = $z6;

        f16 = 0.0F;

        f17 = 0.0F;

        if $z7 != 0 goto label05;

        $r29 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getX()>();

        r39 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r29;

        f16 = virtualinvoke r39.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r30 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getY()>();

        r40 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r30;

        f17 = virtualinvoke r40.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

     label05:
        $r9 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getWidth()>();

        $r31 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r9;

        $f0 = virtualinvoke $r31.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r10 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getHeight()>();

        $r32 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r10;

        $f1 = virtualinvoke $r32.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $z2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>(r0);

        virtualinvoke r5.<org.apache.batik.gvt.CompositeGraphicsNode: void setVisible(boolean)>($z2);

        $r11 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedRect getViewBox()>();

        $r33 = (org.apache.batik.dom.svg.SVGOMAnimatedRect) $r11;

        $r12 = virtualinvoke r7.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio getPreserveAspectRatio()>();

        $r13 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,org.w3c.dom.svg.SVGAnimatedRect,org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio,float,float,org.apache.batik.bridge.BridgeContext)>(r0, $r33, $r12, $f0, $f1, r1);

        f18 = $f0;

        f19 = $f1;

     label06:
        $r14 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r14.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d2 = $d0 * $d1;

        f18 = (float) $d2;

        $d3 = (double) $f1;

        $d4 = virtualinvoke $r14.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d5 = $d3 * $d4;

        f19 = (float) $d5;

     label07:
        goto label09;

     label08:
        $r37 := @caughtexception;

     label09:
        $d7 = (double) f16;

        $d6 = (double) f17;

        $r15 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d7, $d6);

        if z1 != 0 goto label10;

        virtualinvoke r5.<org.apache.batik.gvt.CanvasGraphicsNode: void setPositionTransform(java.awt.geom.AffineTransform)>($r15);

        goto label11;

     label10:
        $r16 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Document getDocument()>();

        if r38 != $r16 goto label11;

        $r28 = new java.awt.Dimension;

        $f14 = $f0 + 0.5F;

        $i1 = (int) $f14;

        $f15 = $f1 + 0.5F;

        $i0 = (int) $f15;

        specialinvoke $r28.<java.awt.Dimension: void <init>(int,int)>($i1, $i0);

        virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: void setDocumentSize(java.awt.geom.Dimension2D)>($r28);

     label11:
        virtualinvoke r5.<org.apache.batik.gvt.CanvasGraphicsNode: void setViewingTransform(java.awt.geom.AffineTransform)>($r13);

        r41 = null;

        $z5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertOverflow(org.w3c.dom.Element)>(r0);

        if $z5 == 0 goto label13;

        $r25 = staticinvoke <org.apache.batik.bridge.CSSUtilities: float[] convertClip(org.w3c.dom.Element)>(r0);

        if $r25 != null goto label12;

        $r27 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r27.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f16, f17, $f0, $f1);

        r41 = $r27;

        goto label13;

     label12:
        $r26 = new java.awt.geom.Rectangle2D$Float;

        $f2 = $r25[3];

        $f13 = f16 + $f2;

        $f3 = $r25[0];

        $f12 = f17 + $f3;

        $f4 = $r25[1];

        $f6 = $f0 - $f4;

        $f5 = $r25[3];

        $f11 = $f6 - $f5;

        $f7 = $r25[2];

        $f9 = $f1 - $f7;

        $f8 = $r25[0];

        $f10 = $f9 - $f8;

        specialinvoke $r26.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f13, $f12, $f11, $f10);

        r41 = $r26;

     label13:
        if r41 == null goto label17;

     label14:
        $r20 = new java.awt.geom.AffineTransform;

        specialinvoke $r20.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r15);

        virtualinvoke $r20.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);

        $r21 = virtualinvoke $r20.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r22 = virtualinvoke $r21.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r41);

        $r23 = virtualinvoke r5.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r24 = new org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        specialinvoke $r24.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.Shape)>($r23, $r22);

        virtualinvoke r5.<org.apache.batik.gvt.AbstractGraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r24);

     label15:
        goto label17;

     label16:
        $r36 := @caughtexception;

     label17:
        $r42 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r0, null);

        if $r42 == null goto label18;

        virtualinvoke r5.<org.apache.batik.gvt.AbstractGraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r42);

     label18:
        $r17 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.geom.Rectangle2D convertEnableBackground(org.w3c.dom.Element)>(r0);

        if $r17 == null goto label19;

        virtualinvoke r5.<org.apache.batik.gvt.CompositeGraphicsNode: void setBackgroundEnable(java.awt.geom.Rectangle2D)>($r17);

     label19:
        $z3 = virtualinvoke $r33.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean isSpecified()>();

        if $z3 == 0 goto label20;

        $r19 = virtualinvoke $r33.<org.apache.batik.dom.svg.SVGOMAnimatedRect: org.w3c.dom.svg.SVGRect getAnimVal()>();

        f18 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        f19 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGRect: float getHeight()>();

     label20:
        $r18 = new org.apache.batik.bridge.SVGSVGElementBridge$SVGSVGElementViewport;

        specialinvoke $r18.<org.apache.batik.bridge.SVGSVGElementBridge$SVGSVGElementViewport: void <init>(float,float)>(f18, f19);

        virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: void openViewport(org.w3c.dom.Element,org.apache.batik.bridge.Viewport)>(r0, $r18);

        return r5;

     label21:
        $r34 := @caughtexception;

        $r35 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r35.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r1, $r34);

        throw $r35;

        catch java.awt.geom.NoninvertibleTransformException from label06 to label07 with label08;
        catch java.awt.geom.NoninvertibleTransformException from label14 to label15 with label16;
        catch org.apache.batik.dom.svg.LiveAttributeException from label02 to label21 with label21;
    }

    public void buildGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        java.awt.Composite $r2;
        org.apache.batik.gvt.GraphicsNode r0;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.bridge.SVGSVGElementBridge r6;
        org.apache.batik.ext.awt.image.renderable.Filter $r4;
        org.w3c.dom.Element r1;
        int $i0;
        org.apache.batik.gvt.filter.Mask $r5;

        r6 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r3 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Composite convertOpacity(org.w3c.dom.Element)>(r1);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setComposite(java.awt.Composite)>($r2);

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r0, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r4);

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r0, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setMask(org.apache.batik.gvt.filter.Mask)>($r5);

        $i0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertPointerEvents(org.w3c.dom.Element)>(r1);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setPointerEventType(int)>($i0);

        virtualinvoke r6.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r3, r1, r0);

        virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: void closeViewport(org.w3c.dom.Element)>(r1);

        return;
    }

    public void dispose()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r2;
        org.w3c.dom.Element $r1;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: void removeViewport(org.w3c.dom.Element)>($r1);

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void dispose()>();

        return;
    }

    public void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)
    {
        org.w3c.dom.svg.SVGAnimatedRect $r28;
        java.awt.geom.Rectangle2D$Float $r44, $r45, r65;
        org.apache.batik.gvt.CompositeGraphicsNode $r5;
        byte $b0, $b1, $b2, $b3;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit $r40;
        org.w3c.dom.Document $r12, $r21;
        org.w3c.dom.svg.SVGSVGElement $r14, $r23;
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue r0;
        org.apache.batik.gvt.GraphicsNode $r4, $r6, $r19, $r27;
        org.apache.batik.bridge.BridgeException $r57;
        org.apache.batik.bridge.BridgeContext $r30, $r58;
        java.awt.geom.AffineTransform $r18, $r32, $r33, $r35, $r36, $r37, $r41, r66;
        org.apache.batik.dom.svg.SVGOMSVGElement $r53, $r55;
        org.apache.batik.dom.svg.AbstractSVGAnimatedLength $r48, $r49, r60, r61, r63, r64;
        org.apache.batik.dom.svg.LiveAttributeException $r56;
        org.w3c.dom.svg.SVGDocument $r52, $r54;
        float[] $r43;
        java.lang.String $r1, $r3;
        org.apache.batik.gvt.CanvasGraphicsNode $r50, r62;
        org.apache.batik.bridge.SVGSVGElementBridge r2;
        java.awt.geom.NoninvertibleTransformException $r59;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9;
        java.awt.Shape $r38;
        org.apache.batik.ext.awt.image.renderable.Filter $r39;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, f17;
        org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio $r29;
        org.w3c.dom.Node $r9;
        org.w3c.dom.svg.SVGAnimatedLength $r16, $r17, $r25, $r26, $r46, $r47;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        org.w3c.dom.Element $r7, $r8, $r10, $r11, $r13, $r15, $r20, $r22, $r24, $r31, $r34, $r42;
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r51;

        r2 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r0 := @parameter0: org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

     label01:
        z7 = 0;

        $r1 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label23;

        $r3 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("width");

        if $z0 != 0 goto label02;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("height");

        if $z1 == 0 goto label03;

     label02:
        z7 = 1;

        goto label22;

     label03:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("x");

        if $z2 != 0 goto label04;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("y");

        if $z3 == 0 goto label08;

     label04:
        $r11 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r54 = (org.w3c.dom.svg.SVGDocument) $r12;

        $r13 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r55 = (org.apache.batik.dom.svg.SVGOMSVGElement) $r13;

        $r14 = interfaceinvoke $r54.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r15 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        if $r14 != $r15 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        if $z8 != 0 goto label07;

        $r16 = virtualinvoke $r55.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getX()>();

        r60 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r16;

        $f0 = virtualinvoke r60.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r17 = virtualinvoke $r55.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getY()>();

        r61 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r17;

        $f1 = virtualinvoke r61.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $d1 = (double) $f0;

        $d0 = (double) $f1;

        $r18 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        $r19 = r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        r62 = (org.apache.batik.gvt.CanvasGraphicsNode) $r19;

        virtualinvoke r62.<org.apache.batik.gvt.CanvasGraphicsNode: void setPositionTransform(java.awt.geom.AffineTransform)>($r18);

        return;

     label07:
        goto label22;

     label08:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("viewBox");

        if $z4 != 0 goto label09;

        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("preserveAspectRatio");

        if $z6 == 0 goto label22;

     label09:
        $r20 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r21 = interfaceinvoke $r20.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r52 = (org.w3c.dom.svg.SVGDocument) $r21;

        $r22 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r53 = (org.apache.batik.dom.svg.SVGOMSVGElement) $r22;

        $r23 = interfaceinvoke $r52.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r24 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        if $r23 != $r24 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        f16 = 0.0F;

        f17 = 0.0F;

        if $z9 != 0 goto label12;

        $r46 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getX()>();

        r63 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r46;

        f16 = virtualinvoke r63.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r47 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getY()>();

        r64 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r47;

        f17 = virtualinvoke r64.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

     label12:
        $r25 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getWidth()>();

        $r48 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r25;

        $f2 = virtualinvoke $r48.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r26 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedLength getHeight()>();

        $r49 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r26;

        $f3 = virtualinvoke $r49.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r27 = r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r50 = (org.apache.batik.gvt.CanvasGraphicsNode) $r27;

        $r28 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedRect getViewBox()>();

        $r51 = (org.apache.batik.dom.svg.SVGOMAnimatedRect) $r28;

        $r29 = virtualinvoke $r53.<org.apache.batik.dom.svg.SVGOMSVGElement: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio getPreserveAspectRatio()>();

        $r31 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r30 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r32 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,org.w3c.dom.svg.SVGAnimatedRect,org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio,float,float,org.apache.batik.bridge.BridgeContext)>($r31, $r51, $r29, $f2, $f3, $r30);

        $r33 = virtualinvoke $r50.<org.apache.batik.gvt.CanvasGraphicsNode: java.awt.geom.AffineTransform getViewingTransform()>();

        $d2 = virtualinvoke $r32.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d3 = virtualinvoke $r33.<java.awt.geom.AffineTransform: double getScaleX()>();

        $b0 = $d2 cmpl $d3;

        if $b0 != 0 goto label13;

        $d4 = virtualinvoke $r32.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d5 = virtualinvoke $r33.<java.awt.geom.AffineTransform: double getScaleY()>();

        $b1 = $d4 cmpl $d5;

        if $b1 != 0 goto label13;

        $d6 = virtualinvoke $r32.<java.awt.geom.AffineTransform: double getShearX()>();

        $d7 = virtualinvoke $r33.<java.awt.geom.AffineTransform: double getShearX()>();

        $b2 = $d6 cmpl $d7;

        if $b2 != 0 goto label13;

        $d8 = virtualinvoke $r32.<java.awt.geom.AffineTransform: double getShearY()>();

        $d9 = virtualinvoke $r33.<java.awt.geom.AffineTransform: double getShearY()>();

        $b3 = $d8 cmpl $d9;

        if $b3 == 0 goto label14;

     label13:
        z7 = 1;

        goto label22;

     label14:
        virtualinvoke $r50.<org.apache.batik.gvt.CanvasGraphicsNode: void setViewingTransform(java.awt.geom.AffineTransform)>($r32);

        r65 = null;

        $r34 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $z5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertOverflow(org.w3c.dom.Element)>($r34);

        if $z5 == 0 goto label16;

        $r42 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r43 = staticinvoke <org.apache.batik.bridge.CSSUtilities: float[] convertClip(org.w3c.dom.Element)>($r42);

        if $r43 != null goto label15;

        $r45 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r45.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f16, f17, $f2, $f3);

        r65 = $r45;

        goto label16;

     label15:
        $r44 = new java.awt.geom.Rectangle2D$Float;

        $f4 = $r43[3];

        $f15 = f16 + $f4;

        $f5 = $r43[0];

        $f14 = f17 + $f5;

        $f6 = $r43[1];

        $f8 = $f2 - $f6;

        $f7 = $r43[3];

        $f13 = $f8 - $f7;

        $f9 = $r43[2];

        $f11 = $f3 - $f9;

        $f10 = $r43[0];

        $f12 = $f11 - $f10;

        specialinvoke $r44.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f15, $f14, $f13, $f12);

        r65 = $r44;

     label16:
        if r65 == null goto label22;

     label17:
        $r35 = virtualinvoke $r50.<org.apache.batik.gvt.CanvasGraphicsNode: java.awt.geom.AffineTransform getPositionTransform()>();

        if $r35 != null goto label18;

        $r41 = new java.awt.geom.AffineTransform;

        specialinvoke $r41.<java.awt.geom.AffineTransform: void <init>()>();

        r66 = $r41;

        goto label19;

     label18:
        $r36 = new java.awt.geom.AffineTransform;

        specialinvoke $r36.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r35);

        r66 = $r36;

     label19:
        virtualinvoke r66.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r32);

        $r37 = virtualinvoke r66.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r38 = virtualinvoke $r37.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r65);

        $r39 = virtualinvoke $r50.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r40 = new org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        specialinvoke $r40.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.Shape)>($r39, $r38);

        virtualinvoke $r50.<org.apache.batik.gvt.AbstractGraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r40);

     label20:
        goto label22;

     label21:
        $r59 := @caughtexception;

     label22:
        if z7 == 0 goto label23;

        $r4 = r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

        $r6 = r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        virtualinvoke $r5.<org.apache.batik.gvt.CompositeGraphicsNode: boolean remove(java.lang.Object)>($r6);

        $r7 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node,boolean)>($r7, 0);

        $r8 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r10 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r2.<org.apache.batik.bridge.SVGGElementBridge: void handleElementAdded(org.apache.batik.gvt.CompositeGraphicsNode,org.w3c.dom.Node,org.w3c.dom.Element)>($r5, $r9, $r10);

        return;

     label23:
        goto label25;

     label24:
        $r56 := @caughtexception;

        $r57 = new org.apache.batik.bridge.BridgeException;

        $r58 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        specialinvoke $r57.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>($r58, $r56);

        throw $r57;

     label25:
        specialinvoke r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)>(r0);

        return;

        catch java.awt.geom.NoninvertibleTransformException from label17 to label20 with label21;
        catch org.apache.batik.dom.svg.LiveAttributeException from label01 to label23 with label24;
    }

    public java.util.List getIntersectionList(org.w3c.dom.svg.SVGRect, org.w3c.dom.Element)
    {
        java.awt.geom.Rectangle2D $r7, $r14, r34;
        org.apache.batik.bridge.SVGSVGElementBridge r3;
        java.awt.geom.Rectangle2D$Float $r1;
        org.apache.batik.dom.svg.SVGContext $r16;
        org.w3c.dom.svg.SVGRect r2;
        java.awt.geom.NoninvertibleTransformException $r26;
        org.apache.batik.dom.svg.SVGOMElement r37;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.awt.Shape $r18, $r19, $r21;
        org.apache.batik.gvt.GraphicsNode $r6, $r33;
        java.util.Set $r17, $r25, r31;
        org.apache.batik.bridge.BridgeContext $r5, $r32;
        java.awt.geom.AffineTransform $r9, $r13, r28;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.bridge.SVGTextElementBridge r38;
        java.util.ArrayList $r0;
        org.w3c.dom.Node r29, r35;
        java.lang.String $r10, $r11, $r12, $r15, $r20, $r22, $r23, $r24;
        org.apache.batik.gvt.ShapeNode r36;
        org.w3c.dom.Element $r4, r8, r27, r30;

        r3 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r2 := @parameter0: org.w3c.dom.svg.SVGRect;

        r27 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.awt.geom.Rectangle2D$Float;

        $f0 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getX()>();

        $f1 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getY()>();

        $f2 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        $f3 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getHeight()>();

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $r5 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>($r4);

        if $r6 != null goto label01;

        return $r0;

     label01:
        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        if $r7 != null goto label02;

        return $r0;

     label02:
        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r7);

        if $z0 != 0 goto label03;

        return $r0;

     label03:
        r8 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        r28 = $r9;

     label04:
        r28 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label05:
        goto label07;

     label06:
        $r26 := @caughtexception;

     label07:
        r29 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label10;

     label08:
        $z1 = r29 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label09;

        goto label11;

     label09:
        r29 = interfaceinvoke r29.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label10:
        if r29 != null goto label08;

     label11:
        if r29 != null goto label12;

        return $r0;

     label12:
        r30 = (org.w3c.dom.Element) r29;

        r31 = null;

        if r27 == null goto label36;

        $r25 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: java.util.Set getAncestors(org.w3c.dom.Element,org.w3c.dom.Element)>(r27, r8);

        r31 = $r25;

        if $r25 != null goto label36;

        r27 = null;

        goto label36;

     label13:
        $r10 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r11 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r12 = "http://www.w3.org/2000/svg";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label15;

        $r22 = "g";

        $z14 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z14 != 0 goto label14;

        $r23 = "svg";

        $z15 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z15 != 0 goto label14;

        $r24 = "a";

        $z16 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z16 == 0 goto label15;

     label14:
        $z17 = 1;

        goto label16;

     label15:
        $z17 = 0;

     label16:
        z3 = $z17;

        $r32 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r33 = virtualinvoke $r32.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r30);

        if $r33 != null goto label18;

        if r31 == null goto label17;

        $z13 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z13 == 0 goto label17;

        goto label37;

     label17:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

        goto label36;

     label18:
        $r13 = interfaceinvoke $r33.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        $r14 = interfaceinvoke $r33.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        r34 = $r14;

        virtualinvoke $r13.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r28);

        if $r14 == null goto label19;

        $r21 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r14);

        r34 = interfaceinvoke $r21.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label19:
        if r34 == null goto label20;

        $z5 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r34);

        if $z5 != 0 goto label22;

     label20:
        if r31 == null goto label21;

        $z4 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z4 == 0 goto label21;

        goto label37;

     label21:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

        goto label36;

     label22:
        if z3 == 0 goto label27;

        r35 = interfaceinvoke r30.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label25;

     label23:
        $z12 = r35 instanceof org.w3c.dom.Element;

        if $z12 == 0 goto label24;

        goto label26;

     label24:
        r35 = interfaceinvoke r35.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label25:
        if r35 != null goto label23;

     label26:
        if r35 == null goto label35;

        r30 = (org.w3c.dom.Element) r35;

        goto label36;

     label27:
        if r30 != r27 goto label28;

        goto label37;

     label28:
        $r15 = "http://www.w3.org/2000/svg";

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label29;

        $r20 = "use";

        $z10 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z10 == 0 goto label29;

        $z11 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Rectangle2D)>(r34);

        if $z11 == 0 goto label29;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r30);

     label29:
        $z18 = $r33 instanceof org.apache.batik.gvt.ShapeNode;

        if $z18 == 0 goto label31;

        r36 = (org.apache.batik.gvt.ShapeNode) $r33;

        $r18 = virtualinvoke r36.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getSensitiveArea()>();

        if $r18 == null goto label30;

        $r19 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r18);

        $z9 = interfaceinvoke $r19.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>($r1);

        if $z9 == 0 goto label30;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r30);

     label30:
        goto label35;

     label31:
        $z7 = $r33 instanceof org.apache.batik.gvt.TextNode;

        if $z7 == 0 goto label34;

        r37 = (org.apache.batik.dom.svg.SVGOMElement) r30;

        $r16 = virtualinvoke r37.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r38 = (org.apache.batik.bridge.SVGTextElementBridge) $r16;

        $r17 = virtualinvoke r38.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Set getTextIntersectionSet(java.awt.geom.AffineTransform,java.awt.geom.Rectangle2D)>($r13, $r1);

        if r31 == null goto label32;

        $z8 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z8 == 0 goto label32;

        virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: boolean filterChildren(org.w3c.dom.Element,org.w3c.dom.Element,java.util.Set,java.util.List)>(r30, r27, $r17, $r0);

        goto label33;

     label32:
        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r17);

     label33:
        goto label35;

     label34:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r30);

     label35:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

     label36:
        if r30 != null goto label13;

     label37:
        return $r0;

        catch java.awt.geom.NoninvertibleTransformException from label04 to label05 with label06;
    }

    public java.util.List getEnclosureList(org.w3c.dom.svg.SVGRect, org.w3c.dom.Element)
    {
        java.awt.geom.Rectangle2D $r7, $r14, r34;
        org.apache.batik.bridge.SVGSVGElementBridge r3;
        java.awt.geom.Rectangle2D$Float $r1;
        org.apache.batik.dom.svg.SVGContext $r17;
        org.w3c.dom.svg.SVGRect r2;
        java.awt.geom.NoninvertibleTransformException $r26;
        org.apache.batik.dom.svg.SVGOMElement r16;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.awt.Shape $r21;
        org.apache.batik.gvt.GraphicsNode $r6, $r33;
        java.util.Set $r19, $r25, r31;
        org.apache.batik.bridge.BridgeContext $r5, $r32;
        java.awt.geom.AffineTransform $r9, $r13, r28;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.bridge.SVGTextElementBridge r18;
        java.util.ArrayList $r0;
        org.w3c.dom.Node r29, r35;
        java.lang.String $r10, $r11, $r12, $r15, $r20, $r22, $r23, $r24;
        org.w3c.dom.Element $r4, r8, r27, r30;

        r3 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r2 := @parameter0: org.w3c.dom.svg.SVGRect;

        r27 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.awt.geom.Rectangle2D$Float;

        $f0 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getX()>();

        $f1 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getY()>();

        $f2 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        $f3 = interfaceinvoke r2.<org.w3c.dom.svg.SVGRect: float getHeight()>();

        specialinvoke $r1.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $r5 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>($r4);

        if $r6 != null goto label01;

        return $r0;

     label01:
        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        if $r7 != null goto label02;

        return $r0;

     label02:
        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r7);

        if $z0 != 0 goto label03;

        return $r0;

     label03:
        r8 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        r28 = $r9;

     label04:
        r28 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label05:
        goto label07;

     label06:
        $r26 := @caughtexception;

     label07:
        r29 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label10;

     label08:
        $z1 = r29 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label09;

        goto label11;

     label09:
        r29 = interfaceinvoke r29.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label10:
        if r29 != null goto label08;

     label11:
        if r29 != null goto label12;

        return $r0;

     label12:
        r30 = (org.w3c.dom.Element) r29;

        r31 = null;

        if r27 == null goto label34;

        $r25 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: java.util.Set getAncestors(org.w3c.dom.Element,org.w3c.dom.Element)>(r27, r8);

        r31 = $r25;

        if $r25 != null goto label34;

        r27 = null;

        goto label34;

     label13:
        $r10 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r11 = interfaceinvoke r30.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r12 = "http://www.w3.org/2000/svg";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label15;

        $r22 = "g";

        $z14 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z14 != 0 goto label14;

        $r23 = "svg";

        $z15 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z15 != 0 goto label14;

        $r24 = "a";

        $z16 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z16 == 0 goto label15;

     label14:
        $z17 = 1;

        goto label16;

     label15:
        $z17 = 0;

     label16:
        z3 = $z17;

        $r32 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r33 = virtualinvoke $r32.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r30);

        if $r33 != null goto label18;

        if r31 == null goto label17;

        $z13 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z13 == 0 goto label17;

        goto label35;

     label17:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

        goto label34;

     label18:
        $r13 = interfaceinvoke $r33.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        $r14 = interfaceinvoke $r33.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        r34 = $r14;

        virtualinvoke $r13.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r28);

        if $r14 == null goto label19;

        $r21 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r14);

        r34 = interfaceinvoke $r21.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label19:
        if r34 == null goto label20;

        $z5 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r34);

        if $z5 != 0 goto label22;

     label20:
        if r31 == null goto label21;

        $z4 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z4 == 0 goto label21;

        goto label35;

     label21:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

        goto label34;

     label22:
        if z3 == 0 goto label27;

        r35 = interfaceinvoke r30.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label25;

     label23:
        $z12 = r35 instanceof org.w3c.dom.Element;

        if $z12 == 0 goto label24;

        goto label26;

     label24:
        r35 = interfaceinvoke r35.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label25:
        if r35 != null goto label23;

     label26:
        if r35 == null goto label33;

        r30 = (org.w3c.dom.Element) r35;

        goto label34;

     label27:
        if r30 != r27 goto label28;

        goto label35;

     label28:
        $r15 = "http://www.w3.org/2000/svg";

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label29;

        $r20 = "use";

        $z10 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z10 == 0 goto label29;

        $z11 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Rectangle2D)>(r34);

        if $z11 == 0 goto label33;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r30);

        goto label33;

     label29:
        $z7 = $r33 instanceof org.apache.batik.gvt.TextNode;

        if $z7 == 0 goto label32;

        r16 = (org.apache.batik.dom.svg.SVGOMElement) r30;

        $r17 = virtualinvoke r16.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r18 = (org.apache.batik.bridge.SVGTextElementBridge) $r17;

        $r19 = virtualinvoke r18.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Set getTextEnclosureSet(java.awt.geom.AffineTransform,java.awt.geom.Rectangle2D)>($r13, $r1);

        if r31 == null goto label30;

        $z9 = interfaceinvoke r31.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z9 == 0 goto label30;

        virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: boolean filterChildren(org.w3c.dom.Element,org.w3c.dom.Element,java.util.Set,java.util.List)>(r30, r27, $r19, $r0);

        goto label31;

     label30:
        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r19);

     label31:
        goto label33;

     label32:
        $z8 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Rectangle2D)>(r34);

        if $z8 == 0 goto label33;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r30);

     label33:
        r30 = virtualinvoke r3.<org.apache.batik.bridge.SVGSVGElementBridge: org.w3c.dom.Element getNext(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element)>(r30, r8, r27);

     label34:
        if r30 != null goto label13;

     label35:
        return $r0;

        catch java.awt.geom.NoninvertibleTransformException from label04 to label05 with label06;
    }

    public boolean checkIntersection(org.w3c.dom.Element, org.w3c.dom.svg.SVGRect)
    {
        java.awt.geom.Rectangle2D $r12, r21;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        java.awt.geom.Rectangle2D$Float $r4;
        org.apache.batik.dom.svg.SVGContext $r17;
        org.w3c.dom.svg.SVGRect r5;
        java.awt.geom.NoninvertibleTransformException $r19;
        org.apache.batik.dom.svg.SVGOMElement $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.Shape $r11, $r14, $r15;
        org.apache.batik.gvt.GraphicsNode $r3, $r9;
        org.apache.batik.bridge.BridgeContext $r2, $r8, $r18;
        java.awt.geom.AffineTransform $r6, $r10, r20;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.gvt.ShapeNode r13;
        org.w3c.dom.Element $r1, r7;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r7 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.w3c.dom.svg.SVGRect;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r3 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>($r1);

        if $r3 != null goto label01;

        return 0;

     label01:
        $r4 = new java.awt.geom.Rectangle2D$Float;

        $f0 = interfaceinvoke r5.<org.w3c.dom.svg.SVGRect: float getX()>();

        $f1 = interfaceinvoke r5.<org.w3c.dom.svg.SVGRect: float getY()>();

        $f2 = interfaceinvoke r5.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        $f3 = interfaceinvoke r5.<org.w3c.dom.svg.SVGRect: float getHeight()>();

        specialinvoke $r4.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $r6 = interfaceinvoke $r3.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        r20 = $r6;

     label02:
        r20 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

     label05:
        $z0 = r7 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label07;

        $r16 = (org.apache.batik.dom.svg.SVGOMElement) r7;

        $r17 = virtualinvoke $r16.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $z4 = $r17 instanceof org.apache.batik.bridge.SVGTextElementBridge;

        if $z4 != 0 goto label06;

        $z6 = $r17 instanceof org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext;

        if $z6 == 0 goto label07;

     label06:
        $r18 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $z5 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: boolean getTextIntersection(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.awt.geom.AffineTransform,java.awt.geom.Rectangle2D,boolean)>($r18, r7, r20, $r4, 1);

        return $z5;

     label07:
        r21 = null;

        $r8 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r9 = virtualinvoke $r8.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r7);

        if $r9 == null goto label08;

        r21 = interfaceinvoke $r9.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

     label08:
        if r21 != null goto label09;

        return 0;

     label09:
        $r10 = interfaceinvoke $r9.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        virtualinvoke $r10.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r20);

        $r11 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r21);

        $r12 = interfaceinvoke $r11.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z1 = virtualinvoke $r4.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r12);

        if $z1 != 0 goto label10;

        return 0;

     label10:
        $z2 = $r9 instanceof org.apache.batik.gvt.ShapeNode;

        if $z2 != 0 goto label11;

        return 1;

     label11:
        r13 = (org.apache.batik.gvt.ShapeNode) $r9;

        $r14 = virtualinvoke r13.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getSensitiveArea()>();

        if $r14 != null goto label12;

        return 0;

     label12:
        $r15 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r14);

        $z3 = interfaceinvoke $r15.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>($r4);

        if $z3 == 0 goto label13;

        return 1;

     label13:
        return 0;

        catch java.awt.geom.NoninvertibleTransformException from label02 to label03 with label04;
    }

    public boolean checkEnclosure(org.w3c.dom.Element, org.w3c.dom.svg.SVGRect)
    {
        java.awt.geom.Rectangle2D $r12, r21;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        java.awt.geom.Rectangle2D$Float $r7;
        org.apache.batik.dom.svg.SVGContext $r14;
        org.w3c.dom.svg.SVGRect r8;
        java.awt.geom.NoninvertibleTransformException $r19;
        org.apache.batik.dom.svg.SVGOMElement $r13;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r11;
        org.apache.batik.gvt.GraphicsNode $r3, $r6, r20;
        org.apache.batik.bridge.BridgeContext $r2, $r5, $r15, $r17;
        java.awt.geom.AffineTransform $r9, $r10, r23;
        float $f0, $f1, $f2, $f3;
        org.w3c.dom.Node $r16, $r18;
        org.w3c.dom.Element r1, $r4, r22;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.w3c.dom.svg.SVGRect;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r1);

        r20 = $r3;

        r21 = null;

        $z0 = r1 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label06;

        $r13 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        $r14 = virtualinvoke $r13.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $z2 = $r14 instanceof org.apache.batik.bridge.SVGTextElementBridge;

        if $z2 != 0 goto label01;

        $z3 = $r14 instanceof org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext;

        if $z3 == 0 goto label05;

     label01:
        $r15 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        r21 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Rectangle2D getTextBounds(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean)>($r15, r1, 1);

        $r16 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r22 = (org.w3c.dom.Element) $r16;

        goto label03;

     label02:
        $r17 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        r20 = virtualinvoke $r17.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>(r22);

        $r18 = interfaceinvoke r22.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r22 = (org.w3c.dom.Element) $r18;

     label03:
        if r22 == null goto label04;

        if r20 == null goto label02;

     label04:
        goto label07;

     label05:
        if $r3 == null goto label07;

        r21 = interfaceinvoke $r3.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        goto label07;

     label06:
        if $r3 == null goto label07;

        r21 = interfaceinvoke $r3.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

     label07:
        if r21 != null goto label08;

        return 0;

     label08:
        $r5 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.GraphicsNode getGraphicsNode(org.w3c.dom.Node)>($r4);

        if $r6 != null goto label09;

        return 0;

     label09:
        $r7 = new java.awt.geom.Rectangle2D$Float;

        $f0 = interfaceinvoke r8.<org.w3c.dom.svg.SVGRect: float getX()>();

        $f1 = interfaceinvoke r8.<org.w3c.dom.svg.SVGRect: float getY()>();

        $f2 = interfaceinvoke r8.<org.w3c.dom.svg.SVGRect: float getWidth()>();

        $f3 = interfaceinvoke r8.<org.w3c.dom.svg.SVGRect: float getHeight()>();

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $r9 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        r23 = $r9;

     label10:
        r23 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

     label13:
        $r10 = interfaceinvoke r20.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        virtualinvoke $r10.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r23);

        $r11 = virtualinvoke $r10.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r21);

        $r12 = interfaceinvoke $r11.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z1 = virtualinvoke $r7.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Rectangle2D)>($r12);

        return $z1;

        catch java.awt.geom.NoninvertibleTransformException from label10 to label11 with label12;
    }

    public boolean filterChildren(org.w3c.dom.Element, org.w3c.dom.Element, java.util.Set, java.util.List)
    {
        java.util.Set r3;
        org.apache.batik.bridge.SVGSVGElementBridge r1;
        java.util.List r4;
        org.w3c.dom.Element r0, r2, $r5;
        org.w3c.dom.Node r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.List;

        r6 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $z0 = r6 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r5 = (org.w3c.dom.Element) r6;

        $z1 = virtualinvoke r1.<org.apache.batik.bridge.SVGSVGElementBridge: boolean filterChildren(org.w3c.dom.Element,org.w3c.dom.Element,java.util.Set,java.util.List)>($r5, r2, r3, r4);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r6 != null goto label1;

        if r0 != r2 goto label4;

        return 1;

     label4:
        $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label5;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r0);

     label5:
        return 0;
    }

    protected java.util.Set getAncestors(org.w3c.dom.Element, org.w3c.dom.Element)
    {
        java.util.HashSet $r0;
        org.w3c.dom.Element r1, r3, $r4, r6;
        org.w3c.dom.Node $r2;
        org.apache.batik.bridge.SVGSVGElementBridge r5;

        r5 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r6 = r1;

     label1:
        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r6);

        $r2 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r4 = (org.w3c.dom.Element) $r2;

        r6 = $r4;

        if $r4 == null goto label2;

        if $r4 != r3 goto label1;

     label2:
        if $r4 != null goto label3;

        return null;

     label3:
        return $r0;
    }

    protected org.w3c.dom.Element getNext(org.w3c.dom.Element, org.w3c.dom.Element, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGSVGElementBridge r4;
        org.w3c.dom.Element r1, $r2, r3, r5;
        org.w3c.dom.Node $r0, r6;
        boolean $z0, $z1;

        r4 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        r5 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.w3c.dom.Element;

        r1 := @parameter2: org.w3c.dom.Element;

        r6 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label03;

     label01:
        $z0 = r6 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label02;

        goto label10;

     label02:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label03:
        if r6 != null goto label01;

        goto label10;

     label04:
        $r0 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r5 = (org.w3c.dom.Element) $r0;

        if r5 == r1 goto label05;

        if r5 != r3 goto label06;

     label05:
        r6 = null;

        goto label11;

     label06:
        r6 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label09;

     label07:
        $z1 = r6 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label08;

        goto label10;

     label08:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label09:
        if r6 != null goto label07;

     label10:
        if r6 == null goto label04;

     label11:
        $r2 = (org.w3c.dom.Element) r6;

        return $r2;
    }

    public void deselectAll()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UserAgent $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void deselectAll()>();

        return;
    }

    public int suspendRedraw(int)
    {
        int i0, $i1, $i3;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UpdateManager $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        if $r2 == null goto label1;

        $i1 = virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: int addRedrawSuspension(int)>(i0);

        return $i1;

     label1:
        $i3 = (int) -1;

        return $i3;
    }

    public boolean unsuspendRedraw(int)
    {
        int i0;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UpdateManager $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: boolean releaseRedrawSuspension(int)>(i0);

        return $z0;

     label1:
        return 0;
    }

    public void unsuspendRedrawAll()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UpdateManager $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: void releaseAllRedrawSuspension()>();

     label1:
        return;
    }

    public void forceRedraw()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.UpdateManager $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UpdateManager getUpdateManager()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<org.apache.batik.bridge.UpdateManager: void forceRepaint()>();

     label1:
        return;
    }

    public void pauseAnimations()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.SVGAnimationEngine $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        virtualinvoke $r2.<org.apache.batik.bridge.SVGAnimationEngine: void pause()>();

        return;
    }

    public void unpauseAnimations()
    {
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.SVGAnimationEngine $r2;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        virtualinvoke $r2.<org.apache.batik.bridge.SVGAnimationEngine: void unpause()>();

        return;
    }

    public boolean animationsPaused()
    {
        org.apache.batik.bridge.SVGAnimationEngine $r2;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        $z0 = virtualinvoke $r2.<org.apache.batik.anim.AnimationEngine: boolean isPaused()>();

        return $z0;
    }

    public float getCurrentTime()
    {
        org.apache.batik.bridge.SVGAnimationEngine $r2;
        float $f0;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        $f0 = virtualinvoke $r2.<org.apache.batik.bridge.SVGAnimationEngine: float getCurrentTime()>();

        return $f0;
    }

    public void setCurrentTime(float)
    {
        org.apache.batik.bridge.SVGAnimationEngine $r2;
        float f0;
        org.apache.batik.bridge.SVGSVGElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r1;

        r0 := @this: org.apache.batik.bridge.SVGSVGElementBridge;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.SVGAnimationEngine getAnimationEngine()>();

        virtualinvoke $r2.<org.apache.batik.bridge.SVGAnimationEngine: float setCurrentTime(float)>(f0);

        return;
    }
}
