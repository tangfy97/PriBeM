class com.mongodb.DBPortPool$Holder extends java.lang.Object
{
    final com.mongodb.MongoOptions _options;
    final java.util.Map _pools;
    final javax.management.MBeanServer _server;

    void <init>(com.mongodb.MongoOptions)
    {
        com.mongodb.MongoOptions r4;
        java.util.Map $r2;
        javax.management.MBeanServer $r3;
        java.util.HashMap $r1;
        com.mongodb.DBPortPool$Holder r0;

        r0 := @this: com.mongodb.DBPortPool$Holder;

        r4 := @parameter0: com.mongodb.MongoOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools> = $r2;

        $r3 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server> = $r3;

        r0.<com.mongodb.DBPortPool$Holder: com.mongodb.MongoOptions _options> = r4;

        return;
    }

    com.mongodb.DBPortPool get(java.net.InetSocketAddress)
    {
        java.lang.Throwable $r16;
        com.mongodb.DBPortPool $r7, r23, r24;
        com.mongodb.DBPortPool$Holder r0;
        java.util.logging.Level $r14, $r18, $r21;
        java.util.Map $r2, $r4, $r5, $r9;
        javax.management.MBeanServer $r11, $r12, $r13;
        boolean $z0;
        com.mongodb.MongoOptions $r8;
        javax.management.ObjectName $r10;
        java.util.logging.Logger $r15, $r19, $r22;
        java.net.InetSocketAddress r1;
        javax.management.JMException $r20;
        java.security.AccessControlException $r17;
        java.lang.Object $r3, $r6;

        r0 := @this: com.mongodb.DBPortPool$Holder;

        r1 := @parameter0: java.net.InetSocketAddress;

        $r2 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r23 = (com.mongodb.DBPortPool) $r3;

        if r23 == null goto label01;

        return r23;

     label01:
        $r4 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        entermonitor $r4;

     label02:
        $r5 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r24 = (com.mongodb.DBPortPool) $r6;

        if r24 == null goto label04;

        exitmonitor $r4;

     label03:
        return r24;

     label04:
        $r7 = new com.mongodb.DBPortPool;

        $r8 = r0.<com.mongodb.DBPortPool$Holder: com.mongodb.MongoOptions _options>;

        specialinvoke $r7.<com.mongodb.DBPortPool: void <init>(java.net.InetSocketAddress,com.mongodb.MongoOptions)>(r1, $r8);

        $r9 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label05:
        $r10 = specialinvoke r0.<com.mongodb.DBPortPool$Holder: javax.management.ObjectName createObjectName(java.net.InetSocketAddress)>(r1);

        $r11 = r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server>;

        $z0 = interfaceinvoke $r11.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>($r10);

        if $z0 == 0 goto label06;

        $r13 = r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server>;

        interfaceinvoke $r13.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>($r10);

        $r15 = <com.mongodb.Bytes: java.util.logging.Logger LOGGER>;

        $r14 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r14, "multiple Mongo instances for same host, jmx numbers might be off");

     label06:
        $r12 = r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server>;

        interfaceinvoke $r12.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r7, $r10);

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        $r22 = <com.mongodb.Bytes: java.util.logging.Logger LOGGER>;

        $r21 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r22.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r21, "jmx registration error, continuing", $r20);

        goto label10;

     label09:
        $r17 := @caughtexception;

        $r19 = <com.mongodb.Bytes: java.util.logging.Logger LOGGER>;

        $r18 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r18, "jmx registration error, continuing", $r17);

     label10:
        exitmonitor $r4;

     label11:
        goto label14;

     label12:
        $r16 := @caughtexception;

        exitmonitor $r4;

     label13:
        throw $r16;

     label14:
        return $r7;

        catch javax.management.JMException from label05 to label07 with label08;
        catch java.security.AccessControlException from label05 to label07 with label09;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    void close()
    {
        java.lang.Throwable $r11;
        com.mongodb.DBPortPool r6;
        com.mongodb.DBPortPool$Holder r0;
        java.util.logging.Level $r13;
        java.util.Map $r1, $r2;
        javax.management.MBeanServer $r9, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        javax.management.ObjectName $r8;
        java.util.logging.Logger $r14;
        java.net.InetSocketAddress $r7;
        javax.management.JMException $r12;
        java.lang.Object $r5;

        r0 := @this: com.mongodb.DBPortPool$Holder;

        $r1 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        entermonitor $r1;

     label01:
        $r2 = r0.<com.mongodb.DBPortPool$Holder: java.util.Map _pools>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mongodb.DBPortPool) $r5;

        virtualinvoke r6.<com.mongodb.DBPortPool: void close()>();

     label03:
        $r7 = r6.<com.mongodb.DBPortPool: java.net.InetSocketAddress _addr>;

        $r8 = specialinvoke r0.<com.mongodb.DBPortPool$Holder: javax.management.ObjectName createObjectName(java.net.InetSocketAddress)>($r7);

        $r9 = r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server>;

        $z1 = interfaceinvoke $r9.<javax.management.MBeanServer: boolean isRegistered(javax.management.ObjectName)>($r8);

        if $z1 == 0 goto label04;

        $r10 = r0.<com.mongodb.DBPortPool$Holder: javax.management.MBeanServer _server>;

        interfaceinvoke $r10.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>($r8);

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        $r14 = <com.mongodb.Bytes: java.util.logging.Logger LOGGER>;

        $r13 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "jmx de-registration error, continuing", $r12);

     label06:
        goto label02;

     label07:
        exitmonitor $r1;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r11;

     label11:
        return;

        catch javax.management.JMException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private javax.management.ObjectName createObjectName(java.net.InetSocketAddress) throws javax.management.MalformedObjectNameException
    {
        javax.management.ObjectName $r0;
        java.net.InetSocketAddress r3;
        com.mongodb.DBPortPool$Holder r8;
        java.lang.StringBuilder $r1, $r2, $r6;
        java.lang.String $r4, $r5, $r7;

        r8 := @this: com.mongodb.DBPortPool$Holder;

        r3 := @parameter0: java.net.InetSocketAddress;

        $r0 = new javax.management.ObjectName;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.mongodb:type=ConnectionPool,host=");

        $r4 = virtualinvoke r3.<java.net.InetSocketAddress: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(58, 95);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<javax.management.ObjectName: void <init>(java.lang.String)>($r7);

        return $r0;
    }
}
