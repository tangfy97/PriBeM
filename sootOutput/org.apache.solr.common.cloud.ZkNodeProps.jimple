public class org.apache.solr.common.cloud.ZkNodeProps extends java.lang.Object implements org.noggit.JSONWriter$Writable
{
    protected final java.util.Map propMap;

    public void <init>(java.util.Map)
    {
        org.apache.solr.common.cloud.ZkNodeProps r0;
        java.util.Map r1;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap> = r1;

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        java.lang.Object[] $r2;
        java.util.Map $r3;
        java.lang.String[] r1;
        org.apache.solr.common.cloud.ZkNodeProps r0;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r1 := @parameter0: java.lang.String[];

        $r2 = (java.lang.Object[]) r1;

        $r3 = staticinvoke <org.apache.solr.common.cloud.ZkNodeProps: java.util.Map makeMap(java.lang.Object[])>($r2);

        specialinvoke r0.<org.apache.solr.common.cloud.ZkNodeProps: void <init>(java.util.Map)>($r3);

        return;
    }

    public static transient org.apache.solr.common.cloud.ZkNodeProps fromKeyVals(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.apache.solr.common.cloud.ZkNodeProps $r0;
        java.util.Map $r2;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new org.apache.solr.common.cloud.ZkNodeProps;

        $r2 = staticinvoke <org.apache.solr.common.cloud.ZkNodeProps: java.util.Map makeMap(java.lang.Object[])>(r1);

        specialinvoke $r0.<org.apache.solr.common.cloud.ZkNodeProps: void <init>(java.util.Map)>($r2);

        return $r0;
    }

    public static transient java.util.Map makeMap(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("arguments should be key,value");

        throw $r5;

     label1:
        $r1 = new java.util.HashMap;

        $i2 = lengthof r0;

        $i3 = $i2 >> 1;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i3);

        i6 = 0;

     label2:
        $i4 = lengthof r0;

        if i6 >= $i4 goto label3;

        $r2 = r0[i6];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i5 = i6 + 1;

        $r4 = r0[$i5];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i6 = i6 + 2;

        goto label2;

     label3:
        return $r1;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        org.apache.solr.common.cloud.ZkNodeProps r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Map getProperties()
    {
        org.apache.solr.common.cloud.ZkNodeProps r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        $r1 = r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        return $r1;
    }

    public java.util.Map shallowCopy()
    {
        java.util.LinkedHashMap $r0;
        org.apache.solr.common.cloud.ZkNodeProps r1;
        java.util.Map $r2;

        r1 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2);

        return $r0;
    }

    public static org.apache.solr.common.cloud.ZkNodeProps load(byte[])
    {
        byte[] r0;
        java.util.Map r2;
        java.lang.Object $r1;
        org.apache.solr.common.cloud.ZkNodeProps $r3;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.solr.common.cloud.ZkStateReader: java.lang.Object fromJSON(byte[])>(r0);

        r2 = (java.util.Map) $r1;

        $r3 = new org.apache.solr.common.cloud.ZkNodeProps;

        specialinvoke $r3.<org.apache.solr.common.cloud.ZkNodeProps: void <init>(java.util.Map)>(r2);

        return $r3;
    }

    public void write(org.noggit.JSONWriter)
    {
        org.noggit.JSONWriter r0;
        org.apache.solr.common.cloud.ZkNodeProps r1;
        java.util.Map $r2;

        r1 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r0 := @parameter0: org.noggit.JSONWriter;

        $r2 = r1.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        virtualinvoke r0.<org.noggit.JSONWriter: void write(java.util.Map)>($r2);

        return;
    }

    public java.lang.String getStr(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        org.apache.solr.common.cloud.ZkNodeProps r0;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r4;
    }

    public java.lang.Object get(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.solr.common.cloud.ZkNodeProps r0;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.solr.common.cloud.ZkNodeProps r0;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        $r1 = staticinvoke <org.noggit.JSONUtil: java.lang.String toJSON(java.lang.Object)>(r0);

        return $r1;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String r1;
        org.apache.solr.common.cloud.ZkNodeProps r0;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.ZkNodeProps;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.cloud.ZkNodeProps: java.util.Map propMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }
}
