public abstract class org.apache.batik.parser.AbstractParser extends java.lang.Object implements org.apache.batik.parser.Parser
{
    public static final java.lang.String BUNDLE_CLASSNAME;
    protected org.apache.batik.parser.ErrorHandler errorHandler;
    protected org.apache.batik.i18n.LocalizableSupport localizableSupport;
    protected org.apache.batik.util.io.NormalizingReader reader;
    protected int current;
    static java.lang.Class class$org$apache$batik$parser$AbstractParser;

    public void <init>()
    {
        org.apache.batik.parser.DefaultErrorHandler $r1;
        org.apache.batik.parser.AbstractParser r0;
        java.lang.Class $r3, $r5;
        java.lang.ClassLoader $r4;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.batik.parser.DefaultErrorHandler;

        specialinvoke $r1.<org.apache.batik.parser.DefaultErrorHandler: void <init>()>();

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler> = $r1;

        $r2 = new org.apache.batik.i18n.LocalizableSupport;

        $r3 = <org.apache.batik.parser.AbstractParser: java.lang.Class class$org$apache$batik$parser$AbstractParser>;

        if $r3 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.parser.AbstractParser: java.lang.Class class$(java.lang.String)>("org.apache.batik.parser.AbstractParser");

        <org.apache.batik.parser.AbstractParser: java.lang.Class class$org$apache$batik$parser$AbstractParser> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.batik.parser.AbstractParser: java.lang.Class class$org$apache$batik$parser$AbstractParser>;

     label2:
        $r4 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.parser.resources.Messages", $r4);

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r2;

        return;
    }

    public int getCurrent()
    {
        int $i0;
        org.apache.batik.parser.AbstractParser r0;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        return $i0;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.batik.parser.AbstractParser r0;
        java.util.Locale r1;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        virtualinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.batik.parser.AbstractParser r0;
        java.util.Locale $r2;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r2 = virtualinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: java.util.Locale getLocale()>();

        return $r2;
    }

    public java.lang.String formatMessage(java.lang.String, java.lang.Object[]) throws java.util.MissingResourceException
    {
        java.lang.Object[] r2;
        org.apache.batik.parser.AbstractParser r0;
        java.lang.String r1, $r4;
        org.apache.batik.i18n.LocalizableSupport $r3;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.i18n.LocalizableSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public void setErrorHandler(org.apache.batik.parser.ErrorHandler)
    {
        org.apache.batik.parser.AbstractParser r0;
        org.apache.batik.parser.ErrorHandler r1;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r1 := @parameter0: org.apache.batik.parser.ErrorHandler;

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler> = r1;

        return;
    }

    public void parse(java.io.Reader) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r1;
        org.apache.batik.parser.AbstractParser r0;
        java.io.IOException $r3;
        java.io.Reader r2;
        java.lang.String $r6;
        org.apache.batik.parser.ParseException $r4;
        org.apache.batik.parser.ErrorHandler $r5;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r2 := @parameter0: java.io.Reader;

     label1:
        $r1 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r1.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.Reader)>(r2);

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader> = $r1;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void doParse()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        $r4 = new org.apache.batik.parser.ParseException;

        $r6 = virtualinvoke r0.<org.apache.batik.parser.AbstractParser: java.lang.String createErrorMessage(java.lang.String,java.lang.Object[])>("io.exception", null);

        specialinvoke $r4.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,java.lang.Exception)>($r6, $r3);

        interfaceinvoke $r5.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r4);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void parse(java.io.InputStream, java.lang.String) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StreamNormalizingReader $r1;
        java.io.IOException $r4;
        org.apache.batik.parser.ErrorHandler $r6;
        org.apache.batik.parser.AbstractParser r0;
        java.lang.String r3, $r7;
        java.io.InputStream r2;
        org.apache.batik.parser.ParseException $r5;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

     label1:
        $r1 = new org.apache.batik.util.io.StreamNormalizingReader;

        specialinvoke $r1.<org.apache.batik.util.io.StreamNormalizingReader: void <init>(java.io.InputStream,java.lang.String)>(r2, r3);

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader> = $r1;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void doParse()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        $r5 = new org.apache.batik.parser.ParseException;

        $r7 = virtualinvoke r0.<org.apache.batik.parser.AbstractParser: java.lang.String createErrorMessage(java.lang.String,java.lang.Object[])>("io.exception", null);

        specialinvoke $r5.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,java.lang.Exception)>($r7, $r4);

        interfaceinvoke $r6.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r5);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void parse(java.lang.String) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.util.io.StringNormalizingReader $r1;
        org.apache.batik.parser.AbstractParser r0;
        java.io.IOException $r3;
        java.lang.String r2, $r6;
        org.apache.batik.parser.ParseException $r4;
        org.apache.batik.parser.ErrorHandler $r5;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r2 := @parameter0: java.lang.String;

     label1:
        $r1 = new org.apache.batik.util.io.StringNormalizingReader;

        specialinvoke $r1.<org.apache.batik.util.io.StringNormalizingReader: void <init>(java.lang.String)>(r2);

        r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader> = $r1;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void doParse()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        $r4 = new org.apache.batik.parser.ParseException;

        $r6 = virtualinvoke r0.<org.apache.batik.parser.AbstractParser: java.lang.String createErrorMessage(java.lang.String,java.lang.Object[])>("io.exception", null);

        specialinvoke $r4.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,java.lang.Exception)>($r6, $r3);

        interfaceinvoke $r5.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r4);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected abstract void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException;

    protected void reportError(java.lang.String, java.lang.Object[]) throws org.apache.batik.parser.ParseException
    {
        java.lang.Object[] r3;
        org.apache.batik.util.io.NormalizingReader $r6, $r7;
        org.apache.batik.parser.ErrorHandler $r4;
        int $i0, $i1;
        org.apache.batik.parser.AbstractParser r0;
        java.lang.String r2, $r5;
        org.apache.batik.parser.ParseException $r1;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $r4 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.parser.ErrorHandler errorHandler>;

        $r1 = new org.apache.batik.parser.ParseException;

        $r5 = virtualinvoke r0.<org.apache.batik.parser.AbstractParser: java.lang.String createErrorMessage(java.lang.String,java.lang.Object[])>(r2, r3);

        $r6 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r6.<org.apache.batik.util.io.NormalizingReader: int getLine()>();

        $r7 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r7.<org.apache.batik.util.io.NormalizingReader: int getColumn()>();

        specialinvoke $r1.<org.apache.batik.parser.ParseException: void <init>(java.lang.String,int,int)>($r5, $i0, $i1);

        interfaceinvoke $r4.<org.apache.batik.parser.ErrorHandler: void error(org.apache.batik.parser.ParseException)>($r1);

        return;
    }

    protected void reportCharacterExpectedError(char, int)
    {
        java.lang.Object[] $r1;
        java.lang.Character $r2;
        int i1;
        org.apache.batik.parser.AbstractParser r0;
        char c0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = new java.lang.Character;

        specialinvoke $r2.<java.lang.Character: void <init>(char)>(c0);

        $r1[0] = $r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        $r1[1] = $r3;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportError(java.lang.String,java.lang.Object[])>("character.expected", $r1);

        return;
    }

    protected void reportUnexpectedCharacterError(int)
    {
        java.lang.Object[] $r1;
        int i0;
        org.apache.batik.parser.AbstractParser r0;
        java.lang.Integer $r2;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        $r1[0] = $r2;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportError(java.lang.String,java.lang.Object[])>("character.unexpected", $r1);

        return;
    }

    protected java.lang.String createErrorMessage(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.apache.batik.parser.AbstractParser r0;
        java.util.MissingResourceException $r4;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.parser.AbstractParser: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r3;

     label2:
        $r4 := @caughtexception;

        return r1;

        catch java.util.MissingResourceException from label1 to label2 with label2;
    }

    protected java.lang.String getBundleClassName()
    {
        org.apache.batik.parser.AbstractParser r0;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        return "org.apache.batik.parser.resources.Messages";
    }

    protected void skipSpaces() throws java.io.IOException
    {
        int $i0, $i1;
        org.apache.batik.parser.AbstractParser r0;
        org.apache.batik.util.io.NormalizingReader $r1;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i0)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 32: goto label3;
            default: goto label2;
        };

     label2:
        return;

     label3:
        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i1;

        goto label1;
    }

    protected void skipCommaSpaces() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3;
        org.apache.batik.parser.AbstractParser r0;
        org.apache.batik.util.io.NormalizingReader $r1, $r2;

        r0 := @this: org.apache.batik.parser.AbstractParser;

        goto label1;

     label1:
        $i0 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        lookupswitch($i0)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 32: goto label3;
            default: goto label2;
        };

     label2:
        goto label4;

     label3:
        $r1 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i1;

        goto label1;

     label4:
        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        if $i2 != 44 goto label8;

        goto label5;

     label5:
        $r2 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i3 = virtualinvoke $r2.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i3;

        lookupswitch($i3)
        {
            case 9: goto label7;
            case 10: goto label7;
            case 13: goto label7;
            case 32: goto label7;
            default: goto label6;
        };

     label6:
        goto label8;

     label7:
        goto label5;

     label8:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.parser.AbstractParser: java.lang.String BUNDLE_CLASSNAME> = "org.apache.batik.parser.resources.Messages";

        return;
    }
}
