final class org.springframework.core.convert.support.CollectionToStringConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{
    private static final java.lang.String DELIMITER;
    private final org.springframework.core.convert.ConversionService conversionService;

    public void <init>(org.springframework.core.convert.ConversionService)
    {
        org.springframework.core.convert.ConversionService r1;
        org.springframework.core.convert.support.CollectionToStringConverter r0;

        r0 := @this: org.springframework.core.convert.support.CollectionToStringConverter;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.support.CollectionToStringConverter: org.springframework.core.convert.ConversionService conversionService> = r1;

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.CollectionToStringConverter r2;

        r2 := @this: org.springframework.core.convert.support.CollectionToStringConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/util/Collection;", class "Ljava/lang/String;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r0, $r1, r2;
        org.springframework.core.convert.ConversionService $r4;
        org.springframework.core.convert.support.CollectionToStringConverter r3;
        boolean $z0;

        r3 := @this: org.springframework.core.convert.support.CollectionToStringConverter;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r4 = r3.<org.springframework.core.convert.support.CollectionToStringConverter: org.springframework.core.convert.ConversionService conversionService>;

        $z0 = staticinvoke <org.springframework.core.convert.support.ConversionUtils: boolean canConvertElements(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.ConversionService)>($r1, r2, $r4);

        return $z0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        java.util.Iterator $r3;
        java.util.Collection r1;
        org.springframework.core.convert.TypeDescriptor r6, $r8, r9;
        int $i0, i1;
        java.lang.Object r0, $r4, $r10;
        java.lang.StringBuilder $r2;
        java.lang.String $r11;
        org.springframework.core.convert.ConversionService $r7;
        org.springframework.core.convert.support.CollectionToStringConverter r5;
        boolean $z0;

        r5 := @this: org.springframework.core.convert.support.CollectionToStringConverter;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r9 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = (java.util.Collection) r0;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label5;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if i1 <= 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        $r7 = r5.<org.springframework.core.convert.support.CollectionToStringConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r8 = virtualinvoke r6.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor(java.lang.Object)>($r4);

        $r10 = interfaceinvoke $r7.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r4, $r8, r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        i1 = i1 + 1;

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static void <clinit>()
    {
        <org.springframework.core.convert.support.CollectionToStringConverter: java.lang.String DELIMITER> = ",";

        return;
    }
}
