final class com.mycila.inject.internal.BytecodeGen extends java.lang.Object
{
    private static final java.lang.ClassLoader MYCILA_CLASS_LOADER;
    private static final java.lang.String MYCILA_INTERNAL_PACKAGE;
    private static final java.lang.String CGLIB_PACKAGE;
    private static final com.mycila.inject.internal.cglib.core.NamingPolicy NAMING_POLICY;
    private static final java.util.Map CLASS_LOADER_CACHE;

    void <init>()
    {
        com.mycila.inject.internal.BytecodeGen r0;

        r0 := @this: com.mycila.inject.internal.BytecodeGen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.ClassLoader canonicalize(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, $r2;
        com.mycila.inject.internal.BytecodeGen$BridgeClassLoader $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 == null goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r1 = <com.mycila.inject.internal.BytecodeGen$SystemBridgeHolder: com.mycila.inject.internal.BytecodeGen$BridgeClassLoader SYSTEM_BRIDGE>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.BytecodeGen$BridgeClassLoader: java.lang.ClassLoader getParent()>();

     label2:
        return $r2;
    }

    public static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    private static java.lang.ClassLoader getClassLoader(java.lang.Class, java.lang.ClassLoader)
    {
        java.util.Map $r9;
        java.lang.String $r1;
        boolean $z0, $z1;
        com.mycila.inject.internal.BytecodeGen$Visibility $r4, $r5;
        java.lang.Class r0;
        java.lang.Object $r10;
        java.lang.ClassLoader $r2, $r3, $r7, $r11, $r12, r13;
        com.mycila.inject.internal.BytecodeGen$BridgeClassLoader $r6, $r8;

        r0 := @parameter0: java.lang.Class;

        r13 := @parameter1: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 == 0 goto label1;

        $r12 = <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader MYCILA_CLASS_LOADER>;

        return $r12;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader canonicalize(java.lang.ClassLoader)>(r13);

        $r3 = <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader MYCILA_CLASS_LOADER>;

        if $r2 == $r3 goto label2;

        $z1 = $r2 instanceof com.mycila.inject.internal.BytecodeGen$BridgeClassLoader;

        if $z1 == 0 goto label3;

     label2:
        return $r2;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.BytecodeGen$Visibility: com.mycila.inject.internal.BytecodeGen$Visibility forType(java.lang.Class)>(r0);

        $r5 = <com.mycila.inject.internal.BytecodeGen$Visibility: com.mycila.inject.internal.BytecodeGen$Visibility PUBLIC>;

        if $r4 != $r5 goto label5;

        $r6 = <com.mycila.inject.internal.BytecodeGen$SystemBridgeHolder: com.mycila.inject.internal.BytecodeGen$BridgeClassLoader SYSTEM_BRIDGE>;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.BytecodeGen$BridgeClassLoader: java.lang.ClassLoader getParent()>();

        if $r2 == $r7 goto label4;

        $r9 = <com.mycila.inject.internal.BytecodeGen: java.util.Map CLASS_LOADER_CACHE>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r11 = (java.lang.ClassLoader) $r10;

        return $r11;

     label4:
        $r8 = <com.mycila.inject.internal.BytecodeGen$SystemBridgeHolder: com.mycila.inject.internal.BytecodeGen$BridgeClassLoader SYSTEM_BRIDGE>;

        return $r8;

     label5:
        return $r2;
    }

    public static com.mycila.inject.internal.cglib.reflect.FastClass newFastClass(java.lang.Class, com.mycila.inject.internal.BytecodeGen$Visibility)
    {
        com.mycila.inject.internal.BytecodeGen$Visibility r2, $r3;
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.reflect.FastClass $r5;
        java.lang.ClassLoader $r6;
        com.mycila.inject.internal.cglib.reflect.FastClass$Generator $r0;
        com.mycila.inject.internal.cglib.core.NamingPolicy $r4;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.mycila.inject.internal.BytecodeGen$Visibility;

        $r0 = new com.mycila.inject.internal.cglib.reflect.FastClass$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setType(java.lang.Class)>(r1);

        $r3 = <com.mycila.inject.internal.BytecodeGen$Visibility: com.mycila.inject.internal.BytecodeGen$Visibility PUBLIC>;

        if r2 != $r3 goto label1;

        $r6 = staticinvoke <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setClassLoader(java.lang.ClassLoader)>($r6);

     label1:
        $r4 = <com.mycila.inject.internal.BytecodeGen: com.mycila.inject.internal.cglib.core.NamingPolicy NAMING_POLICY>;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setNamingPolicy(com.mycila.inject.internal.cglib.core.NamingPolicy)>($r4);

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: com.mycila.inject.internal.cglib.reflect.FastClass create()>();

        return $r5;
    }

    public static com.mycila.inject.internal.cglib.proxy.Enhancer newEnhancer(java.lang.Class, com.mycila.inject.internal.BytecodeGen$Visibility)
    {
        com.mycila.inject.internal.BytecodeGen$Visibility r2, $r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer $r0;
        java.lang.Class r1;
        java.lang.ClassLoader $r5;
        com.mycila.inject.internal.cglib.core.NamingPolicy $r4;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.mycila.inject.internal.BytecodeGen$Visibility;

        $r0 = new com.mycila.inject.internal.cglib.proxy.Enhancer;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setSuperclass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setUseFactory(boolean)>(0);

        $r3 = <com.mycila.inject.internal.BytecodeGen$Visibility: com.mycila.inject.internal.BytecodeGen$Visibility PUBLIC>;

        if r2 != $r3 goto label1;

        $r5 = staticinvoke <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setClassLoader(java.lang.ClassLoader)>($r5);

     label1:
        $r4 = <com.mycila.inject.internal.BytecodeGen: com.mycila.inject.internal.cglib.core.NamingPolicy NAMING_POLICY>;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setNamingPolicy(com.mycila.inject.internal.cglib.core.NamingPolicy)>($r4);

        return $r0;
    }

    static java.lang.String access$100()
    {
        java.lang.String $r0;

        $r0 = <com.mycila.inject.internal.BytecodeGen: java.lang.String MYCILA_INTERNAL_PACKAGE>;

        return $r0;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <com.mycila.inject.internal.BytecodeGen: java.lang.String CGLIB_PACKAGE>;

        return $r0;
    }

    static java.lang.ClassLoader access$300()
    {
        java.lang.ClassLoader $r0;

        $r0 = <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader MYCILA_CLASS_LOADER>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.BytecodeGen$2 $r13;
        com.mycila.inject.internal.BytecodeGen$1 $r9;
        java.util.concurrent.ConcurrentMap $r14;
        com.mycila.inject.internal.guava.collect.MapMaker $r10, $r11, $r12;
        java.lang.Class $r0, $r3, $r6;
        java.lang.ClassLoader $r1, $r2;
        java.lang.String $r4, $r5, $r7, $r8;

        $r0 = class "Lcom/mycila/inject/internal/BytecodeGen;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader canonicalize(java.lang.ClassLoader)>($r1);

        <com.mycila.inject.internal.BytecodeGen: java.lang.ClassLoader MYCILA_CLASS_LOADER> = $r2;

        $r3 = class "Lcom/mycila/inject/internal/BytecodeGen;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\.internal\\..*$", ".internal");

        <com.mycila.inject.internal.BytecodeGen: java.lang.String MYCILA_INTERNAL_PACKAGE> = $r5;

        $r6 = class "Lcom/mycila/inject/internal/cglib/proxy/Enhancer;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\.cglib\\..*$", ".cglib");

        <com.mycila.inject.internal.BytecodeGen: java.lang.String CGLIB_PACKAGE> = $r8;

        $r9 = new com.mycila.inject.internal.BytecodeGen$1;

        specialinvoke $r9.<com.mycila.inject.internal.BytecodeGen$1: void <init>()>();

        <com.mycila.inject.internal.BytecodeGen: com.mycila.inject.internal.cglib.core.NamingPolicy NAMING_POLICY> = $r9;

        $r10 = new com.mycila.inject.internal.guava.collect.MapMaker;

        specialinvoke $r10.<com.mycila.inject.internal.guava.collect.MapMaker: void <init>()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.MapMaker: com.mycila.inject.internal.guava.collect.MapMaker weakKeys()>();

        $r12 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.MapMaker: com.mycila.inject.internal.guava.collect.MapMaker weakValues()>();

        $r13 = new com.mycila.inject.internal.BytecodeGen$2;

        specialinvoke $r13.<com.mycila.inject.internal.BytecodeGen$2: void <init>()>();

        $r14 = virtualinvoke $r12.<com.mycila.inject.internal.guava.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.mycila.inject.internal.guava.base.Function)>($r13);

        <com.mycila.inject.internal.BytecodeGen: java.util.Map CLASS_LOADER_CACHE> = $r14;

        return;
    }
}
