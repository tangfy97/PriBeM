public class org.waveprotocol.wave.client.editor.content.img.ImgDoodad extends java.lang.Object
{
    private static java.lang.String TAGNAME;
    private static org.waveprotocol.wave.model.util.ReadableStringSet PERMITTED_ATTRIBUTES;
    private static org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer RENDERER;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.content.img.ImgDoodad r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.img.ImgDoodad;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer $r1;
        java.lang.String $r2, $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r4;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r2 = <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: java.lang.String TAGNAME>;

        $r1 = <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer RENDERER>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderingMutationHandler(java.lang.String,org.waveprotocol.wave.client.editor.RenderingMutationHandler)>($r2, $r1);

        $r3 = <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: java.lang.String TAGNAME>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: org.waveprotocol.wave.client.editor.NodeEventHandler get()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerEventHandler(java.lang.String,org.waveprotocol.wave.client.editor.NodeEventHandler)>($r3, $r4);

        return;
    }

    static org.waveprotocol.wave.model.util.ReadableStringSet access$100()
    {
        org.waveprotocol.wave.model.util.ReadableStringSet $r0;

        $r0 = <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: org.waveprotocol.wave.model.util.ReadableStringSet PERMITTED_ATTRIBUTES>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer $r2;

        <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: java.lang.String TAGNAME> = "img";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "alt";

        $r0[1] = "height";

        $r0[2] = "width";

        $r0[3] = "src";

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r0);

        <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: org.waveprotocol.wave.model.util.ReadableStringSet PERMITTED_ATTRIBUTES> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer: void <init>(org.waveprotocol.wave.client.editor.content.img.ImgDoodad$1)>(null);

        <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: org.waveprotocol.wave.client.editor.content.img.ImgDoodad$ImgRenderer RENDERER> = $r2;

        return;
    }
}
