public abstract class org.apache.batik.dom.AbstractEntity extends org.apache.batik.dom.AbstractParentNode implements org.w3c.dom.Entity
{
    protected java.lang.String nodeName;
    protected java.lang.String publicId;
    protected java.lang.String systemId;

    public void <init>()
    {
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void <init>()>();

        return;
    }

    public short getNodeType()
    {
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        return 6;
    }

    public void setNodeName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName> = r1;

        return;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        $r1 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName>;

        return $r1;
    }

    public java.lang.String getPublicId()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        $r1 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId>;

        return $r1;
    }

    public void setPublicId(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId> = r1;

        return;
    }

    public java.lang.String getSystemId()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        $r1 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId>;

        return $r1;
    }

    public void setSystemId(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId> = r1;

        return;
    }

    public java.lang.String getNotationName()
    {
        java.lang.String $r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractEntity: java.lang.String getNodeName()>();

        return $r1;
    }

    public void setNotationName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractEntity: void setNodeName(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getInputEncoding()
    {
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        return null;
    }

    public java.lang.String getXmlEncoding()
    {
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        return null;
    }

    public java.lang.String getXmlVersion()
    {
        org.apache.batik.dom.AbstractEntity r0;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        return null;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractEntity r0, r3;
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4, $r5, $r6;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractEntity) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName> = $r4;

        $r5 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId> = $r5;

        $r6 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId> = $r6;

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractEntity r0, r3;
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4, $r5, $r6;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractEntity) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName> = $r4;

        $r5 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId> = $r5;

        $r6 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId>;

        r3.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId> = $r6;

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractEntity r0, r2;
        org.w3c.dom.Node r1;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractEntity) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName> = $r3;

        $r4 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId> = $r4;

        $r5 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId> = $r5;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractEntity r0, r2;
        org.w3c.dom.Node r1;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.apache.batik.dom.AbstractEntity;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractEntity) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String nodeName> = $r3;

        $r4 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String publicId> = $r4;

        $r5 = r0.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId>;

        r2.<org.apache.batik.dom.AbstractEntity: java.lang.String systemId> = $r5;

        return r1;
    }

    protected void checkChildType(org.w3c.dom.Node, boolean)
    {
        java.lang.Object[] $r2;
        java.lang.Integer $r8, $r9;
        short $s0, $s1, $s2;
        org.apache.batik.dom.AbstractEntity r1;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r7;
        int $i3, $i4, $i5;
        java.lang.String $r4, $r6;
        boolean z0;

        r1 := @this: org.apache.batik.dom.AbstractEntity;

        r0 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[4];

        $r8 = new java.lang.Integer;

        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractEntity: short getNodeType()>();

        $i4 = (int) $s1;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i4);

        $r2[0] = $r8;

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractEntity: java.lang.String getNodeName()>();

        $r2[1] = $r4;

        $r9 = new java.lang.Integer;

        $s2 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s2;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i5);

        $r2[2] = $r9;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r2[3] = $r6;

        $r7 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "child.type", $r2);

        throw $r7;

     label3:
        return;
    }
}
