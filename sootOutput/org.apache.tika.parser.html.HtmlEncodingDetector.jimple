public class org.apache.tika.parser.html.HtmlEncodingDetector extends java.lang.Object implements org.apache.tika.detect.EncodingDetector
{
    private static final int META_TAG_BUFFER_SIZE;
    private static final java.util.regex.Pattern HTTP_META_PATTERN;
    private static final java.util.regex.Pattern FLEXIBLE_CHARSET_ATTR_PATTERN;
    private static final java.nio.charset.Charset ASCII;

    public void <init>()
    {
        org.apache.tika.parser.html.HtmlEncodingDetector r0;

        r0 := @this: org.apache.tika.parser.html.HtmlEncodingDetector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.nio.charset.Charset detect(java.io.InputStream, org.apache.tika.metadata.Metadata) throws java.io.IOException
    {
        byte[] r1;
        java.nio.ByteBuffer $r3;
        org.apache.tika.metadata.Metadata r15;
        java.util.regex.Matcher $r7, $r9;
        java.nio.charset.Charset $r2, $r12;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String $r5, $r10, $r11;
        boolean $z0, $z1, $z2;
        java.nio.CharBuffer $r4;
        java.lang.Exception $r13;
        java.util.regex.Pattern $r6, $r8;
        org.apache.tika.parser.html.HtmlEncodingDetector r14;
        java.io.InputStream r0;

        r14 := @this: org.apache.tika.parser.html.HtmlEncodingDetector;

        r0 := @parameter0: java.io.InputStream;

        r15 := @parameter1: org.apache.tika.metadata.Metadata;

        if r0 != null goto label01;

        return null;

     label01:
        virtualinvoke r0.<java.io.InputStream: void mark(int)>(8192);

        r1 = newarray (byte)[8192];

        i3 = 0;

        i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r1);

     label02:
        $i6 = (int) -1;

        if i4 == $i6 goto label03;

        $i0 = lengthof r1;

        if i3 >= $i0 goto label03;

        i3 = i3 + i4;

        $i1 = lengthof r1;

        $i2 = $i1 - i3;

        i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i2);

        goto label02;

     label03:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $r2 = <org.apache.tika.parser.html.HtmlEncodingDetector: java.nio.charset.Charset ASCII>;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, 0, i3);

        $r4 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r3);

        $r5 = virtualinvoke $r4.<java.nio.CharBuffer: java.lang.String toString()>();

        $r6 = <org.apache.tika.parser.html.HtmlEncodingDetector: java.util.regex.Pattern HTTP_META_PATTERN>;

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        $r8 = <org.apache.tika.parser.html.HtmlEncodingDetector: java.util.regex.Pattern FLEXIBLE_CHARSET_ATTR_PATTERN>;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("");

     label04:
        $z2 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label11;

        $r10 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke $r9.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>($r10);

     label05:
        $z0 = virtualinvoke $r9.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label10;

        $r11 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z1 = staticinvoke <org.apache.tika.utils.CharsetUtils: boolean isSupported(java.lang.String)>($r11);

        if $z1 == 0 goto label09;

     label06:
        $r12 = staticinvoke <org.apache.tika.utils.CharsetUtils: java.nio.charset.Charset forName(java.lang.String)>($r11);

     label07:
        return $r12;

     label08:
        $r13 := @caughtexception;

     label09:
        goto label05;

     label10:
        goto label04;

     label11:
        return null;

        catch java.lang.Exception from label06 to label07 with label08;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;
        java.nio.charset.Charset $r2;

        <org.apache.tika.parser.html.HtmlEncodingDetector: int META_TAG_BUFFER_SIZE> = 8192;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?is)<\\s*meta\\s+([^<>]+)");

        <org.apache.tika.parser.html.HtmlEncodingDetector: java.util.regex.Pattern HTTP_META_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?is)charset\\s*=\\s*(?:[\'\\\"]\\s*)?([-_:\\.a-z0-9]+)");

        <org.apache.tika.parser.html.HtmlEncodingDetector: java.util.regex.Pattern FLEXIBLE_CHARSET_ATTR_PATTERN> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.tika.parser.html.HtmlEncodingDetector: java.nio.charset.Charset ASCII> = $r2;

        return;
    }
}
