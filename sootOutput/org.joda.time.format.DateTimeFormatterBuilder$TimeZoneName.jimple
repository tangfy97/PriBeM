class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName extends java.lang.Object implements org.joda.time.format.DateTimePrinter
{
    static final int LONG_NAME;
    static final int SHORT_NAME;
    static final int ID;
    private final int iType;

    void <init>(int)
    {
        int i0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType> = i0;

        return;
    }

    public int estimatePrintedLength()
    {
        int $i0;
        byte $b1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>;

        if $i0 != 1 goto label1;

        $b1 = 4;

        goto label2;

     label1:
        $b1 = 20;

     label2:
        return $b1;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r2;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r1;
        org.joda.time.Chronology r5;
        long l0, $l2, $l3;
        java.lang.StringBuffer r0;
        java.util.Locale r3;
        int i1;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r2 := @parameter4: org.joda.time.DateTimeZone;

        r3 := @parameter5: java.util.Locale;

        $l2 = (long) i1;

        $l3 = l0 - $l2;

        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>($l3, r2, r3);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        return;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r2;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r1;
        org.joda.time.Chronology r5;
        long l0, $l2, $l3;
        java.util.Locale r3;
        java.io.Writer r0;
        int i1;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        r0 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r5 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r2 := @parameter4: org.joda.time.DateTimeZone;

        r3 := @parameter5: java.util.Locale;

        $l2 = (long) i1;

        $l3 = l0 - $l2;

        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>($l3, r2, r3);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r4);

        return;
    }

    private java.lang.String print(long, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r1;
        long l1;
        java.util.Locale r3;
        int $i0;
        java.lang.String $r2, $r4, $r5;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        l1 := @parameter0: long;

        r0 := @parameter1: org.joda.time.DateTimeZone;

        r3 := @parameter2: java.util.Locale;

        if r0 != null goto label1;

        return "";

     label1:
        $i0 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        $r5 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>(l1, r3);

        return $r5;

     label3:
        $r4 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l1, r3);

        return $r4;

     label4:
        $r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        return $r2;

     label5:
        return "";
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        java.lang.StringBuffer r1;
        java.util.Locale r3;
        org.joda.time.ReadablePartial r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName r0;
        java.util.Locale r3;
        java.io.Writer r1;
        org.joda.time.ReadablePartial r2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public static void <clinit>()
    {
        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int ID> = 2;

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int SHORT_NAME> = 1;

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int LONG_NAME> = 0;

        return;
    }
}
