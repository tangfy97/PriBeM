public class org.apache.velocity.runtime.VelocimacroManager extends java.lang.Object
{
    private static java.lang.String GLOBAL_NAMESPACE;
    private boolean registerFromLib;
    private final java.util.Map namespaceHash;
    private final java.util.Map globalNamespace;
    private final java.util.Set libraries;
    private org.apache.velocity.runtime.RuntimeServices rsvc;
    private boolean namespacesOn;
    private boolean inlineLocalMode;
    private boolean inlineReplacesGlobal;

    void <init>(org.apache.velocity.runtime.RuntimeServices)
    {
        java.util.HashSet $r2;
        org.apache.velocity.runtime.RuntimeServices r6;
        java.util.Map $r1, $r5;
        java.util.Set $r3;
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String $r4;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r6 := @parameter0: org.apache.velocity.runtime.RuntimeServices;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean registerFromLib> = 0;

        $r1 = staticinvoke <org.apache.velocity.util.MapFactory: java.util.Map create(int,float,int,boolean)>(17, 0.5F, 20, 0);

        r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map namespaceHash> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r2);

        r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Set libraries> = $r3;

        r0.<org.apache.velocity.runtime.VelocimacroManager: org.apache.velocity.runtime.RuntimeServices rsvc> = null;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean namespacesOn> = 1;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineLocalMode> = 0;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineReplacesGlobal> = 0;

        $r4 = <org.apache.velocity.runtime.VelocimacroManager: java.lang.String GLOBAL_NAMESPACE>;

        $r5 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map addNamespace(java.lang.String)>($r4);

        r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map globalNamespace> = $r5;

        r0.<org.apache.velocity.runtime.VelocimacroManager: org.apache.velocity.runtime.RuntimeServices rsvc> = r6;

        return;
    }

    public boolean addVM(java.lang.String, org.apache.velocity.runtime.parser.node.Node, java.lang.String[], java.lang.String, boolean)
    {
        java.lang.String[] r3;
        org.apache.velocity.runtime.RuntimeServices $r6;
        java.lang.StringBuffer $r15, $r16, $r17, $r18, $r19;
        java.util.Map $r7, $r11, $r12;
        java.lang.String r2, r4, $r20;
        org.apache.velocity.runtime.parser.node.Node r0;
        org.apache.velocity.exception.VelocityException $r14;
        org.apache.velocity.runtime.VelocimacroManager$MacroEntry $r1, r9;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.util.Set $r10, $r13;
        java.lang.Object $r8;
        org.apache.velocity.runtime.VelocimacroManager r5;

        r5 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.velocity.runtime.parser.node.Node;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        z4 := @parameter4: boolean;

        if r0 != null goto label1;

        $r14 = new org.apache.velocity.exception.VelocityException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Null AST for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label1:
        $r1 = new org.apache.velocity.runtime.VelocimacroManager$MacroEntry;

        $r6 = r5.<org.apache.velocity.runtime.VelocimacroManager: org.apache.velocity.runtime.RuntimeServices rsvc>;

        specialinvoke $r1.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: void <init>(java.lang.String,org.apache.velocity.runtime.parser.node.Node,java.lang.String[],java.lang.String,org.apache.velocity.runtime.RuntimeServices,org.apache.velocity.runtime.VelocimacroManager$1)>(r2, r0, r3, r4, $r6, null);

        $z0 = r5.<org.apache.velocity.runtime.VelocimacroManager: boolean registerFromLib>;

        virtualinvoke $r1.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: void setFromLibrary(boolean)>($z0);

        z5 = 1;

        $r7 = r5.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map globalNamespace>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r9 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r8;

        $z1 = r5.<org.apache.velocity.runtime.VelocimacroManager: boolean registerFromLib>;

        if $z1 == 0 goto label2;

        $r13 = r5.<org.apache.velocity.runtime.VelocimacroManager: java.util.Set libraries>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label3;

     label2:
        $r10 = r5.<org.apache.velocity.runtime.VelocimacroManager: java.util.Set libraries>;

        z5 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r4);

     label3:
        if z5 != 0 goto label4;

        $z3 = specialinvoke r5.<org.apache.velocity.runtime.VelocimacroManager: boolean usingNamespaces(java.lang.String)>(r4);

        if $z3 == 0 goto label4;

        $r12 = specialinvoke r5.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map getNamespace(java.lang.String,boolean)>(r4, 1);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r1);

        return 1;

     label4:
        if r9 == null goto label5;

        $z2 = virtualinvoke r9.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: boolean getFromLibrary()>();

        virtualinvoke $r1.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: void setFromLibrary(boolean)>($z2);

     label5:
        $r11 = r5.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map globalNamespace>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r1);

        return 1;
    }

    public org.apache.velocity.runtime.directive.VelocimacroProxy get(java.lang.String, java.lang.String)
    {
        org.apache.velocity.runtime.directive.VelocimacroProxy $r3;
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: org.apache.velocity.runtime.directive.VelocimacroProxy get(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public org.apache.velocity.runtime.directive.VelocimacroProxy get(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Map $r4, $r8, $r13;
        java.lang.String r1, r2, r7;
        org.apache.velocity.runtime.VelocimacroManager$MacroEntry r11, r12, $r15;
        boolean $z0, $z1;
        org.apache.velocity.runtime.directive.VelocimacroProxy $r3, $r6, $r10;
        java.lang.Object $r5, $r9, $r14;
        org.apache.velocity.runtime.VelocimacroManager r0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $z0 = r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineReplacesGlobal>;

        if $z0 == 0 goto label1;

        if r7 == null goto label1;

        $r8 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map getNamespace(java.lang.String,boolean)>(r7, 0);

        if $r8 == null goto label1;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r11 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r9;

        if r11 == null goto label1;

        $r10 = virtualinvoke r11.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: org.apache.velocity.runtime.directive.VelocimacroProxy getProxy(java.lang.String)>(r1);

        return $r10;

     label1:
        $z1 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: boolean usingNamespaces(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        $r4 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map getNamespace(java.lang.String,boolean)>(r1, 0);

        if $r4 == null goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r12 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r5;

        if r12 == null goto label2;

        $r6 = virtualinvoke r12.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: org.apache.velocity.runtime.directive.VelocimacroProxy getProxy(java.lang.String)>(r1);

        return $r6;

     label2:
        $r13 = r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map globalNamespace>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r15 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r14;

        if $r15 == null goto label3;

        $r3 = virtualinvoke $r15.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: org.apache.velocity.runtime.directive.VelocimacroProxy getProxy(java.lang.String)>(r1);

        return $r3;

     label3:
        return null;
    }

    public boolean dumpNamespace(java.lang.String)
    {
        java.lang.Throwable $r5;
        java.util.Map $r2, r4;
        java.lang.Object $r3;
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: boolean usingNamespaces(java.lang.String)>(r1);

        if $z0 == 0 goto label7;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map namespaceHash>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r3;

        if r4 != null goto label3;

        exitmonitor r0;

     label2:
        return 0;

     label3:
        interfaceinvoke r4.<java.util.Map: void clear()>();

        exitmonitor r0;

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r5;

     label7:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setNamespaceUsage(boolean)
    {
        org.apache.velocity.runtime.VelocimacroManager r0;
        boolean z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        z0 := @parameter0: boolean;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean namespacesOn> = z0;

        return;
    }

    public void setRegisterFromLib(boolean)
    {
        org.apache.velocity.runtime.VelocimacroManager r0;
        boolean z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        z0 := @parameter0: boolean;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean registerFromLib> = z0;

        return;
    }

    public void setTemplateLocalInlineVM(boolean)
    {
        org.apache.velocity.runtime.VelocimacroManager r0;
        boolean z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        z0 := @parameter0: boolean;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineLocalMode> = z0;

        return;
    }

    private java.util.Map getNamespace(java.lang.String, boolean)
    {
        java.util.Map $r2, r4;
        java.lang.Object $r3;
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map namespaceHash>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r3;

        if r4 != null goto label1;

        if z0 == 0 goto label1;

        r4 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map addNamespace(java.lang.String)>(r1);

     label1:
        return r4;
    }

    private java.util.Map addNamespace(java.lang.String)
    {
        java.util.Map $r0, $r3, $r5;
        java.lang.Object $r4;
        org.apache.velocity.runtime.VelocimacroManager r1;
        java.lang.String r2;

        r1 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.velocity.util.MapFactory: java.util.Map create(int,float,int,boolean)>(17, 0.5F, 20, 0);

        $r3 = r1.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map namespaceHash>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

        if $r4 == null goto label1;

        $r5 = r1.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map namespaceHash>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return null;

     label1:
        return $r0;
    }

    private boolean usingNamespaces(java.lang.String)
    {
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.velocity.runtime.VelocimacroManager: boolean namespacesOn>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineLocalMode>;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.String getLibraryName(java.lang.String, java.lang.String)
    {
        java.util.Map $r4, $r7;
        java.lang.Object $r5, $r8;
        org.apache.velocity.runtime.VelocimacroManager r0;
        java.lang.String r1, r2, $r3;
        org.apache.velocity.runtime.VelocimacroManager$MacroEntry r6, $r9;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: boolean usingNamespaces(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map getNamespace(java.lang.String,boolean)>(r1, 0);

        if $r4 == null goto label1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r5;

        if r6 == null goto label1;

        return null;

     label1:
        $r7 = r0.<org.apache.velocity.runtime.VelocimacroManager: java.util.Map globalNamespace>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r9 = (org.apache.velocity.runtime.VelocimacroManager$MacroEntry) $r8;

        if $r9 == null goto label2;

        $r3 = virtualinvoke $r9.<org.apache.velocity.runtime.VelocimacroManager$MacroEntry: java.lang.String getSourceTemplate()>();

        return $r3;

     label2:
        return null;
    }

    public void setInlineReplacesGlobal(boolean)
    {
        org.apache.velocity.runtime.VelocimacroManager r0;
        boolean z0;

        r0 := @this: org.apache.velocity.runtime.VelocimacroManager;

        z0 := @parameter0: boolean;

        r0.<org.apache.velocity.runtime.VelocimacroManager: boolean inlineReplacesGlobal> = z0;

        return;
    }

    static void <clinit>()
    {
        <org.apache.velocity.runtime.VelocimacroManager: java.lang.String GLOBAL_NAMESPACE> = "";

        return;
    }
}
