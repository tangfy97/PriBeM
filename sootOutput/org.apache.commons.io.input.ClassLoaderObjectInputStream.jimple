public class org.apache.commons.io.input.ClassLoaderObjectInputStream extends java.io.ObjectInputStream
{
    private final java.lang.ClassLoader classLoader;

    public void <init>(java.lang.ClassLoader, java.io.InputStream) throws java.io.IOException, java.io.StreamCorruptedException
    {
        java.lang.ClassLoader r2;
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        r2 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader> = r2;

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class $r4, $r5;
        java.lang.String $r1;
        java.lang.ClassLoader $r3;
        org.apache.commons.io.input.ClassLoaderObjectInputStream r2;

        r2 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        r0 := @parameter0: java.io.ObjectStreamClass;

        $r1 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r3 = r2.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r5 = specialinvoke r2.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r0);

        return $r5;
    }

    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Class[] r1;
        java.lang.String[] r0;
        java.lang.IllegalArgumentException $r8;
        int $i0, $i1, i2;
        java.lang.Class $r4, $r7, $r9;
        java.lang.ClassLoader $r3, $r5;
        java.lang.String $r6;
        org.apache.commons.io.input.ClassLoaderObjectInputStream r2;

        r2 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r6 = r0[i2];

        $r5 = r2.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r6, 0, $r5);

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r2.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r3, r1);

     label3:
        return $r4;

     label4:
        $r8 := @caughtexception;

        $r9 = specialinvoke r2.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(r0);

        return $r9;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }
}
