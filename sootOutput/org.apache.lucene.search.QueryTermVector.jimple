public class org.apache.lucene.search.QueryTermVector extends java.lang.Object implements org.apache.lucene.index.TermFreqVector
{
    private java.lang.String[] terms;
    private int[] termFreqs;

    public java.lang.String getField()
    {
        org.apache.lucene.search.QueryTermVector r0;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        return null;
    }

    public void <init>(java.lang.String[])
    {
        org.apache.lucene.search.QueryTermVector r0;
        int[] $r2;
        java.lang.String[] $r1, r3;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        r3 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms> = $r1;

        $r2 = newarray (int)[0];

        r0.<org.apache.lucene.search.QueryTermVector: int[] termFreqs> = $r2;

        specialinvoke r0.<org.apache.lucene.search.QueryTermVector: void processTerms(java.lang.String[])>(r3);

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        java.lang.Object[] $r10;
        java.lang.String[] $r1, $r9, $r11;
        java.util.ArrayList $r6;
        int[] $r2;
        int $i0;
        java.lang.String r5, $r12;
        boolean z0;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r8;
        org.apache.lucene.analysis.TokenStream r15;
        org.apache.lucene.analysis.Analyzer r3;
        java.io.IOException $r13, $r14;
        org.apache.lucene.search.QueryTermVector r0;
        java.io.StringReader $r4;
        org.apache.lucene.util.Attribute $r7;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        r5 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms> = $r1;

        $r2 = newarray (int)[0];

        r0.<org.apache.lucene.search.QueryTermVector: int[] termFreqs> = $r2;

        if r3 == null goto label10;

     label01:
        $r4 = new java.io.StringReader;

        specialinvoke $r4.<java.io.StringReader: void <init>(java.lang.String)>(r5);

        r15 = virtualinvoke r3.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader)>("", $r4);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        r15 = null;

     label04:
        if r15 == null goto label10;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

     label05:
        virtualinvoke r15.<org.apache.lucene.analysis.TokenStream: void reset()>();

        $r7 = virtualinvoke r15.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        r8 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r7;

        z0 = virtualinvoke r15.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

     label06:
        if z0 == 0 goto label07;

        $r12 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

        z0 = virtualinvoke r15.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        goto label06;

     label07:
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r9 = newarray (java.lang.String)[$i0];

        $r10 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        specialinvoke r0.<org.apache.lucene.search.QueryTermVector: void processTerms(java.lang.String[])>($r11);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label08 with label09;
    }

    private void processTerms(java.lang.String[])
    {
        java.lang.Integer r14, $r15, $r16, $r17, r19, r20;
        int[] $r8, $r11;
        boolean $z0;
        org.apache.lucene.search.QueryTermVector r4;
        java.lang.Object[] $r6;
        java.lang.String[] r0, $r5, $r7;
        java.util.HashMap $r1;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        java.lang.String r18;
        java.util.Iterator $r9;
        java.lang.Object $r10, $r12, $r13;

        r4 := @this: org.apache.lucene.search.QueryTermVector;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label6;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void quickSort(java.lang.Comparable[])>(r0);

        $r1 = new java.util.HashMap;

        $i0 = lengthof r0;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i0);

        $r2 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r3 = new java.util.ArrayList;

        $i2 = lengthof r0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        i12 = 0;

        i13 = 0;

     label1:
        $i3 = lengthof r0;

        if i13 >= $i3 goto label4;

        r18 = r0[i13];

        $r12 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        r19 = (java.lang.Integer) $r12;

        if r19 != null goto label2;

        $i11 = i12;

        i12 = i12 + 1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r16);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r18);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label3;

     label2:
        $i7 = virtualinvoke r19.<java.lang.Integer: int intValue()>();

        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i7);

        r14 = (java.lang.Integer) $r13;

        $i8 = virtualinvoke r19.<java.lang.Integer: int intValue()>();

        $i9 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        $i10 = $i9 + 1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i8, $r15);

     label3:
        i13 = i13 + 1;

        goto label1;

     label4:
        $r5 = r4.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        $r6 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        r4.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms> = $r7;

        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r8 = newarray (int)[$i4];

        r4.<org.apache.lucene.search.QueryTermVector: int[] termFreqs> = $r8;

        i14 = 0;

        $r9 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.Integer) $r10;

        $r11 = r4.<org.apache.lucene.search.QueryTermVector: int[] termFreqs>;

        $i5 = i14;

        i14 = i14 + 1;

        $i6 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        $r11[$i5] = $i6;

        goto label5;

     label6:
        return;
    }

    public final java.lang.String toString()
    {
        java.lang.String[] $r2, $r4;
        org.apache.lucene.search.QueryTermVector r1;
        int[] $r8;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0, $r6, $r7;
        java.lang.String $r3, $r5;

        r1 := @this: org.apache.lucene.search.QueryTermVector;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i2 = 0;

     label1:
        $r2 = r1.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r4 = r1.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r8 = r1.<org.apache.lucene.search.QueryTermVector: int[] termFreqs>;

        $i1 = $r8[i2];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.search.QueryTermVector r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        $r1 = r0.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.String[] getTerms()
    {
        org.apache.lucene.search.QueryTermVector r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        $r1 = r0.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        return $r1;
    }

    public int[] getTermFrequencies()
    {
        org.apache.lucene.search.QueryTermVector r0;
        int[] $r1;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        $r1 = r0.<org.apache.lucene.search.QueryTermVector: int[] termFreqs>;

        return $r1;
    }

    public int indexOf(java.lang.String)
    {
        org.apache.lucene.search.QueryTermVector r0;
        int $i0, $i1, $i3;
        java.lang.String[] $r2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.search.QueryTermVector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.search.QueryTermVector: java.lang.String[] terms>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r2, r1);

        if $i0 < 0 goto label1;

        $i1 = $i0;

        goto label2;

     label1:
        $i3 = (int) -1;

        $i1 = $i3;

     label2:
        return $i1;
    }

    public int[] indexesOf(java.lang.String[], int, int)
    {
        java.lang.String[] r2;
        org.apache.lucene.search.QueryTermVector r1;
        int[] r0;
        int i0, $i1, i2, i3;
        java.lang.String $r3;

        r1 := @this: org.apache.lucene.search.QueryTermVector;

        r2 := @parameter0: java.lang.String[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (int)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = r2[i3];

        $i1 = virtualinvoke r1.<org.apache.lucene.search.QueryTermVector: int indexOf(java.lang.String)>($r3);

        r0[i3] = $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r0;
    }
}
