public class org.apache.jena.riot.lang.LabelToNode extends org.apache.jena.riot.system.MapWithScope
{

    public static org.apache.jena.riot.lang.LabelToNode createScopeByDocumentHash()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorHash()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LabelToNode createScopeByDocumentOld()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorTraditional()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LabelToNode createScopeByGraph()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$GraphScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$GraphScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$GraphScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorByGraph()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LabelToNode createUseLabelAsGiven()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorRawLabel()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LabelToNode createUseLabelEncoded()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$AllocScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorEncoded()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    public static org.apache.jena.riot.lang.LabelToNode createIncremental()
    {
        org.apache.jena.riot.lang.LabelToNode $r0;
        org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy $r1;
        org.apache.jena.riot.system.MapWithScope$Allocator $r2;

        $r0 = new org.apache.jena.riot.lang.LabelToNode;

        $r1 = new org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy;

        specialinvoke $r1.<org.apache.jena.riot.lang.LabelToNode$SingleScopePolicy: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        $r2 = staticinvoke <org.apache.jena.riot.lang.LabelToNode: org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorDeterministic()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>($r1, $r2);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorHash()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorHash $r1;
        org.apache.jena.riot.lang.LabelToNode$Alloc $r0;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$Alloc;

        $r1 = new org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        specialinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: void <init>()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$Alloc: void <init>(org.apache.jena.riot.lang.BlankNodeAllocator)>($r1);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorDeterministic()
    {
        org.apache.jena.riot.lang.LabelToNode$Alloc $r0;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel $r1;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$Alloc;

        $r1 = new org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        specialinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: void <init>()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$Alloc: void <init>(org.apache.jena.riot.lang.BlankNodeAllocator)>($r1);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorTraditional()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorTraditional $r1;
        org.apache.jena.riot.lang.LabelToNode$Alloc $r0;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$Alloc;

        $r1 = new org.apache.jena.riot.lang.BlankNodeAllocatorTraditional;

        specialinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocatorTraditional: void <init>()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$Alloc: void <init>(org.apache.jena.riot.lang.BlankNodeAllocator)>($r1);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorEncoded()
    {
        org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded $r1;
        org.apache.jena.riot.lang.LabelToNode$Alloc $r0;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$Alloc;

        $r1 = new org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded;

        specialinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocatorLabelEncoded: void <init>()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$Alloc: void <init>(org.apache.jena.riot.lang.BlankNodeAllocator)>($r1);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorRawLabel()
    {
        org.apache.jena.riot.lang.LabelToNode$Alloc $r0;
        org.apache.jena.riot.lang.BlankNodeAllocatorLabel $r1;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$Alloc;

        $r1 = new org.apache.jena.riot.lang.BlankNodeAllocatorLabel;

        specialinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocatorLabel: void <init>()>();

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$Alloc: void <init>(org.apache.jena.riot.lang.BlankNodeAllocator)>($r1);

        return $r0;
    }

    private static org.apache.jena.riot.system.MapWithScope$Allocator nodeAllocatorByGraph()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph $r0;

        $r0 = new org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        specialinvoke $r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: void <init>(org.apache.jena.riot.lang.LabelToNode$1)>(null);

        return $r0;
    }

    public void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy, org.apache.jena.riot.system.MapWithScope$Allocator)
    {
        org.apache.jena.riot.system.MapWithScope$ScopePolicy r1;
        org.apache.jena.riot.lang.LabelToNode r0;
        org.apache.jena.riot.system.MapWithScope$Allocator r2;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode;

        r1 := @parameter0: org.apache.jena.riot.system.MapWithScope$ScopePolicy;

        r2 := @parameter1: org.apache.jena.riot.system.MapWithScope$Allocator;

        specialinvoke r0.<org.apache.jena.riot.system.MapWithScope: void <init>(org.apache.jena.riot.system.MapWithScope$ScopePolicy,org.apache.jena.riot.system.MapWithScope$Allocator)>(r1, r2);

        return;
    }
}
