public class org.waveprotocol.wave.federation.noop.NoOpFederationRemote extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationProvider
{

    public void <init>()
    {
        org.waveprotocol.wave.federation.noop.NoOpFederationRemote r0;

        r0 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationRemote;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void submitRequest(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        org.waveprotocol.wave.federation.noop.NoOpFederationRemote r2;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r0;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationRemote;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        r0 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }

    public void requestHistory(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, long, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        long l0;
        org.waveprotocol.wave.federation.noop.NoOpFederationRemote r2;
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r0;
        java.lang.String r4;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r5, r6;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationRemote;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r6 := @parameter3: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        l0 := @parameter4: long;

        r0 := @parameter5: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }

    public void getDeltaSignerInfo(com.google.protobuf.ByteString, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)
    {
        com.google.protobuf.ByteString r3;
        org.waveprotocol.wave.model.id.WaveletName r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener r0;
        org.waveprotocol.wave.federation.noop.NoOpFederationRemote r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r5;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationRemote;

        r3 := @parameter0: com.google.protobuf.ByteString;

        r4 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r5 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r0 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }

    public void postSignerInfo(java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo, org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener r0;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r1;
        java.lang.String r3;
        org.waveprotocol.wave.federation.noop.NoOpFederationRemote r2;

        r2 := @this: org.waveprotocol.wave.federation.noop.NoOpFederationRemote;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        r0 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Federation is not enabled!");

        interfaceinvoke r0.<org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r1);

        return;
    }
}
