public class org.codehaus.groovy.ast.ConstructorNode extends org.codehaus.groovy.ast.MethodNode
{

    public void <init>(int, org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.ast.Parameter[] $r3;
        int i0;
        org.codehaus.groovy.ast.ClassNode[] $r2;
        org.codehaus.groovy.ast.ConstructorNode r0;

        r0 := @this: org.codehaus.groovy.ast.ConstructorNode;

        i0 := @parameter0: int;

        r1 := @parameter1: org.codehaus.groovy.ast.stmt.Statement;

        $r3 = <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY>;

        $r2 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: void <init>(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(i0, $r3, $r2, r1);

        return;
    }

    public void <init>(int, org.codehaus.groovy.ast.Parameter[], org.codehaus.groovy.ast.ClassNode[], org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r3;
        org.codehaus.groovy.ast.VariableScope $r5;
        org.codehaus.groovy.ast.Parameter $r6;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.ast.Parameter[] r1;
        int i0, $i1, i2;
        org.codehaus.groovy.ast.ClassNode[] r2;
        org.codehaus.groovy.ast.ConstructorNode r0;

        r0 := @this: org.codehaus.groovy.ast.ConstructorNode;

        i0 := @parameter0: int;

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode[];

        r3 := @parameter3: org.codehaus.groovy.ast.stmt.Statement;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        specialinvoke r0.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("<init>", i0, $r4, r1, r2, r3);

        $r5 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r5.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r6 = r1[i2];

        virtualinvoke $r5.<org.codehaus.groovy.ast.VariableScope: void putDeclaredVariable(org.codehaus.groovy.ast.Variable)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: void setVariableScope(org.codehaus.groovy.ast.VariableScope)>($r5);

        return;
    }

    public boolean firstStatementIsSpecialConstructorCall()
    {
        org.codehaus.groovy.ast.stmt.Statement $r1;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r4;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r2;
        org.codehaus.groovy.ast.expr.Expression $r3;
        org.codehaus.groovy.ast.ConstructorNode r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.ConstructorNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getFirstStatement()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof org.codehaus.groovy.ast.stmt.ExpressionStatement;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = (org.codehaus.groovy.ast.stmt.ExpressionStatement) $r1;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.ExpressionStatement: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $z1 = $r3 instanceof org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) $r3;

        $z2 = virtualinvoke r4.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        return $z2;
    }
}
