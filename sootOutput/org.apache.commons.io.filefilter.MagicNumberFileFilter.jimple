public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final byte[] magicNumbers;
    private final long byteOffset;

    public void <init>(byte[])
    {
        byte[] r1;
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>(r1, 0L);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>(r1, 0L);

        return;
    }

    public void <init>(java.lang.String, long)
    {
        byte[] $r2;
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        long l1;
        java.lang.IllegalArgumentException $r6, $r7, $r8;
        byte $b2;
        int $i0, $i3;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r1 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");

        throw $r6;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");

        throw $r7;

     label2:
        $b2 = l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");

        throw $r8;

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = $r2;

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = l1;

        return;
    }

    public void <init>(byte[], long)
    {
        byte[] r1, $r2, $r3;
        org.apache.commons.io.filefilter.MagicNumberFileFilter r0;
        long l1;
        java.lang.IllegalArgumentException $r7, $r8, $r9;
        byte $b2;
        int $i0, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r1 := @parameter0: byte[];

        l1 := @parameter1: long;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");

        throw $r7;

     label1:
        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");

        throw $r8;

     label2:
        $b2 = l1 cmp 0L;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");

        throw $r9;

     label3:
        $i3 = lengthof r1;

        $r2 = newarray (byte)[$i3];

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = $r2;

        $r3 = r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i4);

        r0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = l1;

        return;
    }

    public boolean accept(java.io.File)
    {
        java.lang.Throwable $r6;
        byte[] $r2, $r4, $r5, r9;
        java.io.RandomAccessFile $r3, r8;
        org.apache.commons.io.filefilter.MagicNumberFileFilter r1;
        long $l1;
        int $i0, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.io.IOException $r7;
        java.io.File r0;

        r1 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label9;

        $z0 = virtualinvoke r0.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label9;

        $z1 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label9;

        r8 = null;

     label1:
        $r2 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i0 = lengthof $r2;

        r9 = newarray (byte)[$i0];

        $r3 = new java.io.RandomAccessFile;

        specialinvoke $r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "r");

        r8 = $r3;

        $l1 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void seek(long)>($l1);

        $i2 = virtualinvoke $r3.<java.io.RandomAccessFile: int read(byte[])>(r9);

        $r4 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $i3 = lengthof $r4;

        if $i2 == $i3 goto label3;

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>($r3);

        return 0;

     label3:
        $r5 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, r9);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>($r3);

        return $z2;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r8);

        goto label9;

     label7:
        $r6 := @caughtexception;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r8);

        throw $r6;

     label9:
        return 0;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String toString()
    {
        byte[] $r4;
        org.apache.commons.io.filefilter.MagicNumberFileFilter r1;
        java.lang.StringBuilder $r0;
        long $l0;
        java.lang.String $r2, $r3, $r5;

        r1 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;

        $r0 = new java.lang.StringBuilder;

        $r2 = specialinvoke r1.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = new java.lang.String;

        $r4 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $l0 = r1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <org.apache.commons.io.filefilter.MagicNumberFileFilter: long serialVersionUID> = -547733176983104172L;

        return;
    }
}
