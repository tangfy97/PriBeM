public class org.apache.cxf.feature.transform.XSLTInInterceptor extends org.apache.cxf.feature.transform.AbstractXSLTInterceptor
{
    private static final java.util.logging.Logger LOG;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.feature.transform.XSLTInInterceptor r0;

        r0 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.String)>("post-stream", class "Lorg/apache/cxf/interceptor/StaxInInterceptor;", null, r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class, java.lang.Class, java.lang.String)
    {
        org.apache.cxf.feature.transform.XSLTInInterceptor r0;
        java.lang.Class r2, r3;
        java.lang.String r1, r4;

        r0 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.cxf.feature.transform.AbstractXSLTInterceptor: void <init>(java.lang.String,java.lang.Class,java.lang.Class,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r1;
        java.io.Reader r7;
        javax.xml.stream.XMLStreamReader r3;
        org.apache.cxf.feature.transform.XSLTInInterceptor r0;
        java.lang.Object $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.io.InputStream r5;

        r0 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $z0 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r1);

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: boolean isGET(org.apache.cxf.message.Message)>(r1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: boolean checkContextProperty(org.apache.cxf.message.Message)>(r1);

        if $z1 == 0 goto label3;

     label2:
        return;

     label3:
        $r2 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamReader;");

        r3 = (javax.xml.stream.XMLStreamReader) $r2;

        if r3 == null goto label4;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: void transformXReader(org.apache.cxf.message.Message,javax.xml.stream.XMLStreamReader)>(r1, r3);

        goto label6;

     label4:
        $r4 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        r5 = (java.io.InputStream) $r4;

        if r5 == null goto label5;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: void transformIS(org.apache.cxf.message.Message,java.io.InputStream)>(r1, r5);

        goto label6;

     label5:
        $r6 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/Reader;");

        r7 = (java.io.Reader) $r6;

        if r7 == null goto label6;

        virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: void transformReader(org.apache.cxf.message.Message,java.io.Reader)>(r1, r7);

     label6:
        return;
    }

    protected void transformXReader(org.apache.cxf.message.Message, javax.xml.stream.XMLStreamReader)
    {
        javax.xml.transform.Templates $r3;
        javax.xml.stream.XMLStreamReader r1, $r6;
        org.apache.cxf.feature.transform.XSLTInInterceptor r2;
        javax.xml.stream.XMLStreamException $r21;
        java.util.logging.Logger $r10, $r19, $r24, $r28;
        java.lang.StringBuilder $r9, $r11, $r13, $r27, $r29, $r31;
        java.lang.Throwable $r15;
        java.lang.Object[] $r18, $r23;
        org.apache.cxf.interceptor.Fault $r17, $r22;
        java.lang.String $r12, $r14, $r20, $r25, $r30, $r32;
        org.apache.cxf.message.Message r7;
        java.io.IOException $r8, $r16, $r26;
        org.apache.cxf.io.CachedOutputStream $r0;
        java.io.InputStream $r4, $r5;

        r2 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r7 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: javax.xml.stream.XMLStreamReader;

        $r0 = new org.apache.cxf.io.CachedOutputStream;

        specialinvoke $r0.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

     label01:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,java.io.OutputStream)>(r1, $r0);

        $r3 = virtualinvoke r2.<org.apache.cxf.feature.transform.XSLTInInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        $r4 = virtualinvoke $r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

        $r5 = staticinvoke <org.apache.cxf.feature.transform.XSLTUtils: java.io.InputStream transform(javax.xml.transform.Templates,java.io.InputStream)>($r3, $r4);

        $r6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>($r5);

        interfaceinvoke r7.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljavax/xml/stream/XMLStreamReader;", $r6);

     label02:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamReader)>(r1);

     label03:
        virtualinvoke $r0.<org.apache.cxf.io.CachedOutputStream: void close()>();

     label04:
        goto label14;

     label05:
        $r26 := @caughtexception;

        $r28 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r30 = virtualinvoke $r26.<java.io.IOException: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.util.logging.Logger: void warning(java.lang.String)>($r32);

        goto label14;

     label06:
        $r21 := @caughtexception;

        $r22 = new org.apache.cxf.interceptor.Fault;

        $r24 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r23 = newarray (java.lang.Object)[1];

        $r25 = virtualinvoke $r21.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $r23[0] = $r25;

        specialinvoke $r22.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("STAX_COPY", $r24, $r21, $r23);

        throw $r22;

     label07:
        $r16 := @caughtexception;

        $r17 = new org.apache.cxf.interceptor.Fault;

        $r19 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke $r16.<java.io.IOException: java.lang.String getMessage()>();

        $r18[0] = $r20;

        specialinvoke $r17.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Throwable,java.lang.Object[])>("GET_CACHED_INPUT_STREAM", $r19, $r16, $r18);

        throw $r17;

     label08:
        $r15 := @caughtexception;

     label09:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamReader)>(r1);

     label10:
        virtualinvoke $r0.<org.apache.cxf.io.CachedOutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        $r10 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r12 = virtualinvoke $r8.<java.io.IOException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void warning(java.lang.String)>($r14);

     label13:
        throw $r15;

     label14:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch javax.xml.stream.XMLStreamException from label01 to label02 with label06;
        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label06 to label09 with label08;
    }

    protected void transformIS(org.apache.cxf.message.Message, java.io.InputStream)
    {
        java.lang.Throwable $r12;
        javax.xml.transform.Templates $r1;
        org.apache.cxf.feature.transform.XSLTInInterceptor r0;
        java.lang.String $r9, $r11, $r17, $r19;
        org.apache.cxf.message.Message r4;
        java.io.IOException $r5, $r13;
        java.util.logging.Logger $r7, $r15;
        java.lang.StringBuilder $r6, $r8, $r10, $r14, $r16, $r18;
        java.io.InputStream r2, $r3;

        r0 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r4 := @parameter0: org.apache.cxf.message.Message;

        r2 := @parameter1: java.io.InputStream;

     label01:
        $r1 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        $r3 = staticinvoke <org.apache.cxf.feature.transform.XSLTUtils: java.io.InputStream transform(javax.xml.transform.Templates,java.io.InputStream)>($r1, r2);

        interfaceinvoke r4.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", $r3);

     label02:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label03:
        goto label10;

     label04:
        $r13 := @caughtexception;

        $r15 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r17 = virtualinvoke $r13.<java.io.IOException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.logging.Logger: void warning(java.lang.String)>($r19);

        goto label10;

     label05:
        $r12 := @caughtexception;

     label06:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

        $r7 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r9 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void warning(java.lang.String)>($r11);

     label09:
        throw $r12;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    protected void transformReader(org.apache.cxf.message.Message, java.io.Reader)
    {
        java.lang.Throwable $r12;
        javax.xml.transform.Templates $r1;
        org.apache.cxf.feature.transform.XSLTInInterceptor r0;
        java.lang.String $r9, $r11, $r17, $r19;
        org.apache.cxf.message.Message r4;
        java.io.IOException $r5, $r13;
        java.io.Reader r2, $r3;
        java.util.logging.Logger $r7, $r15;
        java.lang.StringBuilder $r6, $r8, $r10, $r14, $r16, $r18;

        r0 := @this: org.apache.cxf.feature.transform.XSLTInInterceptor;

        r4 := @parameter0: org.apache.cxf.message.Message;

        r2 := @parameter1: java.io.Reader;

     label01:
        $r1 = virtualinvoke r0.<org.apache.cxf.feature.transform.XSLTInInterceptor: javax.xml.transform.Templates getXSLTTemplate()>();

        $r3 = staticinvoke <org.apache.cxf.feature.transform.XSLTUtils: java.io.Reader transform(javax.xml.transform.Templates,java.io.Reader)>($r1, r2);

        interfaceinvoke r4.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/Reader;", $r3);

     label02:
        virtualinvoke r2.<java.io.Reader: void close()>();

     label03:
        goto label10;

     label04:
        $r13 := @caughtexception;

        $r15 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r17 = virtualinvoke $r13.<java.io.IOException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.logging.Logger: void warning(java.lang.String)>($r19);

        goto label10;

     label05:
        $r12 := @caughtexception;

     label06:
        virtualinvoke r2.<java.io.Reader: void close()>();

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

        $r7 = <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot close stream after transformation: ");

        $r9 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void warning(java.lang.String)>($r11);

     label09:
        throw $r12;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/feature/transform/XSLTInInterceptor;");

        <org.apache.cxf.feature.transform.XSLTInInterceptor: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
