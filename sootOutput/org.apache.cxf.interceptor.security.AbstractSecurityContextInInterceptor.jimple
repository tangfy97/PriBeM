public abstract class org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("pre-invoke");

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor r4;
        int $i0;
        java.lang.String $r11, $r13;
        org.apache.cxf.common.security.SecurityToken r2;
        org.apache.cxf.security.SecurityContext $r7, $r17;
        org.apache.cxf.message.Message r0;
        java.util.Set $r5;
        java.lang.Exception $r8;
        javax.security.auth.Subject r14;
        java.security.Principal $r6, $r15, $r16;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r9, $r10, $r12;

        r4 := @this: org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/common/security/SecurityToken;");

        r2 = (org.apache.cxf.common.security.SecurityToken) $r1;

        if r2 != null goto label1;

        virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: void reportSecurityException(java.lang.String)>("Security Token is not available on the current message");

     label1:
        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/security/SecurityContext;");

        $r7 = (org.apache.cxf.security.SecurityContext) $r3;

        if $r7 == null goto label2;

        $r6 = interfaceinvoke $r7.<org.apache.cxf.security.SecurityContext: java.security.Principal getUserPrincipal()>();

        if $r6 != null goto label3;

     label2:
        virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: void reportSecurityException(java.lang.String)>("User Principal is not available on the current message");

     label3:
        r14 = null;

     label4:
        r14 = virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: javax.security.auth.Subject createSubject(org.apache.cxf.common.security.SecurityToken)>(r2);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed Authentication : Subject has not been created, ");

        $r11 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: void reportSecurityException(java.lang.String)>($r13);

     label7:
        if r14 == null goto label8;

        $r5 = virtualinvoke r14.<javax.security.auth.Subject: java.util.Set getPrincipals()>();

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        if $i0 != 0 goto label9;

     label8:
        virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: void reportSecurityException(java.lang.String)>("Failed Authentication : Invalid Subject");

     label9:
        $r15 = interfaceinvoke $r7.<org.apache.cxf.security.SecurityContext: java.security.Principal getUserPrincipal()>();

        $r16 = virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: java.security.Principal getPrincipal(java.security.Principal,javax.security.auth.Subject)>($r15, r14);

        $r17 = virtualinvoke r4.<org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: org.apache.cxf.security.SecurityContext createSecurityContext(java.security.Principal,javax.security.auth.Subject)>($r16, r14);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/security/SecurityContext;", $r17);

        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    protected java.security.Principal getPrincipal(java.security.Principal, javax.security.auth.Subject)
    {
        java.security.Principal[] $r3, r5;
        java.lang.Object[] $r4;
        java.util.Set $r1, $r2;
        javax.security.auth.Subject r0;
        java.security.Principal r6, $r7, $r8;
        org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor r9;
        int $i0, $i1;
        boolean $z0;

        r9 := @this: org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor;

        r6 := @parameter0: java.security.Principal;

        r0 := @parameter1: javax.security.auth.Subject;

        $r1 = virtualinvoke r0.<javax.security.auth.Subject: java.util.Set getPrincipals()>();

        $r2 = virtualinvoke r0.<javax.security.auth.Subject: java.util.Set getPrincipals()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r3 = newarray (java.security.Principal)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r5 = (java.security.Principal[]) $r4;

        if r5 == null goto label1;

        $i1 = lengthof r5;

        if $i1 <= 0 goto label1;

        $r7 = r5[0];

        $z0 = $r7 instanceof java.security.acl.Group;

        if $z0 != 0 goto label1;

        $r8 = r5[0];

        return $r8;

     label1:
        return r6;
    }

    protected org.apache.cxf.security.SecurityContext createSecurityContext(java.security.Principal, javax.security.auth.Subject)
    {
        java.security.Principal r1;
        org.apache.cxf.interceptor.security.DefaultSecurityContext $r0;
        org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor r3;
        javax.security.auth.Subject r2;

        r3 := @this: org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor;

        r1 := @parameter0: java.security.Principal;

        r2 := @parameter1: javax.security.auth.Subject;

        $r0 = new org.apache.cxf.interceptor.security.DefaultSecurityContext;

        specialinvoke $r0.<org.apache.cxf.interceptor.security.DefaultSecurityContext: void <init>(java.security.Principal,javax.security.auth.Subject)>(r1, r2);

        return $r0;
    }

    protected abstract javax.security.auth.Subject createSubject(org.apache.cxf.common.security.SecurityToken);

    protected void reportSecurityException(java.lang.String)
    {
        org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor r3;
        java.lang.SecurityException $r2;
        java.lang.String r0;
        java.util.logging.Logger $r1;

        r3 := @this: org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void severe(java.lang.String)>(r0);

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>(r0);

        throw $r2;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/security/AbstractSecurityContextInInterceptor;");

        <org.apache.cxf.interceptor.security.AbstractSecurityContextInInterceptor: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
