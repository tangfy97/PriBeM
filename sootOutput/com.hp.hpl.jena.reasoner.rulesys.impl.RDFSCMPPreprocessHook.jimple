public class com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook
{
    protected static java.lang.String memberPrefix;

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph, com.hp.hpl.jena.reasoner.Finder, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r17;
        com.hp.hpl.jena.graph.Node $r6, $r7, $r12, $r13, $r14, $r15, r18;
        java.util.HashSet $r3;
        java.lang.String $r8, $r9;
        com.hp.hpl.jena.graph.Graph r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook r16;
        com.hp.hpl.jena.graph.Triple r5, $r11;
        com.hp.hpl.jena.reasoner.Finder r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        java.lang.Object $r4;

        r16 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook;

        r17 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        r10 := @parameter2: com.hp.hpl.jena.graph.Graph;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r1);

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        r18 = $r6;

        $r7 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node type>;

        $z1 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r15 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node Property>;

        $z3 = virtualinvoke $r14.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label2;

        r18 = virtualinvoke r5.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

     label2:
        $z4 = virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r18);

        if $z4 == 0 goto label3;

        $r8 = virtualinvoke r18.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r9 = <com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook: java.lang.String memberPrefix>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z2 == 0 goto label3;

        $r11 = new com.hp.hpl.jena.graph.Triple;

        $r13 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node type>;

        $r12 = <com.hp.hpl.jena.vocabulary.RDFS$Nodes: com.hp.hpl.jena.graph.Node ContainerMembershipProperty>;

        specialinvoke $r11.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r18, $r13, $r12);

        interfaceinvoke r10.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r11);

     label3:
        goto label1;

     label4:
        return;
    }

    public boolean needsRerun(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook r4;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2, $r3;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook;

        r5 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook: java.lang.String memberPrefix>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook: java.lang.String memberPrefix> = $r4;

        return;
    }
}
