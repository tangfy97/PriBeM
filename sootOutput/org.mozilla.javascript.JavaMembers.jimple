class org.mozilla.javascript.JavaMembers extends java.lang.Object
{
    private java.lang.Class cl;
    private java.util.Hashtable members;
    private java.util.Hashtable fieldAndMethods;
    private java.util.Hashtable staticMembers;
    private java.util.Hashtable staticFieldAndMethods;
    org.mozilla.javascript.MemberBox[] ctors;

    void <init>(org.mozilla.javascript.Scriptable, java.lang.Class)
    {
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.Scriptable r4;
        java.lang.Class r3;
        java.util.Hashtable $r1, $r2;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r4 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(23);

        r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(7);

        r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers> = $r2;

        r0.<org.mozilla.javascript.JavaMembers: java.lang.Class cl> = r3;

        specialinvoke r0.<org.mozilla.javascript.JavaMembers: void reflect(org.mozilla.javascript.Scriptable)>(r4);

        return;
    }

    boolean has(java.lang.String, boolean)
    {
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.MemberBox $r3;
        java.lang.Object $r2;
        java.lang.String r1;
        java.util.Hashtable $r4;
        boolean z0, $z1;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label2;

     label1:
        $r4 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label2:
        $r2 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label3;

        return 1;

     label3:
        $r3 = specialinvoke r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox findExplicitFunction(java.lang.String,boolean)>(r1, z0);

        if null == $r3 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    java.lang.Object get(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object, boolean)
    {
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.MemberBox $r8, $r10, $r11;
        java.lang.Object[] $r9;
        java.lang.String r1;
        java.lang.reflect.Method $r12;
        org.mozilla.javascript.BeanProperty r22;
        java.util.Hashtable $r16, $r20;
        boolean z0, $z1, $z2;
        org.mozilla.javascript.Context $r3;
        java.lang.RuntimeException $r18;
        java.lang.reflect.Field r25;
        org.mozilla.javascript.WrapFactory $r6;
        java.lang.Exception $r17;
        org.mozilla.javascript.Scriptable $r5, r19;
        java.lang.Object $r2, r4, $r7, $r13, $r14, $r15, r21, r23, $r26;
        java.lang.Class r24;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r19 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label01;

        $r20 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label02;

     label01:
        $r20 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label02:
        $r2 = virtualinvoke $r20.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r21 = $r2;

        if z0 != 0 goto label03;

        if $r2 != null goto label03;

        $r16 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        r21 = virtualinvoke $r16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

     label03:
        if r21 != null goto label04;

        $r14 = specialinvoke r0.<org.mozilla.javascript.JavaMembers: java.lang.Object getExplicitFunction(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,boolean)>(r19, r1, r4, z0);

        r21 = $r14;

        if $r14 != null goto label04;

        $r15 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        return $r15;

     label04:
        $z1 = r21 instanceof org.mozilla.javascript.Scriptable;

        if $z1 == 0 goto label05;

        return r21;

     label05:
        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

     label06:
        $z2 = r21 instanceof org.mozilla.javascript.BeanProperty;

        if $z2 == 0 goto label09;

        r22 = (org.mozilla.javascript.BeanProperty) r21;

        $r8 = r22.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox getter>;

        if $r8 != null goto label08;

        $r13 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

     label07:
        return $r13;

     label08:
        $r10 = r22.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox getter>;

        $r9 = <org.mozilla.javascript.Context: java.lang.Object[] emptyArgs>;

        r23 = virtualinvoke $r10.<org.mozilla.javascript.MemberBox: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r9);

        $r11 = r22.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox getter>;

        $r12 = virtualinvoke $r11.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        r24 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        goto label12;

     label09:
        r25 = (java.lang.reflect.Field) r21;

        if z0 == 0 goto label10;

        $r26 = null;

        goto label11;

     label10:
        $r26 = r4;

     label11:
        r23 = virtualinvoke r25.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r26);

        r24 = virtualinvoke r25.<java.lang.reflect.Field: java.lang.Class getType()>();

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

        $r18 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r17);

        throw $r18;

     label14:
        $r5 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r19);

        $r6 = virtualinvoke $r3.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory getWrapFactory()>();

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.WrapFactory: java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)>($r3, $r5, r23, r24);

        return $r7;

        catch java.lang.Exception from label06 to label07 with label13;
        catch java.lang.Exception from label08 to label12 with label13;
    }

    void put(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object, java.lang.Object, boolean)
    {
        boolean z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r32;
        java.lang.Exception $r34;
        org.mozilla.javascript.Scriptable r19, $r20;
        org.mozilla.javascript.FieldAndMethods r38;
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.MemberBox $r9, $r11, $r15;
        java.lang.Object[] $r13, $r16;
        org.mozilla.javascript.NativeJavaMethod $r10, $r17;
        java.lang.String r2, $r28, $r30, $r40;
        org.mozilla.javascript.BeanProperty r39;
        java.util.Hashtable r1, $r25, $r36;
        org.mozilla.javascript.Context $r18;
        org.mozilla.javascript.EvaluatorException $r8, $r31;
        java.lang.Class[] $r12;
        java.lang.RuntimeException $r22, $r24, $r33, $r35;
        java.lang.IllegalArgumentException $r26;
        java.lang.reflect.Field r41;
        java.lang.Object $r3, r4, $r6, r7, $r14, $r23, r37;
        java.lang.Class $r5, $r21, $r27, $r29;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r19 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        z0 := @parameter4: boolean;

        if z0 == 0 goto label01;

        $r36 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label02;

     label01:
        $r36 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label02:
        r1 = $r36;

        $r3 = virtualinvoke $r36.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r37 = $r3;

        if z0 != 0 goto label03;

        if $r3 != null goto label03;

        $r25 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        r37 = virtualinvoke $r25.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

     label03:
        if r37 != null goto label04;

        $r24 = virtualinvoke r0.<org.mozilla.javascript.JavaMembers: java.lang.RuntimeException reportMemberNotFound(java.lang.String)>(r2);

        throw $r24;

     label04:
        $z1 = r37 instanceof org.mozilla.javascript.FieldAndMethods;

        if $z1 == 0 goto label05;

        $r23 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r38 = (org.mozilla.javascript.FieldAndMethods) $r23;

        r37 = r38.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

     label05:
        $z2 = r37 instanceof org.mozilla.javascript.BeanProperty;

        if $z2 == 0 goto label12;

        r39 = (org.mozilla.javascript.BeanProperty) r37;

        $r9 = r39.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox setter>;

        if $r9 != null goto label06;

        $r22 = virtualinvoke r0.<org.mozilla.javascript.JavaMembers: java.lang.RuntimeException reportMemberNotFound(java.lang.String)>(r2);

        throw $r22;

     label06:
        $r10 = r39.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.NativeJavaMethod setters>;

        if $r10 == null goto label07;

        if r4 != null goto label11;

     label07:
        $r11 = r39.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox setter>;

        $r12 = $r11.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $r21 = $r12[0];

        $r13 = newarray (java.lang.Object)[1];

        $r14 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object jsToJava(java.lang.Object,java.lang.Class)>(r4, $r21);

        $r13[0] = $r14;

     label08:
        $r15 = r39.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.MemberBox setter>;

        virtualinvoke $r15.<org.mozilla.javascript.MemberBox: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r13);

     label09:
        goto label20;

     label10:
        $r34 := @caughtexception;

        $r35 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r34);

        throw $r35;

     label11:
        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r4;

        $r17 = r39.<org.mozilla.javascript.BeanProperty: org.mozilla.javascript.NativeJavaMethod setters>;

        $r18 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r20 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r19);

        virtualinvoke $r17.<org.mozilla.javascript.NativeJavaMethod: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>($r18, $r20, r19, $r16);

        goto label20;

     label12:
        $z3 = r37 instanceof java.lang.reflect.Field;

        if $z3 != 0 goto label15;

        if r37 != null goto label13;

        $r40 = "msg.java.internal.private";

        goto label14;

     label13:
        $r40 = "msg.java.method.assign";

     label14:
        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>($r40, r2);

        throw $r8;

     label15:
        r41 = (java.lang.reflect.Field) r37;

        $r5 = virtualinvoke r41.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object jsToJava(java.lang.Object,java.lang.Class)>(r4, $r5);

     label16:
        virtualinvoke r41.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r7, $r6);

     label17:
        goto label20;

     label18:
        $r32 := @caughtexception;

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected IllegalAccessException accessing Java field");

        throw $r33;

     label19:
        $r26 := @caughtexception;

        $r27 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>();

        $r31 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError3(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("msg.java.internal.field.type", $r28, r41, $r30);

        throw $r31;

     label20:
        return;

        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label16 to label17 with label18;
        catch java.lang.IllegalArgumentException from label16 to label17 with label19;
    }

    java.lang.Object[] getIds(boolean)
    {
        org.mozilla.javascript.JavaMembers r0;
        java.lang.Object[] $r3;
        java.util.Enumeration $r1;
        int $i0, i1;
        java.lang.Object $r2;
        java.util.Hashtable $r4;
        boolean z0;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label2;

     label1:
        $r4 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label2:
        $i0 = virtualinvoke $r4.<java.util.Hashtable: int size()>();

        $r3 = newarray (java.lang.Object)[$i0];

        $r1 = virtualinvoke $r4.<java.util.Hashtable: java.util.Enumeration keys()>();

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3[i1] = $r2;

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r3;
    }

    static java.lang.String javaSignature(java.lang.Class)
    {
        java.lang.StringBuffer $r8;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String $r1, r2, $r4, $r5, $r6;
        boolean $z0, $z1;
        java.lang.Class $r0, r7;

        r7 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r7.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        return $r6;

     label1:
        i4 = 0;

     label2:
        i4 = i4 + 1;

        $r0 = virtualinvoke r7.<java.lang.Class: java.lang.Class getComponentType()>();

        r7 = $r0;

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        if $z1 != 0 goto label2;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        r2 = "[]";

        if i4 != 1 goto label3;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>("[]");

        return $r5;

     label3:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = i4 * $i1;

        i3 = $i0 + $i2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>(i3);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

     label4:
        if i4 == 0 goto label5;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        goto label4;

     label5:
        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String liveConnectSignature(java.lang.Class[])
    {
        java.lang.StringBuffer $r1;
        int i0, i1;
        java.lang.Class[] r0;
        java.lang.Class $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: java.lang.Class[];

        i0 = lengthof r0;

        if i0 != 0 goto label1;

        return "()";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i1 = 0;

     label2:
        if i1 == i0 goto label4;

        if i1 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label3:
        $r3 = r0[i1];

        $r4 = staticinvoke <org.mozilla.javascript.JavaMembers: java.lang.String javaSignature(java.lang.Class)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private org.mozilla.javascript.MemberBox findExplicitFunction(java.lang.String, boolean)
    {
        org.mozilla.javascript.JavaMembers r1;
        org.mozilla.javascript.MemberBox $r5, $r7;
        org.mozilla.javascript.NativeJavaMethod r12;
        org.mozilla.javascript.MemberBox[] r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r0, $r3, $r6;
        java.util.Hashtable r2, $r8, $r9;
        boolean z0, $z1, $z2, $z3;
        java.lang.Class[] r13;
        java.lang.Object $r4, r11;

        r1 := @this: org.mozilla.javascript.JavaMembers;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(40);

        if $i0 >= 0 goto label01;

        return null;

     label01:
        if z0 == 0 goto label02;

        $r9 = r1.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label03;

     label02:
        $r9 = r1.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label03:
        r2 = $r9;

        r10 = null;

        if z0 == 0 goto label04;

        if $i0 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        if $z2 == 0 goto label06;

        r10 = r1.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox[] ctors>;

        goto label08;

     label06:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r11 = $r4;

        if z0 != 0 goto label07;

        if $r4 != null goto label07;

        $r8 = r1.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        r11 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

     label07:
        $z3 = r11 instanceof org.mozilla.javascript.NativeJavaMethod;

        if $z3 == 0 goto label08;

        r12 = (org.mozilla.javascript.NativeJavaMethod) r11;

        r10 = r12.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

     label08:
        if r10 == null goto label11;

        i6 = 0;

     label09:
        $i1 = lengthof r10;

        if i6 >= $i1 goto label11;

        $r5 = r10[i6];

        r13 = $r5.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $r6 = staticinvoke <org.mozilla.javascript.JavaMembers: java.lang.String liveConnectSignature(java.lang.Class[])>(r13);

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = $i0 + $i2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 != $i4 goto label10;

        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i0, $r6, 0, $i5);

        if $z1 == 0 goto label10;

        $r7 = r10[i6];

        return $r7;

     label10:
        i6 = i6 + 1;

        goto label09;

     label11:
        return null;
    }

    private java.lang.Object getExplicitFunction(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object, boolean)
    {
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.MemberBox $r2;
        org.mozilla.javascript.NativeJavaMethod $r7, $r9;
        org.mozilla.javascript.MemberBox[] $r8;
        int $i0;
        java.lang.String r1, $r5;
        java.util.Hashtable $r12;
        boolean z0, $z1, $z2;
        org.mozilla.javascript.Scriptable r3, $r4;
        java.lang.Object $r6, r11, r13;
        org.mozilla.javascript.NativeJavaConstructor $r10;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r3 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r12 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label2;

     label1:
        $r12 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label2:
        r13 = null;

        $r2 = specialinvoke r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox findExplicitFunction(java.lang.String,boolean)>(r1, z0);

        if $r2 == null goto label4;

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getFunctionPrototype(org.mozilla.javascript.Scriptable)>(r3);

        $z1 = virtualinvoke $r2.<org.mozilla.javascript.MemberBox: boolean isCtor()>();

        if $z1 == 0 goto label3;

        $r10 = new org.mozilla.javascript.NativeJavaConstructor;

        specialinvoke $r10.<org.mozilla.javascript.NativeJavaConstructor: void <init>(org.mozilla.javascript.MemberBox)>($r2);

        virtualinvoke $r10.<org.mozilla.javascript.NativeJavaConstructor: void setPrototype(org.mozilla.javascript.Scriptable)>($r4);

        r13 = $r10;

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        goto label4;

     label3:
        $r5 = virtualinvoke $r2.<org.mozilla.javascript.MemberBox: java.lang.String getName()>();

        $r6 = virtualinvoke $r12.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r13 = $r6;

        $z2 = $r6 instanceof org.mozilla.javascript.NativeJavaMethod;

        if $z2 == 0 goto label4;

        $r7 = (org.mozilla.javascript.NativeJavaMethod) $r6;

        $r8 = $r7.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        $i0 = lengthof $r8;

        if $i0 <= 1 goto label4;

        $r9 = new org.mozilla.javascript.NativeJavaMethod;

        specialinvoke $r9.<org.mozilla.javascript.NativeJavaMethod: void <init>(org.mozilla.javascript.MemberBox,java.lang.String)>($r2, r1);

        virtualinvoke $r9.<org.mozilla.javascript.NativeJavaMethod: void setPrototype(org.mozilla.javascript.Scriptable)>($r4);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        r13 = $r9;

     label4:
        return r13;
    }

    private static java.lang.reflect.Method[] discoverAccessibleMethods(java.lang.Class)
    {
        java.lang.Object[] $r4;
        java.util.Collection $r2;
        int $i0;
        java.util.HashMap $r0;
        java.lang.Class r1;
        java.lang.reflect.Method[] $r3, $r5;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        staticinvoke <org.mozilla.javascript.JavaMembers: void discoverAccessibleMethods(java.lang.Class,java.util.Map)>(r1, $r0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        $r3 = newarray (java.lang.reflect.Method)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.reflect.Method[]) $r4;

        return $r5;
    }

    private static void discoverAccessibleMethods(java.lang.Class, java.util.Map)
    {
        java.lang.reflect.Method[] $r5;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r14;
        java.util.Map r3;
        int $i0, $i1, i2, i3, $i4;
        java.lang.SecurityException $r8;
        java.lang.String $r11, $r15;
        java.lang.reflect.Method r6;
        boolean $z0;
        org.mozilla.javascript.JavaMembers$MethodSignature $r7;
        java.lang.Class[] $r1;
        java.lang.Class r0, $r2, $r4;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.util.Map;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label5;

     label1:
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i2 = 0;

     label2:
        $i1 = lengthof $r5;

        if i2 >= $i1 goto label3;

        r6 = $r5[i2];

        $r7 = new org.mozilla.javascript.JavaMembers$MethodSignature;

        specialinvoke $r7.<org.mozilla.javascript.JavaMembers$MethodSignature: void <init>(java.lang.reflect.Method)>(r6);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r6);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not discover accessible methods of class ");

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" due to lack of privileges, ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("attemping superclasses/interfaces.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.Context: void reportWarning(java.lang.String)>($r15);

     label5:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i3 = 0;

     label6:
        $i4 = lengthof $r1;

        if i3 >= $i4 goto label7;

        $r4 = $r1[i3];

        staticinvoke <org.mozilla.javascript.JavaMembers: void discoverAccessibleMethods(java.lang.Class,java.util.Map)>($r4, r3);

        i3 = i3 + 1;

        goto label6;

     label7:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 == null goto label8;

        staticinvoke <org.mozilla.javascript.JavaMembers: void discoverAccessibleMethods(java.lang.Class,java.util.Map)>($r2, r3);

     label8:
        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }

    private void reflect(org.mozilla.javascript.Scriptable)
    {
        java.util.Enumeration $r12, $r13, $r40;
        byte $b18;
        org.mozilla.javascript.ObjArray $r51, r55, r60;
        org.mozilla.javascript.FieldAndMethods $r36;
        org.mozilla.javascript.JavaMembers r0;
        java.lang.reflect.Constructor $r9;
        org.mozilla.javascript.MemberBox[] $r7, $r10, $r23, $r24, $r27, $r38, $r46, r59;
        java.lang.StringBuffer $r28, $r29, $r31;
        java.lang.String $r17, $r19, $r20, $r30, $r32, $r49, r58, r71, r72;
        java.lang.reflect.Field r62, r68;
        java.lang.reflect.Method[] $r2;
        java.lang.reflect.Method $r25, $r48, r52, r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z22, $z23, $z24, $z25, $z26;
        org.mozilla.javascript.Scriptable r37;
        org.mozilla.javascript.MemberBox $r8, $r18, $r45, $r47, r73, r74;
        org.mozilla.javascript.NativeJavaMethod r22, $r43, r65, r75;
        java.lang.reflect.Constructor[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i10, $i11, $i12, i13, i14, i15, i16, i17, i19;
        org.mozilla.javascript.BeanProperty $r76;
        java.util.Hashtable $r11, $r39, $r53, r54, $r56, r57, $r63, r64, $r66, r67, $r69, r70;
        char $c5, $c8, $c9;
        java.lang.reflect.Field[] $r4;
        java.lang.Class $r1, $r3, $r5, $r26, $r34, $r35;
        java.lang.Object $r14, $r15, $r16, $r21, $r33, $r41, $r42, $r44, $r50;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r37 := @parameter0: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.JavaMembers: java.lang.Class cl>;

        $r2 = staticinvoke <org.mozilla.javascript.JavaMembers: java.lang.reflect.Method[] discoverAccessibleMethods(java.lang.Class)>($r1);

        i13 = 0;

     label01:
        $i0 = lengthof $r2;

        if i13 >= $i0 goto label10;

        r52 = $r2[i13];

        $i12 = virtualinvoke r52.<java.lang.reflect.Method: int getModifiers()>();

        $z15 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i12);

        if $z15 != 0 goto label02;

        goto label09;

     label02:
        $z16 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i12);

        if $z16 == 0 goto label03;

        $r53 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label04;

     label03:
        $r53 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label04:
        r54 = $r53;

        $r49 = virtualinvoke r52.<java.lang.reflect.Method: java.lang.String getName()>();

        $r50 = virtualinvoke $r53.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r49);

        if $r50 != null goto label05;

        virtualinvoke $r53.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, r52);

        goto label09;

     label05:
        $z17 = $r50 instanceof org.mozilla.javascript.ObjArray;

        if $z17 == 0 goto label06;

        r55 = (org.mozilla.javascript.ObjArray) $r50;

        goto label08;

     label06:
        $z18 = $r50 instanceof java.lang.reflect.Method;

        if $z18 != 0 goto label07;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label07:
        $r51 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r51.<org.mozilla.javascript.ObjArray: void <init>()>();

        r55 = $r51;

        virtualinvoke $r51.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r50);

        virtualinvoke r54.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, $r51);

     label08:
        virtualinvoke r55.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r52);

     label09:
        i13 = i13 + 1;

        goto label01;

     label10:
        i14 = 0;

     label11:
        if i14 == 2 goto label23;

        if i14 != 0 goto label12;

        $z19 = 1;

        goto label13;

     label12:
        $z19 = 0;

     label13:
        if $z19 == 0 goto label14;

        $r56 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label15;

     label14:
        $r56 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label15:
        r57 = $r56;

        $r40 = virtualinvoke $r56.<java.util.Hashtable: java.util.Enumeration keys()>();

     label16:
        $z20 = interfaceinvoke $r40.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z20 == 0 goto label22;

        $r41 = interfaceinvoke $r40.<java.util.Enumeration: java.lang.Object nextElement()>();

        r58 = (java.lang.String) $r41;

        $r42 = virtualinvoke r57.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r58);

        $z14 = $r42 instanceof java.lang.reflect.Method;

        if $z14 == 0 goto label17;

        r59 = newarray (org.mozilla.javascript.MemberBox)[1];

        $r47 = new org.mozilla.javascript.MemberBox;

        $r48 = (java.lang.reflect.Method) $r42;

        specialinvoke $r47.<org.mozilla.javascript.MemberBox: void <init>(java.lang.reflect.Method)>($r48);

        r59[0] = $r47;

        goto label20;

     label17:
        r60 = (org.mozilla.javascript.ObjArray) $r42;

        $i11 = virtualinvoke r60.<org.mozilla.javascript.ObjArray: int size()>();

        if $i11 >= 2 goto label18;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label18:
        $r46 = newarray (org.mozilla.javascript.MemberBox)[$i11];

        r59 = $r46;

        i15 = 0;

     label19:
        if i15 == $i11 goto label20;

        $r44 = virtualinvoke r60.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i15);

        r61 = (java.lang.reflect.Method) $r44;

        $r45 = new org.mozilla.javascript.MemberBox;

        specialinvoke $r45.<org.mozilla.javascript.MemberBox: void <init>(java.lang.reflect.Method)>(r61);

        $r46[i15] = $r45;

        i15 = i15 + 1;

        goto label19;

     label20:
        $r43 = new org.mozilla.javascript.NativeJavaMethod;

        specialinvoke $r43.<org.mozilla.javascript.NativeJavaMethod: void <init>(org.mozilla.javascript.MemberBox[])>(r59);

        if r37 == null goto label21;

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setFunctionProtoAndParent(org.mozilla.javascript.BaseFunction,org.mozilla.javascript.Scriptable)>($r43, r37);

     label21:
        virtualinvoke r57.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r58, $r43);

        goto label16;

     label22:
        i14 = i14 + 1;

        goto label11;

     label23:
        $r3 = r0.<org.mozilla.javascript.JavaMembers: java.lang.Class cl>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i16 = 0;

     label24:
        $i1 = lengthof $r4;

        if i16 >= $i1 goto label36;

        r62 = $r4[i16];

        $i10 = virtualinvoke r62.<java.lang.reflect.Field: int getModifiers()>();

        $z9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i10);

        if $z9 != 0 goto label25;

        goto label35;

     label25:
        $z10 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i10);

        if $z10 == 0 goto label26;

        $r63 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label27;

     label26:
        $r63 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label27:
        r64 = $r63;

        $r32 = virtualinvoke r62.<java.lang.reflect.Field: java.lang.String getName()>();

        $r33 = virtualinvoke $r63.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r32);

        if $r33 != null goto label28;

        virtualinvoke $r63.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r62);

        goto label35;

     label28:
        $z11 = $r33 instanceof org.mozilla.javascript.NativeJavaMethod;

        if $z11 == 0 goto label33;

        r65 = (org.mozilla.javascript.NativeJavaMethod) $r33;

        $r36 = new org.mozilla.javascript.FieldAndMethods;

        $r38 = r65.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        specialinvoke $r36.<org.mozilla.javascript.FieldAndMethods: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.MemberBox[],java.lang.reflect.Field)>(r37, $r38, r62);

        if $z10 == 0 goto label29;

        $r66 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticFieldAndMethods>;

        goto label30;

     label29:
        $r66 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable fieldAndMethods>;

     label30:
        r67 = $r66;

        if $r66 != null goto label32;

        $r39 = new java.util.Hashtable;

        specialinvoke $r39.<java.util.Hashtable: void <init>(int)>(4);

        r67 = $r39;

        if $z10 == 0 goto label31;

        r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticFieldAndMethods> = $r39;

        goto label32;

     label31:
        r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable fieldAndMethods> = $r39;

     label32:
        virtualinvoke r67.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r36);

        virtualinvoke r64.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r36);

        goto label35;

     label33:
        $z12 = $r33 instanceof java.lang.reflect.Field;

        if $z12 == 0 goto label34;

        r68 = (java.lang.reflect.Field) $r33;

        $r34 = virtualinvoke r68.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r35 = virtualinvoke r62.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $z13 = virtualinvoke $r34.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r35);

        if $z13 == 0 goto label35;

        virtualinvoke $r63.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r62);

        goto label35;

     label34:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label35:
        i16 = i16 + 1;

        goto label24;

     label36:
        i17 = 0;

     label37:
        if i17 == 2 goto label57;

        if i17 != 0 goto label38;

        $z26 = 1;

        $z25 = 1;

        goto label39;

     label38:
        $z26 = 0;

        $z25 = 0;

     label39:
        z22 = $z26;

        if $z25 == 0 goto label40;

        $r69 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticMembers>;

        goto label41;

     label40:
        $r69 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable members>;

     label41:
        r70 = $r69;

        $r11 = new java.util.Hashtable;

        specialinvoke $r11.<java.util.Hashtable: void <init>()>();

        $r12 = virtualinvoke $r69.<java.util.Hashtable: java.util.Enumeration keys()>();

     label42:
        $z23 = interfaceinvoke $r12.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z23 == 0 goto label54;

        $r16 = interfaceinvoke $r12.<java.util.Enumeration: java.lang.Object nextElement()>();

        r71 = (java.lang.String) $r16;

        $z1 = virtualinvoke r71.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        $z2 = virtualinvoke r71.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        $z3 = virtualinvoke r71.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z1 != 0 goto label43;

        if $z3 != 0 goto label43;

        if $z2 == 0 goto label42;

     label43:
        if $z3 == 0 goto label44;

        $b18 = 2;

        goto label45;

     label44:
        $b18 = 3;

     label45:
        $r17 = virtualinvoke r71.<java.lang.String: java.lang.String substring(int)>($b18);

        $i4 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i4 != 0 goto label46;

        goto label42;

     label46:
        r72 = $r17;

        $c5 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(0);

        $z4 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c5);

        if $z4 == 0 goto label48;

        $i7 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i7 != 1 goto label47;

        r72 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase()>();

        goto label48;

     label47:
        $c8 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(1);

        $z8 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c8);

        if $z8 != 0 goto label48;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        $r30 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int)>(1);

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        r72 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

     label48:
        $z24 = virtualinvoke r70.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r72);

        if $z24 != 0 goto label42;

        $z5 = virtualinvoke $r11.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r72);

        if $z5 == 0 goto label49;

        goto label42;

     label49:
        $r18 = specialinvoke r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox findGetter(boolean,java.util.Hashtable,java.lang.String,java.lang.String)>(z22, r70, "get", $r17);

        r73 = $r18;

        if $r18 != null goto label50;

        r73 = specialinvoke r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox findGetter(boolean,java.util.Hashtable,java.lang.String,java.lang.String)>(z22, r70, "is", $r17);

     label50:
        r74 = null;

        r75 = null;

        $r19 = "set";

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String concat(java.lang.String)>($r17);

        $z6 = virtualinvoke r70.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r20);

        if $z6 == 0 goto label53;

        $r21 = virtualinvoke r70.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r20);

        $z7 = $r21 instanceof org.mozilla.javascript.NativeJavaMethod;

        if $z7 == 0 goto label53;

        r22 = (org.mozilla.javascript.NativeJavaMethod) $r21;

        if r73 == null goto label51;

        $r25 = virtualinvoke r73.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r26 = virtualinvoke $r25.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r27 = r22.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        r74 = staticinvoke <org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox extractSetMethod(java.lang.Class,org.mozilla.javascript.MemberBox[],boolean)>($r26, $r27, z22);

        goto label52;

     label51:
        $r23 = r22.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        r74 = staticinvoke <org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox extractSetMethod(org.mozilla.javascript.MemberBox[],boolean)>($r23, z22);

     label52:
        $r24 = r22.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        $i6 = lengthof $r24;

        if $i6 <= 1 goto label53;

        r75 = r22;

     label53:
        $r76 = new org.mozilla.javascript.BeanProperty;

        specialinvoke $r76.<org.mozilla.javascript.BeanProperty: void <init>(org.mozilla.javascript.MemberBox,org.mozilla.javascript.MemberBox,org.mozilla.javascript.NativeJavaMethod)>(r73, r74, r75);

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, $r76);

        goto label42;

     label54:
        $r13 = virtualinvoke $r11.<java.util.Hashtable: java.util.Enumeration keys()>();

     label55:
        $z0 = interfaceinvoke $r13.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label56;

        $r14 = interfaceinvoke $r13.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r15 = virtualinvoke $r11.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r14);

        virtualinvoke r70.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label55;

     label56:
        i17 = i17 + 1;

        goto label37;

     label57:
        $r5 = r0.<org.mozilla.javascript.JavaMembers: java.lang.Class cl>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i2 = lengthof $r6;

        $r7 = newarray (org.mozilla.javascript.MemberBox)[$i2];

        r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox[] ctors> = $r7;

        i19 = 0;

     label58:
        $i3 = lengthof $r6;

        if i19 == $i3 goto label59;

        $r10 = r0.<org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox[] ctors>;

        $r8 = new org.mozilla.javascript.MemberBox;

        $r9 = $r6[i19];

        specialinvoke $r8.<org.mozilla.javascript.MemberBox: void <init>(java.lang.reflect.Constructor)>($r9);

        $r10[i19] = $r8;

        i19 = i19 + 1;

        goto label58;

     label59:
        return;
    }

    private org.mozilla.javascript.MemberBox findGetter(boolean, java.util.Hashtable, java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.MemberBox $r7;
        org.mozilla.javascript.JavaMembers r8;
        org.mozilla.javascript.NativeJavaMethod r5;
        org.mozilla.javascript.MemberBox[] $r6;
        java.lang.Object $r4;
        java.lang.String r0, r1, $r2;
        java.util.Hashtable r3;
        boolean $z0, $z1, z2;

        r8 := @this: org.mozilla.javascript.JavaMembers;

        z2 := @parameter0: boolean;

        r3 := @parameter1: java.util.Hashtable;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>(r1);

        $z0 = virtualinvoke r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $z1 = $r4 instanceof org.mozilla.javascript.NativeJavaMethod;

        if $z1 == 0 goto label1;

        r5 = (org.mozilla.javascript.NativeJavaMethod) $r4;

        $r6 = r5.<org.mozilla.javascript.NativeJavaMethod: org.mozilla.javascript.MemberBox[] methods>;

        $r7 = staticinvoke <org.mozilla.javascript.JavaMembers: org.mozilla.javascript.MemberBox extractGetMethod(org.mozilla.javascript.MemberBox[],boolean)>($r6, z2);

        return $r7;

     label1:
        return null;
    }

    private static org.mozilla.javascript.MemberBox extractGetMethod(org.mozilla.javascript.MemberBox[], boolean)
    {
        org.mozilla.javascript.MemberBox r1;
        java.lang.Class[] $r2;
        org.mozilla.javascript.MemberBox[] r0;
        int $i0, $i1, i2;
        java.lang.Class $r4, $r5;
        java.lang.reflect.Method $r3;
        boolean z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.MemberBox[];

        z0 := @parameter1: boolean;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label4;

        r1 = r0[i2];

        $r2 = r1.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $i1 = lengthof $r2;

        if $i1 != 0 goto label3;

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: boolean isStatic()>();

        if $z1 == 0 goto label3;

     label2:
        $r3 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if $r4 == $r5 goto label4;

        return r1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return null;
    }

    private static org.mozilla.javascript.MemberBox extractSetMethod(java.lang.Class, org.mozilla.javascript.MemberBox[], boolean)
    {
        org.mozilla.javascript.MemberBox r1;
        org.mozilla.javascript.MemberBox[] r0;
        int $i0, $i1, i2, i3;
        java.lang.reflect.Method $r2;
        boolean z0, $z1, $z2;
        java.lang.Class[] r5;
        java.lang.Class $r3, $r4, r6, $r7, $r8;

        r6 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.mozilla.javascript.MemberBox[];

        z0 := @parameter2: boolean;

        i2 = 1;

     label1:
        if i2 > 2 goto label8;

        i3 = 0;

     label2:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label7;

        r1 = r0[i3];

        if z0 == 0 goto label3;

        $z2 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: boolean isStatic()>();

        if $z2 == 0 goto label6;

     label3:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 != $r4 goto label6;

        r5 = r1.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $i1 = lengthof r5;

        if $i1 != 1 goto label6;

        if i2 != 1 goto label4;

        $r8 = r5[0];

        if $r8 != r6 goto label6;

        return r1;

     label4:
        if i2 == 2 goto label5;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label5:
        $r7 = r5[0];

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6);

        if $z1 == 0 goto label6;

        return r1;

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return null;
    }

    private static org.mozilla.javascript.MemberBox extractSetMethod(org.mozilla.javascript.MemberBox[], boolean)
    {
        org.mozilla.javascript.MemberBox r1;
        java.lang.Class[] $r5;
        org.mozilla.javascript.MemberBox[] r0;
        int $i0, $i1, i2;
        java.lang.Class $r3, $r4;
        java.lang.reflect.Method $r2;
        boolean z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.MemberBox[];

        z0 := @parameter1: boolean;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label4;

        r1 = r0[i2];

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: boolean isStatic()>();

        if $z1 == 0 goto label3;

     label2:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 != $r4 goto label3;

        $r5 = r1.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $i1 = lengthof $r5;

        if $i1 != 1 goto label3;

        return r1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return null;
    }

    java.util.Hashtable getFieldAndMethodsObjects(org.mozilla.javascript.Scriptable, java.lang.Object, boolean)
    {
        org.mozilla.javascript.JavaMembers r0;
        java.util.Enumeration $r2;
        org.mozilla.javascript.MemberBox[] $r8;
        int $i0, $i1, i2;
        java.lang.String $r11;
        java.util.Hashtable $r1, $r12;
        boolean z0;
        java.lang.reflect.Field $r7, $r10;
        org.mozilla.javascript.Scriptable r6;
        java.lang.Object $r3, r9;
        org.mozilla.javascript.FieldAndMethods r4, $r5;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r6 := @parameter0: org.mozilla.javascript.Scriptable;

        r9 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r12 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable staticFieldAndMethods>;

        goto label2;

     label1:
        $r12 = r0.<org.mozilla.javascript.JavaMembers: java.util.Hashtable fieldAndMethods>;

     label2:
        if $r12 != null goto label3;

        return null;

     label3:
        $i0 = virtualinvoke $r12.<java.util.Hashtable: int size()>();

        i2 = $i0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>($i0);

        $r2 = virtualinvoke $r12.<java.util.Hashtable: java.util.Enumeration elements()>();

     label4:
        $i1 = i2;

        i2 = i2 - 1;

        if $i1 <= 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (org.mozilla.javascript.FieldAndMethods) $r3;

        $r5 = new org.mozilla.javascript.FieldAndMethods;

        $r8 = r4.<org.mozilla.javascript.FieldAndMethods: org.mozilla.javascript.MemberBox[] methods>;

        $r7 = r4.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

        specialinvoke $r5.<org.mozilla.javascript.FieldAndMethods: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.MemberBox[],java.lang.reflect.Field)>(r6, $r8, $r7);

        $r5.<org.mozilla.javascript.FieldAndMethods: java.lang.Object javaObject> = r9;

        $r10 = r4.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r5);

        goto label4;

     label5:
        return $r1;
    }

    static org.mozilla.javascript.JavaMembers lookupClass(org.mozilla.javascript.Scriptable, java.lang.Class, java.lang.Class)
    {
        org.mozilla.javascript.JavaMembers $r5, $r9;
        org.mozilla.javascript.ClassCache $r1;
        java.lang.SecurityException $r7;
        java.util.Hashtable r2;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.ScriptableObject $r6;
        java.lang.Class r3, $r8, r10, r11, r12;
        java.lang.Object $r4;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: java.lang.Class;

        r10 := @parameter2: java.lang.Class;

        $r1 = staticinvoke <org.mozilla.javascript.ClassCache: org.mozilla.javascript.ClassCache get(org.mozilla.javascript.Scriptable)>(r0);

        r2 = $r1.<org.mozilla.javascript.ClassCache: java.util.Hashtable classTable>;

        r11 = r3;

     label01:
        $r4 = virtualinvoke r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r11);

        $r9 = (org.mozilla.javascript.JavaMembers) $r4;

        if $r9 == null goto label02;

        return $r9;

     label02:
        $r5 = new org.mozilla.javascript.JavaMembers;

        $r6 = $r1.<org.mozilla.javascript.ClassCache: org.mozilla.javascript.ScriptableObject scope>;

        specialinvoke $r5.<org.mozilla.javascript.JavaMembers: void <init>(org.mozilla.javascript.Scriptable,java.lang.Class)>($r6, r11);

     label03:
        goto label09;

     label04:
        $r7 := @caughtexception;

        if r10 == null goto label05;

        $z2 = virtualinvoke r10.<java.lang.Class: boolean isInterface()>();

        if $z2 == 0 goto label05;

        r11 = r10;

        r10 = null;

        goto label08;

     label05:
        $r8 = virtualinvoke r11.<java.lang.Class: java.lang.Class getSuperclass()>();

        r12 = $r8;

        if $r8 != null goto label07;

        $z1 = virtualinvoke r11.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label06;

        r12 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ObjectClass>;

        goto label07;

     label06:
        throw $r7;

     label07:
        r11 = r12;

     label08:
        goto label01;

     label09:
        $z0 = virtualinvoke $r1.<org.mozilla.javascript.ClassCache: boolean isCachingEnabled()>();

        if $z0 == 0 goto label10;

        virtualinvoke r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r5);

     label10:
        return $r5;

        catch java.lang.SecurityException from label02 to label03 with label04;
    }

    java.lang.RuntimeException reportMemberNotFound(java.lang.String)
    {
        org.mozilla.javascript.JavaMembers r0;
        org.mozilla.javascript.EvaluatorException $r4;
        java.lang.Class $r1;
        java.lang.String $r2, r3;

        r0 := @this: org.mozilla.javascript.JavaMembers;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.mozilla.javascript.JavaMembers: java.lang.Class cl>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object)>("msg.java.member.not.found", $r2, r3);

        return $r4;
    }
}
