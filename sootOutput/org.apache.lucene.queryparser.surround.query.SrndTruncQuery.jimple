public class org.apache.lucene.queryparser.surround.query.SrndTruncQuery extends org.apache.lucene.queryparser.surround.query.SimpleTerm
{
    private final java.lang.String truncated;
    private final char unlimited;
    private final char mask;
    private java.lang.String prefix;
    private org.apache.lucene.util.BytesRef prefixRef;
    private java.util.regex.Pattern pattern;

    public void <init>(java.lang.String, char, char)
    {
        char c0, c1;
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.SimpleTerm: void <init>(boolean)>(0);

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated> = r1;

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char unlimited> = c0;

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char mask> = c1;

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: void truncatedToPrefixAndPattern()>();

        return;
    }

    public java.lang.String getTruncated()
    {
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        return $r1;
    }

    public java.lang.String toStringUnquoted()
    {
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String getTruncated()>();

        return $r1;
    }

    protected boolean matchingChar(char)
    {
        char c0, $c1, $c2;
        int $i3, $i4, $i5, $i6;
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        c0 := @parameter0: char;

        $c1 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char unlimited>;

        $i3 = (int) c0;

        $i4 = (int) $c1;

        if $i3 == $i4 goto label1;

        $c2 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char mask>;

        $i5 = (int) c0;

        $i6 = (int) $c2;

        if $i5 == $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void appendRegExpForChar(char, java.lang.StringBuilder)
    {
        char c0, $c1, $c2;
        int $i3, $i4, $i5, $i6;
        java.lang.StringBuilder r1;
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.StringBuilder;

        $c1 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char unlimited>;

        $i3 = (int) c0;

        $i4 = (int) $c1;

        if $i3 != $i4 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*");

        goto label3;

     label1:
        $c2 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: char mask>;

        $i5 = (int) c0;

        $i6 = (int) $c2;

        if $i5 != $i6 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label3:
        return;
    }

    protected void truncatedToPrefixAndPattern()
    {
        int $i0, i3, $i4;
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        java.lang.String $r1, $r2, $r3, $r5, $r7, $r9, $r10, $r11;
        boolean $z0;
        org.apache.lucene.util.BytesRef $r4;
        char $c1, $c2;
        java.lang.StringBuilder $r6;
        java.util.regex.Pattern $r8;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label2;

        $r10 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        $c2 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(i3);

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: boolean matchingChar(char)>($c2);

        if $z0 == 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String prefix> = $r3;

        $r4 = new org.apache.lucene.util.BytesRef;

        $r5 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String prefix>;

        specialinvoke $r4.<org.apache.lucene.util.BytesRef: void <init>(java.lang.CharSequence)>($r5);

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: org.apache.lucene.util.BytesRef prefixRef> = $r4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

     label3:
        $r11 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        if i3 >= $i4 goto label4;

        $r9 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String truncated>;

        $c1 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i3);

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: void appendRegExpForChar(char,java.lang.StringBuilder)>($c1, $r6);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r7);

        r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.util.regex.Pattern pattern> = $r8;

        return;
    }

    public void visitMatchingTerms(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor) throws java.io.IOException
    {
        java.lang.Throwable $r17;
        org.apache.lucene.index.Term $r16;
        java.util.regex.Matcher $r6;
        org.apache.lucene.index.TermsEnum $r7;
        int $i0;
        org.apache.lucene.queryparser.surround.query.SrndTruncQuery r0;
        java.lang.String $r1, r3, $r13, $r14;
        boolean $z0, $z1;
        org.apache.lucene.index.Terms $r4;
        org.apache.lucene.util.BytesRef $r8, $r12, r18;
        org.apache.lucene.index.TermsEnum$SeekStatus $r9, $r10, $r11;
        java.util.regex.Pattern $r5;
        org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor r15;
        org.apache.lucene.index.IndexReader r2;

        r0 := @this: org.apache.lucene.queryparser.surround.query.SrndTruncQuery;

        r2 := @parameter0: org.apache.lucene.index.IndexReader;

        r3 := @parameter1: java.lang.String;

        r15 := @parameter2: org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.lang.String prefix>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r4 = staticinvoke <org.apache.lucene.index.MultiFields: org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader,java.lang.String)>(r2, r3);

        if $r4 == null goto label9;

        $r5 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: java.util.regex.Pattern pattern>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("");

     label1:
        $r7 = virtualinvoke $r4.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r8 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: org.apache.lucene.util.BytesRef prefixRef>;

        $r9 = virtualinvoke $r7.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef)>($r8);

        $r10 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus FOUND>;

        if $r9 != $r10 goto label2;

        r18 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: org.apache.lucene.util.BytesRef prefixRef>;

        goto label4;

     label2:
        $r11 = <org.apache.lucene.index.TermsEnum$SeekStatus: org.apache.lucene.index.TermsEnum$SeekStatus NOT_FOUND>;

        if $r9 != $r11 goto label3;

        r18 = virtualinvoke $r7.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef term()>();

        goto label4;

     label3:
        r18 = null;

     label4:
        if r18 == null goto label6;

        if r18 == null goto label6;

        $r12 = r0.<org.apache.lucene.queryparser.surround.query.SrndTruncQuery: org.apache.lucene.util.BytesRef prefixRef>;

        $z0 = staticinvoke <org.apache.lucene.util.StringHelper: boolean startsWith(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef)>(r18, $r12);

        if $z0 == 0 goto label6;

        $r13 = virtualinvoke r18.<org.apache.lucene.util.BytesRef: java.lang.String utf8ToString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>($i0);

        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>($r14);

        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label5;

        $r16 = new org.apache.lucene.index.Term;

        specialinvoke $r16.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r3, $r13);

        interfaceinvoke r15.<org.apache.lucene.queryparser.surround.query.SimpleTerm$MatchingTermVisitor: void visitMatchingTerm(org.apache.lucene.index.Term)>($r16);

     label5:
        r18 = virtualinvoke $r7.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        goto label4;

     label6:
        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        goto label9;

     label7:
        $r17 := @caughtexception;

     label8:
        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        throw $r17;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
