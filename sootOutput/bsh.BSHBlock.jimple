class bsh.BSHBlock extends bsh.SimpleNode
{
    public boolean isSynchronized;

    void <init>(int)
    {
        int i0;
        bsh.BSHBlock r0;

        r0 := @this: bsh.BSHBlock;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        r0.<bsh.BSHBlock: boolean isSynchronized> = 0;

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r2;
        bsh.BSHBlock r0;
        java.lang.Object $r3;
        bsh.CallStack r1;

        r0 := @this: bsh.BSHBlock;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        $r3 = virtualinvoke r0.<bsh.BSHBlock: java.lang.Object eval(bsh.CallStack,bsh.Interpreter,boolean)>(r1, r2, 0);

        return $r3;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter, boolean) throws bsh.EvalError
    {
        java.lang.Throwable $r5;
        bsh.Interpreter r2;
        bsh.BSHBlock r0;
        bsh.SimpleNode r7;
        bsh.CallStack r1;
        java.lang.Object r3, r6, r8;
        bsh.Node $r4;
        boolean $z0, $z1, z2;

        r0 := @this: bsh.BSHBlock;

        r1 := @parameter0: bsh.CallStack;

        r2 := @parameter1: bsh.Interpreter;

        z2 := @parameter2: boolean;

        r6 = null;

        $z0 = r0.<bsh.BSHBlock: boolean isSynchronized>;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<bsh.BSHBlock: bsh.Node jjtGetChild(int)>(0);

        r7 = (bsh.SimpleNode) $r4;

        r6 = virtualinvoke r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r2);

     label1:
        $z1 = r0.<bsh.BSHBlock: boolean isSynchronized>;

        if $z1 == 0 goto label6;

        r3 = r6;

        entermonitor r6;

     label2:
        r8 = virtualinvoke r0.<bsh.BSHBlock: java.lang.Object evalBlock(bsh.CallStack,bsh.Interpreter,boolean,bsh.BSHBlock$NodeFilter)>(r1, r2, z2, null);

        exitmonitor r6;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

        exitmonitor r3;

     label5:
        throw $r5;

     label6:
        r8 = virtualinvoke r0.<bsh.BSHBlock: java.lang.Object evalBlock(bsh.CallStack,bsh.Interpreter,boolean,bsh.BSHBlock$NodeFilter)>(r1, r2, z2, null);

     label7:
        return r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    java.lang.Object evalBlock(bsh.CallStack, bsh.Interpreter, boolean, bsh.BSHBlock$NodeFilter) throws bsh.EvalError
    {
        java.lang.Throwable $r10;
        bsh.NameSpace $r8, r12;
        bsh.BSHBlock r0;
        bsh.BSHBlock$NodeFilter r2;
        bsh.SimpleNode r6, r13;
        bsh.CallStack r3;
        byte b1, $b4, $b5;
        int $i0, i2, i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        bsh.BlockNameSpace $r9;
        bsh.Interpreter r4;
        java.lang.Object $r7, r11;
        bsh.Node $r1, $r5;

        r0 := @this: bsh.BSHBlock;

        r3 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        z0 := @parameter2: boolean;

        r2 := @parameter3: bsh.BSHBlock$NodeFilter;

        r11 = <bsh.Primitive: bsh.Primitive VOID>;

        r12 = null;

        if z0 != 0 goto label01;

        $r8 = virtualinvoke r3.<bsh.CallStack: bsh.NameSpace top()>();

        r12 = $r8;

        $r9 = new bsh.BlockNameSpace;

        specialinvoke $r9.<bsh.BlockNameSpace: void <init>(bsh.NameSpace)>($r8);

        virtualinvoke r3.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r9);

     label01:
        $z1 = r0.<bsh.BSHBlock: boolean isSynchronized>;

        if $z1 == 0 goto label02;

        $b5 = 1;

        $b4 = 1;

        goto label03;

     label02:
        $b5 = 0;

        $b4 = 0;

     label03:
        b1 = $b5;

        $i0 = virtualinvoke r0.<bsh.BSHBlock: int jjtGetNumChildren()>();

     label04:
        i2 = $b4;

        goto label08;

     label05:
        $r1 = virtualinvoke r0.<bsh.BSHBlock: bsh.Node jjtGetChild(int)>(i2);

        r13 = (bsh.SimpleNode) $r1;

        if r2 == null goto label06;

        $z3 = interfaceinvoke r2.<bsh.BSHBlock$NodeFilter: boolean isVisible(bsh.SimpleNode)>(r13);

        if $z3 != 0 goto label06;

        goto label07;

     label06:
        $z2 = r13 instanceof bsh.BSHClassDeclaration;

        if $z2 == 0 goto label07;

        virtualinvoke r13.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

     label07:
        i2 = i2 + 1;

     label08:
        if i2 < $i0 goto label05;

        i3 = b1;

        goto label13;

     label09:
        $r5 = virtualinvoke r0.<bsh.BSHBlock: bsh.Node jjtGetChild(int)>(i3);

        r6 = (bsh.SimpleNode) $r5;

        $z4 = r6 instanceof bsh.BSHClassDeclaration;

        if $z4 == 0 goto label10;

        goto label12;

     label10:
        if r2 == null goto label11;

        $z6 = interfaceinvoke r2.<bsh.BSHBlock$NodeFilter: boolean isVisible(bsh.SimpleNode)>(r6);

        if $z6 != 0 goto label11;

        goto label12;

     label11:
        $r7 = virtualinvoke r6.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        r11 = $r7;

        $z5 = $r7 instanceof bsh.ReturnControl;

        if $z5 == 0 goto label12;

        goto label14;

     label12:
        i3 = i3 + 1;

     label13:
        if i3 < $i0 goto label09;

     label14:
        goto label19;

     label15:
        goto label18;

     label16:
        $r10 := @caughtexception;

        goto label21;

     label17:
        throw $r10;

     label18:
        return r11;

     label19:
        if z0 != 0 goto label20;

        virtualinvoke r3.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>(r12);

     label20:
        goto label15;

     label21:
        if z0 != 0 goto label22;

        virtualinvoke r3.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>(r12);

     label22:
        goto label17;

        catch java.lang.Throwable from label04 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }
}
