class org.joda.time.tz.ZoneInfoCompiler$Zone extends java.lang.Object
{
    public final java.lang.String iName;
    public final int iOffsetMillis;
    public final java.lang.String iRules;
    public final java.lang.String iFormat;
    public final int iUntilYear;
    public final org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear;
    private org.joda.time.tz.ZoneInfoCompiler$Zone iNext;

    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        java.lang.String $r2;
        java.util.StringTokenizer r1;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: java.util.StringTokenizer;

        $r2 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r2, r1);

        return;
    }

    private void <init>(java.lang.String, java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r10, r11;
        java.util.StringTokenizer r3;
        int $i0, i1;
        java.lang.String r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> = $r2;

        $r4 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r4);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis> = $i0;

        $r5 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r5);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> = $r6;

        $r7 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat> = $r8;

        i1 = 2147483647;

        r11 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>();

        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $z1 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label1;

        $r10 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r10.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>(r3);

        r11 = $r10;

     label1:
        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear> = i1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear> = r11;

        return;
    }

    void chain(java.util.StringTokenizer)
    {
        java.util.StringTokenizer r3;
        org.joda.time.tz.ZoneInfoCompiler$Zone r0, $r1, $r2, $r5;
        java.lang.String $r4;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r3 := @parameter0: java.util.StringTokenizer;

        $r1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r1 == null goto label1;

        $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        virtualinvoke $r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r3);

        goto label2;

     label1:
        $r2 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r4, r3);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> = $r2;

     label2:
        return;
    }

    public void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        org.joda.time.tz.DateTimeZoneBuilder r1;
        java.util.Map r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        r2 := @parameter1: java.util.Map;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r0, r1, r2);

        return;
    }

    private static void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone, org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r4;
        java.lang.StringBuffer $r13, $r14, $r16;
        java.util.Map r7;
        int $i0, $i1, $i2, $i3;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r10;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String $r1, $r2, $r3, $r5, $r8, $r11, $r15, $r17;
        org.joda.time.tz.ZoneInfoCompiler$Zone r18;
        java.lang.IllegalArgumentException $r12;
        java.lang.Exception $r6;
        java.lang.Object $r9;

        r18 := @parameter0: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r0 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder;

        r7 := @parameter2: java.util.Map;

     label1:
        if r18 == null goto label8;

        $i0 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>($i0);

        $r1 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        if $r1 != null goto label2;

        $r5 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r5, 0);

        goto label6;

     label2:
        $r2 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $i1 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r2);

        $r3 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r3, $i1);

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        $r8 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r9 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r9;

        if r10 != null goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rules not found: ");

        $r15 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label5:
        $r11 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r10.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r0, $r11);

     label6:
        $i3 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        if $i3 != 2147483647 goto label7;

        goto label8;

     label7:
        $r4 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $i2 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        virtualinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>(r0, $i2);

        r18 = r18.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r20;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r21, $r24, $r25, $r26, $r29;
        int $i0, $i1;
        java.lang.String $r3, $r10, $r14, $r22, $r28, $r30;
        org.joda.time.tz.ZoneInfoCompiler$Zone r2, $r23, $r27;

        r2 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[Zone]\nName: ");

        $r3 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("OffsetMillis: ");

        $i0 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rules: ");

        $r10 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Format: ");

        $r14 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("UntilYear: ");

        $i1 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r20 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r23 != null goto label1;

        return $r22;

     label1:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...\n");

        $r27 = r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        $r28 = virtualinvoke $r27.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r30;
    }
}
