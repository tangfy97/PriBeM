public abstract class org.springframework.beans.factory.access.el.SpringBeanELResolver extends javax.el.ELResolver
{
    protected final org.apache.commons.logging.Log logger;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.beans.factory.access.el.SpringBeanELResolver r0;

        r0 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        specialinvoke r0.<javax.el.ELResolver: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.apache.commons.logging.Log logger> = $r2;

        return;
    }

    public java.lang.Object getValue(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException
    {
        org.springframework.beans.factory.access.el.SpringBeanELResolver r3;
        org.springframework.beans.factory.BeanFactory $r5;
        java.lang.Object r0, r1, $r7;
        org.apache.commons.logging.Log $r6, $r9;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r2, $r12;
        javax.el.ELContext r4;
        boolean $z0, $z1;

        r3 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r4 := @parameter0: javax.el.ELContext;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        if r0 != null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.springframework.beans.factory.BeanFactory getBeanFactory(javax.el.ELContext)>(r4);

        $z0 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $r6 = r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r9 = r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Successfully resolved variable \'");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in Spring BeanFactory");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r12);

     label1:
        virtualinvoke r4.<javax.el.ELContext: void setPropertyResolved(boolean)>(1);

        $r7 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r2);

        return $r7;

     label2:
        return null;
    }

    public java.lang.Class getType(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException
    {
        org.springframework.beans.factory.access.el.SpringBeanELResolver r3;
        org.springframework.beans.factory.BeanFactory $r5;
        java.lang.Object r0, r1;
        java.lang.Class $r6;
        java.lang.String $r2;
        javax.el.ELContext r4;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r4 := @parameter0: javax.el.ELContext;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.springframework.beans.factory.BeanFactory getBeanFactory(javax.el.ELContext)>(r4);

        $z0 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r4.<javax.el.ELContext: void setPropertyResolved(boolean)>(1);

        $r6 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>($r2);

        return $r6;

     label1:
        return null;
    }

    public void setValue(javax.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object) throws javax.el.ELException
    {
        java.lang.Throwable $r14;
        org.springframework.beans.factory.access.el.SpringBeanELResolver r3;
        javax.el.PropertyNotWritableException $r13;
        org.springframework.beans.factory.BeanFactory $r5;
        java.lang.Object r0, r1, r11;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.String $r2, $r10;
        javax.el.ELContext r4;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r4 := @parameter0: javax.el.ELContext;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        r11 := @parameter3: java.lang.Object;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.springframework.beans.factory.BeanFactory getBeanFactory(javax.el.ELContext)>(r4);

        $z0 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r13 = new javax.el.PropertyNotWritableException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Variable \'");

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' refers to a Spring bean which by definition is not writable");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<javax.el.PropertyNotWritableException: void <init>(java.lang.String)>($r10);

        $r14 = (java.lang.Throwable) $r13;

        throw $r14;

     label1:
        return;
    }

    public boolean isReadOnly(javax.el.ELContext, java.lang.Object, java.lang.Object) throws javax.el.ELException
    {
        org.springframework.beans.factory.access.el.SpringBeanELResolver r3;
        org.springframework.beans.factory.BeanFactory $r5;
        java.lang.Object r0, r1;
        java.lang.String $r2;
        javax.el.ELContext r4;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r4 := @parameter0: javax.el.ELContext;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.access.el.SpringBeanELResolver: org.springframework.beans.factory.BeanFactory getBeanFactory(javax.el.ELContext)>(r4);

        $z0 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator getFeatureDescriptors(javax.el.ELContext, java.lang.Object)
    {
        java.lang.Object r2;
        org.springframework.beans.factory.access.el.SpringBeanELResolver r0;
        javax.el.ELContext r1;

        r0 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r1 := @parameter0: javax.el.ELContext;

        r2 := @parameter1: java.lang.Object;

        return null;
    }

    public java.lang.Class getCommonPropertyType(javax.el.ELContext, java.lang.Object)
    {
        java.lang.Object r2;
        org.springframework.beans.factory.access.el.SpringBeanELResolver r0;
        javax.el.ELContext r1;

        r0 := @this: org.springframework.beans.factory.access.el.SpringBeanELResolver;

        r1 := @parameter0: javax.el.ELContext;

        r2 := @parameter1: java.lang.Object;

        return class "Ljava/lang/Object;";
    }

    protected abstract org.springframework.beans.factory.BeanFactory getBeanFactory(javax.el.ELContext);
}
