public class com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection extends com.sun.xml.bind.v2.runtime.reflect.Accessor
{
    public final java.lang.reflect.Field f;
    private static final java.util.logging.Logger logger;

    public void <init>(java.lang.reflect.Field)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection r0;
        java.lang.reflect.Field r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        r1 := @parameter0: java.lang.reflect.Field;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: void <init>(java.lang.reflect.Field,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.reflect.Field, boolean)
    {
        java.lang.Object[] $r5;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection r0;
        java.util.logging.Level $r7;
        com.sun.xml.bind.v2.runtime.reflect.Messages $r8;
        int $i0, $i1;
        java.lang.SecurityException $r4;
        java.lang.String $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.reflect.Field r1;
        java.util.logging.Logger $r6;
        java.lang.Class $r2, $r3, $r9;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        r1 := @parameter0: java.lang.reflect.Field;

        z4 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void <init>(java.lang.Class)>($r2);

        r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.lang.reflect.Field f> = r1;

        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r3.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label5;

     label1:
        virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        $z3 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean access$000()>();

        if $z3 != 0 goto label4;

        if z4 != 0 goto label4;

        $r6 = <com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r8 = <com.sun.xml.bind.v2.runtime.reflect.Messages: com.sun.xml.bind.v2.runtime.reflect.Messages UNABLE_TO_ACCESS_NON_PUBLIC_FIELD>;

        $r5 = newarray (java.lang.Object)[2];

        $r9 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r10;

        $r11 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r5[1] = $r11;

        $r12 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.reflect.Messages: java.lang.String format(java.lang.Object[])>($r5);

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, $r12, $r4);

     label4:
        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean access$002(boolean)>(1);

     label5:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.IllegalAccessException $r4;
        java.lang.IllegalAccessError $r5;
        java.lang.Object r1, $r3;
        java.lang.String $r6;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection r0;
        java.lang.reflect.Field $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.lang.reflect.Field f>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalAccessError;

        $r6 = virtualinvoke $r4.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalAccessException $r5;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection r0;
        java.lang.reflect.Field $r2;
        java.lang.IllegalAccessError $r6;
        java.util.Map $r3;
        java.lang.Object r1, r8;
        java.lang.Class $r4;
        java.lang.String $r7;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.Object;

     label1:
        if r8 != null goto label2;

        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map access$100()>();

        $r4 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.lang.Class valueType>;

        r8 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.lang.reflect.Field f>;

        virtualinvoke $r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r8);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalAccessError;

        $r7 = virtualinvoke $r5.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.IllegalAccessError: void <init>(java.lang.String)>($r7);

        throw $r6;

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor optimize(com.sun.xml.bind.v2.runtime.JAXBContextImpl)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r3;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection r1;
        java.lang.reflect.Field $r2;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r0;
        boolean $z0;

        r1 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        if r0 == null goto label1;

        $z0 = r0.<com.sun.xml.bind.v2.runtime.JAXBContextImpl: boolean fastBoot>;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = r1.<com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.lang.reflect.Field f>;

        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.OptimizedAccessorFactory: com.sun.xml.bind.v2.runtime.reflect.Accessor get(java.lang.reflect.Field)>($r2);

        if $r3 == null goto label2;

        return $r3;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection: java.util.logging.Logger logger> = $r0;

        return;
    }
}
