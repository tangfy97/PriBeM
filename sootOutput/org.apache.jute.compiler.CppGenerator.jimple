class org.apache.jute.compiler.CppGenerator extends java.lang.Object
{
    private java.lang.String mName;
    private java.util.ArrayList mInclFiles;
    private java.util.ArrayList mRecList;
    private final java.io.File outputDirectory;

    void <init>(java.lang.String, java.util.ArrayList, java.util.ArrayList, java.io.File)
    {
        org.apache.jute.compiler.CppGenerator r0;
        java.lang.String r3, $r4;
        java.io.File r1, $r2;
        java.util.ArrayList r5, r6;

        r0 := @this: org.apache.jute.compiler.CppGenerator;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.ArrayList;

        r6 := @parameter2: java.util.ArrayList;

        r1 := @parameter3: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory> = r1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName> = $r4;

        r0.<org.apache.jute.compiler.CppGenerator: java.util.ArrayList mInclFiles> = r5;

        r0.<org.apache.jute.compiler.CppGenerator: java.util.ArrayList mRecList> = r6;

        return;
    }

    void genCode() throws java.io.IOException
    {
        org.apache.jute.compiler.JFile r67;
        java.lang.StringBuilder $r4, $r7, $r8, $r12, $r15, $r16, $r18, $r19, $r23, $r24, $r26, $r27, $r31, $r32, $r36, $r37, $r39, $r40, $r44, $r45, $r49, $r50, $r54, $r55, $r57, $r58, $r62, $r63, $r65;
        java.util.ArrayList $r34, $r42;
        java.lang.String $r6, $r9, $r14, $r17, $r20, $r21, $r22, $r25, $r28, $r29, $r30, $r33, $r38, $r41, $r46, $r47, $r48, $r51, $r56, $r59, $r66;
        java.io.IOException $r61;
        java.io.File $r1, $r3, $r5, $r11, $r13, $r60, $r64;
        org.apache.jute.compiler.JRecord r68;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jute.compiler.CppGenerator r0;
        java.util.Iterator $r35, $r43;
        java.io.FileWriter $r2, $r10;
        java.lang.Object $r52, $r53;

        r0 := @this: org.apache.jute.compiler.CppGenerator;

        $r1 = r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r60 = r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory>;

        $z2 = virtualinvoke $r60.<java.io.File: boolean mkdirs()>();

        if $z2 != 0 goto label1;

        $r61 = new java.io.IOException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to create output directory ");

        $r64 = r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>($r66);

        throw $r61;

     label1:
        $r2 = new java.io.FileWriter;

        $r3 = new java.io.File;

        $r5 = r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".cc");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r9);

        specialinvoke $r2.<java.io.FileWriter: void <init>(java.io.File)>($r3);

        $r10 = new java.io.FileWriter;

        $r11 = new java.io.File;

        $r13 = r0.<org.apache.jute.compiler.CppGenerator: java.io.File outputDirectory>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".hh");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, $r17);

        specialinvoke $r10.<java.io.FileWriter: void <init>(java.io.File)>($r11);

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("/**\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* Licensed to the Apache Software Foundation (ASF) under one\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* or more contributor license agreements.  See the NOTICE file\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* distributed with this work for additional information\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* regarding copyright ownership.  The ASF licenses this file\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* to you under the Apache License, Version 2.0 (the\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* \"License\"); you may not use this file except in compliance\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* with the License.  You may obtain a copy of the License at\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("*     http://www.apache.org/licenses/LICENSE-2.0\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* Unless required by applicable law or agreed to in writing, software\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* See the License for the specific language governing permissions and\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("* limitations under the License.\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("*/\n");

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("/**\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* Licensed to the Apache Software Foundation (ASF) under one\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* or more contributor license agreements.  See the NOTICE file\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* distributed with this work for additional information\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* regarding copyright ownership.  The ASF licenses this file\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* to you under the Apache License, Version 2.0 (the\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* \"License\"); you may not use this file except in compliance\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* with the License.  You may obtain a copy of the License at\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("*     http://www.apache.org/licenses/LICENSE-2.0\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("*\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* Unless required by applicable law or agreed to in writing, software\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* distributed under the License is distributed on an \"AS IS\" BASIS,\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* See the License for the specific language governing permissions and\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("* limitations under the License.\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("*/\n");

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>("\n");

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#ifndef __");

        $r20 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String toUpperCase()>();

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#define __");

        $r28 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String toUpperCase()>();

        $r30 = virtualinvoke $r29.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__\n");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>($r33);

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>("#include \"recordio.hh\"\n");

        $r34 = r0.<org.apache.jute.compiler.CppGenerator: java.util.ArrayList mInclFiles>;

        $r35 = virtualinvoke $r34.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r53 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r67 = (org.apache.jute.compiler.JFile) $r53;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#include \"");

        $r56 = virtualinvoke r67.<org.apache.jute.compiler.JFile: java.lang.String getName()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".hh\"\n");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>($r59);

        goto label2;

     label3:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#include \"");

        $r38 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".hh\"\n");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.FileWriter: void write(java.lang.String)>($r41);

        $r42 = r0.<org.apache.jute.compiler.CppGenerator: java.util.ArrayList mRecList>;

        $r43 = virtualinvoke $r42.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r43.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r52 = interfaceinvoke $r43.<java.util.Iterator: java.lang.Object next()>();

        r68 = (org.apache.jute.compiler.JRecord) $r52;

        virtualinvoke r68.<org.apache.jute.compiler.JRecord: void genCppCode(java.io.FileWriter,java.io.FileWriter)>($r10, $r2);

        goto label4;

     label5:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#endif //");

        $r46 = r0.<org.apache.jute.compiler.CppGenerator: java.lang.String mName>;

        $r47 = virtualinvoke $r46.<java.lang.String: java.lang.String toUpperCase()>();

        $r48 = virtualinvoke $r47.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $r49 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__\n");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.FileWriter: void write(java.lang.String)>($r51);

        virtualinvoke $r10.<java.io.FileWriter: void close()>();

        virtualinvoke $r2.<java.io.FileWriter: void close()>();

        return;
    }
}
