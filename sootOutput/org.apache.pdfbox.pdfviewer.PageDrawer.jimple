public class org.apache.pdfbox.pdfviewer.PageDrawer extends org.apache.pdfbox.util.PDFStreamEngine
{
    private static final org.apache.commons.logging.Log LOG;
    private java.awt.Graphics2D graphics;
    private int clippingWindingRule;
    protected java.awt.Dimension pageSize;
    protected org.apache.pdfbox.pdmodel.PDPage page;
    private java.awt.geom.GeneralPath linePath;
    private java.awt.BasicStroke stroke;

    public void <init>() throws java.io.IOException
    {
        java.util.Properties $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        int $i1;
        java.awt.geom.GeneralPath $r3;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.util.Properties loadProperties(java.lang.String,boolean)>("org/apache/pdfbox/resources/PageDrawer.properties", 1);

        specialinvoke r0.<org.apache.pdfbox.util.PDFStreamEngine: void <init>(java.util.Properties)>($r1);

        $i1 = (int) -1;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: int clippingWindingRule> = $i1;

        $r3 = new java.awt.geom.GeneralPath;

        specialinvoke $r3.<java.awt.geom.GeneralPath: void <init>()>();

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath> = $r3;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke> = null;

        return;
    }

    public void drawPage(java.awt.Graphics, org.apache.pdfbox.pdmodel.PDPage, java.awt.Dimension) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceDictionary $r21;
        java.util.Map $r22;
        org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceStream r24;
        org.apache.pdfbox.pdmodel.PDResources $r28, $r32;
        java.awt.geom.AffineTransform $r30;
        java.awt.Dimension r4;
        java.util.List $r16;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Graphics r1;
        float $f0, $f1;
        org.apache.pdfbox.pdmodel.PDPage r3, $r13, $r15, $r27, $r31, $r33, $r34;
        java.awt.BasicStroke $r11;
        java.awt.Graphics2D $r2, $r7, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String $r20, r37;
        org.apache.pdfbox.cos.COSStream $r29, $r36;
        double $d0, $d1, $d2, $d3;
        org.apache.pdfbox.pdmodel.common.PDStream $r14, $r35;
        org.apache.pdfbox.pdmodel.common.PDRectangle $r19;
        java.awt.geom.Point2D$Float $r25;
        java.awt.RenderingHints$Key $r6, $r9;
        org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAnnotation r18;
        org.apache.pdfbox.util.Matrix $r26;
        java.lang.Object $r5, $r8, $r17, $r23;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r1 := @parameter0: java.awt.Graphics;

        r3 := @parameter1: org.apache.pdfbox.pdmodel.PDPage;

        r4 := @parameter2: java.awt.Dimension;

        $r2 = (java.awt.Graphics2D) r1;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics> = $r2;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page> = r3;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize> = r4;

        $r7 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke $r7.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        $r10 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r9 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_FRACTIONALMETRICS>;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_FRACTIONALMETRICS_ON>;

        virtualinvoke $r10.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r9, $r8);

        $r12 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r11 = new java.awt.BasicStroke;

        specialinvoke $r11.<java.awt.BasicStroke: void <init>(float,int,int)>(1.0F, 0, 0);

        virtualinvoke $r12.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r11);

        $r13 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r14 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDStream getContents()>();

        if $r14 == null goto label1;

        $r31 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r32 = virtualinvoke $r31.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources findResources()>();

        $r34 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r33 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r35 = virtualinvoke $r33.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDStream getContents()>();

        $r36 = virtualinvoke $r35.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: void processStream(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.cos.COSStream)>($r34, $r32, $r36);

     label1:
        $r15 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r16 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.PDPage: java.util.List getAnnotations()>();

        i6 = 0;

     label2:
        $i7 = interfaceinvoke $r16.<java.util.List: int size()>();

        if i6 >= $i7 goto label6;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i6);

        r18 = (org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAnnotation) $r17;

        $r19 = virtualinvoke r18.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAnnotation: org.apache.pdfbox.pdmodel.common.PDRectangle getRectangle()>();

        $r20 = virtualinvoke r18.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAnnotation: java.lang.String getAppearanceStream()>();

        r37 = $r20;

        $r21 = virtualinvoke r18.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAnnotation: org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceDictionary getAppearance()>();

        if $r21 == null goto label5;

        if $r20 != null goto label3;

        r37 = "default";

     label3:
        $r22 = virtualinvoke $r21.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceDictionary: java.util.Map getNormalAppearance()>();

        if $r22 == null goto label5;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r37);

        r24 = (org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceStream) $r23;

        if r24 == null goto label5;

        $r25 = new java.awt.geom.Point2D$Float;

        $f0 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>();

        $f1 = virtualinvoke $r19.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>();

        specialinvoke $r25.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f0, $f1);

        $r26 = virtualinvoke r24.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceStream: org.apache.pdfbox.util.Matrix getMatrix()>();

        if $r26 == null goto label4;

        $r30 = virtualinvoke $r26.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>();

        virtualinvoke $r30.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r25, $r25);

     label4:
        $d0 = virtualinvoke $r25.<java.awt.geom.Point2D: double getX()>();

        $i0 = (int) $d0;

        $d1 = virtualinvoke $r25.<java.awt.geom.Point2D: double getY()>();

        $i1 = (int) $d1;

        $i2 = neg $i1;

        virtualinvoke r1.<java.awt.Graphics: void translate(int,int)>($i0, $i2);

        $r27 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        $r28 = virtualinvoke r24.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceStream: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        $r29 = virtualinvoke r24.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceStream: org.apache.pdfbox.cos.COSStream getStream()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: void processSubStream(org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDResources,org.apache.pdfbox.cos.COSStream)>($r27, $r28, $r29);

        $d2 = virtualinvoke $r25.<java.awt.geom.Point2D: double getX()>();

        $i3 = (int) $d2;

        $i4 = neg $i3;

        $d3 = virtualinvoke $r25.<java.awt.geom.Point2D: double getY()>();

        $i5 = (int) $d3;

        virtualinvoke r1.<java.awt.Graphics: void translate(int,int)>($i4, $i5);

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        return;
    }

    public void dispose()
    {
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics> = null;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath> = null;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page> = null;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize> = null;

        return;
    }

    protected void processTextPosition(org.apache.pdfbox.util.TextPosition)
    {
        java.awt.Color $r4, $r6, $r7, $r8, $r9, $r13, $r17;
        org.apache.pdfbox.pdmodel.text.PDTextState $r2, $r24;
        java.awt.geom.AffineTransform $r42;
        java.lang.StringBuilder $r20, $r22, $r25, $r26, $r27, $r28, $r29;
        float[] $r5;
        org.apache.pdfbox.pdmodel.font.PDFont $r38;
        java.lang.String $r30, $r46;
        java.io.IOException $r32;
        org.apache.pdfbox.pdmodel.common.PDMatrix $r43;
        int[] $r47;
        java.awt.Shape $r45;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r1, $r23;
        java.awt.Composite r34;
        org.apache.pdfbox.util.TextPosition r11;
        java.awt.Dimension $r15, $r19, $r41;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Paint r35;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        java.awt.color.ColorSpace $r10;
        java.awt.Graphics2D $r36, $r37, $r44, $r48;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1;
        org.apache.pdfbox.util.Matrix $r39, $r40;
        org.apache.commons.logging.Log $r21, $r33;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r3, $r12, $r14, $r16, $r18, $r31;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r11 := @parameter0: org.apache.pdfbox.util.TextPosition;

     label1:
        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState getTextState()>();

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.text.PDTextState: int getRenderingMode()>();

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        r34 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getNonStrokeJavaComposite()>();

        $r16 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        $r17 = virtualinvoke $r16.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

        r35 = $r17;

        if $r17 != null goto label6;

        $r18 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        $r19 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i5 = $r19.<java.awt.Dimension: int height>;

        r35 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Paint getPaint(int)>($i5);

        goto label6;

     label3:
        r34 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getStrokeJavaComposite()>();

        $r12 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

        r35 = $r13;

        if $r13 != null goto label6;

        $r14 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r15 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i4 = $r15.<java.awt.Dimension: int height>;

        r35 = virtualinvoke $r14.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Paint getPaint(int)>($i4);

        goto label6;

     label4:
        $r3 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

        $r5 = newarray (float)[3];

        $r6 = <java.awt.Color: java.awt.Color black>;

        $i1 = virtualinvoke $r6.<java.awt.Color: int getRed()>();

        $f0 = (float) $i1;

        $r5[0] = $f0;

        $r7 = <java.awt.Color: java.awt.Color black>;

        $i2 = virtualinvoke $r7.<java.awt.Color: int getGreen()>();

        $f1 = (float) $i2;

        $r5[1] = $f1;

        $r8 = <java.awt.Color: java.awt.Color black>;

        $i3 = virtualinvoke $r8.<java.awt.Color: int getBlue()>();

        $f2 = (float) $i3;

        $r5[2] = $f2;

        $r9 = new java.awt.Color;

        $r10 = virtualinvoke $r4.<java.awt.Color: java.awt.color.ColorSpace getColorSpace()>();

        specialinvoke $r9.<java.awt.Color: void <init>(java.awt.color.ColorSpace,float[],float)>($r10, $r5, 0.0F);

        r35 = $r9;

        r34 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getStrokeJavaComposite()>();

        goto label6;

     label5:
        $r21 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported RenderingMode ");

        $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r24 = virtualinvoke $r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState getTextState()>();

        $i6 = virtualinvoke $r24.<org.apache.pdfbox.pdmodel.text.PDTextState: int getRenderingMode()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in PageDrawer.processTextPosition().");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using RenderingMode ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

        r34 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getNonStrokeJavaComposite()>();

        $r31 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        r35 = virtualinvoke $r31.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

     label6:
        $r36 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r36.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(r34);

        $r37 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r37.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r35);

        $r38 = virtualinvoke r11.<org.apache.pdfbox.util.TextPosition: org.apache.pdfbox.pdmodel.font.PDFont getFont()>();

        $r39 = virtualinvoke r11.<org.apache.pdfbox.util.TextPosition: org.apache.pdfbox.util.Matrix getTextPos()>();

        $r40 = virtualinvoke $r39.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix copy()>();

        $f3 = virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: float getXPosition()>();

        $r41 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i7 = $r41.<java.awt.Dimension: int height>;

        $f4 = (float) $i7;

        $f5 = virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: float getYPosition()>();

        $f6 = $f4 - $f5;

        virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(2, 0, 0.0F);

        virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(2, 1, 0.0F);

        $f7 = virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 1);

        $f8 = -1.0F * $f7;

        virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(0, 1, $f8);

        $f9 = virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 0);

        $f10 = -1.0F * $f9;

        virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(1, 0, $f10);

        $r42 = virtualinvoke $r40.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>();

        $r43 = virtualinvoke $r38.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.common.PDMatrix getFontMatrix()>();

        $f11 = virtualinvoke $r43.<org.apache.pdfbox.pdmodel.common.PDMatrix: float getValue(int,int)>(0, 0);

        $f12 = $f11 * 1000.0F;

        $d0 = (double) $f12;

        $f13 = virtualinvoke $r43.<org.apache.pdfbox.pdmodel.common.PDMatrix: float getValue(int,int)>(1, 1);

        $f14 = $f13 * 1000.0F;

        $d1 = (double) $f14;

        virtualinvoke $r42.<java.awt.geom.AffineTransform: void scale(double,double)>($d0, $d1);

        $r44 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r45 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        virtualinvoke $r44.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r45);

        $r46 = virtualinvoke r11.<org.apache.pdfbox.util.TextPosition: java.lang.String getCharacter()>();

        $r47 = virtualinvoke r11.<org.apache.pdfbox.util.TextPosition: int[] getCodePoints()>();

        $r48 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r38.<org.apache.pdfbox.pdmodel.font.PDFont: void drawString(java.lang.String,int[],java.awt.Graphics,float,java.awt.geom.AffineTransform,float,float)>($r46, $r47, $r48, 1.0F, $r42, $f3, $f6);

     label7:
        goto label9;

     label8:
        $r32 := @caughtexception;

        $r33 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r32, $r32);

     label9:
        return;

        catch java.io.IOException from label1 to label7 with label8;
    }

    public java.awt.Graphics2D getGraphics()
    {
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Graphics2D $r1;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        return $r1;
    }

    public org.apache.pdfbox.pdmodel.PDPage getPage()
    {
        org.apache.pdfbox.pdmodel.PDPage $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage page>;

        return $r1;
    }

    public java.awt.Dimension getPageSize()
    {
        java.awt.Dimension $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        return $r1;
    }

    public double fixY(double)
    {
        java.awt.Dimension $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        double $d0, d1, $d2;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        d1 := @parameter0: double;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $d0 = virtualinvoke $r1.<java.awt.Dimension: double getHeight()>();

        $d2 = $d0 - d1;

        return $d2;
    }

    public java.awt.geom.GeneralPath getLinePath()
    {
        java.awt.geom.GeneralPath $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath>;

        return $r1;
    }

    public void setLinePath(java.awt.geom.GeneralPath)
    {
        java.awt.geom.Point2D $r4;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.geom.GeneralPath $r1, r2, $r3, $r5;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: java.awt.geom.GeneralPath;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath>;

        $r4 = virtualinvoke $r3.<java.awt.geom.GeneralPath: java.awt.geom.Point2D getCurrentPoint()>();

        if $r4 != null goto label2;

     label1:
        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath> = r2;

        goto label3;

     label2:
        $r5 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath linePath>;

        virtualinvoke $r5.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r2, 0);

     label3:
        return;
    }

    public void fillPath(int) throws java.io.IOException
    {
        java.awt.Color $r6;
        java.awt.Shape $r14;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r2, $r4, $r13, $r21, $r28;
        java.awt.Composite $r3;
        java.awt.Dimension $r30;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Paint r31;
        java.lang.StringBuilder $r18, $r20, $r25, $r26;
        java.awt.geom.GeneralPath $r8, $r16, $r17;
        java.awt.Graphics2D $r1, $r7, $r11, $r12, $r15;
        int i0, $i1;
        java.lang.String $r24, $r27;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r23;
        java.awt.RenderingHints$Key $r10;
        java.lang.Object $r9;
        org.apache.commons.logging.Log $r19;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r5, $r22, $r29;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getNonStrokeJavaComposite()>();

        virtualinvoke $r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r3);

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

        r31 = $r6;

        if $r6 != null goto label1;

        $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r29 = virtualinvoke $r28.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        $r30 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i1 = $r30.<java.awt.Dimension: int height>;

        r31 = virtualinvoke $r29.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Paint getPaint(int)>($i1);

     label1:
        if r31 != null goto label2;

        $r19 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ColorSpace ");

        $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r22 = virtualinvoke $r21.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()>();

        $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>();

        $r24 = virtualinvoke $r23.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t provide a non-stroking color, using white instead!");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r27);

        r31 = <java.awt.Color: java.awt.Color WHITE>;

     label2:
        $r7 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r31);

        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        virtualinvoke $r8.<java.awt.geom.GeneralPath: void setWindingRule(int)>(i0);

        $r11 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r10, $r9);

        $r12 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r14 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        virtualinvoke $r12.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r14);

        $r15 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        virtualinvoke $r15.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r16);

        $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        virtualinvoke $r17.<java.awt.geom.GeneralPath: void reset()>();

        return;
    }

    public void setStroke(java.awt.BasicStroke)
    {
        java.awt.BasicStroke r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r1 := @parameter0: java.awt.BasicStroke;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke> = r1;

        return;
    }

    public java.awt.BasicStroke getStroke()
    {
        java.awt.BasicStroke $r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        return $r1;
    }

    private java.awt.BasicStroke calculateStroke()
    {
        byte $b0, $b2, $b3;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r1, $r2;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, f8, $f9, $f10;
        java.awt.BasicStroke $r4, $r5, $r6, r9, $r11, $r12, $r13, $r14, $r15;
        float[] $r7;
        int $i1, i4, $i5, $i6, $i7, $i8, $i9;
        double $d0, $d1;
        org.apache.pdfbox.util.Matrix $r3;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $d0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double getLineWidth()>();

        f7 = (float) $d0;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        if $r3 == null goto label1;

        $f5 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        $b2 = $f5 cmpl 0.0F;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label1;

        $f6 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        f7 = f7 * $f6;

     label1:
        $d1 = (double) f7;

        $b3 = $d1 cmpg 0.25;

        $i8 = (int) $b3;

        if $i8 >= 0 goto label2;

        f7 = 0.25F;

     label2:
        $r4 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        if $r4 != null goto label3;

        $r14 = new java.awt.BasicStroke;

        specialinvoke $r14.<java.awt.BasicStroke: void <init>(float)>(f7);

        r9 = $r14;

        goto label7;

     label3:
        $r5 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        $f0 = virtualinvoke $r5.<java.awt.BasicStroke: float getDashPhase()>();

        f8 = $f0;

        $r6 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        $r7 = virtualinvoke $r6.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r7 == null goto label6;

        if $r3 == null goto label5;

        $f1 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        $b0 = $f1 cmpl 0.0F;

        $i9 = (int) $b0;

        if $i9 <= 0 goto label5;

        i4 = 0;

     label4:
        $i1 = lengthof $r7;

        if i4 >= $i1 goto label5;

        $f2 = $r7[i4];

        $f3 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        $f4 = $f2 * $f3;

        $r7[i4] = $f4;

        i4 = i4 + 1;

        goto label4;

     label5:
        $f9 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        f8 = $f0 * $f9;

     label6:
        $r15 = new java.awt.BasicStroke;

        $r11 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        $i5 = virtualinvoke $r11.<java.awt.BasicStroke: int getEndCap()>();

        $r12 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        $i6 = virtualinvoke $r12.<java.awt.BasicStroke: int getLineJoin()>();

        $r13 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke stroke>;

        $f10 = virtualinvoke $r13.<java.awt.BasicStroke: float getMiterLimit()>();

        specialinvoke $r15.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>(f7, $i5, $i6, $f10, $r7, f8);

        r9 = $r15;

     label7:
        return r9;
    }

    public void strokePath() throws java.io.IOException
    {
        java.awt.Color $r6;
        java.awt.Shape $r15;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r2, $r4, $r14, $r21, $r28;
        java.awt.Composite $r3;
        java.awt.Dimension $r30;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Paint r31;
        java.awt.BasicStroke $r9;
        java.lang.StringBuilder $r18, $r20, $r25, $r26;
        java.awt.geom.GeneralPath $r16;
        java.awt.Graphics2D $r1, $r7, $r8, $r12, $r13, $r17;
        int $i0;
        java.lang.String $r24, $r27;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r23;
        java.awt.RenderingHints$Key $r11;
        java.lang.Object $r10;
        org.apache.commons.logging.Log $r19;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r5, $r22, $r29;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getStrokeJavaComposite()>();

        virtualinvoke $r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r3);

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Color getJavaColor()>();

        r31 = $r6;

        if $r6 != null goto label1;

        $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r29 = virtualinvoke $r28.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r30 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i0 = $r30.<java.awt.Dimension: int height>;

        r31 = virtualinvoke $r29.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.awt.Paint getPaint(int)>($i0);

     label1:
        if r31 != null goto label2;

        $r19 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ColorSpace ");

        $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r22 = virtualinvoke $r21.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()>();

        $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>();

        $r24 = virtualinvoke $r23.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t provide a stroking color, using white instead!");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r27);

        r31 = <java.awt.Color: java.awt.Color WHITE>;

     label2:
        $r7 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r7.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r31);

        $r8 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r9 = specialinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.BasicStroke calculateStroke()>();

        virtualinvoke $r8.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r9);

        $r12 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r11 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r10 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke $r12.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r11, $r10);

        $r13 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r15 = virtualinvoke $r14.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        virtualinvoke $r13.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r15);

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        $r17 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r17.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r16);

        virtualinvoke $r16.<java.awt.geom.GeneralPath: void reset()>();

        return;
    }

    public void colorChanged(boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        z0 := @parameter0: boolean;

        return;
    }

    public java.awt.geom.Point2D$Double transformedPoint(double, double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r2;
        double[] $r0;
        java.awt.geom.AffineTransform $r4;
        java.awt.geom.Point2D$Double $r5;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;
        org.apache.pdfbox.util.Matrix $r3;
        double d0, d1, $d2, $d3, $d4, $d5;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = newarray (double)[2];

        $r0[0] = d0;

        $r0[1] = d1;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>();

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void transform(double[],int,double[],int,int)>($r0, 0, $r0, 0, 1);

        $d2 = $r0[1];

        $d3 = virtualinvoke r1.<org.apache.pdfbox.pdfviewer.PageDrawer: double fixY(double)>($d2);

        $r0[1] = $d3;

        $r5 = new java.awt.geom.Point2D$Double;

        $d5 = $r0[0];

        $d4 = $r0[1];

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r5;
    }

    public void setClippingPath(int)
    {
        int i0;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: void setClippingWindingRule(int)>(i0);

        return;
    }

    public void setClippingWindingRule(int)
    {
        int i0;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        i0 := @parameter0: int;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: int clippingWindingRule> = i0;

        return;
    }

    public void endPath()
    {
        java.awt.Shape $r5, $r8;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r1, $r7;
        java.awt.geom.Area $r11, $r12;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        int $i0, $i1, $i3, $i5;
        java.lang.Object $r3;
        java.awt.geom.GeneralPath $r2, r4, $r10;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        $i0 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: int clippingWindingRule>;

        $i3 = (int) -1;

        if $i0 <= $i3 goto label3;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        $r3 = virtualinvoke $r2.<java.awt.geom.GeneralPath: java.lang.Object clone()>();

        r4 = (java.awt.geom.GeneralPath) $r3;

        $i1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: int clippingWindingRule>;

        virtualinvoke r4.<java.awt.geom.GeneralPath: void setWindingRule(int)>($i1);

        $r5 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        if $r5 == null goto label1;

        $r11 = new java.awt.geom.Area;

        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r8 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        specialinvoke $r11.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r8);

        $r12 = new java.awt.geom.Area;

        specialinvoke $r12.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r4);

        virtualinvoke $r11.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r12);

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setCurrentClippingPath(java.awt.Shape)>($r11);

        goto label2;

     label1:
        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setCurrentClippingPath(java.awt.Shape)>(r4);

     label2:
        $i5 = (int) -1;

        r0.<org.apache.pdfbox.pdfviewer.PageDrawer: int clippingWindingRule> = $i5;

     label3:
        $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.geom.GeneralPath getLinePath()>();

        virtualinvoke $r10.<java.awt.geom.GeneralPath: void reset()>();

        return;
    }

    public void drawImage(java.awt.Image, java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r6;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r2, $r5;
        java.awt.Composite $r3;
        java.awt.Image r7;
        java.awt.geom.AffineTransform r8;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Graphics2D $r1, $r4, $r9;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r7 := @parameter0: java.awt.Image;

        r8 := @parameter1: java.awt.geom.AffineTransform;

        $r1 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getStrokeJavaComposite()>();

        virtualinvoke $r1.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r3);

        $r4 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        virtualinvoke $r4.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r6);

        $r9 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r9.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>(r7, r8, null);

        return;
    }

    public void SHFill(org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName r1;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r1 := @parameter0: org.apache.pdfbox.cos.COSName;

        virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: void shFill(org.apache.pdfbox.cos.COSName)>(r1);

        return;
    }

    public void shFill(org.apache.pdfbox.cos.COSName) throws java.io.IOException
    {
        java.awt.Color $r21;
        java.util.Map $r2;
        org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint $r28;
        java.awt.Shape $r54;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r13, $r46, $r53;
        java.awt.Composite $r47;
        org.apache.pdfbox.pdmodel.PDResources $r1;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingResources r6;
        java.awt.Dimension $r23, $r26, $r29, $r32, $r35;
        org.apache.pdfbox.pdfviewer.PageDrawer r0;
        java.awt.Paint r44;
        java.lang.StringBuilder $r7, $r9, $r11, $r15, $r17, $r18, $r19, $r38, $r39, $r40, $r41, $r42;
        org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint $r25;
        org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint $r34;
        java.awt.Graphics2D $r45, $r48, $r49, $r52;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4, $r10, $r12, $r20, $r43;
        org.apache.pdfbox.cos.COSName r3;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3 $r30;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4 $r27;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1 $r36;
        java.io.IOException $r37;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2 $r33;
        org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5 $r24;
        org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint $r22;
        org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint $r31;
        java.awt.RenderingHints$Key $r50;
        org.apache.pdfbox.util.Matrix $r14;
        java.lang.Object $r5, $r51;
        org.apache.commons.logging.Log $r8, $r16;

        r0 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r3 := @parameter0: org.apache.pdfbox.cos.COSName;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDResources getResources()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDResources: java.util.Map getShadings()>();

        $r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingResources) $r5;

        $r8 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shading = ");

        $r10 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

        $i0 = virtualinvoke r6.<org.apache.pdfbox.pdmodel.graphics.shading.PDShadingResources: int getShadingType()>();

        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r14 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label6;
            default: goto label7;
        };

     label1:
        $r34 = new org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint;

        $r36 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1) r6;

        $r35 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i5 = $r35.<java.awt.Dimension: int height>;

        specialinvoke $r34.<org.apache.pdfbox.pdmodel.graphics.shading.Type1ShadingPaint: void <init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType1,org.apache.pdfbox.util.Matrix,int)>($r36, $r14, $i5);

        r44 = $r34;

        goto label8;

     label2:
        $r31 = new org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint;

        $r33 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2) r6;

        $r32 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i4 = $r32.<java.awt.Dimension: int height>;

        specialinvoke $r31.<org.apache.pdfbox.pdmodel.graphics.shading.AxialShadingPaint: void <init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType2,org.apache.pdfbox.util.Matrix,int)>($r33, $r14, $i4);

        r44 = $r31;

        goto label8;

     label3:
        $r28 = new org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint;

        $r30 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3) r6;

        $r29 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i3 = $r29.<java.awt.Dimension: int height>;

        specialinvoke $r28.<org.apache.pdfbox.pdmodel.graphics.shading.RadialShadingPaint: void <init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType3,org.apache.pdfbox.util.Matrix,int)>($r30, $r14, $i3);

        r44 = $r28;

        goto label8;

     label4:
        $r25 = new org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint;

        $r27 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4) r6;

        $r26 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i2 = $r26.<java.awt.Dimension: int height>;

        specialinvoke $r25.<org.apache.pdfbox.pdmodel.graphics.shading.Type4ShadingPaint: void <init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType4,org.apache.pdfbox.util.Matrix,int)>($r27, $r14, $i2);

        r44 = $r25;

        goto label8;

     label5:
        $r22 = new org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint;

        $r24 = (org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5) r6;

        $r23 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension pageSize>;

        $i1 = $r23.<java.awt.Dimension: int height>;

        specialinvoke $r22.<org.apache.pdfbox.pdmodel.graphics.shading.Type5ShadingPaint: void <init>(org.apache.pdfbox.pdmodel.graphics.shading.PDShadingType5,org.apache.pdfbox.util.Matrix,int)>($r24, $r14, $i1);

        r44 = $r22;

        goto label8;

     label6:
        $r16 = <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shading type ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not yet supported");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

        $r21 = new java.awt.Color;

        specialinvoke $r21.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        r44 = $r21;

        goto label8;

     label7:
        $r37 = new java.io.IOException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ShadingType ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Shading ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r43);

        throw $r37;

     label8:
        $r45 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r46 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r47 = virtualinvoke $r46.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Composite getNonStrokeJavaComposite()>();

        virtualinvoke $r45.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r47);

        $r48 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        virtualinvoke $r48.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r44);

        $r49 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r50 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r51 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        virtualinvoke $r49.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r50, $r51);

        $r52 = r0.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Graphics2D graphics>;

        $r53 = virtualinvoke r0.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r54 = virtualinvoke $r53.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.Shape getCurrentClippingPath()>();

        virtualinvoke $r52.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r54);

        return;
    }

    protected void SHFill_Function(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_Axial(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_Radial(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_FreeGourad(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_LatticeGourad(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_CoonsPatch(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    protected void SHFill_TensorPatch(org.apache.pdfbox.pdmodel.graphics.PDShading) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.graphics.PDShading r2;
        java.io.IOException $r0;
        org.apache.pdfbox.pdfviewer.PageDrawer r1;

        r1 := @this: org.apache.pdfbox.pdfviewer.PageDrawer;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDShading;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Not Implemented");

        throw $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdfviewer/PageDrawer;");

        <org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
