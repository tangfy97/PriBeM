public class org.apache.batik.ext.awt.image.renderable.TileRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable implements org.apache.batik.ext.awt.image.renderable.TileRable
{
    private java.awt.geom.Rectangle2D tileRegion;
    private java.awt.geom.Rectangle2D tiledRegion;
    private boolean overflow;

    public java.awt.geom.Rectangle2D getTileRegion()
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tileRegion>;

        return $r1;
    }

    public void setTileRegion(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r1;
        java.lang.IllegalArgumentException $r2;
        java.awt.geom.Rectangle2D r0;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r0 := @parameter0: java.awt.geom.Rectangle2D;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r1.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tileRegion> = r0;

        return;
    }

    public java.awt.geom.Rectangle2D getTiledRegion()
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tiledRegion>;

        return $r1;
    }

    public void setTiledRegion(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r1;
        java.lang.IllegalArgumentException $r2;
        java.awt.geom.Rectangle2D r0;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r0 := @parameter0: java.awt.geom.Rectangle2D;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r1.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tiledRegion> = r0;

        return;
    }

    public boolean isOverflow()
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        return $z0;
    }

    public void setOverflow(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow> = z0;

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, boolean)
    {
        java.awt.geom.Rectangle2D r2, r3;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r3 := @parameter1: java.awt.geom.Rectangle2D;

        r2 := @parameter2: java.awt.geom.Rectangle2D;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: void setTileRegion(java.awt.geom.Rectangle2D)>(r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: void setTiledRegion(java.awt.geom.Rectangle2D)>(r3);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: void setOverflow(boolean)>(z0);

        return;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter)>(r1);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.awt.geom.Rectangle2D $r1, $r3;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tiledRegion>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.geom.Rectangle2D $r4, $r6, $r15, r18, r19;
        org.apache.batik.ext.awt.image.rendered.TileRed $r22;
        org.apache.batik.ext.awt.image.rendered.AffineRed $r14;
        java.awt.geom.AffineTransform $r2, $r7, $r23;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r21;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r3;
        java.awt.RenderingHints $r1, $r16, r17;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r5, $r11;
        java.awt.image.RenderedImage $r10;
        org.apache.batik.ext.awt.image.renderable.Filter $r8;
        java.awt.image.renderable.RenderContext r0, $r9;
        java.awt.Rectangle $r12, $r13, r20;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r24;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r17 = $r1;

        if $r1 != null goto label01;

        $r16 = new java.awt.RenderingHints;

        specialinvoke $r16.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r17 = $r16;

     label01:
        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearX()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d5 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d7 = $d0 * $d0;

        $d6 = $d3 * $d3;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        $d11 = $d1 * $d1;

        $d10 = $d2 * $d2;

        $d12 = $d11 + $d10;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $r5 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        if $r5 != null goto label02;

        r18 = $r4;

        goto label04;

     label02:
        $r6 = interfaceinvoke $r5.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        r18 = $r6;

        $z0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r6);

        if $z0 != 0 goto label03;

        return null;

     label03:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r4, $r6, $r4);

     label04:
        $r15 = r3.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tileRegion>;

        $d14 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getWidth()>();

        $d15 = $d14 * $d9;

        $d16 = staticinvoke <java.lang.Math: double ceil(double)>($d15);

        $i2 = (int) $d16;

        $d17 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getHeight()>();

        $d18 = $d17 * $d13;

        $d19 = staticinvoke <java.lang.Math: double ceil(double)>($d18);

        $i3 = (int) $d19;

        $d20 = (double) $i2;

        $d21 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getWidth()>();

        $d36 = $d20 / $d21;

        $d22 = (double) $i3;

        $d23 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getHeight()>();

        $d37 = $d22 / $d23;

        $d24 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getX()>();

        $d25 = $d24 * $d36;

        $d26 = staticinvoke <java.lang.Math: double floor(double)>($d25);

        $i4 = (int) $d26;

        $d27 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getY()>();

        $d28 = $d27 * $d37;

        $d29 = staticinvoke <java.lang.Math: double floor(double)>($d28);

        $i5 = (int) $d29;

        $d30 = (double) $i4;

        $d31 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getX()>();

        $d32 = $d31 * $d36;

        $d38 = $d30 - $d32;

        $d33 = (double) $i5;

        $d34 = virtualinvoke $r15.<java.awt.geom.RectangularShape: double getY()>();

        $d35 = $d34 * $d37;

        $d39 = $d33 - $d35;

        $r7 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d38, $d39);

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void scale(double,double)>($d36, $d37);

        $r8 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $z1 = r3.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        if $z1 == 0 goto label05;

        r19 = interfaceinvoke $r8.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label06;

     label05:
        r19 = $r15;

     label06:
        $r9 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r9.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r7, r19, r17);

        $r10 = interfaceinvoke $r8.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r9);

        if $r10 != null goto label07;

        return null;

     label07:
        $r11 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r18);

        $r12 = interfaceinvoke $r11.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        r20 = $r12;

        $i0 = $r12.<java.awt.Rectangle: int width>;

        if $i0 == 2147483647 goto label08;

        $i1 = $r12.<java.awt.Rectangle: int height>;

        if $i1 != 2147483647 goto label09;

     label08:
        $r13 = new java.awt.Rectangle;

        specialinvoke $r13.<java.awt.Rectangle: void <init>(int,int,int,int)>(-536870912, -536870912, 1073741823, 1073741823);

        r20 = $r13;

     label09:
        $r21 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.AbstractColorInterpolationRable: org.apache.batik.ext.awt.image.rendered.CachableRed convertSourceCS(java.awt.image.RenderedImage)>($r10);

        $r22 = new org.apache.batik.ext.awt.image.rendered.TileRed;

        specialinvoke $r22.<org.apache.batik.ext.awt.image.rendered.TileRed: void <init>(java.awt.image.RenderedImage,java.awt.Rectangle,int,int)>($r21, r20, $i2, $i3);

        $r23 = new java.awt.geom.AffineTransform;

        $d40 = $d0 / $d9;

        $d41 = $d3 / $d9;

        $d42 = $d2 / $d13;

        $d43 = $d1 / $d13;

        specialinvoke $r23.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d40, $d41, $d42, $d43, $d4, $d5);

        $d44 = $d9 / $d36;

        $d45 = $d13 / $d37;

        virtualinvoke $r23.<java.awt.geom.AffineTransform: void scale(double,double)>($d44, $d45);

        $d46 = neg $d38;

        $d47 = neg $d39;

        virtualinvoke $r23.<java.awt.geom.AffineTransform: void translate(double,double)>($d46, $d47);

        r24 = $r22;

        $z2 = virtualinvoke $r23.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z2 != 0 goto label10;

        $r14 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        specialinvoke $r14.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>($r22, $r23, r17);

        r24 = $r14;

     label10:
        return r24;
    }

    public java.awt.geom.Rectangle2D getActualTileBounds(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D $r1, r3, r4;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r0;
        java.awt.geom.Rectangle2D$Double $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r4 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tileRegion>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r3 = (java.awt.geom.Rectangle2D) $r2;

        $d0 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpg 0.0;

        $i4 = (int) $b0;

        if $i4 <= 0 goto label1;

        $d1 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpg 0.0;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label1;

        $d2 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $b2 = $d2 cmpg 0.0;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label1;

        $d3 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $b3 = $d3 cmpg 0.0;

        $i7 = (int) $b3;

        if $i7 > 0 goto label2;

     label1:
        return null;

     label2:
        $d4 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $d5 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getHeight()>();

        $d6 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $d7 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $d8 = staticinvoke <java.lang.Math: double min(double,double)>($d4, $d6);

        $d9 = staticinvoke <java.lang.Math: double min(double,double)>($d5, $d7);

        $r6 = new java.awt.geom.Rectangle2D$Double;

        $d10 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getX()>();

        $d11 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getY()>();

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d10, $d11, $d8, $d9);

        return $r6;
    }

    public java.awt.image.RenderedImage createTile(java.awt.image.renderable.RenderContext)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b32, $b35, $b38, $b41, $b44, $b45, $b46;
        java.awt.geom.Point2D$Double $r78;
        java.awt.geom.Rectangle2D$Double r50, r51, r52, r53, $r59, $r60, $r61, $r62, $r63, $r65, $r68, $r71, $r74;
        java.awt.image.RenderedImage r46, r47, r48, r49, r56;
        java.awt.image.renderable.RenderContext r0, $r66, $r69, $r72, $r75;
        java.awt.Graphics2D $r19;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i36, $i37, $i39, $i40, $i42, $i43, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63;
        java.lang.Object $r9;
        java.awt.geom.Rectangle2D $r5, $r7, $r8, r10;
        java.awt.geom.AffineTransform $r1, $r64, $r67, $r70, $r73, $r77;
        org.apache.batik.ext.awt.image.renderable.TileRable8Bit r4;
        java.awt.RenderingHints$Key $r25, $r31, $r37, $r43;
        java.awt.RenderingHints $r2, $r18, $r58;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.awt.Shape $r6, $r22, $r28, $r34, $r40, $r54;
        java.awt.image.BufferedImage $r76;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed $r79;
        org.apache.batik.ext.awt.image.renderable.Filter $r16;
        java.awt.Rectangle $r23, $r29, $r35, $r41, $r55;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, d115, d116, d117, d118, $d119, $d120, $d121;

        r4 := @this: org.apache.batik.ext.awt.image.renderable.TileRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        $r58 = new java.awt.RenderingHints;

        specialinvoke $r58.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        if $r2 == null goto label01;

        virtualinvoke $r58.<java.awt.RenderingHints: void add(java.awt.RenderingHints)>($r2);

     label01:
        $r5 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        $r7 = interfaceinvoke $r6.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r5.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r7);

        if $z0 != 0 goto label02;

        return null;

     label02:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r5, $r7, $r5);

        $r8 = r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: java.awt.geom.Rectangle2D tileRegion>;

        $r9 = virtualinvoke $r8.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r10 = (java.awt.geom.Rectangle2D) $r9;

        $d0 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpg 0.0;

        $i50 = (int) $b0;

        if $i50 <= 0 goto label03;

        $d1 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpg 0.0;

        $i51 = (int) $b1;

        if $i51 <= 0 goto label03;

        $d2 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $b2 = $d2 cmpg 0.0;

        $i52 = (int) $b2;

        if $i52 <= 0 goto label03;

        $d3 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $b3 = $d3 cmpg 0.0;

        $i53 = (int) $b3;

        if $i53 > 0 goto label04;

     label03:
        return null;

     label04:
        $d4 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getX()>();

        $d5 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getY()>();

        $d6 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getWidth()>();

        $d7 = virtualinvoke r10.<java.awt.geom.RectangularShape: double getHeight()>();

        $d8 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getX()>();

        $d9 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getY()>();

        $d10 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $d11 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $d12 = staticinvoke <java.lang.Math: double min(double,double)>($d6, $d10);

        $d13 = staticinvoke <java.lang.Math: double min(double,double)>($d7, $d11);

        $d14 = $d8 - $d4;

        d115 = $d14 % $d6;

        $d15 = $d9 - $d5;

        d116 = $d15 % $d7;

        $b4 = d115 cmpl 0.0;

        $i54 = (int) $b4;

        if $i54 <= 0 goto label05;

        d117 = $d6 - d115;

        goto label06;

     label05:
        d117 = d115 * -1.0;

     label06:
        $b5 = d116 cmpl 0.0;

        $i55 = (int) $b5;

        if $i55 <= 0 goto label07;

        d118 = $d7 - d116;

        goto label08;

     label07:
        d118 = d116 * -1.0;

     label08:
        $d16 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d17 = virtualinvoke $r1.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d18 = $d16 * d117;

        $d19 = staticinvoke <java.lang.Math: double floor(double)>($d18);

        $d20 = $d17 * d118;

        $d21 = staticinvoke <java.lang.Math: double floor(double)>($d20);

        $d113 = $d19 / $d16;

        $d114 = $d21 / $d17;

        $r59 = new java.awt.geom.Rectangle2D$Double;

        $d22 = $d4 + $d6;

        $d25 = $d22 - $d113;

        $d23 = $d5 + $d7;

        $d24 = $d23 - $d114;

        specialinvoke $r59.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d25, $d24, $d113, $d114);

        $r60 = new java.awt.geom.Rectangle2D$Double;

        $d26 = $d5 + $d7;

        $d28 = $d26 - $d114;

        $d27 = $d12 - $d113;

        specialinvoke $r60.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d4, $d28, $d27, $d114);

        $r61 = new java.awt.geom.Rectangle2D$Double;

        $d29 = $d4 + $d6;

        $d31 = $d29 - $d113;

        $d30 = $d13 - $d114;

        specialinvoke $r61.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d31, $d5, $d113, $d30);

        $r62 = new java.awt.geom.Rectangle2D$Double;

        $d33 = $d12 - $d113;

        $d32 = $d13 - $d114;

        specialinvoke $r62.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d4, $d5, $d33, $d32);

        $r63 = new java.awt.geom.Rectangle2D$Double;

        $d34 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getX()>();

        $d35 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getY()>();

        specialinvoke $r63.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d34, $d35, $d12, $d13);

        r46 = null;

        r47 = null;

        r48 = null;

        r49 = null;

        $r16 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $d36 = virtualinvoke $r59.<java.awt.geom.Rectangle2D$Double: double getWidth()>();

        $b6 = $d36 cmpl 0.0;

        $i56 = (int) $b6;

        if $i56 <= 0 goto label10;

        $d104 = virtualinvoke $r59.<java.awt.geom.Rectangle2D$Double: double getHeight()>();

        $b41 = $d104 cmpl 0.0;

        $i57 = (int) $b41;

        if $i57 <= 0 goto label10;

        $r40 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r59);

        $r41 = interfaceinvoke $r40.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i42 = $r41.<java.awt.Rectangle: int width>;

        if $i42 <= 0 goto label10;

        $i43 = $r41.<java.awt.Rectangle: int height>;

        if $i43 <= 0 goto label10;

        $r64 = new java.awt.geom.AffineTransform;

        specialinvoke $r64.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r1);

        $d105 = $r59.<java.awt.geom.Rectangle2D$Double: double x>;

        $d106 = neg $d105;

        $d110 = $d106 + $d8;

        $d107 = $r59.<java.awt.geom.Rectangle2D$Double: double y>;

        $d108 = neg $d107;

        $d109 = $d108 + $d9;

        virtualinvoke $r64.<java.awt.geom.AffineTransform: void translate(double,double)>($d110, $d109);

        r50 = $r59;

        $z4 = r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        if $z4 == 0 goto label09;

        $r65 = new java.awt.geom.Rectangle2D$Double;

        $d112 = $r59.<java.awt.geom.Rectangle2D$Double: double x>;

        $d111 = $r59.<java.awt.geom.Rectangle2D$Double: double y>;

        specialinvoke $r65.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d112, $d111, $d10, $d11);

        r50 = $r65;

     label09:
        $r43 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AREA_OF_INTEREST>;

        virtualinvoke $r58.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, r50);

        $r66 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r66.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r64, r50, $r58);

        r46 = interfaceinvoke $r16.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r66);

     label10:
        $d119 = virtualinvoke $r60.<java.awt.geom.Rectangle2D$Double: double getWidth()>();

        $b44 = $d119 cmpl 0.0;

        $i58 = (int) $b44;

        if $i58 <= 0 goto label12;

        $d91 = virtualinvoke $r60.<java.awt.geom.Rectangle2D$Double: double getHeight()>();

        $b38 = $d91 cmpl 0.0;

        $i59 = (int) $b38;

        if $i59 <= 0 goto label12;

        $r34 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r60);

        $r35 = interfaceinvoke $r34.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i39 = $r35.<java.awt.Rectangle: int width>;

        if $i39 <= 0 goto label12;

        $i40 = $r35.<java.awt.Rectangle: int height>;

        if $i40 <= 0 goto label12;

        $r67 = new java.awt.geom.AffineTransform;

        specialinvoke $r67.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r1);

        $d92 = $r60.<java.awt.geom.Rectangle2D$Double: double x>;

        $d94 = neg $d92;

        $d93 = $d8 + $d113;

        $d98 = $d94 + $d93;

        $d95 = $r60.<java.awt.geom.Rectangle2D$Double: double y>;

        $d96 = neg $d95;

        $d97 = $d96 + $d9;

        virtualinvoke $r67.<java.awt.geom.AffineTransform: void translate(double,double)>($d98, $d97);

        r51 = $r60;

        $z3 = r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        if $z3 == 0 goto label11;

        $r68 = new java.awt.geom.Rectangle2D$Double;

        $d99 = $r60.<java.awt.geom.Rectangle2D$Double: double x>;

        $d100 = $d99 - $d10;

        $d101 = $d100 + $d12;

        $d103 = $d101 - $d113;

        $d102 = $r60.<java.awt.geom.Rectangle2D$Double: double y>;

        specialinvoke $r68.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d103, $d102, $d10, $d11);

        r51 = $r68;

     label11:
        $r37 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AREA_OF_INTEREST>;

        virtualinvoke $r58.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r51);

        $r69 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r69.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r67, r51, $r58);

        r47 = interfaceinvoke $r16.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r69);

     label12:
        $d120 = virtualinvoke $r61.<java.awt.geom.Rectangle2D$Double: double getWidth()>();

        $b45 = $d120 cmpl 0.0;

        $i60 = (int) $b45;

        if $i60 <= 0 goto label14;

        $d78 = virtualinvoke $r61.<java.awt.geom.Rectangle2D$Double: double getHeight()>();

        $b35 = $d78 cmpl 0.0;

        $i61 = (int) $b35;

        if $i61 <= 0 goto label14;

        $r28 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r61);

        $r29 = interfaceinvoke $r28.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i36 = $r29.<java.awt.Rectangle: int width>;

        if $i36 <= 0 goto label14;

        $i37 = $r29.<java.awt.Rectangle: int height>;

        if $i37 <= 0 goto label14;

        $r70 = new java.awt.geom.AffineTransform;

        specialinvoke $r70.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r1);

        $d79 = $r61.<java.awt.geom.Rectangle2D$Double: double x>;

        $d80 = neg $d79;

        $d85 = $d80 + $d8;

        $d81 = $r61.<java.awt.geom.Rectangle2D$Double: double y>;

        $d83 = neg $d81;

        $d82 = $d9 + $d114;

        $d84 = $d83 + $d82;

        virtualinvoke $r70.<java.awt.geom.AffineTransform: void translate(double,double)>($d85, $d84);

        r52 = $r61;

        $z2 = r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        if $z2 == 0 goto label13;

        $r71 = new java.awt.geom.Rectangle2D$Double;

        $d90 = $r61.<java.awt.geom.Rectangle2D$Double: double x>;

        $d86 = $r61.<java.awt.geom.Rectangle2D$Double: double y>;

        $d87 = $d86 - $d7;

        $d88 = $d87 + $d13;

        $d89 = $d88 - $d114;

        specialinvoke $r71.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d90, $d89, $d10, $d11);

        r52 = $r71;

     label13:
        $r31 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AREA_OF_INTEREST>;

        virtualinvoke $r58.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, r52);

        $r72 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r72.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r70, r52, $r58);

        r48 = interfaceinvoke $r16.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r72);

     label14:
        $d121 = virtualinvoke $r62.<java.awt.geom.Rectangle2D$Double: double getWidth()>();

        $b46 = $d121 cmpl 0.0;

        $i62 = (int) $b46;

        if $i62 <= 0 goto label16;

        $d61 = virtualinvoke $r62.<java.awt.geom.Rectangle2D$Double: double getHeight()>();

        $b32 = $d61 cmpl 0.0;

        $i63 = (int) $b32;

        if $i63 <= 0 goto label16;

        $r22 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r62);

        $r23 = interfaceinvoke $r22.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i33 = $r23.<java.awt.Rectangle: int width>;

        if $i33 <= 0 goto label16;

        $i34 = $r23.<java.awt.Rectangle: int height>;

        if $i34 <= 0 goto label16;

        $r73 = new java.awt.geom.AffineTransform;

        specialinvoke $r73.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r1);

        $d62 = $r62.<java.awt.geom.Rectangle2D$Double: double x>;

        $d64 = neg $d62;

        $d63 = $d8 + $d113;

        $d69 = $d64 + $d63;

        $d65 = $r62.<java.awt.geom.Rectangle2D$Double: double y>;

        $d67 = neg $d65;

        $d66 = $d9 + $d114;

        $d68 = $d67 + $d66;

        virtualinvoke $r73.<java.awt.geom.AffineTransform: void translate(double,double)>($d69, $d68);

        r53 = $r62;

        $z1 = r4.<org.apache.batik.ext.awt.image.renderable.TileRable8Bit: boolean overflow>;

        if $z1 == 0 goto label15;

        $r74 = new java.awt.geom.Rectangle2D$Double;

        $d70 = $r62.<java.awt.geom.Rectangle2D$Double: double x>;

        $d71 = $d70 - $d6;

        $d72 = $d71 + $d12;

        $d77 = $d72 - $d113;

        $d73 = $r62.<java.awt.geom.Rectangle2D$Double: double y>;

        $d74 = $d73 - $d7;

        $d75 = $d74 + $d13;

        $d76 = $d75 - $d114;

        specialinvoke $r74.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d77, $d76, $d10, $d11);

        r53 = $r74;

     label15:
        $r25 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AREA_OF_INTEREST>;

        virtualinvoke $r58.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, r53);

        $r75 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r75.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r73, r53, $r58);

        r49 = interfaceinvoke $r16.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r75);

     label16:
        $r54 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r63);

        $r55 = interfaceinvoke $r54.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i47 = $r55.<java.awt.Rectangle: int width>;

        if $i47 == 0 goto label17;

        $i7 = $r55.<java.awt.Rectangle: int height>;

        if $i7 != 0 goto label18;

     label17:
        return null;

     label18:
        $r76 = new java.awt.image.BufferedImage;

        $i9 = $r55.<java.awt.Rectangle: int width>;

        $i8 = $r55.<java.awt.Rectangle: int height>;

        specialinvoke $r76.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i9, $i8, 2);

        $r18 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        $r19 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage,java.awt.RenderingHints)>($r76, $r18);

        $i10 = $r55.<java.awt.Rectangle: int x>;

        $i13 = neg $i10;

        $i11 = $r55.<java.awt.Rectangle: int y>;

        $i12 = neg $i11;

        virtualinvoke $r19.<java.awt.Graphics2D: void translate(int,int)>($i13, $i12);

        $r77 = new java.awt.geom.AffineTransform;

        specialinvoke $r77.<java.awt.geom.AffineTransform: void <init>()>();

        $r78 = new java.awt.geom.Point2D$Double;

        specialinvoke $r78.<java.awt.geom.Point2D$Double: void <init>()>();

        r56 = null;

        if r46 == null goto label19;

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r46, $r77);

        r56 = r46;

     label19:
        if r47 == null goto label21;

        if r56 != null goto label20;

        r56 = r47;

     label20:
        $r78.<java.awt.geom.Point2D$Double: double x> = $d113;

        $r78.<java.awt.geom.Point2D$Double: double y> = 0.0;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r78, $r78);

        $d53 = $r78.<java.awt.geom.Point2D$Double: double x>;

        $d54 = staticinvoke <java.lang.Math: double floor(double)>($d53);

        $i26 = interfaceinvoke r47.<java.awt.image.RenderedImage: int getMinX()>();

        $i27 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinX()>();

        $i28 = $i26 - $i27;

        $d55 = (double) $i28;

        $d56 = $d54 - $d55;

        $r78.<java.awt.geom.Point2D$Double: double x> = $d56;

        $d57 = $r78.<java.awt.geom.Point2D$Double: double y>;

        $d58 = staticinvoke <java.lang.Math: double floor(double)>($d57);

        $i29 = interfaceinvoke r47.<java.awt.image.RenderedImage: int getMinY()>();

        $i30 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinY()>();

        $i31 = $i29 - $i30;

        $d59 = (double) $i31;

        $d60 = $d58 - $d59;

        $r78.<java.awt.geom.Point2D$Double: double y> = $d60;

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r47, $r77);

     label21:
        if r48 == null goto label23;

        if r56 != null goto label22;

        r56 = r48;

     label22:
        $r78.<java.awt.geom.Point2D$Double: double x> = 0.0;

        $r78.<java.awt.geom.Point2D$Double: double y> = $d114;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r78, $r78);

        $d45 = $r78.<java.awt.geom.Point2D$Double: double x>;

        $d46 = staticinvoke <java.lang.Math: double floor(double)>($d45);

        $i20 = interfaceinvoke r48.<java.awt.image.RenderedImage: int getMinX()>();

        $i21 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinX()>();

        $i22 = $i20 - $i21;

        $d47 = (double) $i22;

        $d48 = $d46 - $d47;

        $r78.<java.awt.geom.Point2D$Double: double x> = $d48;

        $d49 = $r78.<java.awt.geom.Point2D$Double: double y>;

        $d50 = staticinvoke <java.lang.Math: double floor(double)>($d49);

        $i23 = interfaceinvoke r48.<java.awt.image.RenderedImage: int getMinY()>();

        $i24 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinY()>();

        $i25 = $i23 - $i24;

        $d51 = (double) $i25;

        $d52 = $d50 - $d51;

        $r78.<java.awt.geom.Point2D$Double: double y> = $d52;

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r48, $r77);

     label23:
        if r49 == null goto label25;

        if r56 != null goto label24;

        r56 = r49;

     label24:
        $r78.<java.awt.geom.Point2D$Double: double x> = $d113;

        $r78.<java.awt.geom.Point2D$Double: double y> = $d114;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r78, $r78);

        $d37 = $r78.<java.awt.geom.Point2D$Double: double x>;

        $d38 = staticinvoke <java.lang.Math: double floor(double)>($d37);

        $i14 = interfaceinvoke r49.<java.awt.image.RenderedImage: int getMinX()>();

        $i15 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinX()>();

        $i16 = $i14 - $i15;

        $d39 = (double) $i16;

        $d40 = $d38 - $d39;

        $r78.<java.awt.geom.Point2D$Double: double x> = $d40;

        $d41 = $r78.<java.awt.geom.Point2D$Double: double y>;

        $d42 = staticinvoke <java.lang.Math: double floor(double)>($d41);

        $i17 = interfaceinvoke r49.<java.awt.image.RenderedImage: int getMinY()>();

        $i18 = interfaceinvoke r56.<java.awt.image.RenderedImage: int getMinY()>();

        $i19 = $i17 - $i18;

        $d43 = (double) $i19;

        $d44 = $d42 - $d43;

        $r78.<java.awt.geom.Point2D$Double: double y> = $d44;

        virtualinvoke $r19.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r49, $r77);

     label25:
        $r79 = new org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $i48 = $r55.<java.awt.Rectangle: int x>;

        $i49 = $r55.<java.awt.Rectangle: int y>;

        specialinvoke $r79.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: void <init>(java.awt.image.BufferedImage,int,int)>($r76, $i48, $i49);

        return $r79;
    }
}
