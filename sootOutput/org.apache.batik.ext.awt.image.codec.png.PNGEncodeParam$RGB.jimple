public class org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB extends org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam
{
    private boolean backgroundSet;
    private int[] backgroundRGB;
    private int[] transparency;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: boolean backgroundSet> = 0;

        return;
    }

    public void unsetBackground()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: boolean backgroundSet> = 0;

        return;
    }

    public boolean isBackgroundSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: boolean backgroundSet>;

        return $z0;
    }

    public void setBitDepth(int)
    {
        int i0;
        java.lang.RuntimeException $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        i0 := @parameter0: int;

        if i0 == 8 goto label1;

        if i0 == 16 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int bitDepth> = i0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean bitDepthSet> = 1;

        return;
    }

    public void setBackgroundRGB(int[])
    {
        int[] r0;
        int $i0;
        java.lang.RuntimeException $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r1;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 == 3 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>()>();

        throw $r2;

     label1:
        r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] backgroundRGB> = r0;

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: boolean backgroundSet> = 1;

        return;
    }

    public int[] getBackgroundRGB()
    {
        java.lang.IllegalStateException $r2;
        int[] $r1;
        java.lang.String $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: boolean backgroundSet>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam9");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] backgroundRGB>;

        return $r1;
    }

    public void setTransparentRGB(int[])
    {
        int[] r1, $r3;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] transparency> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean transparencySet> = 1;

        return;
    }

    public int[] getTransparentRGB()
    {
        java.lang.IllegalStateException $r4;
        int[] $r1, $r3;
        java.lang.Object $r2;
        java.lang.String $r5;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean transparencySet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam10");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] transparency>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }
}
