public class org.waveprotocol.wave.client.editor.testing.MockTypingSink extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink
{
    final java.util.List expectedOps;
    final java.util.Set affectedNodes;
    boolean finished;

    public void <init>()
    {
        java.util.HashSet $r2;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.Set affectedNodes> = $r2;

        r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: boolean finished> = 1;

        return;
    }

    public void expectDelete(org.waveprotocol.wave.model.document.util.Point, int)
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del $r1;
        java.util.List $r3;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r0;
        int i0;
        org.waveprotocol.wave.model.document.util.Point r2;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        i0 := @parameter1: int;

        $r3 = r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps>;

        $r1 = new org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del: void <init>(org.waveprotocol.wave.model.document.util.Point,int,org.waveprotocol.wave.client.editor.testing.MockTypingSink$1)>(r2, i0, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void expectInsert(org.waveprotocol.wave.model.document.util.Point, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins $r1;
        java.util.List $r4;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r0;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.Point r2;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps>;

        $r1 = new org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: void <init>(org.waveprotocol.wave.model.document.util.Point,java.lang.String,org.waveprotocol.wave.client.editor.testing.MockTypingSink$1)>(r2, r3, null);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void expectFinished()
    {
        java.util.List $r1;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        $z0 = r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: boolean finished>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps>;

        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>($z2);

        return;
    }

    public void typingReplace(org.waveprotocol.wave.model.document.util.Point, int, java.lang.String, org.waveprotocol.wave.client.editor.RestrictedRange)
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins r12;
        org.waveprotocol.wave.client.editor.RestrictedRange r10;
        int i0, $i1, $i2;
        java.lang.String r0, $r6;
        org.waveprotocol.wave.model.document.util.Point r4, $r5, $r9;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r1;
        java.util.List $r2, $r7;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del r11;
        java.lang.Object $r3, $r8;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r10 := @parameter3: org.waveprotocol.wave.client.editor.RestrictedRange;

        if i0 <= 0 goto label1;

        $r7 = r1.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(0);

        r11 = (org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del) $r8;

        $r9 = r11.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del: org.waveprotocol.wave.model.document.util.Point start>;

        staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r4);

        $i2 = r11.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Del: int deleteSize>;

        staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>($i2, i0);

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        $r2 = r1.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: java.util.List expectedOps>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        r12 = (org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins) $r3;

        $r5 = r12.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: org.waveprotocol.wave.model.document.util.Point start>;

        staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r4);

        $r6 = r12.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: java.lang.String text>;

        staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>($r6, r0);

     label2:
        r1.<org.waveprotocol.wave.client.editor.testing.MockTypingSink: boolean finished> = 1;

        return;
    }

    public void aboutToFlush()
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink;

        return;
    }
}
