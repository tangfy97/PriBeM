public abstract enum class com.hp.hpl.jena.tdb.store.NodeType extends java.lang.Enum implements com.hp.hpl.jena.sparql.util.Named
{
    public static final enum com.hp.hpl.jena.tdb.store.NodeType BNODE;
    public static final enum com.hp.hpl.jena.tdb.store.NodeType URI;
    public static final enum com.hp.hpl.jena.tdb.store.NodeType LITERAL;
    public static final enum com.hp.hpl.jena.tdb.store.NodeType OTHER;
    private static final com.hp.hpl.jena.tdb.store.NodeType[] $VALUES;

    public static com.hp.hpl.jena.tdb.store.NodeType[] values()
    {
        com.hp.hpl.jena.tdb.store.NodeType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.hp.hpl.jena.tdb.store.NodeType[]) $r1;

        return $r2;
    }

    public static com.hp.hpl.jena.tdb.store.NodeType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.hp.hpl.jena.tdb.store.NodeType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/tdb/store/NodeType;", r0);

        $r2 = (com.hp.hpl.jena.tdb.store.NodeType) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.hp.hpl.jena.tdb.store.NodeType r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.NodeType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public abstract int getTypeId();

    public abstract com.hp.hpl.jena.datatypes.xsd.XSDDatatype getDatatype();

    public abstract java.lang.String getName();

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.tdb.store.NodeType r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.NodeType;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.NodeType: java.lang.String getName()>();

        return $r1;
    }

    public static com.hp.hpl.jena.tdb.store.NodeType lookup(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.NodeType $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r4 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType URI>;

        return $r4;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

        $r3 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType BNODE>;

        return $r3;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $r2 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType LITERAL>;

        return $r2;

     label3:
        $r1 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType OTHER>;

        return $r1;
    }

    public static com.hp.hpl.jena.tdb.store.NodeType lookup(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String $r8;
        com.hp.hpl.jena.tdb.TDBException $r3;
        com.hp.hpl.jena.tdb.store.NodeType $r0, $r1, $r2, $r9, $r10, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        i0 := @parameter0: int;

        $r0 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType BNODE>;

        $i1 = virtualinvoke $r0.<com.hp.hpl.jena.tdb.store.NodeType: int getTypeId()>();

        if i0 != $i1 goto label1;

        $r11 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType BNODE>;

        return $r11;

     label1:
        $r1 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType URI>;

        $i2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.NodeType: int getTypeId()>();

        if i0 != $i2 goto label2;

        $r10 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType URI>;

        return $r10;

     label2:
        $r2 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType LITERAL>;

        $i3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.NodeType: int getTypeId()>();

        if i0 != $i3 goto label3;

        $r9 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType LITERAL>;

        return $r9;

     label3:
        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    void <init>(java.lang.String, int, com.hp.hpl.jena.tdb.store.NodeType$1)
    {
        com.hp.hpl.jena.tdb.store.NodeType$1 r2;
        com.hp.hpl.jena.tdb.store.NodeType r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.NodeType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.hp.hpl.jena.tdb.store.NodeType$1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.store.NodeType: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.store.NodeType $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.tdb.store.NodeType$4 $r3;
        com.hp.hpl.jena.tdb.store.NodeType$3 $r2;
        com.hp.hpl.jena.tdb.store.NodeType$2 $r1;
        com.hp.hpl.jena.tdb.store.NodeType$1 $r0;
        com.hp.hpl.jena.tdb.store.NodeType[] $r4;

        $r0 = new com.hp.hpl.jena.tdb.store.NodeType$1;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.NodeType$1: void <init>(java.lang.String,int)>("BNODE", 0);

        <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType BNODE> = $r0;

        $r1 = new com.hp.hpl.jena.tdb.store.NodeType$2;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.store.NodeType$2: void <init>(java.lang.String,int)>("URI", 1);

        <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType URI> = $r1;

        $r2 = new com.hp.hpl.jena.tdb.store.NodeType$3;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.store.NodeType$3: void <init>(java.lang.String,int)>("LITERAL", 2);

        <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType LITERAL> = $r2;

        $r3 = new com.hp.hpl.jena.tdb.store.NodeType$4;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.store.NodeType$4: void <init>(java.lang.String,int)>("OTHER", 3);

        <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType OTHER> = $r3;

        $r4 = newarray (com.hp.hpl.jena.tdb.store.NodeType)[4];

        $r5 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType BNODE>;

        $r4[0] = $r5;

        $r6 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType URI>;

        $r4[1] = $r6;

        $r7 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType LITERAL>;

        $r4[2] = $r7;

        $r8 = <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType OTHER>;

        $r4[3] = $r8;

        <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType[] $VALUES> = $r4;

        return;
    }
}
