public class org.waveprotocol.wave.model.document.indexed.AnnotationTree extends java.lang.Object implements org.waveprotocol.wave.model.document.indexed.RawAnnotationSet
{
    private final org.waveprotocol.wave.model.util.CollectionFactory factory;
    private final org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree;
    private org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener;
    private final org.waveprotocol.wave.model.util.StringMap openAnnotations;
    private boolean currentlyNotifying;
    private int itemsDeletedThisRun;
    private final java.util.LinkedList queuedNotifications;
    private int cursor;
    private org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.Object, java.lang.Object, org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener r7;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap $r2;
        int $i1;
        java.lang.Object r4, r5;
        java.util.LinkedList $r8;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r9;
        org.waveprotocol.wave.model.util.CollectionFactory $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        r7 := @parameter2: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations> = $r2;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying> = 0;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int itemsDeletedThisRun> = 0;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications> = $r8;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor> = $i1;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion> = null;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "The argument oneValue must not be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "The argument anotherValue must not be null");

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "The arguments oneValue and anotherValue must not be equal");

        $r9 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        specialinvoke $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void <init>(java.lang.Object,java.lang.Object)>(r4, r5);

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree> = $r9;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener> = r7;

        return;
    }

    public java.lang.String toStringForDebugging()
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String toStringForDebugging()>();

        return $r2;
    }

    public void checkSomeInvariants()
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void checkSomeInvariants()>();

        return;
    }

    public void setListener(org.waveprotocol.wave.model.document.indexed.AnnotationSetListener)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener r1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener> = r1;

        return;
    }

    protected void queueNotification(int, int, java.lang.String, java.lang.Object)
    {
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification r8, $r9;
        java.lang.String r2, $r6;
        java.util.LinkedList $r1, $r4, $r10;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.Object r3, $r5, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object getLast()>();

        r8 = (org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification) $r5;

        $i2 = r8.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: int end>;

        if $i2 != i0 goto label1;

        $r6 = r8.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: java.lang.String key>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r7 = r8.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: java.lang.Object value>;

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r7, r3);

        if $z2 == 0 goto label1;

        r8.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: int end> = i1;

        return;

     label1:
        $r9 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification;

        specialinvoke $r9.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationTree,int,int,java.lang.String,java.lang.Object)>(r0, i0, i1, r2, r3);

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        virtualinvoke $r10.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

        return;
    }

    public void begin()
    {
        java.lang.IllegalStateException $r11;
        org.waveprotocol.wave.model.util.StringMap $r1, $r3, $r7;
        java.lang.AssertionError $r12, $r13, $r14;
        int $i0, $i1, $i3;
        java.util.LinkedList $r5, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.CollectionFactory $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("begin() called twice with no finish() in between");

        throw $r11;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int itemsDeletedThisRun> = 0;

        $z0 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying>;

        if $z0 != 0 goto label2;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        virtualinvoke $r9.<java.util.LinkedList: void clear()>();

     label2:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $z5 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z5 != 0 goto label3;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label3:
        $z2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying>;

        if $z2 != 0 goto label4;

        $z3 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        $z4 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

        if $z4 != 0 goto label4;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label4:
        $z6 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z6 != 0 goto label5;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int itemsDeletedThisRun>;

        if $i1 == 0 goto label5;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label5:
        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor> = 0;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.CollectionFactory factory>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion> = $r3;

        return;
    }

    public void finish()
    {
        java.lang.Throwable $r12;
        java.lang.IllegalStateException $r16;
        org.waveprotocol.wave.model.util.StringMap $r1, $r10;
        java.lang.AssertionError $r15;
        int $i0, $i2, $i4;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification r7;
        java.util.LinkedList $r3, $r4, $r5, $r13;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$1 $r14;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r2;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $r14 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree$1;

        specialinvoke $r14.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$1: void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationTree)>(r0);

        interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r14);

        $z3 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("finish() called with no matching begin()");

        throw $r16;

     label2:
        $i4 = (int) -1;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor> = $i4;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion> = null;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void cleanupKnownKeys()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int itemsDeletedThisRun> = 0;

        $z1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying>;

        if $z1 != 0 goto label8;

     label3:
        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying> = 1;

     label4:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        $z2 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object remove()>();

        r7 = (org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification) $r6;

        virtualinvoke r7.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$Notification: void deliver()>();

        goto label4;

     label5:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        virtualinvoke $r4.<java.util.LinkedList: void clear()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying> = 0;

        goto label8;

     label6:
        $r12 := @caughtexception;

     label7:
        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: java.util.LinkedList queuedNotifications>;

        virtualinvoke $r13.<java.util.LinkedList: void clear()>();

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean currentlyNotifying> = 0;

        throw $r12;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void collectAllAnnotationsAt(int, org.waveprotocol.wave.model.util.StringMap)
    {
        int i0, $i1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void collectAllAnnotationsAt(int,org.waveprotocol.wave.model.util.StringMap)>(i0, r2);

        return;
    }

    private void updateInheritedAnnotationsFromPosition(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void collectAllAnnotationsAt(int,org.waveprotocol.wave.model.util.StringMap)>(i0, $r1);

        return;
    }

    public void skip(int)
    {
        java.lang.AssertionError $r14, $r15, $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.lang.String $r11;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.operation.OpCursorException $r17;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r16;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i11 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i13 = (int) -1;

        if $i11 != $i13 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 > 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i3 = $i1 - $i2;

        if i0 <= $i3 goto label3;

        $r17 = new org.waveprotocol.wave.model.operation.OpCursorException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to skip beyond end of document (cursor at ");

        $i9 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size is ");

        $i10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", distance is ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>($r11);

        throw $r17;

     label3:
        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i5 = $i4 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor> = $i5;

        $z2 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i8 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        if $i8 > 0 goto label4;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label4:
        $i6 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i7 = $i6 - 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void updateInheritedAnnotationsFromPosition(int)>($i7);

        return;
    }

    public void delete(int)
    {
        java.lang.AssertionError $r14, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String $r11;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.operation.OpCursorException $r17;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r16;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i12 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i14 = (int) -1;

        if $i12 != $i14 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 > 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i3 = $i1 - $i2;

        if i0 <= $i3 goto label3;

        $r17 = new org.waveprotocol.wave.model.operation.OpCursorException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to delete beyond end of document (cursor at ");

        $i10 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size is ");

        $i11 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", deleteSize is ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.wave.model.operation.OpCursorException: void <init>(java.lang.String)>($r11);

        throw $r17;

     label3:
        $i4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i5 = $i4 + i0;

        $i6 = $i5 - 1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void updateInheritedAnnotationsFromPosition(int)>($i6);

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i9 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i7 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i8 = $i7 + i0;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void delete(int,int)>($i9, $i8);

        return;
    }

    public void insert(int)
    {
        org.waveprotocol.wave.model.util.StringMap $r3;
        java.lang.AssertionError $r9, $r10;
        org.waveprotocol.wave.model.util.ReadableStringSet $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$3 $r12;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$2 $r11;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i7 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i9 = (int) -1;

        if $i7 != $i9 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i0 > 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void insert(int,int)>($i1, i0);

        $i5 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i6 = $i2 + i0;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion>;

        $r11 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree$2;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$2: void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationTree,int,int)>(r0, $i5, $i6);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r11);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r12 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree$3;

        specialinvoke $r12.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$3: void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationTree,int,int)>(r0, $i5, $i6);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r12);

        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i4 = $i3 + i0;

        r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor> = $i4;

        return;
    }

    private static boolean isNonLocalAnnotationKey(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean isLocal(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getInherited(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r0, $r4;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r1;
        org.waveprotocol.wave.model.util.StringMap $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean isNonLocalAnnotationKey(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String,java.lang.Object)>(r0, null);

        $r4 = (java.lang.String) $r3;

        return $r4;

     label1:
        return null;
    }

    public void startAnnotation(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringMap $r4, $r5, $r18;
        java.lang.AssertionError $r19, $r20;
        int $i0, $i1, $i3;
        java.lang.String r0, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation $r7, $r23;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r1;
        java.lang.IllegalArgumentException $r22;
        java.lang.Object r3, $r6, $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r21;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r0 != null goto label2;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label2:
        $z2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean isNonLocalAnnotationKey(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        if r3 == null goto label3;

        $z4 = r3 instanceof java.lang.String;

        if $z4 != 0 goto label3;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to store a non-string object in a non-local annotation: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r22;

     label3:
        $r18 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $z5 = interfaceinvoke $r18.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r0);

        if $z5 == 0 goto label5;

        $r5 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r0);

        $r7 = (org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation) $r6;

        $r8 = $r7.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: java.lang.Object value>;

        $z3 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>(r3, $r8);

        if $z3 == 0 goto label4;

        return;

     label4:
        specialinvoke r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void endAnnotationUnchecked(java.lang.String)>(r0);

     label5:
        $r4 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $r23 = new org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation;

        $i0 = r1.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        specialinvoke $r23.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: void <init>(org.waveprotocol.wave.model.document.indexed.AnnotationTree,int,java.lang.String,java.lang.Object)>(r1, $i0, r0, r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r0, $r23);

        return;
    }

    public void endAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.AssertionError $r6, $r7, $r8;
        int $i0, $i2;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r1 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $z2 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $z3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z3 != 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void endAnnotationUnchecked(java.lang.String)>(r1);

        return;
    }

    private void endAnnotationUnchecked(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r4, $r10;
        java.lang.AssertionError $r12;
        int $i0, $i1, $i2;
        java.lang.String r1, $r6, $r9;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r7;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation $r11;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.Object $r3, $r5, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $z1 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $r11 = (org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation) $r3;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int cursor>;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i0 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: int start>;

        $r6 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: java.lang.String key>;

        $r5 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: java.lang.Object value>;

        virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void setAnnotation(int,int,java.lang.String,java.lang.Object)>($i0, $i2, $r6, $r5);

        $i1 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: int start>;

        $r9 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: java.lang.String key>;

        $r8 = $r11.<org.waveprotocol.wave.model.document.indexed.AnnotationTree$OpenAnnotation: java.lang.Object value>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void queueNotification(int,int,java.lang.String,java.lang.Object)>($i1, $i2, $r9, $r8);

        return;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int length()>();

        return $i0;
    }

    public java.lang.Object getAnnotation(int, java.lang.String)
    {
        int i0, $i1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void checkKeyNotNull(java.lang.String)>(r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r1);

        return $r3;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void checkKeyNotNull(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i3 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        return $i3;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: void checkKeyNotNull(java.lang.String)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $i3 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int lastAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        return $i3;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r1;
        int i0, $i1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void forEachAnnotationAt(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(i0, r1);

        return;
    }

    public org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.util.GenericAnnotationCursor $r2;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        java.lang.RuntimeException $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        if r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported");

        throw $r3;

     label1:
        $r2 = new org.waveprotocol.wave.model.document.util.GenericAnnotationCursor;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.GenericAnnotationCursor: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r0, i0, i1, r1);

        return $r2;
    }

    public java.lang.Iterable annotationIntervals(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.ReadableStringSet r1, $r4, $r6;
        org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable $r2, $r7;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r3, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        if r1 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $z0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.ReadableStringSet: boolean isSubsetOf(org.waveprotocol.wave.model.util.ReadableStringSet)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $r2 = new org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r0, i0, i1, $r4);

        return $r2;

     label2:
        $r7 = new org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.util.GenericAnnotationIntervalIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r0, i0, i1, r1);

        return $r7;
    }

    public java.lang.Iterable rangedAnnotations(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r3;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable $r1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        if r3 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

     label1:
        $r1 = new org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.util.GenericRangedAnnotationIterable: void <init>(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(r0, i0, i1, r3);

        return $r1;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        org.waveprotocol.wave.model.util.ReadableStringSet $r2;
        org.waveprotocol.wave.model.util.StringSet $r3;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet copyStringSet(org.waveprotocol.wave.model.util.ReadableStringSet)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeysLive()
    {
        org.waveprotocol.wave.model.util.ReadableStringSet $r2;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        return $r2;
    }

    protected void checkKeyNotNull(java.lang.String)
    {
        java.lang.String r0;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Key must not be null");

        return;
    }

    static org.waveprotocol.wave.model.document.indexed.AnnotationSetListener access$000(org.waveprotocol.wave.model.document.indexed.AnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationSetListener $r1;
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.AnnotationSetListener listener>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.StringMap access$100(org.waveprotocol.wave.model.document.indexed.AnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap openAnnotations>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree access$200(org.waveprotocol.wave.model.document.indexed.AnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree tree>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.StringMap access$300(org.waveprotocol.wave.model.document.indexed.AnnotationTree)
    {
        org.waveprotocol.wave.model.document.indexed.AnnotationTree r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.AnnotationTree;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.AnnotationTree: org.waveprotocol.wave.model.util.StringMap inheritedAnnotationsForInsertion>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/AnnotationTree;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.AnnotationTree: boolean $assertionsDisabled> = $z1;

        return;
    }
}
