abstract class org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate extends org.apache.lucene.util.CollectionUtil$ListSorterTemplate
{
    private final int threshold;
    private final java.lang.Object[] tmp;
    static final boolean $assertionsDisabled;

    void <init>(java.util.List, float)
    {
        java.lang.Object[] $r2, r3;
        java.util.List r1;
        int $i0, $i1, $i2;
        float f0, $f1, $f2;
        org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate r0;

        r0 := @this: org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate;

        r1 := @parameter0: java.util.List;

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.lucene.util.CollectionUtil$ListSorterTemplate: void <init>(java.util.List)>(r1);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $f1 = (float) $i0;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        r0.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: int threshold> = $i1;

        $i2 = r0.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: int threshold>;

        $r2 = newarray (java.lang.Object)[$i2];

        r3 = (java.lang.Object[]) $r2;

        r0.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.lang.Object[] tmp> = r3;

        return;
    }

    private void mergeWithExtraMemory(int, int, int, int, int)
    {
        boolean $z0;
        java.util.List $r4, $r6, $r9, $r10, $r14, $r15;
        java.lang.Object[] $r2, $r5, $r12, $r16;
        java.lang.AssertionError $r0;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        java.lang.Object $r3, $r7, $r8, $r11, $r13, $r17;
        org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate r1;

        r1 := @this: org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        i12 := @parameter4: int;

        i13 = 0;

     label1:
        if i13 >= i0 goto label2;

        $r16 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.lang.Object[] tmp>;

        $r15 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $i11 = i2 + i13;

        $r17 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i11);

        $r16[i13] = $r17;

        i13 = i13 + 1;

        goto label1;

     label2:
        i14 = 0;

        i15 = i1;

        i16 = i2;

     label3:
        if i14 >= i0 goto label5;

        if i15 >= i5 goto label5;

        $r5 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.lang.Object[] tmp>;

        $r7 = $r5[i14];

        $r6 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i15);

        $i6 = virtualinvoke r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $i6 > 0 goto label4;

        $r14 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $i9 = i16;

        i16 = i16 + 1;

        $r12 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.lang.Object[] tmp>;

        $i10 = i14;

        i14 = i14 + 1;

        $r13 = $r12[$i10];

        interfaceinvoke $r14.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i9, $r13);

        goto label3;

     label4:
        $r10 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $i7 = i16;

        i16 = i16 + 1;

        $r9 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $i8 = i15;

        i15 = i15 + 1;

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i8);

        interfaceinvoke $r10.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i7, $r11);

        goto label3;

     label5:
        if i14 >= i0 goto label6;

        $r4 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.util.List list>;

        $i3 = i16;

        i16 = i16 + 1;

        $r2 = r1.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: java.lang.Object[] tmp>;

        $i4 = i14;

        i14 = i14 + 1;

        $r3 = $r2[$i4];

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i3, $r3);

        goto label5;

     label6:
        $z0 = <org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        if i15 == i16 goto label7;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label7:
        return;
    }

    protected void merge(int, int, int, int, int)
    {
        int i0, $i1, i2, i3, i4, i5;
        org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate r0;

        r0 := @this: org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i5 := @parameter4: int;

        $i1 = r0.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: int threshold>;

        if i0 > $i1 goto label1;

        specialinvoke r0.<org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: void mergeWithExtraMemory(int,int,int,int,int)>(i2, i3, i4, i0, i5);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.lucene.util.CollectionUtil$ListSorterTemplate: void merge(int,int,int,int,int)>(i2, i3, i4, i0, i5);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/CollectionUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.CollectionUtil$ListMergeSorterTemplate: boolean $assertionsDisabled> = $z1;

        return;
    }
}
