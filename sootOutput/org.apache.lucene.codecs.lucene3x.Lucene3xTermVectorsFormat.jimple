class org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat extends org.apache.lucene.codecs.TermVectorsFormat
{

    void <init>()
    {
        org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat r0;

        r0 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat;

        specialinvoke r0.<org.apache.lucene.codecs.TermVectorsFormat: void <init>()>();

        return;
    }

    public org.apache.lucene.codecs.TermVectorsReader vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        java.lang.Throwable $r12;
        org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat r13;
        org.apache.lucene.store.CompoundFileDirectory $r14;
        org.apache.lucene.store.Directory r3, $r9, $r11;
        int $i0, $i2;
        java.lang.String $r1, $r2, $r7, $r8;
        org.apache.lucene.index.FieldInfos r5;
        org.apache.lucene.store.IOContext r6;
        boolean $z0, $z1, z2;
        org.apache.lucene.index.SegmentInfo r0;
        org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader $r15;

        r13 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat;

        r3 := @parameter0: org.apache.lucene.store.Directory;

        r0 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r5 := @parameter2: org.apache.lucene.index.FieldInfos;

        r6 := @parameter3: org.apache.lucene.store.IOContext;

        $r1 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String getDocStoreSegment(org.apache.lucene.index.SegmentInfo)>(r0);

        $r2 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r1, "", "tvf");

        $i0 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: int getDocStoreOffset(org.apache.lucene.index.SegmentInfo)>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label08;

        $z0 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: boolean getDocStoreIsCompoundFile(org.apache.lucene.index.SegmentInfo)>(r0);

        if $z0 == 0 goto label08;

        $r7 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String getDocStoreSegment(org.apache.lucene.index.SegmentInfo)>(r0);

        $r8 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r7, "", "cfx");

        $r9 = r0.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $z1 = virtualinvoke $r9.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>($r8);

        if $z1 == 0 goto label06;

        $r14 = new org.apache.lucene.store.CompoundFileDirectory;

        $r11 = r0.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        specialinvoke $r14.<org.apache.lucene.store.CompoundFileDirectory: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.store.IOContext,boolean)>($r11, $r8, r6, 0);

     label01:
        z2 = virtualinvoke $r14.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>($r2);

     label02:
        virtualinvoke $r14.<org.apache.lucene.store.Directory: void close()>();

        goto label05;

     label03:
        $r12 := @caughtexception;

     label04:
        virtualinvoke $r14.<org.apache.lucene.store.Directory: void close()>();

        throw $r12;

     label05:
        goto label07;

     label06:
        z2 = 0;

     label07:
        goto label09;

     label08:
        z2 = virtualinvoke r3.<org.apache.lucene.store.Directory: boolean fileExists(java.lang.String)>($r2);

     label09:
        if z2 != 0 goto label10;

        return null;

     label10:
        $r15 = new org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader;

        specialinvoke $r15.<org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.FieldInfos,org.apache.lucene.store.IOContext)>(r3, r0, r5, r6);

        return $r15;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public org.apache.lucene.codecs.TermVectorsWriter vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.store.Directory r2;
        org.apache.lucene.index.SegmentInfo r3;
        org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat r1;
        org.apache.lucene.store.IOContext r4;

        r1 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat;

        r2 := @parameter0: org.apache.lucene.store.Directory;

        r3 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r4 := @parameter2: org.apache.lucene.store.IOContext;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("this codec can only be used for reading");

        throw $r0;
    }
}
