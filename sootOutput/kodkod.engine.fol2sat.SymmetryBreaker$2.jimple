final class kodkod.engine.fol2sat.SymmetryBreaker$2 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        kodkod.engine.fol2sat.SymmetryBreaker$2 r0;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(kodkod.ast.RelationPredicate, kodkod.ast.RelationPredicate)
    {
        kodkod.engine.fol2sat.SymmetryBreaker$2 r8;
        int $i0;
        java.lang.String $r2, $r3, $r6, $r7;
        kodkod.ast.RelationPredicate r0, r4;
        kodkod.ast.Relation $r1, $r5;

        r8 := @this: kodkod.engine.fol2sat.SymmetryBreaker$2;

        r0 := @parameter0: kodkod.ast.RelationPredicate;

        r4 := @parameter1: kodkod.ast.RelationPredicate;

        $r1 = virtualinvoke r0.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        $r2 = virtualinvoke $r1.<kodkod.ast.Relation: java.lang.String name()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r5 = virtualinvoke r4.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Relation: java.lang.String name()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r7);

        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        kodkod.ast.RelationPredicate $r3, $r4;
        kodkod.engine.fol2sat.SymmetryBreaker$2 r0;

        r0 := @this: kodkod.engine.fol2sat.SymmetryBreaker$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kodkod.ast.RelationPredicate) r1;

        $r3 = (kodkod.ast.RelationPredicate) r2;

        $i0 = virtualinvoke r0.<kodkod.engine.fol2sat.SymmetryBreaker$2: int compare(kodkod.ast.RelationPredicate,kodkod.ast.RelationPredicate)>($r4, $r3);

        return $i0;
    }
}
