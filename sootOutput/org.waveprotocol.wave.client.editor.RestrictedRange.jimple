public class org.waveprotocol.wave.client.editor.RestrictedRange extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.util.Point$El after;
    private final java.lang.Object nodeBefore;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.Point$El, java.lang.Object)
    {
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.Point$El r1;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after> = r1;

        r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object nodeBefore> = r2;

        return;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange boundedBy(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange $r0;
        java.lang.Object r1, r2, r4;
        org.waveprotocol.wave.model.document.util.Point$El $r3;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r0 = new org.waveprotocol.wave.client.editor.RestrictedRange;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.RestrictedRange: void <init>(org.waveprotocol.wave.model.document.util.Point$El,java.lang.Object)>($r3, r4);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange collapsedAt(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange $r0;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.Point$El r1;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        $r0 = new org.waveprotocol.wave.client.editor.RestrictedRange;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r2, r1);

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.RestrictedRange: void <init>(org.waveprotocol.wave.model.document.util.Point$El,java.lang.Object)>(r1, $r3);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange around(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange $r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2, r4, $r5;
        org.waveprotocol.wave.model.document.util.Point$El $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r0 = new org.waveprotocol.wave.client.editor.RestrictedRange;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r4);

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.RestrictedRange: void <init>(org.waveprotocol.wave.model.document.util.Point$El,java.lang.Object)>($r3, $r5);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange between(java.lang.Object, org.waveprotocol.wave.model.document.util.Point$El)
    {
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.Point$El r1;
        org.waveprotocol.wave.client.editor.RestrictedRange $r0;

        r2 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        $r0 = new org.waveprotocol.wave.client.editor.RestrictedRange;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.RestrictedRange: void <init>(org.waveprotocol.wave.model.document.util.Point$El,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange between(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point$El, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.model.document.util.Point$El r0, r5;
        org.waveprotocol.wave.client.editor.RestrictedRange $r4;
        java.lang.Object $r1, $r3, $r6, $r7, $r8, $r10;
        boolean $z0, $z1;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        r5 := @parameter2: org.waveprotocol.wave.model.document.util.Point$El;

        $z0 = <org.waveprotocol.wave.client.editor.RestrictedRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r8 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label2;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r10 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getLastChild(java.lang.Object)>($r6);

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $r10 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getPreviousSibling(java.lang.Object)>($r3);

     label3:
        $r4 = new org.waveprotocol.wave.client.editor.RestrictedRange;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.RestrictedRange: void <init>(org.waveprotocol.wave.model.document.util.Point$El,java.lang.Object)>(r5, $r10);

        return $r4;
    }

    public static org.waveprotocol.wave.client.editor.RestrictedRange roundedBetween(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        org.waveprotocol.wave.model.document.util.Point$El r1, $r7, $r8;
        org.waveprotocol.wave.client.editor.RestrictedRange $r4;
        java.lang.Object $r5, $r6;
        org.waveprotocol.wave.model.document.util.Point r0, r2;
        boolean $z0, $z1;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r6);

        goto label2;

     label1:
        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

     label2:
        r1 = $r7;

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r5);

        goto label4;

     label3:
        $r8 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

     label4:
        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange between(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>(r3, r1, $r8);

        return $r4;
    }

    public java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange r0;
        org.waveprotocol.wave.model.document.ReadableDocument r2;
        java.lang.Object $r1, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.util.Point$El $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        r2 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object nodeBefore>;

        if $r1 != null goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r6 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object nodeBefore>;

        $r6 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>($r3);

     label2:
        return $r6;
    }

    public boolean contains(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object $r2, $r3, r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r4 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: boolean isBetween(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r4, $r2, $r3);

        return $z0;
    }

    public org.waveprotocol.wave.model.document.util.Point$El getPointBefore(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange r0;
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        java.lang.Object $r2, $r4;
        org.waveprotocol.wave.model.document.util.Point$El $r1, $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)>(r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r2, $r4);

        return $r5;
    }

    public org.waveprotocol.wave.model.document.util.Point$El getPointAfter()
    {
        org.waveprotocol.wave.model.document.util.Point$El $r1;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        return $r1;
    }

    public java.lang.Object getNodeBefore()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object nodeBefore>;

        return $r1;
    }

    public java.lang.Object getNodeAfter()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.Point$El $r1;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        return $r2;
    }

    public java.lang.Object getContainer()
    {
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.util.Point$El $r1;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r1 = r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        return $r2;
    }

    private static boolean isBetween(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r3;
        java.lang.Object r0, r1, r2, r4;

        r3 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        r1 := @parameter3: java.lang.Object;

        r4 = r0;

     label1:
        if r4 == null goto label3;

        if r4 == r1 goto label3;

        if r4 != r2 goto label2;

        return 1;

     label2:
        r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r4);

        goto label1;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r9;
        org.waveprotocol.wave.client.editor.RestrictedRange r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r11, $r12;
        java.lang.Object $r3, $r6, $r10;
        java.lang.String $r13;

        r1 := @this: org.waveprotocol.wave.client.editor.RestrictedRange;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ->( ");

        $r6 = r1.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object nodeBefore>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r9 = r1.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El after>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/RestrictedRange;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.RestrictedRange: boolean $assertionsDisabled> = $z1;

        return;
    }
}
