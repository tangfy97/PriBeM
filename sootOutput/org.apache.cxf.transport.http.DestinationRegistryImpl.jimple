public class org.apache.cxf.transport.http.DestinationRegistryImpl extends java.lang.Object implements org.apache.cxf.transport.http.DestinationRegistry
{
    private static final java.lang.String SLASH;
    private java.util.concurrent.ConcurrentMap destinations;
    private java.util.Map decodedDestinations;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Map decodedDestinations> = $r2;

        return;
    }

    public synchronized void addDestination(org.apache.cxf.transport.http.AbstractHTTPDestination)
    {
        java.util.concurrent.ConcurrentMap $r5;
        org.apache.cxf.transport.http.AbstractHTTPDestination r0, r7;
        java.util.Map $r9;
        java.lang.String $r2, $r3, $r8, $r10, $r15;
        boolean $z0;
        org.apache.cxf.service.model.EndpointInfo $r1;
        org.apache.cxf.transport.http.DestinationRegistryImpl r4;
        java.lang.RuntimeException $r11, $r17;
        java.lang.Object $r6;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.io.UnsupportedEncodingException $r16;

        r4 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        r0 := @parameter0: org.apache.cxf.transport.http.AbstractHTTPDestination;

        $r1 = virtualinvoke r0.<org.apache.cxf.transport.http.AbstractHTTPDestination: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r2 = virtualinvoke $r1.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        $r3 = staticinvoke <org.apache.cxf.transport.http.DestinationRegistryImpl: java.lang.String getTrimmedPath(java.lang.String)>($r2);

        $r5 = r4.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, r0);

        r7 = (org.apache.cxf.transport.http.AbstractHTTPDestination) $r6;

        if r7 == null goto label1;

        if r7 == r0 goto label1;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already a destination on ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        $r8 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r3, "ISO-8859-1");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label2;

        $r9 = r4.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Map decodedDestinations>;

        $r10 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r3, "ISO-8859-1");

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r0);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unsupported Encoding", $r16);

        throw $r17;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public synchronized void removeDestination(java.lang.String)
    {
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;
        java.lang.RuntimeException $r7;
        java.util.concurrent.ConcurrentMap $r2;
        java.util.Map $r4;
        java.lang.String r1, $r3, $r5;
        java.io.UnsupportedEncodingException $r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        $r3 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r1, "ISO-8859-1");

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Map decodedDestinations>;

        $r5 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r1, "ISO-8859-1");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unsupported Encoding", $r6);

        throw $r7;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public org.apache.cxf.transport.http.AbstractHTTPDestination getDestinationForPath(java.lang.String)
    {
        org.apache.cxf.transport.http.AbstractHTTPDestination $r2;
        java.lang.String r1;
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: org.apache.cxf.transport.http.AbstractHTTPDestination getDestinationForPath(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.cxf.transport.http.AbstractHTTPDestination getDestinationForPath(java.lang.String, boolean)
    {
        org.apache.cxf.transport.http.DestinationRegistryImpl r2;
        java.util.concurrent.ConcurrentMap $r3;
        org.apache.cxf.transport.http.AbstractHTTPDestination r7;
        java.util.Map $r5;
        java.lang.Object $r4, $r6;
        java.lang.String r0, $r1;
        boolean z0;

        r2 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.apache.cxf.transport.http.DestinationRegistryImpl: java.lang.String getTrimmedPath(java.lang.String)>(r0);

        $r3 = r2.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (org.apache.cxf.transport.http.AbstractHTTPDestination) $r4;

        if r7 != null goto label1;

        $r5 = r2.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Map decodedDestinations>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (org.apache.cxf.transport.http.AbstractHTTPDestination) $r6;

     label1:
        return r7;
    }

    public org.apache.cxf.transport.http.AbstractHTTPDestination checkRestfulRequest(java.lang.String)
    {
        org.apache.cxf.transport.http.AbstractHTTPDestination r9;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, $i8, $i10, $i11;
        java.lang.String r5, r6, r7, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;
        java.util.Iterator $r2;
        java.util.Set $r1;
        char $c4;
        org.apache.cxf.transport.MessageObserver $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        r7 := @parameter0: java.lang.String;

        $i10 = (int) -1;

        i7 = $i10;

        r9 = null;

        $r1 = virtualinvoke r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Set getDestinationsPaths()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 <= 1 goto label2;

        $z3 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z3 == 0 goto label2;

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $r10 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label3;

     label2:
        $r10 = r5;

     label3:
        r6 = $r10;

        $z4 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z4 != 0 goto label4;

        $r8 = "/";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label4;

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label5;

        $z2 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>($r10);

        if $z2 == 0 goto label5;

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        $c4 = virtualinvoke r7.<java.lang.String: char charAt(int)>($i3);

        $i11 = (int) $c4;

        if $i11 != 47 goto label5;

     label4:
        $i8 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i8 <= i7 goto label5;

        r9 = virtualinvoke r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: org.apache.cxf.transport.http.AbstractHTTPDestination getDestinationForPath(java.lang.String)>(r5);

        i7 = virtualinvoke r5.<java.lang.String: int length()>();

     label5:
        goto label1;

     label6:
        if r9 == null goto label7;

        $r3 = virtualinvoke r9.<org.apache.cxf.transport.http.AbstractHTTPDestination: org.apache.cxf.transport.MessageObserver getMessageObserver()>();

        if $r3 != null goto label7;

        return null;

     label7:
        return r9;
    }

    public java.util.Collection getDestinations()
    {
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;
        java.util.Collection $r2, $r3;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        $r1 = r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public org.apache.cxf.transport.AbstractDestination[] getSortedDestinations()
    {
        org.apache.cxf.transport.AbstractDestination[] $r4, $r6;
        java.lang.Object[] $r5;
        org.apache.cxf.transport.http.DestinationRegistryImpl r1;
        java.util.Collection $r2;
        org.apache.cxf.transport.http.DestinationRegistryImpl$1 $r3;
        int $i0;
        java.util.LinkedList $r0;

        r1 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        $r0 = new java.util.LinkedList;

        $r2 = virtualinvoke r1.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.Collection getDestinations()>();

        specialinvoke $r0.<java.util.LinkedList: void <init>(java.util.Collection)>($r2);

        $r3 = new org.apache.cxf.transport.http.DestinationRegistryImpl$1;

        specialinvoke $r3.<org.apache.cxf.transport.http.DestinationRegistryImpl$1: void <init>(org.apache.cxf.transport.http.DestinationRegistryImpl)>(r1);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r3);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r4 = newarray (org.apache.cxf.transport.AbstractDestination)[$i0];

        $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.cxf.transport.AbstractDestination[]) $r5;

        return $r6;
    }

    public java.util.Set getDestinationsPaths()
    {
        org.apache.cxf.transport.http.DestinationRegistryImpl r0;
        java.util.Set $r2, $r3;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.apache.cxf.transport.http.DestinationRegistryImpl;

        $r1 = r0.<org.apache.cxf.transport.http.DestinationRegistryImpl: java.util.concurrent.ConcurrentMap destinations>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public static java.lang.String getTrimmedPath(java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3, $r4, r5;
        boolean $z0, $z1, $z2, $z3;

        r5 := @parameter0: java.lang.String;

        if r5 != null goto label1;

        return "/";

     label1:
        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("http://localhost/");

        if $z0 == 0 goto label2;

        $r4 = "http://localhost/";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label3;

     label2:
        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("https://localhost/");

        if $z1 == 0 goto label3;

        $r3 = "https://localhost/";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i0);

     label3:
        $z3 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("://");

        if $z3 != 0 goto label4;

        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 != 0 goto label4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return r5;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.transport.http.DestinationRegistryImpl: java.lang.String SLASH> = "/";

        return;
    }
}
