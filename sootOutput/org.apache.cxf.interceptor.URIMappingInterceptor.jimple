public class org.apache.cxf.interceptor.URIMappingInterceptor extends org.apache.cxf.interceptor.AbstractInDatabindingInterceptor
{
    public static final java.lang.String URIMAPPING_SKIP;
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.interceptor.URIMappingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        specialinvoke r0.<org.apache.cxf.interceptor.AbstractInDatabindingInterceptor: void <init>(java.lang.String)>("unmarshal");

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        org.apache.cxf.message.MessageContentsList $r12, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.logging.Logger $r4, $r9, $r19, $r29, $r34, $r36, $r42;
        java.lang.StringBuilder $r28, $r30, $r31, $r35, $r38, $r39, $r41, $r43, $r44;
        javax.xml.namespace.QName $r21, $r22, $r24;
        java.lang.Object[] $r17;
        org.apache.cxf.service.model.BindingOperationInfo $r11, r46;
        org.apache.cxf.common.i18n.Message $r16;
        java.util.logging.Level $r3, $r8, $r33, $r37;
        org.apache.cxf.interceptor.Fault $r15;
        java.lang.Boolean $r47;
        java.lang.String r2, $r6, $r7, $r18, $r23, $r25, $r32, $r40, $r45, $r48;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.interceptor.URIMappingInterceptor r5;
        org.apache.cxf.message.Exchange $r10, $r13, $r14, $r26;
        java.lang.Object $r1, $r20, $r49;

        r5 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.request.method");

        r2 = (java.lang.String) $r1;

        $r4 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z0 == 0 goto label01;

        $r42 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking HTTP method ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.util.logging.Logger: void fine(java.lang.String)>($r45);

     label01:
        $z1 = virtualinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: boolean isGET(org.apache.cxf.message.Message)>(r0);

        if $z1 != 0 goto label03;

        $r34 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r33 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z6 = virtualinvoke $r34.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r33);

        if $z6 == 0 goto label02;

        $r36 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r37 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URIMappingInterceptor can only handle HTTP GET, not HTTP ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r36.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r37, $r40);

     label02:
        return;

     label03:
        $r6 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String URIMAPPING_SKIP>;

        $z2 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean getContextualBoolean(org.apache.cxf.message.Message,java.lang.String,boolean)>(r0, $r6, 0);

        if $z2 == 0 goto label04;

        return;

     label04:
        $r7 = virtualinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String getOperationName(org.apache.cxf.message.Message)>(r0);

        $r9 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z3 = virtualinvoke $r9.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z3 == 0 goto label05;

        $r29 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URIMappingInterceptor get operation: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.util.logging.Logger: void fine(java.lang.String)>($r32);

     label05:
        $r10 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r11 = staticinvoke <org.apache.cxf.service.model.ServiceModelUtil: org.apache.cxf.service.model.BindingOperationInfo getOperation(org.apache.cxf.message.Exchange,java.lang.String)>($r10, $r7);

        r46 = $r11;

        if $r11 == null goto label06;

        if $r7 == null goto label06;

        $r21 = virtualinvoke $r11.<org.apache.cxf.service.model.BindingOperationInfo: javax.xml.namespace.QName getName()>();

        if $r21 == null goto label06;

        $r22 = virtualinvoke $r11.<org.apache.cxf.service.model.BindingOperationInfo: javax.xml.namespace.QName getName()>();

        $r23 = virtualinvoke $r22.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z4 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r23);

        if $z4 != 0 goto label06;

        $r24 = virtualinvoke $r11.<org.apache.cxf.service.model.BindingOperationInfo: javax.xml.namespace.QName getName()>();

        $r25 = virtualinvoke $r24.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z5 != 0 goto label10;

     label06:
        $r47 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r48 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String NO_VALIDATE_PARTS>;

        $r49 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>($r48);

        $z7 = virtualinvoke $r47.<java.lang.Boolean: boolean equals(java.lang.Object)>($r49);

        if $z7 != 0 goto label07;

        $r15 = new org.apache.cxf.interceptor.Fault;

        $r16 = new org.apache.cxf.common.i18n.Message;

        $r19 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = $r7;

        $r18 = <org.apache.cxf.message.Message: java.lang.String PATH_INFO>;

        $r20 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r18);

        $r17[1] = $r20;

        specialinvoke $r16.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("NO_OPERATION_PATH", $r19, $r17);

        specialinvoke $r15.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message)>($r16);

        throw $r15;

     label07:
        $r12 = new org.apache.cxf.message.MessageContentsList;

        specialinvoke $r12.<org.apache.cxf.message.MessageContentsList: void <init>()>();

        virtualinvoke $r12.<org.apache.cxf.message.MessageContentsList: boolean add(java.lang.Object)>(null);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/util/List;", $r12);

        if $r11 != null goto label08;

        $r14 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        r46 = specialinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: org.apache.cxf.service.model.BindingOperationInfo findAnyOp(org.apache.cxf.message.Exchange)>($r14);

     label08:
        if r46 == null goto label09;

        $r13 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r13.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/service/model/BindingOperationInfo;", r46);

     label09:
        goto label11;

     label10:
        $r26 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r26.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/service/model/BindingOperationInfo;", $r11);

        $r27 = virtualinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: org.apache.cxf.message.MessageContentsList getParameters(org.apache.cxf.message.Message,org.apache.cxf.service.model.BindingOperationInfo)>(r0, $r11);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/util/List;", $r27);

     label11:
        return;
    }

    private org.apache.cxf.service.model.BindingOperationInfo findAnyOp(org.apache.cxf.message.Exchange)
    {
        org.apache.cxf.service.model.BindingOperationInfo r8;
        org.apache.cxf.service.model.MessagePartInfo $r15;
        boolean $z0, $z1, $z2;
        org.apache.cxf.service.model.EndpointInfo $r3;
        java.util.Iterator $r6;
        org.apache.cxf.service.model.MessageInfo $r11, $r14;
        java.util.Collection $r5;
        org.apache.cxf.service.model.BindingInfo $r4;
        org.apache.cxf.interceptor.URIMappingInterceptor r18;
        org.apache.cxf.message.Exchange r0;
        java.util.List $r12;
        org.apache.cxf.endpoint.Endpoint r2;
        org.apache.cxf.service.model.BindingMessageInfo $r9, $r10, $r13;
        java.lang.Object $r1, $r7;
        javax.xml.namespace.QName $r16, $r17;

        r18 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Exchange;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/Endpoint;");

        r2 = (org.apache.cxf.endpoint.Endpoint) $r1;

        $r3 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.BindingInfo getBinding()>();

        $r5 = virtualinvoke $r4.<org.apache.cxf.service.model.BindingInfo: java.util.Collection getOperations()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.cxf.service.model.BindingOperationInfo) $r7;

        $r9 = virtualinvoke r8.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingMessageInfo getInput()>();

        if $r9 == null goto label2;

        $r10 = virtualinvoke r8.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingMessageInfo getInput()>();

        $r11 = virtualinvoke $r10.<org.apache.cxf.service.model.BindingMessageInfo: org.apache.cxf.service.model.MessageInfo getMessageInfo()>();

        $r12 = virtualinvoke $r11.<org.apache.cxf.service.model.MessageInfo: java.util.List getMessageParts()>();

        $z1 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r13 = virtualinvoke r8.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingMessageInfo getInput()>();

        $r14 = virtualinvoke $r13.<org.apache.cxf.service.model.BindingMessageInfo: org.apache.cxf.service.model.MessageInfo getMessageInfo()>();

        $r15 = virtualinvoke $r14.<org.apache.cxf.service.model.MessageInfo: org.apache.cxf.service.model.MessagePartInfo getMessagePart(int)>(0);

        $r16 = <org.apache.cxf.common.util.XMLSchemaQNames: javax.xml.namespace.QName XSD_ANY>;

        $r17 = virtualinvoke $r15.<org.apache.cxf.service.model.MessagePartInfo: javax.xml.namespace.QName getTypeQName()>();

        $z2 = virtualinvoke $r16.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label2;

        return r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    private java.lang.reflect.Method getMethod(org.apache.cxf.message.Message, org.apache.cxf.service.model.BindingOperationInfo)
    {
        org.apache.cxf.message.Message r0;
        org.apache.cxf.service.model.BindingOperationInfo r8;
        org.apache.cxf.interceptor.URIMappingInterceptor r10;
        org.apache.cxf.service.invoker.MethodDispatcher r7;
        org.apache.cxf.message.Exchange $r1;
        org.apache.cxf.service.Service $r4;
        java.lang.Object $r2, $r6;
        java.lang.Class $r3;
        java.lang.String $r5;
        java.lang.reflect.Method $r9;

        r10 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r8 := @parameter1: org.apache.cxf.service.model.BindingOperationInfo;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/Service;");

        $r4 = (org.apache.cxf.service.Service) $r2;

        $r3 = class "Lorg/apache/cxf/service/invoker/MethodDispatcher;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke $r4.<org.apache.cxf.service.Service: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (org.apache.cxf.service.invoker.MethodDispatcher) $r6;

        $r9 = interfaceinvoke r7.<org.apache.cxf.service.invoker.MethodDispatcher: java.lang.reflect.Method getMethod(org.apache.cxf.service.model.BindingOperationInfo)>(r8);

        return $r9;
    }

    private boolean isFixedParameterOrder(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        java.lang.Boolean r3;
        org.apache.cxf.interceptor.URIMappingInterceptor r4;
        java.lang.Object $r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        r4 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = <org.apache.cxf.message.Message: java.lang.String FIXED_PARAMETER_ORDER>;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.lang.Boolean) $r2;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected java.util.Map keepInOrder(java.util.Map, org.apache.cxf.service.model.OperationInfo, java.util.List)
    {
        java.util.Map r0;
        boolean $z0, $z1;
        java.util.Collection $r12;
        org.apache.cxf.service.model.OperationInfo r24;
        java.util.Set $r11;
        java.util.logging.Logger $r5, $r14;
        java.util.List r1;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r13, $r15, $r16;
        java.util.LinkedHashMap $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r10, $r17, r20, r25;
        java.util.Iterator $r3, $r18;
        org.apache.cxf.interceptor.URIMappingInterceptor r23;
        java.lang.Object $r19, $r21, $r22;

        r23 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: java.util.Map;

        r24 := @parameter1: org.apache.cxf.service.model.OperationInfo;

        r1 := @parameter2: java.util.List;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r21 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r21;

        $r22 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r22);

        goto label3;

     label4:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 == $i1 goto label6;

        $r5 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters definded in WSDL but found ");

        $i3 = interfaceinvoke r0.<java.util.Map: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in request!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>($r10);

        $r11 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r12 = staticinvoke <org.apache.cxf.common.util.CollectionUtils: java.util.Collection diff(java.util.Collection,java.util.Collection)>(r1, $r11);

        if $r12 == null goto label6;

        $i4 = interfaceinvoke $r12.<java.util.Collection: int size()>();

        if $i4 <= 0 goto label6;

        $r14 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set the following parameters to null: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void fine(java.lang.String)>($r17);

        $r18 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r19;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, null);

        goto label5;

     label6:
        return $r2;
    }

    protected org.apache.cxf.message.MessageContentsList getParameters(org.apache.cxf.message.Message, org.apache.cxf.service.model.BindingOperationInfo)
    {
        org.apache.cxf.message.MessageContentsList $r0, $r50;
        java.util.Map $r3, $r42, r51;
        java.util.Set $r54;
        java.lang.StringBuilder $r19, $r21, $r22, $r23, $r24;
        javax.xml.namespace.QName $r33, $r36;
        java.lang.Object[] $r18, $r46;
        org.apache.cxf.service.model.BindingOperationInfo r4, $r27, $r49;
        java.lang.String r8, r14, $r25, $r34, $r37, $r48;
        org.apache.cxf.service.model.MessagePartInfo r56, r57, r58;
        java.util.Map$Entry r6;
        org.apache.cxf.interceptor.URIMappingInterceptor r1;
        java.lang.Class[] $r53;
        java.lang.reflect.Method $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.Collection $r38, $r43;
        org.apache.cxf.service.model.OperationInfo $r9, $r28, $r39, $r41;
        java.util.logging.Logger $r15, $r20, $r47;
        java.util.List $r11, $r30, $r40;
        org.apache.cxf.common.i18n.Message $r17, $r45;
        org.apache.cxf.interceptor.Fault $r16, $r44;
        int i0;
        java.util.Iterator $r12, $r31, $r55;
        org.apache.cxf.service.model.MessageInfo $r10, $r29;
        org.apache.cxf.message.Message r2;
        java.lang.Object $r5, $r7, $r13, $r32, $r35, r59;
        java.lang.Class $r26;

        r1 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r2 := @parameter0: org.apache.cxf.message.Message;

        r4 := @parameter1: org.apache.cxf.service.model.BindingOperationInfo;

        $r0 = new org.apache.cxf.message.MessageContentsList;

        specialinvoke $r0.<org.apache.cxf.message.MessageContentsList: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: java.util.Map getQueries(org.apache.cxf.message.Message)>(r2);

        r51 = $r3;

        $z0 = specialinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: boolean isFixedParameterOrder(org.apache.cxf.message.Message)>(r2);

        if $z0 != 0 goto label02;

        $r38 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $z7 = staticinvoke <org.apache.cxf.common.util.CollectionUtils: boolean isEmpty(java.util.Collection)>($r38);

        $r39 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r40 = staticinvoke <org.apache.cxf.service.model.ServiceModelUtil: java.util.List getOperationInputPartNames(org.apache.cxf.service.model.OperationInfo)>($r39);

        $r41 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r42 = virtualinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: java.util.Map keepInOrder(java.util.Map,org.apache.cxf.service.model.OperationInfo,java.util.List)>($r3, $r41, $r40);

        r51 = $r42;

        if $z7 != 0 goto label02;

        $r43 = interfaceinvoke $r42.<java.util.Map: java.util.Collection values()>();

        $z8 = staticinvoke <org.apache.cxf.common.util.CollectionUtils: boolean isEmpty(java.util.Collection)>($r43);

        if $z8 == 0 goto label02;

        $z9 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: boolean isUnwrappedCapable()>();

        if $z9 == 0 goto label01;

        $r49 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingOperationInfo getUnwrappedOperation()>();

        $r50 = virtualinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: org.apache.cxf.message.MessageContentsList getParameters(org.apache.cxf.message.Message,org.apache.cxf.service.model.BindingOperationInfo)>(r2, $r49);

        return $r50;

     label01:
        $r44 = new org.apache.cxf.interceptor.Fault;

        $r45 = new org.apache.cxf.common.i18n.Message;

        $r47 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r46 = newarray (java.lang.Object)[1];

        $r48 = virtualinvoke $r40.<java.lang.Object: java.lang.String toString()>();

        $r46[0] = $r48;

        specialinvoke $r45.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("ORDERED_PARAM_REQUIRED", $r47, $r46);

        specialinvoke $r44.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message)>($r45);

        throw $r44;

     label02:
        $r52 = specialinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.reflect.Method getMethod(org.apache.cxf.message.Message,org.apache.cxf.service.model.BindingOperationInfo)>(r2, r4);

        $r53 = virtualinvoke $r52.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r54 = interfaceinvoke r51.<java.util.Map: java.util.Set entrySet()>();

        $r55 = interfaceinvoke $r54.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z10 = interfaceinvoke $r55.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label14;

        $r5 = interfaceinvoke $r55.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (java.lang.String) $r7;

        r56 = null;

        $r9 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.OperationInfo: org.apache.cxf.service.model.MessageInfo getInput()>();

        $r11 = virtualinvoke $r10.<org.apache.cxf.service.model.MessageInfo: java.util.List getMessageParts()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r35 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.apache.cxf.service.model.MessagePartInfo) $r35;

        $r36 = virtualinvoke r57.<org.apache.cxf.service.model.MessagePartInfo: javax.xml.namespace.QName getConcreteName()>();

        $r37 = virtualinvoke $r36.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z6 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z6 == 0 goto label05;

        r56 = r57;

        goto label06;

     label05:
        goto label04;

     label06:
        if r56 != null goto label09;

        $z3 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: boolean isUnwrappedCapable()>();

        if $z3 == 0 goto label09;

        $r27 = virtualinvoke r4.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingOperationInfo getUnwrappedOperation()>();

        $r28 = virtualinvoke $r27.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r29 = virtualinvoke $r28.<org.apache.cxf.service.model.OperationInfo: org.apache.cxf.service.model.MessageInfo getInput()>();

        $r30 = virtualinvoke $r29.<org.apache.cxf.service.model.MessageInfo: java.util.List getMessageParts()>();

        $r31 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.apache.cxf.service.model.MessagePartInfo) $r32;

        $r33 = virtualinvoke r58.<org.apache.cxf.service.model.MessagePartInfo: javax.xml.namespace.QName getConcreteName()>();

        $r34 = virtualinvoke $r33.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z5 == 0 goto label08;

        r56 = r58;

        goto label09;

     label08:
        goto label07;

     label09:
        i0 = 0;

        if r56 == null goto label10;

        i0 = virtualinvoke r56.<org.apache.cxf.service.model.MessagePartInfo: int getIndex()>();

     label10:
        $r26 = $r53[i0];

        if $r26 != null goto label11;

        $r15 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r15.<java.util.logging.Logger: void warning(java.lang.String)>("URIMappingInterceptor MessagePartInfo NULL ");

        $r16 = new org.apache.cxf.interceptor.Fault;

        $r17 = new org.apache.cxf.common.i18n.Message;

        $r20 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on key ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r25;

        specialinvoke $r17.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.logging.Logger,java.lang.Object[])>("NO_PART_FOUND", $r20, $r18);

        specialinvoke $r16.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message)>($r17);

        throw $r16;

     label11:
        $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (java.lang.String) $r13;

        $z2 = virtualinvoke $r26.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label12;

        if r14 == null goto label12;

        r59 = staticinvoke <org.apache.cxf.common.util.PrimitiveUtils: java.lang.Object read(java.lang.String,java.lang.Class)>(r14, $r26);

        goto label13;

     label12:
        r59 = specialinvoke r1.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.Object readType(java.lang.String,java.lang.Class)>(r14, $r26);

     label13:
        virtualinvoke $r0.<org.apache.cxf.message.MessageContentsList: java.lang.Object set(int,java.lang.Object)>(i0, r59);

        virtualinvoke $r0.<org.apache.cxf.message.MessageContentsList: int size()>();

        goto label03;

     label14:
        return $r0;
    }

    private java.util.Date parseDate(java.lang.String, java.lang.Class)
    {
        java.util.Date $r36;
        java.text.ParseException $r24;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r26, $r27, $r28, $r29, $r30, $r31;
        java.text.SimpleDateFormat $r14, $r20, $r21, $r22, $r23, r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r8, $r10, $r12, $r16, $r18, $r32, r34;
        org.apache.cxf.interceptor.URIMappingInterceptor r33;
        java.lang.RuntimeException $r0, $r25;
        java.lang.Class r3;

        r33 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r34 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $i0 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i0 != 10 goto label1;

        $r23 = new java.text.SimpleDateFormat;

        specialinvoke $r23.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        r35 = $r23;

        goto label6;

     label1:
        $i1 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i1 != 19 goto label2;

        $r22 = new java.text.SimpleDateFormat;

        specialinvoke $r22.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss");

        r35 = $r22;

        goto label6;

     label2:
        $i2 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i2 != 23 goto label3;

        $r21 = new java.text.SimpleDateFormat;

        specialinvoke $r21.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS");

        r35 = $r21;

        goto label6;

     label3:
        $i3 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i3 != 25 goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $i10 = virtualinvoke r34.<java.lang.String: int length()>();

        $i11 = $i10 - 3;

        $r16 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $i12 = virtualinvoke r34.<java.lang.String: int length()>();

        $i13 = $i12 - 2;

        $i14 = virtualinvoke r34.<java.lang.String: int length()>();

        $r18 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int,int)>($i13, $i14);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r34 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new java.text.SimpleDateFormat;

        specialinvoke $r20.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ssZZZZZ");

        r35 = $r20;

        goto label6;

     label4:
        $i4 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i4 != 29 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i5 = virtualinvoke r34.<java.lang.String: int length()>();

        $i6 = $i5 - 3;

        $r10 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $i7 = virtualinvoke r34.<java.lang.String: int length()>();

        $i8 = $i7 - 2;

        $i9 = virtualinvoke r34.<java.lang.String: int length()>();

        $r12 = virtualinvoke r34.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r34 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.text.SimpleDateFormat;

        specialinvoke $r14.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZZZZZ");

        r35 = $r14;

        goto label6;

     label5:
        $r0 = new java.lang.RuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label6:
        $r36 = virtualinvoke r35.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r34);

     label7:
        return $r36;

     label8:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of \'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r32);

        throw $r25;

        catch java.text.ParseException from label6 to label7 with label8;
    }

    private java.lang.Object readType(java.lang.String, java.lang.Class)
    {
        java.util.Date $r5;
        java.lang.NoSuchMethodException $r9;
        java.lang.reflect.Method $r7;
        boolean $z0;
        java.lang.IllegalAccessException $r27;
        java.lang.reflect.InvocationTargetException $r18;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r33, $r34;
        java.lang.Object[] $r8;
        java.util.Calendar $r2, $r4;
        java.lang.String r0, $r17, $r26, $r35;
        org.apache.cxf.interceptor.URIMappingInterceptor r3;
        java.lang.Class[] $r6;
        char $c0;
        java.lang.RuntimeException $r10, $r19, $r28;
        java.lang.Class r1;
        java.lang.Object r36;

        r3 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r36 = r0;

        if r0 != null goto label01;

        goto label17;

     label01:
        if class "Ljava/lang/Integer;" != r1 goto label02;

        r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r0);

        goto label17;

     label02:
        if class "Ljava/lang/Byte;" != r1 goto label03;

        r36 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>(r0);

        goto label17;

     label03:
        if class "Ljava/lang/Short;" != r1 goto label04;

        r36 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>(r0);

        goto label17;

     label04:
        if class "Ljava/lang/Long;" != r1 goto label05;

        r36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r0);

        goto label17;

     label05:
        if class "Ljava/lang/Float;" != r1 goto label06;

        r36 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>(r0);

        goto label17;

     label06:
        if class "Ljava/lang/Double;" != r1 goto label07;

        r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

        goto label17;

     label07:
        if class "Ljava/lang/Boolean;" != r1 goto label08;

        r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r0);

        goto label17;

     label08:
        if class "Ljava/lang/Character;" != r1 goto label09;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        r36 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        goto label17;

     label09:
        if r1 == null goto label15;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label15;

     label10:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r6);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r0;

        r36 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label11:
        goto label17;

     label12:
        $r27 := @caughtexception;

        $r28 = new java.lang.RuntimeException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String)>($r35);

        throw $r28;

     label13:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>($r26);

        throw $r19;

     label14:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label15:
        if class "Ljava/util/Date;" != r1 goto label16;

        r36 = specialinvoke r3.<org.apache.cxf.interceptor.URIMappingInterceptor: java.util.Date parseDate(java.lang.String,java.lang.Class)>(r0, r1);

        goto label17;

     label16:
        if class "Ljava/util/Calendar;" != r1 goto label17;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        r36 = $r2;

        $r4 = (java.util.Calendar) $r2;

        $r5 = specialinvoke r3.<org.apache.cxf.interceptor.URIMappingInterceptor: java.util.Date parseDate(java.lang.String,java.lang.Class)>(r0, r1);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>($r5);

     label17:
        return r36;

        catch java.lang.IllegalAccessException from label10 to label11 with label12;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label13;
        catch java.lang.NoSuchMethodException from label10 to label11 with label14;
    }

    private java.lang.String uriDecode(java.lang.String)
    {
        org.apache.cxf.interceptor.URIMappingInterceptor r8;
        java.util.logging.Logger $r2;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r5, $r7, r9;
        java.io.UnsupportedEncodingException $r0;

        r8 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r9 := @parameter0: java.lang.String;

     label1:
        r9 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>(r9, "UTF-8");

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        $r2 = <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be decoded: ");

        $r5 = virtualinvoke $r0.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void warning(java.lang.String)>($r7);

     label4:
        return r9;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected java.util.Map getQueries(org.apache.cxf.message.Message)
    {
        java.lang.String[] $r13, $r17;
        java.util.LinkedHashMap $r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r2, r4, $r6, $r10, $r11, $r18, $r19, $r20, r21;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r15;
        org.apache.cxf.message.Message r1;
        org.apache.cxf.interceptor.URIMappingInterceptor r5;
        java.util.List $r7, $r14;
        java.lang.Object $r3, $r8, $r9, $r12, $r16;

        r5 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = <org.apache.cxf.message.Message: java.lang.String QUERY_STRING>;

        $r3 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.String) $r3;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r4);

        if $z0 != 0 goto label4;

        $r13 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r4, "&");

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r16;

        $z2 = virtualinvoke r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("=");

        if $z2 == 0 goto label2;

        $r17 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r21, "=");

        $i4 = lengthof $r17;

        if $i4 < 2 goto label2;

        $r19 = $r17[0];

        $r18 = $r17[1];

        $r20 = specialinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String uriDecode(java.lang.String)>($r18);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

     label2:
        goto label1;

     label3:
        return $r0;

     label4:
        $r6 = specialinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String getRest(org.apache.cxf.message.Message)>(r1);

        $r7 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.util.List getParts(java.lang.String,java.lang.String)>($r6, "/");

        i5 = 1;

     label5:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i5 >= $i0 goto label8;

        $i1 = i5 + 1;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i1 <= $i2 goto label6;

        $r12 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, null);

        goto label7;

     label6:
        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        $i3 = i5 + 1;

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i3);

        $r10 = (java.lang.String) $r9;

        $r11 = specialinvoke r5.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String uriDecode(java.lang.String)>($r10);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

     label7:
        i5 = i5 + 2;

        goto label5;

     label8:
        return $r0;
    }

    private java.lang.String getRest(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        org.apache.cxf.interceptor.URIMappingInterceptor r7;
        java.lang.Object $r2, $r5;
        java.lang.String $r1, r3, $r4, $r6, r8;

        r7 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = <org.apache.cxf.message.Message: java.lang.String PATH_INFO>;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.lang.String) $r2;

        $r4 = <org.apache.cxf.message.Message: java.lang.String BASE_PATH>;

        $r5 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r4);

        r8 = (java.lang.String) $r5;

        if r8 != null goto label1;

        r8 = "/";

     label1:
        $r6 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String diff(java.lang.String,java.lang.String)>(r3, r8);

        return $r6;
    }

    protected java.lang.String getOperationName(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r1;
        org.apache.cxf.interceptor.URIMappingInterceptor r0;
        java.lang.String[] $r4;
        int $i0, $i2;
        java.lang.String $r2, $r3, r5;

        r0 := @this: org.apache.cxf.interceptor.URIMappingInterceptor;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = specialinvoke r0.<org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String getRest(org.apache.cxf.message.Message)>(r1);

        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String getFirstNotEmpty(java.lang.String,java.lang.String)>($r2, "/");

        r5 = $r3;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("?");

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\?");

        r5 = $r4[0];

     label1:
        return r5;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;
        java.util.logging.Logger $r6;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lorg/apache/cxf/interceptor/URIMappingInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".skip");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.cxf.interceptor.URIMappingInterceptor: java.lang.String URIMAPPING_SKIP> = $r5;

        $r6 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/URIMappingInterceptor;");

        <org.apache.cxf.interceptor.URIMappingInterceptor: java.util.logging.Logger LOG> = $r6;

        return;
    }
}
