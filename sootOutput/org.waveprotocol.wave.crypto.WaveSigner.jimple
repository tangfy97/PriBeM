public class org.waveprotocol.wave.crypto.WaveSigner extends java.lang.Object
{
    private final org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm algorithm;
    private final org.waveprotocol.wave.crypto.SignerInfo signerInfo;
    private final java.security.PrivateKey signingKey;

    public void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm, java.security.PrivateKey, org.waveprotocol.wave.crypto.SignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        java.lang.String $r4, $r10, $r12, $r17, $r19;
        org.waveprotocol.wave.crypto.WaveSigner r0;
        java.security.Signature $r5;
        java.security.PrivateKey r3;
        org.waveprotocol.wave.crypto.SignatureException $r7, $r14;
        java.security.NoSuchAlgorithmException $r6;
        org.waveprotocol.wave.crypto.SignerInfo r2;
        java.lang.StringBuilder $r8, $r9, $r11, $r15, $r16, $r18;
        java.security.InvalidKeyException $r13;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm r1;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSigner;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm;

        r3 := @parameter1: java.security.PrivateKey;

        r2 := @parameter2: org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm algorithm> = r1;

        r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.crypto.SignerInfo signerInfo> = r2;

        r0.<org.waveprotocol.wave.crypto.WaveSigner: java.security.PrivateKey signingKey> = r3;

     label1:
        $r4 = staticinvoke <org.waveprotocol.wave.crypto.AlgorithmUtil: java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm)>(r1);

        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4);

        virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey)>(r3);

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.waveprotocol.wave.crypto.SignatureException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("private key does not match algorithm ");

        $r17 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r13);

        throw $r14;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.wave.crypto.SignatureException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can not generate signatures of type ");

        $r10 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.waveprotocol.wave.crypto.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label5:
        return;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolSignature sign(byte[])
    {
        byte[] r5, $r7, $r11;
        java.lang.IllegalStateException $r18, $r20, $r22;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder $r6, $r9, $r13, $r15;
        java.lang.String $r2;
        org.waveprotocol.wave.crypto.WaveSigner r0;
        java.security.SignatureException $r21;
        java.security.Signature $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature $r16;
        com.google.protobuf.ByteString $r8, $r12;
        java.security.PrivateKey $r4;
        java.security.NoSuchAlgorithmException $r17;
        org.waveprotocol.wave.crypto.SignerInfo $r10;
        java.security.InvalidKeyException $r19;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm $r1, $r14;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSigner;

        r5 := @parameter0: byte[];

     label1:
        $r1 = r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm algorithm>;

        $r2 = staticinvoke <org.waveprotocol.wave.crypto.AlgorithmUtil: java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm)>($r1);

        $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2);

        $r4 = r0.<org.waveprotocol.wave.crypto.WaveSigner: java.security.PrivateKey signingKey>;

        virtualinvoke $r3.<java.security.Signature: void initSign(java.security.PrivateKey)>($r4);

        virtualinvoke $r3.<java.security.Signature: void update(byte[])>(r5);

        $r6 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignature: org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder newBuilder()>();

        $r7 = virtualinvoke $r3.<java.security.Signature: byte[] sign()>();

        $r8 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r7);

        $r9 = virtualinvoke $r6.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder setSignatureBytes(com.google.protobuf.ByteString)>($r8);

        $r10 = r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.crypto.SignerInfo signerInfo>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.crypto.SignerInfo: byte[] getSignerId()>();

        $r12 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r11);

        $r13 = virtualinvoke $r9.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder setSignerId(com.google.protobuf.ByteString)>($r12);

        $r14 = r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm algorithm>;

        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder setSignatureAlgorithm(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm)>($r14);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$Builder: org.waveprotocol.wave.federation.Proto$ProtocolSignature build()>();

     label2:
        return $r16;

     label3:
        $r21 := @caughtexception;

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label4:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label5:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch java.security.SignatureException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo()
    {
        org.waveprotocol.wave.crypto.SignerInfo $r1;
        org.waveprotocol.wave.crypto.WaveSigner r0;

        r0 := @this: org.waveprotocol.wave.crypto.WaveSigner;

        $r1 = r0.<org.waveprotocol.wave.crypto.WaveSigner: org.waveprotocol.wave.crypto.SignerInfo signerInfo>;

        return $r1;
    }
}
