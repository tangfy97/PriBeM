public class org.apache.tika.server.MetadataResource extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    private org.apache.tika.config.TikaConfig tikaConfig;

    public void <init>(org.apache.tika.config.TikaConfig)
    {
        org.apache.tika.config.TikaConfig r1;
        org.apache.tika.server.MetadataResource r0;

        r0 := @this: org.apache.tika.server.MetadataResource;

        r1 := @parameter0: org.apache.tika.config.TikaConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.server.MetadataResource: org.apache.tika.config.TikaConfig tikaConfig> = r1;

        return;
    }

    public javax.ws.rs.core.StreamingOutput getMetadataFromMultipart(org.apache.cxf.jaxrs.ext.multipart.Attachment, javax.ws.rs.core.UriInfo) throws java.lang.Exception
    {
        javax.ws.rs.core.MultivaluedMap $r4;
        org.apache.cxf.jaxrs.ext.multipart.Attachment r1;
        java.lang.Object $r2;
        javax.ws.rs.core.StreamingOutput $r6;
        javax.ws.rs.core.UriInfo r5;
        org.apache.tika.server.MetadataResource r0;
        java.io.InputStream $r3;

        r0 := @this: org.apache.tika.server.MetadataResource;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.multipart.Attachment;

        r5 := @parameter1: javax.ws.rs.core.UriInfo;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: java.lang.Object getObject(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r3 = (java.io.InputStream) $r2;

        $r4 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $r6 = specialinvoke r0.<org.apache.tika.server.MetadataResource: javax.ws.rs.core.StreamingOutput produceMetadata(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo)>($r3, $r4, r5);

        return $r6;
    }

    public javax.ws.rs.core.StreamingOutput getMetadata(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo) throws java.lang.Exception
    {
        javax.ws.rs.core.MultivaluedMap $r3;
        javax.ws.rs.core.HttpHeaders r2;
        javax.ws.rs.core.StreamingOutput $r5;
        javax.ws.rs.core.UriInfo r4;
        org.apache.tika.server.MetadataResource r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.MetadataResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r4 := @parameter2: javax.ws.rs.core.UriInfo;

        $r3 = interfaceinvoke r2.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r5 = specialinvoke r0.<org.apache.tika.server.MetadataResource: javax.ws.rs.core.StreamingOutput produceMetadata(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo)>(r1, $r3, r4);

        return $r5;
    }

    private javax.ws.rs.core.StreamingOutput produceMetadata(java.io.InputStream, javax.ws.rs.core.MultivaluedMap, javax.ws.rs.core.UriInfo) throws java.lang.Exception
    {
        org.apache.tika.config.TikaConfig $r2;
        org.apache.tika.parser.AutoDetectParser $r3;
        javax.ws.rs.core.MultivaluedMap r4;
        org.xml.sax.helpers.DefaultHandler $r8;
        org.apache.tika.metadata.Metadata $r0;
        org.apache.commons.logging.Log $r6;
        org.apache.tika.server.MetadataResource$1 $r9;
        javax.ws.rs.core.UriInfo r5;
        org.apache.tika.server.MetadataResource r1;
        java.io.InputStream r7;

        r1 := @this: org.apache.tika.server.MetadataResource;

        r7 := @parameter0: java.io.InputStream;

        r4 := @parameter1: javax.ws.rs.core.MultivaluedMap;

        r5 := @parameter2: javax.ws.rs.core.UriInfo;

        $r0 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r0.<org.apache.tika.metadata.Metadata: void <init>()>();

        $r2 = r1.<org.apache.tika.server.MetadataResource: org.apache.tika.config.TikaConfig tikaConfig>;

        $r3 = staticinvoke <org.apache.tika.server.TikaResource: org.apache.tika.parser.AutoDetectParser createParser(org.apache.tika.config.TikaConfig)>($r2);

        staticinvoke <org.apache.tika.server.TikaResource: void fillMetadata(org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.MultivaluedMap)>($r3, $r0, r4);

        $r6 = <org.apache.tika.server.MetadataResource: org.apache.commons.logging.Log logger>;

        staticinvoke <org.apache.tika.server.TikaResource: void logRequest(org.apache.commons.logging.Log,javax.ws.rs.core.UriInfo,org.apache.tika.metadata.Metadata)>($r6, r5, $r0);

        $r8 = new org.xml.sax.helpers.DefaultHandler;

        specialinvoke $r8.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        virtualinvoke $r3.<org.apache.tika.parser.AutoDetectParser: void parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata)>(r7, $r8, $r0);

        $r9 = new org.apache.tika.server.MetadataResource$1;

        specialinvoke $r9.<org.apache.tika.server.MetadataResource$1: void <init>(org.apache.tika.server.MetadataResource,org.apache.tika.metadata.Metadata)>(r1, $r0);

        return $r9;
    }

    public static void metadataToCsv(org.apache.tika.metadata.Metadata, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.Object[] $r9;
        au.com.bytecode.opencsv.CSVWriter $r0;
        java.lang.String[] $r4, $r6, $r10;
        java.util.ArrayList $r7;
        org.apache.tika.metadata.Metadata r3;
        java.util.List $r8;
        int i0, $i1, $i2, i3;
        java.io.OutputStreamWriter $r1;
        java.lang.String r5;

        r3 := @parameter0: org.apache.tika.metadata.Metadata;

        r2 := @parameter1: java.io.OutputStream;

        $r0 = new au.com.bytecode.opencsv.CSVWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, "UTF-8");

        specialinvoke $r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer)>($r1);

        $r4 = virtualinvoke r3.<org.apache.tika.metadata.Metadata: java.lang.String[] names()>();

        i0 = lengthof $r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r5 = $r4[i3];

        $r6 = virtualinvoke r3.<org.apache.tika.metadata.Metadata: java.lang.String[] getValues(java.lang.String)>(r5);

        $r7 = new java.util.ArrayList;

        $i1 = lengthof $r6;

        $i2 = $i1 + 1;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i2);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        virtualinvoke $r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r8);

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r10 = (java.lang.String[]) $r9;

        virtualinvoke $r0.<au.com.bytecode.opencsv.CSVWriter: void writeNext(java.lang.String[])>($r10);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<au.com.bytecode.opencsv.CSVWriter: void close()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/tika/server/MetadataResource;");

        <org.apache.tika.server.MetadataResource: org.apache.commons.logging.Log logger> = $r0;

        return;
    }
}
