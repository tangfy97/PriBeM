public class com.mongodb.QueryBuilder extends java.lang.Object
{
    private com.mongodb.DBObject _query;
    private java.lang.String _currentKey;

    public void <init>()
    {
        com.mongodb.BasicDBObject $r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.mongodb.BasicDBObject;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>()>();

        r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query> = $r1;

        return;
    }

    public static com.mongodb.QueryBuilder start()
    {
        com.mongodb.QueryBuilder $r0;

        $r0 = new com.mongodb.QueryBuilder;

        specialinvoke $r0.<com.mongodb.QueryBuilder: void <init>()>();

        return $r0;
    }

    public static com.mongodb.QueryBuilder start(java.lang.String)
    {
        java.lang.String r1;
        com.mongodb.QueryBuilder $r0, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.mongodb.QueryBuilder;

        specialinvoke $r0.<com.mongodb.QueryBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder put(java.lang.String)>(r1);

        return $r2;
    }

    public com.mongodb.QueryBuilder put(java.lang.String)
    {
        com.mongodb.QueryBuilder r0;
        com.mongodb.DBObject $r2, $r5;
        java.lang.Object $r3;
        com.mongodb.QueryBuilder$NullObject $r4;
        java.lang.String r1, $r6;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<com.mongodb.QueryBuilder: java.lang.String _currentKey> = r1;

        $r2 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r3 = interfaceinvoke $r2.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $r5 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r6 = r0.<com.mongodb.QueryBuilder: java.lang.String _currentKey>;

        $r4 = new com.mongodb.QueryBuilder$NullObject;

        specialinvoke $r4.<com.mongodb.QueryBuilder$NullObject: void <init>(com.mongodb.QueryBuilder$1)>(null);

        interfaceinvoke $r5.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>($r6, $r4);

     label1:
        return r0;
    }

    public com.mongodb.QueryBuilder and(java.lang.String)
    {
        java.lang.String r1;
        com.mongodb.QueryBuilder r0, $r2;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mongodb.QueryBuilder: com.mongodb.QueryBuilder put(java.lang.String)>(r1);

        return $r2;
    }

    public com.mongodb.QueryBuilder greaterThan(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$gt", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder greaterThanEquals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$gte", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder lessThan(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$lt", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder lessThanEquals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$lte", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder is(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>(null, r1);

        return r0;
    }

    public com.mongodb.QueryBuilder notEquals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$ne", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder in(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$in", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder notIn(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$nin", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder mod(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$mod", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder all(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$all", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder size(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$size", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder exists(java.lang.Object)
    {
        java.lang.Object r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$exists", r1);

        return r0;
    }

    public com.mongodb.QueryBuilder regex(java.util.regex.Pattern)
    {
        java.util.regex.Pattern r1;
        com.mongodb.QueryBuilder r0;

        r0 := @this: com.mongodb.QueryBuilder;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>(null, r1);

        return r0;
    }

    public com.mongodb.QueryBuilder withinCenter(double, double, double)
    {
        java.lang.Object[] $r2;
        com.mongodb.QueryBuilder r0;
        java.lang.Double $r4, $r5, $r6;
        com.mongodb.BasicDBObject $r1;
        java.lang.Double[] $r3;
        double d0, d1, d2;

        r0 := @this: com.mongodb.QueryBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new com.mongodb.BasicDBObject;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = newarray (java.lang.Double)[2];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r3[1] = $r5;

        $r2[0] = $r3;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r2[1] = $r6;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>(java.lang.String,java.lang.Object)>("$center", $r2);

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$within", $r1);

        return r0;
    }

    public com.mongodb.QueryBuilder near(double, double)
    {
        com.mongodb.QueryBuilder r0;
        java.lang.Double $r2, $r3;
        java.lang.Double[] $r1;
        double d0, d1;

        r0 := @this: com.mongodb.QueryBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = newarray (java.lang.Double)[2];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[1] = $r3;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$near", $r1);

        return r0;
    }

    public com.mongodb.QueryBuilder near(double, double, double)
    {
        com.mongodb.QueryBuilder r0;
        java.lang.Double $r2, $r3, $r4;
        java.lang.Double[] $r1;
        double d0, d1, d2;

        r0 := @this: com.mongodb.QueryBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = newarray (java.lang.Double)[3];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r1[2] = $r4;

        specialinvoke r0.<com.mongodb.QueryBuilder: void addOperand(java.lang.String,java.lang.Object)>("$near", $r1);

        return r0;
    }

    public transient com.mongodb.QueryBuilder or(com.mongodb.DBObject[])
    {
        com.mongodb.QueryBuilder r0;
        com.mongodb.DBObject[] r3;
        java.util.ArrayList $r5;
        java.util.List r7;
        com.mongodb.DBObject $r1, r4, $r6;
        int $i0, i1;
        java.lang.Object $r2;

        r0 := @this: com.mongodb.QueryBuilder;

        r3 := @parameter0: com.mongodb.DBObject[];

        $r1 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r2 = interfaceinvoke $r1.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("$or");

        r7 = (java.util.List) $r2;

        if r7 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r7 = $r5;

        $r6 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        interfaceinvoke $r6.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("$or", $r5);

     label1:
        $i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        r4 = r3[i1];

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r0;
    }

    public com.mongodb.DBObject get()
    {
        com.mongodb.QueryBuilder r0;
        com.mongodb.DBObject $r1, $r4, $r7;
        java.lang.String r6, $r13;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.mongodb.QueryBuilder$QueryBuilderException $r9;
        java.lang.Object $r5, $r8;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: com.mongodb.QueryBuilder;

        $r1 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r2 = interfaceinvoke $r1.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r8 = interfaceinvoke $r7.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r6);

        $z1 = $r8 instanceof com.mongodb.QueryBuilder$NullObject;

        if $z1 == 0 goto label2;

        $r9 = new com.mongodb.QueryBuilder$QueryBuilderException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No operand for key:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.mongodb.QueryBuilder$QueryBuilderException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        goto label1;

     label3:
        $r4 = r0.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        return $r4;
    }

    private void addOperand(java.lang.String, java.lang.Object)
    {
        com.mongodb.QueryBuilder r1;
        com.mongodb.DBObject $r3, $r6, $r11, $r13;
        java.lang.String r0, $r2, $r5, $r10, $r12;
        boolean $z0;
        com.mongodb.BasicDBObject $r9, r14;
        java.lang.Object $r4, $r7, r8;

        r1 := @this: com.mongodb.QueryBuilder;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r13 = r1.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r12 = r1.<com.mongodb.QueryBuilder: java.lang.String _currentKey>;

        interfaceinvoke $r13.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>($r12, r8);

        return;

     label1:
        $r3 = r1.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r2 = r1.<com.mongodb.QueryBuilder: java.lang.String _currentKey>;

        $r4 = interfaceinvoke $r3.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>($r2);

        $z0 = $r4 instanceof com.mongodb.DBObject;

        if $z0 != 0 goto label2;

        $r9 = new com.mongodb.BasicDBObject;

        specialinvoke $r9.<com.mongodb.BasicDBObject: void <init>()>();

        r14 = $r9;

        $r11 = r1.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r10 = r1.<com.mongodb.QueryBuilder: java.lang.String _currentKey>;

        interfaceinvoke $r11.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>($r10, $r9);

        goto label3;

     label2:
        $r6 = r1.<com.mongodb.QueryBuilder: com.mongodb.DBObject _query>;

        $r5 = r1.<com.mongodb.QueryBuilder: java.lang.String _currentKey>;

        $r7 = interfaceinvoke $r6.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>($r5);

        r14 = (com.mongodb.BasicDBObject) $r7;

     label3:
        virtualinvoke r14.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>(r0, r8);

        return;
    }
}
