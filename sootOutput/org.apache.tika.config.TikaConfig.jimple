public class org.apache.tika.config.TikaConfig extends java.lang.Object
{
    private final org.apache.tika.parser.CompositeParser parser;
    private final org.apache.tika.detect.Detector detector;
    private final org.apache.tika.language.translate.Translator translator;
    private final org.apache.tika.mime.MimeTypes mimeTypes;

    private static org.apache.tika.mime.MimeTypes getDefaultMimeTypes(java.lang.ClassLoader)
    {
        org.apache.tika.mime.MimeTypes $r1;
        java.lang.ClassLoader r0;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MimeTypes getDefaultMimeTypes(java.lang.ClassLoader)>(r0);

        return $r1;
    }

    private static org.apache.tika.detect.Detector getDefaultDetector(org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.mime.MimeTypes r1;
        org.apache.tika.config.ServiceLoader r2;
        org.apache.tika.detect.DefaultDetector $r0;

        r1 := @parameter0: org.apache.tika.mime.MimeTypes;

        r2 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r0 = new org.apache.tika.detect.DefaultDetector;

        specialinvoke $r0.<org.apache.tika.detect.DefaultDetector: void <init>(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, r2);

        return $r0;
    }

    private static org.apache.tika.parser.CompositeParser getDefaultParser(org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r3;
        org.apache.tika.mime.MediaTypeRegistry $r2;
        org.apache.tika.mime.MimeTypes r1;
        org.apache.tika.parser.DefaultParser $r0;

        r1 := @parameter0: org.apache.tika.mime.MimeTypes;

        r3 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r0 = new org.apache.tika.parser.DefaultParser;

        $r2 = virtualinvoke r1.<org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        specialinvoke $r0.<org.apache.tika.parser.DefaultParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,org.apache.tika.config.ServiceLoader)>($r2, r3);

        return $r0;
    }

    private static org.apache.tika.language.translate.Translator getDefaultTranslator(org.apache.tika.config.ServiceLoader)
    {
        org.apache.tika.config.ServiceLoader r1;
        org.apache.tika.language.translate.DefaultTranslator $r0;

        r1 := @parameter0: org.apache.tika.config.ServiceLoader;

        $r0 = new org.apache.tika.language.translate.DefaultTranslator;

        specialinvoke $r0.<org.apache.tika.language.translate.DefaultTranslator: void <init>(org.apache.tika.config.ServiceLoader)>(r1);

        return $r0;
    }

    public void <init>(java.lang.String) throws org.apache.tika.exception.TikaException, java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.tika.config.TikaConfig r0;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r2 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(java.io.File)>($r1);

        return;
    }

    public void <init>(java.io.File) throws org.apache.tika.exception.TikaException, java.io.IOException, org.xml.sax.SAXException
    {
        org.w3c.dom.Document $r3;
        javax.xml.parsers.DocumentBuilder $r1;
        org.apache.tika.config.TikaConfig r0;
        java.io.File r2;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r2 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.tika.config.TikaConfig: javax.xml.parsers.DocumentBuilder getBuilder()>();

        $r3 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)>(r2);

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Document)>($r3);

        return;
    }

    public void <init>(java.net.URL) throws org.apache.tika.exception.TikaException, java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.tika.config.TikaConfig r0;
        java.lang.ClassLoader $r2;
        java.net.URL r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r1 := @parameter0: java.net.URL;

        $r2 = staticinvoke <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(java.net.URL,java.lang.ClassLoader)>(r1, $r2);

        return;
    }

    public void <init>(java.net.URL, java.lang.ClassLoader) throws org.apache.tika.exception.TikaException, java.io.IOException, org.xml.sax.SAXException
    {
        org.w3c.dom.Element $r5;
        java.net.URL r2;
        org.w3c.dom.Document $r4;
        javax.xml.parsers.DocumentBuilder $r1;
        org.apache.tika.config.TikaConfig r0;
        java.lang.String $r3;
        java.lang.ClassLoader r6;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r2 := @parameter0: java.net.URL;

        r6 := @parameter1: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.tika.config.TikaConfig: javax.xml.parsers.DocumentBuilder getBuilder()>();

        $r3 = virtualinvoke r2.<java.net.URL: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Element,java.lang.ClassLoader)>($r5, r6);

        return;
    }

    public void <init>(java.io.InputStream) throws org.apache.tika.exception.TikaException, java.io.IOException, org.xml.sax.SAXException
    {
        org.w3c.dom.Document $r3;
        javax.xml.parsers.DocumentBuilder $r1;
        org.apache.tika.config.TikaConfig r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r2 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.tika.config.TikaConfig: javax.xml.parsers.DocumentBuilder getBuilder()>();

        $r3 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r2);

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Document)>($r3);

        return;
    }

    public void <init>(org.w3c.dom.Document) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.config.TikaConfig r0;
        org.w3c.dom.Element $r2;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r1 := @parameter0: org.w3c.dom.Document;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Element)>($r2);

        return;
    }

    public void <init>(org.w3c.dom.Element) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.config.ServiceLoader $r2;
        org.w3c.dom.Element r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>()>();

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Element,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    public void <init>(org.w3c.dom.Element, java.lang.ClassLoader) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.config.ServiceLoader $r2;
        org.w3c.dom.Element r1;
        org.apache.tika.config.TikaConfig r0;
        java.lang.ClassLoader r3;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.ClassLoader;

        $r2 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r2.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>(r3);

        specialinvoke r0.<org.apache.tika.config.TikaConfig: void <init>(org.w3c.dom.Element,org.apache.tika.config.ServiceLoader)>(r1, $r2);

        return;
    }

    private void <init>(org.w3c.dom.Element, org.apache.tika.config.ServiceLoader) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.config.ServiceLoader r3;
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.parser.CompositeParser $r7;
        org.apache.tika.detect.Detector $r5;
        org.apache.tika.language.translate.Translator $r8;
        org.w3c.dom.Element r1;
        org.apache.tika.mime.MimeTypes $r2, $r4, $r6;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.tika.config.ServiceLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes typesFromDomElement(org.w3c.dom.Element)>(r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes> = $r2;

        $r4 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r5 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detectorFromDomElement(org.w3c.dom.Element,org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, $r4, r3);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detector> = $r5;

        $r6 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r7 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parserFromDomElement(org.w3c.dom.Element,org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r1, $r6, r3);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser> = $r7;

        $r8 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translatorFromDomElement(org.w3c.dom.Element,org.apache.tika.config.ServiceLoader)>(r1, r3);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translator> = $r8;

        return;
    }

    public void <init>(java.lang.ClassLoader) throws org.apache.tika.mime.MimeTypeException, java.io.IOException
    {
        org.apache.tika.config.ServiceLoader $r1;
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.parser.CompositeParser $r7;
        org.apache.tika.detect.Detector $r5;
        org.apache.tika.language.translate.Translator $r8;
        org.apache.tika.mime.MimeTypes $r3, $r4, $r6;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r2 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r1.<org.apache.tika.config.ServiceLoader: void <init>(java.lang.ClassLoader)>(r2);

        $r3 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes getDefaultMimeTypes(java.lang.ClassLoader)>(r2);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes> = $r3;

        $r4 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r5 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector getDefaultDetector(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r4, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detector> = $r5;

        $r6 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r7 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser getDefaultParser(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r6, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser> = $r7;

        $r8 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator getDefaultTranslator(org.apache.tika.config.ServiceLoader)>($r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translator> = $r8;

        return;
    }

    public void <init>() throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        java.net.URL $r18;
        org.w3c.dom.Document $r5;
        boolean $z0;
        org.apache.tika.parser.CompositeParser $r9, $r23;
        org.xml.sax.SAXException $r28;
        java.lang.StringBuilder $r14, $r15, $r16, $r30, $r31, $r32;
        java.lang.ClassLoader $r20;
        java.lang.Throwable $r27;
        org.apache.tika.config.ServiceLoader $r1;
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.exception.TikaException $r13, $r29;
        java.lang.String $r2, $r17, $r33, r35;
        java.io.IOException $r34;
        java.io.FileInputStream $r19;
        org.apache.tika.detect.Detector $r11, $r25;
        java.io.File $r3;
        org.apache.tika.language.translate.Translator $r12, $r26;
        org.w3c.dom.Element $r6;
        javax.xml.parsers.DocumentBuilder $r4;
        org.apache.tika.mime.MimeTypes $r7, $r8, $r10, $r21, $r22, $r24;
        java.io.InputStream r36;

        r0 := @this: org.apache.tika.config.TikaConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.tika.config.ServiceLoader;

        specialinvoke $r1.<org.apache.tika.config.ServiceLoader: void <init>()>();

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("tika.config");

        r35 = $r2;

        if $r2 != null goto label01;

        r35 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("TIKA_CONFIG");

     label01:
        if r35 != null goto label02;

        $r20 = staticinvoke <org.apache.tika.config.ServiceLoader: java.lang.ClassLoader getContextClassLoader()>();

        $r21 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes getDefaultMimeTypes(java.lang.ClassLoader)>($r20);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes> = $r21;

        $r22 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r23 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser getDefaultParser(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r22, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser> = $r23;

        $r24 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r25 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector getDefaultDetector(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r24, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detector> = $r25;

        $r26 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator getDefaultTranslator(org.apache.tika.config.ServiceLoader)>($r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translator> = $r26;

        goto label14;

     label02:
        r36 = null;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r35);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label03;

        $r19 = new java.io.FileInputStream;

        specialinvoke $r19.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        r36 = $r19;

     label03:
        if r36 != null goto label07;

     label04:
        $r18 = new java.net.URL;

        specialinvoke $r18.<java.net.URL: void <init>(java.lang.String)>(r35);

        r36 = virtualinvoke $r18.<java.net.URL: java.io.InputStream openStream()>();

     label05:
        goto label07;

     label06:
        $r34 := @caughtexception;

     label07:
        if r36 != null goto label08;

        r36 = virtualinvoke $r1.<org.apache.tika.config.ServiceLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r35);

     label08:
        if r36 != null goto label09;

        $r13 = new org.apache.tika.exception.TikaException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified Tika configuration not found: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label09:
        $r4 = staticinvoke <org.apache.tika.config.TikaConfig: javax.xml.parsers.DocumentBuilder getBuilder()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r36);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r7 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes typesFromDomElement(org.w3c.dom.Element)>($r6);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes> = $r7;

        $r8 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r9 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parserFromDomElement(org.w3c.dom.Element,org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r6, $r8, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser> = $r9;

        $r10 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r11 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detectorFromDomElement(org.w3c.dom.Element,org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>($r6, $r10, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detector> = $r11;

        $r12 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translatorFromDomElement(org.w3c.dom.Element,org.apache.tika.config.ServiceLoader)>($r6, $r1);

        r0.<org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translator> = $r12;

     label10:
        virtualinvoke r36.<java.io.InputStream: void close()>();

        goto label14;

     label11:
        $r28 := @caughtexception;

        $r29 = new org.apache.tika.exception.TikaException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified Tika configuration has syntax errors: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r28);

        throw $r29;

     label12:
        $r27 := @caughtexception;

     label13:
        virtualinvoke r36.<java.io.InputStream: void close()>();

        throw $r27;

     label14:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch org.xml.sax.SAXException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label13 with label12;
    }

    private static java.lang.String getText(org.w3c.dom.Node)
    {
        org.w3c.dom.NodeList $r2;
        short $s0, $s1;
        org.w3c.dom.Node r0, $r4;
        int $i2, i3, $i4;
        java.lang.StringBuilder $r7;
        java.lang.String $r3, $r5, $r6;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        if $i4 != 3 goto label1;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r6;

     label1:
        $s1 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i3 = 0;

     label2:
        $i2 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i2 goto label3;

        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        $r5 = staticinvoke <org.apache.tika.config.TikaConfig: java.lang.String getText(org.w3c.dom.Node)>($r4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label4:
        return "";
    }

    public org.apache.tika.parser.Parser getParser(org.apache.tika.mime.MediaType)
    {
        org.apache.tika.parser.Parser $r5;
        java.util.Map $r2;
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.parser.CompositeParser $r1;
        java.lang.Object $r4;
        org.apache.tika.mime.MediaType r3;

        r0 := @this: org.apache.tika.config.TikaConfig;

        r3 := @parameter0: org.apache.tika.mime.MediaType;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser>;

        $r2 = virtualinvoke $r1.<org.apache.tika.parser.CompositeParser: java.util.Map getParsers()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r5 = (org.apache.tika.parser.Parser) $r4;

        return $r5;
    }

    public org.apache.tika.parser.Parser getParser()
    {
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.parser.CompositeParser $r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser parser>;

        return $r1;
    }

    public org.apache.tika.detect.Detector getDetector()
    {
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.detect.Detector $r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector detector>;

        return $r1;
    }

    public org.apache.tika.language.translate.Translator getTranslator()
    {
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.language.translate.Translator $r1;

        r0 := @this: org.apache.tika.config.TikaConfig;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator translator>;

        return $r1;
    }

    public org.apache.tika.mime.MimeTypes getMimeRepository()
    {
        org.apache.tika.mime.MimeTypes $r1;
        org.apache.tika.config.TikaConfig r0;

        r0 := @this: org.apache.tika.config.TikaConfig;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        return $r1;
    }

    public org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()
    {
        org.apache.tika.mime.MimeTypes $r1;
        org.apache.tika.config.TikaConfig r0;
        org.apache.tika.mime.MediaTypeRegistry $r2;

        r0 := @this: org.apache.tika.config.TikaConfig;

        $r1 = r0.<org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes mimeTypes>;

        $r2 = virtualinvoke $r1.<org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        return $r2;
    }

    public static org.apache.tika.config.TikaConfig getDefaultConfig()
    {
        org.apache.tika.exception.TikaException $r1;
        org.apache.tika.config.TikaConfig $r0;
        java.io.IOException $r3;
        java.lang.RuntimeException $r2, $r4;

     label1:
        $r0 = new org.apache.tika.config.TikaConfig;

        specialinvoke $r0.<org.apache.tika.config.TikaConfig: void <init>()>();

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to read default configuration", $r3);

        throw $r4;

     label4:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to access default configuration", $r1);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
        catch org.apache.tika.exception.TikaException from label1 to label2 with label4;
    }

    private static javax.xml.parsers.DocumentBuilder getBuilder() throws org.apache.tika.exception.TikaException
    {
        javax.xml.parsers.ParserConfigurationException $r2;
        org.apache.tika.exception.TikaException $r3;
        javax.xml.parsers.DocumentBuilder $r1;
        javax.xml.parsers.DocumentBuilderFactory $r0;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.tika.exception.TikaException;

        specialinvoke $r3.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>("XML parser not available", $r2);

        throw $r3;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    private static org.w3c.dom.Element getChild(org.w3c.dom.Element, java.lang.String)
    {
        short $s0;
        org.w3c.dom.Element r0, $r3;
        org.w3c.dom.Node r4;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r4 == null goto label3;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r2 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = (org.w3c.dom.Element) r4;

        return $r3;

     label2:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label3:
        return null;
    }

    private static org.apache.tika.mime.MimeTypes typesFromDomElement(org.w3c.dom.Element) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.w3c.dom.Element r0, $r1;
        org.apache.tika.mime.MimeTypes $r2, $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.tika.config.TikaConfig: org.w3c.dom.Element getChild(org.w3c.dom.Element,java.lang.String)>(r0, "mimeTypeRepository");

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("resource");

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("resource");

        $r4 = staticinvoke <org.apache.tika.mime.MimeTypesFactory: org.apache.tika.mime.MimeTypes create(java.lang.String)>($r3);

        return $r4;

     label1:
        $r2 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.mime.MimeTypes getDefaultMimeTypes(java.lang.ClassLoader)>(null);

        return $r2;
    }

    private static org.apache.tika.parser.CompositeParser parserFromDomElement(org.w3c.dom.Element, org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.parser.Parser r47;
        org.apache.tika.mime.MediaTypeRegistry $r4;
        java.lang.InstantiationException $r29;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r35;
        org.apache.tika.parser.CompositeParser $r5, $r7;
        java.lang.StringBuilder $r20, $r21, $r22, $r25, $r26, $r27, $r31, $r32, $r33, $r37, $r38, $r39, $r43, $r44, $r45;
        org.apache.tika.config.ServiceLoader r6;
        org.apache.tika.mime.MediaType $r18;
        java.util.ArrayList $r0;
        java.util.HashSet $r15;
        org.apache.tika.exception.TikaException $r19, $r24, $r30, $r36, $r42;
        org.w3c.dom.Node $r8, $r16;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r10, $r17, $r23, $r28, $r34, $r40, $r46;
        org.w3c.dom.NodeList $r2, $r14;
        org.w3c.dom.Element r1, r9;
        org.apache.tika.mime.MimeTypes r3;
        java.lang.Class $r11, $r12;
        java.lang.Object $r13;
        java.lang.ClassNotFoundException $r41;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.tika.mime.MimeTypes;

        r6 := @parameter2: org.apache.tika.config.ServiceLoader;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("parser");

        i3 = 0;

     label01:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i0 goto label14;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke r9.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

     label02:
        $r11 = virtualinvoke r6.<org.apache.tika.config.ServiceLoader: java.lang.Class getServiceClass(java.lang.Class,java.lang.String)>(class "Lorg/apache/tika/parser/Parser;", $r10);

        $r12 = class "Lorg/apache/tika/parser/AutoDetectParser;";

        $z1 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r11);

        if $z1 == 0 goto label03;

        $r24 = new org.apache.tika.exception.TikaException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AutoDetectParser not supported in a <parser> configuration element: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label03:
        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.Object newInstance()>();

        r47 = (org.apache.tika.parser.Parser) $r13;

        $r14 = interfaceinvoke r9.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("mime");

        $i1 = interfaceinvoke $r14.<org.w3c.dom.NodeList: int getLength()>();

        if $i1 <= 0 goto label08;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        i4 = 0;

     label04:
        $i2 = interfaceinvoke $r14.<org.w3c.dom.NodeList: int getLength()>();

        if i4 >= $i2 goto label07;

        $r16 = interfaceinvoke $r14.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $r17 = staticinvoke <org.apache.tika.config.TikaConfig: java.lang.String getText(org.w3c.dom.Node)>($r16);

        $r18 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>($r17);

        if $r18 == null goto label05;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r18);

        goto label06;

     label05:
        $r19 = new org.apache.tika.exception.TikaException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid media type name: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        r47 = staticinvoke <org.apache.tika.parser.ParserDecorator: org.apache.tika.parser.Parser withTypes(org.apache.tika.parser.Parser,java.util.Set)>(r47, $r15);

     label08:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r47);

     label09:
        goto label13;

     label10:
        $r41 := @caughtexception;

        $r42 = new org.apache.tika.exception.TikaException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find a parser class: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r46, $r41);

        throw $r42;

     label11:
        $r35 := @caughtexception;

        $r36 = new org.apache.tika.exception.TikaException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access a parser class: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r35);

        throw $r36;

     label12:
        $r29 := @caughtexception;

        $r30 = new org.apache.tika.exception.TikaException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to instantiate a parser class: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r34, $r29);

        throw $r30;

     label13:
        i3 = i3 + 1;

        goto label01;

     label14:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label15;

        $r7 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.parser.CompositeParser getDefaultParser(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r3, r6);

        return $r7;

     label15:
        $r4 = virtualinvoke r3.<org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        $r5 = new org.apache.tika.parser.CompositeParser;

        specialinvoke $r5.<org.apache.tika.parser.CompositeParser: void <init>(org.apache.tika.mime.MediaTypeRegistry,java.util.List)>($r4, $r0);

        return $r5;

        catch java.lang.ClassNotFoundException from label02 to label09 with label10;
        catch java.lang.IllegalAccessException from label02 to label09 with label11;
        catch java.lang.InstantiationException from label02 to label09 with label12;
    }

    private static org.apache.tika.detect.Detector detectorFromDomElement(org.w3c.dom.Element, org.apache.tika.mime.MimeTypes, org.apache.tika.config.ServiceLoader) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        org.apache.tika.mime.MediaTypeRegistry $r4;
        java.lang.InstantiationException $r13;
        boolean $z0;
        java.lang.IllegalAccessException $r19;
        java.lang.StringBuilder $r15, $r16, $r17, $r21, $r22, $r23, $r27, $r28, $r29;
        org.apache.tika.config.ServiceLoader r6;
        org.apache.tika.detect.CompositeDetector $r5;
        java.util.ArrayList $r0;
        org.apache.tika.exception.TikaException $r14, $r20, $r26;
        org.w3c.dom.Node $r8;
        int $i0, i1;
        java.lang.String $r10, $r18, $r24, $r30;
        org.w3c.dom.NodeList $r2;
        org.apache.tika.detect.Detector $r7;
        org.w3c.dom.Element r1, r9;
        org.apache.tika.mime.MimeTypes r3;
        java.lang.Class $r11;
        java.lang.Object $r12;
        java.lang.ClassNotFoundException $r25;

        r1 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.tika.mime.MimeTypes;

        r6 := @parameter2: org.apache.tika.config.ServiceLoader;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("detector");

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label8;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke r9.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

     label2:
        $r11 = virtualinvoke r6.<org.apache.tika.config.ServiceLoader: java.lang.Class getServiceClass(java.lang.Class,java.lang.String)>(class "Lorg/apache/tika/detect/Detector;", $r10);

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        goto label7;

     label4:
        $r25 := @caughtexception;

        $r26 = new org.apache.tika.exception.TikaException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find a detector class: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r30, $r25);

        throw $r26;

     label5:
        $r19 := @caughtexception;

        $r20 = new org.apache.tika.exception.TikaException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access a detector class: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r19);

        throw $r20;

     label6:
        $r13 := @caughtexception;

        $r14 = new org.apache.tika.exception.TikaException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to instantiate a detector class: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r13);

        throw $r14;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $r7 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.detect.Detector getDefaultDetector(org.apache.tika.mime.MimeTypes,org.apache.tika.config.ServiceLoader)>(r3, r6);

        return $r7;

     label9:
        $r4 = virtualinvoke r3.<org.apache.tika.mime.MimeTypes: org.apache.tika.mime.MediaTypeRegistry getMediaTypeRegistry()>();

        $r5 = new org.apache.tika.detect.CompositeDetector;

        specialinvoke $r5.<org.apache.tika.detect.CompositeDetector: void <init>(org.apache.tika.mime.MediaTypeRegistry,java.util.List)>($r4, $r0);

        return $r5;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.InstantiationException from label2 to label3 with label6;
    }

    private static org.apache.tika.language.translate.Translator translatorFromDomElement(org.w3c.dom.Element, org.apache.tika.config.ServiceLoader) throws org.apache.tika.exception.TikaException, java.io.IOException
    {
        java.lang.InstantiationException $r12;
        boolean $z0;
        java.lang.IllegalAccessException $r18;
        java.lang.StringBuilder $r14, $r15, $r16, $r20, $r21, $r22, $r26, $r27, $r28;
        org.apache.tika.config.ServiceLoader r5;
        java.util.ArrayList $r0;
        org.apache.tika.exception.TikaException $r13, $r19, $r25;
        org.w3c.dom.Node $r7;
        int $i0, i1;
        java.lang.String $r9, $r17, $r23, $r29;
        org.w3c.dom.NodeList $r2;
        org.apache.tika.language.translate.Translator $r4, $r6;
        org.w3c.dom.Element r1, r8;
        java.lang.Object $r3, $r11;
        java.lang.Class $r10;
        java.lang.ClassNotFoundException $r24;

        r1 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.apache.tika.config.ServiceLoader;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("translator");

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label8;

        $r7 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        r8 = (org.w3c.dom.Element) $r7;

        $r9 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

     label2:
        $r10 = virtualinvoke r5.<org.apache.tika.config.ServiceLoader: java.lang.Class getServiceClass(java.lang.Class,java.lang.String)>(class "Lorg/apache/tika/language/translate/Translator;", $r9);

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        goto label7;

     label4:
        $r24 := @caughtexception;

        $r25 = new org.apache.tika.exception.TikaException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find a translator class: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r24);

        throw $r25;

     label5:
        $r18 := @caughtexception;

        $r19 = new org.apache.tika.exception.TikaException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access a translator class: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r18);

        throw $r19;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.apache.tika.exception.TikaException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to instantiate a translator class: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r13;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $r6 = staticinvoke <org.apache.tika.config.TikaConfig: org.apache.tika.language.translate.Translator getDefaultTranslator(org.apache.tika.config.ServiceLoader)>(r5);

        return $r6;

     label9:
        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.tika.language.translate.Translator) $r3;

        return $r4;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.InstantiationException from label2 to label3 with label6;
    }
}
