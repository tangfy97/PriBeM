public class org.apache.commons.compress.archivers.tar.TarArchiveEntry extends java.lang.Object implements org.apache.commons.compress.archivers.tar.TarConstants, org.apache.commons.compress.archivers.ArchiveEntry
{
    private java.lang.String name;
    private int mode;
    private int userId;
    private int groupId;
    private long size;
    private long modTime;
    private boolean checkSumOK;
    private byte linkFlag;
    private java.lang.String linkName;
    private java.lang.String magic;
    private java.lang.String version;
    private java.lang.String userName;
    private java.lang.String groupName;
    private int devMajor;
    private int devMinor;
    private boolean isExtended;
    private long realSize;
    private final java.io.File file;
    public static final int MAX_NAMELEN;
    public static final int DEFAULT_DIR_MODE;
    public static final int DEFAULT_FILE_MODE;
    public static final int MILLIS_PER_SECOND;

    private void <init>()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int $i0;
        java.lang.String $r1, r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size> = 0L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String magic> = "ustar\u0000";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String version> = "00";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor> = 0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.name", "");

        r2 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 31 goto label1;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 31);

     label1:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName> = r2;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        java.util.Date $r2;
        long $l0, $l1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b3;
        int $i2;
        java.lang.String $r1, r3;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String normalizeFileName(java.lang.String,boolean)>(r3, z0);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r1;

        if $z1 == 0 goto label1;

        $i2 = 16877;

        goto label2;

     label1:
        $i2 = 33188;

     label2:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode> = $i2;

        if $z1 == 0 goto label3;

        $b3 = 53;

        goto label4;

     label3:
        $b3 = 48;

     label4:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag> = $b3;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $l1 = $l0 / 1000L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime> = $l1;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName> = "";

        return;
    }

    public void <init>(java.lang.String, byte)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte b0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte,boolean)>(r1, b0, 0);

        return;
    }

    public void <init>(java.lang.String, byte, boolean)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte b0;
        int $i1;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,boolean)>(r1, z0);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag> = b0;

        $i1 = (int) b0;

        if $i1 != 76 goto label1;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String magic> = "ustar ";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String version> = " \u0000";

     label1:
        return;
    }

    public void <init>(java.io.File)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.lang.String $r2, $r3;
        java.io.File r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String normalizeFileName(java.lang.String,boolean)>($r2, 0);

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>(r1, $r3);

        return;
    }

    public void <init>(java.io.File, java.lang.String)
    {
        long $l0, $l1, $l2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int $i3, $i4, $i6, $i8;
        java.lang.String r2, $r6;
        boolean $z0;
        char $c5;
        java.io.File r1;
        java.lang.StringBuilder $r4, $r5, $r7;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size> = 0L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String magic> = "ustar\u0000";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String version> = "00";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName> = "";

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file> = r1;

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode> = 16877;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag> = 53;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 == 0 goto label1;

        $i4 = $i3 - 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        $i6 = (int) $c5;

        if $i6 == 47 goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r6;

        goto label3;

     label2:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = r2;

     label3:
        goto label5;

     label4:
        $i8 = (int) 33188;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode> = $i8;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag> = 48;

        $l0 = virtualinvoke r1.<java.io.File: long length()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size> = $l0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = r2;

     label5:
        $l1 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $l2 = $l1 / 1000L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime> = $l2;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName> = "";

        return;
    }

    public void <init>(byte[])
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void parseTarHeader(byte[])>(r1);

        return;
    }

    public void <init>(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEncoding;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void parseTarHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, r2);

        return;
    }

    public boolean equals(org.apache.commons.compress.archivers.tar.TarArchiveEntry)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0, r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r2 := @parameter0: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1, $r4;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (org.apache.commons.compress.archivers.tar.TarArchiveEntry) r0;

        $z0 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean equals(org.apache.commons.compress.archivers.tar.TarArchiveEntry)>($r4);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isDescendent(org.apache.commons.compress.archivers.tar.TarArchiveEntry)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0, r2;
        java.lang.String $r1, $r3;
        boolean $z0;

        r2 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r0 := @parameter0: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        return $z0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1, $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        return $r2;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String normalizeFileName(java.lang.String,boolean)>(r1, 0);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r2;

        return;
    }

    public void setMode(int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode> = i0;

        return;
    }

    public java.lang.String getLinkName()
    {
        java.lang.String $r1, $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        return $r2;
    }

    public void setLinkName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName> = r1;

        return;
    }

    public int getUserId()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId>;

        return $i0;
    }

    public void setUserId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId> = i0;

        return;
    }

    public int getGroupId()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId>;

        return $i0;
    }

    public void setGroupId(int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId> = i0;

        return;
    }

    public java.lang.String getUserName()
    {
        java.lang.String $r1, $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        return $r2;
    }

    public void setUserName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName> = r1;

        return;
    }

    public java.lang.String getGroupName()
    {
        java.lang.String $r1, $r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

        return $r2;
    }

    public void setGroupName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName> = r1;

        return;
    }

    public void setIds(int, int)
    {
        int i0, i1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setUserId(int)>(i0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setGroupId(int)>(i1);

        return;
    }

    public void setNames(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setUserName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setGroupName(java.lang.String)>(r2);

        return;
    }

    public void setModTime(long)
    {
        long l0, $l1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        l0 := @parameter0: long;

        $l1 = l0 / 1000L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime> = $l1;

        return;
    }

    public void setModTime(java.util.Date)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.util.Date r1;
        long $l0, $l1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l1 = $l0 / 1000L;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime> = $l1;

        return;
    }

    public java.util.Date getModTime()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        java.util.Date $r0;
        long $l0, $l1;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r0 = new java.util.Date;

        $l0 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime>;

        $l1 = $l0 * 1000L;

        specialinvoke $r0.<java.util.Date: void <init>(long)>($l1);

        return $r0;
    }

    public java.util.Date getLastModifiedDate()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.util.Date $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>();

        return $r1;
    }

    public boolean isCheckSumOK()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean checkSumOK>;

        return $z0;
    }

    public java.io.File getFile()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        return $r1;
    }

    public int getMode()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode>;

        return $i0;
    }

    public long getSize()
    {
        long $l0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size>;

        return $l0;
    }

    public void setSize(long)
    {
        long l0;
        java.lang.IllegalArgumentException $r7;
        byte $b1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int $i2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size is out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label1:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size> = l0;

        return;
    }

    public int getDevMajor()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor>;

        return $i0;
    }

    public void setDevMajor(int)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Major device number is out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor> = i0;

        return;
    }

    public int getDevMinor()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor>;

        return $i0;
    }

    public void setDevMinor(int)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minor device number is out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor> = i0;

        return;
    }

    public boolean isExtended()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isExtended>;

        return $z0;
    }

    public long getRealSize()
    {
        long $l0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $l0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long realSize>;

        return $l0;
    }

    public boolean isGNUSparse()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 83 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isGNULongLinkEntry()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 75 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("././@LongLink");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isGNULongNameEntry()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 76 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("././@LongLink");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isPaxHeader()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i2 = (int) $b0;

        if $i2 == 120 goto label1;

        $b1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i3 = (int) $b1;

        if $i3 != 88 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isGlobalPaxHeader()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 103 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDirectory()
    {
        java.io.File $r1, $r3;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        return $z1;

     label1:
        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 53 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isFile()
    {
        java.io.File $r1, $r3;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0, $b1;
        int $i2;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean isFile()>();

        return $z1;

     label1:
        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        if $b0 == 0 goto label2;

        $b1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i2 = (int) $b1;

        if $i2 != 48 goto label3;

     label2:
        return 1;

     label3:
        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public boolean isSymbolicLink()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 50 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLink()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 49 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCharacterDevice()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 51 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBlockDevice()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 52 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFIFO()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        byte $b0;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $b0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        $i1 = (int) $b0;

        if $i1 != 54 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries()
    {
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] $r2, r6;
        java.lang.String[] $r5;
        java.io.File $r1, $r3, $r4, $r8, $r10;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0, $r7;
        int $i0, $i1, i2;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = newarray (org.apache.commons.compress.archivers.tar.TarArchiveEntry)[0];

        return $r2;

     label2:
        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r5;

        r6 = newarray (org.apache.commons.compress.archivers.tar.TarArchiveEntry)[$i0];

        i2 = 0;

     label3:
        $i1 = lengthof $r5;

        if i2 >= $i1 goto label4;

        $r7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $r8 = new java.io.File;

        $r10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.io.File file>;

        $r9 = $r5[i2];

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, $r9);

        specialinvoke $r7.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File)>($r8);

        r6[i2] = $r7;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r6;
    }

    public void writeEntryHeader(byte[])
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.io.IOException $r3, $r5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2, $r6;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

     label1:
        $r2 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)>(r1, $r2, 0);

     label2:
        goto label7;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)>(r1, $r6, 0);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void writeEntryHeader(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean) throws java.io.IOException
    {
        byte[] r1;
        byte $b14;
        boolean z0;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        long $l2, $l5, $l8, $l10, $l12, $l21, $l24, $l26;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i9, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i25, $i27, $i28, i29, i30, i31, i32;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEncoding;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>($r3, r1, 0, 100, r2);

        $i1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode>;

        $l2 = (long) $i1;

        $i3 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l2, r1, $i0, 8, z0);

        $i4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId>;

        $l5 = (long) $i4;

        $i6 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l5, r1, $i3, 8, z0);

        $i7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId>;

        $l8 = (long) $i7;

        $i9 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l8, r1, $i6, 8, z0);

        $l10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size>;

        $i11 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l10, r1, $i9, 12, z0);

        $l12 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime>;

        $i13 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l12, r1, $i11, 12, z0);

        i29 = $i13;

        i30 = 0;

     label1:
        if i30 >= 8 goto label2;

        $i28 = i29;

        i29 = i29 + 1;

        r1[$i28] = 32;

        i30 = i30 + 1;

        goto label1;

     label2:
        i31 = i29 + 1;

        $b14 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag>;

        r1[i29] = $b14;

        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName>;

        $i15 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>($r4, r1, i31, 100, r2);

        $r5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String magic>;

        $i16 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int)>($r5, r1, $i15, 6);

        $r6 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String version>;

        $i17 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int)>($r6, r1, $i16, 2);

        $r7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName>;

        $i18 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>($r7, r1, $i17, 32, r2);

        $r8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName>;

        $i19 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>($r8, r1, $i18, 32, r2);

        $i20 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor>;

        $l21 = (long) $i20;

        $i22 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l21, r1, $i19, 8, z0);

        $i23 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor>;

        $l24 = (long) $i23;

        i32 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int writeEntryHeaderField(long,byte[],int,int,boolean)>($l24, r1, $i22, 8, z0);

     label3:
        $i25 = lengthof r1;

        if i32 >= $i25 goto label4;

        $i27 = i32;

        i32 = i32 + 1;

        r1[$i27] = 0;

        goto label3;

     label4:
        $l26 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long computeCheckSum(byte[])>(r1);

        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatCheckSumOctalBytes(long,byte[],int,int)>($l26, r1, $i13, 8);

        return;
    }

    private int writeEntryHeaderField(long, byte[], int, int, boolean)
    {
        byte[] r0;
        long l0, $l8;
        byte $b4, $b9;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        int i1, i2, $i3, $i5, $i6, $i7, $i10, $i11;
        boolean z0;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        if z0 != 0 goto label2;

        $b4 = l0 cmp 0L;

        $i10 = (int) $b4;

        if $i10 < 0 goto label1;

        $i6 = i2 - 1;

        $i7 = 3 * $i6;

        $l8 = 1L << $i7;

        $b9 = l0 cmp $l8;

        $i11 = (int) $b9;

        if $i11 < 0 goto label2;

     label1:
        $i5 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatLongOctalBytes(long,byte[],int,int)>(0L, r0, i1, i2);

        return $i5;

     label2:
        $i3 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatLongOctalOrBinaryBytes(long,byte[],int,int)>(l0, r0, i1, i2);

        return $i3;
    }

    public void parseTarHeader(byte[])
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        java.io.IOException $r3, $r5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2, $r6;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

     label1:
        $r2 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING>;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void parseTarHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, $r2);

     label2:
        goto label7;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING>;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void parseTarHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)>(r1, $r6, 1);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void parseTarHeader(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEncoding;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void parseTarHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)>(r1, r2, 0);

        return;
    }

    private void parseTarHeader(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean) throws java.io.IOException
    {
        byte[] r1;
        byte $b8;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r13, $r15, $r16;
        long $l0, $l2, $l4, $l6, $l7, $l9, $l11, $l14;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r0;
        int $i1, $i3, $i5, $i10, $i12, $i13, $i15;
        java.lang.String $r3, $r4, r5, $r9, $r11, $r12, $r14, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.commons.compress.archivers.zip.ZipEncoding;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label01;

        $r18 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 0, 100);

        goto label02;

     label01:
        $r18 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, 0, 100, r2);

     label02:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r18;

        $l0 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 100, 8);

        $i1 = (int) $l0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int mode> = $i1;

        $l2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 108, 8);

        $i3 = (int) $l2;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int userId> = $i3;

        $l4 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 116, 8);

        $i5 = (int) $l4;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int groupId> = $i5;

        $l6 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 124, 12);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long size> = $l6;

        $l7 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 136, 12);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long modTime> = $l7;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: boolean verifyCheckSum(byte[])>(r1);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean checkSumOK> = $z1;

        $b8 = r1[156];

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: byte linkFlag> = $b8;

        if z0 == 0 goto label03;

        $r19 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 157, 100);

        goto label04;

     label03:
        $r19 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, 157, 100, r2);

     label04:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String linkName> = $r19;

        $r3 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 257, 6);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String magic> = $r3;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 263, 2);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String version> = $r4;

        if z0 == 0 goto label05;

        $r20 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 265, 32);

        goto label06;

     label05:
        $r20 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, 265, 32, r2);

     label06:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String userName> = $r20;

        if z0 == 0 goto label07;

        $r21 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 297, 32);

        goto label08;

     label07:
        $r21 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, 297, 32, r2);

     label08:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String groupName> = $r21;

        $l9 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 329, 8);

        $i10 = (int) $l9;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMajor> = $i10;

        $l11 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctalOrBinary(byte[],int,int)>(r1, 337, 8);

        $i12 = (int) $l11;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int devMinor> = $i12;

        $i13 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int evaluateType(byte[])>(r1);

        lookupswitch($i13)
        {
            case 2: goto label09;
            case 3: goto label10;
            default: goto label10;
        };

     label09:
        $z2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: boolean parseBoolean(byte[],int)>(r1, 482);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isExtended> = $z2;

        $l14 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctal(byte[],int,int)>(r1, 483, 12);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long realSize> = $l14;

        goto label14;

     label10:
        if z0 == 0 goto label11;

        $r22 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int)>(r1, 345, 155);

        goto label12;

     label11:
        $r22 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r1, 345, 155, r2);

     label12:
        r5 = $r22;

        $z3 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>();

        if $z3 == 0 goto label13;

        $r12 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $z4 = virtualinvoke $r12.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z4 != 0 goto label13;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r17;

     label13:
        $i15 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i15 <= 0 goto label14;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String name> = $r11;

     label14:
        return;
    }

    private static java.lang.String normalizeFileName(java.lang.String, boolean)
    {
        java.util.Locale $r1;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r0, $r2, r3, r4;
        boolean z0, $z1, $z2;
        char $c4, $c5, $c6;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        if $r2 == null goto label5;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("windows");

        if $z2 == 0 goto label4;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 <= 2 goto label5;

        $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $c5 = virtualinvoke r3.<java.lang.String: char charAt(int)>(1);

        $i7 = (int) $c5;

        if $i7 != 58 goto label3;

        $i8 = (int) $c4;

        if $i8 < 97 goto label1;

        $i9 = (int) $c4;

        if $i9 <= 122 goto label2;

     label1:
        $i10 = (int) $c4;

        if $i10 < 65 goto label3;

        $i11 = (int) $c4;

        if $i11 > 90 goto label3;

     label2:
        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(2);

     label3:
        goto label5;

     label4:
        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("netware");

        $i13 = (int) -1;

        if $i0 <= $i13 goto label5;

        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(58);

        $i15 = (int) -1;

        if $i1 == $i15 goto label5;

        $i2 = $i1 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

     label5:
        $c6 = <java.io.File: char separatorChar>;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String replace(char,char)>($c6, 47);

     label6:
        if z0 != 0 goto label7;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 == 0 goto label7;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

        goto label6;

     label7:
        return r4;
    }

    private int evaluateType(byte[])
    {
        byte[] r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("ustar ", r0, 257, 6);

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $z1 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>("ustar\u0000", r0, 257, 6);

        if $z1 == 0 goto label2;

        return 3;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.tar.TarArchiveEntry: int MILLIS_PER_SECOND> = 1000;

        <org.apache.commons.compress.archivers.tar.TarArchiveEntry: int DEFAULT_FILE_MODE> = 33188;

        <org.apache.commons.compress.archivers.tar.TarArchiveEntry: int DEFAULT_DIR_MODE> = 16877;

        <org.apache.commons.compress.archivers.tar.TarArchiveEntry: int MAX_NAMELEN> = 31;

        return;
    }
}
