class org.mozilla.javascript.tools.debugger.VariableModel$1 extends java.lang.Object implements java.util.Comparator
{
    private final org.mozilla.javascript.tools.debugger.VariableModel this$0;

    void <init>(org.mozilla.javascript.tools.debugger.VariableModel)
    {
        org.mozilla.javascript.tools.debugger.VariableModel$1 r0;
        org.mozilla.javascript.tools.debugger.VariableModel r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.VariableModel$1;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.VariableModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.VariableModel$1: org.mozilla.javascript.tools.debugger.VariableModel this$0> = r1;

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        java.lang.Integer $r2, $r3;
        int $i0, $i1, $i2, $i3, $i5;
        org.mozilla.javascript.tools.debugger.VariableModel$1 r6;
        java.lang.Object r0, r1;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r6 := @this: org.mozilla.javascript.tools.debugger.VariableModel$1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $z2 = r1 instanceof java.lang.Integer;

        if $z2 == 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $r5 = (java.lang.String) r0;

        $r4 = (java.lang.String) r1;

        $i3 = virtualinvoke $r5.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r4);

        return $i3;

     label2:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r2 = (java.lang.Integer) r0;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r3 = (java.lang.Integer) r1;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i2 = $i0 - $i1;

        return $i2;
    }
}
