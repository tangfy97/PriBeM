public abstract class org.apache.batik.css.parser.CSSLexicalUnit extends java.lang.Object implements org.w3c.css.sac.LexicalUnit
{
    public static final java.lang.String UNIT_TEXT_CENTIMETER;
    public static final java.lang.String UNIT_TEXT_DEGREE;
    public static final java.lang.String UNIT_TEXT_EM;
    public static final java.lang.String UNIT_TEXT_EX;
    public static final java.lang.String UNIT_TEXT_GRADIAN;
    public static final java.lang.String UNIT_TEXT_HERTZ;
    public static final java.lang.String UNIT_TEXT_INCH;
    public static final java.lang.String UNIT_TEXT_KILOHERTZ;
    public static final java.lang.String UNIT_TEXT_MILLIMETER;
    public static final java.lang.String UNIT_TEXT_MILLISECOND;
    public static final java.lang.String UNIT_TEXT_PERCENTAGE;
    public static final java.lang.String UNIT_TEXT_PICA;
    public static final java.lang.String UNIT_TEXT_PIXEL;
    public static final java.lang.String UNIT_TEXT_POINT;
    public static final java.lang.String UNIT_TEXT_RADIAN;
    public static final java.lang.String UNIT_TEXT_REAL;
    public static final java.lang.String UNIT_TEXT_SECOND;
    public static final java.lang.String TEXT_RGBCOLOR;
    public static final java.lang.String TEXT_RECT_FUNCTION;
    public static final java.lang.String TEXT_COUNTER_FUNCTION;
    public static final java.lang.String TEXT_COUNTERS_FUNCTION;
    protected short lexicalUnitType;
    protected org.w3c.css.sac.LexicalUnit nextLexicalUnit;
    protected org.w3c.css.sac.LexicalUnit previousLexicalUnit;

    protected void <init>(short, org.w3c.css.sac.LexicalUnit)
    {
        short s0;
        org.apache.batik.css.parser.CSSLexicalUnit r0, $r2;
        org.w3c.css.sac.LexicalUnit r1;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        s0 := @parameter0: short;

        r1 := @parameter1: org.w3c.css.sac.LexicalUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.css.parser.CSSLexicalUnit: short lexicalUnitType> = s0;

        r0.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit previousLexicalUnit> = r1;

        if r1 == null goto label1;

        $r2 = (org.apache.batik.css.parser.CSSLexicalUnit) r1;

        $r2.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit nextLexicalUnit> = r0;

     label1:
        return;
    }

    public short getLexicalUnitType()
    {
        short $s0;
        org.apache.batik.css.parser.CSSLexicalUnit r0;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $s0 = r0.<org.apache.batik.css.parser.CSSLexicalUnit: short lexicalUnitType>;

        return $s0;
    }

    public org.w3c.css.sac.LexicalUnit getNextLexicalUnit()
    {
        org.w3c.css.sac.LexicalUnit $r1;
        org.apache.batik.css.parser.CSSLexicalUnit r0;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r1 = r0.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit nextLexicalUnit>;

        return $r1;
    }

    public void setNextLexicalUnit(org.w3c.css.sac.LexicalUnit)
    {
        org.w3c.css.sac.LexicalUnit r1;
        org.apache.batik.css.parser.CSSLexicalUnit r0;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        r1 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r0.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit nextLexicalUnit> = r1;

        return;
    }

    public org.w3c.css.sac.LexicalUnit getPreviousLexicalUnit()
    {
        org.w3c.css.sac.LexicalUnit $r1;
        org.apache.batik.css.parser.CSSLexicalUnit r0;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r1 = r0.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit previousLexicalUnit>;

        return $r1;
    }

    public void setPreviousLexicalUnit(org.w3c.css.sac.LexicalUnit)
    {
        org.w3c.css.sac.LexicalUnit r1;
        org.apache.batik.css.parser.CSSLexicalUnit r0;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        r1 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r0.<org.apache.batik.css.parser.CSSLexicalUnit: org.w3c.css.sac.LexicalUnit previousLexicalUnit> = r1;

        return;
    }

    public int getIntegerValue()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public float getFloatValue()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getDimensionUnitText()
    {
        java.lang.IllegalStateException $r7;
        org.apache.batik.css.parser.CSSLexicalUnit r0;
        short $s0, $s1;
        java.lang.StringBuffer $r3, $r4, $r6;
        int $i2, $i3;
        java.lang.String $r5;

        r0 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $s0 = r0.<org.apache.batik.css.parser.CSSLexicalUnit: short lexicalUnitType>;

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 14: goto label16;
            case 15: goto label03;
            case 16: goto label04;
            case 17: goto label13;
            case 18: goto label07;
            case 19: goto label01;
            case 20: goto label09;
            case 21: goto label14;
            case 22: goto label12;
            case 23: goto label11;
            case 24: goto label18;
            case 25: goto label18;
            case 26: goto label18;
            case 27: goto label18;
            case 28: goto label02;
            case 29: goto label05;
            case 30: goto label15;
            case 31: goto label10;
            case 32: goto label17;
            case 33: goto label06;
            case 34: goto label08;
            default: goto label18;
        };

     label01:
        return "cm";

     label02:
        return "deg";

     label03:
        return "em";

     label04:
        return "ex";

     label05:
        return "grad";

     label06:
        return "Hz";

     label07:
        return "in";

     label08:
        return "kHz";

     label09:
        return "mm";

     label10:
        return "ms";

     label11:
        return "%";

     label12:
        return "pc";

     label13:
        return "px";

     label14:
        return "pt";

     label15:
        return "rad";

     label16:
        return "";

     label17:
        return "s";

     label18:
        $r7 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No Unit Text for type: ");

        $s1 = r0.<org.apache.batik.css.parser.CSSLexicalUnit: short lexicalUnitType>;

        $i3 = (int) $s1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r7;
    }

    public java.lang.String getFunctionName()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public org.w3c.css.sac.LexicalUnit getParameters()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getStringValue()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public org.w3c.css.sac.LexicalUnit getSubValues()
    {
        java.lang.IllegalStateException $r0;
        org.apache.batik.css.parser.CSSLexicalUnit r1;

        r1 := @this: org.apache.batik.css.parser.CSSLexicalUnit;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createSimple(short, org.w3c.css.sac.LexicalUnit)
    {
        org.w3c.css.sac.LexicalUnit r1;
        short s0;
        org.apache.batik.css.parser.CSSLexicalUnit$SimpleLexicalUnit $r0;

        s0 := @parameter0: short;

        r1 := @parameter1: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$SimpleLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$SimpleLexicalUnit: void <init>(short,org.w3c.css.sac.LexicalUnit)>(s0, r1);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createInteger(int, org.w3c.css.sac.LexicalUnit)
    {
        int i0;
        org.w3c.css.sac.LexicalUnit r1;
        org.apache.batik.css.parser.CSSLexicalUnit$IntegerLexicalUnit $r0;

        i0 := @parameter0: int;

        r1 := @parameter1: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$IntegerLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$IntegerLexicalUnit: void <init>(int,org.w3c.css.sac.LexicalUnit)>(i0, r1);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createFloat(short, float, org.w3c.css.sac.LexicalUnit)
    {
        short s0;
        org.w3c.css.sac.LexicalUnit r1;
        org.apache.batik.css.parser.CSSLexicalUnit$FloatLexicalUnit $r0;
        float f0;

        s0 := @parameter0: short;

        f0 := @parameter1: float;

        r1 := @parameter2: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$FloatLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$FloatLexicalUnit: void <init>(short,float,org.w3c.css.sac.LexicalUnit)>(s0, f0, r1);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createDimension(float, java.lang.String, org.w3c.css.sac.LexicalUnit)
    {
        org.w3c.css.sac.LexicalUnit r2;
        float f0;
        org.apache.batik.css.parser.CSSLexicalUnit$DimensionLexicalUnit $r0;
        java.lang.String r1;

        f0 := @parameter0: float;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$DimensionLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$DimensionLexicalUnit: void <init>(float,java.lang.String,org.w3c.css.sac.LexicalUnit)>(f0, r1, r2);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createFunction(java.lang.String, org.w3c.css.sac.LexicalUnit, org.w3c.css.sac.LexicalUnit)
    {
        org.apache.batik.css.parser.CSSLexicalUnit$FunctionLexicalUnit $r0;
        org.w3c.css.sac.LexicalUnit r2, r3;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.css.sac.LexicalUnit;

        r3 := @parameter2: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$FunctionLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$FunctionLexicalUnit: void <init>(java.lang.String,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(r1, r2, r3);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createPredefinedFunction(short, org.w3c.css.sac.LexicalUnit, org.w3c.css.sac.LexicalUnit)
    {
        short s0;
        org.w3c.css.sac.LexicalUnit r1, r2;
        org.apache.batik.css.parser.CSSLexicalUnit$PredefinedFunctionLexicalUnit $r0;

        s0 := @parameter0: short;

        r1 := @parameter1: org.w3c.css.sac.LexicalUnit;

        r2 := @parameter2: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$PredefinedFunctionLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$PredefinedFunctionLexicalUnit: void <init>(short,org.w3c.css.sac.LexicalUnit,org.w3c.css.sac.LexicalUnit)>(s0, r1, r2);

        return $r0;
    }

    public static org.apache.batik.css.parser.CSSLexicalUnit createString(short, java.lang.String, org.w3c.css.sac.LexicalUnit)
    {
        short s0;
        org.apache.batik.css.parser.CSSLexicalUnit$StringLexicalUnit $r0;
        org.w3c.css.sac.LexicalUnit r2;
        java.lang.String r1;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.w3c.css.sac.LexicalUnit;

        $r0 = new org.apache.batik.css.parser.CSSLexicalUnit$StringLexicalUnit;

        specialinvoke $r0.<org.apache.batik.css.parser.CSSLexicalUnit$StringLexicalUnit: void <init>(short,java.lang.String,org.w3c.css.sac.LexicalUnit)>(s0, r1, r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String TEXT_COUNTERS_FUNCTION> = "counters";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String TEXT_COUNTER_FUNCTION> = "counter";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String TEXT_RECT_FUNCTION> = "rect";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String TEXT_RGBCOLOR> = "rgb";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_SECOND> = "s";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_REAL> = "";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_RADIAN> = "rad";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_POINT> = "pt";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_PIXEL> = "px";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_PICA> = "pc";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_PERCENTAGE> = "%";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_MILLISECOND> = "ms";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_MILLIMETER> = "mm";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_KILOHERTZ> = "kHz";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_INCH> = "in";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_HERTZ> = "Hz";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_GRADIAN> = "grad";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_EX> = "ex";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_EM> = "em";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_DEGREE> = "deg";

        <org.apache.batik.css.parser.CSSLexicalUnit: java.lang.String UNIT_TEXT_CENTIMETER> = "cm";

        return;
    }
}
