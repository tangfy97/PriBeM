public class groovyjarjarantlr.build.Tool extends java.lang.Object
{
    public java.lang.String os;
    static java.lang.Class class$antlr$build$Tool;

    public void <init>()
    {
        java.lang.String $r1;
        groovyjarjarantlr.build.Tool r0;

        r0 := @this: groovyjarjarantlr.build.Tool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.build.Tool: java.lang.String os> = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        r0.<groovyjarjarantlr.build.Tool: java.lang.String os> = $r1;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r3;
        groovyjarjarantlr.build.Tool $r2;
        int $i0;
        java.lang.String[] r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 1 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("usage: java antlr.build.Tool action");

        return;

     label1:
        r1 = r0[0];

        $r2 = new groovyjarjarantlr.build.Tool;

        specialinvoke $r2.<groovyjarjarantlr.build.Tool: void <init>()>();

        virtualinvoke $r2.<groovyjarjarantlr.build.Tool: void perform(java.lang.String,java.lang.String)>("groovyjarjarantlr.build.ANTLR", r1);

        return;
    }

    public void perform(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r6;
        java.lang.StringBuffer $r9, $r10, $r11, $r14, $r15, $r16, $r19, $r20, $r21, $r23, $r24, $r25;
        java.lang.String r0, r2, $r12, $r17, $r22, $r26;
        java.lang.reflect.Method $r5;
        boolean $z0;
        groovyjarjarantlr.build.Tool r1;
        java.lang.Class[] $r3;
        java.lang.Exception $r8, $r13, $r18;
        java.lang.Class $r4, $r7, r27, $r29;
        java.lang.Object r28;

        r1 := @this: groovyjarjarantlr.build.Tool;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        if r2 != null goto label02;

     label01:
        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void error(java.lang.String)>("missing app or action");

        return;

     label02:
        r27 = null;

        r28 = null;

     label03:
        r28 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Object createInstanceOf(java.lang.String)>(r0);

     label04:
        goto label10;

     label05:
        $r18 := @caughtexception;

     label06:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("antlr.build.");

        if $z0 != 0 goto label07;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.build.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        r27 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>($r26);

     label07:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no such application ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void error(java.lang.String,java.lang.Exception)>($r22, $r18);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no such application ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void error(java.lang.String,java.lang.Exception)>($r17, $r13);

     label10:
        if r27 == null goto label11;

        if r28 != null goto label12;

     label11:
        return;

     label12:
        $r7 = r27;

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <groovyjarjarantlr.build.Tool: java.lang.Class class$antlr$build$Tool>;

        if $r4 != null goto label13;

        $r29 = staticinvoke <groovyjarjarantlr.build.Tool: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.build.Tool");

        <groovyjarjarantlr.build.Tool: java.lang.Class class$antlr$build$Tool> = $r29;

        goto label14;

     label13:
        $r29 = <groovyjarjarantlr.build.Tool: java.lang.Class class$antlr$build$Tool>;

     label14:
        $r3[0] = $r29;

        $r5 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r28, $r6);

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no such action for application ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void error(java.lang.String,java.lang.Exception)>($r12, $r8);

     label17:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label06 to label08 with label09;
        catch java.lang.Exception from label12 to label15 with label16;
    }

    public void system(java.lang.String)
    {
        java.lang.String[] $r8;
        groovyjarjarantlr.build.StreamScarfer $r4, $r6;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.lang.String r2, $r3, $r13;
        boolean $z0;
        java.lang.Process r14;
        groovyjarjarantlr.build.Tool r1;
        java.lang.Runtime $r0;
        java.lang.Exception $r9;
        java.io.InputStream $r5, $r7;

        r1 := @this: groovyjarjarantlr.build.Tool;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

     label1:
        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void log(java.lang.String)>(r2);

        $r3 = r1.<groovyjarjarantlr.build.Tool: java.lang.String os>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        if $z0 != 0 goto label2;

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "sh";

        $r8[1] = "-c";

        $r8[2] = r2;

        r14 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($r8);

        goto label3;

     label2:
        r14 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r2);

     label3:
        $r4 = new groovyjarjarantlr.build.StreamScarfer;

        $r5 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>();

        specialinvoke $r4.<groovyjarjarantlr.build.StreamScarfer: void <init>(java.io.InputStream,java.lang.String,groovyjarjarantlr.build.Tool)>($r5, "stderr", r1);

        $r6 = new groovyjarjarantlr.build.StreamScarfer;

        $r7 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r6.<groovyjarjarantlr.build.StreamScarfer: void <init>(java.io.InputStream,java.lang.String,groovyjarjarantlr.build.Tool)>($r7, "stdout", r1);

        virtualinvoke $r4.<groovyjarjarantlr.build.StreamScarfer: void start()>();

        virtualinvoke $r6.<groovyjarjarantlr.build.StreamScarfer: void start()>();

        virtualinvoke r14.<java.lang.Process: int waitFor()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot exec ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.build.Tool: void error(java.lang.String,java.lang.Exception)>($r13, $r9);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void antlr(java.lang.String)
    {
        java.lang.String[] $r11;
        groovyjarjarantlr.Tool $r10;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r14, $r15, $r16;
        java.lang.String r1, $r2, $r9, $r17, r18;
        groovyjarjarantlr.build.Tool r3;
        java.io.IOException $r13;
        java.io.File $r0, $r12;

        r3 := @this: groovyjarjarantlr.build.Tool;

        r1 := @parameter0: java.lang.String;

        r18 = null;

     label1:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getParent()>();

        r18 = $r2;

        if $r2 == null goto label2;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r2);

        r18 = virtualinvoke $r12.<java.io.File: java.lang.String getCanonicalPath()>();

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid grammar file: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<groovyjarjarantlr.build.Tool: void error(java.lang.String)>($r17);

     label4:
        if r18 == null goto label5;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java antlr.Tool -o ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r18);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<groovyjarjarantlr.build.Tool: void log(java.lang.String)>($r9);

        $r10 = new groovyjarjarantlr.Tool;

        specialinvoke $r10.<groovyjarjarantlr.Tool: void <init>()>();

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "-o";

        $r11[1] = r18;

        $r11[2] = r1;

        virtualinvoke $r10.<groovyjarjarantlr.Tool: int doEverything(java.lang.String[])>($r11);

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void stdout(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        groovyjarjarantlr.build.Tool r2;

        r2 := @this: groovyjarjarantlr.build.Tool;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    public void stderr(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        groovyjarjarantlr.build.Tool r2;

        r2 := @this: groovyjarjarantlr.build.Tool;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    public void error(java.lang.String)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.build.Tool r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: groovyjarjarantlr.build.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.build.Tool: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void log(java.lang.String)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.build.Tool r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: groovyjarjarantlr.build.Tool;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("executing: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void error(java.lang.String, java.lang.Exception)
    {
        java.io.PrintStream $r1, $r7;
        groovyjarjarantlr.build.Tool r8;
        java.lang.Exception r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r8 := @this: groovyjarjarantlr.build.Tool;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.build.Tool: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r6.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r7);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
