public class junit.extensions.ActiveTestSuite extends junit.framework.TestSuite
{
    private volatile int fActiveTestDeathCount;

    public void <init>()
    {
        junit.extensions.ActiveTestSuite r0;

        r0 := @this: junit.extensions.ActiveTestSuite;

        specialinvoke r0.<junit.framework.TestSuite: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        junit.extensions.ActiveTestSuite r0;

        r0 := @this: junit.extensions.ActiveTestSuite;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        junit.extensions.ActiveTestSuite r0;

        r0 := @this: junit.extensions.ActiveTestSuite;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestSuite: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String)
    {
        java.lang.Class r1;
        java.lang.String r2;
        junit.extensions.ActiveTestSuite r0;

        r0 := @this: junit.extensions.ActiveTestSuite;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<junit.framework.TestSuite: void <init>(java.lang.Class,java.lang.String)>(r1, r2);

        return;
    }

    public void run(junit.framework.TestResult)
    {
        junit.extensions.ActiveTestSuite r0;
        junit.framework.TestResult r1;

        r0 := @this: junit.extensions.ActiveTestSuite;

        r1 := @parameter0: junit.framework.TestResult;

        r0.<junit.extensions.ActiveTestSuite: int fActiveTestDeathCount> = 0;

        specialinvoke r0.<junit.framework.TestSuite: void run(junit.framework.TestResult)>(r1);

        virtualinvoke r0.<junit.extensions.ActiveTestSuite: void waitUntilFinished()>();

        return;
    }

    public void runTest(junit.framework.Test, junit.framework.TestResult)
    {
        junit.framework.Test r2;
        junit.extensions.ActiveTestSuite$1 $r0;
        junit.extensions.ActiveTestSuite r1;
        junit.framework.TestResult r3;

        r1 := @this: junit.extensions.ActiveTestSuite;

        r2 := @parameter0: junit.framework.Test;

        r3 := @parameter1: junit.framework.TestResult;

        $r0 = new junit.extensions.ActiveTestSuite$1;

        specialinvoke $r0.<junit.extensions.ActiveTestSuite$1: void <init>(junit.extensions.ActiveTestSuite,junit.framework.Test,junit.framework.TestResult)>(r1, r2, r3);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return;
    }

    synchronized void waitUntilFinished()
    {
        junit.extensions.ActiveTestSuite r0;
        java.lang.InterruptedException $r1;
        int $i0, $i1;

        r0 := @this: junit.extensions.ActiveTestSuite;

     label1:
        $i0 = r0.<junit.extensions.ActiveTestSuite: int fActiveTestDeathCount>;

        $i1 = virtualinvoke r0.<junit.extensions.ActiveTestSuite: int testCount()>();

        if $i0 >= $i1 goto label5;

     label2:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label3:
        goto label1;

     label4:
        $r1 := @caughtexception;

        return;

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public synchronized void runFinished()
    {
        int $i0, $i1;
        junit.extensions.ActiveTestSuite r0;

        r0 := @this: junit.extensions.ActiveTestSuite;

        $i0 = r0.<junit.extensions.ActiveTestSuite: int fActiveTestDeathCount>;

        $i1 = $i0 + 1;

        r0.<junit.extensions.ActiveTestSuite: int fActiveTestDeathCount> = $i1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }
}
