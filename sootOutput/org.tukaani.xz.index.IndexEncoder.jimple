public class org.tukaani.xz.index.IndexEncoder extends org.tukaani.xz.index.IndexBase
{
    private final java.util.ArrayList records;

    public void <init>()
    {
        org.tukaani.xz.index.IndexEncoder r0;
        org.tukaani.xz.XZIOException $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.tukaani.xz.index.IndexEncoder;

        $r1 = new org.tukaani.xz.XZIOException;

        specialinvoke $r1.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("XZ Stream or its Index has grown too big");

        specialinvoke r0.<org.tukaani.xz.index.IndexBase: void <init>(org.tukaani.xz.XZIOException)>($r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.tukaani.xz.index.IndexEncoder: java.util.ArrayList records> = $r2;

        return;
    }

    public void add(long, long) throws org.tukaani.xz.XZIOException
    {
        org.tukaani.xz.index.IndexEncoder r0;
        org.tukaani.xz.index.IndexRecord $r1;
        long l0, l1;
        java.util.ArrayList $r2;

        r0 := @this: org.tukaani.xz.index.IndexEncoder;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.tukaani.xz.index.IndexBase: void add(long,long)>(l0, l1);

        $r2 = r0.<org.tukaani.xz.index.IndexEncoder: java.util.ArrayList records>;

        $r1 = new org.tukaani.xz.index.IndexRecord;

        specialinvoke $r1.<org.tukaani.xz.index.IndexRecord: void <init>(long,long)>(l0, l1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void encode(java.io.OutputStream) throws java.io.IOException
    {
        long $l0, $l1, $l3, $l6, $l7;
        java.util.ArrayList $r4;
        byte $b5;
        org.tukaani.xz.index.IndexEncoder r3;
        int $i2, $i4, i8, i9, $i11, $i12;
        boolean $z0;
        java.io.OutputStream r2;
        java.util.Iterator $r5;
        org.tukaani.xz.index.IndexRecord r7;
        java.util.zip.CheckedOutputStream $r9;
        java.util.zip.CRC32 $r8;
        java.lang.Object $r6;

        r3 := @this: org.tukaani.xz.index.IndexEncoder;

        r2 := @parameter0: java.io.OutputStream;

        $r8 = new java.util.zip.CRC32;

        specialinvoke $r8.<java.util.zip.CRC32: void <init>()>();

        $r9 = new java.util.zip.CheckedOutputStream;

        specialinvoke $r9.<java.util.zip.CheckedOutputStream: void <init>(java.io.OutputStream,java.util.zip.Checksum)>(r2, $r8);

        virtualinvoke $r9.<java.util.zip.CheckedOutputStream: void write(int)>(0);

        $l0 = r3.<org.tukaani.xz.index.IndexEncoder: long recordCount>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>($r9, $l0);

        $r4 = r3.<org.tukaani.xz.index.IndexEncoder: java.util.ArrayList records>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.tukaani.xz.index.IndexRecord) $r6;

        $l6 = r7.<org.tukaani.xz.index.IndexRecord: long unpadded>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>($r9, $l6);

        $l7 = r7.<org.tukaani.xz.index.IndexRecord: long uncompressed>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>($r9, $l7);

        goto label1;

     label2:
        i8 = virtualinvoke r3.<org.tukaani.xz.index.IndexEncoder: int getIndexPaddingSize()>();

     label3:
        if i8 <= 0 goto label4;

        virtualinvoke $r9.<java.util.zip.CheckedOutputStream: void write(int)>(0);

        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label3;

     label4:
        $l1 = virtualinvoke $r8.<java.util.zip.CRC32: long getValue()>();

        i9 = 0;

     label5:
        if i9 >= 4 goto label6;

        $i2 = i9 * 8;

        $l3 = $l1 >>> $i2;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $i12 = (int) $b5;

        virtualinvoke r2.<java.io.OutputStream: void write(int)>($i12);

        i9 = i9 + 1;

        goto label5;

     label6:
        return;
    }
}
