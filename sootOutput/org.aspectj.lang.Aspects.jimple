public class org.aspectj.lang.Aspects extends java.lang.Object
{
    private static final java.lang.Class[] EMPTY_CLASS_ARRAY;
    private static final java.lang.Class[] PEROBJECT_CLASS_ARRAY;
    private static final java.lang.Class[] PERTYPEWITHIN_CLASS_ARRAY;
    private static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
    private static final java.lang.String ASPECTOF;
    private static final java.lang.String HASASPECT;

    public void <init>()
    {
        org.aspectj.lang.Aspects r0;

        r0 := @this: org.aspectj.lang.Aspects;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object aspectOf(java.lang.Class) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Exception $r4;
        org.aspectj.lang.NoAspectBoundException $r5, $r8;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String $r6, $r9;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getSingletonOrThreadAspectOf(java.lang.Class)>(r0);

        $r2 = <org.aspectj.lang.Aspects: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label2:
        return $r3;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.aspectj.lang.NoAspectBoundException;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r8.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r7);

        throw $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.aspectj.lang.NoAspectBoundException;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r5.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r4);

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.Object aspectOf(java.lang.Class, java.lang.Object) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Exception $r5;
        org.aspectj.lang.NoAspectBoundException $r6, $r9;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Class r0;
        java.lang.Object r3, $r4;
        java.lang.String $r7, $r10;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getPerObjectAspectOf(java.lang.Class)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.aspectj.lang.NoAspectBoundException;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r9.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r8);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.aspectj.lang.NoAspectBoundException;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r6.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.Object aspectOf(java.lang.Class, java.lang.Class) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Exception $r5;
        org.aspectj.lang.NoAspectBoundException $r6, $r9;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Class r0, r3;
        java.lang.Object $r4;
        java.lang.String $r7, $r10;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getPerTypeWithinAspectOf(java.lang.Class)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.aspectj.lang.NoAspectBoundException;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r9.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r8);

        throw $r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.aspectj.lang.NoAspectBoundException;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r6.<org.aspectj.lang.NoAspectBoundException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static boolean hasAspect(java.lang.Class) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Boolean $r4;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.reflect.Method $r1;
        java.lang.Exception $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getSingletonOrThreadHasAspect(java.lang.Class)>(r0);

        $r2 = <org.aspectj.lang.Aspects: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean hasAspect(java.lang.Class, java.lang.Object) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Exception $r6;
        java.lang.Boolean $r5;
        java.lang.Class r0;
        java.lang.Object r3, $r4;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getPerObjectHasAspect(java.lang.Class)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean hasAspect(java.lang.Class, java.lang.Class) throws org.aspectj.lang.NoAspectBoundException
    {
        java.lang.Object[] $r2;
        java.lang.Exception $r6;
        java.lang.Boolean $r5;
        java.lang.Class r0, r3;
        java.lang.Object $r4;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

     label1:
        $r1 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method getPerTypeWithinHasAspect(java.lang.Class)>(r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.reflect.Method getSingletonOrThreadAspectOf(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("aspectOf", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkAspectOf(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method getPerObjectAspectOf(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] PEROBJECT_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("aspectOf", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkAspectOf(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method getPerTypeWithinAspectOf(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] PERTYPEWITHIN_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("aspectOf", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkAspectOf(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method checkAspectOf(java.lang.reflect.Method, java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r2;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z2 != 0 goto label2;

     label1:
        $r2 = new java.lang.NoSuchMethodException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".aspectOf(..) is not accessible public static");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return r0;
    }

    private static java.lang.reflect.Method getSingletonOrThreadHasAspect(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("hasAspect", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkHasAspect(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method getPerObjectHasAspect(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] PEROBJECT_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("hasAspect", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkHasAspect(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method getPerTypeWithinHasAspect(java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.reflect.Method $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.aspectj.lang.Aspects: java.lang.Class[] PERTYPEWITHIN_CLASS_ARRAY>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("hasAspect", $r1);

        $r3 = staticinvoke <org.aspectj.lang.Aspects: java.lang.reflect.Method checkHasAspect(java.lang.reflect.Method,java.lang.Class)>($r2, r0);

        return $r3;
    }

    private static java.lang.reflect.Method checkHasAspect(java.lang.reflect.Method, java.lang.Class) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r2;
        int $i0, $i1;
        java.lang.Class r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z2 != 0 goto label2;

     label1:
        $r2 = new java.lang.NoSuchMethodException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".hasAspect(..) is not accessible public static");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r0, $r1, $r2;

        <org.aspectj.lang.Aspects: java.lang.String HASASPECT> = "hasAspect";

        <org.aspectj.lang.Aspects: java.lang.String ASPECTOF> = "aspectOf";

        $r0 = newarray (java.lang.Class)[0];

        <org.aspectj.lang.Aspects: java.lang.Class[] EMPTY_CLASS_ARRAY> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Object;";

        <org.aspectj.lang.Aspects: java.lang.Class[] PEROBJECT_CLASS_ARRAY> = $r1;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/Class;";

        <org.aspectj.lang.Aspects: java.lang.Class[] PERTYPEWITHIN_CLASS_ARRAY> = $r2;

        $r3 = newarray (java.lang.Object)[0];

        <org.aspectj.lang.Aspects: java.lang.Object[] EMPTY_OBJECT_ARRAY> = $r3;

        return;
    }
}
