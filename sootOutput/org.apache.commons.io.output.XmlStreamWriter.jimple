public class org.apache.commons.io.output.XmlStreamWriter extends java.io.Writer
{
    private static final int BUFFER_SIZE;
    private final java.io.OutputStream out;
    private final java.lang.String defaultEncoding;
    private java.io.StringWriter xmlPrologWriter;
    private java.io.Writer writer;
    private java.lang.String encoding;
    static final java.util.regex.Pattern ENCODING_PATTERN;

    public void <init>(java.io.OutputStream)
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String)
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream r2;
        java.io.StringWriter $r1;
        java.lang.String r3, $r4;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r1 = new java.io.StringWriter;

        specialinvoke $r1.<java.io.StringWriter: void <init>(int)>(4096);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = $r1;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out> = r2;

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = "UTF-8";

     label2:
        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding> = $r4;

        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.File r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.File,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.FileOutputStream $r1;
        java.lang.String r3;
        java.io.File r2;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, r3);

        return;
    }

    public java.lang.String getEncoding()
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        return $r1;
    }

    public java.lang.String getDefaultEncoding()
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream $r6;
        java.io.StringWriter $r7;
        java.io.Writer $r1, $r2, $r8;
        java.io.OutputStreamWriter $r4;
        java.lang.String $r3, $r5, $r9;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r3;

        $r4 = new java.io.OutputStreamWriter;

        $r6 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;

        $r5 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r6, $r5);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = $r4;

        $r8 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $r7 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        $r9 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>($r9);

     label1:
        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void close()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.Writer $r1, $r2;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void flush()>();

     label1:
        return;
    }

    private void detectEncoding(char[], int, int) throws java.io.IOException
    {
        java.util.regex.Matcher $r17;
        boolean $z0, $z1;
        java.io.Writer $r11, $r13;
        java.util.regex.Pattern $r15;
        java.lang.StringBuffer $r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.io.OutputStreamWriter $r8;
        java.lang.String $r5, $r6, $r7, $r9, $r12, $r14, $r16, $r18, $r19, $r20, $r21, $r22, $r23;
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream $r10;
        java.io.StringWriter $r1, $r4;
        char[] r3;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r3 := @parameter0: char[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i12 = i0;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        $r2 = virtualinvoke $r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $i1 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        $i2 = $i1 + i0;

        if $i2 <= 4096 goto label1;

        $i11 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        i12 = 4096 - $i11;

     label1:
        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        virtualinvoke $r4.<java.io.StringWriter: void write(char[],int,int)>(r3, i3, i12);

        $i4 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i4 < 5 goto label8;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, 5);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("<?xml");

        if $z0 == 0 goto label6;

        $i7 = virtualinvoke $r2.<java.lang.StringBuffer: int indexOf(java.lang.String)>("?>");

        if $i7 <= 0 goto label4;

        $r15 = <org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN>;

        $r16 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i7);

        $r17 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r16);

        $z1 = virtualinvoke $r17.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label2;

        $r19 = virtualinvoke $r17.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String toUpperCase()>();

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r20;

        $r22 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        $r21 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        $i9 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int,int)>(1, $i10);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r23;

        goto label3;

     label2:
        $r18 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r18;

     label3:
        goto label5;

     label4:
        $i8 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i8 < 4096 goto label5;

        $r14 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r14;

     label5:
        goto label7;

     label6:
        $r6 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r6;

     label7:
        $r7 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        if $r7 == null goto label8;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = null;

        $r8 = new java.io.OutputStreamWriter;

        $r10 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;

        $r9 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r10, $r9);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = $r8;

        $r11 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $r12 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>($r12);

        if i0 <= i12 goto label8;

        $r13 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $i6 = i3 + i12;

        $i5 = i0 - i12;

        virtualinvoke $r13.<java.io.Writer: void write(char[],int,int)>(r3, $i6, $i5);

     label8:
        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.StringWriter $r1;
        int i0, i1;
        java.io.Writer $r3;
        char[] r2;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void detectEncoding(char[],int,int)>(r2, i0, i1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(char[],int,int)>(r2, i0, i1);

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.commons.io.output.XmlStreamWriter: int BUFFER_SIZE> = 4096;

        $r0 = <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN>;

        <org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN> = $r0;

        return;
    }
}
