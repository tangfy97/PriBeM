class org.waveprotocol.wave.model.document.parser.StreamingXmlParser extends java.lang.Object implements org.waveprotocol.wave.model.document.parser.XmlPullParser
{
    static final org.waveprotocol.wave.model.util.ReadableStringMap entities;
    private static final char openAngle;
    private static final char closeAngle;
    private static final java.lang.String slashCloseAngle;
    private static final java.lang.String openAngleSlash;
    private static final char eq;
    private static final char singleQuote;
    private static final char doubleQuote;
    private static final java.lang.String piStart;
    private static final java.lang.String piEnd;
    private static final java.lang.String charReferenceStart;
    private static final org.waveprotocol.wave.model.util.ReadableStringSet BASE_16_DIGITS;
    private static final org.waveprotocol.wave.model.util.ReadableStringSet BASE_10_DIGITS;
    private final org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer;
    private final java.util.Stack elementTagStack;
    private boolean atSelfClosingStart;
    private org.waveprotocol.wave.model.document.parser.Item current;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r8;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r3;
        java.util.Stack $r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r2, $r7;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack> = $r1;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean atSelfClosingStart> = 0;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        $r8 = new org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer;

        specialinvoke $r8.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void <init>(java.lang.String,org.waveprotocol.wave.model.document.parser.StreamingXmlParser$1)>(r2, null);

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer> = $r8;

        goto label2;

     label1:
        $r3 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input is not valid UTF-16: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        return;
    }

    private java.lang.String whitespace() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1, $r2, $r3, $r4, $r5, $r7, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r2);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean isWhiteSpaceChar(int)>($i1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r3);

        if $z1 == 0 goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r7);

        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean isWhiteSpaceChar(int)>($i3);

        if $z2 == 0 goto label2;

        $r8 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r8, 1);

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r4);

        $r5 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r5, $i0, $i2);

        return $r6;
    }

    private boolean isXmlNameStartChar(int) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        int i0;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r1;
        java.lang.RuntimeException $r0;
        boolean $z0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r2;

        r2 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        i0 := @parameter0: int;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlNameStartChar(int)>(i0);

     label2:
        return $z0;

     label3:
        $r0 := @caughtexception;

        $r1 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.Throwable)>($r0);

        throw $r1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private boolean isXmlNameChar(int) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        int i0;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r1;
        java.lang.RuntimeException $r0;
        boolean $z0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r2;

        r2 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        i0 := @parameter0: int;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlNameChar(int)>(i0);

     label2:
        return $z0;

     label3:
        $r0 := @caughtexception;

        $r1 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.Throwable)>($r0);

        throw $r1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    java.lang.String name() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r2);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean isXmlNameStartChar(int)>($i1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r3, 1);

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r4);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean isXmlNameChar(int)>($i2);

        if $z1 == 0 goto label3;

        $r8 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r8, 1);

        goto label2;

     label3:
        $r5 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r5);

        $r6 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r6, $i0, $i3);

        return $r7;
    }

    org.waveprotocol.wave.model.util.StringMap attrList() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1;
        org.waveprotocol.wave.model.util.StringMap r6, $r7;
        org.waveprotocol.wave.model.util.Pair $r2;
        java.lang.Object $r3, $r4;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        r6 = null;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String whitespace()>();

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.Pair attr()>();

        if $r2 != null goto label2;

        goto label5;

     label2:
        if r6 == null goto label3;

        $r7 = r6;

        goto label4;

     label3:
        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

     label4:
        r6 = $r7;

        $r3 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object first>;

        $r5 = (java.lang.String) $r3;

        $r4 = $r2.<org.waveprotocol.wave.model.util.Pair: java.lang.Object second>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r5, $r4);

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String whitespace()>();

        goto label1;

     label5:
        return r6;
    }

    org.waveprotocol.wave.model.util.Pair attr() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r2, $r4;
        org.waveprotocol.wave.model.util.Pair $r5;
        java.lang.String $r1, $r3;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String name()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(61);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "Matching =";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r2);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String attrValue()>();

        if $r3 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "Matching attr value";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z1, $r4);

        $r5 = new org.waveprotocol.wave.model.util.Pair;

        specialinvoke $r5.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3);

        return $r5;
    }

    private boolean contains(char[], int)
    {
        int i0, i2, i3, $i4;
        char[] r0;
        char c1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r1;

        r1 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        r0 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        c1 = r0[i3];

        $i4 = (int) c1;

        if $i4 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    java.lang.String attrValue() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r4;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r1;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6, $r7, $r8;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(34);

        if $z0 == 0 goto label1;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String attrValueInner(char)>(34);

        return $r8;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(39);

        if $z1 == 0 goto label2;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String attrValueInner(char)>(39);

        return $r7;

     label2:
        $r1 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot match opening quote ");

        $r4 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private java.lang.String attrValueInner(char) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r5, $r7;
        java.lang.AssertionError $r14;
        int $i1, $i2, $i3;
        java.lang.String $r4, $r6, $r11, $r13;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r2;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r3, $r12, $r15, $r16, $r17;
        char c0;
        char[] $r0;
        java.lang.StringBuilder $r1, $r8, $r9, $r10;

        r2 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        c0 := @parameter0: char;

        $r0 = newarray (char)[3];

        $r0[0] = 60;

        $r0[1] = 38;

        $r0[2] = c0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r16 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r16);

     label2:
        $r17 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r17);

        $z3 = specialinvoke r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean contains(char[],int)>($r0, $i3);

        if $z3 != 0 goto label3;

        $r15 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$600(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r15);

        goto label2;

     label3:
        $r3 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r3);

        if $i2 == $i1 goto label5;

        $z2 = <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if $i2 < $i1 goto label4;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label4:
        $r12 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r12, $i2, $i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label1;

     label5:
        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String reference()>();

        if $r4 == null goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label1;

     label6:
        $z0 = specialinvoke r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(c0);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "matching closing quote";

        specialinvoke r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r5);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>($r6);

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not valid UTF-16: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r11;

        specialinvoke r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z1, $r7);

        return $r6;
    }

    java.lang.String entityReference() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r2, $r3;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r6;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r1, $r10, $r11;
        org.waveprotocol.wave.model.util.ReadableStringMap $r4;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(38);

        if $z0 == 0 goto label4;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String name()>();

        if $r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "parsing entity name";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z2, $r2);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(59);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "matching ; on entity";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z1, $r3);

        $r4 = <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringMap entities>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.ReadableStringMap: java.lang.Object get(java.lang.String)>($r1);

        $r11 = (java.lang.String) $r5;

        if $r11 == null goto label3;

        return $r11;

     label3:
        $r6 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entity name not recognised: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return null;
    }

    java.lang.String reference() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.String $r1, $r2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String charReference()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String entityReference()>();

        if $r2 == null goto label2;

        return $r2;

     label2:
        return null;
    }

    java.lang.String charReference() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.XmlParseException $r17;
        org.waveprotocol.wave.model.util.ReadableStringSet r22;
        byte b3, b6, b7;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r18, $r19, $r20, $r23, $r24, $r26;
        java.lang.Object[] $r3, $r6, $r14;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r5, $r11, $r13, $r21, $r27, $r28;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1, $r2, $r4, $r15, $r25;
        java.lang.NumberFormatException $r16;
        char $c5;
        char[] $r12;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(java.lang.String)>("&#");

        if $z0 == 0 goto label13;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(120);

        if $z1 == 0 goto label01;

        b3 = 16;

        b7 = 16;

        b6 = 16;

        r22 = <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringSet BASE_16_DIGITS>;

        goto label02;

     label01:
        b3 = 10;

        b7 = 10;

        b6 = 10;

        r22 = <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringSet BASE_10_DIGITS>;

     label02:
        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

     label03:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r25 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i4 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r25);

        $c5 = (char) $i4;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = interfaceinvoke r22.<org.waveprotocol.wave.model.util.ReadableStringSet: boolean contains(java.lang.String)>($r27);

        if $z4 == 0 goto label04;

        $r15 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r15, 1);

        goto label03;

     label04:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r2);

        if $i0 == $i1 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "empty char reference";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z5, $r3);

        $r4 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r4, $i0, $i1);

     label07:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, b6);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $r17 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse number: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r16);

        throw $r17;

     label10:
        $z2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isCodePoint(int)>($i2);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a codepoint: ");

        if b7 != 16 goto label11;

        $r28 = "0x";

        goto label12;

     label11:
        $r28 = "";

     label12:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r11;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z2, $r6);

        $r12 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r12);

        $z3 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(59);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "Must match ; at end of charReference";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z3, $r14);

        return $r13;

     label13:
        return null;

        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    org.waveprotocol.wave.model.document.parser.Item startTag() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r1, $r3;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r5;
        org.waveprotocol.wave.model.util.StringMap $r4;
        org.waveprotocol.wave.model.document.parser.Item $r7, $r8;
        java.util.Stack $r6;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(60);

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Matching <";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r1);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String name()>();

        if $r2 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Matching name";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z3, $r3);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.StringMap attrList()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String whitespace()>();

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(java.lang.String)>("/>");

        if $z1 == 0 goto label3;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean atSelfClosingStart> = 1;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item elementStart(java.lang.String,org.waveprotocol.wave.model.util.StringMap)>($r2, $r4);

        return $r8;

     label3:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(62);

        if $z2 == 0 goto label4;

        $r6 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack>;

        virtualinvoke $r6.<java.util.Stack: boolean add(java.lang.Object)>($r2);

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item elementStart(java.lang.String,org.waveprotocol.wave.model.util.StringMap)>($r2, $r4);

        return $r7;

     label4:
        $r5 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>("Matching > or />");

        throw $r5;
    }

    org.waveprotocol.wave.model.document.parser.Item endTag() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r1, $r3, $r4, $r6, $r9;
        java.util.Stack $r5, $r7;
        java.lang.String $r2, $r15, $r17;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.parser.Item $r16;
        java.lang.Object $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(java.lang.String)>("</");

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Matching </";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r1);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String name()>();

        if $r2 == null goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Matching name";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z4, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String whitespace()>();

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(char)>(62);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "Matching >";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z1, $r4);

        $r5 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack>;

        $z2 = virtualinvoke $r5.<java.util.Stack: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "no matching start tag";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z5, $r6);

        $r7 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack>;

        $r8 = virtualinvoke $r7.<java.util.Stack: java.lang.Object pop()>();

        $r17 = (java.lang.String) $r8;

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start and end tag mismatch, start: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r15;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z3, $r9);

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item elementEnd(java.lang.String)>($r2);

        return $r16;
    }

    org.waveprotocol.wave.model.document.parser.Item processingInstruction() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r1, $r3, $r11;
        int $i0, $i2, $i3;
        java.lang.String $r2, $r8, $r13;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r6, $r9, $r10, $r12, $r15, $r16, $r17;
        char $c1;
        org.waveprotocol.wave.model.document.parser.Item $r14;
        java.lang.StringBuilder $r4, $r5, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(java.lang.String)>("<?");

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Matching <?";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r1);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String name()>();

        if $r2 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing instruction target must start with a valid xml nameStartChar, but instead encountered: ");

        $r6 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r6);

        $c1 = (char) $i0;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r8;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z3, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String whitespace()>();

        $r9 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r9);

     label3:
        $r17 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z4 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r17);

        if $z4 == 0 goto label4;

        $r15 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$700(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,java.lang.String)>($r15, "?>");

        if $z2 != 0 goto label4;

        $r16 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r16, 1);

        goto label3;

     label4:
        $r10 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r10);

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean match(java.lang.String)>("?>");

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "Matching ?>";

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z1, $r11);

        $r12 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r12, $i2, $i3);

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item processingInstruction(java.lang.String,java.lang.String)>($r2, $r13);

        return $r14;
    }

    java.lang.String charData() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        char[] $r0;
        java.lang.String $r8;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r0 = newarray (char)[2];

        $r0[0] = 60;

        $r0[1] = 38;

        $r2 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r2);

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r3);

        if $z0 == 0 goto label2;

        $r6 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r6);

        $z1 = specialinvoke r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean contains(char[],int)>($r0, $i2);

        if $z1 != 0 goto label2;

        $r7 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$600(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r7);

        goto label1;

     label2:
        $r4 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r4);

        if $i0 != $i1 goto label3;

        $r8 = null;

        goto label4;

     label3:
        $r5 = r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: java.lang.String access$500(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int,int)>($r5, $i0, $i1);

     label4:
        return $r8;
    }

    private boolean match(java.lang.String)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r2, $r3;
        int $i0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$700(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,java.lang.String)>($r2, r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r3, $i0);

        return 1;

     label1:
        return 0;
    }

    private boolean match(char)
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1, $r2, $r3;
        char c1;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r4;
        java.lang.RuntimeException $r6;
        int $i0, $i2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        c1 := @parameter0: char;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r2);

        $i2 = (int) c1;

        if $i0 != $i2 goto label3;

        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: void access$400(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,int)>($r3, 1);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Impossible, as buffer has more: ", $r4);

        throw $r6;

        catch org.waveprotocol.wave.model.document.parser.XmlParseException from label1 to label2 with label4;
    }

    private boolean isWhiteSpaceChar(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        i0 := @parameter0: int;

        if 32 == i0 goto label1;

        if 9 == i0 goto label1;

        if 10 == i0 goto label1;

        if 13 != i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private transient void ensure(boolean, java.lang.Object[]) throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r3;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r4;
        int i0, $i1, i2;
        java.lang.StringBuilder $r0;
        java.lang.Object r6;
        java.lang.String $r5, $r7;
        boolean z0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r2;

        r2 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object[];

        if z0 != 0 goto label3;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("message: ");

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r6 = r1[i2];

        $r7 = (java.lang.String) r6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", at position: ");

        $r3 = r2.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$100(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = new org.waveprotocol.wave.model.document.parser.XmlParseException;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.document.parser.XmlParseException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label3:
        return;
    }

    org.waveprotocol.wave.model.document.parser.Item getTextChunk() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r4;
        org.waveprotocol.wave.model.document.parser.Item $r9;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r2, $r3, $r8, $r10;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

     label1:
        $r10 = virtualinvoke r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String charData()>();

        if $r10 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String reference()>();

        if $r2 == null goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label1;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i0 <= 0 goto label4;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>($r3);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not valid UTF-16: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r8;

        specialinvoke r1.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z0, $r4);

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item text(java.lang.String)>($r3);

        return $r9;

     label4:
        return null;
    }

    org.waveprotocol.wave.model.document.parser.Item getItem() throws org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1, $r2, $r3;
        org.waveprotocol.wave.model.document.parser.Item $r4, $r5, $r6, $r7;
        int $i0;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$700(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,java.lang.String)>($r1, "<?");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item processingInstruction()>();

        return $r7;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$700(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer,java.lang.String)>($r2, "</");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item endTag()>();

        return $r6;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: int access$200(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r3);

        if $i0 != 60 goto label3;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item startTag()>();

        return $r5;

     label3:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item getTextChunk()>();

        return $r4;
    }

    public boolean hasNext()
    {
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean atSelfClosingStart>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public org.waveprotocol.wave.model.util.StringMap getAttributes() throws java.lang.IllegalStateException
    {
        org.waveprotocol.wave.model.util.StringMap $r2;
        org.waveprotocol.wave.model.document.parser.Item $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()
    {
        org.waveprotocol.wave.model.document.parser.ItemType $r3;
        org.waveprotocol.wave.model.document.parser.Item $r1, $r2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r3 = $r2.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.ItemType type>;

     label2:
        return $r3;
    }

    public java.lang.String getProcessingInstructionName() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.parser.Item $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String getProcessingInstructionName()>();

        return $r2;
    }

    public java.lang.String getProcessingInstructionValue() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.parser.Item $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String getProcessingInstructionValue()>();

        return $r2;
    }

    public java.lang.String getTagName() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.parser.Item $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String getTagName()>();

        return $r2;
    }

    public java.lang.String getText() throws java.lang.IllegalStateException
    {
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.parser.Item $r1;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: java.lang.String getText()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.parser.ItemType next() throws java.util.NoSuchElementException, org.waveprotocol.wave.model.document.parser.XmlParseException
    {
        java.lang.Object[] $r4;
        java.util.Stack $r3, $r7;
        int $i0;
        java.lang.String $r9;
        java.util.NoSuchElementException $r13;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer $r1;
        org.waveprotocol.wave.model.document.parser.Item $r10, $r11, $r12;
        org.waveprotocol.wave.model.document.parser.ItemType $r2;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r13 = new java.util.NoSuchElementException;

        specialinvoke $r13.<java.util.NoSuchElementException: void <init>()>();

        throw $r13;

     label1:
        $z1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean atSelfClosingStart>;

        if $z1 == 0 goto label2;

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean atSelfClosingStart> = 0;

        $r11 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item startElementToEndElement()>();

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current> = $r12;

        goto label4;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer buffer>;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer: boolean access$300(org.waveprotocol.wave.model.document.parser.StreamingXmlParser$Buffer)>($r1);

        if $z2 == 0 goto label3;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item getItem()>();

        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current> = $r10;

        goto label4;

     label3:
        r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current> = null;

     label4:
        $z4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean hasNext()>();

        if $z4 != 0 goto label5;

        $r3 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack>;

        $z3 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start tags not closed, ");

        $r7 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.util.Stack elementTagStack>;

        $i0 = virtualinvoke $r7.<java.util.Stack: int size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r9;

        specialinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: void ensure(boolean,java.lang.Object[])>($z3, $r4);

     label5:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        return $r2;
    }

    org.waveprotocol.wave.model.document.parser.Item getCurrentItem()
    {
        org.waveprotocol.wave.model.document.parser.Item $r1, $r2;
        org.waveprotocol.wave.model.document.parser.StreamingXmlParser r0;

        r0 := @this: org.waveprotocol.wave.model.document.parser.StreamingXmlParser;

        $r1 = r0.<org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.document.parser.Item current>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.parser.Item: org.waveprotocol.wave.model.document.parser.Item copy()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringSet $r3, $r5;
        java.lang.String[] $r2, $r4;
        org.waveprotocol.wave.model.util.StringMap $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String charReferenceStart> = "&#";

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String piEnd> = "?>";

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String piStart> = "<?";

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: char doubleQuote> = 34;

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: char singleQuote> = 39;

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: char eq> = 61;

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String openAngleSlash> = "</";

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: java.lang.String slashCloseAngle> = "/>";

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: char closeAngle> = 62;

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: char openAngle> = 60;

        $r0 = class "Lorg/waveprotocol/wave/model/document/parser/StreamingXmlParser;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("lt", "<");

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("gt", ">");

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("apos", "\'");

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("quot", "\"");

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("amp", "&");

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringMap entities> = $r1;

        $r2 = newarray (java.lang.String)[22];

        $r2[0] = "0";

        $r2[1] = "1";

        $r2[2] = "2";

        $r2[3] = "3";

        $r2[4] = "4";

        $r2[5] = "5";

        $r2[6] = "6";

        $r2[7] = "7";

        $r2[8] = "8";

        $r2[9] = "9";

        $r2[10] = "a";

        $r2[11] = "b";

        $r2[12] = "c";

        $r2[13] = "d";

        $r2[14] = "e";

        $r2[15] = "f";

        $r2[16] = "A";

        $r2[17] = "B";

        $r2[18] = "C";

        $r2[19] = "D";

        $r2[20] = "E";

        $r2[21] = "F";

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r2);

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringSet BASE_16_DIGITS> = $r3;

        $r4 = newarray (java.lang.String)[10];

        $r4[0] = "0";

        $r4[1] = "1";

        $r4[2] = "2";

        $r4[3] = "3";

        $r4[4] = "4";

        $r4[5] = "5";

        $r4[6] = "6";

        $r4[7] = "7";

        $r4[8] = "8";

        $r4[9] = "9";

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r4);

        <org.waveprotocol.wave.model.document.parser.StreamingXmlParser: org.waveprotocol.wave.model.util.ReadableStringSet BASE_10_DIGITS> = $r5;

        return;
    }
}
