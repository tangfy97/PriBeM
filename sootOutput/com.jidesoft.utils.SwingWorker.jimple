public abstract class com.jidesoft.utils.SwingWorker extends java.lang.Object implements java.util.concurrent.Future, java.lang.Runnable
{
    private static final int MAX_WORKER_THREADS;
    private volatile int progress;
    private volatile com.jidesoft.utils.SwingWorker$StateValue state;
    private final java.util.concurrent.FutureTask future;
    private final java.beans.PropertyChangeSupport propertyChangeSupport;
    private com.jidesoft.utils.AccumulativeRunnable doProcess;
    private com.jidesoft.utils.AccumulativeRunnable doNotifyProgressChange;
    private static final com.jidesoft.utils.AccumulativeRunnable doSubmit;
    private static java.util.concurrent.ExecutorService executorService;

    public void <init>()
    {
        com.jidesoft.utils.SwingWorker r0;
        com.jidesoft.utils.SwingWorker$StateValue $r3;
        com.jidesoft.utils.SwingWorker$SwingWorkerPropertyChangeSupport $r4;
        com.jidesoft.utils.SwingWorker$2 $r2;
        com.jidesoft.utils.SwingWorker$1 $r1;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.jidesoft.utils.SwingWorker$1;

        specialinvoke $r1.<com.jidesoft.utils.SwingWorker$1: void <init>(com.jidesoft.utils.SwingWorker)>(r0);

        $r2 = new com.jidesoft.utils.SwingWorker$2;

        specialinvoke $r2.<com.jidesoft.utils.SwingWorker$2: void <init>(com.jidesoft.utils.SwingWorker,java.util.concurrent.Callable)>(r0, $r1);

        r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future> = $r2;

        $r3 = <com.jidesoft.utils.SwingWorker$StateValue: com.jidesoft.utils.SwingWorker$StateValue PENDING>;

        r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.SwingWorker$StateValue state> = $r3;

        $r4 = new com.jidesoft.utils.SwingWorker$SwingWorkerPropertyChangeSupport;

        specialinvoke $r4.<com.jidesoft.utils.SwingWorker$SwingWorkerPropertyChangeSupport: void <init>(com.jidesoft.utils.SwingWorker,java.lang.Object)>(r0, r0);

        r0.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport propertyChangeSupport> = $r4;

        r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doProcess> = null;

        r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doNotifyProgressChange> = null;

        return;
    }

    protected abstract java.lang.Object doInBackground() throws java.lang.Exception;

    public final void run()
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.FutureTask $r1;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        virtualinvoke $r1.<java.util.concurrent.FutureTask: void run()>();

        return;
    }

    protected final transient void publish(java.lang.Object[])
    {
        com.jidesoft.utils.SwingWorker r0;
        java.lang.Throwable $r5;
        java.lang.Object[] r2;
        com.jidesoft.utils.AccumulativeRunnable $r1, $r3;
        com.jidesoft.utils.SwingWorker$3 $r4;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r2 := @parameter0: java.lang.Object[];

        entermonitor r0;

     label1:
        $r1 = r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doProcess>;

        if $r1 != null goto label2;

        $r4 = new com.jidesoft.utils.SwingWorker$3;

        specialinvoke $r4.<com.jidesoft.utils.SwingWorker$3: void <init>(com.jidesoft.utils.SwingWorker)>(r0);

        r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doProcess> = $r4;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        $r3 = r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doProcess>;

        virtualinvoke $r3.<com.jidesoft.utils.AccumulativeRunnable: void add(java.lang.Object[])>(r2);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void process(java.util.List)
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.List r1;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r1 := @parameter0: java.util.List;

        return;
    }

    protected void done()
    {
        com.jidesoft.utils.SwingWorker r0;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        return;
    }

    protected final void setProgress(int)
    {
        java.lang.Throwable $r9;
        com.jidesoft.utils.SwingWorker$4 $r8;
        com.jidesoft.utils.AccumulativeRunnable $r3, $r5;
        java.lang.IllegalArgumentException $r0;
        java.lang.Integer $r6, $r7;
        com.jidesoft.utils.SwingWorker r1;
        int i0, $i1, i2;
        java.beans.PropertyChangeSupport $r2;
        java.lang.Integer[] $r4;
        boolean $z0;

        r1 := @this: com.jidesoft.utils.SwingWorker;

        i0 := @parameter0: int;

        if i0 < 0 goto label01;

        if i0 <= 100 goto label02;

     label01:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the value should be from 0 to 100");

        throw $r0;

     label02:
        $i1 = r1.<com.jidesoft.utils.SwingWorker: int progress>;

        if $i1 != i0 goto label03;

        return;

     label03:
        i2 = r1.<com.jidesoft.utils.SwingWorker: int progress>;

        r1.<com.jidesoft.utils.SwingWorker: int progress> = i0;

        $r2 = virtualinvoke r1.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport getPropertyChangeSupport()>();

        $z0 = virtualinvoke $r2.<java.beans.PropertyChangeSupport: boolean hasListeners(java.lang.String)>("progress");

        if $z0 != 0 goto label04;

        return;

     label04:
        entermonitor r1;

     label05:
        $r3 = r1.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doNotifyProgressChange>;

        if $r3 != null goto label06;

        $r8 = new com.jidesoft.utils.SwingWorker$4;

        specialinvoke $r8.<com.jidesoft.utils.SwingWorker$4: void <init>(com.jidesoft.utils.SwingWorker)>(r1);

        r1.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doNotifyProgressChange> = $r8;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        exitmonitor r1;

     label09:
        throw $r9;

     label10:
        $r5 = r1.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doNotifyProgressChange>;

        $r4 = newarray (java.lang.Integer)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[1] = $r7;

        virtualinvoke $r5.<com.jidesoft.utils.AccumulativeRunnable: void add(java.lang.Object[])>($r4);

        return;

        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public final int getProgress()
    {
        com.jidesoft.utils.SwingWorker r0;
        int $i0;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $i0 = r0.<com.jidesoft.utils.SwingWorker: int progress>;

        return $i0;
    }

    public final void execute()
    {
        com.jidesoft.utils.SwingWorker r1;
        java.util.concurrent.ExecutorService $r0;

        r1 := @this: com.jidesoft.utils.SwingWorker;

        $r0 = staticinvoke <com.jidesoft.utils.SwingWorker: java.util.concurrent.ExecutorService getWorkersExecutorService()>();

        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public final boolean cancel(boolean)
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.FutureTask $r1;
        boolean z0, $z1;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        $z1 = virtualinvoke $r1.<java.util.concurrent.FutureTask: boolean cancel(boolean)>(z0);

        return $z1;
    }

    public final boolean isCancelled()
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.FutureTask $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.FutureTask: boolean isCancelled()>();

        return $z0;
    }

    public final boolean isDone()
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.FutureTask $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.FutureTask: boolean isDone()>();

        return $z0;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.FutureTask $r1;
        java.lang.Object $r2;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        return $r2;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        com.jidesoft.utils.SwingWorker r0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.FutureTask $r2;
        long l0;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.jidesoft.utils.SwingWorker: java.util.concurrent.FutureTask future>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r3;
    }

    public final void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        com.jidesoft.utils.SwingWorker r0;
        java.beans.PropertyChangeSupport $r1;
        java.beans.PropertyChangeListener r2;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r2 := @parameter0: java.beans.PropertyChangeListener;

        $r1 = virtualinvoke r0.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport getPropertyChangeSupport()>();

        virtualinvoke $r1.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r2);

        return;
    }

    public final void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        com.jidesoft.utils.SwingWorker r0;
        java.beans.PropertyChangeSupport $r1;
        java.beans.PropertyChangeListener r2;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r2 := @parameter0: java.beans.PropertyChangeListener;

        $r1 = virtualinvoke r0.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport getPropertyChangeSupport()>();

        virtualinvoke $r1.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r2);

        return;
    }

    public final void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)
    {
        com.jidesoft.utils.SwingWorker r0;
        java.beans.PropertyChangeSupport $r1;
        java.lang.Object r3, r4;
        java.lang.String r2;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport getPropertyChangeSupport()>();

        virtualinvoke $r1.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        return;
    }

    public final java.beans.PropertyChangeSupport getPropertyChangeSupport()
    {
        com.jidesoft.utils.SwingWorker r0;
        java.beans.PropertyChangeSupport $r1;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $r1 = r0.<com.jidesoft.utils.SwingWorker: java.beans.PropertyChangeSupport propertyChangeSupport>;

        return $r1;
    }

    public final com.jidesoft.utils.SwingWorker$StateValue getState()
    {
        com.jidesoft.utils.SwingWorker r0;
        com.jidesoft.utils.SwingWorker$StateValue $r1, $r2;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        $z0 = virtualinvoke r0.<com.jidesoft.utils.SwingWorker: boolean isDone()>();

        if $z0 == 0 goto label1;

        $r2 = <com.jidesoft.utils.SwingWorker$StateValue: com.jidesoft.utils.SwingWorker$StateValue DONE>;

        return $r2;

     label1:
        $r1 = r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.SwingWorker$StateValue state>;

        return $r1;
    }

    private void setState(com.jidesoft.utils.SwingWorker$StateValue)
    {
        com.jidesoft.utils.SwingWorker r0;
        com.jidesoft.utils.SwingWorker$StateValue r1, r2;

        r0 := @this: com.jidesoft.utils.SwingWorker;

        r2 := @parameter0: com.jidesoft.utils.SwingWorker$StateValue;

        r1 = r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.SwingWorker$StateValue state>;

        r0.<com.jidesoft.utils.SwingWorker: com.jidesoft.utils.SwingWorker$StateValue state> = r2;

        virtualinvoke r0.<com.jidesoft.utils.SwingWorker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", r1, r2);

        return;
    }

    private void doneEDT()
    {
        com.jidesoft.utils.SwingWorker r1;
        com.jidesoft.utils.SwingWorker$5 $r0;
        java.lang.Runnable[] $r2;
        com.jidesoft.utils.AccumulativeRunnable $r3;
        boolean $z0;

        r1 := @this: com.jidesoft.utils.SwingWorker;

        $r0 = new com.jidesoft.utils.SwingWorker$5;

        specialinvoke $r0.<com.jidesoft.utils.SwingWorker$5: void <init>(com.jidesoft.utils.SwingWorker)>(r1);

        $z0 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r0.<java.lang.Runnable: void run()>();

        goto label2;

     label1:
        $r3 = <com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doSubmit>;

        $r2 = newarray (java.lang.Runnable)[1];

        $r2[0] = $r0;

        virtualinvoke $r3.<com.jidesoft.utils.AccumulativeRunnable: void add(java.lang.Object[])>($r2);

     label2:
        return;
    }

    private static synchronized java.util.concurrent.ExecutorService getWorkersExecutorService()
    {
        com.jidesoft.utils.SwingWorker$7 $r3;
        java.util.concurrent.TimeUnit $r5;
        com.jidesoft.utils.SwingWorker$6 $r2;
        java.util.concurrent.LinkedBlockingQueue $r4;
        java.util.concurrent.ExecutorService $r0, $r1;

        $r0 = <com.jidesoft.utils.SwingWorker: java.util.concurrent.ExecutorService executorService>;

        if $r0 != null goto label1;

        $r2 = new com.jidesoft.utils.SwingWorker$6;

        specialinvoke $r2.<com.jidesoft.utils.SwingWorker$6: void <init>()>();

        $r3 = new com.jidesoft.utils.SwingWorker$7;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r4 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r3.<com.jidesoft.utils.SwingWorker$7: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 10, 5L, $r5, $r4, $r2);

        <com.jidesoft.utils.SwingWorker: java.util.concurrent.ExecutorService executorService> = $r3;

     label1:
        $r1 = <com.jidesoft.utils.SwingWorker: java.util.concurrent.ExecutorService executorService>;

        return $r1;
    }

    static void access$100(com.jidesoft.utils.SwingWorker, com.jidesoft.utils.SwingWorker$StateValue)
    {
        com.jidesoft.utils.SwingWorker r0;
        com.jidesoft.utils.SwingWorker$StateValue r1;

        r0 := @parameter0: com.jidesoft.utils.SwingWorker;

        r1 := @parameter1: com.jidesoft.utils.SwingWorker$StateValue;

        specialinvoke r0.<com.jidesoft.utils.SwingWorker: void setState(com.jidesoft.utils.SwingWorker$StateValue)>(r1);

        return;
    }

    static void access$200(com.jidesoft.utils.SwingWorker)
    {
        com.jidesoft.utils.SwingWorker r0;

        r0 := @parameter0: com.jidesoft.utils.SwingWorker;

        specialinvoke r0.<com.jidesoft.utils.SwingWorker: void doneEDT()>();

        return;
    }

    static com.jidesoft.utils.AccumulativeRunnable access$300()
    {
        com.jidesoft.utils.AccumulativeRunnable $r0;

        $r0 = <com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doSubmit>;

        return $r0;
    }

    static void <clinit>()
    {
        com.jidesoft.utils.SwingWorker$DoSubmitAccumulativeRunnable $r0;

        <com.jidesoft.utils.SwingWorker: int MAX_WORKER_THREADS> = 10;

        $r0 = new com.jidesoft.utils.SwingWorker$DoSubmitAccumulativeRunnable;

        specialinvoke $r0.<com.jidesoft.utils.SwingWorker$DoSubmitAccumulativeRunnable: void <init>(com.jidesoft.utils.SwingWorker$1)>(null);

        <com.jidesoft.utils.SwingWorker: com.jidesoft.utils.AccumulativeRunnable doSubmit> = $r0;

        <com.jidesoft.utils.SwingWorker: java.util.concurrent.ExecutorService executorService> = null;

        return;
    }
}
