public final class com.adobe.xmp.XMPDateTimeFactory extends java.lang.Object
{
    private static final java.util.TimeZone UTC;

    private void <init>()
    {
        com.adobe.xmp.XMPDateTimeFactory r0;

        r0 := @this: com.adobe.xmp.XMPDateTimeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.XMPDateTime createFromCalendar(java.util.Calendar)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;
        java.util.Calendar r1;

        r1 := @parameter0: java.util.Calendar;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>(r1);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime create()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>()>();

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime create(int, int, int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;
        int i0, i1, i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>()>();

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setYear(int)>(i0);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setMonth(int)>(i1);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setDay(int)>(i2);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime create(int, int, int, int, int, int, int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;
        int i0, i1, i2, i3, i4, i5, i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>()>();

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setYear(int)>(i0);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setMonth(int)>(i1);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setDay(int)>(i2);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setHour(int)>(i3);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setMinute(int)>(i4);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setSecond(int)>(i5);

        interfaceinvoke $r0.<com.adobe.xmp.XMPDateTime: void setNanoSecond(int)>(i6);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime createFromISO8601(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime getCurrentDateTime()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r0;
        java.util.GregorianCalendar $r1;

        $r0 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();

        specialinvoke $r0.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>($r1);

        return $r0;
    }

    public static com.adobe.xmp.XMPDateTime setLocalTimeZone(com.adobe.xmp.XMPDateTime)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r3;
        com.adobe.xmp.XMPDateTime r0;
        java.util.Calendar $r1;
        java.util.TimeZone $r2;

        r0 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r1 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke $r1.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r2);

        $r3 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>($r1);

        return $r3;
    }

    public static com.adobe.xmp.XMPDateTime convertToUTCTime(com.adobe.xmp.XMPDateTime)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r5;
        com.adobe.xmp.XMPDateTime r0;
        java.util.Calendar $r1;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r3;
        java.util.Date $r4;
        long $l0;

        r0 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r1 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        $r2 = new java.util.GregorianCalendar;

        $r3 = <com.adobe.xmp.XMPDateTimeFactory: java.util.TimeZone UTC>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r3);

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(-9223372036854775808L);

        virtualinvoke $r2.<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>($r4);

        virtualinvoke $r2.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l0);

        $r5 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r5.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>($r2);

        return $r5;
    }

    public static com.adobe.xmp.XMPDateTime convertToLocalTime(com.adobe.xmp.XMPDateTime)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl $r3;
        com.adobe.xmp.XMPDateTime r0;
        java.util.Calendar $r1;
        java.util.GregorianCalendar $r2;
        long $l0;

        r0 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r1 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r2.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l0);

        $r3 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>(java.util.Calendar)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r0;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <com.adobe.xmp.XMPDateTimeFactory: java.util.TimeZone UTC> = $r0;

        return;
    }
}
