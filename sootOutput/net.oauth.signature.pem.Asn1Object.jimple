class net.oauth.signature.pem.Asn1Object extends java.lang.Object
{
    protected final int type;
    protected final int length;
    protected final byte[] value;
    protected final int tag;

    public void <init>(int, int, byte[])
    {
        net.oauth.signature.pem.Asn1Object r0;
        byte[] r1;
        int i0, $i1, i2;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r1 := @parameter2: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.oauth.signature.pem.Asn1Object: int tag> = i0;

        $i1 = i0 & 31;

        r0.<net.oauth.signature.pem.Asn1Object: int type> = $i1;

        r0.<net.oauth.signature.pem.Asn1Object: int length> = i2;

        r0.<net.oauth.signature.pem.Asn1Object: byte[] value> = r1;

        return;
    }

    public int getType()
    {
        net.oauth.signature.pem.Asn1Object r0;
        int $i0;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $i0 = r0.<net.oauth.signature.pem.Asn1Object: int type>;

        return $i0;
    }

    public int getLength()
    {
        net.oauth.signature.pem.Asn1Object r0;
        int $i0;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $i0 = r0.<net.oauth.signature.pem.Asn1Object: int length>;

        return $i0;
    }

    public byte[] getValue()
    {
        net.oauth.signature.pem.Asn1Object r0;
        byte[] $r1;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $r1 = r0.<net.oauth.signature.pem.Asn1Object: byte[] value>;

        return $r1;
    }

    public boolean isConstructed()
    {
        net.oauth.signature.pem.Asn1Object r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $i0 = r0.<net.oauth.signature.pem.Asn1Object: int tag>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public net.oauth.signature.pem.DerParser getParser() throws java.io.IOException
    {
        net.oauth.signature.pem.Asn1Object r0;
        byte[] $r2;
        net.oauth.signature.pem.DerParser $r1;
        java.io.IOException $r3;
        boolean $z0;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $z0 = virtualinvoke r0.<net.oauth.signature.pem.Asn1Object: boolean isConstructed()>();

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Invalid DER: can\'t parse primitive entity");

        throw $r3;

     label1:
        $r1 = new net.oauth.signature.pem.DerParser;

        $r2 = r0.<net.oauth.signature.pem.Asn1Object: byte[] value>;

        specialinvoke $r1.<net.oauth.signature.pem.DerParser: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.math.BigInteger getInteger() throws java.io.IOException
    {
        net.oauth.signature.pem.Asn1Object r0;
        byte[] $r2;
        int $i0;
        java.math.BigInteger $r1;
        java.io.IOException $r3;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $i0 = r0.<net.oauth.signature.pem.Asn1Object: int type>;

        if $i0 == 2 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Invalid DER: object is not integer");

        throw $r3;

     label1:
        $r1 = new java.math.BigInteger;

        $r2 = r0.<net.oauth.signature.pem.Asn1Object: byte[] value>;

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.lang.String getString() throws java.io.IOException
    {
        net.oauth.signature.pem.Asn1Object r0;
        byte[] $r5;
        int $i0;
        java.io.IOException $r1, $r2;
        java.lang.String r3, $r4;

        r0 := @this: net.oauth.signature.pem.Asn1Object;

        $i0 = r0.<net.oauth.signature.pem.Asn1Object: int type>;

        tableswitch($i0)
        {
            case 12: goto label3;
            case 13: goto label5;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 18: goto label1;
            case 19: goto label1;
            case 20: goto label5;
            case 21: goto label1;
            case 22: goto label1;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label1;
            case 26: goto label1;
            case 27: goto label1;
            case 28: goto label4;
            case 29: goto label5;
            case 30: goto label2;
            default: goto label5;
        };

     label1:
        r3 = "ISO-8859-1";

        goto label6;

     label2:
        r3 = "UTF-16BE";

        goto label6;

     label3:
        r3 = "UTF-8";

        goto label6;

     label4:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Invalid DER: can\'t handle UCS-4 string");

        throw $r1;

     label5:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Invalid DER: object is not a string");

        throw $r2;

     label6:
        $r4 = new java.lang.String;

        $r5 = r0.<net.oauth.signature.pem.Asn1Object: byte[] value>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, r3);

        return $r4;
    }
}
