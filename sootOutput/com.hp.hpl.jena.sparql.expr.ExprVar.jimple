public class com.hp.hpl.jena.sparql.expr.ExprVar extends com.hp.hpl.jena.sparql.expr.ExprNode
{
    protected com.hp.hpl.jena.sparql.core.Var varNode;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.Var $r2;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = null;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = $r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Var $r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = null;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to create a NodeVar from a non variable Node: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = $r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = null;

        r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r4;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        com.hp.hpl.jena.sparql.core.Var $r3;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>($r3, r1, r2);

        return $r4;
    }

    static com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.VariableNotBoundException $r4, $r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;
        com.hp.hpl.jena.sparql.function.FunctionEnv r14;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r14 := @parameter2: com.hp.hpl.jena.sparql.function.FunctionEnv;

        if r0 != null goto label1;

        $r9 = new com.hp.hpl.jena.sparql.expr.VariableNotBoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not bound: (no binding): ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.VariableNotBoundException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $r2 != null goto label2;

        $r4 = new com.hp.hpl.jena.sparql.expr.VariableNotBoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not bound: variable ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.VariableNotBoundException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.expr.ExprNode $r5;
        com.hp.hpl.jena.sparql.expr.ExprVar r0, $r6, $r7;
        boolean $z0, $z1, z2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z2 := @parameter1: boolean;

        r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $z0 != 0 goto label2;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return $r6;

     label2:
        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label3;

        $r7 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        $r5 = $r7;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.graph.Node)>($r4);

        goto label4;

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r2, null);

     label4:
        return $r5;
    }

    public com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.core.Var $r2, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransform r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1, $r5;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r0 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z0 == 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r3);

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.sparql.core.Var)>($r6);

        return $r5;

     label1:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.ExprVar $r0, r2;

        r2 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitor: void visit(com.hp.hpl.jena.sparql.expr.ExprVar)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r0;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransform: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprVar)>(r1);

        return $r2;
    }

    public void format(com.hp.hpl.jena.query.Query, org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.query.Query r4;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.core.Var $r2;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r4 := @parameter0: com.hp.hpl.jena.query.Query;

        r0 := @parameter1: org.apache.jena.atlas.io.IndentedWriter;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(char)>(63);

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r3);

        return;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprVar r0, r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.expr.ExprVar;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.expr.ExprVar) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVar: java.lang.String getVarName()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprVar: java.lang.String getVarName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public boolean isVariable()
    {
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        return 1;
    }

    public java.lang.String getVarName()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.ExprVar getExprVar()
    {
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        return r0;
    }

    public com.hp.hpl.jena.sparql.core.Var asVar()
    {
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getAsNode()
    {
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        return $r1;
    }

    public java.lang.String toPrefixString()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String asSparqlExpr()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var varNode>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String toString()>();

        return $r2;
    }
}
