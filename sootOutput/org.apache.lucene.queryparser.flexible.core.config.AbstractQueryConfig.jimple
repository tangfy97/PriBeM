public abstract class org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig extends java.lang.Object
{
    private final java.util.HashMap configMap;

    void <init>()
    {
        java.util.HashMap $r1;
        org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: java.util.HashMap configMap> = $r1;

        return;
    }

    public java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey r0;
        org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key cannot be null!");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: java.util.HashMap configMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        return $r3;
    }

    public boolean has(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey r0;
        org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig r1;
        java.util.HashMap $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key cannot be null!");

        throw $r3;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: java.util.HashMap configMap>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey, java.lang.Object)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey r0;
        org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig r2;
        java.lang.Object r1;
        java.util.HashMap $r3;
        java.lang.IllegalArgumentException $r4;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key cannot be null!");

        throw $r4;

     label1:
        if r1 != null goto label2;

        virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: boolean unset(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>(r0);

        goto label3;

     label2:
        $r3 = r2.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: java.util.HashMap configMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label3:
        return;
    }

    public boolean unset(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey r0;
        org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key cannot be null!");

        throw $r4;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.flexible.core.config.AbstractQueryConfig: java.util.HashMap configMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r0);

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
