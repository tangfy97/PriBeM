public class org.objectweb.asm.tree.TableSwitchInsnNode extends org.objectweb.asm.tree.AbstractInsnNode
{
    public int min;
    public int max;
    public org.objectweb.asm.tree.LabelNode dflt;
    public java.util.List labels;

    public transient void <init>(int, int, org.objectweb.asm.tree.LabelNode, org.objectweb.asm.tree.LabelNode[])
    {
        org.objectweb.asm.tree.TableSwitchInsnNode r0;
        org.objectweb.asm.tree.LabelNode r1;
        java.util.ArrayList $r2;
        java.util.List $r4, $r5;
        int i0, i1;
        org.objectweb.asm.tree.LabelNode[] r3;

        r0 := @this: org.objectweb.asm.tree.TableSwitchInsnNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.objectweb.asm.tree.LabelNode;

        r3 := @parameter3: org.objectweb.asm.tree.LabelNode[];

        specialinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: void <init>(int)>(170);

        r0.<org.objectweb.asm.tree.TableSwitchInsnNode: int min> = i0;

        r0.<org.objectweb.asm.tree.TableSwitchInsnNode: int max> = i1;

        r0.<org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels> = $r2;

        if r3 == null goto label1;

        $r4 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5);

     label1:
        return;
    }

    public int getType()
    {
        org.objectweb.asm.tree.TableSwitchInsnNode r0;

        r0 := @this: org.objectweb.asm.tree.TableSwitchInsnNode;

        return 11;
    }

    public void accept(org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.tree.TableSwitchInsnNode r0;
        org.objectweb.asm.MethodVisitor r3;
        org.objectweb.asm.tree.LabelNode $r4, $r8;
        org.objectweb.asm.Label $r5, $r9;
        java.util.List $r1, $r6;
        int $i0, $i1, $i2, $i3, i4;
        org.objectweb.asm.Label[] r2;
        java.lang.Object $r7;

        r0 := @this: org.objectweb.asm.tree.TableSwitchInsnNode;

        r3 := @parameter0: org.objectweb.asm.MethodVisitor;

        $r1 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (org.objectweb.asm.Label)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r2;

        if i4 >= $i1 goto label2;

        $r6 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        $r8 = (org.objectweb.asm.tree.LabelNode) $r7;

        $r9 = virtualinvoke $r8.<org.objectweb.asm.tree.LabelNode: org.objectweb.asm.Label getLabel()>();

        r2[i4] = $r9;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i2 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: int min>;

        $i3 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: int max>;

        $r4 = r0.<org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $r5 = virtualinvoke $r4.<org.objectweb.asm.tree.LabelNode: org.objectweb.asm.Label getLabel()>();

        virtualinvoke r3.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>($i2, $i3, $r5, r2);

        return;
    }

    public org.objectweb.asm.tree.AbstractInsnNode clone(java.util.Map)
    {
        org.objectweb.asm.tree.TableSwitchInsnNode $r0, r1;
        org.objectweb.asm.tree.LabelNode $r3, $r4;
        java.util.List $r5;
        java.util.Map r2;
        int $i0, $i1;
        org.objectweb.asm.tree.LabelNode[] $r6;

        r1 := @this: org.objectweb.asm.tree.TableSwitchInsnNode;

        r2 := @parameter0: java.util.Map;

        $r0 = new org.objectweb.asm.tree.TableSwitchInsnNode;

        $i0 = r1.<org.objectweb.asm.tree.TableSwitchInsnNode: int min>;

        $i1 = r1.<org.objectweb.asm.tree.TableSwitchInsnNode: int max>;

        $r3 = r1.<org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode dflt>;

        $r4 = staticinvoke <org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode clone(org.objectweb.asm.tree.LabelNode,java.util.Map)>($r3, r2);

        $r5 = r1.<org.objectweb.asm.tree.TableSwitchInsnNode: java.util.List labels>;

        $r6 = staticinvoke <org.objectweb.asm.tree.TableSwitchInsnNode: org.objectweb.asm.tree.LabelNode[] clone(java.util.List,java.util.Map)>($r5, r2);

        specialinvoke $r0.<org.objectweb.asm.tree.TableSwitchInsnNode: void <init>(int,int,org.objectweb.asm.tree.LabelNode,org.objectweb.asm.tree.LabelNode[])>($i0, $i1, $r4, $r6);

        return $r0;
    }
}
