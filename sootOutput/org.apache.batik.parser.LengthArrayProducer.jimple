public class org.apache.batik.parser.LengthArrayProducer extends org.apache.batik.parser.DefaultLengthListHandler
{
    protected java.util.LinkedList vs;
    protected float[] v;
    protected java.util.LinkedList us;
    protected short[] u;
    protected int index;
    protected int count;
    protected short currentUnit;

    public void <init>()
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        specialinvoke r0.<org.apache.batik.parser.DefaultLengthListHandler: void <init>()>();

        return;
    }

    public short[] getLengthTypeArray()
    {
        org.apache.batik.parser.LengthArrayProducer r0;
        short[] $r1;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        $r1 = r0.<org.apache.batik.parser.LengthArrayProducer: short[] u>;

        return $r1;
    }

    public float[] getLengthValueArray()
    {
        float[] $r1;
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        $r1 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        return $r1;
    }

    public void startLengthList() throws org.apache.batik.parser.ParseException
    {
        float[] $r4;
        org.apache.batik.parser.LengthArrayProducer r0;
        short[] $r2;
        java.util.LinkedList $r1, $r3;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList us> = $r1;

        $r2 = newarray (short)[11];

        r0.<org.apache.batik.parser.LengthArrayProducer: short[] u> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList vs> = $r3;

        $r4 = newarray (float)[11];

        r0.<org.apache.batik.parser.LengthArrayProducer: float[] v> = $r4;

        r0.<org.apache.batik.parser.LengthArrayProducer: int count> = 0;

        r0.<org.apache.batik.parser.LengthArrayProducer: int index> = 0;

        return;
    }

    public void numberValue(float) throws org.apache.batik.parser.ParseException
    {
        float f0;
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        f0 := @parameter0: float;

        return;
    }

    public void lengthValue(float) throws org.apache.batik.parser.ParseException
    {
        float[] $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.batik.parser.LengthArrayProducer r0;
        java.util.LinkedList $r4, $r8;
        float f0;
        short[] $r7, $r9, $r10;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        f0 := @parameter0: float;

        $i1 = r0.<org.apache.batik.parser.LengthArrayProducer: int index>;

        $r1 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r4 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList vs>;

        $r3 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        $r5 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        $i3 = lengthof $r5;

        $i4 = $i3 * 2;

        $i5 = $i4 + 1;

        $r6 = newarray (float)[$i5];

        r0.<org.apache.batik.parser.LengthArrayProducer: float[] v> = $r6;

        $r8 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList us>;

        $r7 = r0.<org.apache.batik.parser.LengthArrayProducer: short[] u>;

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<org.apache.batik.parser.LengthArrayProducer: short[] u>;

        $i6 = lengthof $r9;

        $i7 = $i6 * 2;

        $i8 = $i7 + 1;

        $r10 = newarray (short)[$i8];

        r0.<org.apache.batik.parser.LengthArrayProducer: short[] u> = $r10;

        r0.<org.apache.batik.parser.LengthArrayProducer: int index> = 0;

     label1:
        $r2 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        $i2 = r0.<org.apache.batik.parser.LengthArrayProducer: int index>;

        $r2[$i2] = f0;

        return;
    }

    public void startLength() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 1;

        return;
    }

    public void endLength() throws org.apache.batik.parser.ParseException
    {
        short $s2;
        int $i0, $i1, $i3, $i4;
        org.apache.batik.parser.LengthArrayProducer r0;
        short[] $r1;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        $r1 = r0.<org.apache.batik.parser.LengthArrayProducer: short[] u>;

        $i0 = r0.<org.apache.batik.parser.LengthArrayProducer: int index>;

        $i1 = $i0 + 1;

        r0.<org.apache.batik.parser.LengthArrayProducer: int index> = $i1;

        $s2 = r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit>;

        $r1[$i0] = $s2;

        $i3 = r0.<org.apache.batik.parser.LengthArrayProducer: int count>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.parser.LengthArrayProducer: int count> = $i4;

        return;
    }

    public void em() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 3;

        return;
    }

    public void ex() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 4;

        return;
    }

    public void in() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 8;

        return;
    }

    public void cm() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 6;

        return;
    }

    public void mm() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 7;

        return;
    }

    public void pc() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 10;

        return;
    }

    public void pt() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 9;

        return;
    }

    public void px() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 5;

        return;
    }

    public void percentage() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.parser.LengthArrayProducer r0;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        r0.<org.apache.batik.parser.LengthArrayProducer: short currentUnit> = 2;

        return;
    }

    public void endLengthList() throws org.apache.batik.parser.ParseException
    {
        float[] r1, $r5, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.apache.batik.parser.LengthArrayProducer r0;
        java.util.LinkedList $r2, $r6, $r7, $r12;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r8;
        java.lang.Object $r4, $r9;
        short[] r10, $r11, r14;

        r0 := @this: org.apache.batik.parser.LengthArrayProducer;

        $i0 = r0.<org.apache.batik.parser.LengthArrayProducer: int count>;

        r1 = newarray (float)[$i0];

        i8 = 0;

        $r2 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList vs>;

        $r3 = virtualinvoke $r2.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r13 = (float[]) $r4;

        $i1 = lengthof r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r1, i8, $i1);

        $i2 = lengthof r13;

        i8 = i8 + $i2;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.apache.batik.parser.LengthArrayProducer: float[] v>;

        $i3 = r0.<org.apache.batik.parser.LengthArrayProducer: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, i8, $i3);

        $r6 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList vs>;

        virtualinvoke $r6.<java.util.LinkedList: void clear()>();

        r0.<org.apache.batik.parser.LengthArrayProducer: float[] v> = r1;

        $i4 = r0.<org.apache.batik.parser.LengthArrayProducer: int count>;

        r14 = newarray (short)[$i4];

        i9 = 0;

        $r7 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList us>;

        $r8 = virtualinvoke $r7.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (short[]) $r9;

        $i5 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r14, i9, $i5);

        $i6 = lengthof r10;

        i9 = i9 + $i6;

     label4:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r11 = r0.<org.apache.batik.parser.LengthArrayProducer: short[] u>;

        $i7 = r0.<org.apache.batik.parser.LengthArrayProducer: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r14, i9, $i7);

        $r12 = r0.<org.apache.batik.parser.LengthArrayProducer: java.util.LinkedList us>;

        virtualinvoke $r12.<java.util.LinkedList: void clear()>();

        r0.<org.apache.batik.parser.LengthArrayProducer: short[] u> = r14;

        return;
    }
}
