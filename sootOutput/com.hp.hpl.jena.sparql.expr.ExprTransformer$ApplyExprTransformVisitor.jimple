public class com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor extends java.lang.Object implements com.hp.hpl.jena.sparql.expr.ExprVisitor
{
    private com.hp.hpl.jena.sparql.expr.ExprTransform transform;
    private final java.util.Deque stack;

    final com.hp.hpl.jena.sparql.expr.Expr result()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        int $i0;
        java.lang.Object $r3;
        java.util.Deque $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 == 1 goto label1;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Stack is not aligned");

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object peek()>();

        $r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        return $r4;
    }

    void <init>(com.hp.hpl.jena.sparql.expr.ExprTransform)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        java.util.ArrayDeque $r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack> = $r1;

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform> = r2;

        return;
    }

    public void startVisit()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        return;
    }

    public void finishVisit()
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunction0)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction0 r0;
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.util.Deque $r4;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction0;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction0: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r4, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunction1)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction1 r3;
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r5;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r4;
        java.util.Deque $r1, $r6;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r3 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction1;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r1);

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprFunction1: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r4, $r2);

        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r6, $r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunction2)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r6;
        java.util.Deque $r1, $r3, $r8;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r4, $r7;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r5 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction2;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r1);

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r3);

        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.ExprFunction2: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r6, $r4, $r2);

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r8, $r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunction3)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r8;
        java.util.Deque $r1, $r3, $r5, $r10;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r4, $r6, $r9;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r7;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r7 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r1);

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r3);

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r5);

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r8, $r6, $r4, $r2);

        $r10 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r10, $r9);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunctionN)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r4;
        com.hp.hpl.jena.sparql.expr.Expr $r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r3;
        java.util.Deque $r6;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: java.util.List getArgs()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprList process(java.util.List)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.ExprList)>($r4, $r3);

        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r6, $r5);

        return;
    }

    private com.hp.hpl.jena.sparql.expr.ExprList process(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r3;
        java.util.Deque $r4;
        java.util.ArrayList $r1;
        java.util.List r0;
        com.hp.hpl.jena.sparql.expr.Expr $r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r2;
        int $i0, i1;

        r3 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r4 = r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)>($r4);

        interfaceinvoke $r1.<java.util.List: void add(int,java.lang.Object)>(0, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>(java.util.List)>($r1);

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprFunctionOp)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r3;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r4, $r5, $r8;
        java.util.Deque $r7;
        com.hp.hpl.jena.sparql.expr.ExprTransformOp r13;
        com.hp.hpl.jena.sparql.expr.ExprFunctionOp r0;
        java.util.List $r1, $r10;
        com.hp.hpl.jena.sparql.expr.Expr $r6;
        com.hp.hpl.jena.sparql.expr.ExprList r11;
        com.hp.hpl.jena.sparql.algebra.Transform $r9;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r12;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprFunctionOp;

        r11 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: java.util.List getArgs()>();

        if $r1 == null goto label1;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: java.util.List getArgs()>();

        r11 = specialinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprList process(java.util.List)>($r10);

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()>();

        r12 = $r2;

        $r4 = r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $z0 = $r4 instanceof com.hp.hpl.jena.sparql.expr.ExprTransformOp;

        if $z0 == 0 goto label2;

        $r8 = r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        r13 = (com.hp.hpl.jena.sparql.expr.ExprTransformOp) $r8;

        $r9 = interfaceinvoke r13.<com.hp.hpl.jena.sparql.expr.ExprTransformOp: com.hp.hpl.jena.sparql.algebra.Transform getTransform()>();

        r12 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r9, $r2);

     label2:
        $r5 = r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionOp: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r5, r11, r12);

        $r7 = r3.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r7, $r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0;
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.util.Deque $r4;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r4, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.util.Deque $r4;
        com.hp.hpl.jena.sparql.expr.ExprVar r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r4, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.ExprAggregator)
    {
        com.hp.hpl.jena.sparql.expr.ExprAggregator r0;
        com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.util.Deque $r4;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprAggregator;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: com.hp.hpl.jena.sparql.expr.ExprTransform transform>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: java.util.Deque stack>;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer$ApplyExprTransformVisitor: void push(java.util.Deque,com.hp.hpl.jena.sparql.expr.Expr)>($r4, $r3);

        return;
    }

    private static void push(java.util.Deque, com.hp.hpl.jena.sparql.expr.Expr)
    {
        java.util.Deque r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @parameter0: java.util.Deque;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        interfaceinvoke r0.<java.util.Deque: void push(java.lang.Object)>(r1);

        return;
    }

    private static com.hp.hpl.jena.sparql.expr.Expr pop(java.util.Deque)
    {
        java.io.PrintStream $r4;
        java.util.EmptyStackException $r3;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.sparql.expr.Expr r5;
        java.lang.Object $r1;
        java.util.Deque r0;

        r0 := @parameter0: java.util.Deque;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Deque: java.lang.Object pop()>();

        r5 = (com.hp.hpl.jena.sparql.expr.Expr) $r1;

        $r2 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue nvNothing>;

        if r5 != $r2 goto label2;

        r5 = null;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Empty stack");

        return null;

        catch java.util.EmptyStackException from label1 to label2 with label3;
    }
}
