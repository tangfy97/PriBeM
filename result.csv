Value;From class;From type;From method;Next invoke;Next class;Next type;Next method;Type1;Type2
canonicalParent;<java.io.File:;java.lang.String;getCanonicalPath()>;staticinvoke;<org.apache.commons.io.FilenameUtils:;boolean;directoryContains(java.lang.String,java.lang.String)>(canonicalParent, canonicalChild);java.lang.String;boolean
canonicalChild;<java.io.File:;java.lang.String;getCanonicalPath()>;staticinvoke;<org.apache.commons.io.FilenameUtils:;boolean;directoryContains(java.lang.String,java.lang.String)>(canonicalParent, canonicalChild);java.lang.String;boolean
line;<lombok.installer.eclipse.EclipseLocation:;void;uninstall()>;virtualinvoke;$stack71.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
line;<lombok.installer.eclipse.EclipseLocation:;void;uninstall()>;virtualinvoke;$stack74.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
line;<lombok.installer.eclipse.EclipseLocation:;void;uninstall()>;virtualinvoke;newContents.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;staticinvoke;<org.apache.commons.io.FilenameUtils:;boolean;wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(name, wildcard, $stack8);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack15.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack8.<org.apache.commons.io.IOCase:;boolean;checkEquals(java.lang.String,java.lang.String)>(name, name2);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<org.apache.cxf.common.util.StringUtils:;boolean;isEmpty(java.lang.String)>(line);java.lang.String;boolean
s2;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;d2.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(s2);java.lang.String;java.lang.StringBuilder
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;lines.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;list.<java.util.Collection:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
baseName;<java.io.File:;java.lang.String;getName()>;specialinvoke;this.<cucumber.runtime.formatter.HTMLFormatter:;java.io.OutputStream;reportFileOutputStream(java.lang.String)>(baseName);java.lang.String;java.io.OutputStream
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;this.<org.apache.commons.io.LineIterator:;boolean;isValidLine(java.lang.String)>(line);java.lang.String;boolean
tokenDef;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;tokenDefPattern.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(tokenDef);java.lang.String;java.util.regex.Matcher
tokenDef;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack36.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(tokenDef);java.lang.String;java.lang.StringBuilder
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;$stack9.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<junit.runner.BaseTestRunner:;java.lang.String;getFilteredTrace(java.lang.String)>;staticinvoke;<junit.runner.BaseTestRunner:;boolean;filterLine(java.lang.String)>(line);java.lang.String;boolean
line;<org.apache.commons.exec.environment.DefaultProcessingEnvironment:;java.util.Map;createProcEnvironment()>;virtualinvoke;$stack24.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.apache.commons.exec.environment.DefaultProcessingEnvironment:;java.util.Map;createProcEnvironment()>;virtualinvoke;$stack19.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack12.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
file;<java.io.File:;java.lang.String;getAbsolutePath()>;staticinvoke;<lombok.installer.Installer:;lombok.installer.IdeLocation;tryAllProviders(java.lang.String)>(file);java.lang.String;lombok.installer.IdeLocation
file;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack19.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(file);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack8.<org.apache.commons.io.IOCase:;boolean;checkEndsWith(java.lang.String,java.lang.String)>(name, suffix);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;prolog.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
nPath;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;ini#3.<java.lang.String:;boolean;equals(java.lang.Object)>(nPath);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;list.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line2;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;line1.<java.lang.String:;boolean;equals(java.lang.Object)>(line2);java.lang.String;boolean
line2;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;line1.<java.lang.String:;boolean;equals(java.lang.Object)>(line2);java.lang.String;boolean
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack8.<org.apache.commons.io.IOCase:;boolean;checkStartsWith(java.lang.String,java.lang.String)>(name, prefix);java.lang.String;boolean
pathCanonical;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;p.<java.lang.String:;boolean;equals(java.lang.Object)>(pathCanonical);java.lang.String;boolean
filename;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;classPath.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(filename);java.lang.String;java.lang.StringBuilder
l6;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack37.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(l6);java.lang.String;java.lang.StringBuilder
line;<com.darwinsys.csv.CSVRE:;void;process(java.io.BufferedReader)>;virtualinvoke;$stack8.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<com.darwinsys.csv.CSVRE:;void;process(java.io.BufferedReader)>;virtualinvoke;this.<com.darwinsys.csv.CSVRE:;java.util.List;parse(java.lang.String)>(line);java.lang.String;java.util.List
line;<com.darwinsys.tools.XrefCheck:;void;accumulateXrefs(java.lang.String,boolean)>;virtualinvoke;$stack35.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
line;<com.darwinsys.tools.XrefCheck:;void;accumulateXrefs(java.lang.String,boolean)>;virtualinvoke;$stack49.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<com.darwinsys.tools.XrefCheck:;void;accumulateXrefs(java.lang.String,boolean)>;virtualinvoke;$stack16.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
l13;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack57.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l13);java.lang.String;java.lang.StringBuffer
l13;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack111.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l13);java.lang.String;java.lang.StringBuffer
l13;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;l14#15.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l13);java.lang.String;java.lang.StringBuffer
line;<com.darwinsys.sql.SQLRunner:;java.lang.String;getStatement(java.io.BufferedReader)>;virtualinvoke;$stack31.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<com.darwinsys.sql.SQLRunner:;java.lang.String;getStatement(java.io.BufferedReader)>;virtualinvoke;sb.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
patt;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack51.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(patt);java.lang.String;java.lang.StringBuilder
inputLine;<com.darwinsys.regex.JGrep:;void;process(java.io.Reader,java.lang.String)>;virtualinvoke;$stack20.<java.util.regex.Matcher:;java.util.regex.Matcher;reset(java.lang.CharSequence)>(inputLine);java.lang.String;java.util.regex.Matcher
pair;<java.util.Scanner:;java.lang.String;next()>;virtualinvoke;$stack35.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(pair);java.lang.String;java.lang.StringBuilder
pair;<java.util.Scanner:;java.lang.String;next()>;virtualinvoke;$stack29.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(pair);java.lang.String;java.lang.StringBuilder
startDirPath;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack19.<java.lang.String:;boolean;startsWith(java.lang.String)>(startDirPath);java.lang.String;boolean
file;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;$stack20.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(file);java.lang.String;java.lang.StringBuilder
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;writer#4.<java.io.StringWriter:;java.io.StringWriter;append(java.lang.CharSequence)>(line);java.lang.String;java.io.StringWriter
line;<java.io.LineNumberReader:;java.lang.String;readLine()>;virtualinvoke;$stack13.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
prev;<com.sun.activation.registries.MimeTypeFile:;void;parse(java.io.BufferedReader)>;virtualinvoke;$stack6.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(prev);java.lang.String;java.lang.StringBuffer
line;<com.sun.activation.registries.MimeTypeFile:;void;parse(java.io.BufferedReader)>;virtualinvoke;$stack7.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
l2;<java.io.DataInputStream:;java.lang.String;readUTF()>;staticinvoke;<java.security.cert.CertificateFactory:;java.security.cert.CertificateFactory;getInstance(java.lang.String,java.lang.String)>(l2, $stack8);java.lang.String;java.security.cert.CertificateFactory
l3;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack37.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(l3);java.lang.String;java.lang.StringBuilder
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;staticinvoke;<java.security.KeyFactory:;java.security.KeyFactory;getInstance(java.lang.String,java.lang.String)>(l4, $stack20);java.lang.String;java.security.KeyFactory
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;staticinvoke;<java.security.KeyFactory:;java.security.KeyFactory;getInstance(java.lang.String,java.lang.String)>(l4, $stack17);java.lang.String;java.security.KeyFactory
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;staticinvoke;<javax.crypto.SecretKeyFactory:;javax.crypto.SecretKeyFactory;getInstance(java.lang.String,java.lang.String)>(l4, $stack14);java.lang.String;javax.crypto.SecretKeyFactory
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack30.<java.util.Hashtable:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(l4, $stack29);java.lang.String;java.lang.Object
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack25.<java.util.Hashtable:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(l4, $stack24);java.lang.String;java.lang.Object
l4;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack19.<java.util.Hashtable:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(l4, $stack18);java.lang.String;java.lang.Object
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack12.<java.lang.String:;boolean;equals(java.lang.Object)>(rc);java.lang.String;boolean
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack16.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(rc);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;this.<org.mmbase.util.transformers.ChunkedTransformer:;boolean;replace(java.lang.String,java.io.Writer,org.mmbase.util.transformers.ChunkedTransformer$Status)>(line, w, status);java.lang.String;boolean
line;<java.util.Scanner:;java.lang.String;nextLine()>;interfaceinvoke;lines.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
filename;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack35.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(filename);java.lang.String;java.lang.StringBuilder
filename;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack21.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(filename);java.lang.String;java.lang.StringBuilder
filename;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack28.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(filename);java.lang.String;java.lang.StringBuilder
line;<com.sun.mail.smtp.SMTPTransport:;boolean;ehlo(java.lang.String)>;virtualinvoke;$stack29.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
newFolderName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack10.<java.lang.String:;boolean;equals(java.lang.Object)>(newFolderName);java.lang.String;boolean
newFolderName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack19.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(newFolderName);java.lang.String;java.lang.StringBuilder
parentDirPath;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack15.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(parentDirPath);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack40.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(name);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack34.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(name);java.lang.String;java.lang.StringBuilder
line;<net.sf.json.xml.XMLSerializer:;net.sf.json.JSON;readFromStream(java.io.InputStream)>;virtualinvoke;xml.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
l6;<org.bouncycastle.crypto.examples.DESExample:;void;performDecrypt(byte[])>;staticinvoke;<org.bouncycastle.util.encoders.Hex:;byte[];decode(java.lang.String)>(l6);java.lang.String;byte[]
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack34.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(name);java.lang.String;java.lang.StringBuilder
name;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack24.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(name);java.lang.String;java.lang.StringBuilder
propertiesFilePath;<java.io.File:;java.lang.String;getAbsolutePath()>;interfaceinvoke;propertiesFilesNearModel.<java.util.Set:;boolean;add(java.lang.Object)>(propertiesFilePath);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;this.<org.apache.commons.io.LineIterator:;boolean;isValidLine(java.lang.String)>(line);java.lang.String;boolean
line;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack6.<java.lang.String:;boolean;equals(java.lang.Object)>(line);java.lang.String;boolean
tempDir;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack13.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(tempDir);java.lang.String;java.lang.StringBuffer
clsName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack205.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(clsName);java.lang.String;java.lang.StringBuffer
clsName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack102.<java.util.HashMap:;java.lang.Object;remove(java.lang.Object)>(clsName);java.lang.String;java.lang.Object
clsName;<java.io.File:;java.lang.String;getName()>;staticinvoke;<org.apache.axis.utils.ClassUtils:;java.lang.ClassLoader;getClassLoader(java.lang.String)>(clsName);java.lang.String;java.lang.ClassLoader
clsName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack105.<java.util.HashMap:;java.lang.Object;get(java.lang.Object)>(clsName);java.lang.String;java.lang.Object
clsName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack114.<java.util.HashMap:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(clsName, fw#53);java.lang.String;java.lang.Object
rawLine;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack62.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(rawLine);java.lang.String;java.lang.StringBuilder
rawLine;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack42.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(rawLine);java.lang.String;java.lang.StringBuilder
providerClassName;<com.sun.jersey.core.osgi.OsgiRegistry$BundleSpiProvidersLoader:;java.util.List;call()>;interfaceinvoke;$stack23.<org.osgi.framework.Bundle:;java.lang.Class;loadClass(java.lang.String)>(providerClassName);java.lang.String;java.lang.Class
line;<java.io.RandomAccessFile:;java.lang.String;readLine()>;virtualinvoke;$stack18.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
rawLine;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack40.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(rawLine);java.lang.String;java.lang.StringBuilder
l7;<java.io.File:;java.lang.String;getParent()>;virtualinvoke;$stack22.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l7);java.lang.String;java.lang.StringBuffer
line;<org.apache.ibatis.migration.MigrationReader:;void;<init>(java.io.Reader,boolean,java.util.Properties)>;virtualinvoke;currentBuilder.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
className;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;interfaceinvoke;$stack7.<org.jboss.netty.handler.codec.serialization.ClassResolver:;java.lang.Class;resolve(java.lang.String)>(className);java.lang.String;java.lang.Class
content;<org.springframework.util.xml.XmlValidationModeDetector:;int;detectValidationMode(java.io.InputStream)>;staticinvoke;<org.springframework.util.StringUtils:;boolean;hasText(java.lang.String)>(content);java.lang.String;boolean
content;<org.springframework.util.xml.XmlValidationModeDetector:;int;detectValidationMode(java.io.InputStream)>;specialinvoke;this.<org.springframework.util.xml.XmlValidationModeDetector:;boolean;hasDoctype(java.lang.String)>(content);java.lang.String;boolean
content;<org.springframework.util.xml.XmlValidationModeDetector:;int;detectValidationMode(java.io.InputStream)>;specialinvoke;this.<org.springframework.util.xml.XmlValidationModeDetector:;boolean;hasOpeningTag(java.lang.String)>(content);java.lang.String;boolean
l3;<org.joda.time.tz.ZoneInfoCompiler:;void;parseDataFile(java.io.BufferedReader)>;virtualinvoke;$stack28.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(l3);java.lang.String;java.lang.StringBuilder
normalized;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack16.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(normalized);java.lang.String;java.lang.StringBuffer
line;<com.google.common.io.CharSource:;com.google.common.collect.ImmutableList;readLines()>;interfaceinvoke;result.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
filename;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack12.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(filename);java.lang.String;java.lang.StringBuffer
filename;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack17.<freemarker.template.Configuration:;freemarker.template.Template;getTemplate(java.lang.String)>(filename);java.lang.String;freemarker.template.Template
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
systemID;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;this.<org.dom4j.io.XPPReader:;org.dom4j.Document;read(java.io.Reader,java.lang.String)>($stack4, systemID);java.lang.String;org.dom4j.Document
line;<com.sun.activation.registries.MailcapFile:;void;parse(java.io.Reader)>;virtualinvoke;$stack15.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack107.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack94.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack82.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack76.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack37.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack66.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;this.<org.springframework.util.DefaultPropertiesPersister:;boolean;endsWithContinuationMarker(java.lang.String)>(line);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack45.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<junit.runner.BaseTestRunner:;java.lang.String;getFilteredTrace(java.lang.String)>;staticinvoke;<junit.runner.BaseTestRunner:;boolean;filterLine(java.lang.String)>(line);java.lang.String;boolean
dev;<java.util.Scanner:;java.lang.String;next()>;staticinvoke;<eu.kostia.gtkjfilechooser.RemovableDevice$RemovableDeviceType:;eu.kostia.gtkjfilechooser.RemovableDevice$RemovableDeviceType;getType(java.lang.String)>(dev);java.lang.String;eu.kostia.gtkjfilechooser.RemovableDevice$RemovableDeviceType
diskUUIDs;<eu.kostia.gtkjfilechooser.FreeDesktopUtil:;java.util.List;getRemovableDevices()>;staticinvoke;<java.util.Arrays:;int;binarySearch(java.lang.Object[],java.lang.Object)>(diskUUIDs, name);java.lang.String[];int
filename;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;sInfo.<org.exolab.castor.builder.SGStateInfo:;java.util.Properties;getCDRFile(java.lang.String)>(filename);java.lang.String;java.util.Properties
line;<com.google.common.io.CharStreams:;java.util.List;readLines(java.lang.Readable)>;interfaceinvoke;result.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<com.google.common.io.CharStreams:;java.lang.Object;readLines(java.lang.Readable,com.google.common.io.LineProcessor)>;interfaceinvoke;processor.<com.google.common.io.LineProcessor:;boolean;processLine(java.lang.String)>(line);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;list.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
uuid;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;staticinvoke;<org.hibernate.impl.SessionFactoryObjectFactory:;java.lang.Object;getInstance(java.lang.String)>(uuid);java.lang.String;java.lang.Object
uuid;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack11.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(uuid);java.lang.String;java.lang.StringBuffer
name;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;staticinvoke;<org.hibernate.impl.SessionFactoryObjectFactory:;java.lang.Object;getNamedInstance(java.lang.String)>(name);java.lang.String;java.lang.Object
uuid;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack18.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(uuid);java.lang.String;java.lang.StringBuffer
name;<java.io.ObjectInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack20.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(name);java.lang.String;java.lang.StringBuffer
l3;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;l2.<java.util.ArrayList:;boolean;add(java.lang.Object)>(l3);java.lang.String;boolean
key;<java.io.File:;java.lang.String;getAbsolutePath()>;interfaceinvoke;$stack8.<java.util.Map:;java.lang.Object;get(java.lang.Object)>(key);java.lang.String;java.lang.Object
key;<java.io.File:;java.lang.String;getAbsolutePath()>;interfaceinvoke;$stack13.<java.util.Map:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(key, this);java.lang.String;java.lang.Object
ln;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;returned.<java.util.Set:;boolean;contains(java.lang.Object)>(ln);java.lang.String;boolean
ln;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;names.<java.util.List:;boolean;add(java.lang.Object)>(ln);java.lang.String;boolean
ln;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;returned.<java.util.Set:;boolean;add(java.lang.Object)>(ln);java.lang.String;boolean
line;<com.amazonaws.services.s3.internal.crypto.EncryptionUtils:;java.lang.String;convertStreamToString(java.io.InputStream)>;virtualinvoke;stringBuilder.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
templateName;<java.io.File:;java.lang.String;getName()>;virtualinvoke;$stack10.<freemarker.template.Configuration:;freemarker.template.Template;getTemplate(java.lang.String,java.util.Locale)>(templateName, $stack9);java.lang.String;freemarker.template.Template
l4;<com.endeca.navigation.FileLoginModule:;java.util.Map;getUsers()>;virtualinvoke;l5.<java.util.HashSet:;boolean;add(java.lang.Object)>(l4);java.lang.String;boolean
line;<net.sf.json.groovy.JsonSlurper:;net.sf.json.JSON;parse(java.io.Reader)>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.LineNumberReader:;java.lang.String;readLine()>;virtualinvoke;lines.<java.util.ArrayList:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<org.mmbase.util.magicfile.MagicParser:;void;<init>(java.lang.String)>;specialinvoke;this.<org.mmbase.util.magicfile.MagicParser:;org.mmbase.util.magicfile.Detector;createDetector(java.lang.String)>(line);java.lang.String;org.mmbase.util.magicfile.Detector
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;sb.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
base;<java.io.File:;java.lang.String;getParent()>;virtualinvoke;$stack47.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(base);java.lang.String;java.lang.StringBuffer
in;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack9.<java.util.Vector:;boolean;add(java.lang.Object)>(in);java.lang.String;boolean
l2;<java.io.File:;java.lang.String;getCanonicalPath()>;virtualinvoke;$stack7.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l2);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;output.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;output.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;output.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;output.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
baseDirStr;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;jvmVersionDirStr.<java.lang.String:;boolean;startsWith(java.lang.String)>(baseDirStr);java.lang.String;boolean
l2;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack24.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l2);java.lang.String;java.lang.StringBuffer
l2;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack19.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l2);java.lang.String;java.lang.StringBuffer
line;<java.io.LineNumberReader:;java.lang.String;readLine()>;staticinvoke;<org.apache.commons.collections.ExtendedProperties:;boolean;access$000(java.lang.String)>(line);java.lang.String;boolean
line;<java.io.LineNumberReader:;java.lang.String;readLine()>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.LineNumberReader:;java.lang.String;readLine()>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
l18;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;$stack170.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l18);java.lang.String;java.lang.StringBuffer
l18;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;$stack82.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l18);java.lang.String;java.lang.StringBuffer
l18;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;$stack86.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l18);java.lang.String;java.lang.StringBuffer
line;<org.apache.axis.components.compiler.Javac:;java.util.List;parseModernStream(java.io.BufferedReader)>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.apache.axis.components.compiler.Javac:;java.util.List;parseClassicStream(java.io.BufferedReader)>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
versionStr;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<com.fasterxml.jackson.core.util.VersionUtil:;com.fasterxml.jackson.core.Version;parseVersion(java.lang.String,java.lang.String,java.lang.String)>(versionStr, groupStr, artifactStr);java.lang.String;com.fasterxml.jackson.core.Version
groupStr;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<com.fasterxml.jackson.core.util.VersionUtil:;com.fasterxml.jackson.core.Version;parseVersion(java.lang.String,java.lang.String,java.lang.String)>(versionStr, groupStr, artifactStr);java.lang.String;com.fasterxml.jackson.core.Version
artifactStr;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<com.fasterxml.jackson.core.util.VersionUtil:;com.fasterxml.jackson.core.Version;parseVersion(java.lang.String,java.lang.String,java.lang.String)>(versionStr, groupStr, artifactStr);java.lang.String;com.fasterxml.jackson.core.Version
s;<com.sun.mail.pop3.Protocol:;void;setCapabilities(java.io.InputStream)>;interfaceinvoke;$stack12.<java.util.Map:;java.lang.Object;put(java.lang.Object,java.lang.Object)>($stack13, s);java.lang.String;java.lang.Object
line;<java.io.DataInputStream:;java.lang.String;readLine()>;virtualinvoke;$stack23.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.DataInputStream:;java.lang.String;readLine()>;virtualinvoke;$stack12.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<com.amazonaws.services.s3.internal.Mimetypes:;void;loadAndReplaceMimetypes(java.io.InputStream)>;virtualinvoke;$stack20.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
src;<java.io.File:;java.lang.String;getPath()>;interfaceinvoke;img_provider.<com.itextpdf.text.html.simpleparser.ImageProvider:;com.itextpdf.text.Image;getImage(java.lang.String,java.util.Map,com.itextpdf.text.html.simpleparser.ChainedProperties,com.itextpdf.text.DocListener)>(src, attrs, chain, document);java.lang.String;com.itextpdf.text.Image
src;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;img_store.<java.util.HashMap:;java.lang.Object;get(java.lang.Object)>(src);java.lang.String;java.lang.Object
src;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;$stack72.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(src);java.lang.String;java.lang.StringBuilder
src;<java.io.File:;java.lang.String;getPath()>;staticinvoke;<com.itextpdf.text.Image:;com.itextpdf.text.Image;getInstance(java.lang.String)>(src);java.lang.String;com.itextpdf.text.Image
name;<java.io.File:;java.lang.String;getName()>;staticinvoke;<org.apache.commons.io.FilenameUtils:;boolean;wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(name, $stack9, $stack8);java.lang.String;boolean
line;<gov.nih.nci.logging.api.appender.jdbc.JDBCAppenderFilter:;void;init()>;interfaceinvoke;$stack9.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack53.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack30.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack34.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack38.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;jsf.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;jsf.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;lines.<java.util.ArrayList:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line1;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack56.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line1);java.lang.String;java.lang.StringBuffer
line;<org.exolab.castor.util.ChangeLog2XML:;org.exolab.castor.util.ChangeLog2XML$Changelog;parse(java.io.File)>;virtualinvoke;buffer.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.apache.axis.SOAPPart:;void;setContent(javax.xml.transform.Source)>;virtualinvoke;sb.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.quartz.jobs.NativeJob$StreamConsumer:;void;run()>;virtualinvoke;$stack26.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.quartz.jobs.NativeJob$StreamConsumer:;void;run()>;virtualinvoke;$stack17.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.apache.ibatis.jdbc.ScriptRunner:;void;executeFullScript(java.io.Reader)>;virtualinvoke;script.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<org.apache.ibatis.jdbc.ScriptRunner:;void;executeLineByLine(java.io.Reader)>;specialinvoke;this.<org.apache.ibatis.jdbc.ScriptRunner:;java.lang.StringBuffer;handleLine(java.lang.StringBuffer,java.lang.String)>(command, line);java.lang.String;java.lang.StringBuffer
rp;<com.mchange.v2.cfg.MultiPropertiesConfig:;com.mchange.v2.cfg.MultiPropertiesConfig;readVmConfig()>;virtualinvoke;$stack23.<java.lang.String:;boolean;equals(java.lang.Object)>(rp);java.lang.String;boolean
rp;<com.mchange.v2.cfg.MultiPropertiesConfig:;com.mchange.v2.cfg.MultiPropertiesConfig;readVmConfig()>;interfaceinvoke;rps.<java.util.List:;boolean;add(java.lang.Object)>(rp);java.lang.String;boolean
l6;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;l2.<org.apache.regexp.RE:;boolean;match(java.lang.String)>(l6);java.lang.String;boolean
l2;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack11.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(l2);java.lang.String;java.lang.StringBuffer
l4;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack14.<java.lang.String:;boolean;equals(java.lang.Object)>(l4);java.lang.String;boolean
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;pattern.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack82.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack92.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
factoryClassName;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack43.<java.lang.String:;boolean;equals(java.lang.Object)>(factoryClassName);java.lang.String;boolean
factoryClassName;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<javax.ws.rs.ext.FactoryFinder:;java.lang.Object;newInstance(java.lang.String,java.lang.ClassLoader)>(factoryClassName, classLoader);java.lang.String;java.lang.Object
factoryClassName;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<javax.ws.rs.ext.FactoryFinder:;java.lang.Object;newInstance(java.lang.String,java.lang.ClassLoader)>(factoryClassName, classLoader);java.lang.String;java.lang.Object
record;<util.convert.FileHelper:;java.util.List;readRecords(java.io.File)>;interfaceinvoke;records.<java.util.List:;boolean;add(java.lang.Object)>(record);java.lang.String;boolean
userName;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<com.j_spaces.kernel.JSpaceUtilities:;boolean;isEmpty(java.lang.String,boolean)>(userName, 1);java.lang.String;boolean
password;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<com.j_spaces.kernel.JSpaceUtilities:;boolean;isEmpty(java.lang.String,boolean)>(userName, 1);java.lang.String;boolean
line;<com.gigaspaces.internal.log.InternalLogHelper:;com.gigaspaces.log.LogEntries;logEntriesDirect(java.io.File[],long,com.gigaspaces.log.LogProcessType,com.gigaspaces.log.LogEntryMatcher)>;virtualinvoke;lines.<java.util.ArrayList:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<com.gigaspaces.internal.log.InternalLogHelper:;com.gigaspaces.log.LogEntries;logEntriesDirect(java.io.File[],long,com.gigaspaces.log.LogProcessType,com.gigaspaces.log.LogEntryMatcher)>;virtualinvoke;lines.<java.util.ArrayList:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<com.gigaspaces.internal.log.InternalLogHelper:;com.gigaspaces.log.LogEntries;logEntriesDirect(java.io.File[],long,com.gigaspaces.log.LogProcessType,com.gigaspaces.log.LogEntryMatcher)>;virtualinvoke;lines.<java.util.ArrayList:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
line;<com.gigaspaces.internal.log.InternalLogHelper:;com.gigaspaces.log.LogEntries;logEntriesDirect(java.io.File[],long,com.gigaspaces.log.LogProcessType,com.gigaspaces.log.LogEntryMatcher)>;virtualinvoke;sb.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
line;<weka.core.mathematicalexpression.Parser:;void;main(java.lang.String[])>;virtualinvoke;$stack28.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack12.<java.lang.String:;boolean;equals(java.lang.Object)>(rc);java.lang.String;boolean
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack16.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(rc);java.lang.String;java.lang.StringBuffer
line;<weka.core.xml.SerialUIDChanger:;void;changeUID(long,long,java.lang.String,java.lang.String)>;virtualinvoke;$stack45.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuilder
s;<java.io.BufferedReader:;java.lang.String;readLine()>;staticinvoke;<java.lang.Class:;java.lang.Class;forName(java.lang.String)>(s);java.lang.String;java.lang.Class
l12;<java.util.Scanner:;java.lang.String;nextLine()>;virtualinvoke;$stack51.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(l12);java.lang.String;java.lang.StringBuilder
l12;<java.util.Scanner:;java.lang.String;nextLine()>;interfaceinvoke;l10.<java.util.List:;boolean;add(java.lang.Object)>(l12);java.lang.String;boolean
l8;<com.google.gwt.soyc.SoycDashboard:;java.util.Map;readPermutationInfo(com.google.gwt.soyc.Settings)>;interfaceinvoke;l1.<java.util.Map:;java.lang.Object;put(java.lang.Object,java.lang.Object)>(l8, l10);java.lang.String;java.lang.Object
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;$stack11.<java.util.regex.Pattern:;java.util.regex.Matcher;matcher(java.lang.CharSequence)>(line);java.lang.String;java.util.regex.Matcher
absPath;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack18.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(absPath);java.lang.String;java.lang.StringBuilder
absPath;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack25.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(absPath);java.lang.String;java.lang.StringBuilder
line;<java.io.BufferedReader:;java.lang.String;readLine()>;interfaceinvoke;lines.<java.util.List:;boolean;add(java.lang.Object)>(line);java.lang.String;boolean
path;<java.io.File:;java.lang.String;getAbsolutePath()>;staticinvoke;<org.codehaus.plexus.util.StringUtils:;java.lang.String[];split(java.lang.String,java.lang.String)>(path, .);java.lang.String;java.lang.String[]
type;<com.badlogic.gdx.utils.UBJsonReader:;com.badlogic.gdx.utils.JsonValue;parseArray(java.io.DataInputStream)>;virtualinvoke;this.<com.badlogic.gdx.utils.UBJsonReader:;com.badlogic.gdx.utils.JsonValue;parse(java.io.DataInputStream,byte)>(din, type);byte;com.badlogic.gdx.utils.JsonValue
type;<java.io.DataInputStream:;byte;readByte()>;virtualinvoke;this.<com.badlogic.gdx.utils.UBJsonReader:;java.lang.String;parseString(java.io.DataInputStream,boolean,byte)>(din, type);byte;java.lang.String
dataType;<java.io.DataInputStream:;byte;readByte()>;virtualinvoke;this.<com.badlogic.gdx.utils.UBJsonReader:;com.badlogic.gdx.utils.JsonValue;parse(java.io.DataInputStream,byte)>(din, dataType);byte;com.badlogic.gdx.utils.JsonValue
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack12.<java.lang.String:;boolean;equals(java.lang.Object)>(rc);java.lang.String;boolean
rc;<java.io.DataInputStream:;java.lang.String;readUTF()>;virtualinvoke;$stack16.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(rc);java.lang.String;java.lang.StringBuffer
l2;<java.io.DataInputStream:;byte;readByte()>;virtualinvoke;$stack13.<java.lang.StringBuilder:;java.lang.StringBuilder;append(int)>(l2);byte;java.lang.StringBuilder
line;<org.codehaus.plexus.archiver.DotDirectiveArchiveFinalizer:;void;finalizeArchiveCreation(org.codehaus.plexus.archiver.Archiver)>;staticinvoke;<org.codehaus.plexus.util.StringUtils:;java.lang.String[];split(java.lang.String,java.lang.String)>(line,;java.lang.String;java.lang.String[]
line;<java.io.BufferedReader:;java.lang.String;readLine()>;virtualinvoke;prolog.<java.lang.StringBuffer:;java.lang.StringBuffer;append(java.lang.String)>(line);java.lang.String;java.lang.StringBuffer
s;<net.minecraft.client.gui.GuiMainMenu:;void;<init>()>;virtualinvoke;arraylist.<java.util.ArrayList:;boolean;add(java.lang.Object)>(s);java.lang.String;boolean
l5;<java.io.File:;java.lang.String;getPath()>;virtualinvoke;l2.<java.lang.String:;boolean;startsWith(java.lang.String)>(l5);java.lang.String;boolean
l6;<java.io.File:;java.lang.String;getAbsolutePath()>;virtualinvoke;$stack17.<java.lang.StringBuilder:;java.lang.StringBuilder;append(java.lang.String)>(l6);java.lang.String;java.lang.StringBuilder
