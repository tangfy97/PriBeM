<java.io.DataOutput: void write(byte[],int,int)> -> _SINK_
<com.fasterxml.jackson.core.util.JsonGeneratorDelegate: com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)> -> _SINK_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.net.Uri,androidx.print.PrintHelper$OnPrintFinishCallback)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher$HttpUrlConnectionFactory: java.net.HttpURLConnection build(java.net.URL)> -> _SINK_
<com.bumptech.glide.load.model.UrlLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.lang.Object,int,int)> -> _SINK_
<com.github.mangstadt.vinnie.codec.QuotedPrintableCodec: void encodeQuotedPrintable(int,java.io.ByteArrayOutputStream)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher$DefaultHttpUrlConnectionFactory: java.net.HttpURLConnection build(java.net.URL)> -> _SINK_
<com.google.android.exoplayer2.source.dash.manifest.UrlTemplate: com.google.android.exoplayer2.source.dash.manifest.UrlTemplate compile(java.lang.String)> -> _SINK_
<at.bitfire.dav4jvm.UrlUtils: okhttp3.HttpUrl omitTrailingSlash(okhttp3.HttpUrl)> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.PrintWriter: void print(boolean)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<com.github.mangstadt.vinnie.io.VObjectReader: void setDefaultQuotedPrintableCharset(java.nio.charset.Charset)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: java.lang.String getUrl(java.lang.Object,int,int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<com.google.android.exoplayer2.source.dash.manifest.UrlTemplate: java.lang.String buildUri(java.lang.String,long,int,long)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame$1: com.google.android.exoplayer2.metadata.id3.UrlLinkFrame createFromParcel(android.os.Parcel)> -> _SINK_
<com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory: com.bumptech.glide.load.model.ModelLoader build(android.content.Context,com.bumptech.glide.load.model.GenericLoaderFactory)> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame: void <init>(android.os.Parcel)> -> _SINK_
<com.bumptech.glide.load.model.GlideUrl: void <init>(java.net.URL,com.bumptech.glide.load.model.Headers)> -> _SINK_
<com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.lang.Object,int,int)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame$1: java.lang.Object[] newArray(int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat: void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,int)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.google.android.exoplayer2.util.EventLogger: void printMetadata(com.google.android.exoplayer2.metadata.Metadata,java.lang.String)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SINK_
<com.google.android.exoplayer2.source.dash.manifest.UrlTemplate: int parseTemplate(java.lang.String,java.lang.String[],int[],java.lang.String[])> -> _SINK_
<com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader: void <init>(com.bumptech.glide.load.model.ModelCache)> -> _SINK_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.graphics.Bitmap,androidx.print.PrintHelper$OnPrintFinishCallback)> -> _SINK_
<com.bumptech.glide.load.model.GlideUrl: void <init>(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream getStreamForSuccessfulRequest(java.net.HttpURLConnection)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream loadData(com.bumptech.glide.Priority)> -> _SINK_
<com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(com.bumptech.glide.load.model.GlideUrl,int,int)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<com.google.android.exoplayer2.source.dash.manifest.UrlTemplate: void <init>(java.lang.String[],int[],java.lang.String[],int)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<com.bumptech.glide.load.model.GlideUrl: void <init>(java.lang.String,com.bumptech.glide.load.model.Headers)> -> _SINK_
<com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader$Factory: com.bumptech.glide.load.model.ModelLoader build(android.content.Context,com.bumptech.glide.load.model.GenericLoaderFactory)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: void <init>(com.bumptech.glide.load.model.GlideUrl,com.bumptech.glide.load.data.HttpUrlFetcher$HttpUrlConnectionFactory)> -> _SINK_
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelCache)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.lang.Object,int,int)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: void <init>(com.bumptech.glide.load.model.GlideUrl)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.lang.Object loadData(com.bumptech.glide.Priority)> -> _SINK_
<com.github.mangstadt.vinnie.io.VObjectReader: void decodeQuotedPrintable(com.github.mangstadt.vinnie.VObjectProperty,com.github.mangstadt.vinnie.io.VObjectDataListener)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<com.google.android.exoplayer2.util.EventLogger: void printInternalError(com.google.android.exoplayer2.analytics.AnalyticsListener$EventTime,java.lang.String,java.lang.Exception)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.model.GlideUrl: void <init>(java.net.URL)> -> _SINK_
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)> -> _SINK_
<java.io.StringWriter: void write(char[],int,int)> -> _SINK_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.net.Uri)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void printVPath(int)> -> _SINK_
<at.bitfire.dav4jvm.UrlUtils: okhttp3.HttpUrl withTrailingSlash(okhttp3.HttpUrl)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher$DefaultHttpUrlConnectionFactory: void <init>(com.bumptech.glide.load.data.HttpUrlFetcher$1)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: void <init>(android.content.Context,com.bumptech.glide.load.model.ModelCache)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[])> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame$1: com.google.android.exoplayer2.metadata.id3.UrlLinkFrame[] newArray(int)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: void <init>(android.content.Context)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)> -> _SINK_
<androidx.core.hardware.fingerprint.FingerprintManagerCompat: android.hardware.fingerprint.FingerprintManager getFingerprintManagerOrNull(android.content.Context)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: com.bumptech.glide.load.model.Headers getHeaders(java.lang.Object,int,int)> -> _SINK_
<com.google.android.exoplayer2.metadata.id3.UrlLinkFrame$1: java.lang.Object createFromParcel(android.os.Parcel)> -> _SINK_
<androidx.constraintlayout.motion.widget.Debug: void printStack(java.lang.String,int)> -> _SINK_
<com.bumptech.glide.load.model.UrlLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.net.URL,int,int)> -> _SINK_
<androidx.core.util.TimeUtils: int printField(char[],int,char,int,boolean,int)> -> _SINK_
<androidx.print.PrintHelper: void printBitmap(java.lang.String,android.graphics.Bitmap)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<at.bitfire.dav4jvm.UrlUtils: java.lang.String hostToDomain(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.model.UrlLoader: void <init>(com.bumptech.glide.load.model.ModelLoader)> -> _SINK_
<java.io.DataOutput: void write(int)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream loadDataWithRedirects(java.net.URL,int,java.net.URL,java.util.Map)> -> _SINK_
<com.bumptech.glide.load.model.stream.BaseGlideUrlLoader: void <init>(com.bumptech.glide.load.model.ModelLoader)> -> _SINK_
<com.bumptech.glide.load.model.stream.StreamUrlLoader: void <init>(com.bumptech.glide.load.model.ModelLoader)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
