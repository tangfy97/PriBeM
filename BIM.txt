<com.bumptech.glide.load.engine.CacheLoader: com.bumptech.glide.load.engine.Resource load(com.bumptech.glide.load.Key,com.bumptech.glide.load.ResourceDecoder,int,int)> -> _SINK_
<org.apache.hc.core5.http.io.entity.BufferedHttpEntity: void <init>(org.apache.hc.core5.http.HttpEntity)> -> _SINK_
<org.apache.commons.io.IOUtils: byte[] toByteArray(java.net.URLConnection)> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceEncoder: boolean writeDataDirect(byte[],java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFile(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream loadDataWithRedirects(java.net.URL,int,java.net.URL,java.util.Map)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimMemory(int)> -> _SINK_
<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy$1: void handle(java.lang.Throwable)> -> _SINK_
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.InputStream,java.nio.charset.Charset)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: int readBlock()> -> _SINK_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadKeyMaterial(java.net.URL,char[],char[],org.apache.hc.core5.ssl.PrivateKeyStrategy)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)> -> _SINK_
<com.bumptech.glide.load.data.HttpUrlFetcher: java.io.InputStream getStreamForSuccessfulRequest(java.net.HttpURLConnection)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifHeaderParser: int readBlock()> -> _SINK_
<com.bumptech.glide.Glide: java.io.File getPhotoCacheDir(android.content.Context,java.lang.String)> -> _SINK_
<com.bumptech.glide.request.GenericRequest: void onException(java.lang.Exception)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dumpUnchecked()> -> _SINK_
<com.bumptech.glide.load.engine.EngineRunnable: com.bumptech.glide.load.engine.Resource decodeFromCache()> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.cache.DiskCache$Writer)> -> _SINK_
<org.apache.hc.core5.ssl.SSLContextBuilder: org.apache.hc.core5.ssl.SSLContextBuilder loadTrustMaterial(java.net.URL,char[],org.apache.hc.core5.ssl.TrustStrategy)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: boolean put(android.graphics.Bitmap)> -> _SINK_
<org.apache.commons.io.file.PathUtils: java.nio.file.Path copyFileToDirectory(java.net.URL,java.nio.file.Path,java.nio.file.CopyOption[])> -> _SINK_
<com.fasterxml.jackson.core.TokenStreamFactory: java.io.InputStream _optimizedStreamFromURL(java.net.URL)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: android.graphics.Bitmap getDirty(int,int,android.graphics.Bitmap$Config)> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceDecoder: byte[] inputStreamToBytes(java.io.InputStream)> -> _SINK_
<com.bumptech.glide.load.engine.Engine: void logWithTimeAndKey(java.lang.String,long,com.bumptech.glide.load.Key)> -> _SINK_
<com.bumptech.glide.load.data.AssetPathFetcher: void cleanup()> -> _SINK_
<com.bumptech.glide.load.data.LocalUriFetcher: void cleanup()> -> _SINK_
<org.apache.commons.io.IOUtils: long copy(java.net.URL,java.io.OutputStream)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void delete(com.bumptech.glide.load.Key)> -> _SINK_
<com.bumptech.glide.load.model.ResourceLoader: com.bumptech.glide.load.data.DataFetcher getResourceFetcher(java.lang.Integer,int,int)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: int fillbuf(java.io.InputStream,byte[])> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void clearMemory()> -> _SINK_
<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)> -> _SINK_
<org.apache.commons.io.input.Tailer: long readLines(java.io.RandomAccessFile)> -> _SINK_
<com.bumptech.glide.load.model.ImageVideoModelLoader$ImageVideoFetcher: com.bumptech.glide.load.model.ImageVideoWrapper loadData(com.bumptech.glide.Priority)> -> _SINK_
<org.apache.hc.client5.http.impl.auth.BasicAuthCache: void put(org.apache.hc.core5.http.HttpHost,org.apache.hc.client5.http.auth.AuthScheme)> -> _SINK_
<org.apache.hc.client5.http.entity.mime.AbstractMultipartFormat: long getTotalLength()> -> _SINK_
<com.bumptech.glide.load.data.MediaStoreThumbFetcher$ThumbnailStreamOpener: int getOrientation(android.content.Context,android.net.Uri)> -> _SINK_
<org.apache.hc.core5.http.io.entity.SerializableEntity: java.io.InputStream getContent()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageVideoBitmapDecoder: com.bumptech.glide.load.engine.Resource decode(com.bumptech.glide.load.model.ImageVideoWrapper,int,int)> -> _SINK_
<com.bumptech.glide.request.GenericRequest: void logV(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File get(com.bumptech.glide.load.Key)> -> _SINK_
<org.apache.commons.io.IOUtils: char[] toCharArray(java.io.Reader)> -> _SINK_
<com.bumptech.glide.request.target.ViewTarget$SizeDeterminer$SizeDeterminerLayoutListener: boolean onPreDraw()> -> _SINK_
<org.apache.commons.io.input.XmlStreamReader: void <init>(java.net.URLConnection,java.lang.String)> -> _SINK_
<org.apache.commons.io.FileUtils: void copyURLToFile(java.net.URL,java.io.File,int,int)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getOrientation(java.lang.String)> -> _SINK_
<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)> -> _SINK_
<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)> -> _SINK_
<com.bumptech.glide.load.engine.DecodeJob$SourceWriter: boolean write(java.io.File)> -> _SINK_
<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void clear()> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: int read(java.io.InputStream,int)> -> _SINK_
<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: void <init>(android.content.Context,android.app.ActivityManager,com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)> -> _SINK_
<org.apache.hc.core5.http.io.entity.EntityTemplate: java.io.InputStream getContent()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap$Config getConfig(java.io.InputStream,com.bumptech.glide.load.DecodeFormat)> -> _SINK_
<org.apache.hc.client5.http.entity.mime.HttpRFC7578Multipart$PercentCodec: byte[] encode(byte[])> -> _SINK_
<com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)> -> _SINK_
<com.bumptech.glide.gifdecoder.GifHeaderParser: int[] readColorTable(int)> -> _SINK_
<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()> -> _SINK_
<org.apache.hc.client5.http.entity.mime.MultipartFormEntity: java.io.InputStream getContent()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap rotateImage(android.graphics.Bitmap,int)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.BitmapEncoder: boolean encode(com.bumptech.glide.load.engine.Resource,java.io.OutputStream)> -> _SINK_
<com.bumptech.glide.util.ContentLengthInputStream: int parseContentLength(java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> -> _SINK_
<com.bumptech.glide.load.engine.EngineRunnable: void run()> -> _SINK_
<com.bumptech.glide.load.engine.prefill.BitmapPreFillRunner: boolean allocate()> -> _SINK_
<com.bumptech.glide.manager.RequestManagerRetriever: boolean handleMessage(android.os.Message)> -> _SINK_
<com.bumptech.glide.load.model.StreamEncoder: boolean encode(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<com.bumptech.glide.gifencoder.AnimatedGifEncoder: void getImagePixels()> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] getExifSegment()> -> _SINK_
<com.bumptech.glide.gifdecoder.GifDecoder: android.graphics.Bitmap getNextFrame()> -> _SINK_
<org.apache.hc.client5.http.psl.PublicSuffixMatcherLoader: org.apache.hc.client5.http.psl.PublicSuffixMatcher load(java.net.URL)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: boolean shouldUsePool(java.io.InputStream)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap fitCenter(android.graphics.Bitmap,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int)> -> _SINK_
<com.bumptech.glide.load.resource.gif.GifResourceEncoder: boolean encode(com.bumptech.glide.load.engine.Resource,java.io.OutputStream)> -> _SINK_
<com.bumptech.glide.load.data.MediaStoreThumbFetcher: java.io.InputStream openThumbInputStream(com.bumptech.glide.load.data.MediaStoreThumbFetcher$ThumbnailStreamOpener)> -> _SINK_
<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decode(java.io.InputStream,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,com.bumptech.glide.load.DecodeFormat)> -> _SINK_
