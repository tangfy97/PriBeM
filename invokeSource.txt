<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int read(byte[],long,int,int)>
<org.springframework.boot.loader.archive.JarFileArchive: java.io.File getTempUnpackDirectory()>
<org.springframework.boot.loader.archive.JarFileArchive: java.io.File createUnpackDirectory(java.io.File)>
<org.springframework.boot.loader.jar.JarFile: java.security.Permission getPermission()>
<org.springframework.boot.loader.jar.Handler: boolean isUrlInJarFile(java.net.URL,org.springframework.boot.loader.jar.JarFile)>
<org.springframework.boot.loader.ClassPathIndexFile: java.net.URL asUrl(java.lang.String)>
<org.springframework.boot.loader.ClassPathIndexFile: java.io.File asFile(java.net.URL)>
<org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator: java.util.Iterator listFiles(java.io.File)>
<org.springframework.boot.loader.archive.JarFileArchive: org.springframework.boot.loader.archive.Archive getUnpackedNestedArchive(java.util.jar.JarEntry)>
<org.springframework.boot.loader.jar.Handler: java.lang.String getFileFromContext(java.net.URL,java.lang.String)>
<org.springframework.boot.loader.Launcher: void launch(java.lang.String[])>
<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: int readByte(long)>
<org.springframework.boot.loader.archive.ExplodedArchive: java.net.URL getUrl()>
<BOOT-INF.classes.org.owasp.webwolf.FileServer: org.springframework.web.servlet.ModelAndView getFiles(javax.servlet.http.HttpServletRequest)>
<org.springframework.boot.loader.ClassPathIndexFile: java.util.List loadLines(java.io.InputStream)>
<org.springframework.boot.loader.jar.Handler: void captureJarContextUrl()>
<BOOT-INF.classes.org.owasp.webwolf.jwt.JWTToken: org.owasp.webwolf.jwt.JWTToken decode(java.lang.String,java.lang.String)>
<org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives: org.springframework.boot.loader.archive.Archive getArchive(java.io.File)>
<org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator: org.springframework.boot.loader.archive.ExplodedArchive$FileEntry getFileEntry(java.io.File)>
<org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator: boolean isListable(org.springframework.boot.loader.archive.ExplodedArchive$FileEntry)>
<org.springframework.boot.loader.jar.JarURLConnection: java.net.URL buildJarFileUrl()>
<org.springframework.boot.loader.LaunchedURLClassLoader: java.lang.Object lambda$definePackage$0(java.lang.String,java.lang.String)>
<org.springframework.boot.loader.jar.Handler: org.springframework.boot.loader.jar.JarFile getRootJarFileFromUrl(java.net.URL)>
<org.springframework.boot.loader.jar.JarURLConnection: java.lang.Object getContent()>
<org.springframework.boot.loader.LaunchedURLClassLoader: java.lang.Class loadClassInLaunchedClassLoader(java.lang.String)>
<org.springframework.boot.loader.LaunchedURLClassLoader: java.net.URL findResource(java.lang.String)>
<org.springframework.boot.loader.util.SystemPropertyUtils: java.lang.String getProperty(java.lang.String,java.lang.String,java.lang.String)>
<org.springframework.boot.loader.jar.JarFile: void registerUrlProtocolHandler()>
<org.springframework.boot.loader.archive.JarFileArchive: void unpack(java.util.jar.JarEntry,java.io.File)>
<org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives: boolean isNestedArchivePath(java.io.File)>
<org.springframework.boot.loader.archive.ExplodedArchive$AbstractIterator: org.springframework.boot.loader.archive.ExplodedArchive$FileEntry poll()>
<org.springframework.boot.loader.jar.JarFile: java.net.URL getUrl()>
<org.springframework.boot.loader.PropertiesLauncher: java.io.InputStream getURLResource(java.lang.String)>
<org.springframework.boot.loader.jarmode.JarModeLauncher: void main(java.lang.String[])>
<org.springframework.boot.loader.jar.Handler: int hashCode(java.net.URL)>
<BOOT-INF.classes.org.owasp.webwolf.WebWolf: void main(java.lang.String[])>
<org.springframework.boot.loader.PropertiesLauncher$ClassPathArchives: java.util.List getNestedArchives(java.lang.String)>
<org.springframework.boot.loader.LaunchedURLClassLoader: void clearCache()>
<org.springframework.boot.loader.jar.JarURLConnection: org.springframework.boot.loader.jar.JarURLConnection get(java.net.URL,org.springframework.boot.loader.jar.JarFile)>
<org.springframework.boot.loader.data.RandomAccessDataFile$FileAccess: void openIfNecessary()>
<org.springframework.boot.loader.jar.Handler: boolean sameFile(java.net.URL,java.net.URL)>
